import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { TRANSACTIONS_BASE_PATH } from '../variables';
import { TransactionsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class TransactionClientHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new TransactionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getEnumValuesByAttributeName(requestParameters, observe = 'body', reportProgress = false, options) {
        const _attributeName = requestParameters["attributeName"];
        if (_attributeName === null || _attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling getEnumValuesByAttributeName.');
        }
        const _subDomain = requestParameters["subDomain"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subDomain !== undefined && _subDomain !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subDomain, 'subDomain');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/transactions/enumValues/${encodeURIComponent(String(_attributeName))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getEnumValuesByAttributeNameUrl(requestParameters) {
        const _attributeName = requestParameters["attributeName"];
        if (_attributeName === null || _attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling getEnumValuesByAttributeName.');
        }
        const _subDomain = requestParameters["subDomain"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_subDomain !== undefined && _subDomain !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _subDomain, 'subDomain');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/transactions/enumValues/${encodeURIComponent(String(_attributeName))}${queryString ? `?${queryString}` : ''}`;
    }
    getTransactionCheckImages(requestParameters, observe = 'body', reportProgress = false, options) {
        const _transactionId = requestParameters["transactionId"];
        if (_transactionId === null || _transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling getTransactionCheckImages.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/transactions/${encodeURIComponent(String(_transactionId))}/check-images`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTransactionCheckImagesUrl(requestParameters) {
        const _transactionId = requestParameters["transactionId"];
        if (_transactionId === null || _transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling getTransactionCheckImages.');
        }
        return `${this.configuration.basePath}/client-api/v2/transactions/${encodeURIComponent(String(_transactionId))}/check-images`;
    }
    getTransactions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _amountGreaterThan = requestParameters["amountGreaterThan"];
        const _amountLessThan = requestParameters["amountLessThan"];
        const _bookingDateGreaterThan = requestParameters["bookingDateGreaterThan"];
        const _bookingDateLessThan = requestParameters["bookingDateLessThan"];
        const _types = requestParameters["types"];
        const _description = requestParameters["description"];
        const _reference = requestParameters["reference"];
        const _typeGroups = requestParameters["typeGroups"];
        const _counterPartyName = requestParameters["counterPartyName"];
        const _counterPartyAccountNumber = requestParameters["counterPartyAccountNumber"];
        const _creditDebitIndicator = requestParameters["creditDebitIndicator"];
        const _categories = requestParameters["categories"];
        const _billingStatus = requestParameters["billingStatus"];
        const _state = requestParameters["state"];
        const _currency = requestParameters["currency"];
        const _notes = requestParameters["notes"];
        const _id = requestParameters["id"];
        const _arrangementId = requestParameters["arrangementId"];
        const _arrangementsIds = requestParameters["arrangementsIds"];
        const _fromCheckSerialNumber = requestParameters["fromCheckSerialNumber"];
        const _toCheckSerialNumber = requestParameters["toCheckSerialNumber"];
        const _checkSerialNumbers = requestParameters["checkSerialNumbers"];
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _secDirection = requestParameters["secDirection"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_amountGreaterThan !== undefined && _amountGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountGreaterThan, 'amountGreaterThan');
        }
        if (_amountLessThan !== undefined && _amountLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountLessThan, 'amountLessThan');
        }
        if (_bookingDateGreaterThan !== undefined && _bookingDateGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateGreaterThan, 'bookingDateGreaterThan');
        }
        if (_bookingDateLessThan !== undefined && _bookingDateLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateLessThan, 'bookingDateLessThan');
        }
        if (_types) {
            _types.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'types');
            });
        }
        if (_description !== undefined && _description !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _description, 'description');
        }
        if (_reference !== undefined && _reference !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _reference, 'reference');
        }
        if (_typeGroups) {
            _typeGroups.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'typeGroups');
            });
        }
        if (_counterPartyName !== undefined && _counterPartyName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyName, 'counterPartyName');
        }
        if (_counterPartyAccountNumber !== undefined && _counterPartyAccountNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyAccountNumber, 'counterPartyAccountNumber');
        }
        if (_creditDebitIndicator !== undefined && _creditDebitIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitIndicator, 'creditDebitIndicator');
        }
        if (_categories) {
            _categories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'categories');
            });
        }
        if (_billingStatus !== undefined && _billingStatus !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _billingStatus, 'billingStatus');
        }
        if (_state !== undefined && _state !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _state, 'state');
        }
        if (_currency !== undefined && _currency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currency, 'currency');
        }
        if (_notes !== undefined && _notes !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _notes, 'notes');
        }
        if (_id !== undefined && _id !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _id, 'id');
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_arrangementsIds) {
            _arrangementsIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementsIds');
            });
        }
        if (_fromCheckSerialNumber !== undefined && _fromCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromCheckSerialNumber, 'fromCheckSerialNumber');
        }
        if (_toCheckSerialNumber !== undefined && _toCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toCheckSerialNumber, 'toCheckSerialNumber');
        }
        if (_checkSerialNumbers) {
            _checkSerialNumbers.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'checkSerialNumbers');
            });
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_secDirection !== undefined && _secDirection !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _secDirection, 'secDirection');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/transactions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTransactionsUrl(requestParameters) {
        const _amountGreaterThan = requestParameters["amountGreaterThan"];
        const _amountLessThan = requestParameters["amountLessThan"];
        const _bookingDateGreaterThan = requestParameters["bookingDateGreaterThan"];
        const _bookingDateLessThan = requestParameters["bookingDateLessThan"];
        const _types = requestParameters["types"];
        const _description = requestParameters["description"];
        const _reference = requestParameters["reference"];
        const _typeGroups = requestParameters["typeGroups"];
        const _counterPartyName = requestParameters["counterPartyName"];
        const _counterPartyAccountNumber = requestParameters["counterPartyAccountNumber"];
        const _creditDebitIndicator = requestParameters["creditDebitIndicator"];
        const _categories = requestParameters["categories"];
        const _billingStatus = requestParameters["billingStatus"];
        const _state = requestParameters["state"];
        const _currency = requestParameters["currency"];
        const _notes = requestParameters["notes"];
        const _id = requestParameters["id"];
        const _arrangementId = requestParameters["arrangementId"];
        const _arrangementsIds = requestParameters["arrangementsIds"];
        const _fromCheckSerialNumber = requestParameters["fromCheckSerialNumber"];
        const _toCheckSerialNumber = requestParameters["toCheckSerialNumber"];
        const _checkSerialNumbers = requestParameters["checkSerialNumbers"];
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _secDirection = requestParameters["secDirection"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_amountGreaterThan !== undefined && _amountGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountGreaterThan, 'amountGreaterThan');
        }
        if (_amountLessThan !== undefined && _amountLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountLessThan, 'amountLessThan');
        }
        if (_bookingDateGreaterThan !== undefined && _bookingDateGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateGreaterThan, 'bookingDateGreaterThan');
        }
        if (_bookingDateLessThan !== undefined && _bookingDateLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateLessThan, 'bookingDateLessThan');
        }
        if (_types) {
            _types.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'types');
            });
        }
        if (_description !== undefined && _description !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _description, 'description');
        }
        if (_reference !== undefined && _reference !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _reference, 'reference');
        }
        if (_typeGroups) {
            _typeGroups.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'typeGroups');
            });
        }
        if (_counterPartyName !== undefined && _counterPartyName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyName, 'counterPartyName');
        }
        if (_counterPartyAccountNumber !== undefined && _counterPartyAccountNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyAccountNumber, 'counterPartyAccountNumber');
        }
        if (_creditDebitIndicator !== undefined && _creditDebitIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitIndicator, 'creditDebitIndicator');
        }
        if (_categories) {
            _categories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'categories');
            });
        }
        if (_billingStatus !== undefined && _billingStatus !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _billingStatus, 'billingStatus');
        }
        if (_state !== undefined && _state !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _state, 'state');
        }
        if (_currency !== undefined && _currency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currency, 'currency');
        }
        if (_notes !== undefined && _notes !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _notes, 'notes');
        }
        if (_id !== undefined && _id !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _id, 'id');
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_arrangementsIds) {
            _arrangementsIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementsIds');
            });
        }
        if (_fromCheckSerialNumber !== undefined && _fromCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromCheckSerialNumber, 'fromCheckSerialNumber');
        }
        if (_toCheckSerialNumber !== undefined && _toCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toCheckSerialNumber, 'toCheckSerialNumber');
        }
        if (_checkSerialNumbers) {
            _checkSerialNumbers.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'checkSerialNumbers');
            });
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_secDirection !== undefined && _secDirection !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _secDirection, 'secDirection');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/transactions${queryString ? `?${queryString}` : ''}`;
    }
    getTransactionsExport(requestParameters, observe = 'body', reportProgress = false, options) {
        const _amountGreaterThan = requestParameters["amountGreaterThan"];
        const _amountLessThan = requestParameters["amountLessThan"];
        const _bookingDateGreaterThan = requestParameters["bookingDateGreaterThan"];
        const _bookingDateLessThan = requestParameters["bookingDateLessThan"];
        const _types = requestParameters["types"];
        const _categories = requestParameters["categories"];
        const _description = requestParameters["description"];
        const _reference = requestParameters["reference"];
        const _typeGroups = requestParameters["typeGroups"];
        const _counterPartyName = requestParameters["counterPartyName"];
        const _counterPartyAccountNumber = requestParameters["counterPartyAccountNumber"];
        const _creditDebitIndicator = requestParameters["creditDebitIndicator"];
        const _billingStatus = requestParameters["billingStatus"];
        const _state = requestParameters["state"];
        const _currency = requestParameters["currency"];
        const _notes = requestParameters["notes"];
        const _id = requestParameters["id"];
        const _arrangementId = requestParameters["arrangementId"];
        const _arrangementsIds = requestParameters["arrangementsIds"];
        const _fromCheckSerialNumber = requestParameters["fromCheckSerialNumber"];
        const _toCheckSerialNumber = requestParameters["toCheckSerialNumber"];
        const _checkSerialNumbers = requestParameters["checkSerialNumbers"];
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _secDirection = requestParameters["secDirection"];
        const _exportType = requestParameters["exportType"];
        const _locale = requestParameters["locale"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_amountGreaterThan !== undefined && _amountGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountGreaterThan, 'amountGreaterThan');
        }
        if (_amountLessThan !== undefined && _amountLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountLessThan, 'amountLessThan');
        }
        if (_bookingDateGreaterThan !== undefined && _bookingDateGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateGreaterThan, 'bookingDateGreaterThan');
        }
        if (_bookingDateLessThan !== undefined && _bookingDateLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateLessThan, 'bookingDateLessThan');
        }
        if (_types) {
            _types.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'types');
            });
        }
        if (_categories) {
            _categories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'categories');
            });
        }
        if (_description !== undefined && _description !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _description, 'description');
        }
        if (_reference !== undefined && _reference !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _reference, 'reference');
        }
        if (_typeGroups) {
            _typeGroups.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'typeGroups');
            });
        }
        if (_counterPartyName !== undefined && _counterPartyName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyName, 'counterPartyName');
        }
        if (_counterPartyAccountNumber !== undefined && _counterPartyAccountNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyAccountNumber, 'counterPartyAccountNumber');
        }
        if (_creditDebitIndicator !== undefined && _creditDebitIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitIndicator, 'creditDebitIndicator');
        }
        if (_billingStatus !== undefined && _billingStatus !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _billingStatus, 'billingStatus');
        }
        if (_state !== undefined && _state !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _state, 'state');
        }
        if (_currency !== undefined && _currency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currency, 'currency');
        }
        if (_notes !== undefined && _notes !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _notes, 'notes');
        }
        if (_id !== undefined && _id !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _id, 'id');
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_arrangementsIds) {
            _arrangementsIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementsIds');
            });
        }
        if (_fromCheckSerialNumber !== undefined && _fromCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromCheckSerialNumber, 'fromCheckSerialNumber');
        }
        if (_toCheckSerialNumber !== undefined && _toCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toCheckSerialNumber, 'toCheckSerialNumber');
        }
        if (_checkSerialNumbers) {
            _checkSerialNumbers.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'checkSerialNumbers');
            });
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_secDirection !== undefined && _secDirection !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _secDirection, 'secDirection');
        }
        if (_exportType !== undefined && _exportType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _exportType, 'exportType');
        }
        if (_locale !== undefined && _locale !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/pdf',
                'application/x-ofx',
                'text/csv',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/transactions/export`, {
            params: queryParameters,
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTransactionsExportUrl(requestParameters) {
        const _amountGreaterThan = requestParameters["amountGreaterThan"];
        const _amountLessThan = requestParameters["amountLessThan"];
        const _bookingDateGreaterThan = requestParameters["bookingDateGreaterThan"];
        const _bookingDateLessThan = requestParameters["bookingDateLessThan"];
        const _types = requestParameters["types"];
        const _categories = requestParameters["categories"];
        const _description = requestParameters["description"];
        const _reference = requestParameters["reference"];
        const _typeGroups = requestParameters["typeGroups"];
        const _counterPartyName = requestParameters["counterPartyName"];
        const _counterPartyAccountNumber = requestParameters["counterPartyAccountNumber"];
        const _creditDebitIndicator = requestParameters["creditDebitIndicator"];
        const _billingStatus = requestParameters["billingStatus"];
        const _state = requestParameters["state"];
        const _currency = requestParameters["currency"];
        const _notes = requestParameters["notes"];
        const _id = requestParameters["id"];
        const _arrangementId = requestParameters["arrangementId"];
        const _arrangementsIds = requestParameters["arrangementsIds"];
        const _fromCheckSerialNumber = requestParameters["fromCheckSerialNumber"];
        const _toCheckSerialNumber = requestParameters["toCheckSerialNumber"];
        const _checkSerialNumbers = requestParameters["checkSerialNumbers"];
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        const _secDirection = requestParameters["secDirection"];
        const _exportType = requestParameters["exportType"];
        const _locale = requestParameters["locale"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_amountGreaterThan !== undefined && _amountGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountGreaterThan, 'amountGreaterThan');
        }
        if (_amountLessThan !== undefined && _amountLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _amountLessThan, 'amountLessThan');
        }
        if (_bookingDateGreaterThan !== undefined && _bookingDateGreaterThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateGreaterThan, 'bookingDateGreaterThan');
        }
        if (_bookingDateLessThan !== undefined && _bookingDateLessThan !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _bookingDateLessThan, 'bookingDateLessThan');
        }
        if (_types) {
            _types.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'types');
            });
        }
        if (_categories) {
            _categories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'categories');
            });
        }
        if (_description !== undefined && _description !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _description, 'description');
        }
        if (_reference !== undefined && _reference !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _reference, 'reference');
        }
        if (_typeGroups) {
            _typeGroups.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'typeGroups');
            });
        }
        if (_counterPartyName !== undefined && _counterPartyName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyName, 'counterPartyName');
        }
        if (_counterPartyAccountNumber !== undefined && _counterPartyAccountNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _counterPartyAccountNumber, 'counterPartyAccountNumber');
        }
        if (_creditDebitIndicator !== undefined && _creditDebitIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitIndicator, 'creditDebitIndicator');
        }
        if (_billingStatus !== undefined && _billingStatus !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _billingStatus, 'billingStatus');
        }
        if (_state !== undefined && _state !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _state, 'state');
        }
        if (_currency !== undefined && _currency !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _currency, 'currency');
        }
        if (_notes !== undefined && _notes !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _notes, 'notes');
        }
        if (_id !== undefined && _id !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _id, 'id');
        }
        if (_arrangementId !== undefined && _arrangementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _arrangementId, 'arrangementId');
        }
        if (_arrangementsIds) {
            _arrangementsIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementsIds');
            });
        }
        if (_fromCheckSerialNumber !== undefined && _fromCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromCheckSerialNumber, 'fromCheckSerialNumber');
        }
        if (_toCheckSerialNumber !== undefined && _toCheckSerialNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toCheckSerialNumber, 'toCheckSerialNumber');
        }
        if (_checkSerialNumbers) {
            _checkSerialNumbers.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'checkSerialNumbers');
            });
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        if (_secDirection !== undefined && _secDirection !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _secDirection, 'secDirection');
        }
        if (_exportType !== undefined && _exportType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _exportType, 'exportType');
        }
        if (_locale !== undefined && _locale !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _locale, 'locale');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/transactions/export${queryString ? `?${queryString}` : ''}`;
    }
    getTransactionsExportWithPost(requestParameters, observe = 'body', reportProgress = false, options) {
        const _transactionListRequest = requestParameters["transactionListRequest"];
        if (_transactionListRequest === null || _transactionListRequest === undefined) {
            throw new Error('Required parameter transactionListRequest was null or undefined when calling getTransactionsExportWithPost.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/pdf',
                'application/x-ofx',
                'text/csv',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/transactions/export`, _transactionListRequest, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTransactionsExportWithPostUrl(requestParameters) {
        const _transactionListRequest = requestParameters["transactionListRequest"];
        if (_transactionListRequest === null || _transactionListRequest === undefined) {
            throw new Error('Required parameter transactionListRequest was null or undefined when calling getTransactionsExportWithPost.');
        }
        return `${this.configuration.basePath}/client-api/v2/transactions/export`;
    }
    getTransactionsWithPost(requestParameters, observe = 'body', reportProgress = false, options) {
        const _transactionListRequest = requestParameters["transactionListRequest"];
        if (_transactionListRequest === null || _transactionListRequest === undefined) {
            throw new Error('Required parameter transactionListRequest was null or undefined when calling getTransactionsWithPost.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/transactions`, _transactionListRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTransactionsWithPostUrl(requestParameters) {
        const _transactionListRequest = requestParameters["transactionListRequest"];
        if (_transactionListRequest === null || _transactionListRequest === undefined) {
            throw new Error('Required parameter transactionListRequest was null or undefined when calling getTransactionsWithPost.');
        }
        return `${this.configuration.basePath}/client-api/v2/transactions`;
    }
    patchTransactions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _transactionsClientPatchRequestBody = requestParameters["transactionsClientPatchRequestBody"];
        if (_transactionsClientPatchRequestBody === null || _transactionsClientPatchRequestBody === undefined) {
            throw new Error('Required parameter transactionsClientPatchRequestBody was null or undefined when calling patchTransactions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.patch(`${this.configuration.basePath}/client-api/v2/transactions`, _transactionsClientPatchRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    patchTransactionsUrl(requestParameters) {
        const _transactionsClientPatchRequestBody = requestParameters["transactionsClientPatchRequestBody"];
        if (_transactionsClientPatchRequestBody === null || _transactionsClientPatchRequestBody === undefined) {
            throw new Error('Required parameter transactionsClientPatchRequestBody was null or undefined when calling patchTransactions.');
        }
        return `${this.configuration.basePath}/client-api/v2/transactions`;
    }
}
TransactionClientHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionClientHttpService, deps: [{ token: i1.HttpClient }, { token: TRANSACTIONS_BASE_PATH, optional: true }, { token: i2.TransactionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TransactionClientHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionClientHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionClientHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TRANSACTIONS_BASE_PATH]
                }] }, { type: i2.TransactionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,