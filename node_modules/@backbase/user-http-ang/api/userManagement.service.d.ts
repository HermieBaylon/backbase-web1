import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetOwnUser } from '../model/models';
import { GetUser } from '../model/models';
import { GetUsersByLegalEntityIdsRequest } from '../model/models';
import { GetUsersList } from '../model/models';
import { LegalEntity } from '../model/models';
import { UpdatePreferredLanguage } from '../model/models';
import { UserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CheckUserExistsRequestParams {
    ["externalId"]: string;
}
export interface GetLegalEntityByExternalIdRequestParams {
    ["externalId"]: string;
}
export interface GetUserByExternalIdRequestParams {
    ["externalId"]: string;
}
export interface GetUserByIdRequestParams {
    ["internalId"]: string;
}
export interface GetUsersRequestParams {
    ["entityId"]: string;
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface GetUsersByLegalEntityIdsRequestParams {
    ["getUsersByLegalEntityIdsRequest"]: GetUsersByLegalEntityIdsRequest;
}
export interface UpdateOwnLanguageRequestParams {
    ["updatePreferredLanguage"]: UpdatePreferredLanguage;
}
export declare class UserManagementService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: UserConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: UserConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    checkUserExists(requestParameters: CheckUserExistsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    checkUserExists(requestParameters: CheckUserExistsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    checkUserExists(requestParameters: CheckUserExistsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    checkUserExistsUrl(requestParameters: CheckUserExistsRequestParams): string;
    getLegalEntityByExternalId(requestParameters: GetLegalEntityByExternalIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LegalEntity>;
    getLegalEntityByExternalId(requestParameters: GetLegalEntityByExternalIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LegalEntity>>;
    getLegalEntityByExternalId(requestParameters: GetLegalEntityByExternalIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LegalEntity>>;
    getLegalEntityByExternalIdUrl(requestParameters: GetLegalEntityByExternalIdRequestParams): string;
    getOwnUser(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetOwnUser>;
    getOwnUser(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetOwnUser>>;
    getOwnUser(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetOwnUser>>;
    getOwnUserUrl(): string;
    getUserByExternalId(requestParameters: GetUserByExternalIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetUser>;
    getUserByExternalId(requestParameters: GetUserByExternalIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetUser>>;
    getUserByExternalId(requestParameters: GetUserByExternalIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetUser>>;
    getUserByExternalIdUrl(requestParameters: GetUserByExternalIdRequestParams): string;
    getUserById(requestParameters: GetUserByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetUser>;
    getUserById(requestParameters: GetUserByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetUser>>;
    getUserById(requestParameters: GetUserByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetUser>>;
    getUserByIdUrl(requestParameters: GetUserByIdRequestParams): string;
    getUsers(requestParameters: GetUsersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<GetUser>>;
    getUsers(requestParameters: GetUsersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<GetUser>>>;
    getUsers(requestParameters: GetUsersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<GetUser>>>;
    getUsersUrl(requestParameters: GetUsersRequestParams): string;
    getUsersByLegalEntityIds(requestParameters: GetUsersByLegalEntityIdsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetUsersList>;
    getUsersByLegalEntityIds(requestParameters: GetUsersByLegalEntityIdsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetUsersList>>;
    getUsersByLegalEntityIds(requestParameters: GetUsersByLegalEntityIdsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetUsersList>>;
    getUsersByLegalEntityIdsUrl(requestParameters: GetUsersByLegalEntityIdsRequestParams): string;
    updateOwnLanguage(requestParameters: UpdateOwnLanguageRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    updateOwnLanguage(requestParameters: UpdateOwnLanguageRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    updateOwnLanguage(requestParameters: UpdateOwnLanguageRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    updateOwnLanguageUrl(requestParameters: UpdateOwnLanguageRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserManagementService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserManagementService>;
}
