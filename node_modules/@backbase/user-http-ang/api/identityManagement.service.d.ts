import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ChangePasswordRequest } from '../model/models';
import { CreateIdentityRequest } from '../model/models';
import { CreateIdentityResponse } from '../model/models';
import { GetIdentities } from '../model/models';
import { GetIdentity } from '../model/models';
import { GetIdentitySessions } from '../model/models';
import { GetPendingApproval } from '../model/models';
import { IdentityLogoutRequest } from '../model/models';
import { IdentityRequiredActionsRequest } from '../model/models';
import { IdentityStatusApprovalPending } from '../model/models';
import { RevokeIdentityAccessRequest } from '../model/models';
import { UpdateIdentityRequest } from '../model/models';
import { UpdateIdentityStatusRequest } from '../model/models';
import { UserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface ChangePasswordRequestParams {
    ["changePasswordRequest"]: ChangePasswordRequest;
}
export interface CreateIdentityRequestParams {
    ["createIdentityRequest"]: CreateIdentityRequest;
}
export interface GetIdentitiesRequestParams {
    ["externalId"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
    ["legalEntityName"]?: string;
}
export interface GetIdentityRequestParams {
    ["internalId"]: string;
}
export interface GetIdentityPendingApprovalsRequestParams {
    ["internalId"]: string;
}
export interface GetSessionsRequestParams {
    ["internalId"]: string;
}
export interface LogoutSessionsRequestParams {
    ["internalId"]: string;
    ["identityLogoutRequest"]: IdentityLogoutRequest;
}
export interface RevokeIdentityAccessRequestParams {
    ["internalId"]: string;
    ["revokeIdentityAccessRequest"]: RevokeIdentityAccessRequest;
}
export interface SendRequiredActionsRequestParams {
    ["internalId"]: string;
    ["identityRequiredActionsRequest"]: IdentityRequiredActionsRequest;
}
export interface UpdateIdentityRequestParams {
    ["internalId"]: string;
    ["updateIdentityRequest"]: UpdateIdentityRequest;
}
export interface UpdateIdentityStatusRequestParams {
    ["internalId"]: string;
    ["updateIdentityStatusRequest"]: UpdateIdentityStatusRequest;
}
export declare class IdentityManagementService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: UserConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: UserConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    changePassword(requestParameters: ChangePasswordRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    changePassword(requestParameters: ChangePasswordRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    changePassword(requestParameters: ChangePasswordRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    changePasswordUrl(requestParameters: ChangePasswordRequestParams): string;
    createIdentity(requestParameters: CreateIdentityRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CreateIdentityResponse>;
    createIdentity(requestParameters: CreateIdentityRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CreateIdentityResponse>>;
    createIdentity(requestParameters: CreateIdentityRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CreateIdentityResponse>>;
    createIdentityUrl(requestParameters: CreateIdentityRequestParams): string;
    getIdentities(requestParameters: GetIdentitiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetIdentities>;
    getIdentities(requestParameters: GetIdentitiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetIdentities>>;
    getIdentities(requestParameters: GetIdentitiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetIdentities>>;
    getIdentitiesUrl(requestParameters: GetIdentitiesRequestParams): string;
    getIdentity(requestParameters: GetIdentityRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetIdentity>;
    getIdentity(requestParameters: GetIdentityRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetIdentity>>;
    getIdentity(requestParameters: GetIdentityRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetIdentity>>;
    getIdentityUrl(requestParameters: GetIdentityRequestParams): string;
    getIdentityPendingApprovals(requestParameters: GetIdentityPendingApprovalsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<GetPendingApproval>>;
    getIdentityPendingApprovals(requestParameters: GetIdentityPendingApprovalsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<GetPendingApproval>>>;
    getIdentityPendingApprovals(requestParameters: GetIdentityPendingApprovalsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<GetPendingApproval>>>;
    getIdentityPendingApprovalsUrl(requestParameters: GetIdentityPendingApprovalsRequestParams): string;
    getSessions(requestParameters: GetSessionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetIdentitySessions>;
    getSessions(requestParameters: GetSessionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetIdentitySessions>>;
    getSessions(requestParameters: GetSessionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetIdentitySessions>>;
    getSessionsUrl(requestParameters: GetSessionsRequestParams): string;
    logoutSessions(requestParameters: LogoutSessionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    logoutSessions(requestParameters: LogoutSessionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    logoutSessions(requestParameters: LogoutSessionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    logoutSessionsUrl(requestParameters: LogoutSessionsRequestParams): string;
    revokeIdentityAccess(requestParameters: RevokeIdentityAccessRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    revokeIdentityAccess(requestParameters: RevokeIdentityAccessRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    revokeIdentityAccess(requestParameters: RevokeIdentityAccessRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    revokeIdentityAccessUrl(requestParameters: RevokeIdentityAccessRequestParams): string;
    sendRequiredActions(requestParameters: SendRequiredActionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    sendRequiredActions(requestParameters: SendRequiredActionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    sendRequiredActions(requestParameters: SendRequiredActionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    sendRequiredActionsUrl(requestParameters: SendRequiredActionsRequestParams): string;
    updateIdentity(requestParameters: UpdateIdentityRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    updateIdentity(requestParameters: UpdateIdentityRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    updateIdentity(requestParameters: UpdateIdentityRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    updateIdentityUrl(requestParameters: UpdateIdentityRequestParams): string;
    updateIdentityStatus(requestParameters: UpdateIdentityStatusRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<IdentityStatusApprovalPending>;
    updateIdentityStatus(requestParameters: UpdateIdentityStatusRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<IdentityStatusApprovalPending>>;
    updateIdentityStatus(requestParameters: UpdateIdentityStatusRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<IdentityStatusApprovalPending>>;
    updateIdentityStatusUrl(requestParameters: UpdateIdentityStatusRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IdentityManagementService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<IdentityManagementService>;
}
