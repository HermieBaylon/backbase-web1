(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/user-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["user-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    exports.GetIdentity = void 0;
    (function (GetIdentity) {
        GetIdentity.StatusEnum = {
            ENABLED: 'ENABLED',
            DISABLED: 'DISABLED',
            TEMPORARILYLOCKED: 'TEMPORARILY_LOCKED',
            DORMANT: 'DORMANT',
            INACTIVE: 'INACTIVE',
            ACCESSREVOKED: 'ACCESS_REVOKED'
        };
    })(exports.GetIdentity || (exports.GetIdentity = {}));

    exports.GetPendingApproval = void 0;
    (function (GetPendingApproval) {
        GetPendingApproval.TypeEnum = {
            UNLOCK: 'UNLOCK'
        };
    })(exports.GetPendingApproval || (exports.GetPendingApproval = {}));

    var USER_BASE_PATH = new i0.InjectionToken('USER_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var UserConfiguration = /** @class */ (function () {
        function UserConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        UserConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        UserConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        UserConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        UserConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return UserConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module UserConfiguration');

    var UserApiModule = /** @class */ (function () {
        function UserApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('UserApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        UserApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: UserApiModule,
                providers: [{ provide: UserConfiguration, useFactory: configurationFactory }]
            };
        };
        return UserApiModule;
    }());
    UserApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserApiModule, deps: [{ token: UserApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: UserConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    UserApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserApiModule });
    UserApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: UserApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: UserConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var IdentityManagementService = /** @class */ (function () {
        function IdentityManagementService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new UserConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        IdentityManagementService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        IdentityManagementService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        IdentityManagementService.prototype.changePassword = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _changePasswordRequest = requestParameters["changePasswordRequest"];
            if (_changePasswordRequest === null || _changePasswordRequest === undefined) {
                throw new Error('Required parameter changePasswordRequest was null or undefined when calling changePassword.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/identities/password", _changePasswordRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.changePasswordUrl = function (requestParameters) {
            var _changePasswordRequest = requestParameters["changePasswordRequest"];
            if (_changePasswordRequest === null || _changePasswordRequest === undefined) {
                throw new Error('Required parameter changePasswordRequest was null or undefined when calling changePassword.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/password";
        };
        IdentityManagementService.prototype.createIdentity = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _createIdentityRequest = requestParameters["createIdentityRequest"];
            if (_createIdentityRequest === null || _createIdentityRequest === undefined) {
                throw new Error('Required parameter createIdentityRequest was null or undefined when calling createIdentity.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/identities", _createIdentityRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.createIdentityUrl = function (requestParameters) {
            var _createIdentityRequest = requestParameters["createIdentityRequest"];
            if (_createIdentityRequest === null || _createIdentityRequest === undefined) {
                throw new Error('Required parameter createIdentityRequest was null or undefined when calling createIdentity.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities";
        };
        IdentityManagementService.prototype.getIdentities = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalId = requestParameters["externalId"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var _legalEntityName = requestParameters["legalEntityName"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_externalId !== undefined && _externalId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _externalId, 'externalId');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_legalEntityName !== undefined && _legalEntityName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _legalEntityName, 'legalEntityName');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/identities", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.getIdentitiesUrl = function (requestParameters) {
            var _externalId = requestParameters["externalId"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var _legalEntityName = requestParameters["legalEntityName"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_externalId !== undefined && _externalId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _externalId, 'externalId');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_legalEntityName !== undefined && _legalEntityName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _legalEntityName, 'legalEntityName');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/users/identities" + (queryString ? "?" + queryString : '');
        };
        IdentityManagementService.prototype.getIdentity = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getIdentity.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.getIdentityUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getIdentity.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId));
        };
        IdentityManagementService.prototype.getIdentityPendingApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getIdentityPendingApprovals.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/approvals", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.getIdentityPendingApprovalsUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getIdentityPendingApprovals.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/approvals";
        };
        IdentityManagementService.prototype.getSessions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getSessions.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/sessions", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.getSessionsUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getSessions.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/sessions";
        };
        IdentityManagementService.prototype.logoutSessions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling logoutSessions.');
            }
            var _identityLogoutRequest = requestParameters["identityLogoutRequest"];
            if (_identityLogoutRequest === null || _identityLogoutRequest === undefined) {
                throw new Error('Required parameter identityLogoutRequest was null or undefined when calling logoutSessions.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/sessions/logout", _identityLogoutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.logoutSessionsUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling logoutSessions.');
            }
            var _identityLogoutRequest = requestParameters["identityLogoutRequest"];
            if (_identityLogoutRequest === null || _identityLogoutRequest === undefined) {
                throw new Error('Required parameter identityLogoutRequest was null or undefined when calling logoutSessions.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/sessions/logout";
        };
        IdentityManagementService.prototype.revokeIdentityAccess = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling revokeIdentityAccess.');
            }
            var _revokeIdentityAccessRequest = requestParameters["revokeIdentityAccessRequest"];
            if (_revokeIdentityAccessRequest === null || _revokeIdentityAccessRequest === undefined) {
                throw new Error('Required parameter revokeIdentityAccessRequest was null or undefined when calling revokeIdentityAccess.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/access", _revokeIdentityAccessRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.revokeIdentityAccessUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling revokeIdentityAccess.');
            }
            var _revokeIdentityAccessRequest = requestParameters["revokeIdentityAccessRequest"];
            if (_revokeIdentityAccessRequest === null || _revokeIdentityAccessRequest === undefined) {
                throw new Error('Required parameter revokeIdentityAccessRequest was null or undefined when calling revokeIdentityAccess.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/access";
        };
        IdentityManagementService.prototype.sendRequiredActions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling sendRequiredActions.');
            }
            var _identityRequiredActionsRequest = requestParameters["identityRequiredActionsRequest"];
            if (_identityRequiredActionsRequest === null || _identityRequiredActionsRequest === undefined) {
                throw new Error('Required parameter identityRequiredActionsRequest was null or undefined when calling sendRequiredActions.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/actions", _identityRequiredActionsRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.sendRequiredActionsUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling sendRequiredActions.');
            }
            var _identityRequiredActionsRequest = requestParameters["identityRequiredActionsRequest"];
            if (_identityRequiredActionsRequest === null || _identityRequiredActionsRequest === undefined) {
                throw new Error('Required parameter identityRequiredActionsRequest was null or undefined when calling sendRequiredActions.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/actions";
        };
        IdentityManagementService.prototype.updateIdentity = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updateIdentity.');
            }
            var _updateIdentityRequest = requestParameters["updateIdentityRequest"];
            if (_updateIdentityRequest === null || _updateIdentityRequest === undefined) {
                throw new Error('Required parameter updateIdentityRequest was null or undefined when calling updateIdentity.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)), _updateIdentityRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.updateIdentityUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updateIdentity.');
            }
            var _updateIdentityRequest = requestParameters["updateIdentityRequest"];
            if (_updateIdentityRequest === null || _updateIdentityRequest === undefined) {
                throw new Error('Required parameter updateIdentityRequest was null or undefined when calling updateIdentity.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId));
        };
        IdentityManagementService.prototype.updateIdentityStatus = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updateIdentityStatus.');
            }
            var _updateIdentityStatusRequest = requestParameters["updateIdentityStatusRequest"];
            if (_updateIdentityStatusRequest === null || _updateIdentityStatusRequest === undefined) {
                throw new Error('Required parameter updateIdentityStatusRequest was null or undefined when calling updateIdentityStatus.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/status", _updateIdentityStatusRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        IdentityManagementService.prototype.updateIdentityStatusUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updateIdentityStatus.');
            }
            var _updateIdentityStatusRequest = requestParameters["updateIdentityStatusRequest"];
            if (_updateIdentityStatusRequest === null || _updateIdentityStatusRequest === undefined) {
                throw new Error('Required parameter updateIdentityStatusRequest was null or undefined when calling updateIdentityStatus.');
            }
            return this.configuration.basePath + "/client-api/v2/users/identities/" + encodeURIComponent(String(_internalId)) + "/status";
        };
        return IdentityManagementService;
    }());
    IdentityManagementService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IdentityManagementService, deps: [{ token: i1__namespace.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    IdentityManagementService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IdentityManagementService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IdentityManagementService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [USER_BASE_PATH]
                        }] }, { type: UserConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var IdentityManagementServiceChangePasswordMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/password",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceCreateIdentityMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "internalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "externalId": "admin"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceGetIdentitiesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "identities": [{
                                "id": "eadaca0b-0b9d-4244-8922-1dead62d00e4",
                                "externalId": "U0000010",
                                "legalEntityId": "48b711b8-5adb-4826-a9cc-141b386f8930",
                                "fullName": "Hasnain Boyd",
                                "legalEntityName": "Backbase"
                            }, {
                                "id": "177296ae-3ebb-42f4-80fe-2d79d81cc469",
                                "externalId": "U0000011",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Caroline Smyth",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "66569096-df06-46b1-9dbb-3e0e73912e5d",
                                "externalId": "U0000012",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Amin Fowler",
                                "legalEntityName": "Backbase Amsterdam"
                            }, {
                                "id": "1117a81d-86e2-4a5a-9f79-eafbaa2bcddd",
                                "externalId": "U0000013",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Amelia Slater",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "55e27e95-216c-40fd-be2e-dd5a100ddcfc",
                                "externalId": "U0000014",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Bradlee Lister",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "59721bc0-da2d-42f8-9b14-a391d52e039e",
                                "externalId": "U0000015",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Khalil Freeman",
                                "legalEntityName": "Backbase Amsterdam"
                            }, {
                                "id": "d5ff6ff6-7d39-430c-a787-75321d2f986e",
                                "externalId": "U0000016",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Safwan Archer",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "5e41de27-cc3c-4277-9e4f-e9fb6f1da067",
                                "externalId": "U0000017",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Miranda Goldsmith",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "34be7792-d4a6-44de-bef7-1d051a33dd08",
                                "externalId": "U0000018",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Willard Pham",
                                "legalEntityName": "Backbase Amsterdam"
                            }, {
                                "id": "721b5973-543a-4a36-b739-352259486ac5",
                                "externalId": "U0000019",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Braiden Calhoun",
                                "legalEntityName": "Backbase Amsterdam"
                            }],
                        "totalElements": 10
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceGetIdentityMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "admin",
                        "legalEntityInternalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "fullName": "Mila Example",
                        "preferredLanguage": "EN",
                        "emailAddress": "mila@example.com",
                        "mobileNumber": "07700 900000",
                        "status": "ENABLED",
                        "emailVerified": true,
                        "createdDate": "2018-02-04T06:35:41.000Z",
                        "requiredActions": ["VERIFY_EMAIL", "UPDATE_PASSWORD", "ACCEPT_TERMS_AND_CONDITIONS"],
                        "givenName": "Mila",
                        "familyName": "Example",
                        "attributes": {
                            "bank-id": "BANK0001",
                            "core-id": "milaexample"
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceGetIdentityPendingApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22",
                            "type": "UNLOCK"
                        }]
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceGetSessionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}/sessions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "sessions": [{
                                "id": "9136e697-6c2f-49f6-9ef7-c67c89e8b825",
                                "ipAddress": "198.51.100.103",
                                "start": "2018-07-26T15:21:23.000Z",
                                "lastAccess": "2018-07-26T15:21:23.000Z",
                                "client": "web"
                            }, {
                                "id": "d04ba3e2-9dd5-484d-b756-e6a86562743a",
                                "ipAddress": "198.51.100.212",
                                "start": "2018-07-26T15:23:33.000Z",
                                "lastAccess": "2018-07-26T15:24:12.000Z",
                                "client": "mobile"
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceLogoutSessionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}/sessions/logout",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceRevokeIdentityAccessMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}/access",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceSendRequiredActionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}/actions",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceUpdateIdentityMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceUpdateIdentityStatusMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/identities/{internalId}/status",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {
                        "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22"
                    }
                },
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var IdentityManagementServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/users/identities/password",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "internalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "externalId": "admin"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "identities": [{
                                "id": "eadaca0b-0b9d-4244-8922-1dead62d00e4",
                                "externalId": "U0000010",
                                "legalEntityId": "48b711b8-5adb-4826-a9cc-141b386f8930",
                                "fullName": "Hasnain Boyd",
                                "legalEntityName": "Backbase"
                            }, {
                                "id": "177296ae-3ebb-42f4-80fe-2d79d81cc469",
                                "externalId": "U0000011",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Caroline Smyth",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "66569096-df06-46b1-9dbb-3e0e73912e5d",
                                "externalId": "U0000012",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Amin Fowler",
                                "legalEntityName": "Backbase Amsterdam"
                            }, {
                                "id": "1117a81d-86e2-4a5a-9f79-eafbaa2bcddd",
                                "externalId": "U0000013",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Amelia Slater",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "55e27e95-216c-40fd-be2e-dd5a100ddcfc",
                                "externalId": "U0000014",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Bradlee Lister",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "59721bc0-da2d-42f8-9b14-a391d52e039e",
                                "externalId": "U0000015",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Khalil Freeman",
                                "legalEntityName": "Backbase Amsterdam"
                            }, {
                                "id": "d5ff6ff6-7d39-430c-a787-75321d2f986e",
                                "externalId": "U0000016",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Safwan Archer",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "5e41de27-cc3c-4277-9e4f-e9fb6f1da067",
                                "externalId": "U0000017",
                                "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                                "fullName": "Miranda Goldsmith",
                                "legalEntityName": "Backbase Cardiff"
                            }, {
                                "id": "34be7792-d4a6-44de-bef7-1d051a33dd08",
                                "externalId": "U0000018",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Willard Pham",
                                "legalEntityName": "Backbase Amsterdam"
                            }, {
                                "id": "721b5973-543a-4a36-b739-352259486ac5",
                                "externalId": "U0000019",
                                "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                                "fullName": "Braiden Calhoun",
                                "legalEntityName": "Backbase Amsterdam"
                            }],
                        "totalElements": 10
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "admin",
                        "legalEntityInternalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "fullName": "Mila Example",
                        "preferredLanguage": "EN",
                        "emailAddress": "mila@example.com",
                        "mobileNumber": "07700 900000",
                        "status": "ENABLED",
                        "emailVerified": true,
                        "createdDate": "2018-02-04T06:35:41.000Z",
                        "requiredActions": ["VERIFY_EMAIL", "UPDATE_PASSWORD", "ACCEPT_TERMS_AND_CONDITIONS"],
                        "givenName": "Mila",
                        "familyName": "Example",
                        "attributes": {
                            "bank-id": "BANK0001",
                            "core-id": "milaexample"
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22",
                            "type": "UNLOCK"
                        }]
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}/sessions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "sessions": [{
                                "id": "9136e697-6c2f-49f6-9ef7-c67c89e8b825",
                                "ipAddress": "198.51.100.103",
                                "start": "2018-07-26T15:21:23.000Z",
                                "lastAccess": "2018-07-26T15:21:23.000Z",
                                "client": "web"
                            }, {
                                "id": "d04ba3e2-9dd5-484d-b756-e6a86562743a",
                                "ipAddress": "198.51.100.212",
                                "start": "2018-07-26T15:23:33.000Z",
                                "lastAccess": "2018-07-26T15:24:12.000Z",
                                "client": "mobile"
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}/sessions/logout",
            method: "POST",
            responses: [
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}/access",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}/actions",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/identities/{internalId}/status",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {
                        "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22"
                    }
                },
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var UserApprovalsService = /** @class */ (function () {
        function UserApprovalsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new UserConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        UserApprovalsService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        UserApprovalsService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        UserApprovalsService.prototype.approveApproval = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling approveApproval.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/approvals/" + encodeURIComponent(String(_approvalId)) + "/approve", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserApprovalsService.prototype.approveApprovalUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling approveApproval.');
            }
            return this.configuration.basePath + "/client-api/v2/users/approvals/" + encodeURIComponent(String(_approvalId)) + "/approve";
        };
        UserApprovalsService.prototype.getApprovalDetails = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getApprovalDetails.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/approvals/" + encodeURIComponent(String(_approvalId)) + "/details", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserApprovalsService.prototype.getApprovalDetailsUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getApprovalDetails.');
            }
            return this.configuration.basePath + "/client-api/v2/users/approvals/" + encodeURIComponent(String(_approvalId)) + "/details";
        };
        UserApprovalsService.prototype.rejectApproval = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling rejectApproval.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/approvals/" + encodeURIComponent(String(_approvalId)) + "/reject", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserApprovalsService.prototype.rejectApprovalUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling rejectApproval.');
            }
            return this.configuration.basePath + "/client-api/v2/users/approvals/" + encodeURIComponent(String(_approvalId)) + "/reject";
        };
        return UserApprovalsService;
    }());
    UserApprovalsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserApprovalsService, deps: [{ token: i1__namespace.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserApprovalsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserApprovalsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserApprovalsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [USER_BASE_PATH]
                        }] }, { type: UserConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var UserApprovalsServiceApproveApprovalMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/approvals/{approvalId}/approve",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserApprovalsServiceGetApprovalDetailsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/approvals/{approvalId}/details",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "changelogDetails": [{
                                "type": "LOCK_USER",
                                "key": "User Status",
                                "from": "Locked",
                                "to": "Enabled"
                            }],
                        "userDetails": {
                            "username": "john.doe",
                            "legalEntityName": "Bank 001",
                            "fullName": "John Doe",
                            "emailAddress": "john.doe@example.test",
                            "mobileNumber": "012345 67890",
                            "dateCreated": "2019-07-11T11:11:11.000Z"
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserApprovalsServiceRejectApprovalMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/approvals/{approvalId}/reject",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserApprovalsServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/users/approvals/{approvalId}/approve",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/approvals/{approvalId}/details",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "changelogDetails": [{
                                "type": "LOCK_USER",
                                "key": "User Status",
                                "from": "Locked",
                                "to": "Enabled"
                            }],
                        "userDetails": {
                            "username": "john.doe",
                            "legalEntityName": "Bank 001",
                            "fullName": "John Doe",
                            "emailAddress": "john.doe@example.test",
                            "mobileNumber": "012345 67890",
                            "dateCreated": "2019-07-11T11:11:11.000Z"
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/approvals/{approvalId}/reject",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var UserManagementService = /** @class */ (function () {
        function UserManagementService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new UserConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        UserManagementService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        UserManagementService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        UserManagementService.prototype.checkUserExists = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling checkUserExists.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/existing/externalids/" + encodeURIComponent(String(_externalId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.checkUserExistsUrl = function (requestParameters) {
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling checkUserExists.');
            }
            return this.configuration.basePath + "/client-api/v2/users/existing/externalids/" + encodeURIComponent(String(_externalId));
        };
        UserManagementService.prototype.getLegalEntityByExternalId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/externalids/" + encodeURIComponent(String(_externalId)) + "/legalentities", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.getLegalEntityByExternalIdUrl = function (requestParameters) {
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
            }
            return this.configuration.basePath + "/client-api/v2/users/externalids/" + encodeURIComponent(String(_externalId)) + "/legalentities";
        };
        UserManagementService.prototype.getOwnUser = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.getOwnUserUrl = function () {
            return this.configuration.basePath + "/client-api/v2/users/me";
        };
        UserManagementService.prototype.getUserByExternalId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling getUserByExternalId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/externalids/" + encodeURIComponent(String(_externalId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.getUserByExternalIdUrl = function (requestParameters) {
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling getUserByExternalId.');
            }
            return this.configuration.basePath + "/client-api/v2/users/externalids/" + encodeURIComponent(String(_externalId));
        };
        UserManagementService.prototype.getUserById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getUserById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.getUserByIdUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getUserById.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId));
        };
        UserManagementService.prototype.getUsers = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _entityId = requestParameters["entityId"];
            if (_entityId === null || _entityId === undefined) {
                throw new Error('Required parameter entityId was null or undefined when calling getUsers.');
            }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_entityId !== undefined && _entityId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.getUsersUrl = function (requestParameters) {
            var _entityId = requestParameters["entityId"];
            if (_entityId === null || _entityId === undefined) {
                throw new Error('Required parameter entityId was null or undefined when calling getUsers.');
            }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_entityId !== undefined && _entityId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/users" + (queryString ? "?" + queryString : '');
        };
        UserManagementService.prototype.getUsersByLegalEntityIds = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _getUsersByLegalEntityIdsRequest = requestParameters["getUsersByLegalEntityIdsRequest"];
            if (_getUsersByLegalEntityIdsRequest === null || _getUsersByLegalEntityIdsRequest === undefined) {
                throw new Error('Required parameter getUsersByLegalEntityIdsRequest was null or undefined when calling getUsersByLegalEntityIds.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/legalentityids", _getUsersByLegalEntityIdsRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.getUsersByLegalEntityIdsUrl = function (requestParameters) {
            var _getUsersByLegalEntityIdsRequest = requestParameters["getUsersByLegalEntityIdsRequest"];
            if (_getUsersByLegalEntityIdsRequest === null || _getUsersByLegalEntityIdsRequest === undefined) {
                throw new Error('Required parameter getUsersByLegalEntityIdsRequest was null or undefined when calling getUsersByLegalEntityIds.');
            }
            return this.configuration.basePath + "/client-api/v2/users/legalentityids";
        };
        UserManagementService.prototype.updateOwnLanguage = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _updatePreferredLanguage = requestParameters["updatePreferredLanguage"];
            if (_updatePreferredLanguage === null || _updatePreferredLanguage === undefined) {
                throw new Error('Required parameter updatePreferredLanguage was null or undefined when calling updateOwnLanguage.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/me/preferred-language", _updatePreferredLanguage, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserManagementService.prototype.updateOwnLanguageUrl = function (requestParameters) {
            var _updatePreferredLanguage = requestParameters["updatePreferredLanguage"];
            if (_updatePreferredLanguage === null || _updatePreferredLanguage === undefined) {
                throw new Error('Required parameter updatePreferredLanguage was null or undefined when calling updateOwnLanguage.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/preferred-language";
        };
        return UserManagementService;
    }());
    UserManagementService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserManagementService, deps: [{ token: i1__namespace.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserManagementService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserManagementService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserManagementService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [USER_BASE_PATH]
                        }] }, { type: UserConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var UserManagementServiceCheckUserExistsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/existing/externalids/{externalId}",
            method: "GET",
            responses: [
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserManagementServiceGetLegalEntityByExternalIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/externalids/{externalId}/legalentities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a154ebc2-3116-450e-9e26-1612d7cb48fb",
                        "externalId": "a00f4955-c920-4604-9ec8-4e2cddd447d6",
                        "name": "Bank Corp.",
                        "parentId": "8cc493bb-ffca-4b47-ae2f-594cd7282d30",
                        "isParent": true
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserManagementServiceGetOwnUserMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "externalBankId1",
                        "preferredLanguage": "fr-FR",
                        "legalEntityId": "c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53",
                        "legalEntityName": "BANK A",
                        "id": "3da7e7fb-857f-44c2-92aa-80572f6394e2",
                        "fullName": "Henry Duncan"
                    }
                },
            ]
        }]);
    var UserManagementServiceGetUserByExternalIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/externalids/{externalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }
                },
                {
                    status: 200,
                    body: {
                        "preferredLanguage": "preferredLanguage",
                        "additions": {
                            "key": "additions"
                        },
                        "legalEntityId": "legalEntityId",
                        "externalId": "externalId",
                        "fullName": "fullName",
                        "id": "id"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserManagementServiceGetUserByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }
                },
                {
                    status: 200,
                    body: {
                        "preferredLanguage": "preferredLanguage",
                        "additions": {
                            "key": "additions"
                        },
                        "legalEntityId": "legalEntityId",
                        "externalId": "externalId",
                        "fullName": "fullName",
                        "id": "id"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserManagementServiceGetUsersMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "externalId": "U0000010",
                            "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                            "id": "d100c54f79784731843f0db89a2d2957",
                            "fullName": "David Flores",
                            "preferredLanguage": "fr-FR"
                        }, {
                            "externalId": "U0000011",
                            "legalEntityId": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "id": "fafd8fd6b661402b8411a48050bdc9ad",
                            "fullName": "Sofia Duncan"
                        }, {
                            "externalId": "U0000012",
                            "legalEntityId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "id": "bc9a83bf025449dea4ecc05ce816aebd",
                            "fullName": "Henry Duncan"
                        }, {
                            "externalId": "U0000013",
                            "legalEntityId": "34",
                            "id": "5360dbba1a254889ba94c22ff01b1c37",
                            "fullName": "Bart Nyman"
                        }, {
                            "externalId": "U0000014",
                            "legalEntityId": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "id": "37c1b6b531a34259b4c518eebc0b34a2",
                            "fullName": "Peter"
                        }, {
                            "externalId": "U0000015",
                            "legalEntityId": "0f6d14f40e064deeaee351befd53d3e7",
                            "id": "b5f499e8f3c94cf39997957ce4cbec59",
                            "fullName": "Sandra"
                        }, {
                            "externalId": "U0000016",
                            "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                            "id": "b5f499e8f3c94cf39997957ce4cbei84",
                            "fullName": "Marko Ilievski",
                            "preferredLanguage": "en-GB"
                        }, {
                            "externalId": "U0000017",
                            "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                            "id": "b5f499e8f3c94cf39997957ce4cbec59t97",
                            "fullName": "Daniela Petkovska"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserManagementServiceGetUsersByLegalEntityIdsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/legalentityids",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "users": [{
                                "id": "001",
                                "externalId": "U0000010",
                                "legalEntityId": "012",
                                "fullName": "Mila"
                            }, {
                                "id": "002",
                                "externalId": "U0000011",
                                "legalEntityId": "023",
                                "fullName": "Kjiro"
                            }, {
                                "id": "003",
                                "externalId": "U0000012",
                                "legalEntityId": "034",
                                "fullName": "Daniel"
                            }],
                        "totalElements": 1000
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserManagementServiceUpdateOwnLanguageMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/preferred-language",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserManagementServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/users/existing/externalids/{externalId}",
            method: "GET",
            responses: [
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/externalids/{externalId}/legalentities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a154ebc2-3116-450e-9e26-1612d7cb48fb",
                        "externalId": "a00f4955-c920-4604-9ec8-4e2cddd447d6",
                        "name": "Bank Corp.",
                        "parentId": "8cc493bb-ffca-4b47-ae2f-594cd7282d30",
                        "isParent": true
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "externalBankId1",
                        "preferredLanguage": "fr-FR",
                        "legalEntityId": "c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53",
                        "legalEntityName": "BANK A",
                        "id": "3da7e7fb-857f-44c2-92aa-80572f6394e2",
                        "fullName": "Henry Duncan"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/externalids/{externalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }
                },
                {
                    status: 200,
                    body: {
                        "preferredLanguage": "preferredLanguage",
                        "additions": {
                            "key": "additions"
                        },
                        "legalEntityId": "legalEntityId",
                        "externalId": "externalId",
                        "fullName": "fullName",
                        "id": "id"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }
                },
                {
                    status: 200,
                    body: {
                        "preferredLanguage": "preferredLanguage",
                        "additions": {
                            "key": "additions"
                        },
                        "legalEntityId": "legalEntityId",
                        "externalId": "externalId",
                        "fullName": "fullName",
                        "id": "id"
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "externalId": "U0000010",
                            "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                            "id": "d100c54f79784731843f0db89a2d2957",
                            "fullName": "David Flores",
                            "preferredLanguage": "fr-FR"
                        }, {
                            "externalId": "U0000011",
                            "legalEntityId": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "id": "fafd8fd6b661402b8411a48050bdc9ad",
                            "fullName": "Sofia Duncan"
                        }, {
                            "externalId": "U0000012",
                            "legalEntityId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "id": "bc9a83bf025449dea4ecc05ce816aebd",
                            "fullName": "Henry Duncan"
                        }, {
                            "externalId": "U0000013",
                            "legalEntityId": "34",
                            "id": "5360dbba1a254889ba94c22ff01b1c37",
                            "fullName": "Bart Nyman"
                        }, {
                            "externalId": "U0000014",
                            "legalEntityId": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "id": "37c1b6b531a34259b4c518eebc0b34a2",
                            "fullName": "Peter"
                        }, {
                            "externalId": "U0000015",
                            "legalEntityId": "0f6d14f40e064deeaee351befd53d3e7",
                            "id": "b5f499e8f3c94cf39997957ce4cbec59",
                            "fullName": "Sandra"
                        }, {
                            "externalId": "U0000016",
                            "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                            "id": "b5f499e8f3c94cf39997957ce4cbei84",
                            "fullName": "Marko Ilievski",
                            "preferredLanguage": "en-GB"
                        }, {
                            "externalId": "U0000017",
                            "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                            "id": "b5f499e8f3c94cf39997957ce4cbec59t97",
                            "fullName": "Daniela Petkovska"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/legalentityids",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "users": [{
                                "id": "001",
                                "externalId": "U0000010",
                                "legalEntityId": "012",
                                "fullName": "Mila"
                            }, {
                                "id": "002",
                                "externalId": "U0000011",
                                "legalEntityId": "023",
                                "fullName": "Kjiro"
                            }, {
                                "id": "003",
                                "externalId": "U0000012",
                                "legalEntityId": "034",
                                "fullName": "Daniel"
                            }],
                        "totalElements": 1000
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/preferred-language",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var UserProfileManagementService = /** @class */ (function () {
        function UserProfileManagementService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new UserConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        UserProfileManagementService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        UserProfileManagementService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        UserProfileManagementService.prototype.addElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling addElectronicAddress.');
            }
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling addElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses", _electronicAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.addElectronicAddressUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling addElectronicAddress.');
            }
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling addElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses";
        };
        UserProfileManagementService.prototype.addOwnElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling addOwnElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses", _electronicAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.addOwnElectronicAddressUrl = function (requestParameters) {
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling addOwnElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses";
        };
        UserProfileManagementService.prototype.addOwnPhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling addOwnPhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses", _phoneAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.addOwnPhoneAddressUrl = function (requestParameters) {
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling addOwnPhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses";
        };
        UserProfileManagementService.prototype.addOwnPostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling addOwnPostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses", _postalAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.addOwnPostalAddressUrl = function (requestParameters) {
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling addOwnPostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses";
        };
        UserProfileManagementService.prototype.addPhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling addPhoneAddress.');
            }
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling addPhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses", _phoneAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.addPhoneAddressUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling addPhoneAddress.');
            }
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling addPhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses";
        };
        UserProfileManagementService.prototype.addPostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling addPostalAddress.');
            }
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling addPostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses", _postalAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.addPostalAddressUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling addPostalAddress.');
            }
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling addPostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses";
        };
        UserProfileManagementService.prototype.deleteElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteElectronicAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling deleteElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.deleteElectronicAddressUrl = function (requestParameters) {
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteElectronicAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling deleteElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey));
        };
        UserProfileManagementService.prototype.deleteOwnElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteOwnElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.deleteOwnElectronicAddressUrl = function (requestParameters) {
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteOwnElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey));
        };
        UserProfileManagementService.prototype.deleteOwnPhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling deleteOwnPhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.deleteOwnPhoneAddressUrl = function (requestParameters) {
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling deleteOwnPhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey));
        };
        UserProfileManagementService.prototype.deleteOwnPostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling deleteOwnPostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.deleteOwnPostalAddressUrl = function (requestParameters) {
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling deleteOwnPostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey));
        };
        UserProfileManagementService.prototype.deletePhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling deletePhoneAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling deletePhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.deletePhoneAddressUrl = function (requestParameters) {
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling deletePhoneAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling deletePhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey));
        };
        UserProfileManagementService.prototype.deletePostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling deletePostalAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling deletePostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.deletePostalAddressUrl = function (requestParameters) {
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling deletePostalAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling deletePostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey));
        };
        UserProfileManagementService.prototype.getElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling getElectronicAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getElectronicAddressUrl = function (requestParameters) {
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling getElectronicAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey));
        };
        UserProfileManagementService.prototype.getElectronicAddresses = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddresses.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getElectronicAddressesUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddresses.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses";
        };
        UserProfileManagementService.prototype.getOwnElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling getOwnElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getOwnElectronicAddressUrl = function (requestParameters) {
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling getOwnElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey));
        };
        UserProfileManagementService.prototype.getOwnElectronicAddresses = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getOwnElectronicAddressesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses";
        };
        UserProfileManagementService.prototype.getOwnPhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling getOwnPhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getOwnPhoneAddressUrl = function (requestParameters) {
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling getOwnPhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey));
        };
        UserProfileManagementService.prototype.getOwnPhoneAddresses = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getOwnPhoneAddressesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses";
        };
        UserProfileManagementService.prototype.getOwnPostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling getOwnPostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getOwnPostalAddressUrl = function (requestParameters) {
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling getOwnPostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey));
        };
        UserProfileManagementService.prototype.getOwnPostalAddresses = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getOwnPostalAddressesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses";
        };
        UserProfileManagementService.prototype.getOwnUserProfile = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/me/profile", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getOwnUserProfileUrl = function () {
            return this.configuration.basePath + "/client-api/v2/users/me/profile";
        };
        UserProfileManagementService.prototype.getPhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling getPhoneAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getPhoneAddressUrl = function (requestParameters) {
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling getPhoneAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey));
        };
        UserProfileManagementService.prototype.getPhoneAddresses = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddresses.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getPhoneAddressesUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddresses.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses";
        };
        UserProfileManagementService.prototype.getPostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling getPostalAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getPostalAddressUrl = function (requestParameters) {
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling getPostalAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey));
        };
        UserProfileManagementService.prototype.getPostalAddresses = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPostalAddresses.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getPostalAddressesUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getPostalAddresses.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses";
        };
        UserProfileManagementService.prototype.getUserProfile = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getUserProfile.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.getUserProfileUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling getUserProfile.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile";
        };
        UserProfileManagementService.prototype.replaceOwnUserProfileAttributes = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
            if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
                throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceOwnUserProfileAttributes.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/me/profile", _replaceUserProfileAttributes, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.replaceOwnUserProfileAttributesUrl = function (requestParameters) {
            var _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
            if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
                throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceOwnUserProfileAttributes.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile";
        };
        UserProfileManagementService.prototype.replaceUserProfileAttributes = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling replaceUserProfileAttributes.');
            }
            var _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
            if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
                throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceUserProfileAttributes.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile", _replaceUserProfileAttributes, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.replaceUserProfileAttributesUrl = function (requestParameters) {
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling replaceUserProfileAttributes.');
            }
            var _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
            if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
                throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceUserProfileAttributes.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile";
        };
        UserProfileManagementService.prototype.updateElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateElectronicAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updateElectronicAddress.');
            }
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling updateElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey)), _electronicAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.updateElectronicAddressUrl = function (requestParameters) {
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateElectronicAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updateElectronicAddress.');
            }
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling updateElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey));
        };
        UserProfileManagementService.prototype.updateOwnElectronicAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateOwnElectronicAddress.');
            }
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling updateOwnElectronicAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey)), _electronicAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.updateOwnElectronicAddressUrl = function (requestParameters) {
            var _electronicAddressKey = requestParameters["electronicAddressKey"];
            if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
                throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateOwnElectronicAddress.');
            }
            var _electronicAddress = requestParameters["electronicAddress"];
            if (_electronicAddress === null || _electronicAddress === undefined) {
                throw new Error('Required parameter electronicAddress was null or undefined when calling updateOwnElectronicAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/electronic-addresses/" + encodeURIComponent(String(_electronicAddressKey));
        };
        UserProfileManagementService.prototype.updateOwnPhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling updateOwnPhoneAddress.');
            }
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling updateOwnPhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey)), _phoneAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.updateOwnPhoneAddressUrl = function (requestParameters) {
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling updateOwnPhoneAddress.');
            }
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling updateOwnPhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey));
        };
        UserProfileManagementService.prototype.updateOwnPostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling updateOwnPostalAddress.');
            }
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling updateOwnPostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey)), _postalAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.updateOwnPostalAddressUrl = function (requestParameters) {
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling updateOwnPostalAddress.');
            }
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling updateOwnPostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/me/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey));
        };
        UserProfileManagementService.prototype.updatePhoneAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling updatePhoneAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updatePhoneAddress.');
            }
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling updatePhoneAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey)), _phoneAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.updatePhoneAddressUrl = function (requestParameters) {
            var _phoneAddressKey = requestParameters["phoneAddressKey"];
            if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
                throw new Error('Required parameter phoneAddressKey was null or undefined when calling updatePhoneAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updatePhoneAddress.');
            }
            var _phoneAddress = requestParameters["phoneAddress"];
            if (_phoneAddress === null || _phoneAddress === undefined) {
                throw new Error('Required parameter phoneAddress was null or undefined when calling updatePhoneAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/phone-addresses/" + encodeURIComponent(String(_phoneAddressKey));
        };
        UserProfileManagementService.prototype.updatePostalAddress = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling updatePostalAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updatePostalAddress.');
            }
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling updatePostalAddress.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey)), _postalAddress, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserProfileManagementService.prototype.updatePostalAddressUrl = function (requestParameters) {
            var _postalAddressKey = requestParameters["postalAddressKey"];
            if (_postalAddressKey === null || _postalAddressKey === undefined) {
                throw new Error('Required parameter postalAddressKey was null or undefined when calling updatePostalAddress.');
            }
            var _internalId = requestParameters["internalId"];
            if (_internalId === null || _internalId === undefined) {
                throw new Error('Required parameter internalId was null or undefined when calling updatePostalAddress.');
            }
            var _postalAddress = requestParameters["postalAddress"];
            if (_postalAddress === null || _postalAddress === undefined) {
                throw new Error('Required parameter postalAddress was null or undefined when calling updatePostalAddress.');
            }
            return this.configuration.basePath + "/client-api/v2/users/" + encodeURIComponent(String(_internalId)) + "/profile/postal-addresses/" + encodeURIComponent(String(_postalAddressKey));
        };
        return UserProfileManagementService;
    }());
    UserProfileManagementService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserProfileManagementService, deps: [{ token: i1__namespace.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserProfileManagementService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserProfileManagementService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserProfileManagementService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [USER_BASE_PATH]
                        }] }, { type: UserConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var UserProfileManagementServiceAddElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceAddOwnElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceAddOwnPhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceAddOwnPostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceAddPhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceAddPostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceDeleteElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceDeleteOwnElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceDeleteOwnPhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceDeleteOwnPostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceDeletePhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceDeletePostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                        "type": "E_MAIL",
                        "primary": true,
                        "address": "test@tester.com"
                    }
                },
                {
                    status: 200,
                    body: {
                        "address": "address",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetElectronicAddressesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetOwnElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                        "type": "E_MAIL",
                        "primary": true,
                        "address": "test@tester.com"
                    }
                },
                {
                    status: 200,
                    body: {
                        "address": "address",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetOwnElectronicAddressesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "electronic-addresses": [{
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetOwnPhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "LAND_LINE",
                        "primary": false,
                        "number": "02920 671937"
                    }
                },
                {
                    status: 200,
                    body: {
                        "number": "number",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetOwnPhoneAddressesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }],
                        "additions": {
                            "key": "additions"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetOwnPostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "HOME",
                        "primary": true,
                        "addressLine": "2 Hertsmere Rd",
                        "streetName": "Canary Wharf",
                        "townName": "London",
                        "postalCode": "E14 4AB",
                        "country": "GB"
                    }
                },
                {
                    status: 200,
                    body: {
                        "country": "country",
                        "townName": "townName",
                        "countrySubDivision": "countrySubDivision",
                        "additions": {
                            "key": "additions"
                        },
                        "postalCode": "postalCode",
                        "subDepartment": "subDepartment",
                        "type": "type",
                        "addressLine": "addressLine",
                        "streetName": "streetName",
                        "buildingNumber": "buildingNumber",
                        "department": "department",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetOwnPostalAddressesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB"
                            }],
                        "country": "GB"
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "postal-addresses": [{
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }, {
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetOwnUserProfileMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "fullName": "John Doe",
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }],
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }],
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB",
                                "country": "GB"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }],
                        "additions": {
                            "key": "additions"
                        },
                        "electronic-addresses": [{
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }],
                        "fullName": "fullName",
                        "postal-addresses": [{
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }, {
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetPhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "LAND_LINE",
                        "primary": false,
                        "number": "02920 671937"
                    }
                },
                {
                    status: 200,
                    body: {
                        "number": "number",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetPhoneAddressesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetPostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "HOME",
                        "primary": true,
                        "addressLine": "2 Hertsmere Rd",
                        "streetName": "Canary Wharf",
                        "townName": "London",
                        "postalCode": "E14 4AB",
                        "country": "GB"
                    }
                },
                {
                    status: 200,
                    body: {
                        "country": "country",
                        "townName": "townName",
                        "countrySubDivision": "countrySubDivision",
                        "additions": {
                            "key": "additions"
                        },
                        "postalCode": "postalCode",
                        "subDepartment": "subDepartment",
                        "type": "type",
                        "addressLine": "addressLine",
                        "streetName": "streetName",
                        "buildingNumber": "buildingNumber",
                        "department": "department",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetPostalAddressesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB"
                            }],
                        "country": "GB"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceGetUserProfileMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "fullName": "John Doe",
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }],
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }],
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB",
                                "country": "GB"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceReplaceOwnUserProfileAttributesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceReplaceUserProfileAttributesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceUpdateElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceUpdateOwnElectronicAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceUpdateOwnPhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceUpdateOwnPostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceUpdatePhoneAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceUpdatePostalAddressMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var UserProfileManagementServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                        "type": "E_MAIL",
                        "primary": true,
                        "address": "test@tester.com"
                    }
                },
                {
                    status: 200,
                    body: {
                        "address": "address",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                        "type": "E_MAIL",
                        "primary": true,
                        "address": "test@tester.com"
                    }
                },
                {
                    status: 200,
                    body: {
                        "address": "address",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "electronic-addresses": [{
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "LAND_LINE",
                        "primary": false,
                        "number": "02920 671937"
                    }
                },
                {
                    status: 200,
                    body: {
                        "number": "number",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }],
                        "additions": {
                            "key": "additions"
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "HOME",
                        "primary": true,
                        "addressLine": "2 Hertsmere Rd",
                        "streetName": "Canary Wharf",
                        "townName": "London",
                        "postalCode": "E14 4AB",
                        "country": "GB"
                    }
                },
                {
                    status: 200,
                    body: {
                        "country": "country",
                        "townName": "townName",
                        "countrySubDivision": "countrySubDivision",
                        "additions": {
                            "key": "additions"
                        },
                        "postalCode": "postalCode",
                        "subDepartment": "subDepartment",
                        "type": "type",
                        "addressLine": "addressLine",
                        "streetName": "streetName",
                        "buildingNumber": "buildingNumber",
                        "department": "department",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB"
                            }],
                        "country": "GB"
                    }
                },
                {
                    status: 200,
                    body: {
                        "additions": {
                            "key": "additions"
                        },
                        "postal-addresses": [{
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }, {
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "fullName": "John Doe",
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }],
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }],
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB",
                                "country": "GB"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "number": "number",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }],
                        "additions": {
                            "key": "additions"
                        },
                        "electronic-addresses": [{
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }, {
                                "address": "address",
                                "additions": {
                                    "key": "additions"
                                },
                                "type": "type",
                                "key": "key",
                                "primary": true
                            }],
                        "fullName": "fullName",
                        "postal-addresses": [{
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }, {
                                "country": "country",
                                "townName": "townName",
                                "countrySubDivision": "countrySubDivision",
                                "additions": {
                                    "key": "additions"
                                },
                                "postalCode": "postalCode",
                                "subDepartment": "subDepartment",
                                "type": "type",
                                "addressLine": "addressLine",
                                "streetName": "streetName",
                                "buildingNumber": "buildingNumber",
                                "department": "department",
                                "key": "key",
                                "primary": true
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "LAND_LINE",
                        "primary": false,
                        "number": "02920 671937"
                    }
                },
                {
                    status: 200,
                    body: {
                        "number": "number",
                        "additions": {
                            "key": "additions"
                        },
                        "type": "type",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                        "type": "HOME",
                        "primary": true,
                        "addressLine": "2 Hertsmere Rd",
                        "streetName": "Canary Wharf",
                        "townName": "London",
                        "postalCode": "E14 4AB",
                        "country": "GB"
                    }
                },
                {
                    status: 200,
                    body: {
                        "country": "country",
                        "townName": "townName",
                        "countrySubDivision": "countrySubDivision",
                        "additions": {
                            "key": "additions"
                        },
                        "postalCode": "postalCode",
                        "subDepartment": "subDepartment",
                        "type": "type",
                        "addressLine": "addressLine",
                        "streetName": "streetName",
                        "buildingNumber": "buildingNumber",
                        "department": "department",
                        "key": "key",
                        "primary": true
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB"
                            }],
                        "country": "GB"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "fullName": "John Doe",
                        "phone-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "MOBILE",
                                "primary": true,
                                "number": "07717 371949"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "LAND_LINE",
                                "primary": false,
                                "number": "02920 671937"
                            }],
                        "electronic-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "E_MAIL",
                                "primary": true,
                                "address": "test@tester.com"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "PERSONAL",
                                "primary": false,
                                "address": "test_personal@tester.com"
                            }],
                        "postal-addresses": [{
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                                "type": "BUSINESS",
                                "primary": false,
                                "addressLine": "The Bonded Warehouse",
                                "streetName": "Atlantic Wharf",
                                "townName": "Cardiff",
                                "postalCode": "CF10 4HE",
                                "country": "GB"
                            }, {
                                "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                                "type": "HOME",
                                "primary": true,
                                "addressLine": "2 Hertsmere Rd",
                                "streetName": "Canary Wharf",
                                "townName": "London",
                                "postalCode": "E14 4AB",
                                "country": "GB"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.IdentityManagementService = IdentityManagementService;
    exports.IdentityManagementServiceChangePasswordMocksProvider = IdentityManagementServiceChangePasswordMocksProvider;
    exports.IdentityManagementServiceCreateIdentityMocksProvider = IdentityManagementServiceCreateIdentityMocksProvider;
    exports.IdentityManagementServiceGetIdentitiesMocksProvider = IdentityManagementServiceGetIdentitiesMocksProvider;
    exports.IdentityManagementServiceGetIdentityMocksProvider = IdentityManagementServiceGetIdentityMocksProvider;
    exports.IdentityManagementServiceGetIdentityPendingApprovalsMocksProvider = IdentityManagementServiceGetIdentityPendingApprovalsMocksProvider;
    exports.IdentityManagementServiceGetSessionsMocksProvider = IdentityManagementServiceGetSessionsMocksProvider;
    exports.IdentityManagementServiceLogoutSessionsMocksProvider = IdentityManagementServiceLogoutSessionsMocksProvider;
    exports.IdentityManagementServiceMocksProvider = IdentityManagementServiceMocksProvider;
    exports.IdentityManagementServiceRevokeIdentityAccessMocksProvider = IdentityManagementServiceRevokeIdentityAccessMocksProvider;
    exports.IdentityManagementServiceSendRequiredActionsMocksProvider = IdentityManagementServiceSendRequiredActionsMocksProvider;
    exports.IdentityManagementServiceUpdateIdentityMocksProvider = IdentityManagementServiceUpdateIdentityMocksProvider;
    exports.IdentityManagementServiceUpdateIdentityStatusMocksProvider = IdentityManagementServiceUpdateIdentityStatusMocksProvider;
    exports.USER_BASE_PATH = USER_BASE_PATH;
    exports.UserApiModule = UserApiModule;
    exports.UserApprovalsService = UserApprovalsService;
    exports.UserApprovalsServiceApproveApprovalMocksProvider = UserApprovalsServiceApproveApprovalMocksProvider;
    exports.UserApprovalsServiceGetApprovalDetailsMocksProvider = UserApprovalsServiceGetApprovalDetailsMocksProvider;
    exports.UserApprovalsServiceMocksProvider = UserApprovalsServiceMocksProvider;
    exports.UserApprovalsServiceRejectApprovalMocksProvider = UserApprovalsServiceRejectApprovalMocksProvider;
    exports.UserConfiguration = UserConfiguration;
    exports.UserManagementService = UserManagementService;
    exports.UserManagementServiceCheckUserExistsMocksProvider = UserManagementServiceCheckUserExistsMocksProvider;
    exports.UserManagementServiceGetLegalEntityByExternalIdMocksProvider = UserManagementServiceGetLegalEntityByExternalIdMocksProvider;
    exports.UserManagementServiceGetOwnUserMocksProvider = UserManagementServiceGetOwnUserMocksProvider;
    exports.UserManagementServiceGetUserByExternalIdMocksProvider = UserManagementServiceGetUserByExternalIdMocksProvider;
    exports.UserManagementServiceGetUserByIdMocksProvider = UserManagementServiceGetUserByIdMocksProvider;
    exports.UserManagementServiceGetUsersByLegalEntityIdsMocksProvider = UserManagementServiceGetUsersByLegalEntityIdsMocksProvider;
    exports.UserManagementServiceGetUsersMocksProvider = UserManagementServiceGetUsersMocksProvider;
    exports.UserManagementServiceMocksProvider = UserManagementServiceMocksProvider;
    exports.UserManagementServiceUpdateOwnLanguageMocksProvider = UserManagementServiceUpdateOwnLanguageMocksProvider;
    exports.UserProfileManagementService = UserProfileManagementService;
    exports.UserProfileManagementServiceAddElectronicAddressMocksProvider = UserProfileManagementServiceAddElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceAddOwnElectronicAddressMocksProvider = UserProfileManagementServiceAddOwnElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceAddOwnPhoneAddressMocksProvider = UserProfileManagementServiceAddOwnPhoneAddressMocksProvider;
    exports.UserProfileManagementServiceAddOwnPostalAddressMocksProvider = UserProfileManagementServiceAddOwnPostalAddressMocksProvider;
    exports.UserProfileManagementServiceAddPhoneAddressMocksProvider = UserProfileManagementServiceAddPhoneAddressMocksProvider;
    exports.UserProfileManagementServiceAddPostalAddressMocksProvider = UserProfileManagementServiceAddPostalAddressMocksProvider;
    exports.UserProfileManagementServiceDeleteElectronicAddressMocksProvider = UserProfileManagementServiceDeleteElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceDeleteOwnElectronicAddressMocksProvider = UserProfileManagementServiceDeleteOwnElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceDeleteOwnPhoneAddressMocksProvider = UserProfileManagementServiceDeleteOwnPhoneAddressMocksProvider;
    exports.UserProfileManagementServiceDeleteOwnPostalAddressMocksProvider = UserProfileManagementServiceDeleteOwnPostalAddressMocksProvider;
    exports.UserProfileManagementServiceDeletePhoneAddressMocksProvider = UserProfileManagementServiceDeletePhoneAddressMocksProvider;
    exports.UserProfileManagementServiceDeletePostalAddressMocksProvider = UserProfileManagementServiceDeletePostalAddressMocksProvider;
    exports.UserProfileManagementServiceGetElectronicAddressMocksProvider = UserProfileManagementServiceGetElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceGetElectronicAddressesMocksProvider = UserProfileManagementServiceGetElectronicAddressesMocksProvider;
    exports.UserProfileManagementServiceGetOwnElectronicAddressMocksProvider = UserProfileManagementServiceGetOwnElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceGetOwnElectronicAddressesMocksProvider = UserProfileManagementServiceGetOwnElectronicAddressesMocksProvider;
    exports.UserProfileManagementServiceGetOwnPhoneAddressMocksProvider = UserProfileManagementServiceGetOwnPhoneAddressMocksProvider;
    exports.UserProfileManagementServiceGetOwnPhoneAddressesMocksProvider = UserProfileManagementServiceGetOwnPhoneAddressesMocksProvider;
    exports.UserProfileManagementServiceGetOwnPostalAddressMocksProvider = UserProfileManagementServiceGetOwnPostalAddressMocksProvider;
    exports.UserProfileManagementServiceGetOwnPostalAddressesMocksProvider = UserProfileManagementServiceGetOwnPostalAddressesMocksProvider;
    exports.UserProfileManagementServiceGetOwnUserProfileMocksProvider = UserProfileManagementServiceGetOwnUserProfileMocksProvider;
    exports.UserProfileManagementServiceGetPhoneAddressMocksProvider = UserProfileManagementServiceGetPhoneAddressMocksProvider;
    exports.UserProfileManagementServiceGetPhoneAddressesMocksProvider = UserProfileManagementServiceGetPhoneAddressesMocksProvider;
    exports.UserProfileManagementServiceGetPostalAddressMocksProvider = UserProfileManagementServiceGetPostalAddressMocksProvider;
    exports.UserProfileManagementServiceGetPostalAddressesMocksProvider = UserProfileManagementServiceGetPostalAddressesMocksProvider;
    exports.UserProfileManagementServiceGetUserProfileMocksProvider = UserProfileManagementServiceGetUserProfileMocksProvider;
    exports.UserProfileManagementServiceMocksProvider = UserProfileManagementServiceMocksProvider;
    exports.UserProfileManagementServiceReplaceOwnUserProfileAttributesMocksProvider = UserProfileManagementServiceReplaceOwnUserProfileAttributesMocksProvider;
    exports.UserProfileManagementServiceReplaceUserProfileAttributesMocksProvider = UserProfileManagementServiceReplaceUserProfileAttributesMocksProvider;
    exports.UserProfileManagementServiceUpdateElectronicAddressMocksProvider = UserProfileManagementServiceUpdateElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceUpdateOwnElectronicAddressMocksProvider = UserProfileManagementServiceUpdateOwnElectronicAddressMocksProvider;
    exports.UserProfileManagementServiceUpdateOwnPhoneAddressMocksProvider = UserProfileManagementServiceUpdateOwnPhoneAddressMocksProvider;
    exports.UserProfileManagementServiceUpdateOwnPostalAddressMocksProvider = UserProfileManagementServiceUpdateOwnPostalAddressMocksProvider;
    exports.UserProfileManagementServiceUpdatePhoneAddressMocksProvider = UserProfileManagementServiceUpdatePhoneAddressMocksProvider;
    exports.UserProfileManagementServiceUpdatePostalAddressMocksProvider = UserProfileManagementServiceUpdatePostalAddressMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-user-http-ang.umd.js.map
