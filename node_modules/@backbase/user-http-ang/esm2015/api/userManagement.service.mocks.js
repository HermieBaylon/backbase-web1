import { createMocks } from '@backbase/foundation-ang/data-http';
export const UserManagementServiceCheckUserExistsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/existing/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const UserManagementServiceGetLegalEntityByExternalIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/externalids/{externalId}/legalentities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a154ebc2-3116-450e-9e26-1612d7cb48fb",
                    "externalId": "a00f4955-c920-4604-9ec8-4e2cddd447d6",
                    "name": "Bank Corp.",
                    "parentId": "8cc493bb-ffca-4b47-ae2f-594cd7282d30",
                    "isParent": true
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const UserManagementServiceGetOwnUserMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "externalBankId1",
                    "preferredLanguage": "fr-FR",
                    "legalEntityId": "c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53",
                    "legalEntityName": "BANK A",
                    "id": "3da7e7fb-857f-44c2-92aa-80572f6394e2",
                    "fullName": "Henry Duncan"
                }
            },
        ]
    }]);
export const UserManagementServiceGetUserByExternalIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const UserManagementServiceGetUserByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const UserManagementServiceGetUsersMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }, {
                        "externalId": "U0000011",
                        "legalEntityId": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                        "id": "fafd8fd6b661402b8411a48050bdc9ad",
                        "fullName": "Sofia Duncan"
                    }, {
                        "externalId": "U0000012",
                        "legalEntityId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                        "id": "bc9a83bf025449dea4ecc05ce816aebd",
                        "fullName": "Henry Duncan"
                    }, {
                        "externalId": "U0000013",
                        "legalEntityId": "34",
                        "id": "5360dbba1a254889ba94c22ff01b1c37",
                        "fullName": "Bart Nyman"
                    }, {
                        "externalId": "U0000014",
                        "legalEntityId": "c9fc30f4e5fb492c97ed0a05f926aecc",
                        "id": "37c1b6b531a34259b4c518eebc0b34a2",
                        "fullName": "Peter"
                    }, {
                        "externalId": "U0000015",
                        "legalEntityId": "0f6d14f40e064deeaee351befd53d3e7",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59",
                        "fullName": "Sandra"
                    }, {
                        "externalId": "U0000016",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbei84",
                        "fullName": "Marko Ilievski",
                        "preferredLanguage": "en-GB"
                    }, {
                        "externalId": "U0000017",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59t97",
                        "fullName": "Daniela Petkovska"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const UserManagementServiceGetUsersByLegalEntityIdsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/legalentityids",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "users": [{
                            "id": "001",
                            "externalId": "U0000010",
                            "legalEntityId": "012",
                            "fullName": "Mila"
                        }, {
                            "id": "002",
                            "externalId": "U0000011",
                            "legalEntityId": "023",
                            "fullName": "Kjiro"
                        }, {
                            "id": "003",
                            "externalId": "U0000012",
                            "legalEntityId": "034",
                            "fullName": "Daniel"
                        }],
                    "totalElements": 1000
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const UserManagementServiceUpdateOwnLanguageMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/preferred-language",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const UserManagementServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/users/existing/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/externalids/{externalId}/legalentities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a154ebc2-3116-450e-9e26-1612d7cb48fb",
                    "externalId": "a00f4955-c920-4604-9ec8-4e2cddd447d6",
                    "name": "Bank Corp.",
                    "parentId": "8cc493bb-ffca-4b47-ae2f-594cd7282d30",
                    "isParent": true
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "externalBankId1",
                    "preferredLanguage": "fr-FR",
                    "legalEntityId": "c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53",
                    "legalEntityName": "BANK A",
                    "id": "3da7e7fb-857f-44c2-92aa-80572f6394e2",
                    "fullName": "Henry Duncan"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }, {
                        "externalId": "U0000011",
                        "legalEntityId": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                        "id": "fafd8fd6b661402b8411a48050bdc9ad",
                        "fullName": "Sofia Duncan"
                    }, {
                        "externalId": "U0000012",
                        "legalEntityId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                        "id": "bc9a83bf025449dea4ecc05ce816aebd",
                        "fullName": "Henry Duncan"
                    }, {
                        "externalId": "U0000013",
                        "legalEntityId": "34",
                        "id": "5360dbba1a254889ba94c22ff01b1c37",
                        "fullName": "Bart Nyman"
                    }, {
                        "externalId": "U0000014",
                        "legalEntityId": "c9fc30f4e5fb492c97ed0a05f926aecc",
                        "id": "37c1b6b531a34259b4c518eebc0b34a2",
                        "fullName": "Peter"
                    }, {
                        "externalId": "U0000015",
                        "legalEntityId": "0f6d14f40e064deeaee351befd53d3e7",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59",
                        "fullName": "Sandra"
                    }, {
                        "externalId": "U0000016",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbei84",
                        "fullName": "Marko Ilievski",
                        "preferredLanguage": "en-GB"
                    }, {
                        "externalId": "U0000017",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59t97",
                        "fullName": "Daniela Petkovska"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/legalentityids",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "users": [{
                            "id": "001",
                            "externalId": "U0000010",
                            "legalEntityId": "012",
                            "fullName": "Mila"
                        }, {
                            "id": "002",
                            "externalId": "U0000011",
                            "legalEntityId": "023",
                            "fullName": "Kjiro"
                        }, {
                            "id": "003",
                            "externalId": "U0000012",
                            "legalEntityId": "034",
                            "fullName": "Daniel"
                        }],
                    "totalElements": 1000
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/preferred-language",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,