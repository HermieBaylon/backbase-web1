import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { USER_BASE_PATH } from '../variables';
import { UserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class UserProfileManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    addElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addElectronicAddressUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`;
    }
    addOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`;
    }
    addOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`;
    }
    addOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addOwnPostalAddressUrl(requestParameters) {
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`;
    }
    addPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addPhoneAddressUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`;
    }
    addPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addPostalAddressUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`;
    }
    deleteElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deleteElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deleteElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    deleteOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    deleteOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deleteOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deleteOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    deleteOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deleteOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteOwnPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deleteOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    deletePhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deletePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deletePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    deletePostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deletePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deletePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    getElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    getElectronicAddresses(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddresses.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getElectronicAddressesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddresses.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`;
    }
    getOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    getOwnElectronicAddresses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnElectronicAddressesUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`;
    }
    getOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    getOwnPhoneAddresses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPhoneAddressesUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`;
    }
    getOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    getOwnPostalAddresses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPostalAddressesUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`;
    }
    getOwnUserProfile(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnUserProfileUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile`;
    }
    getPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getPhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getPhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    getPhoneAddresses(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddresses.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPhoneAddressesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddresses.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`;
    }
    getPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getPostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getPostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    getPostalAddresses(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddresses.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPostalAddressesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddresses.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`;
    }
    getUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserProfileUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`;
    }
    replaceOwnUserProfileAttributes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceOwnUserProfileAttributes.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile`, _replaceUserProfileAttributes, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    replaceOwnUserProfileAttributesUrl(requestParameters) {
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceOwnUserProfileAttributes.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile`;
    }
    replaceUserProfileAttributes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling replaceUserProfileAttributes.');
        }
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceUserProfileAttributes.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`, _replaceUserProfileAttributes, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    replaceUserProfileAttributesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling replaceUserProfileAttributes.');
        }
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceUserProfileAttributes.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`;
    }
    updateElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    updateOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateOwnElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateOwnElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    updateOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updateOwnPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updateOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updateOwnPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updateOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    updateOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updateOwnPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updateOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updateOwnPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updateOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    updatePhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updatePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updatePhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updatePhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updatePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updatePhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    updatePostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updatePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updatePostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updatePostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updatePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updatePostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
}
UserProfileManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: i2.UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserProfileManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: i2.UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,