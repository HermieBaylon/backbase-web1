import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { USER_BASE_PATH } from '../variables';
import { UserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class UserApprovalsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    approveApproval(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling approveApproval.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/approve`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    approveApprovalUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling approveApproval.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/approve`;
    }
    getApprovalDetails(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovalDetails.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/details`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalDetailsUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovalDetails.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/details`;
    }
    rejectApproval(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling rejectApproval.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/reject`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    rejectApprovalUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling rejectApproval.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/reject`;
    }
}
UserApprovalsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApprovalsService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: i2.UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserApprovalsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApprovalsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApprovalsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: i2.UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,