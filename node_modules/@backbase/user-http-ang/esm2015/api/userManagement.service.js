import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { USER_BASE_PATH } from '../variables';
import { UserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class UserManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    checkUserExists(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling checkUserExists.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/existing/externalids/${encodeURIComponent(String(_externalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    checkUserExistsUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling checkUserExists.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/existing/externalids/${encodeURIComponent(String(_externalId))}`;
    }
    getLegalEntityByExternalId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}/legalentities`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntityByExternalIdUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}/legalentities`;
    }
    getOwnUser(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnUserUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me`;
    }
    getUserByExternalId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getUserByExternalId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserByExternalIdUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getUserByExternalId.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}`;
    }
    getUserById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserByIdUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserById.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}`;
    }
    getUsers(requestParameters, observe = 'body', reportProgress = false, options) {
        const _entityId = requestParameters["entityId"];
        if (_entityId === null || _entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling getUsers.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityId !== undefined && _entityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUsersUrl(requestParameters) {
        const _entityId = requestParameters["entityId"];
        if (_entityId === null || _entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling getUsers.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityId !== undefined && _entityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/users${queryString ? `?${queryString}` : ''}`;
    }
    getUsersByLegalEntityIds(requestParameters, observe = 'body', reportProgress = false, options) {
        const _getUsersByLegalEntityIdsRequest = requestParameters["getUsersByLegalEntityIdsRequest"];
        if (_getUsersByLegalEntityIdsRequest === null || _getUsersByLegalEntityIdsRequest === undefined) {
            throw new Error('Required parameter getUsersByLegalEntityIdsRequest was null or undefined when calling getUsersByLegalEntityIds.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/legalentityids`, _getUsersByLegalEntityIdsRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUsersByLegalEntityIdsUrl(requestParameters) {
        const _getUsersByLegalEntityIdsRequest = requestParameters["getUsersByLegalEntityIdsRequest"];
        if (_getUsersByLegalEntityIdsRequest === null || _getUsersByLegalEntityIdsRequest === undefined) {
            throw new Error('Required parameter getUsersByLegalEntityIdsRequest was null or undefined when calling getUsersByLegalEntityIds.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/legalentityids`;
    }
    updateOwnLanguage(requestParameters, observe = 'body', reportProgress = false, options) {
        const _updatePreferredLanguage = requestParameters["updatePreferredLanguage"];
        if (_updatePreferredLanguage === null || _updatePreferredLanguage === undefined) {
            throw new Error('Required parameter updatePreferredLanguage was null or undefined when calling updateOwnLanguage.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/preferred-language`, _updatePreferredLanguage, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnLanguageUrl(requestParameters) {
        const _updatePreferredLanguage = requestParameters["updatePreferredLanguage"];
        if (_updatePreferredLanguage === null || _updatePreferredLanguage === undefined) {
            throw new Error('Required parameter updatePreferredLanguage was null or undefined when calling updateOwnLanguage.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/preferred-language`;
    }
}
UserManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManagementService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: i2.UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: i2.UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlck1hbmFnZW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwaS91c2VyTWFuYWdlbWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUEyQixlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFjLFdBQVcsRUFBRSxVQUFVLEVBQ1UsTUFBWSxzQkFBc0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBK0IsWUFBWSxDQUFDO0FBYS9FLE9BQU8sRUFBRSxjQUFjLEVBQXNCLE1BQTBCLGNBQWMsQ0FBQztBQUN0RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBMEMsa0JBQWtCLENBQUM7Ozs7QUFnRHpGLE1BQU0sT0FBTyxxQkFBcUI7SUFPOUIsWUFBc0IsVUFBc0IsRUFBc0MsUUFBZ0IsRUFBYyxhQUFnQztRQUExSCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBTGxDLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDakIsbUJBQWMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ25DLGtCQUFhLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBSTNDLElBQUksYUFBYSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7U0FDdEM7UUFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2pELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO2dCQUM5QixRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUM1QjtZQUNELElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMxQztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLElBQUksSUFBSSx3QkFBd0IsRUFB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QUFPLFlBQVk7WUFDL0IsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZTtZQUNuRCxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsT0FBTztZQUNoQixjQUFjLEVBQUUsY0FBYztTQUNqQyxDQUNKLENBQUM7SUFDTixDQUFDO0lBRU0sb0JBQW9CLENBQUMsaUJBQWlEO1FBQ3pFLE1BQU0sd0JBQXdCLEdBQUcsaUJBQWlCLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUM5RSxJQUFJLHdCQUF3QixLQUFLLElBQUksSUFBSSx3QkFBd0IsS0FBSyxTQUFTLEVBQUU7WUFDN0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxrR0FBa0csQ0FBQyxDQUFDO1NBQ3ZIO1FBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSw0Q0FBNEMsQ0FBQztJQUN0RixDQUFDOzttSEFwdEJRLHFCQUFxQiw0Q0FPb0MsY0FBYzt1SEFQdkUscUJBQXFCLGNBRnBCLE1BQU07NEZBRVAscUJBQXFCO2tCQUhqQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBUWtELFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsY0FBYzs7MEJBQXFCLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZXIgTWFuYWdlciBjbGllbnRcbiAqIENyZWF0ZSwgcmV0cmlldmUsIGFuZCBtYW5hZ2UgdXNlcnMgYW5kIHRoZWlyIHJlbGF0aW9uc2hpcHMgd2l0aCBpbnRlcm5hbCAoREJTIHNlcnZpY2VzKSBhbmQgZXh0ZXJuYWwgKENSTSBzeXN0ZW1zKSByZXNvdXJjZXMuIFxuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAyLjQuMFxuICogXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9naXRodWIuY29tL0JhY2tiYXNlL2JhY2tiYXNlLW9wZW5hcGktdG9vbHMpLlxuICogaHR0cHM6Ly9naXRodWIuY29tL0JhY2tiYXNlL2JhY2tiYXNlLW9wZW5hcGktdG9vbHNcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgbWVtYmVyLW9yZGVyaW5nICovXG5cbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSAgICAgICAgICAgICAgICAgICAgICBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zLFxuICAgICAgICAgSHR0cFJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBQYXJhbWV0ZXJDb2RlYyB9ICAgICAgIGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEN1c3RvbUh0dHBQYXJhbWV0ZXJDb2RlYyB9ICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICcuLi9lbmNvZGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQmFkUmVxdWVzdEVycm9yIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEZvcmJpZGRlbkVycm9yIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEdldE93blVzZXIgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgR2V0VXNlciB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBHZXRVc2Vyc0J5TGVnYWxFbnRpdHlJZHNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IEdldFVzZXJzTGlzdCB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBMZWdhbEVudGl0eSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBOb3RGb3VuZEVycm9yIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IFVwZGF0ZVByZWZlcnJlZExhbmd1YWdlIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcblxuaW1wb3J0IHsgVVNFUl9CQVNFX1BBVEgsIENPTExFQ1RJT05fRk9STUFUUyB9ICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vdmFyaWFibGVzJztcbmltcG9ydCB7IFVzZXJDb25maWd1cmF0aW9uIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vY29uZmlndXJhdGlvbic7XG5cblxuZXhwb3J0IGludGVyZmFjZSBDaGVja1VzZXJFeGlzdHNSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogRXh0ZXJuYWwgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHJlc291cmNlLiAqL1xuICAgIFtcImV4dGVybmFsSWRcIl06IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBFeHRlcm5hbCB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcmVzb3VyY2UuICovXG4gICAgW1wiZXh0ZXJuYWxJZFwiXTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFVzZXJCeUV4dGVybmFsSWRSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogRXh0ZXJuYWwgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHJlc291cmNlLiAqL1xuICAgIFtcImV4dGVybmFsSWRcIl06IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRVc2VyQnlJZFJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBVc2VyIGludGVybmFsIElEICovXG4gICAgW1wiaW50ZXJuYWxJZFwiXTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFVzZXJzUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIExlZ2FsIEVudGl0eSBJRCAqL1xuICAgIFtcImVudGl0eUlkXCJdOiBzdHJpbmc7XG4gICAgLyoqIENhc2UtaW5zZW5zaXRpdmUgc2VhcmNoIHRlcm0gdXNlZCB0byBzZWFyY2ggZm9yIHVzZXJzIGJ5IHRoZWlyIGZ1bGwgbmFtZSAqL1xuICAgIFtcInF1ZXJ5XCJdPzogc3RyaW5nO1xuICAgIC8qKiBQYWdlIE51bWJlci4gU2tpcCBvdmVyIHBhZ2VzIG9mIGVsZW1lbnRzIGJ5IHNwZWNpZnlpbmcgYSBzdGFydCB2YWx1ZSBmb3IgdGhlIHF1ZXJ5ICAqL1xuICAgIFtcImZyb21cIl0/OiBudW1iZXI7XG4gICAgLyoqIFJlY29yZCBVVUlELiBBcyBhbiBhbHRlcm5hdGl2ZSBmb3Igc3BlY2lmeWluZyBcXCYjMzk7ZnJvbVxcJiMzOTsgdGhpcyBhbGxvd3MgdG8gcG9pbnQgdG8gdGhlIHJlY29yZCB0byBzdGFydCB0aGUgc2VsZWN0aW9uIGZyb20uICAqL1xuICAgIFtcImN1cnNvclwiXT86IHN0cmluZztcbiAgICAvKiogTGltaXQgdGhlIG51bWJlciBvZiBlbGVtZW50cyBvbiB0aGUgcmVzcG9uc2UuIFdoZW4gdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIGN1cnNvciwgdGhlIHZhbHVlIGlzIGFsbG93ZWQgdG8gYmUgYSBuZWdhdGl2ZSBudW1iZXIgdG8gaW5kaWNhdGUgcmVxdWVzdGluZyByZWNvcmRzIHVwd2FyZHMgZnJvbSB0aGUgc3RhcnRpbmcgcG9pbnQgaW5kaWNhdGVkIGJ5IHRoZSBjdXJzb3IuICAqL1xuICAgIFtcInNpemVcIl0/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdFBhcmFtcyB7XG4gICAgW1wiZ2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdFwiXTogR2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVPd25MYW5ndWFnZVJlcXVlc3RQYXJhbXMge1xuICAgIFtcInVwZGF0ZVByZWZlcnJlZExhbmd1YWdlXCJdOiBVcGRhdGVQcmVmZXJyZWRMYW5ndWFnZTtcbn1cblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBVc2VyTWFuYWdlbWVudFNlcnZpY2Uge1xuXG4gICAgcHJvdGVjdGVkIGJhc2VQYXRoID0gJyc7XG4gICAgcHVibGljIGRlZmF1bHRIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgcHVibGljIGNvbmZpZ3VyYXRpb24gPSBuZXcgVXNlckNvbmZpZ3VyYXRpb24oKTtcbiAgICBwdWJsaWMgZW5jb2RlcjogSHR0cFBhcmFtZXRlckNvZGVjO1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsIEBPcHRpb25hbCgpIEBJbmplY3QoVVNFUl9CQVNFX1BBVEgpIGJhc2VQYXRoOiBzdHJpbmcsIEBPcHRpb25hbCgpIGNvbmZpZ3VyYXRpb246IFVzZXJDb25maWd1cmF0aW9uKSB7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBiYXNlUGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBiYXNlUGF0aCA9IHRoaXMuYmFzZVBhdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGggPSBiYXNlUGF0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuY29kZXIgPSB0aGlzLmNvbmZpZ3VyYXRpb24uZW5jb2RlciB8fCBuZXcgQ3VzdG9tSHR0cFBhcmFtZXRlckNvZGVjKCk7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIGFkZFRvSHR0cFBhcmFtcyhodHRwUGFyYW1zOiBIdHRwUGFyYW1zLCB2YWx1ZTogYW55LCBrZXk/OiBzdHJpbmcpOiBIdHRwUGFyYW1zIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBodHRwUGFyYW1zID0gdGhpcy5hZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoaHR0cFBhcmFtcywgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHR0cFBhcmFtcyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlKGh0dHBQYXJhbXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodHRwUGFyYW1zO1xuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlKGh0dHBQYXJhbXM6IEh0dHBQYXJhbXMsIHZhbHVlPzogYW55LCBrZXk/OiBzdHJpbmcpOiBIdHRwUGFyYW1zIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBodHRwUGFyYW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgKHZhbHVlIGFzIGFueVtdKS5mb3JFYWNoKCBlbGVtID0+IGh0dHBQYXJhbXMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShodHRwUGFyYW1zLCBlbGVtLCBrZXkpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0dHBQYXJhbXMgPSBodHRwUGFyYW1zLmFwcGVuZChrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAodmFsdWUgYXMgRGF0ZSkudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMTApKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwia2V5IG1heSBub3QgYmUgbnVsbCBpZiB2YWx1ZSBpcyBEYXRlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goIGsgPT4gaHR0cFBhcmFtcyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlKFxuICAgICAgICAgICAgICAgICAgICBodHRwUGFyYW1zLCB2YWx1ZVtrXSwga2V5ICE9IG51bGwgPyBgJHtrZXl9LiR7a31gIDogaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImtleSBtYXkgbm90IGJlIG51bGwgaWYgdmFsdWUgaXMgbm90IG9iamVjdCBvciBhcnJheVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHR0cFBhcmFtcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBVc2VyIGV4aXN0cyBieSBpdHMgZXh0ZXJuYWwgSURcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdXNlciBkZWZpbmVkIGJ5IGl0cyBleHRlcm5hbCBJZCBhbHJlYWR5IGV4aXN0cy4gIE5vdGU6IFRoaXMgZW5kcG9pbnQgcmV0dW5zIGEgJiN4NjA7NDA0JiN4NjA7IGlmIHRoZSBleHRlcm5hbElkIHJlcXVlc3RlZCBpcyBvdXRzaWRlIG9mIHRoZSBhdXRoZW50aWNhdGVkIHVzZXJzIGxlZ2FsIGhpZXJhcmNoeS4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGNoZWNrVXNlckV4aXN0cyhyZXF1ZXN0UGFyYW1ldGVyczogQ2hlY2tVc2VyRXhpc3RzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIFVzZXIgZXhpc3RzIGJ5IGl0cyBleHRlcm5hbCBJRFxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB1c2VyIGRlZmluZWQgYnkgaXRzIGV4dGVybmFsIElkIGFscmVhZHkgZXhpc3RzLiAgTm90ZTogVGhpcyBlbmRwb2ludCByZXR1bnMgYSAmI3g2MDs0MDQmI3g2MDsgaWYgdGhlIGV4dGVybmFsSWQgcmVxdWVzdGVkIGlzIG91dHNpZGUgb2YgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlcnMgbGVnYWwgaGllcmFyY2h5LiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hlY2tVc2VyRXhpc3RzKHJlcXVlc3RQYXJhbWV0ZXJzOiBDaGVja1VzZXJFeGlzdHNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgVXNlciBleGlzdHMgYnkgaXRzIGV4dGVybmFsIElEXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHVzZXIgZGVmaW5lZCBieSBpdHMgZXh0ZXJuYWwgSWQgYWxyZWFkeSBleGlzdHMuICBOb3RlOiBUaGlzIGVuZHBvaW50IHJldHVucyBhICYjeDYwOzQwNCYjeDYwOyBpZiB0aGUgZXh0ZXJuYWxJZCByZXF1ZXN0ZWQgaXMgb3V0c2lkZSBvZiB0aGUgYXV0aGVudGljYXRlZCB1c2VycyBsZWdhbCBoaWVyYXJjaHkuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja1VzZXJFeGlzdHMocmVxdWVzdFBhcmFtZXRlcnM6IENoZWNrVXNlckV4aXN0c1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgVXNlciBleGlzdHMgYnkgaXRzIGV4dGVybmFsIElEXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHVzZXIgZGVmaW5lZCBieSBpdHMgZXh0ZXJuYWwgSWQgYWxyZWFkeSBleGlzdHMuICBOb3RlOiBUaGlzIGVuZHBvaW50IHJldHVucyBhICYjeDYwOzQwNCYjeDYwOyBpZiB0aGUgZXh0ZXJuYWxJZCByZXF1ZXN0ZWQgaXMgb3V0c2lkZSBvZiB0aGUgYXV0aGVudGljYXRlZCB1c2VycyBsZWdhbCBoaWVyYXJjaHkuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja1VzZXJFeGlzdHMocmVxdWVzdFBhcmFtZXRlcnM6IENoZWNrVXNlckV4aXN0c1JlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9leHRlcm5hbElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJleHRlcm5hbElkXCJdO1xuICAgICAgICBpZiAoX2V4dGVybmFsSWQgPT09IG51bGwgfHwgX2V4dGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZXh0ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGNoZWNrVXNlckV4aXN0cy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvdXNlcnMvZXhpc3RpbmcvZXh0ZXJuYWxpZHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9leHRlcm5hbElkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrVXNlckV4aXN0c1VybChyZXF1ZXN0UGFyYW1ldGVyczogQ2hlY2tVc2VyRXhpc3RzUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9leHRlcm5hbElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJleHRlcm5hbElkXCJdO1xuICAgICAgICBpZiAoX2V4dGVybmFsSWQgPT09IG51bGwgfHwgX2V4dGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZXh0ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGNoZWNrVXNlckV4aXN0cy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL3VzZXJzL2V4aXN0aW5nL2V4dGVybmFsaWRzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfZXh0ZXJuYWxJZCkpfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXR5IGJ5IFVzZXIgRXh0ZXJuYWwgSURcbiAgICAgKiBSZXRyaWV2ZSB0aGUgTGVnYWwgRW50aXR5IHRoYXQgdGhlIFVzZXIgQmVsb25ncyB0by4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8TGVnYWxFbnRpdHk+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0eSBieSBVc2VyIEV4dGVybmFsIElEXG4gICAgICogUmV0cmlldmUgdGhlIExlZ2FsIEVudGl0eSB0aGF0IHRoZSBVc2VyIEJlbG9uZ3MgdG8uIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8TGVnYWxFbnRpdHk+PjtcbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdHkgYnkgVXNlciBFeHRlcm5hbCBJRFxuICAgICAqIFJldHJpZXZlIHRoZSBMZWdhbCBFbnRpdHkgdGhhdCB0aGUgVXNlciBCZWxvbmdzIHRvLiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxMZWdhbEVudGl0eT4+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0eSBieSBVc2VyIEV4dGVybmFsIElEXG4gICAgICogUmV0cmlldmUgdGhlIExlZ2FsIEVudGl0eSB0aGF0IHRoZSBVc2VyIEJlbG9uZ3MgdG8uIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfZXh0ZXJuYWxJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZXh0ZXJuYWxJZFwiXTtcbiAgICAgICAgaWYgKF9leHRlcm5hbElkID09PSBudWxsIHx8IF9leHRlcm5hbElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGV4dGVybmFsSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8TGVnYWxFbnRpdHk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi91c2Vycy9leHRlcm5hbGlkcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2V4dGVybmFsSWQpKX0vbGVnYWxlbnRpdGllc2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFVybChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX2V4dGVybmFsSWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImV4dGVybmFsSWRcIl07XG4gICAgICAgIGlmIChfZXh0ZXJuYWxJZCA9PT0gbnVsbCB8fCBfZXh0ZXJuYWxJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBleHRlcm5hbElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi91c2Vycy9leHRlcm5hbGlkcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2V4dGVybmFsSWQpKX0vbGVnYWxlbnRpdGllc2A7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IG93biBVc2VyIEluZm9ybWF0aW9uXG4gICAgICogUmV0cmlldmVzIHRoZSB1c2VyIGluZm9ybWF0aW9uIG9mIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuIFxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPd25Vc2VyKG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8R2V0T3duVXNlcj47XG4gICAgLyoqXG4gICAgICogR2V0IG93biBVc2VyIEluZm9ybWF0aW9uXG4gICAgICogUmV0cmlldmVzIHRoZSB1c2VyIGluZm9ybWF0aW9uIG9mIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuIFxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPd25Vc2VyKG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxHZXRPd25Vc2VyPj47XG4gICAgLyoqXG4gICAgICogR2V0IG93biBVc2VyIEluZm9ybWF0aW9uXG4gICAgICogUmV0cmlldmVzIHRoZSB1c2VyIGluZm9ybWF0aW9uIG9mIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIuIFxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRPd25Vc2VyKG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8R2V0T3duVXNlcj4+O1xuICAgIC8qKlxuICAgICAqIEdldCBvd24gVXNlciBJbmZvcm1hdGlvblxuICAgICAqIFJldHJpZXZlcyB0aGUgdXNlciBpbmZvcm1hdGlvbiBvZiB0aGUgYXV0aGVudGljYXRlZCB1c2VyLiBcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0T3duVXNlcihvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8R2V0T3duVXNlcj4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL3VzZXJzL21lYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE93blVzZXJVcmwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi91c2Vycy9tZWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IFVzZXIgYnkgZXh0ZXJuYWwgSURcbiAgICAgKiBSZXRyaWV2ZXMgYSBVc2VyIGVudGl0eSBieSBpdHMgZXh0ZXJuYWwgSUQuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVc2VyQnlFeHRlcm5hbElkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRVc2VyQnlFeHRlcm5hbElkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxHZXRVc2VyPjtcbiAgICAvKipcbiAgICAgKiBHZXQgVXNlciBieSBleHRlcm5hbCBJRFxuICAgICAqIFJldHJpZXZlcyBhIFVzZXIgZW50aXR5IGJ5IGl0cyBleHRlcm5hbCBJRC4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJCeUV4dGVybmFsSWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJCeUV4dGVybmFsSWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8R2V0VXNlcj4+O1xuICAgIC8qKlxuICAgICAqIEdldCBVc2VyIGJ5IGV4dGVybmFsIElEXG4gICAgICogUmV0cmlldmVzIGEgVXNlciBlbnRpdHkgYnkgaXRzIGV4dGVybmFsIElELiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckJ5RXh0ZXJuYWxJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0VXNlckJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8R2V0VXNlcj4+O1xuICAgIC8qKlxuICAgICAqIEdldCBVc2VyIGJ5IGV4dGVybmFsIElEXG4gICAgICogUmV0cmlldmVzIGEgVXNlciBlbnRpdHkgYnkgaXRzIGV4dGVybmFsIElELiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckJ5RXh0ZXJuYWxJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0VXNlckJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9leHRlcm5hbElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJleHRlcm5hbElkXCJdO1xuICAgICAgICBpZiAoX2V4dGVybmFsSWQgPT09IG51bGwgfHwgX2V4dGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZXh0ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFVzZXJCeUV4dGVybmFsSWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEdldFVzZXI+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi91c2Vycy9leHRlcm5hbGlkcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2V4dGVybmFsSWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VXNlckJ5RXh0ZXJuYWxJZFVybChyZXF1ZXN0UGFyYW1ldGVyczogR2V0VXNlckJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfZXh0ZXJuYWxJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZXh0ZXJuYWxJZFwiXTtcbiAgICAgICAgaWYgKF9leHRlcm5hbElkID09PSBudWxsIHx8IF9leHRlcm5hbElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGV4dGVybmFsSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRVc2VyQnlFeHRlcm5hbElkLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvdXNlcnMvZXh0ZXJuYWxpZHMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9leHRlcm5hbElkKSl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgdXNlciBieSB0aGVpciBJRFxuICAgICAqIFJldHJpZXZlcyBhIFVzZXIgZW50aXR5IGJ5IHRoZWlyIEludGVybmFsIElELiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxHZXRVc2VyPjtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgdXNlciBieSB0aGVpciBJRFxuICAgICAqIFJldHJpZXZlcyBhIFVzZXIgZW50aXR5IGJ5IHRoZWlyIEludGVybmFsIElELiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEdldFVzZXI+PjtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgdXNlciBieSB0aGVpciBJRFxuICAgICAqIFJldHJpZXZlcyBhIFVzZXIgZW50aXR5IGJ5IHRoZWlyIEludGVybmFsIElELiBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlckJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxHZXRVc2VyPj47XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHVzZXIgYnkgdGhlaXIgSURcbiAgICAgKiBSZXRyaWV2ZXMgYSBVc2VyIGVudGl0eSBieSB0aGVpciBJbnRlcm5hbCBJRC4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRVc2VyQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9pbnRlcm5hbElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJpbnRlcm5hbElkXCJdO1xuICAgICAgICBpZiAoX2ludGVybmFsSWQgPT09IG51bGwgfHwgX2ludGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaW50ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFVzZXJCeUlkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxHZXRVc2VyPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvdXNlcnMvJHtlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKF9pbnRlcm5hbElkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFVzZXJCeUlkVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRVc2VyQnlJZFJlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfaW50ZXJuYWxJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiaW50ZXJuYWxJZFwiXTtcbiAgICAgICAgaWYgKF9pbnRlcm5hbElkID09PSBudWxsIHx8IF9pbnRlcm5hbElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGludGVybmFsSWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRVc2VyQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL3VzZXJzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfaW50ZXJuYWxJZCkpfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgVXNlcnMgYnkgdGhlaXIgTGVnYWwgRW50aXR5IElEXG4gICAgICogUmV0cmlldmUgYSBsaXN0IG9mIHVzZXJzIHdpdGggdGhlIHNlYXJjaCBjcml0ZXJpYSBwYXNzZWQgYXMgcXVlcnkgcGFyYW1ldGVyczogKiBlbnRpdHlJZDogTGVnYWwgRW50aXR5IElEIHRoYXQgdGhlIHVzZXJzIGJlbG9uZyB0by4gUkVRVUlSRUQgKiBxdWVyeTogQ2FzZS1pbnNlbnNpdGl2ZSBzZWFyY2ggdGVybSB1c2VkIHRvIHNlYXJjaCBmb3IgdXNlcnMgYnkgdGhlaXIgZnVsbCBuYW1lLiAgVGhpcyBlbmRwb2ludCByZXN1bHRzIGFyZSBwYWdlYWJsZSBhbmQgYWxzbyBhZG1pdCB0aGUgZm9sbG93aW5nIHF1ZXJ5IHBhcmFtZXRlcnM6ICogZnJvbTogUGFnZSBOdW1iZXIuIFNraXAgb3ZlciBwYWdlcyBvZiBlbGVtZW50cyBieSBzcGVjaWZ5aW5nIGEgc3RhcnQgdmFsdWUgZm9yIHRoZSBxdWVyeS4gKiBzaXplOiBOdW1iZXIgb2YgcmVjb3JkcyB0aGF0IHdpbGwgYmUgc2hvd24gZWFjaCByZXF1ZXN0LiAgQXMgYW4gZXhhbXBsZSwgYSByZXF1ZXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcXVlcnkgcGFyYW1ldGVyczogICYjeDYwOyYjeDYwOyYjeDYwO2Zyb20mI3gzRDsyJmFtcDtzaXplJiN4M0Q7MTAmI3g2MDsmI3g2MDsmI3g2MDsgIHdpbGwgc2hvdyB0aGUgZWxlbWVudHMgMjB0aCB0byAzMHRoIChub24gaW5jbHVzaXZlKSBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlcnMocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxBcnJheTxHZXRVc2VyPj47XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgVXNlcnMgYnkgdGhlaXIgTGVnYWwgRW50aXR5IElEXG4gICAgICogUmV0cmlldmUgYSBsaXN0IG9mIHVzZXJzIHdpdGggdGhlIHNlYXJjaCBjcml0ZXJpYSBwYXNzZWQgYXMgcXVlcnkgcGFyYW1ldGVyczogKiBlbnRpdHlJZDogTGVnYWwgRW50aXR5IElEIHRoYXQgdGhlIHVzZXJzIGJlbG9uZyB0by4gUkVRVUlSRUQgKiBxdWVyeTogQ2FzZS1pbnNlbnNpdGl2ZSBzZWFyY2ggdGVybSB1c2VkIHRvIHNlYXJjaCBmb3IgdXNlcnMgYnkgdGhlaXIgZnVsbCBuYW1lLiAgVGhpcyBlbmRwb2ludCByZXN1bHRzIGFyZSBwYWdlYWJsZSBhbmQgYWxzbyBhZG1pdCB0aGUgZm9sbG93aW5nIHF1ZXJ5IHBhcmFtZXRlcnM6ICogZnJvbTogUGFnZSBOdW1iZXIuIFNraXAgb3ZlciBwYWdlcyBvZiBlbGVtZW50cyBieSBzcGVjaWZ5aW5nIGEgc3RhcnQgdmFsdWUgZm9yIHRoZSBxdWVyeS4gKiBzaXplOiBOdW1iZXIgb2YgcmVjb3JkcyB0aGF0IHdpbGwgYmUgc2hvd24gZWFjaCByZXF1ZXN0LiAgQXMgYW4gZXhhbXBsZSwgYSByZXF1ZXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcXVlcnkgcGFyYW1ldGVyczogICYjeDYwOyYjeDYwOyYjeDYwO2Zyb20mI3gzRDsyJmFtcDtzaXplJiN4M0Q7MTAmI3g2MDsmI3g2MDsmI3g2MDsgIHdpbGwgc2hvdyB0aGUgZWxlbWVudHMgMjB0aCB0byAzMHRoIChub24gaW5jbHVzaXZlKSBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlcnMocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEFycmF5PEdldFVzZXI+Pj47XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgVXNlcnMgYnkgdGhlaXIgTGVnYWwgRW50aXR5IElEXG4gICAgICogUmV0cmlldmUgYSBsaXN0IG9mIHVzZXJzIHdpdGggdGhlIHNlYXJjaCBjcml0ZXJpYSBwYXNzZWQgYXMgcXVlcnkgcGFyYW1ldGVyczogKiBlbnRpdHlJZDogTGVnYWwgRW50aXR5IElEIHRoYXQgdGhlIHVzZXJzIGJlbG9uZyB0by4gUkVRVUlSRUQgKiBxdWVyeTogQ2FzZS1pbnNlbnNpdGl2ZSBzZWFyY2ggdGVybSB1c2VkIHRvIHNlYXJjaCBmb3IgdXNlcnMgYnkgdGhlaXIgZnVsbCBuYW1lLiAgVGhpcyBlbmRwb2ludCByZXN1bHRzIGFyZSBwYWdlYWJsZSBhbmQgYWxzbyBhZG1pdCB0aGUgZm9sbG93aW5nIHF1ZXJ5IHBhcmFtZXRlcnM6ICogZnJvbTogUGFnZSBOdW1iZXIuIFNraXAgb3ZlciBwYWdlcyBvZiBlbGVtZW50cyBieSBzcGVjaWZ5aW5nIGEgc3RhcnQgdmFsdWUgZm9yIHRoZSBxdWVyeS4gKiBzaXplOiBOdW1iZXIgb2YgcmVjb3JkcyB0aGF0IHdpbGwgYmUgc2hvd24gZWFjaCByZXF1ZXN0LiAgQXMgYW4gZXhhbXBsZSwgYSByZXF1ZXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcXVlcnkgcGFyYW1ldGVyczogICYjeDYwOyYjeDYwOyYjeDYwO2Zyb20mI3gzRDsyJmFtcDtzaXplJiN4M0Q7MTAmI3g2MDsmI3g2MDsmI3g2MDsgIHdpbGwgc2hvdyB0aGUgZWxlbWVudHMgMjB0aCB0byAzMHRoIChub24gaW5jbHVzaXZlKSBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VXNlcnMocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBcnJheTxHZXRVc2VyPj4+O1xuICAgIC8qKlxuICAgICAqIEdldHMgYSBsaXN0IG9mIFVzZXJzIGJ5IHRoZWlyIExlZ2FsIEVudGl0eSBJRFxuICAgICAqIFJldHJpZXZlIGEgbGlzdCBvZiB1c2VycyB3aXRoIHRoZSBzZWFyY2ggY3JpdGVyaWEgcGFzc2VkIGFzIHF1ZXJ5IHBhcmFtZXRlcnM6ICogZW50aXR5SWQ6IExlZ2FsIEVudGl0eSBJRCB0aGF0IHRoZSB1c2VycyBiZWxvbmcgdG8uIFJFUVVJUkVEICogcXVlcnk6IENhc2UtaW5zZW5zaXRpdmUgc2VhcmNoIHRlcm0gdXNlZCB0byBzZWFyY2ggZm9yIHVzZXJzIGJ5IHRoZWlyIGZ1bGwgbmFtZS4gIFRoaXMgZW5kcG9pbnQgcmVzdWx0cyBhcmUgcGFnZWFibGUgYW5kIGFsc28gYWRtaXQgdGhlIGZvbGxvd2luZyBxdWVyeSBwYXJhbWV0ZXJzOiAqIGZyb206IFBhZ2UgTnVtYmVyLiBTa2lwIG92ZXIgcGFnZXMgb2YgZWxlbWVudHMgYnkgc3BlY2lmeWluZyBhIHN0YXJ0IHZhbHVlIGZvciB0aGUgcXVlcnkuICogc2l6ZTogTnVtYmVyIG9mIHJlY29yZHMgdGhhdCB3aWxsIGJlIHNob3duIGVhY2ggcmVxdWVzdC4gIEFzIGFuIGV4YW1wbGUsIGEgcmVxdWVzdCB1c2luZyB0aGUgZm9sbG93aW5nIHF1ZXJ5IHBhcmFtZXRlcnM6ICAmI3g2MDsmI3g2MDsmI3g2MDtmcm9tJiN4M0Q7MiZhbXA7c2l6ZSYjeDNEOzEwJiN4NjA7JiN4NjA7JiN4NjA7ICB3aWxsIHNob3cgdGhlIGVsZW1lbnRzIDIwdGggdG8gMzB0aCAobm9uIGluY2x1c2l2ZSkgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJzKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRVc2Vyc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9lbnRpdHlJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZW50aXR5SWRcIl07XG4gICAgICAgIGlmIChfZW50aXR5SWQgPT09IG51bGwgfHwgX2VudGl0eUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGVudGl0eUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0VXNlcnMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX3F1ZXJ5ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJxdWVyeVwiXTtcbiAgICAgICAgY29uc3QgX2Zyb20gPSByZXF1ZXN0UGFyYW1ldGVyc1tcImZyb21cIl07XG4gICAgICAgIGNvbnN0IF9jdXJzb3IgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImN1cnNvclwiXTtcbiAgICAgICAgY29uc3QgX3NpemUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInNpemVcIl07XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9lbnRpdHlJZCAhPT0gdW5kZWZpbmVkICYmIF9lbnRpdHlJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2VudGl0eUlkLCAnZW50aXR5SWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3F1ZXJ5ICE9PSB1bmRlZmluZWQgJiYgX3F1ZXJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fcXVlcnksICdxdWVyeScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfZnJvbSAhPT0gdW5kZWZpbmVkICYmIF9mcm9tICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fZnJvbSwgJ2Zyb20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2N1cnNvciAhPT0gdW5kZWZpbmVkICYmIF9jdXJzb3IgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9jdXJzb3IsICdjdXJzb3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3NpemUgIT09IHVuZGVmaW5lZCAmJiBfc2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3NpemUsICdzaXplJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEFycmF5PEdldFVzZXI+PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvdXNlcnNgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VXNlcnNVcmwocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJzUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9lbnRpdHlJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZW50aXR5SWRcIl07XG4gICAgICAgIGlmIChfZW50aXR5SWQgPT09IG51bGwgfHwgX2VudGl0eUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGVudGl0eUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0VXNlcnMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgX3F1ZXJ5ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJxdWVyeVwiXTtcbiAgICAgICAgY29uc3QgX2Zyb20gPSByZXF1ZXN0UGFyYW1ldGVyc1tcImZyb21cIl07XG4gICAgICAgIGNvbnN0IF9jdXJzb3IgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImN1cnNvclwiXTtcbiAgICAgICAgY29uc3QgX3NpemUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInNpemVcIl07XG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChfZW50aXR5SWQgIT09IHVuZGVmaW5lZCAmJiBfZW50aXR5SWQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9lbnRpdHlJZCwgJ2VudGl0eUlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9xdWVyeSAhPT0gdW5kZWZpbmVkICYmIF9xdWVyeSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3F1ZXJ5LCAncXVlcnknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2Zyb20gIT09IHVuZGVmaW5lZCAmJiBfZnJvbSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2Zyb20sICdmcm9tJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9jdXJzb3IgIT09IHVuZGVmaW5lZCAmJiBfY3Vyc29yICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fY3Vyc29yLCAnY3Vyc29yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9zaXplICE9PSB1bmRlZmluZWQgJiYgX3NpemUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9zaXplLCAnc2l6ZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlQYXJhbWV0ZXJzLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvdXNlcnMke3F1ZXJ5U3RyaW5nID8gYD8ke3F1ZXJ5U3RyaW5nfWAgOiAnJ31gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgVXNlcnMgYnkgTGVnYWwgRW50aXR5IElkc1xuICAgICAqIFJldHJpZXZlIGEgcGFnZWQgbGlzdCBvZiBVc2VycyBieSBnaXZlbiBsaXN0IG9mIGxlZ2FsIGVudGl0eSBJZHMsIHdpdGggb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgcXVlcnkgYW5kIGV4Y2x1ZGluZyB1c2VyIGlkcy4gIFRoZSBsaXN0IG9mIHVzZXJzIGlzIHNvcnRlZCBieSBMZWdhbCBFbnRpdHkgSUQsIHRoZW4gRnVsbCBOYW1lIGFuZCB1bHRpbWF0ZWx5IElEIGluIGFzY2VuZGluZyBvcmRlci4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJzQnlMZWdhbEVudGl0eUlkcyhyZXF1ZXN0UGFyYW1ldGVyczogR2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxHZXRVc2Vyc0xpc3Q+O1xuICAgIC8qKlxuICAgICAqIExpc3QgVXNlcnMgYnkgTGVnYWwgRW50aXR5IElkc1xuICAgICAqIFJldHJpZXZlIGEgcGFnZWQgbGlzdCBvZiBVc2VycyBieSBnaXZlbiBsaXN0IG9mIGxlZ2FsIGVudGl0eSBJZHMsIHdpdGggb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgcXVlcnkgYW5kIGV4Y2x1ZGluZyB1c2VyIGlkcy4gIFRoZSBsaXN0IG9mIHVzZXJzIGlzIHNvcnRlZCBieSBMZWdhbCBFbnRpdHkgSUQsIHRoZW4gRnVsbCBOYW1lIGFuZCB1bHRpbWF0ZWx5IElEIGluIGFzY2VuZGluZyBvcmRlci4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJzQnlMZWdhbEVudGl0eUlkcyhyZXF1ZXN0UGFyYW1ldGVyczogR2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEdldFVzZXJzTGlzdD4+O1xuICAgIC8qKlxuICAgICAqIExpc3QgVXNlcnMgYnkgTGVnYWwgRW50aXR5IElkc1xuICAgICAqIFJldHJpZXZlIGEgcGFnZWQgbGlzdCBvZiBVc2VycyBieSBnaXZlbiBsaXN0IG9mIGxlZ2FsIGVudGl0eSBJZHMsIHdpdGggb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgcXVlcnkgYW5kIGV4Y2x1ZGluZyB1c2VyIGlkcy4gIFRoZSBsaXN0IG9mIHVzZXJzIGlzIHNvcnRlZCBieSBMZWdhbCBFbnRpdHkgSUQsIHRoZW4gRnVsbCBOYW1lIGFuZCB1bHRpbWF0ZWx5IElEIGluIGFzY2VuZGluZyBvcmRlci4gXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFVzZXJzQnlMZWdhbEVudGl0eUlkcyhyZXF1ZXN0UGFyYW1ldGVyczogR2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxHZXRVc2Vyc0xpc3Q+PjtcbiAgICAvKipcbiAgICAgKiBMaXN0IFVzZXJzIGJ5IExlZ2FsIEVudGl0eSBJZHNcbiAgICAgKiBSZXRyaWV2ZSBhIHBhZ2VkIGxpc3Qgb2YgVXNlcnMgYnkgZ2l2ZW4gbGlzdCBvZiBsZWdhbCBlbnRpdHkgSWRzLCB3aXRoIG9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHF1ZXJ5IGFuZCBleGNsdWRpbmcgdXNlciBpZHMuICBUaGUgbGlzdCBvZiB1c2VycyBpcyBzb3J0ZWQgYnkgTGVnYWwgRW50aXR5IElELCB0aGVuIEZ1bGwgTmFtZSBhbmQgdWx0aW1hdGVseSBJRCBpbiBhc2NlbmRpbmcgb3JkZXIuIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVc2Vyc0J5TGVnYWxFbnRpdHlJZHMocmVxdWVzdFBhcmFtZXRlcnM6IEdldFVzZXJzQnlMZWdhbEVudGl0eUlkc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9nZXRVc2Vyc0J5TGVnYWxFbnRpdHlJZHNSZXF1ZXN0ID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJnZXRVc2Vyc0J5TGVnYWxFbnRpdHlJZHNSZXF1ZXN0XCJdO1xuICAgICAgICBpZiAoX2dldFVzZXJzQnlMZWdhbEVudGl0eUlkc1JlcXVlc3QgPT09IG51bGwgfHwgX2dldFVzZXJzQnlMZWdhbEVudGl0eUlkc1JlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZ2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFVzZXJzQnlMZWdhbEVudGl0eUlkcy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wb3N0PEdldFVzZXJzTGlzdD4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL3VzZXJzL2xlZ2FsZW50aXR5aWRzYCxcbiAgICAgICAgICAgIF9nZXRVc2Vyc0J5TGVnYWxFbnRpdHlJZHNSZXF1ZXN0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRVc2Vyc0J5TGVnYWxFbnRpdHlJZHNSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX2dldFVzZXJzQnlMZWdhbEVudGl0eUlkc1JlcXVlc3QgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImdldFVzZXJzQnlMZWdhbEVudGl0eUlkc1JlcXVlc3RcIl07XG4gICAgICAgIGlmIChfZ2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdCA9PT0gbnVsbCB8fCBfZ2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzUmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBnZXRVc2Vyc0J5TGVnYWxFbnRpdHlJZHNSZXF1ZXN0IHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0VXNlcnNCeUxlZ2FsRW50aXR5SWRzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvdXNlcnMvbGVnYWxlbnRpdHlpZHNgO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBvd24gdXNlciBwcmVmZXJyZWQgbGFuZ3VhZ2VcbiAgICAgKiBVcGRhdGVzIHRoZSBwcmVmZXJyZWQgbGFuZ3VhZ2Ugb2YgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlciBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlT3duTGFuZ3VhZ2UocmVxdWVzdFBhcmFtZXRlcnM6IFVwZGF0ZU93bkxhbmd1YWdlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBvd24gdXNlciBwcmVmZXJyZWQgbGFuZ3VhZ2VcbiAgICAgKiBVcGRhdGVzIHRoZSBwcmVmZXJyZWQgbGFuZ3VhZ2Ugb2YgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlciBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlT3duTGFuZ3VhZ2UocmVxdWVzdFBhcmFtZXRlcnM6IFVwZGF0ZU93bkxhbmd1YWdlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPGFueT4+O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBvd24gdXNlciBwcmVmZXJyZWQgbGFuZ3VhZ2VcbiAgICAgKiBVcGRhdGVzIHRoZSBwcmVmZXJyZWQgbGFuZ3VhZ2Ugb2YgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlciBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdXBkYXRlT3duTGFuZ3VhZ2UocmVxdWVzdFBhcmFtZXRlcnM6IFVwZGF0ZU93bkxhbmd1YWdlUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgb3duIHVzZXIgcHJlZmVycmVkIGxhbmd1YWdlXG4gICAgICogVXBkYXRlcyB0aGUgcHJlZmVycmVkIGxhbmd1YWdlIG9mIHRoZSBhdXRoZW50aWNhdGVkIHVzZXIgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZU93bkxhbmd1YWdlKHJlcXVlc3RQYXJhbWV0ZXJzOiBVcGRhdGVPd25MYW5ndWFnZVJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF91cGRhdGVQcmVmZXJyZWRMYW5ndWFnZSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1widXBkYXRlUHJlZmVycmVkTGFuZ3VhZ2VcIl07XG4gICAgICAgIGlmIChfdXBkYXRlUHJlZmVycmVkTGFuZ3VhZ2UgPT09IG51bGwgfHwgX3VwZGF0ZVByZWZlcnJlZExhbmd1YWdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHVwZGF0ZVByZWZlcnJlZExhbmd1YWdlIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgdXBkYXRlT3duTGFuZ3VhZ2UuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucHV0PGFueT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL3VzZXJzL21lL3ByZWZlcnJlZC1sYW5ndWFnZWAsXG4gICAgICAgICAgICBfdXBkYXRlUHJlZmVycmVkTGFuZ3VhZ2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVPd25MYW5ndWFnZVVybChyZXF1ZXN0UGFyYW1ldGVyczogVXBkYXRlT3duTGFuZ3VhZ2VSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX3VwZGF0ZVByZWZlcnJlZExhbmd1YWdlID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJ1cGRhdGVQcmVmZXJyZWRMYW5ndWFnZVwiXTtcbiAgICAgICAgaWYgKF91cGRhdGVQcmVmZXJyZWRMYW5ndWFnZSA9PT0gbnVsbCB8fCBfdXBkYXRlUHJlZmVycmVkTGFuZ3VhZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgdXBkYXRlUHJlZmVycmVkTGFuZ3VhZ2Ugd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyB1cGRhdGVPd25MYW5ndWFnZS4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL3VzZXJzL21lL3ByZWZlcnJlZC1sYW5ndWFnZWA7XG4gICAgfVxuXG59XG4iXX0=