import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { USER_BASE_PATH } from '../variables';
import { UserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class IdentityManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    changePassword(requestParameters, observe = 'body', reportProgress = false, options) {
        const _changePasswordRequest = requestParameters["changePasswordRequest"];
        if (_changePasswordRequest === null || _changePasswordRequest === undefined) {
            throw new Error('Required parameter changePasswordRequest was null or undefined when calling changePassword.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/identities/password`, _changePasswordRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    changePasswordUrl(requestParameters) {
        const _changePasswordRequest = requestParameters["changePasswordRequest"];
        if (_changePasswordRequest === null || _changePasswordRequest === undefined) {
            throw new Error('Required parameter changePasswordRequest was null or undefined when calling changePassword.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/password`;
    }
    createIdentity(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createIdentityRequest = requestParameters["createIdentityRequest"];
        if (_createIdentityRequest === null || _createIdentityRequest === undefined) {
            throw new Error('Required parameter createIdentityRequest was null or undefined when calling createIdentity.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/identities`, _createIdentityRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createIdentityUrl(requestParameters) {
        const _createIdentityRequest = requestParameters["createIdentityRequest"];
        if (_createIdentityRequest === null || _createIdentityRequest === undefined) {
            throw new Error('Required parameter createIdentityRequest was null or undefined when calling createIdentity.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities`;
    }
    getIdentities(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _legalEntityName = requestParameters["legalEntityName"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_externalId !== undefined && _externalId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _externalId, 'externalId');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_legalEntityName !== undefined && _legalEntityName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _legalEntityName, 'legalEntityName');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdentitiesUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _legalEntityName = requestParameters["legalEntityName"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_externalId !== undefined && _externalId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _externalId, 'externalId');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_legalEntityName !== undefined && _legalEntityName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _legalEntityName, 'legalEntityName');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/users/identities${queryString ? `?${queryString}` : ''}`;
    }
    getIdentity(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentity.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdentityUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentity.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`;
    }
    getIdentityPendingApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentityPendingApprovals.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/approvals`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdentityPendingApprovalsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentityPendingApprovals.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/approvals`;
    }
    getSessions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getSessions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSessionsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getSessions.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions`;
    }
    logoutSessions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling logoutSessions.');
        }
        const _identityLogoutRequest = requestParameters["identityLogoutRequest"];
        if (_identityLogoutRequest === null || _identityLogoutRequest === undefined) {
            throw new Error('Required parameter identityLogoutRequest was null or undefined when calling logoutSessions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions/logout`, _identityLogoutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    logoutSessionsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling logoutSessions.');
        }
        const _identityLogoutRequest = requestParameters["identityLogoutRequest"];
        if (_identityLogoutRequest === null || _identityLogoutRequest === undefined) {
            throw new Error('Required parameter identityLogoutRequest was null or undefined when calling logoutSessions.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions/logout`;
    }
    revokeIdentityAccess(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling revokeIdentityAccess.');
        }
        const _revokeIdentityAccessRequest = requestParameters["revokeIdentityAccessRequest"];
        if (_revokeIdentityAccessRequest === null || _revokeIdentityAccessRequest === undefined) {
            throw new Error('Required parameter revokeIdentityAccessRequest was null or undefined when calling revokeIdentityAccess.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/access`, _revokeIdentityAccessRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    revokeIdentityAccessUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling revokeIdentityAccess.');
        }
        const _revokeIdentityAccessRequest = requestParameters["revokeIdentityAccessRequest"];
        if (_revokeIdentityAccessRequest === null || _revokeIdentityAccessRequest === undefined) {
            throw new Error('Required parameter revokeIdentityAccessRequest was null or undefined when calling revokeIdentityAccess.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/access`;
    }
    sendRequiredActions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling sendRequiredActions.');
        }
        const _identityRequiredActionsRequest = requestParameters["identityRequiredActionsRequest"];
        if (_identityRequiredActionsRequest === null || _identityRequiredActionsRequest === undefined) {
            throw new Error('Required parameter identityRequiredActionsRequest was null or undefined when calling sendRequiredActions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/actions`, _identityRequiredActionsRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    sendRequiredActionsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling sendRequiredActions.');
        }
        const _identityRequiredActionsRequest = requestParameters["identityRequiredActionsRequest"];
        if (_identityRequiredActionsRequest === null || _identityRequiredActionsRequest === undefined) {
            throw new Error('Required parameter identityRequiredActionsRequest was null or undefined when calling sendRequiredActions.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/actions`;
    }
    updateIdentity(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentity.');
        }
        const _updateIdentityRequest = requestParameters["updateIdentityRequest"];
        if (_updateIdentityRequest === null || _updateIdentityRequest === undefined) {
            throw new Error('Required parameter updateIdentityRequest was null or undefined when calling updateIdentity.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`, _updateIdentityRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateIdentityUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentity.');
        }
        const _updateIdentityRequest = requestParameters["updateIdentityRequest"];
        if (_updateIdentityRequest === null || _updateIdentityRequest === undefined) {
            throw new Error('Required parameter updateIdentityRequest was null or undefined when calling updateIdentity.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`;
    }
    updateIdentityStatus(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentityStatus.');
        }
        const _updateIdentityStatusRequest = requestParameters["updateIdentityStatusRequest"];
        if (_updateIdentityStatusRequest === null || _updateIdentityStatusRequest === undefined) {
            throw new Error('Required parameter updateIdentityStatusRequest was null or undefined when calling updateIdentityStatus.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/status`, _updateIdentityStatusRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateIdentityStatusUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentityStatus.');
        }
        const _updateIdentityStatusRequest = requestParameters["updateIdentityStatusRequest"];
        if (_updateIdentityStatusRequest === null || _updateIdentityStatusRequest === undefined) {
            throw new Error('Required parameter updateIdentityStatusRequest was null or undefined when calling updateIdentityStatus.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/status`;
    }
}
IdentityManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentityManagementService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: i2.UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
IdentityManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentityManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentityManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: i2.UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,