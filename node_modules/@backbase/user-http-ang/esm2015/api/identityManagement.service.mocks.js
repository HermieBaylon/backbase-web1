import { createMocks } from '@backbase/foundation-ang/data-http';
export const IdentityManagementServiceChangePasswordMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/password",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceCreateIdentityMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "internalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "externalId": "admin"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceGetIdentitiesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "identities": [{
                            "id": "eadaca0b-0b9d-4244-8922-1dead62d00e4",
                            "externalId": "U0000010",
                            "legalEntityId": "48b711b8-5adb-4826-a9cc-141b386f8930",
                            "fullName": "Hasnain Boyd",
                            "legalEntityName": "Backbase"
                        }, {
                            "id": "177296ae-3ebb-42f4-80fe-2d79d81cc469",
                            "externalId": "U0000011",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Caroline Smyth",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "66569096-df06-46b1-9dbb-3e0e73912e5d",
                            "externalId": "U0000012",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Amin Fowler",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "1117a81d-86e2-4a5a-9f79-eafbaa2bcddd",
                            "externalId": "U0000013",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Amelia Slater",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "55e27e95-216c-40fd-be2e-dd5a100ddcfc",
                            "externalId": "U0000014",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Bradlee Lister",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "59721bc0-da2d-42f8-9b14-a391d52e039e",
                            "externalId": "U0000015",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Khalil Freeman",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "d5ff6ff6-7d39-430c-a787-75321d2f986e",
                            "externalId": "U0000016",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Safwan Archer",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "5e41de27-cc3c-4277-9e4f-e9fb6f1da067",
                            "externalId": "U0000017",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Miranda Goldsmith",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "34be7792-d4a6-44de-bef7-1d051a33dd08",
                            "externalId": "U0000018",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Willard Pham",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "721b5973-543a-4a36-b739-352259486ac5",
                            "externalId": "U0000019",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Braiden Calhoun",
                            "legalEntityName": "Backbase Amsterdam"
                        }],
                    "totalElements": 10
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceGetIdentityMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "admin",
                    "legalEntityInternalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "fullName": "Mila Example",
                    "preferredLanguage": "EN",
                    "emailAddress": "mila@example.com",
                    "mobileNumber": "07700 900000",
                    "status": "ENABLED",
                    "emailVerified": true,
                    "createdDate": "2018-02-04T06:35:41.000Z",
                    "requiredActions": ["VERIFY_EMAIL", "UPDATE_PASSWORD", "ACCEPT_TERMS_AND_CONDITIONS"],
                    "givenName": "Mila",
                    "familyName": "Example",
                    "attributes": {
                        "bank-id": "BANK0001",
                        "core-id": "milaexample"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceGetIdentityPendingApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22",
                        "type": "UNLOCK"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceGetSessionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "sessions": [{
                            "id": "9136e697-6c2f-49f6-9ef7-c67c89e8b825",
                            "ipAddress": "198.51.100.103",
                            "start": "2018-07-26T15:21:23.000Z",
                            "lastAccess": "2018-07-26T15:21:23.000Z",
                            "client": "web"
                        }, {
                            "id": "d04ba3e2-9dd5-484d-b756-e6a86562743a",
                            "ipAddress": "198.51.100.212",
                            "start": "2018-07-26T15:23:33.000Z",
                            "lastAccess": "2018-07-26T15:24:12.000Z",
                            "client": "mobile"
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceLogoutSessionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions/logout",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceRevokeIdentityAccessMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/access",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceSendRequiredActionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/actions",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceUpdateIdentityMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceUpdateIdentityStatusMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/status",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22"
                }
            },
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const IdentityManagementServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/users/identities/password",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "internalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "externalId": "admin"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "identities": [{
                            "id": "eadaca0b-0b9d-4244-8922-1dead62d00e4",
                            "externalId": "U0000010",
                            "legalEntityId": "48b711b8-5adb-4826-a9cc-141b386f8930",
                            "fullName": "Hasnain Boyd",
                            "legalEntityName": "Backbase"
                        }, {
                            "id": "177296ae-3ebb-42f4-80fe-2d79d81cc469",
                            "externalId": "U0000011",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Caroline Smyth",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "66569096-df06-46b1-9dbb-3e0e73912e5d",
                            "externalId": "U0000012",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Amin Fowler",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "1117a81d-86e2-4a5a-9f79-eafbaa2bcddd",
                            "externalId": "U0000013",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Amelia Slater",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "55e27e95-216c-40fd-be2e-dd5a100ddcfc",
                            "externalId": "U0000014",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Bradlee Lister",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "59721bc0-da2d-42f8-9b14-a391d52e039e",
                            "externalId": "U0000015",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Khalil Freeman",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "d5ff6ff6-7d39-430c-a787-75321d2f986e",
                            "externalId": "U0000016",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Safwan Archer",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "5e41de27-cc3c-4277-9e4f-e9fb6f1da067",
                            "externalId": "U0000017",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Miranda Goldsmith",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "34be7792-d4a6-44de-bef7-1d051a33dd08",
                            "externalId": "U0000018",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Willard Pham",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "721b5973-543a-4a36-b739-352259486ac5",
                            "externalId": "U0000019",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Braiden Calhoun",
                            "legalEntityName": "Backbase Amsterdam"
                        }],
                    "totalElements": 10
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "admin",
                    "legalEntityInternalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "fullName": "Mila Example",
                    "preferredLanguage": "EN",
                    "emailAddress": "mila@example.com",
                    "mobileNumber": "07700 900000",
                    "status": "ENABLED",
                    "emailVerified": true,
                    "createdDate": "2018-02-04T06:35:41.000Z",
                    "requiredActions": ["VERIFY_EMAIL", "UPDATE_PASSWORD", "ACCEPT_TERMS_AND_CONDITIONS"],
                    "givenName": "Mila",
                    "familyName": "Example",
                    "attributes": {
                        "bank-id": "BANK0001",
                        "core-id": "milaexample"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22",
                        "type": "UNLOCK"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "sessions": [{
                            "id": "9136e697-6c2f-49f6-9ef7-c67c89e8b825",
                            "ipAddress": "198.51.100.103",
                            "start": "2018-07-26T15:21:23.000Z",
                            "lastAccess": "2018-07-26T15:21:23.000Z",
                            "client": "web"
                        }, {
                            "id": "d04ba3e2-9dd5-484d-b756-e6a86562743a",
                            "ipAddress": "198.51.100.212",
                            "start": "2018-07-26T15:23:33.000Z",
                            "lastAccess": "2018-07-26T15:24:12.000Z",
                            "client": "mobile"
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions/logout",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/access",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/actions",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/status",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22"
                }
            },
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,