import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

var GetIdentity;
(function (GetIdentity) {
    GetIdentity.StatusEnum = {
        ENABLED: 'ENABLED',
        DISABLED: 'DISABLED',
        TEMPORARILYLOCKED: 'TEMPORARILY_LOCKED',
        DORMANT: 'DORMANT',
        INACTIVE: 'INACTIVE',
        ACCESSREVOKED: 'ACCESS_REVOKED'
    };
})(GetIdentity || (GetIdentity = {}));

var GetPendingApproval;
(function (GetPendingApproval) {
    GetPendingApproval.TypeEnum = {
        UNLOCK: 'UNLOCK'
    };
})(GetPendingApproval || (GetPendingApproval = {}));

const USER_BASE_PATH = new InjectionToken('USER_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class UserConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module UserConfiguration');

class UserApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('UserApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: UserApiModule,
            providers: [{ provide: UserConfiguration, useFactory: configurationFactory }]
        };
    }
}
UserApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApiModule, deps: [{ token: UserApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: UserConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
UserApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApiModule });
UserApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: UserApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: UserConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class IdentityManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    changePassword(requestParameters, observe = 'body', reportProgress = false, options) {
        const _changePasswordRequest = requestParameters["changePasswordRequest"];
        if (_changePasswordRequest === null || _changePasswordRequest === undefined) {
            throw new Error('Required parameter changePasswordRequest was null or undefined when calling changePassword.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/identities/password`, _changePasswordRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    changePasswordUrl(requestParameters) {
        const _changePasswordRequest = requestParameters["changePasswordRequest"];
        if (_changePasswordRequest === null || _changePasswordRequest === undefined) {
            throw new Error('Required parameter changePasswordRequest was null or undefined when calling changePassword.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/password`;
    }
    createIdentity(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createIdentityRequest = requestParameters["createIdentityRequest"];
        if (_createIdentityRequest === null || _createIdentityRequest === undefined) {
            throw new Error('Required parameter createIdentityRequest was null or undefined when calling createIdentity.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/identities`, _createIdentityRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createIdentityUrl(requestParameters) {
        const _createIdentityRequest = requestParameters["createIdentityRequest"];
        if (_createIdentityRequest === null || _createIdentityRequest === undefined) {
            throw new Error('Required parameter createIdentityRequest was null or undefined when calling createIdentity.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities`;
    }
    getIdentities(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _legalEntityName = requestParameters["legalEntityName"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_externalId !== undefined && _externalId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _externalId, 'externalId');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_legalEntityName !== undefined && _legalEntityName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _legalEntityName, 'legalEntityName');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdentitiesUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        const _legalEntityName = requestParameters["legalEntityName"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_externalId !== undefined && _externalId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _externalId, 'externalId');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_legalEntityName !== undefined && _legalEntityName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _legalEntityName, 'legalEntityName');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/users/identities${queryString ? `?${queryString}` : ''}`;
    }
    getIdentity(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentity.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdentityUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentity.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`;
    }
    getIdentityPendingApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentityPendingApprovals.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/approvals`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdentityPendingApprovalsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getIdentityPendingApprovals.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/approvals`;
    }
    getSessions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getSessions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSessionsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getSessions.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions`;
    }
    logoutSessions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling logoutSessions.');
        }
        const _identityLogoutRequest = requestParameters["identityLogoutRequest"];
        if (_identityLogoutRequest === null || _identityLogoutRequest === undefined) {
            throw new Error('Required parameter identityLogoutRequest was null or undefined when calling logoutSessions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions/logout`, _identityLogoutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    logoutSessionsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling logoutSessions.');
        }
        const _identityLogoutRequest = requestParameters["identityLogoutRequest"];
        if (_identityLogoutRequest === null || _identityLogoutRequest === undefined) {
            throw new Error('Required parameter identityLogoutRequest was null or undefined when calling logoutSessions.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/sessions/logout`;
    }
    revokeIdentityAccess(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling revokeIdentityAccess.');
        }
        const _revokeIdentityAccessRequest = requestParameters["revokeIdentityAccessRequest"];
        if (_revokeIdentityAccessRequest === null || _revokeIdentityAccessRequest === undefined) {
            throw new Error('Required parameter revokeIdentityAccessRequest was null or undefined when calling revokeIdentityAccess.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/access`, _revokeIdentityAccessRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    revokeIdentityAccessUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling revokeIdentityAccess.');
        }
        const _revokeIdentityAccessRequest = requestParameters["revokeIdentityAccessRequest"];
        if (_revokeIdentityAccessRequest === null || _revokeIdentityAccessRequest === undefined) {
            throw new Error('Required parameter revokeIdentityAccessRequest was null or undefined when calling revokeIdentityAccess.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/access`;
    }
    sendRequiredActions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling sendRequiredActions.');
        }
        const _identityRequiredActionsRequest = requestParameters["identityRequiredActionsRequest"];
        if (_identityRequiredActionsRequest === null || _identityRequiredActionsRequest === undefined) {
            throw new Error('Required parameter identityRequiredActionsRequest was null or undefined when calling sendRequiredActions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/actions`, _identityRequiredActionsRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    sendRequiredActionsUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling sendRequiredActions.');
        }
        const _identityRequiredActionsRequest = requestParameters["identityRequiredActionsRequest"];
        if (_identityRequiredActionsRequest === null || _identityRequiredActionsRequest === undefined) {
            throw new Error('Required parameter identityRequiredActionsRequest was null or undefined when calling sendRequiredActions.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/actions`;
    }
    updateIdentity(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentity.');
        }
        const _updateIdentityRequest = requestParameters["updateIdentityRequest"];
        if (_updateIdentityRequest === null || _updateIdentityRequest === undefined) {
            throw new Error('Required parameter updateIdentityRequest was null or undefined when calling updateIdentity.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`, _updateIdentityRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateIdentityUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentity.');
        }
        const _updateIdentityRequest = requestParameters["updateIdentityRequest"];
        if (_updateIdentityRequest === null || _updateIdentityRequest === undefined) {
            throw new Error('Required parameter updateIdentityRequest was null or undefined when calling updateIdentity.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}`;
    }
    updateIdentityStatus(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentityStatus.');
        }
        const _updateIdentityStatusRequest = requestParameters["updateIdentityStatusRequest"];
        if (_updateIdentityStatusRequest === null || _updateIdentityStatusRequest === undefined) {
            throw new Error('Required parameter updateIdentityStatusRequest was null or undefined when calling updateIdentityStatus.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/status`, _updateIdentityStatusRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateIdentityStatusUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateIdentityStatus.');
        }
        const _updateIdentityStatusRequest = requestParameters["updateIdentityStatusRequest"];
        if (_updateIdentityStatusRequest === null || _updateIdentityStatusRequest === undefined) {
            throw new Error('Required parameter updateIdentityStatusRequest was null or undefined when calling updateIdentityStatus.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/identities/${encodeURIComponent(String(_internalId))}/status`;
    }
}
IdentityManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentityManagementService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
IdentityManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentityManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdentityManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const IdentityManagementServiceChangePasswordMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/password",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceCreateIdentityMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "internalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "externalId": "admin"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceGetIdentitiesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "identities": [{
                            "id": "eadaca0b-0b9d-4244-8922-1dead62d00e4",
                            "externalId": "U0000010",
                            "legalEntityId": "48b711b8-5adb-4826-a9cc-141b386f8930",
                            "fullName": "Hasnain Boyd",
                            "legalEntityName": "Backbase"
                        }, {
                            "id": "177296ae-3ebb-42f4-80fe-2d79d81cc469",
                            "externalId": "U0000011",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Caroline Smyth",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "66569096-df06-46b1-9dbb-3e0e73912e5d",
                            "externalId": "U0000012",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Amin Fowler",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "1117a81d-86e2-4a5a-9f79-eafbaa2bcddd",
                            "externalId": "U0000013",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Amelia Slater",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "55e27e95-216c-40fd-be2e-dd5a100ddcfc",
                            "externalId": "U0000014",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Bradlee Lister",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "59721bc0-da2d-42f8-9b14-a391d52e039e",
                            "externalId": "U0000015",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Khalil Freeman",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "d5ff6ff6-7d39-430c-a787-75321d2f986e",
                            "externalId": "U0000016",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Safwan Archer",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "5e41de27-cc3c-4277-9e4f-e9fb6f1da067",
                            "externalId": "U0000017",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Miranda Goldsmith",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "34be7792-d4a6-44de-bef7-1d051a33dd08",
                            "externalId": "U0000018",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Willard Pham",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "721b5973-543a-4a36-b739-352259486ac5",
                            "externalId": "U0000019",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Braiden Calhoun",
                            "legalEntityName": "Backbase Amsterdam"
                        }],
                    "totalElements": 10
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceGetIdentityMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "admin",
                    "legalEntityInternalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "fullName": "Mila Example",
                    "preferredLanguage": "EN",
                    "emailAddress": "mila@example.com",
                    "mobileNumber": "07700 900000",
                    "status": "ENABLED",
                    "emailVerified": true,
                    "createdDate": "2018-02-04T06:35:41.000Z",
                    "requiredActions": ["VERIFY_EMAIL", "UPDATE_PASSWORD", "ACCEPT_TERMS_AND_CONDITIONS"],
                    "givenName": "Mila",
                    "familyName": "Example",
                    "attributes": {
                        "bank-id": "BANK0001",
                        "core-id": "milaexample"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceGetIdentityPendingApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22",
                        "type": "UNLOCK"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceGetSessionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "sessions": [{
                            "id": "9136e697-6c2f-49f6-9ef7-c67c89e8b825",
                            "ipAddress": "198.51.100.103",
                            "start": "2018-07-26T15:21:23.000Z",
                            "lastAccess": "2018-07-26T15:21:23.000Z",
                            "client": "web"
                        }, {
                            "id": "d04ba3e2-9dd5-484d-b756-e6a86562743a",
                            "ipAddress": "198.51.100.212",
                            "start": "2018-07-26T15:23:33.000Z",
                            "lastAccess": "2018-07-26T15:24:12.000Z",
                            "client": "mobile"
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceLogoutSessionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions/logout",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceRevokeIdentityAccessMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/access",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceSendRequiredActionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/actions",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceUpdateIdentityMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceUpdateIdentityStatusMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/identities/{internalId}/status",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22"
                }
            },
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const IdentityManagementServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/users/identities/password",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "internalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "externalId": "admin"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "identities": [{
                            "id": "eadaca0b-0b9d-4244-8922-1dead62d00e4",
                            "externalId": "U0000010",
                            "legalEntityId": "48b711b8-5adb-4826-a9cc-141b386f8930",
                            "fullName": "Hasnain Boyd",
                            "legalEntityName": "Backbase"
                        }, {
                            "id": "177296ae-3ebb-42f4-80fe-2d79d81cc469",
                            "externalId": "U0000011",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Caroline Smyth",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "66569096-df06-46b1-9dbb-3e0e73912e5d",
                            "externalId": "U0000012",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Amin Fowler",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "1117a81d-86e2-4a5a-9f79-eafbaa2bcddd",
                            "externalId": "U0000013",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Amelia Slater",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "55e27e95-216c-40fd-be2e-dd5a100ddcfc",
                            "externalId": "U0000014",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Bradlee Lister",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "59721bc0-da2d-42f8-9b14-a391d52e039e",
                            "externalId": "U0000015",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Khalil Freeman",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "d5ff6ff6-7d39-430c-a787-75321d2f986e",
                            "externalId": "U0000016",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Safwan Archer",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "5e41de27-cc3c-4277-9e4f-e9fb6f1da067",
                            "externalId": "U0000017",
                            "legalEntityId": "f5aacf55-44bb-4393-9d21-152d14fae6b9",
                            "fullName": "Miranda Goldsmith",
                            "legalEntityName": "Backbase Cardiff"
                        }, {
                            "id": "34be7792-d4a6-44de-bef7-1d051a33dd08",
                            "externalId": "U0000018",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Willard Pham",
                            "legalEntityName": "Backbase Amsterdam"
                        }, {
                            "id": "721b5973-543a-4a36-b739-352259486ac5",
                            "externalId": "U0000019",
                            "legalEntityId": "3a591a63-9ddf-4ad4-ab4b-40eb151757a4",
                            "fullName": "Braiden Calhoun",
                            "legalEntityName": "Backbase Amsterdam"
                        }],
                    "totalElements": 10
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "admin",
                    "legalEntityInternalId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                    "fullName": "Mila Example",
                    "preferredLanguage": "EN",
                    "emailAddress": "mila@example.com",
                    "mobileNumber": "07700 900000",
                    "status": "ENABLED",
                    "emailVerified": true,
                    "createdDate": "2018-02-04T06:35:41.000Z",
                    "requiredActions": ["VERIFY_EMAIL", "UPDATE_PASSWORD", "ACCEPT_TERMS_AND_CONDITIONS"],
                    "givenName": "Mila",
                    "familyName": "Example",
                    "attributes": {
                        "bank-id": "BANK0001",
                        "core-id": "milaexample"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22",
                        "type": "UNLOCK"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "sessions": [{
                            "id": "9136e697-6c2f-49f6-9ef7-c67c89e8b825",
                            "ipAddress": "198.51.100.103",
                            "start": "2018-07-26T15:21:23.000Z",
                            "lastAccess": "2018-07-26T15:21:23.000Z",
                            "client": "web"
                        }, {
                            "id": "d04ba3e2-9dd5-484d-b756-e6a86562743a",
                            "ipAddress": "198.51.100.212",
                            "start": "2018-07-26T15:23:33.000Z",
                            "lastAccess": "2018-07-26T15:24:12.000Z",
                            "client": "mobile"
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/sessions/logout",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/access",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/actions",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/identities/{internalId}/status",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "approvalId": "37507cbc-3e81-4cc3-a0f6-78ed53d2db22"
                }
            },
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class UserApprovalsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    approveApproval(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling approveApproval.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/approve`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    approveApprovalUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling approveApproval.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/approve`;
    }
    getApprovalDetails(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovalDetails.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/details`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalDetailsUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovalDetails.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/details`;
    }
    rejectApproval(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling rejectApproval.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/reject`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    rejectApprovalUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling rejectApproval.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/approvals/${encodeURIComponent(String(_approvalId))}/reject`;
    }
}
UserApprovalsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApprovalsService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserApprovalsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApprovalsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserApprovalsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const UserApprovalsServiceApproveApprovalMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/approvals/{approvalId}/approve",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserApprovalsServiceGetApprovalDetailsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/approvals/{approvalId}/details",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "changelogDetails": [{
                            "type": "LOCK_USER",
                            "key": "User Status",
                            "from": "Locked",
                            "to": "Enabled"
                        }],
                    "userDetails": {
                        "username": "john.doe",
                        "legalEntityName": "Bank 001",
                        "fullName": "John Doe",
                        "emailAddress": "john.doe@example.test",
                        "mobileNumber": "012345 67890",
                        "dateCreated": "2019-07-11T11:11:11.000Z"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserApprovalsServiceRejectApprovalMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/approvals/{approvalId}/reject",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserApprovalsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/users/approvals/{approvalId}/approve",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/approvals/{approvalId}/details",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "changelogDetails": [{
                            "type": "LOCK_USER",
                            "key": "User Status",
                            "from": "Locked",
                            "to": "Enabled"
                        }],
                    "userDetails": {
                        "username": "john.doe",
                        "legalEntityName": "Bank 001",
                        "fullName": "John Doe",
                        "emailAddress": "john.doe@example.test",
                        "mobileNumber": "012345 67890",
                        "dateCreated": "2019-07-11T11:11:11.000Z"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/approvals/{approvalId}/reject",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class UserManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    checkUserExists(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling checkUserExists.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/existing/externalids/${encodeURIComponent(String(_externalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    checkUserExistsUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling checkUserExists.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/existing/externalids/${encodeURIComponent(String(_externalId))}`;
    }
    getLegalEntityByExternalId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}/legalentities`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntityByExternalIdUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}/legalentities`;
    }
    getOwnUser(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnUserUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me`;
    }
    getUserByExternalId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getUserByExternalId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserByExternalIdUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getUserByExternalId.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/externalids/${encodeURIComponent(String(_externalId))}`;
    }
    getUserById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserByIdUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserById.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}`;
    }
    getUsers(requestParameters, observe = 'body', reportProgress = false, options) {
        const _entityId = requestParameters["entityId"];
        if (_entityId === null || _entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling getUsers.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityId !== undefined && _entityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUsersUrl(requestParameters) {
        const _entityId = requestParameters["entityId"];
        if (_entityId === null || _entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling getUsers.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_entityId !== undefined && _entityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _entityId, 'entityId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/users${queryString ? `?${queryString}` : ''}`;
    }
    getUsersByLegalEntityIds(requestParameters, observe = 'body', reportProgress = false, options) {
        const _getUsersByLegalEntityIdsRequest = requestParameters["getUsersByLegalEntityIdsRequest"];
        if (_getUsersByLegalEntityIdsRequest === null || _getUsersByLegalEntityIdsRequest === undefined) {
            throw new Error('Required parameter getUsersByLegalEntityIdsRequest was null or undefined when calling getUsersByLegalEntityIds.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/legalentityids`, _getUsersByLegalEntityIdsRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUsersByLegalEntityIdsUrl(requestParameters) {
        const _getUsersByLegalEntityIdsRequest = requestParameters["getUsersByLegalEntityIdsRequest"];
        if (_getUsersByLegalEntityIdsRequest === null || _getUsersByLegalEntityIdsRequest === undefined) {
            throw new Error('Required parameter getUsersByLegalEntityIdsRequest was null or undefined when calling getUsersByLegalEntityIds.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/legalentityids`;
    }
    updateOwnLanguage(requestParameters, observe = 'body', reportProgress = false, options) {
        const _updatePreferredLanguage = requestParameters["updatePreferredLanguage"];
        if (_updatePreferredLanguage === null || _updatePreferredLanguage === undefined) {
            throw new Error('Required parameter updatePreferredLanguage was null or undefined when calling updateOwnLanguage.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/preferred-language`, _updatePreferredLanguage, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnLanguageUrl(requestParameters) {
        const _updatePreferredLanguage = requestParameters["updatePreferredLanguage"];
        if (_updatePreferredLanguage === null || _updatePreferredLanguage === undefined) {
            throw new Error('Required parameter updatePreferredLanguage was null or undefined when calling updateOwnLanguage.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/preferred-language`;
    }
}
UserManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManagementService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const UserManagementServiceCheckUserExistsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/existing/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserManagementServiceGetLegalEntityByExternalIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/externalids/{externalId}/legalentities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a154ebc2-3116-450e-9e26-1612d7cb48fb",
                    "externalId": "a00f4955-c920-4604-9ec8-4e2cddd447d6",
                    "name": "Bank Corp.",
                    "parentId": "8cc493bb-ffca-4b47-ae2f-594cd7282d30",
                    "isParent": true
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserManagementServiceGetOwnUserMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "externalBankId1",
                    "preferredLanguage": "fr-FR",
                    "legalEntityId": "c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53",
                    "legalEntityName": "BANK A",
                    "id": "3da7e7fb-857f-44c2-92aa-80572f6394e2",
                    "fullName": "Henry Duncan"
                }
            },
        ]
    }]);
const UserManagementServiceGetUserByExternalIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserManagementServiceGetUserByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserManagementServiceGetUsersMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }, {
                        "externalId": "U0000011",
                        "legalEntityId": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                        "id": "fafd8fd6b661402b8411a48050bdc9ad",
                        "fullName": "Sofia Duncan"
                    }, {
                        "externalId": "U0000012",
                        "legalEntityId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                        "id": "bc9a83bf025449dea4ecc05ce816aebd",
                        "fullName": "Henry Duncan"
                    }, {
                        "externalId": "U0000013",
                        "legalEntityId": "34",
                        "id": "5360dbba1a254889ba94c22ff01b1c37",
                        "fullName": "Bart Nyman"
                    }, {
                        "externalId": "U0000014",
                        "legalEntityId": "c9fc30f4e5fb492c97ed0a05f926aecc",
                        "id": "37c1b6b531a34259b4c518eebc0b34a2",
                        "fullName": "Peter"
                    }, {
                        "externalId": "U0000015",
                        "legalEntityId": "0f6d14f40e064deeaee351befd53d3e7",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59",
                        "fullName": "Sandra"
                    }, {
                        "externalId": "U0000016",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbei84",
                        "fullName": "Marko Ilievski",
                        "preferredLanguage": "en-GB"
                    }, {
                        "externalId": "U0000017",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59t97",
                        "fullName": "Daniela Petkovska"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const UserManagementServiceGetUsersByLegalEntityIdsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/legalentityids",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "users": [{
                            "id": "001",
                            "externalId": "U0000010",
                            "legalEntityId": "012",
                            "fullName": "Mila"
                        }, {
                            "id": "002",
                            "externalId": "U0000011",
                            "legalEntityId": "023",
                            "fullName": "Kjiro"
                        }, {
                            "id": "003",
                            "externalId": "U0000012",
                            "legalEntityId": "034",
                            "fullName": "Daniel"
                        }],
                    "totalElements": 1000
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserManagementServiceUpdateOwnLanguageMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/preferred-language",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserManagementServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/users/existing/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/externalids/{externalId}/legalentities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "a154ebc2-3116-450e-9e26-1612d7cb48fb",
                    "externalId": "a00f4955-c920-4604-9ec8-4e2cddd447d6",
                    "name": "Bank Corp.",
                    "parentId": "8cc493bb-ffca-4b47-ae2f-594cd7282d30",
                    "isParent": true
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "externalBankId1",
                    "preferredLanguage": "fr-FR",
                    "legalEntityId": "c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53",
                    "legalEntityName": "BANK A",
                    "id": "3da7e7fb-857f-44c2-92aa-80572f6394e2",
                    "fullName": "Henry Duncan"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/externalids/{externalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalId": "U0000010",
                    "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                    "id": "d100c54f79784731843f0db89a2d2957",
                    "fullName": "David Flores",
                    "preferredLanguage": "fr-FR"
                }
            },
            {
                status: 200,
                body: {
                    "preferredLanguage": "preferredLanguage",
                    "additions": {
                        "key": "additions"
                    },
                    "legalEntityId": "legalEntityId",
                    "externalId": "externalId",
                    "fullName": "fullName",
                    "id": "id"
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "externalId": "U0000010",
                        "legalEntityId": "c7a382786d514262b75ab9531b749a2b",
                        "id": "d100c54f79784731843f0db89a2d2957",
                        "fullName": "David Flores",
                        "preferredLanguage": "fr-FR"
                    }, {
                        "externalId": "U0000011",
                        "legalEntityId": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                        "id": "fafd8fd6b661402b8411a48050bdc9ad",
                        "fullName": "Sofia Duncan"
                    }, {
                        "externalId": "U0000012",
                        "legalEntityId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                        "id": "bc9a83bf025449dea4ecc05ce816aebd",
                        "fullName": "Henry Duncan"
                    }, {
                        "externalId": "U0000013",
                        "legalEntityId": "34",
                        "id": "5360dbba1a254889ba94c22ff01b1c37",
                        "fullName": "Bart Nyman"
                    }, {
                        "externalId": "U0000014",
                        "legalEntityId": "c9fc30f4e5fb492c97ed0a05f926aecc",
                        "id": "37c1b6b531a34259b4c518eebc0b34a2",
                        "fullName": "Peter"
                    }, {
                        "externalId": "U0000015",
                        "legalEntityId": "0f6d14f40e064deeaee351befd53d3e7",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59",
                        "fullName": "Sandra"
                    }, {
                        "externalId": "U0000016",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbei84",
                        "fullName": "Marko Ilievski",
                        "preferredLanguage": "en-GB"
                    }, {
                        "externalId": "U0000017",
                        "legalEntityId": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "id": "b5f499e8f3c94cf39997957ce4cbec59t97",
                        "fullName": "Daniela Petkovska"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/legalentityids",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "users": [{
                            "id": "001",
                            "externalId": "U0000010",
                            "legalEntityId": "012",
                            "fullName": "Mila"
                        }, {
                            "id": "002",
                            "externalId": "U0000011",
                            "legalEntityId": "023",
                            "fullName": "Kjiro"
                        }, {
                            "id": "003",
                            "externalId": "U0000012",
                            "legalEntityId": "034",
                            "fullName": "Daniel"
                        }],
                    "totalElements": 1000
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/preferred-language",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class UserProfileManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    addElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addElectronicAddressUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`;
    }
    addOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling addOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`;
    }
    addOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`;
    }
    addOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addOwnPostalAddressUrl(requestParameters) {
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`;
    }
    addPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addPhoneAddressUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling addPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`;
    }
    addPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    addPostalAddressUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling addPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling addPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`;
    }
    deleteElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deleteElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deleteElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    deleteOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling deleteOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    deleteOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deleteOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deleteOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    deleteOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deleteOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteOwnPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deleteOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    deletePhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deletePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling deletePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    deletePostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deletePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling deletePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling deletePostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    getElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    getElectronicAddresses(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddresses.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getElectronicAddressesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getElectronicAddresses.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses`;
    }
    getOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling getOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    getOwnElectronicAddresses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnElectronicAddressesUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses`;
    }
    getOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    getOwnPhoneAddresses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPhoneAddressesUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses`;
    }
    getOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    getOwnPostalAddresses(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnPostalAddressesUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses`;
    }
    getOwnUserProfile(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/profile`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getOwnUserProfileUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/profile`;
    }
    getPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getPhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling getPhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    getPhoneAddresses(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddresses.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPhoneAddressesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPhoneAddresses.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses`;
    }
    getPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getPostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling getPostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    getPostalAddresses(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddresses.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPostalAddressesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getPostalAddresses.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses`;
    }
    getUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserProfileUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling getUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`;
    }
    replaceOwnUserProfileAttributes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceOwnUserProfileAttributes.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile`, _replaceUserProfileAttributes, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    replaceOwnUserProfileAttributesUrl(requestParameters) {
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceOwnUserProfileAttributes.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile`;
    }
    replaceUserProfileAttributes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling replaceUserProfileAttributes.');
        }
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceUserProfileAttributes.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`, _replaceUserProfileAttributes, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    replaceUserProfileAttributesUrl(requestParameters) {
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling replaceUserProfileAttributes.');
        }
        const _replaceUserProfileAttributes = requestParameters["replaceUserProfileAttributes"];
        if (_replaceUserProfileAttributes === null || _replaceUserProfileAttributes === undefined) {
            throw new Error('Required parameter replaceUserProfileAttributes was null or undefined when calling replaceUserProfileAttributes.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile`;
    }
    updateElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateElectronicAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updateElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    updateOwnElectronicAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateOwnElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateOwnElectronicAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`, _electronicAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnElectronicAddressUrl(requestParameters) {
        const _electronicAddressKey = requestParameters["electronicAddressKey"];
        if (_electronicAddressKey === null || _electronicAddressKey === undefined) {
            throw new Error('Required parameter electronicAddressKey was null or undefined when calling updateOwnElectronicAddress.');
        }
        const _electronicAddress = requestParameters["electronicAddress"];
        if (_electronicAddress === null || _electronicAddress === undefined) {
            throw new Error('Required parameter electronicAddress was null or undefined when calling updateOwnElectronicAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/electronic-addresses/${encodeURIComponent(String(_electronicAddressKey))}`;
    }
    updateOwnPhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updateOwnPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updateOwnPhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnPhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updateOwnPhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updateOwnPhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    updateOwnPostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updateOwnPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updateOwnPostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateOwnPostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updateOwnPostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updateOwnPostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
    updatePhoneAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updatePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updatePhoneAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`, _phoneAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updatePhoneAddressUrl(requestParameters) {
        const _phoneAddressKey = requestParameters["phoneAddressKey"];
        if (_phoneAddressKey === null || _phoneAddressKey === undefined) {
            throw new Error('Required parameter phoneAddressKey was null or undefined when calling updatePhoneAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePhoneAddress.');
        }
        const _phoneAddress = requestParameters["phoneAddress"];
        if (_phoneAddress === null || _phoneAddress === undefined) {
            throw new Error('Required parameter phoneAddress was null or undefined when calling updatePhoneAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/phone-addresses/${encodeURIComponent(String(_phoneAddressKey))}`;
    }
    updatePostalAddress(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updatePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updatePostalAddress.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`, _postalAddress, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updatePostalAddressUrl(requestParameters) {
        const _postalAddressKey = requestParameters["postalAddressKey"];
        if (_postalAddressKey === null || _postalAddressKey === undefined) {
            throw new Error('Required parameter postalAddressKey was null or undefined when calling updatePostalAddress.');
        }
        const _internalId = requestParameters["internalId"];
        if (_internalId === null || _internalId === undefined) {
            throw new Error('Required parameter internalId was null or undefined when calling updatePostalAddress.');
        }
        const _postalAddress = requestParameters["postalAddress"];
        if (_postalAddress === null || _postalAddress === undefined) {
            throw new Error('Required parameter postalAddress was null or undefined when calling updatePostalAddress.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/${encodeURIComponent(String(_internalId))}/profile/postal-addresses/${encodeURIComponent(String(_postalAddressKey))}`;
    }
}
UserProfileManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, deps: [{ token: i1.HttpClient }, { token: USER_BASE_PATH, optional: true }, { token: UserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserProfileManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_BASE_PATH]
                }] }, { type: UserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const UserProfileManagementServiceAddElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceAddOwnElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceAddOwnPhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceAddOwnPostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceAddPhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceAddPostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceDeleteElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceDeleteOwnElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceDeleteOwnPhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceDeleteOwnPostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceDeletePhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceDeletePostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                    "type": "E_MAIL",
                    "primary": true,
                    "address": "test@tester.com"
                }
            },
            {
                status: 200,
                body: {
                    "address": "address",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetElectronicAddressesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetOwnElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                    "type": "E_MAIL",
                    "primary": true,
                    "address": "test@tester.com"
                }
            },
            {
                status: 200,
                body: {
                    "address": "address",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetOwnElectronicAddressesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "electronic-addresses": [{
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetOwnPhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "LAND_LINE",
                    "primary": false,
                    "number": "02920 671937"
                }
            },
            {
                status: 200,
                body: {
                    "number": "number",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetOwnPhoneAddressesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetOwnPostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "HOME",
                    "primary": true,
                    "addressLine": "2 Hertsmere Rd",
                    "streetName": "Canary Wharf",
                    "townName": "London",
                    "postalCode": "E14 4AB",
                    "country": "GB"
                }
            },
            {
                status: 200,
                body: {
                    "country": "country",
                    "townName": "townName",
                    "countrySubDivision": "countrySubDivision",
                    "additions": {
                        "key": "additions"
                    },
                    "postalCode": "postalCode",
                    "subDepartment": "subDepartment",
                    "type": "type",
                    "addressLine": "addressLine",
                    "streetName": "streetName",
                    "buildingNumber": "buildingNumber",
                    "department": "department",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetOwnPostalAddressesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB"
                        }],
                    "country": "GB"
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "postal-addresses": [{
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }, {
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetOwnUserProfileMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "fullName": "John Doe",
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }],
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }],
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB",
                            "country": "GB"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    },
                    "electronic-addresses": [{
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }],
                    "fullName": "fullName",
                    "postal-addresses": [{
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }, {
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetPhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "LAND_LINE",
                    "primary": false,
                    "number": "02920 671937"
                }
            },
            {
                status: 200,
                body: {
                    "number": "number",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetPhoneAddressesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetPostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "HOME",
                    "primary": true,
                    "addressLine": "2 Hertsmere Rd",
                    "streetName": "Canary Wharf",
                    "townName": "London",
                    "postalCode": "E14 4AB",
                    "country": "GB"
                }
            },
            {
                status: 200,
                body: {
                    "country": "country",
                    "townName": "townName",
                    "countrySubDivision": "countrySubDivision",
                    "additions": {
                        "key": "additions"
                    },
                    "postalCode": "postalCode",
                    "subDepartment": "subDepartment",
                    "type": "type",
                    "addressLine": "addressLine",
                    "streetName": "streetName",
                    "buildingNumber": "buildingNumber",
                    "department": "department",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetPostalAddressesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB"
                        }],
                    "country": "GB"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetUserProfileMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "fullName": "John Doe",
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }],
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }],
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB",
                            "country": "GB"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceReplaceOwnUserProfileAttributesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceReplaceUserProfileAttributesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceUpdateElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceUpdateOwnElectronicAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceUpdateOwnPhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceUpdateOwnPostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceUpdatePhoneAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceUpdatePostalAddressMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
        method: "POST",
        responses: [
            {
                status: 201,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                    "type": "E_MAIL",
                    "primary": true,
                    "address": "test@tester.com"
                }
            },
            {
                status: 200,
                body: {
                    "address": "address",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                    "type": "E_MAIL",
                    "primary": true,
                    "address": "test@tester.com"
                }
            },
            {
                status: 200,
                body: {
                    "address": "address",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "electronic-addresses": [{
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "LAND_LINE",
                    "primary": false,
                    "number": "02920 671937"
                }
            },
            {
                status: 200,
                body: {
                    "number": "number",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "HOME",
                    "primary": true,
                    "addressLine": "2 Hertsmere Rd",
                    "streetName": "Canary Wharf",
                    "townName": "London",
                    "postalCode": "E14 4AB",
                    "country": "GB"
                }
            },
            {
                status: 200,
                body: {
                    "country": "country",
                    "townName": "townName",
                    "countrySubDivision": "countrySubDivision",
                    "additions": {
                        "key": "additions"
                    },
                    "postalCode": "postalCode",
                    "subDepartment": "subDepartment",
                    "type": "type",
                    "addressLine": "addressLine",
                    "streetName": "streetName",
                    "buildingNumber": "buildingNumber",
                    "department": "department",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB"
                        }],
                    "country": "GB"
                }
            },
            {
                status: 200,
                body: {
                    "additions": {
                        "key": "additions"
                    },
                    "postal-addresses": [{
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }, {
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "fullName": "John Doe",
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }],
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }],
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB",
                            "country": "GB"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "number": "number",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    },
                    "electronic-addresses": [{
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }, {
                            "address": "address",
                            "additions": {
                                "key": "additions"
                            },
                            "type": "type",
                            "key": "key",
                            "primary": true
                        }],
                    "fullName": "fullName",
                    "postal-addresses": [{
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }, {
                            "country": "country",
                            "townName": "townName",
                            "countrySubDivision": "countrySubDivision",
                            "additions": {
                                "key": "additions"
                            },
                            "postalCode": "postalCode",
                            "subDepartment": "subDepartment",
                            "type": "type",
                            "addressLine": "addressLine",
                            "streetName": "streetName",
                            "buildingNumber": "buildingNumber",
                            "department": "department",
                            "key": "key",
                            "primary": true
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "LAND_LINE",
                    "primary": false,
                    "number": "02920 671937"
                }
            },
            {
                status: 200,
                body: {
                    "number": "number",
                    "additions": {
                        "key": "additions"
                    },
                    "type": "type",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                    "type": "HOME",
                    "primary": true,
                    "addressLine": "2 Hertsmere Rd",
                    "streetName": "Canary Wharf",
                    "townName": "London",
                    "postalCode": "E14 4AB",
                    "country": "GB"
                }
            },
            {
                status: 200,
                body: {
                    "country": "country",
                    "townName": "townName",
                    "countrySubDivision": "countrySubDivision",
                    "additions": {
                        "key": "additions"
                    },
                    "postalCode": "postalCode",
                    "subDepartment": "subDepartment",
                    "type": "type",
                    "addressLine": "addressLine",
                    "streetName": "streetName",
                    "buildingNumber": "buildingNumber",
                    "department": "department",
                    "key": "key",
                    "primary": true
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB"
                        }],
                    "country": "GB"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "fullName": "John Doe",
                    "phone-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "MOBILE",
                            "primary": true,
                            "number": "07717 371949"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "LAND_LINE",
                            "primary": false,
                            "number": "02920 671937"
                        }],
                    "electronic-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "E_MAIL",
                            "primary": true,
                            "address": "test@tester.com"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "PERSONAL",
                            "primary": false,
                            "address": "test_personal@tester.com"
                        }],
                    "postal-addresses": [{
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e1",
                            "type": "BUSINESS",
                            "primary": false,
                            "addressLine": "The Bonded Warehouse",
                            "streetName": "Atlantic Wharf",
                            "townName": "Cardiff",
                            "postalCode": "CF10 4HE",
                            "country": "GB"
                        }, {
                            "key": "cb7653b5-31b2-481d-b9b5-aa4b415c96e2",
                            "type": "HOME",
                            "primary": true,
                            "addressLine": "2 Hertsmere Rd",
                            "streetName": "Canary Wharf",
                            "townName": "London",
                            "postalCode": "E14 4AB",
                            "country": "GB"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/electronic-addresses/{electronicAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/electronic-addresses/{electronicAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/phone-addresses/{phoneAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/profile/postal-addresses/{postalAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/phone-addresses/{phoneAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/{internalId}/profile/postal-addresses/{postalAddressKey}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, GetIdentity, GetPendingApproval, IdentityManagementService, IdentityManagementServiceChangePasswordMocksProvider, IdentityManagementServiceCreateIdentityMocksProvider, IdentityManagementServiceGetIdentitiesMocksProvider, IdentityManagementServiceGetIdentityMocksProvider, IdentityManagementServiceGetIdentityPendingApprovalsMocksProvider, IdentityManagementServiceGetSessionsMocksProvider, IdentityManagementServiceLogoutSessionsMocksProvider, IdentityManagementServiceMocksProvider, IdentityManagementServiceRevokeIdentityAccessMocksProvider, IdentityManagementServiceSendRequiredActionsMocksProvider, IdentityManagementServiceUpdateIdentityMocksProvider, IdentityManagementServiceUpdateIdentityStatusMocksProvider, USER_BASE_PATH, UserApiModule, UserApprovalsService, UserApprovalsServiceApproveApprovalMocksProvider, UserApprovalsServiceGetApprovalDetailsMocksProvider, UserApprovalsServiceMocksProvider, UserApprovalsServiceRejectApprovalMocksProvider, UserConfiguration, UserManagementService, UserManagementServiceCheckUserExistsMocksProvider, UserManagementServiceGetLegalEntityByExternalIdMocksProvider, UserManagementServiceGetOwnUserMocksProvider, UserManagementServiceGetUserByExternalIdMocksProvider, UserManagementServiceGetUserByIdMocksProvider, UserManagementServiceGetUsersByLegalEntityIdsMocksProvider, UserManagementServiceGetUsersMocksProvider, UserManagementServiceMocksProvider, UserManagementServiceUpdateOwnLanguageMocksProvider, UserProfileManagementService, UserProfileManagementServiceAddElectronicAddressMocksProvider, UserProfileManagementServiceAddOwnElectronicAddressMocksProvider, UserProfileManagementServiceAddOwnPhoneAddressMocksProvider, UserProfileManagementServiceAddOwnPostalAddressMocksProvider, UserProfileManagementServiceAddPhoneAddressMocksProvider, UserProfileManagementServiceAddPostalAddressMocksProvider, UserProfileManagementServiceDeleteElectronicAddressMocksProvider, UserProfileManagementServiceDeleteOwnElectronicAddressMocksProvider, UserProfileManagementServiceDeleteOwnPhoneAddressMocksProvider, UserProfileManagementServiceDeleteOwnPostalAddressMocksProvider, UserProfileManagementServiceDeletePhoneAddressMocksProvider, UserProfileManagementServiceDeletePostalAddressMocksProvider, UserProfileManagementServiceGetElectronicAddressMocksProvider, UserProfileManagementServiceGetElectronicAddressesMocksProvider, UserProfileManagementServiceGetOwnElectronicAddressMocksProvider, UserProfileManagementServiceGetOwnElectronicAddressesMocksProvider, UserProfileManagementServiceGetOwnPhoneAddressMocksProvider, UserProfileManagementServiceGetOwnPhoneAddressesMocksProvider, UserProfileManagementServiceGetOwnPostalAddressMocksProvider, UserProfileManagementServiceGetOwnPostalAddressesMocksProvider, UserProfileManagementServiceGetOwnUserProfileMocksProvider, UserProfileManagementServiceGetPhoneAddressMocksProvider, UserProfileManagementServiceGetPhoneAddressesMocksProvider, UserProfileManagementServiceGetPostalAddressMocksProvider, UserProfileManagementServiceGetPostalAddressesMocksProvider, UserProfileManagementServiceGetUserProfileMocksProvider, UserProfileManagementServiceMocksProvider, UserProfileManagementServiceReplaceOwnUserProfileAttributesMocksProvider, UserProfileManagementServiceReplaceUserProfileAttributesMocksProvider, UserProfileManagementServiceUpdateElectronicAddressMocksProvider, UserProfileManagementServiceUpdateOwnElectronicAddressMocksProvider, UserProfileManagementServiceUpdateOwnPhoneAddressMocksProvider, UserProfileManagementServiceUpdateOwnPostalAddressMocksProvider, UserProfileManagementServiceUpdatePhoneAddressMocksProvider, UserProfileManagementServiceUpdatePostalAddressMocksProvider };
//# sourceMappingURL=backbase-user-http-ang.js.map
