(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/audit-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["audit-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var Status = {
        Initiated: 'Initiated',
        Successful: 'Successful',
        Failed: 'Failed'
    };

    var Type = {
        CUSTOMER: 'CUSTOMER',
        BANK: 'BANK'
    };

    var AUDIT_BASE_PATH = new i0.InjectionToken('AUDIT_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var AuditConfiguration = /** @class */ (function () {
        function AuditConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        AuditConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        AuditConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        AuditConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        AuditConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return AuditConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module AuditConfiguration');

    var AuditApiModule = /** @class */ (function () {
        function AuditApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('AuditApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        AuditApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: AuditApiModule,
                providers: [{ provide: AuditConfiguration, useFactory: configurationFactory }]
            };
        };
        return AuditApiModule;
    }());
    AuditApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuditApiModule, deps: [{ token: AuditApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: AuditConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AuditApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuditApiModule });
    AuditApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuditApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuditApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: AuditApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: AuditConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var AuditClientService = /** @class */ (function () {
        function AuditClientService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AuditConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        AuditClientService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        AuditClientService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        AuditClientService.prototype.getAuditEventCategories = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v3/audit-log/event-categories", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AuditClientService.prototype.getAuditEventCategoriesUrl = function () {
            return this.configuration.basePath + "/client-api/v3/audit-log/event-categories";
        };
        AuditClientService.prototype.getAuditLogMessages = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _eventCategories = requestParameters["eventCategories"];
            var _objectType = requestParameters["objectType"];
            var _objectTypes = requestParameters["objectTypes"];
            var _eventAction = requestParameters["eventAction"];
            var _eventActions = requestParameters["eventActions"];
            var _status = requestParameters["status"];
            var _ipAddresses = requestParameters["ipAddresses"];
            var _usernames = requestParameters["usernames"];
            var _userId = requestParameters["userId"];
            var _userIds = requestParameters["userIds"];
            var _legalEntityIds = requestParameters["legalEntityIds"];
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _messageSetId = requestParameters["messageSetId"];
            var _schemaVersions = requestParameters["schemaVersions"];
            var _userAgents = requestParameters["userAgents"];
            var _errors = requestParameters["errors"];
            var _eventMetaDataKey = requestParameters["eventMetaDataKey"];
            var _eventMetaDataValue = requestParameters["eventMetaDataValue"];
            var _partialMatchAgainst = requestParameters["partialMatchAgainst"];
            var _expandToMetaData = requestParameters["expandToMetaData"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_eventCategories) {
                _eventCategories.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventCategories');
                });
            }
            if (_objectType !== undefined && _objectType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
            }
            if (_objectTypes) {
                _objectTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'objectTypes');
                });
            }
            if (_eventAction !== undefined && _eventAction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
            }
            if (_eventActions) {
                _eventActions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventActions');
                });
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_ipAddresses) {
                _ipAddresses.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ipAddresses');
                });
            }
            if (_usernames) {
                _usernames.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'usernames');
                });
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_userIds) {
                _userIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userIds');
                });
            }
            if (_legalEntityIds) {
                _legalEntityIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'legalEntityIds');
                });
            }
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_messageSetId !== undefined && _messageSetId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
            }
            if (_schemaVersions) {
                _schemaVersions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'schemaVersions');
                });
            }
            if (_userAgents) {
                _userAgents.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userAgents');
                });
            }
            if (_errors) {
                _errors.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'errors');
                });
            }
            if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
            }
            if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
            }
            if (_partialMatchAgainst) {
                _partialMatchAgainst.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
                });
            }
            if (_expandToMetaData) {
                _expandToMetaData.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'expandToMetaData');
                });
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json',
                    'text/csv'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v3/audit-log/messages", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AuditClientService.prototype.getAuditLogMessagesUrl = function (requestParameters) {
            var _this = this;
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _eventCategories = requestParameters["eventCategories"];
            var _objectType = requestParameters["objectType"];
            var _objectTypes = requestParameters["objectTypes"];
            var _eventAction = requestParameters["eventAction"];
            var _eventActions = requestParameters["eventActions"];
            var _status = requestParameters["status"];
            var _ipAddresses = requestParameters["ipAddresses"];
            var _usernames = requestParameters["usernames"];
            var _userId = requestParameters["userId"];
            var _userIds = requestParameters["userIds"];
            var _legalEntityIds = requestParameters["legalEntityIds"];
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _messageSetId = requestParameters["messageSetId"];
            var _schemaVersions = requestParameters["schemaVersions"];
            var _userAgents = requestParameters["userAgents"];
            var _errors = requestParameters["errors"];
            var _eventMetaDataKey = requestParameters["eventMetaDataKey"];
            var _eventMetaDataValue = requestParameters["eventMetaDataValue"];
            var _partialMatchAgainst = requestParameters["partialMatchAgainst"];
            var _expandToMetaData = requestParameters["expandToMetaData"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_eventCategories) {
                _eventCategories.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventCategories');
                });
            }
            if (_objectType !== undefined && _objectType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
            }
            if (_objectTypes) {
                _objectTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'objectTypes');
                });
            }
            if (_eventAction !== undefined && _eventAction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
            }
            if (_eventActions) {
                _eventActions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventActions');
                });
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_ipAddresses) {
                _ipAddresses.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ipAddresses');
                });
            }
            if (_usernames) {
                _usernames.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'usernames');
                });
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_userIds) {
                _userIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userIds');
                });
            }
            if (_legalEntityIds) {
                _legalEntityIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'legalEntityIds');
                });
            }
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_messageSetId !== undefined && _messageSetId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
            }
            if (_schemaVersions) {
                _schemaVersions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'schemaVersions');
                });
            }
            if (_userAgents) {
                _userAgents.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userAgents');
                });
            }
            if (_errors) {
                _errors.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'errors');
                });
            }
            if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
            }
            if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
            }
            if (_partialMatchAgainst) {
                _partialMatchAgainst.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
                });
            }
            if (_expandToMetaData) {
                _expandToMetaData.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'expandToMetaData');
                });
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v3/audit-log/messages" + (queryString ? "?" + queryString : '');
        };
        AuditClientService.prototype.getLegalEntities = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v3/audit-log/legal-entities", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AuditClientService.prototype.getLegalEntitiesUrl = function (requestParameters) {
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v3/audit-log/legal-entities" + (queryString ? "?" + queryString : '');
        };
        AuditClientService.prototype.getStartAsyncExport = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _eventCategories = requestParameters["eventCategories"];
            var _objectType = requestParameters["objectType"];
            var _objectTypes = requestParameters["objectTypes"];
            var _eventAction = requestParameters["eventAction"];
            var _eventActions = requestParameters["eventActions"];
            var _status = requestParameters["status"];
            var _ipAddresses = requestParameters["ipAddresses"];
            var _usernames = requestParameters["usernames"];
            var _userId = requestParameters["userId"];
            var _userIds = requestParameters["userIds"];
            var _legalEntityIds = requestParameters["legalEntityIds"];
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _messageSetId = requestParameters["messageSetId"];
            var _schemaVersions = requestParameters["schemaVersions"];
            var _userAgents = requestParameters["userAgents"];
            var _errors = requestParameters["errors"];
            var _eventMetaDataKey = requestParameters["eventMetaDataKey"];
            var _eventMetaDataValue = requestParameters["eventMetaDataValue"];
            var _partialMatchAgainst = requestParameters["partialMatchAgainst"];
            var _expandToMetaData = requestParameters["expandToMetaData"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_eventCategories) {
                _eventCategories.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventCategories');
                });
            }
            if (_objectType !== undefined && _objectType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
            }
            if (_objectTypes) {
                _objectTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'objectTypes');
                });
            }
            if (_eventAction !== undefined && _eventAction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
            }
            if (_eventActions) {
                _eventActions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventActions');
                });
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_ipAddresses) {
                _ipAddresses.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ipAddresses');
                });
            }
            if (_usernames) {
                _usernames.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'usernames');
                });
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_userIds) {
                _userIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userIds');
                });
            }
            if (_legalEntityIds) {
                _legalEntityIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'legalEntityIds');
                });
            }
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_messageSetId !== undefined && _messageSetId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
            }
            if (_schemaVersions) {
                _schemaVersions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'schemaVersions');
                });
            }
            if (_userAgents) {
                _userAgents.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userAgents');
                });
            }
            if (_errors) {
                _errors.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'errors');
                });
            }
            if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
            }
            if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
            }
            if (_partialMatchAgainst) {
                _partialMatchAgainst.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
                });
            }
            if (_expandToMetaData) {
                _expandToMetaData.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'expandToMetaData');
                });
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v3/audit-log/export", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AuditClientService.prototype.getStartAsyncExportUrl = function (requestParameters) {
            var _this = this;
            var _startDate = requestParameters["startDate"];
            var _endDate = requestParameters["endDate"];
            var _eventCategories = requestParameters["eventCategories"];
            var _objectType = requestParameters["objectType"];
            var _objectTypes = requestParameters["objectTypes"];
            var _eventAction = requestParameters["eventAction"];
            var _eventActions = requestParameters["eventActions"];
            var _status = requestParameters["status"];
            var _ipAddresses = requestParameters["ipAddresses"];
            var _usernames = requestParameters["usernames"];
            var _userId = requestParameters["userId"];
            var _userIds = requestParameters["userIds"];
            var _legalEntityIds = requestParameters["legalEntityIds"];
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _messageSetId = requestParameters["messageSetId"];
            var _schemaVersions = requestParameters["schemaVersions"];
            var _userAgents = requestParameters["userAgents"];
            var _errors = requestParameters["errors"];
            var _eventMetaDataKey = requestParameters["eventMetaDataKey"];
            var _eventMetaDataValue = requestParameters["eventMetaDataValue"];
            var _partialMatchAgainst = requestParameters["partialMatchAgainst"];
            var _expandToMetaData = requestParameters["expandToMetaData"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _orderBy = requestParameters["orderBy"];
            var _direction = requestParameters["direction"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_startDate !== undefined && _startDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
            }
            if (_endDate !== undefined && _endDate !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
            }
            if (_eventCategories) {
                _eventCategories.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventCategories');
                });
            }
            if (_objectType !== undefined && _objectType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
            }
            if (_objectTypes) {
                _objectTypes.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'objectTypes');
                });
            }
            if (_eventAction !== undefined && _eventAction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
            }
            if (_eventActions) {
                _eventActions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'eventActions');
                });
            }
            if (_status) {
                _status.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'status');
                });
            }
            if (_ipAddresses) {
                _ipAddresses.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'ipAddresses');
                });
            }
            if (_usernames) {
                _usernames.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'usernames');
                });
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_userIds) {
                _userIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userIds');
                });
            }
            if (_legalEntityIds) {
                _legalEntityIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'legalEntityIds');
                });
            }
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_messageSetId !== undefined && _messageSetId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
            }
            if (_schemaVersions) {
                _schemaVersions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'schemaVersions');
                });
            }
            if (_userAgents) {
                _userAgents.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'userAgents');
                });
            }
            if (_errors) {
                _errors.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'errors');
                });
            }
            if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
            }
            if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
            }
            if (_partialMatchAgainst) {
                _partialMatchAgainst.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
                });
            }
            if (_expandToMetaData) {
                _expandToMetaData.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'expandToMetaData');
                });
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_orderBy !== undefined && _orderBy !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
            }
            if (_direction !== undefined && _direction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v3/audit-log/export" + (queryString ? "?" + queryString : '');
        };
        AuditClientService.prototype.getStoredContent = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _contentId = requestParameters["contentId"];
            if (_contentId === null || _contentId === undefined) {
                throw new Error('Required parameter contentId was null or undefined when calling getStoredContent.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_contentId !== undefined && _contentId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _contentId, 'contentId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'text/csv'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v3/audit-log/stored-content", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AuditClientService.prototype.getStoredContentUrl = function (requestParameters) {
            var _contentId = requestParameters["contentId"];
            if (_contentId === null || _contentId === undefined) {
                throw new Error('Required parameter contentId was null or undefined when calling getStoredContent.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_contentId !== undefined && _contentId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _contentId, 'contentId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v3/audit-log/stored-content" + (queryString ? "?" + queryString : '');
        };
        return AuditClientService;
    }());
    AuditClientService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuditClientService, deps: [{ token: i1__namespace.HttpClient }, { token: AUDIT_BASE_PATH, optional: true }, { token: AuditConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AuditClientService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuditClientService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuditClientService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [AUDIT_BASE_PATH]
                        }] }, { type: AuditConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var AuditClientServiceGetAuditEventCategoriesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v3/audit-log/event-categories",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "eventCategories": [{
                                "eventCategory": "Access Control",
                                "objectTypes": [{
                                        "objectType": "Data Group",
                                        "eventActions": ["Create", "Update", "Delete"]
                                    }]
                            }, {
                                "eventCategory": "Audit",
                                "objectTypes": [{
                                        "objectType": "Audit Log",
                                        "eventActions": ["Publish", "Read", "Export"]
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var AuditClientServiceGetAuditLogMessagesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v3/audit-log/messages",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "totalCount": 3,
                        "auditMessages": [{
                                "timestamp": "2020-09-24T13:28:57.896Z",
                                "eventCategory": "Access Control",
                                "objectType": "Data Group",
                                "eventAction": "Update",
                                "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                                "status": "Initiated",
                                "username": "JBloggs",
                                "userId": "8ad6818b682e6e7201682f853a8f0002",
                                "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                                "eventMetaData": {
                                    "AccountGroup Name": "MyAccountGroup",
                                    "Account Added": "ABC123"
                                }
                            }, {
                                "timestamp": "2020-09-24T13:29:01.549Z",
                                "eventCategory": "Access Control",
                                "objectType": "Data Group",
                                "eventAction": "Update",
                                "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                                "status": "Successful",
                                "ipAddress": "86.3.123.123",
                                "username": "JBloggs",
                                "userId": "8ad6818b682e6e7201682f853a8f0002",
                                "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                                "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                                "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                                "schemaVersion": "1.2.3",
                                "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                                "eventMetaData": {
                                    "AccountGroup Name": "MyAccountGroup",
                                    "Account Added": "ABC123"
                                }
                            }, {
                                "timestamp": "2020-09-24T13:29:01.549Z",
                                "eventCategory": "Access Control",
                                "objectType": "Data Group",
                                "eventAction": "Update",
                                "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                                "status": "Failed",
                                "ipAddress": "86.3.123.123",
                                "username": "JBloggs",
                                "userId": "8ad6818b682e6e7201682f853a8f0002",
                                "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                                "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                                "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                                "schemaVersion": "1.2.3",
                                "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                                "error": "Cannot update, account 'ABC123' does not exist.",
                                "eventMetaData": {
                                    "AccountGroup Name": "MyAccountGroup",
                                    "Account Added": "ABC123"
                                }
                            }]
                    }
                },
                {
                    status: 200,
                    body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var AuditClientServiceGetLegalEntitiesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v3/audit-log/legal-entities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "My Bank",
                            "type": "BANK"
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "type": "CUSTOMER"
                        }]
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var AuditClientServiceGetStartAsyncExportMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v3/audit-log/export",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "exportId": "a892e1e0-b62c-4e2b-bd24-9e2ad9786ae1"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 429,
                    body: {
                        "message": "Too many requests for Async export."
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var AuditClientServiceGetStoredContentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v3/audit-log/stored-content",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
                },
            ]
        }]);
    var AuditClientServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v3/audit-log/event-categories",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "eventCategories": [{
                                "eventCategory": "Access Control",
                                "objectTypes": [{
                                        "objectType": "Data Group",
                                        "eventActions": ["Create", "Update", "Delete"]
                                    }]
                            }, {
                                "eventCategory": "Audit",
                                "objectTypes": [{
                                        "objectType": "Audit Log",
                                        "eventActions": ["Publish", "Read", "Export"]
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v3/audit-log/messages",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "totalCount": 3,
                        "auditMessages": [{
                                "timestamp": "2020-09-24T13:28:57.896Z",
                                "eventCategory": "Access Control",
                                "objectType": "Data Group",
                                "eventAction": "Update",
                                "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                                "status": "Initiated",
                                "username": "JBloggs",
                                "userId": "8ad6818b682e6e7201682f853a8f0002",
                                "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                                "eventMetaData": {
                                    "AccountGroup Name": "MyAccountGroup",
                                    "Account Added": "ABC123"
                                }
                            }, {
                                "timestamp": "2020-09-24T13:29:01.549Z",
                                "eventCategory": "Access Control",
                                "objectType": "Data Group",
                                "eventAction": "Update",
                                "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                                "status": "Successful",
                                "ipAddress": "86.3.123.123",
                                "username": "JBloggs",
                                "userId": "8ad6818b682e6e7201682f853a8f0002",
                                "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                                "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                                "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                                "schemaVersion": "1.2.3",
                                "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                                "eventMetaData": {
                                    "AccountGroup Name": "MyAccountGroup",
                                    "Account Added": "ABC123"
                                }
                            }, {
                                "timestamp": "2020-09-24T13:29:01.549Z",
                                "eventCategory": "Access Control",
                                "objectType": "Data Group",
                                "eventAction": "Update",
                                "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                                "status": "Failed",
                                "ipAddress": "86.3.123.123",
                                "username": "JBloggs",
                                "userId": "8ad6818b682e6e7201682f853a8f0002",
                                "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                                "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                                "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                                "schemaVersion": "1.2.3",
                                "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                                "error": "Cannot update, account 'ABC123' does not exist.",
                                "eventMetaData": {
                                    "AccountGroup Name": "MyAccountGroup",
                                    "Account Added": "ABC123"
                                }
                            }]
                    }
                },
                {
                    status: 200,
                    body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v3/audit-log/legal-entities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "My Bank",
                            "type": "BANK"
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "type": "CUSTOMER"
                        }]
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v3/audit-log/export",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "exportId": "a892e1e0-b62c-4e2b-bd24-9e2ad9786ae1"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 429,
                    body: {
                        "message": "Too many requests for Async export."
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v3/audit-log/stored-content",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
                },
            ]
        },
    ]);

    exports.AUDIT_BASE_PATH = AUDIT_BASE_PATH;
    exports.AuditApiModule = AuditApiModule;
    exports.AuditClientService = AuditClientService;
    exports.AuditClientServiceGetAuditEventCategoriesMocksProvider = AuditClientServiceGetAuditEventCategoriesMocksProvider;
    exports.AuditClientServiceGetAuditLogMessagesMocksProvider = AuditClientServiceGetAuditLogMessagesMocksProvider;
    exports.AuditClientServiceGetLegalEntitiesMocksProvider = AuditClientServiceGetLegalEntitiesMocksProvider;
    exports.AuditClientServiceGetStartAsyncExportMocksProvider = AuditClientServiceGetStartAsyncExportMocksProvider;
    exports.AuditClientServiceGetStoredContentMocksProvider = AuditClientServiceGetStoredContentMocksProvider;
    exports.AuditClientServiceMocksProvider = AuditClientServiceMocksProvider;
    exports.AuditConfiguration = AuditConfiguration;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.Status = Status;
    exports.Type = Type;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-audit-http-ang.umd.js.map
