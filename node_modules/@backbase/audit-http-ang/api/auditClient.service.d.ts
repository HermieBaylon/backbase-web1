import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuditExportGetResponse } from '../model/models';
import { AuditMessagesGetResponse } from '../model/models';
import { EventCategoriesGet } from '../model/models';
import { LegalEntity } from '../model/models';
import { AuditConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetAuditLogMessagesRequestParams {
    ["startDate"]?: string;
    ["endDate"]?: string;
    ["eventCategories"]?: Array<string>;
    ["objectType"]?: string;
    ["objectTypes"]?: Array<string>;
    ["eventAction"]?: string;
    ["eventActions"]?: Array<string>;
    ["status"]?: Array<string>;
    ["ipAddresses"]?: Array<string>;
    ["usernames"]?: Array<string>;
    ["userId"]?: string;
    ["userIds"]?: Array<string>;
    ["legalEntityIds"]?: Array<string>;
    ["serviceAgreementId"]?: string;
    ["messageSetId"]?: string;
    ["schemaVersions"]?: Array<string>;
    ["userAgents"]?: Array<string>;
    ["errors"]?: Array<string>;
    ["eventMetaDataKey"]?: string;
    ["eventMetaDataValue"]?: string;
    ["partialMatchAgainst"]?: Array<string>;
    ["expandToMetaData"]?: Array<string>;
    ["from"]?: number;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface GetLegalEntitiesRequestParams {
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface GetStartAsyncExportRequestParams {
    ["startDate"]?: string;
    ["endDate"]?: string;
    ["eventCategories"]?: Array<string>;
    ["objectType"]?: string;
    ["objectTypes"]?: Array<string>;
    ["eventAction"]?: string;
    ["eventActions"]?: Array<string>;
    ["status"]?: Array<string>;
    ["ipAddresses"]?: Array<string>;
    ["usernames"]?: Array<string>;
    ["userId"]?: string;
    ["userIds"]?: Array<string>;
    ["legalEntityIds"]?: Array<string>;
    ["serviceAgreementId"]?: string;
    ["messageSetId"]?: string;
    ["schemaVersions"]?: Array<string>;
    ["userAgents"]?: Array<string>;
    ["errors"]?: Array<string>;
    ["eventMetaDataKey"]?: string;
    ["eventMetaDataValue"]?: string;
    ["partialMatchAgainst"]?: Array<string>;
    ["expandToMetaData"]?: Array<string>;
    ["from"]?: number;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface GetStoredContentRequestParams {
    ["contentId"]: string;
}
export declare class AuditClientService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AuditConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AuditConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getAuditEventCategories(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<EventCategoriesGet>;
    getAuditEventCategories(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<EventCategoriesGet>>;
    getAuditEventCategories(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<EventCategoriesGet>>;
    getAuditEventCategoriesUrl(): string;
    getAuditLogMessages(requestParameters: GetAuditLogMessagesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AuditMessagesGetResponse>;
    getAuditLogMessages(requestParameters: GetAuditLogMessagesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AuditMessagesGetResponse>>;
    getAuditLogMessages(requestParameters: GetAuditLogMessagesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AuditMessagesGetResponse>>;
    getAuditLogMessages(requestParameters: GetAuditLogMessagesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<string>;
    getAuditLogMessages(requestParameters: GetAuditLogMessagesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<string>>;
    getAuditLogMessages(requestParameters: GetAuditLogMessagesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<string>>;
    getAuditLogMessagesUrl(requestParameters: GetAuditLogMessagesRequestParams): string;
    getLegalEntities(requestParameters: GetLegalEntitiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<LegalEntity>>;
    getLegalEntities(requestParameters: GetLegalEntitiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<LegalEntity>>>;
    getLegalEntities(requestParameters: GetLegalEntitiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<LegalEntity>>>;
    getLegalEntitiesUrl(requestParameters: GetLegalEntitiesRequestParams): string;
    getStartAsyncExport(requestParameters: GetStartAsyncExportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AuditExportGetResponse>;
    getStartAsyncExport(requestParameters: GetStartAsyncExportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AuditExportGetResponse>>;
    getStartAsyncExport(requestParameters: GetStartAsyncExportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AuditExportGetResponse>>;
    getStartAsyncExportUrl(requestParameters: GetStartAsyncExportRequestParams): string;
    getStoredContent(requestParameters: GetStoredContentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<string>;
    getStoredContent(requestParameters: GetStoredContentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<string>>;
    getStoredContent(requestParameters: GetStoredContentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<string>>;
    getStoredContentUrl(requestParameters: GetStoredContentRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuditClientService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuditClientService>;
}
