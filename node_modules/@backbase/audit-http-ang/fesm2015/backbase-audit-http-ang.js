import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const Status = {
    Initiated: 'Initiated',
    Successful: 'Successful',
    Failed: 'Failed'
};

const Type = {
    CUSTOMER: 'CUSTOMER',
    BANK: 'BANK'
};

const AUDIT_BASE_PATH = new InjectionToken('AUDIT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class AuditConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module AuditConfiguration');

class AuditApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('AuditApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: AuditApiModule,
            providers: [{ provide: AuditConfiguration, useFactory: configurationFactory }]
        };
    }
}
AuditApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditApiModule, deps: [{ token: AuditApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: AuditConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
AuditApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditApiModule });
AuditApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: AuditApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: AuditConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class AuditClientService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AuditConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAuditEventCategories(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/event-categories`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAuditEventCategoriesUrl() {
        return `${this.configuration.basePath}/client-api/v3/audit-log/event-categories`;
    }
    getAuditLogMessages(requestParameters, observe = 'body', reportProgress = false, options) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json',
                'text/csv'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/messages`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAuditLogMessagesUrl(requestParameters) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/messages${queryString ? `?${queryString}` : ''}`;
    }
    getLegalEntities(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/legal-entities`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntitiesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/legal-entities${queryString ? `?${queryString}` : ''}`;
    }
    getStartAsyncExport(requestParameters, observe = 'body', reportProgress = false, options) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/export`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getStartAsyncExportUrl(requestParameters) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/export${queryString ? `?${queryString}` : ''}`;
    }
    getStoredContent(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contentId = requestParameters["contentId"];
        if (_contentId === null || _contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getStoredContent.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_contentId !== undefined && _contentId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _contentId, 'contentId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'text/csv'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/stored-content`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getStoredContentUrl(requestParameters) {
        const _contentId = requestParameters["contentId"];
        if (_contentId === null || _contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getStoredContent.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_contentId !== undefined && _contentId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _contentId, 'contentId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/stored-content${queryString ? `?${queryString}` : ''}`;
    }
}
AuditClientService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditClientService, deps: [{ token: i1.HttpClient }, { token: AUDIT_BASE_PATH, optional: true }, { token: AuditConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuditClientService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditClientService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditClientService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AUDIT_BASE_PATH]
                }] }, { type: AuditConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const AuditClientServiceGetAuditEventCategoriesMocksProvider = createMocks([{
        urlPattern: "/client-api/v3/audit-log/event-categories",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "eventCategories": [{
                            "eventCategory": "Access Control",
                            "objectTypes": [{
                                    "objectType": "Data Group",
                                    "eventActions": ["Create", "Update", "Delete"]
                                }]
                        }, {
                            "eventCategory": "Audit",
                            "objectTypes": [{
                                    "objectType": "Audit Log",
                                    "eventActions": ["Publish", "Read", "Export"]
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const AuditClientServiceGetAuditLogMessagesMocksProvider = createMocks([{
        urlPattern: "/client-api/v3/audit-log/messages",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "totalCount": 3,
                    "auditMessages": [{
                            "timestamp": "2020-09-24T13:28:57.896Z",
                            "eventCategory": "Access Control",
                            "objectType": "Data Group",
                            "eventAction": "Update",
                            "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                            "status": "Initiated",
                            "username": "JBloggs",
                            "userId": "8ad6818b682e6e7201682f853a8f0002",
                            "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                            "eventMetaData": {
                                "AccountGroup Name": "MyAccountGroup",
                                "Account Added": "ABC123"
                            }
                        }, {
                            "timestamp": "2020-09-24T13:29:01.549Z",
                            "eventCategory": "Access Control",
                            "objectType": "Data Group",
                            "eventAction": "Update",
                            "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                            "status": "Successful",
                            "ipAddress": "86.3.123.123",
                            "username": "JBloggs",
                            "userId": "8ad6818b682e6e7201682f853a8f0002",
                            "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                            "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                            "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                            "schemaVersion": "1.2.3",
                            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                            "eventMetaData": {
                                "AccountGroup Name": "MyAccountGroup",
                                "Account Added": "ABC123"
                            }
                        }, {
                            "timestamp": "2020-09-24T13:29:01.549Z",
                            "eventCategory": "Access Control",
                            "objectType": "Data Group",
                            "eventAction": "Update",
                            "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                            "status": "Failed",
                            "ipAddress": "86.3.123.123",
                            "username": "JBloggs",
                            "userId": "8ad6818b682e6e7201682f853a8f0002",
                            "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                            "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                            "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                            "schemaVersion": "1.2.3",
                            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                            "error": "Cannot update, account 'ABC123' does not exist.",
                            "eventMetaData": {
                                "AccountGroup Name": "MyAccountGroup",
                                "Account Added": "ABC123"
                            }
                        }]
                }
            },
            {
                status: 200,
                body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const AuditClientServiceGetLegalEntitiesMocksProvider = createMocks([{
        urlPattern: "/client-api/v3/audit-log/legal-entities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "c7a382786d514262b75ab9531b749a2b",
                        "externalId": "Bank",
                        "name": "My Bank",
                        "type": "BANK"
                    }, {
                        "id": "0f6d14f40e064deeaee351befd53d3e7",
                        "externalId": "Backbase Cardiff",
                        "name": "Backbase Cardiff",
                        "type": "CUSTOMER"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const AuditClientServiceGetStartAsyncExportMocksProvider = createMocks([{
        urlPattern: "/client-api/v3/audit-log/export",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "exportId": "a892e1e0-b62c-4e2b-bd24-9e2ad9786ae1"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 429,
                body: {
                    "message": "Too many requests for Async export."
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const AuditClientServiceGetStoredContentMocksProvider = createMocks([{
        urlPattern: "/client-api/v3/audit-log/stored-content",
        method: "GET",
        responses: [
            {
                status: 200,
                body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
            },
        ]
    }]);
const AuditClientServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v3/audit-log/event-categories",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "eventCategories": [{
                            "eventCategory": "Access Control",
                            "objectTypes": [{
                                    "objectType": "Data Group",
                                    "eventActions": ["Create", "Update", "Delete"]
                                }]
                        }, {
                            "eventCategory": "Audit",
                            "objectTypes": [{
                                    "objectType": "Audit Log",
                                    "eventActions": ["Publish", "Read", "Export"]
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v3/audit-log/messages",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "totalCount": 3,
                    "auditMessages": [{
                            "timestamp": "2020-09-24T13:28:57.896Z",
                            "eventCategory": "Access Control",
                            "objectType": "Data Group",
                            "eventAction": "Update",
                            "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                            "status": "Initiated",
                            "username": "JBloggs",
                            "userId": "8ad6818b682e6e7201682f853a8f0002",
                            "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                            "eventMetaData": {
                                "AccountGroup Name": "MyAccountGroup",
                                "Account Added": "ABC123"
                            }
                        }, {
                            "timestamp": "2020-09-24T13:29:01.549Z",
                            "eventCategory": "Access Control",
                            "objectType": "Data Group",
                            "eventAction": "Update",
                            "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                            "status": "Successful",
                            "ipAddress": "86.3.123.123",
                            "username": "JBloggs",
                            "userId": "8ad6818b682e6e7201682f853a8f0002",
                            "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                            "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                            "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                            "schemaVersion": "1.2.3",
                            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                            "eventMetaData": {
                                "AccountGroup Name": "MyAccountGroup",
                                "Account Added": "ABC123"
                            }
                        }, {
                            "timestamp": "2020-09-24T13:29:01.549Z",
                            "eventCategory": "Access Control",
                            "objectType": "Data Group",
                            "eventAction": "Update",
                            "eventDescription": "JBloggs changed Account Group 'MyAccountGroup'. Added account: ABC123",
                            "status": "Failed",
                            "ipAddress": "86.3.123.123",
                            "username": "JBloggs",
                            "userId": "8ad6818b682e6e7201682f853a8f0002",
                            "legalEntityId": "8ad6818b682e6f3c01682f8536c60198",
                            "serviceAgreementId": "8ad6818b682e6f3c01682f85381a0199",
                            "messageSetId": "8ab2b95874742cc201748cf9a8a106768305",
                            "schemaVersion": "1.2.3",
                            "userAgent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
                            "error": "Cannot update, account 'ABC123' does not exist.",
                            "eventMetaData": {
                                "AccountGroup Name": "MyAccountGroup",
                                "Account Added": "ABC123"
                            }
                        }]
                }
            },
            {
                status: 200,
                body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v3/audit-log/legal-entities",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "c7a382786d514262b75ab9531b749a2b",
                        "externalId": "Bank",
                        "name": "My Bank",
                        "type": "BANK"
                    }, {
                        "id": "0f6d14f40e064deeaee351befd53d3e7",
                        "externalId": "Backbase Cardiff",
                        "name": "Backbase Cardiff",
                        "type": "CUSTOMER"
                    }]
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v3/audit-log/export",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "exportId": "a892e1e0-b62c-4e2b-bd24-9e2ad9786ae1"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 429,
                body: {
                    "message": "Too many requests for Async export."
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v3/audit-log/stored-content",
        method: "GET",
        responses: [
            {
                status: 200,
                body: "\"timestamp\",\"eventCategory\",\"objectType\",\"eventAction\",\"eventDescription\",\"status\",\"username\",\"userId\",\"messageSetId\",\"eventMetaData__AccountGroup Name\",\"eventMetaData__Account Added\",\"ipAddress\",\"legalEntityId\",\"serviceAgreementId\",\"schemaVersion\",\"userAgent\",\"error\"\n\"2020-09-24T13:28:57.896Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Initiated\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"\",\"\",\"\",\"\",\"\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Successful\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"\"\n\"2020-09-24T13:29:01.549Z\",\"Access Control\",\"Data Group\",\"Update\",\"JBloggs changed Account Group \'MyAccountGroup\'. Added account: ABC123\",\"Failed\",\"JBloggs\",\"8ad6818b682e6e7201682f853a8f0002\",\"8ab2b95874742cc201748cf9a8a106768305\",\"MyAccountGroup\",\"ABC123\",\"86.3.123.123\",\"8ad6818b682e6f3c01682f8536c60198\",\"8ad6818b682e6f3c01682f85381a0199\",\"1.2.3\",\"Mozilla\/5.0 (X11; Linux x86_64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.90 Safari\/537.36\",\"Cannot update, account \'ABC123\' does not exist.\""
            },
        ]
    },
]);

export { AUDIT_BASE_PATH, AuditApiModule, AuditClientService, AuditClientServiceGetAuditEventCategoriesMocksProvider, AuditClientServiceGetAuditLogMessagesMocksProvider, AuditClientServiceGetLegalEntitiesMocksProvider, AuditClientServiceGetStartAsyncExportMocksProvider, AuditClientServiceGetStoredContentMocksProvider, AuditClientServiceMocksProvider, AuditConfiguration, COLLECTION_FORMATS, CONFIG_TOKEN, Status, Type };
//# sourceMappingURL=backbase-audit-http-ang.js.map
