import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { AUDIT_BASE_PATH } from '../variables';
import { AuditConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class AuditClientService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AuditConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAuditEventCategories(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/event-categories`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAuditEventCategoriesUrl() {
        return `${this.configuration.basePath}/client-api/v3/audit-log/event-categories`;
    }
    getAuditLogMessages(requestParameters, observe = 'body', reportProgress = false, options) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json',
                'text/csv'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/messages`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAuditLogMessagesUrl(requestParameters) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/messages${queryString ? `?${queryString}` : ''}`;
    }
    getLegalEntities(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/legal-entities`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntitiesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/legal-entities${queryString ? `?${queryString}` : ''}`;
    }
    getStartAsyncExport(requestParameters, observe = 'body', reportProgress = false, options) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/export`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getStartAsyncExportUrl(requestParameters) {
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _eventCategories = requestParameters["eventCategories"];
        const _objectType = requestParameters["objectType"];
        const _objectTypes = requestParameters["objectTypes"];
        const _eventAction = requestParameters["eventAction"];
        const _eventActions = requestParameters["eventActions"];
        const _status = requestParameters["status"];
        const _ipAddresses = requestParameters["ipAddresses"];
        const _usernames = requestParameters["usernames"];
        const _userId = requestParameters["userId"];
        const _userIds = requestParameters["userIds"];
        const _legalEntityIds = requestParameters["legalEntityIds"];
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _messageSetId = requestParameters["messageSetId"];
        const _schemaVersions = requestParameters["schemaVersions"];
        const _userAgents = requestParameters["userAgents"];
        const _errors = requestParameters["errors"];
        const _eventMetaDataKey = requestParameters["eventMetaDataKey"];
        const _eventMetaDataValue = requestParameters["eventMetaDataValue"];
        const _partialMatchAgainst = requestParameters["partialMatchAgainst"];
        const _expandToMetaData = requestParameters["expandToMetaData"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_eventCategories) {
            _eventCategories.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventCategories');
            });
        }
        if (_objectType !== undefined && _objectType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _objectType, 'objectType');
        }
        if (_objectTypes) {
            _objectTypes.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'objectTypes');
            });
        }
        if (_eventAction !== undefined && _eventAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventAction, 'eventAction');
        }
        if (_eventActions) {
            _eventActions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'eventActions');
            });
        }
        if (_status) {
            _status.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'status');
            });
        }
        if (_ipAddresses) {
            _ipAddresses.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ipAddresses');
            });
        }
        if (_usernames) {
            _usernames.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'usernames');
            });
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_userIds) {
            _userIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userIds');
            });
        }
        if (_legalEntityIds) {
            _legalEntityIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'legalEntityIds');
            });
        }
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_messageSetId !== undefined && _messageSetId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageSetId, 'messageSetId');
        }
        if (_schemaVersions) {
            _schemaVersions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'schemaVersions');
            });
        }
        if (_userAgents) {
            _userAgents.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'userAgents');
            });
        }
        if (_errors) {
            _errors.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'errors');
            });
        }
        if (_eventMetaDataKey !== undefined && _eventMetaDataKey !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataKey, 'eventMetaDataKey');
        }
        if (_eventMetaDataValue !== undefined && _eventMetaDataValue !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _eventMetaDataValue, 'eventMetaDataValue');
        }
        if (_partialMatchAgainst) {
            _partialMatchAgainst.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'partialMatchAgainst');
            });
        }
        if (_expandToMetaData) {
            _expandToMetaData.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'expandToMetaData');
            });
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/export${queryString ? `?${queryString}` : ''}`;
    }
    getStoredContent(requestParameters, observe = 'body', reportProgress = false, options) {
        const _contentId = requestParameters["contentId"];
        if (_contentId === null || _contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getStoredContent.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_contentId !== undefined && _contentId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _contentId, 'contentId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'text/csv'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v3/audit-log/stored-content`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getStoredContentUrl(requestParameters) {
        const _contentId = requestParameters["contentId"];
        if (_contentId === null || _contentId === undefined) {
            throw new Error('Required parameter contentId was null or undefined when calling getStoredContent.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_contentId !== undefined && _contentId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _contentId, 'contentId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v3/audit-log/stored-content${queryString ? `?${queryString}` : ''}`;
    }
}
AuditClientService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditClientService, deps: [{ token: i1.HttpClient }, { token: AUDIT_BASE_PATH, optional: true }, { token: i2.AuditConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuditClientService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditClientService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuditClientService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AUDIT_BASE_PATH]
                }] }, { type: i2.AuditConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,