import * as i0 from '@angular/core';
import { EventEmitter, Component, Output, Input, NgModule, Directive, Injectable, Optional, ViewChild } from '@angular/core';
import * as i1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i2 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i3 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { CommonModule } from '@angular/common';
import { combineLatest, of, BehaviorSubject, Observable } from 'rxjs';
import { map, tap, catchError, publish, distinctUntilChanged, debounceTime, pluck } from 'rxjs/operators';
import * as i1$1 from '@backbase/foundation-ang/core';
import * as i2$1 from '@backbase/ui-ang/notification';
import * as i1$2 from '@angular/forms';
import { Validators } from '@angular/forms';
import * as i2$2 from '@backbase/ui-ang/phone-number-format-pipe';
import * as i1$3 from '@backbase/data-ang/accesscontrol';
import * as i1$4 from '@backbase/data-ang/user';
import * as i1$5 from '@angular/router';

class CancelModalComponent {
    constructor() {
        /**
         * An event emitter to signal continue has been pressed
         */
        this.continue = new EventEmitter();
        /**
         * An event emitter to signal discard has been pressed
         */
        this.discard = new EventEmitter();
    }
    dismissModal() {
        this.continue.emit();
    }
    closeModal() {
        this.discard.emit();
    }
}
CancelModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CancelModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CancelModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CancelModalComponent, selector: "bb-cancel-modal", inputs: { isOpen: "isOpen" }, outputs: { continue: "continue", discard: "discard" }, ngImport: i0, template: "\n<bb-modal-ui [isOpen]=\"isOpen\" (cancel)=\"dismissModal()\">\n  <div data-role=\"cancel-confirmation-modal\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-header-ui\n          headingType=\"h3\"\n          i18n-heading=\"Changes modal title|Title of the confirmation modal for discarding working changes@@bb-cancel-modal.title\"\n          heading=\"Discard Changes\">\n        </bb-header-ui>\n      </ng-template> \n    </bb-modal-header-ui>\n\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody i18n=\"Discard changes modal body|Body text of the confirmation modal for discarding working changes@@bb-cancel-modal.body\">\n        Are you sure you want to cancel and discard all changes?\n      </ng-template>\n    </bb-modal-body-ui>\n\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <button bbButton\n          type=\"button\"\n          color=\"secondary\"\n          data-role=\"cancel-confirmation-modal-continue-button\"\n          (click)=\"dismissModal()\"\n          i18n=\"Dismiss discard modal button|Text of the button that dismisses the discard changes confirmation modal@@bb-cancel-modal.cancel\">\n          Continue editing\n        </button>\n        <button bbButton\n          type=\"button\"\n          color=\"danger\"\n          (click)=\"closeModal()\"\n          data-role=\"cancel-confirmation-modal-discard-button\"\n          i18n=\"Confirm discard modal button|Text of the button that confirms the discard changes confirmation modal@@bb-cancel-modal.confirm\">\n          Discard changes\n        </button>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </div>\n</bb-modal-ui>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CancelModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-cancel-modal',
                    templateUrl: './cancel-modal.component.html',
                }]
        }], propDecorators: { continue: [{
                type: Output
            }], discard: [{
                type: Output
            }], isOpen: [{
                type: Input
            }] } });

const uiModules = [ButtonModule, ModalModule, HeaderModule];
class CancelModalModule {
}
CancelModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CancelModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CancelModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CancelModalModule, declarations: [CancelModalComponent], imports: [CommonModule, ButtonModule, ModalModule, HeaderModule], exports: [CancelModalComponent, ButtonModule, ModalModule, HeaderModule] });
CancelModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CancelModalModule, imports: [[CommonModule, ...uiModules], ButtonModule, ModalModule, HeaderModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CancelModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules],
                    declarations: [CancelModalComponent],
                    exports: [CancelModalComponent, ...uiModules],
                }]
        }] });

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class InputBase {
    constructor() {
        /**
         * A flag to determine if the form has been submitted.
         * Defaults to false.
         */
        this.hasBeenSubmitted = false;
        this.hasBlurred = false;
    }
    get fieldControl() {
        if (!this.formGroup) {
            throw new Error('formGroup must be initialised to type FormGroup');
        }
        if (!this.fieldName) {
            throw new Error('fieldName must be initialised to type FormFieldName');
        }
        return this.formGroup.controls[this.fieldName];
    }
    get hasErrors() {
        if (this.hasBeenSubmitted) {
            this.onFieldBlur();
        }
        return Boolean(this.fieldControl && this.fieldControl.touched && this.fieldControl.errors && this.hasBlurred);
    }
    onFieldBlur() {
        this.hasBlurred = true;
    }
}
InputBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: InputBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
InputBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: InputBase, selector: "[bbUserInputBase]", inputs: { formGroup: "formGroup", fieldName: "fieldName", hasBeenSubmitted: "hasBeenSubmitted" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: InputBase, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserInputBase]',
                }]
        }], propDecorators: { formGroup: [{
                type: Input
            }], fieldName: [{
                type: Input
            }], hasBeenSubmitted: [{
                type: Input
            }] } });

const defaultProperties = {
    notificationDismissTime: 3,
    enablePhoneNumberFormatter: true,
    phoneNumberCountryCode: 'CA',
    phoneNumberDebounceTime: 1,
    lockUnlockUserAccountCommentRequired: false,
    emailAddressTypes: [''],
    postalAddressTypes: [''],
    phoneNumberTypes: [''],
    maxEmailAddresses: 3,
    maxPhoneNumbers: 3,
    maxPostalAddresses: 3,
    legalEntityDebounceTime: 1,
    usernameDebounceTime: 1,
    requiredUserActionsDebounceTime: 1,
    legalEntityResponseSize: 5,
    showWidgetHeader: true,
};
class ManageProfilePreferencesService {
    constructor(model) {
        this.model = model;
    }
    getPhoneNumberInputPreferences() {
        return combineLatest([
            this.getPhoneNumberDebounceTimePreference(),
            this.getPhoneNumberCountryCodePreference(),
            this.getPhoneNumberFormatPreference(),
        ]).pipe(map(([debounceTime, countryCode, enablePhoneNumberFormatter]) => ({
            debounceTime,
            countryCode,
            enablePhoneNumberFormatter,
        })));
    }
    getPhoneNumberDebounceTimePreference() {
        return this.model
            ? this.model.property('phoneNumberDebounceTime', defaultProperties.phoneNumberDebounceTime)
            : of(defaultProperties.phoneNumberDebounceTime);
    }
    getPhoneNumberCountryCodePreference() {
        return this.model ? this.model.property('phoneNumberCountryCode', 'CA') : of('CA');
    }
    getPhoneNumberFormatPreference() {
        return this.model
            ? this.model
                .property('enablePhoneNumberFormatter', JSON.stringify(defaultProperties.enablePhoneNumberFormatter))
                .pipe(map((value) => value === 'true'))
            : of(defaultProperties.enablePhoneNumberFormatter);
    }
    getNotificationDismissTimePreference() {
        return this.model
            ? this.model.property('notificationDismissTime', defaultProperties.notificationDismissTime)
            : of(defaultProperties.notificationDismissTime);
    }
    getLockUnlockAccountCommentRequiredPreference() {
        return this.model
            ? this.model.property('lockUnlockUserAccountCommentRequired', defaultProperties.lockUnlockUserAccountCommentRequired)
            : of(defaultProperties.lockUnlockUserAccountCommentRequired);
    }
    getWidgetPreferences() {
        const preferenceObservables = [
            this.getEmailAddressTypePreferences(),
            this.getPostalAddressTypePreferences(),
            this.getPhoneNumberTypePreferences(),
            this.getMaxEmailAddressesPreference(),
            this.getMaxPhoneNumbersPreference(),
            this.getMaxPostalAddressesPreference(),
            this.getShowWidgetHeaderPreference(),
        ];
        return combineLatest(preferenceObservables).pipe(map(([emailAddressTypes, postalAddressTypes, phoneNumberTypes, maxEmailAddresses, maxPhoneNumbers, maxPostalAddresses, showWidgetHeader,]) => ({
            emailAddressTypes,
            postalAddressTypes,
            phoneNumberTypes,
            maxEmailAddresses,
            maxPhoneNumbers,
            maxPostalAddresses,
            showWidgetHeader,
        })));
    }
    getEmailAddressTypePreferences() {
        return this.getModelToSeparatedStringArray('emailAddressTypes');
    }
    getPostalAddressTypePreferences() {
        return this.getModelToSeparatedStringArray('postalAddressTypes');
    }
    getPhoneNumberTypePreferences() {
        return this.getModelToSeparatedStringArray('phoneNumberTypes');
    }
    getModelToSeparatedStringArray(modelName) {
        return this.model
            ? this.model.property(modelName, '').pipe(map(this.convertCommaSeparatedStringToStringArray))
            : of(defaultProperties[modelName]);
    }
    convertCommaSeparatedStringToStringArray(value) {
        return value ? value.split(',').map((arrayItem) => arrayItem.trim()) : [];
    }
    getMaxEmailAddressesPreference() {
        return this.model
            ? this.model.property('maxEmailAddresses', defaultProperties.maxEmailAddresses)
            : of(defaultProperties.maxEmailAddresses);
    }
    getMaxPhoneNumbersPreference() {
        return this.model
            ? this.model.property('maxPhoneNumbers', defaultProperties.maxPhoneNumbers)
            : of(defaultProperties.maxPhoneNumbers);
    }
    getMaxPostalAddressesPreference() {
        return this.model
            ? this.model.property('maxPostalAddresses', defaultProperties.maxPostalAddresses)
            : of(defaultProperties.maxPostalAddresses);
    }
    getLegalEntityDebouncePreference() {
        return this.model
            ? this.model.property('legalEntityDebounceTime', defaultProperties.legalEntityDebounceTime)
            : of(defaultProperties.legalEntityDebounceTime);
    }
    getUsernameDebouncePreference() {
        return this.model
            ? this.model.property('usernameDebounceTime', defaultProperties.usernameDebounceTime)
            : of(defaultProperties.usernameDebounceTime);
    }
    getRequiredUserActionsDebouncePreference() {
        return this.model
            ? this.model.property('requiredUserActionsDebounceTime', defaultProperties.requiredUserActionsDebounceTime)
            : of(defaultProperties.requiredUserActionsDebounceTime);
    }
    getLegalEntityResponseSizePreference() {
        return this.model
            ? this.model.property('legalEntityResponseSize', defaultProperties.legalEntityResponseSize)
            : of(defaultProperties.legalEntityResponseSize);
    }
    getShowWidgetHeaderPreference() {
        return this.model
            ? this.model
                .property('showWidgetHeader', JSON.stringify(defaultProperties.showWidgetHeader))
                .pipe(map((value) => !!value && value !== 'false'))
            : of(defaultProperties.showWidgetHeader);
    }
}
ManageProfilePreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePreferencesService, deps: [{ token: i1$1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManageProfilePreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class EditAddressComponent {
    constructor(manageProfilePreferencesService, cd, notificationService) {
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.close = new EventEmitter();
        this.closeAfterSave = new EventEmitter();
        this.isSubmitting = false;
        this.notificationDismissTimeSubject = new BehaviorSubject(undefined);
        this.dismissTimeoutPreferenceSubscription = combineLatest([
            this.notificationDismissTimeSubject.asObservable(),
            this.manageProfilePreferencesService.getNotificationDismissTimePreference(),
        ])
            .pipe(map(([input, preference]) => (input !== undefined ? input : preference * 1000)))
            .subscribe({
            next: (val) => (this.dismissTimeout = val),
        });
        this.handleUpdateResponse = () => (source) => source.pipe(tap(this.onFormSubmissionSuccessful), catchError(this.onFormSubmissionUnsuccessful), publish());
        this.handleDeleteResponse = () => (source) => source.pipe(tap(this.onDeletionSuccessful), catchError(this.onFormSubmissionUnsuccessful), publish());
        this.onFormSubmissionSuccessful = () => {
            this.isSubmitting = false;
            this.onSuccess(this.notificationUpdateSuccessTemplate);
        };
        this.onDeletionSuccessful = () => {
            this.isSubmitting = false;
            this.onSuccess(this.notificationDeleteSuccessTemplate);
        };
        this.onFormSubmissionUnsuccessful = () => {
            this.isSubmitting = false;
            this.notificationService.showNotification({
                message: this.notificationFailureTemplate,
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
            this.cd.markForCheck();
            return of(undefined);
        };
    }
    set notificationDismissTime(value) {
        this.notificationDismissTimeSubject.next(value);
    }
    handleCancelClick() {
        this.close.emit();
    }
    onSuccess(template) {
        this.notificationService.showNotification({
            message: template,
            modifier: 'success',
            ttl: this.dismissTimeout,
        });
        this.cd.markForCheck();
        this.closeAfterSave.emit();
    }
    ngOnDestroy() {
        this.dismissTimeoutPreferenceSubscription.unsubscribe();
    }
}
EditAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditAddressComponent, deps: [{ token: ManageProfilePreferencesService }, { token: i0.ChangeDetectorRef }, { token: i2$1.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
EditAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EditAddressComponent, selector: "ng-component", inputs: { notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close", closeAfterSave: "closeAfterSave" }, viewQueries: [{ propertyName: "notificationUpdateSuccessTemplate", first: true, predicate: ["notificationUpdateSuccess"], descendants: true }, { propertyName: "notificationDeleteSuccessTemplate", first: true, predicate: ["notificationDeleteSuccess"], descendants: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: ManageProfilePreferencesService }, { type: i0.ChangeDetectorRef }, { type: i2$1.NotificationService }]; }, propDecorators: { close: [{
                type: Output
            }], closeAfterSave: [{
                type: Output
            }], notificationUpdateSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationUpdateSuccess']
            }], notificationDeleteSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationDeleteSuccess']
            }], notificationFailureTemplate: [{
                type: ViewChild,
                args: ['notificationFailure']
            }], notificationDismissTime: [{
                type: Input
            }] } });

class EditEmailAddressComponent extends EditAddressComponent {
}
EditEmailAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditEmailAddressComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
EditEmailAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EditEmailAddressComponent, selector: "ng-component", inputs: { emailAddressTypes: "emailAddressTypes", emailAddressData: "emailAddressData", emailAddressCount: "emailAddressCount" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditEmailAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { emailAddressTypes: [{
                type: Input
            }], emailAddressData: [{
                type: Input
            }], emailAddressCount: [{
                type: Input
            }] } });

class ManageEmailAddressComponent {
    constructor() {
        this.updateProfile = new EventEmitter();
        this.manageEmail = new EventEmitter();
        this.cancelManageEmail = new EventEmitter();
        this.managingEmailAddress = false;
    }
    handleManageEmailAddress() {
        if (this.disableManage) {
            return;
        }
        this.managingEmailAddress = true;
        this.manageEmail.emit();
    }
    handleCloseEditEmailAddressAfterSave() {
        this.updateProfile.emit();
    }
    handleCloseEditEmailAddress() {
        this.managingEmailAddress = false;
        this.disableManage = false;
        this.cancelManageEmail.emit();
    }
}
ManageEmailAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageEmailAddressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManageEmailAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageEmailAddressComponent, selector: "ng-component", inputs: { electronicAddress: "electronicAddress", emailAddressCount: "emailAddressCount", emailAddressTypes: "emailAddressTypes", disableManage: "disableManage", dismissTimeout: "dismissTimeout" }, outputs: { updateProfile: "updateProfile", manageEmail: "manageEmail", cancelManageEmail: "cancelManageEmail" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageEmailAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { electronicAddress: [{
                type: Input
            }], emailAddressCount: [{
                type: Input
            }], emailAddressTypes: [{
                type: Input
            }], disableManage: [{
                type: Input
            }], dismissTimeout: [{
                type: Input
            }], updateProfile: [{
                type: Output
            }], manageEmail: [{
                type: Output
            }], cancelManageEmail: [{
                type: Output
            }] } });

class ManageEmailAddressesComponent {
    constructor() {
        this.updateProfile = new EventEmitter();
        this.manageEmail = new EventEmitter();
        this.cancelManageEmail = new EventEmitter();
        this.isManagingEmailAddressIndex = undefined;
        this.isAddingEmailAddress = false;
        this.isAddButtonAvailable = true;
    }
    ngOnInit() {
        if (this.emailAddresses && this.maxEmailAddresses) {
            this.isAddButtonAvailable = this.emailAddresses.length < this.maxEmailAddresses;
        }
    }
    handleManageEmailOpen(index) {
        this.isManagingEmailAddressIndex = index;
        this.manageEmail.emit();
    }
    handleManageEmailClosed() {
        this.isManagingEmailAddressIndex = undefined;
        this.isAddingEmailAddress = false;
        this.cancelManageEmail.emit();
    }
    handleAddNewEmailAddress() {
        if (this.disableManage) {
            return;
        }
        this.isAddingEmailAddress = true;
        this.manageEmail.emit();
    }
    updateUserProfileData() {
        this.updateProfile.emit();
    }
}
ManageEmailAddressesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageEmailAddressesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManageEmailAddressesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageEmailAddressesComponent, selector: "ng-component", inputs: { disableManage: "disableManage", emailAddresses: "emailAddresses", emailAddressTypes: "emailAddressTypes", maxEmailAddresses: "maxEmailAddresses", dismissTimeout: "dismissTimeout" }, outputs: { updateProfile: "updateProfile", manageEmail: "manageEmail", cancelManageEmail: "cancelManageEmail" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageEmailAddressesComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { disableManage: [{
                type: Input
            }], emailAddresses: [{
                type: Input
            }], emailAddressTypes: [{
                type: Input
            }], maxEmailAddresses: [{
                type: Input
            }], dismissTimeout: [{
                type: Input
            }], updateProfile: [{
                type: Output
            }], manageEmail: [{
                type: Output
            }], cancelManageEmail: [{
                type: Output
            }] } });

class NewAddressComponent {
    constructor(manageProfilePreferencesService, cd, notificationService) {
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.close = new EventEmitter();
        this.closeAfterSave = new EventEmitter();
        this.isSubmitting = false;
        this.notificationDismissTimeSubject = new BehaviorSubject(undefined);
        this.dismissTimeoutPreferenceSubscription = combineLatest([
            this.notificationDismissTimeSubject.asObservable(),
            this.manageProfilePreferencesService.getNotificationDismissTimePreference(),
        ])
            .pipe(map(([input, preference]) => (input !== undefined ? input : preference * 1000)))
            .subscribe({
            next: (val) => (this.dismissTimeout = val),
        });
        this.handleServiceResponse = () => (source) => source.pipe(tap(this.onFormSubmissionSuccessful), catchError(this.onFormSubmissionUnsuccessful), publish());
        this.onFormSubmissionSuccessful = () => {
            this.isSubmitting = false;
            this.notificationService.showNotification({
                message: this.notificationSuccessTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
            this.cd.markForCheck();
            this.closeAfterSave.emit();
        };
        this.onFormSubmissionUnsuccessful = () => {
            this.isSubmitting = false;
            this.notificationService.showNotification({
                message: this.notificationFailureTemplate,
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
            this.cd.markForCheck();
            return of(undefined);
        };
    }
    set notificationDismissTime(value) {
        this.notificationDismissTimeSubject.next(value);
    }
    handleCancelClick() {
        this.close.emit();
    }
    ngOnDestroy() {
        this.dismissTimeoutPreferenceSubscription.unsubscribe();
    }
}
NewAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewAddressComponent, deps: [{ token: ManageProfilePreferencesService }, { token: i0.ChangeDetectorRef }, { token: i2$1.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
NewAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: NewAddressComponent, selector: "ng-component", inputs: { notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close", closeAfterSave: "closeAfterSave" }, viewQueries: [{ propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: ManageProfilePreferencesService }, { type: i0.ChangeDetectorRef }, { type: i2$1.NotificationService }]; }, propDecorators: { close: [{
                type: Output
            }], closeAfterSave: [{
                type: Output
            }], notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess']
            }], notificationFailureTemplate: [{
                type: ViewChild,
                args: ['notificationFailure']
            }], notificationDismissTime: [{
                type: Input
            }] } });

class NewEmailAddressComponent extends NewAddressComponent {
    ngOnInit() {
        this.newEmailAddressData = {
            type: this.emailAddressTypes && this.emailAddressTypes.length ? this.emailAddressTypes[0] : '',
            address: '',
        };
    }
}
NewEmailAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewEmailAddressComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
NewEmailAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: NewEmailAddressComponent, selector: "ng-component", inputs: { emailAddressTypes: "emailAddressTypes" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewEmailAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { emailAddressTypes: [{
                type: Input
            }] } });

class EditPhoneNumberComponent extends EditAddressComponent {
}
EditPhoneNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditPhoneNumberComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
EditPhoneNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EditPhoneNumberComponent, selector: "ng-component", inputs: { phoneNumberTypes: "phoneNumberTypes", phoneNumberData: "phoneNumberData", phoneNumberCount: "phoneNumberCount" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditPhoneNumberComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { phoneNumberTypes: [{
                type: Input
            }], phoneNumberData: [{
                type: Input
            }], phoneNumberCount: [{
                type: Input
            }] } });

class ManagePhoneNumberComponent {
    constructor(manageProfilePreferencesService) {
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.updateProfile = new EventEmitter();
        this.managePhoneNumber = new EventEmitter();
        this.cancelManagePhoneNumber = new EventEmitter();
        this.managingPhoneNumber = false;
        /** @deprecated */
        this.phoneNumberPreferences = this.manageProfilePreferencesService.getPhoneNumberInputPreferences();
    }
    handleManagePhoneNumber() {
        if (this.disableManage) {
            return;
        }
        this.managingPhoneNumber = true;
        this.managePhoneNumber.emit();
    }
    handleCloseEditPhoneNumberAfterSave() {
        this.updateProfile.emit();
    }
    handleCloseEditPhoneNumber() {
        this.managingPhoneNumber = false;
        this.disableManage = false;
        this.cancelManagePhoneNumber.emit();
    }
}
ManagePhoneNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePhoneNumberComponent, deps: [{ token: ManageProfilePreferencesService }], target: i0.ɵɵFactoryTarget.Component });
ManagePhoneNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManagePhoneNumberComponent, selector: "ng-component", inputs: { phoneNumber: "phoneNumber", phoneNumberCount: "phoneNumberCount", phoneNumberTypes: "phoneNumberTypes", disableManage: "disableManage", dismissTimeout: "dismissTimeout" }, outputs: { updateProfile: "updateProfile", managePhoneNumber: "managePhoneNumber", cancelManagePhoneNumber: "cancelManagePhoneNumber" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePhoneNumberComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: ManageProfilePreferencesService }]; }, propDecorators: { phoneNumber: [{
                type: Input
            }], phoneNumberCount: [{
                type: Input
            }], phoneNumberTypes: [{
                type: Input
            }], disableManage: [{
                type: Input
            }], dismissTimeout: [{
                type: Input
            }], updateProfile: [{
                type: Output
            }], managePhoneNumber: [{
                type: Output
            }], cancelManagePhoneNumber: [{
                type: Output
            }] } });

class ManagePhoneNumbersComponent {
    constructor() {
        this.updateProfile = new EventEmitter();
        this.managePhoneNumber = new EventEmitter();
        this.cancelManagePhoneNumber = new EventEmitter();
        this.isManagingPhoneNumberIndex = undefined;
        this.isAddingPhoneNumber = false;
        this.isAddButtonAvailable = true;
    }
    ngOnInit() {
        if (this.phoneNumbers && this.maxPhoneNumbers) {
            this.isAddButtonAvailable = this.phoneNumbers.length < this.maxPhoneNumbers;
        }
    }
    handleManagePhoneNumberOpen(index) {
        this.isManagingPhoneNumberIndex = index;
        this.managePhoneNumber.emit();
    }
    handleAddNewPhoneNumber() {
        if (this.disableManage) {
            return;
        }
        this.isAddingPhoneNumber = true;
        this.managePhoneNumber.emit();
    }
    handleManagePhoneNumberClosed() {
        this.isManagingPhoneNumberIndex = undefined;
        this.isAddingPhoneNumber = false;
        this.cancelManagePhoneNumber.emit();
    }
    updateUserProfileData() {
        this.updateProfile.emit();
    }
}
ManagePhoneNumbersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePhoneNumbersComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePhoneNumbersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManagePhoneNumbersComponent, selector: "ng-component", inputs: { phoneNumbers: "phoneNumbers", phoneNumberTypes: "phoneNumberTypes", maxPhoneNumbers: "maxPhoneNumbers", disableManage: "disableManage", dismissTimeout: "dismissTimeout" }, outputs: { updateProfile: "updateProfile", managePhoneNumber: "managePhoneNumber", cancelManagePhoneNumber: "cancelManagePhoneNumber" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePhoneNumbersComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { phoneNumbers: [{
                type: Input
            }], phoneNumberTypes: [{
                type: Input
            }], maxPhoneNumbers: [{
                type: Input
            }], disableManage: [{
                type: Input
            }], dismissTimeout: [{
                type: Input
            }], updateProfile: [{
                type: Output
            }], managePhoneNumber: [{
                type: Output
            }], cancelManagePhoneNumber: [{
                type: Output
            }] } });

class NewPhoneNumberComponent extends NewAddressComponent {
    ngOnInit() {
        this.newPhoneNumberData = {
            type: this.phoneNumberTypes && this.phoneNumberTypes.length ? this.phoneNumberTypes[0] : '',
            number: '',
        };
    }
}
NewPhoneNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewPhoneNumberComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
NewPhoneNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: NewPhoneNumberComponent, selector: "ng-component", inputs: { phoneNumberTypes: "phoneNumberTypes" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewPhoneNumberComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { phoneNumberTypes: [{
                type: Input
            }] } });

class EditPostalAddressComponent extends EditAddressComponent {
}
EditPostalAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditPostalAddressComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
EditPostalAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EditPostalAddressComponent, selector: "ng-component", inputs: { postalAddressTypes: "postalAddressTypes", postalAddressData: "postalAddressData", postalAddressCount: "postalAddressCount" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditPostalAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { postalAddressTypes: [{
                type: Input
            }], postalAddressData: [{
                type: Input
            }], postalAddressCount: [{
                type: Input
            }] } });

class ManagePostalAddressComponent {
    constructor() {
        this.updateProfile = new EventEmitter();
        this.managePostalAddress = new EventEmitter();
        this.cancelManagePostalAddress = new EventEmitter();
        this.managingPostalAddress = false;
    }
    handleManagePostalAddress() {
        if (this.disableManage) {
            return;
        }
        this.managingPostalAddress = true;
        this.managePostalAddress.emit();
    }
    handleCloseEditPostalAddressAfterSave() {
        this.updateProfile.emit();
    }
    handleCloseEditPostalAddress() {
        this.managingPostalAddress = false;
        this.disableManage = false;
        this.cancelManagePostalAddress.emit();
    }
}
ManagePostalAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePostalAddressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePostalAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManagePostalAddressComponent, selector: "ng-component", inputs: { postalAddress: "postalAddress", postalAddressCount: "postalAddressCount", postalAddressTypes: "postalAddressTypes", disableManage: "disableManage", dismissTimeout: "dismissTimeout" }, outputs: { updateProfile: "updateProfile", managePostalAddress: "managePostalAddress", cancelManagePostalAddress: "cancelManagePostalAddress" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePostalAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { postalAddress: [{
                type: Input
            }], postalAddressCount: [{
                type: Input
            }], postalAddressTypes: [{
                type: Input
            }], disableManage: [{
                type: Input
            }], dismissTimeout: [{
                type: Input
            }], updateProfile: [{
                type: Output
            }], managePostalAddress: [{
                type: Output
            }], cancelManagePostalAddress: [{
                type: Output
            }] } });

class ManagePostalAddressesComponent {
    constructor() {
        this.updateProfile = new EventEmitter();
        this.managePostalAddress = new EventEmitter();
        this.cancelManagePostalAddress = new EventEmitter();
        this.isManagingPostalAddressIndex = undefined;
        this.isAddingPostalAddress = false;
        this.isAddButtonAvailable = true;
    }
    ngOnInit() {
        if (this.postalAddresses && this.maxPostalAddresses) {
            this.isAddButtonAvailable = this.postalAddresses.length < this.maxPostalAddresses;
        }
    }
    handleManagePostalAddressOpen(index) {
        this.isManagingPostalAddressIndex = index;
        this.managePostalAddress.emit();
    }
    handleAddNewPostalAddress() {
        if (this.disableManage) {
            return;
        }
        this.isAddingPostalAddress = true;
        this.managePostalAddress.emit();
    }
    handleManagePostalAddressClosed() {
        this.isManagingPostalAddressIndex = undefined;
        this.isAddingPostalAddress = false;
        this.cancelManagePostalAddress.emit();
    }
    updateUserProfileData() {
        this.updateProfile.emit();
    }
}
ManagePostalAddressesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePostalAddressesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManagePostalAddressesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManagePostalAddressesComponent, selector: "ng-component", inputs: { postalAddresses: "postalAddresses", postalAddressTypes: "postalAddressTypes", maxPostalAddresses: "maxPostalAddresses", disableManage: "disableManage", dismissTimeout: "dismissTimeout" }, outputs: { updateProfile: "updateProfile", managePostalAddress: "managePostalAddress", cancelManagePostalAddress: "cancelManagePostalAddress" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManagePostalAddressesComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { postalAddresses: [{
                type: Input
            }], postalAddressTypes: [{
                type: Input
            }], maxPostalAddresses: [{
                type: Input
            }], disableManage: [{
                type: Input
            }], dismissTimeout: [{
                type: Input
            }], updateProfile: [{
                type: Output
            }], managePostalAddress: [{
                type: Output
            }], cancelManagePostalAddress: [{
                type: Output
            }] } });

class NewPostalAddressComponent extends NewAddressComponent {
    ngOnInit() {
        this.newPostalAddressData = {
            type: this.postalAddressTypes && this.postalAddressTypes.length ? this.postalAddressTypes[0] : '',
        };
    }
}
NewPostalAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewPostalAddressComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
NewPostalAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: NewPostalAddressComponent, selector: "ng-component", inputs: { postalAddressTypes: "postalAddressTypes" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewPostalAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { postalAddressTypes: [{
                type: Input
            }] } });

class ManageProfileFormComponent {
    constructor() {
        /**
         * Whether the form is being submitted.
         * Defaults to false.
         */
        this.isSubmitting = false;
        this.cancel = new EventEmitter();
        this.delete = new EventEmitter();
        this.save = new EventEmitter();
        this.showFormErrors = false;
        this.showDeleteButton = false;
        this.isCancelModalOpen = false;
        this.isDeleteModalOpen = false;
        this.hasBeenSubmitted = false;
    }
    ngOnInit() {
        if (this.data.key) {
            this.showDeleteButton = !!(this.count && this.count > 1);
        }
        this.createForm();
    }
    get form() {
        if (!this.formData) {
            throw new Error('formData is not defined');
        }
        return this.formData;
    }
    handleSubmit() {
        this.hasBeenSubmitted = true;
        this.markFormAsTouched();
        this.showErrorsOnForm();
        if (!this.form.valid) {
            return;
        }
        this.form.updateValueAndValidity();
        this.save.emit(this.form.value);
    }
    handleCancelClick() {
        if (this.form.touched) {
            this.isCancelModalOpen = true;
        }
        else {
            this.cancel.emit();
        }
    }
    closeCancelModal() {
        this.isCancelModalOpen = false;
        this.cancel.emit();
    }
    dismissCancelModal() {
        this.isCancelModalOpen = false;
        this.markFormAsTouched();
        this.showErrorsOnForm();
    }
    handleDelete() {
        this.isDeleteModalOpen = true;
    }
    closeDeleteModal() {
        this.isDeleteModalOpen = false;
        this.delete.emit(this.form.value);
    }
    dismissDeleteModal() {
        this.isDeleteModalOpen = false;
        this.markFormAsTouched();
        this.showErrorsOnForm();
    }
    showErrorsOnForm() {
        this.showFormErrors = !this.form.valid;
    }
    markFormAsTouched() { }
    createForm() { }
}
ManageProfileFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileFormComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManageProfileFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageProfileFormComponent, selector: "ng-component", inputs: { types: "types", data: "data", count: "count", isSubmitting: "isSubmitting" }, outputs: { cancel: "cancel", delete: "delete", save: "save" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileFormComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { types: [{
                type: Input
            }], data: [{
                type: Input
            }], count: [{
                type: Input
            }], isSubmitting: [{
                type: Input
            }], cancel: [{
                type: Output
            }], delete: [{
                type: Output
            }], save: [{
                type: Output
            }] } });

class ManageProfileEmailAddressFormComponent extends ManageProfileFormComponent {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
    }
    markFormAsTouched() {
        this.form.controls.type.markAsTouched();
        this.form.controls.address.markAsTouched();
        this.form.controls.primary.markAsTouched();
    }
    createForm() {
        const { key, type, address, primary } = this.data;
        this.formData = this.formBuilder.group({
            key,
            type: [type, Validators.required],
            address: [address, Validators.required],
            primary,
        });
    }
}
ManageProfileEmailAddressFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileEmailAddressFormComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ManageProfileEmailAddressFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageProfileEmailAddressFormComponent, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileEmailAddressFormComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class ManageProfilePhoneNumberFormComponent extends ManageProfileFormComponent {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
    }
    markFormAsTouched() {
        this.form.controls.type.markAsTouched();
        this.form.controls.number.markAsTouched();
        this.form.controls.primary.markAsTouched();
    }
    createForm() {
        const { key, type, number, primary } = this.data;
        this.formData = this.formBuilder.group({
            key,
            type: [type, Validators.required],
            number: [number, Validators.required],
            primary,
        });
    }
}
ManageProfilePhoneNumberFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePhoneNumberFormComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ManageProfilePhoneNumberFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageProfilePhoneNumberFormComponent, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePhoneNumberFormComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class ManageProfilePostalAddressFormComponent extends ManageProfileFormComponent {
    constructor(formBuilder) {
        super();
        this.formBuilder = formBuilder;
    }
    markFormAsTouched() {
        this.form.controls.type.markAsTouched();
        this.form.controls.primary.markAsTouched();
        this.form.controls.buildingNumber.markAsTouched();
        this.form.controls.streetName.markAsTouched();
        this.form.controls.townName.markAsTouched();
        this.form.controls.postalCode.markAsTouched();
        this.form.controls.countrySubDivision.markAsTouched();
    }
    createForm() {
        const { key, type, primary, buildingNumber, streetName, townName, postalCode, countrySubDivision } = this
            .data;
        this.formData = this.formBuilder.group({
            key,
            type: [type, Validators.required],
            primary,
            buildingNumber: [buildingNumber, Validators.required],
            streetName,
            townName: [townName, Validators.required],
            postalCode: [postalCode, Validators.required],
            countrySubDivision: [countrySubDivision, Validators.required],
        });
    }
}
ManageProfilePostalAddressFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePostalAddressFormComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ManageProfilePostalAddressFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageProfilePostalAddressFormComponent, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePostalAddressFormComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class ManageProfileComponent {
    constructor(manageProfilePreferencesService, cd) {
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.cd = cd;
        this.loadingState = true;
        this.loadingErrorState = false;
        this.disableAddressManaging = false;
        /** @deprecated */
        this.widgetPreferences = this.manageProfilePreferencesService.getWidgetPreferences();
        this.userProfileSubject = new BehaviorSubject(undefined);
        this.handleProfileError = (error) => {
            this.loadingState = false;
            this.loadingErrorState = true;
            this.loadingError = error;
            this.cd.markForCheck();
            return new Observable();
        };
        this.onProfileUpdate = () => {
            this.loadingState = true;
            this.loadingError = undefined;
        };
    }
    refreshProfileData() {
        this.handleManageAddressClose();
        this.userProfileSubject.next(undefined);
    }
    handleManageAddressOpen() {
        this.disableAddressManaging = true;
    }
    handleManageAddressClose() {
        this.disableAddressManaging = false;
    }
    setUserProfileObservable() {
        return this.userProfileSubject.asObservable().pipe(map(() => ({
            fullName: '',
        })));
    }
    ngOnInit() {
        this.userProfileObservable = this.setUserProfileObservable();
        this.userProfileSubscription = this.userProfileObservable.subscribe((userProfileData) => {
            this.userProfile = userProfileData;
            this.loadingState = false;
            this.loadingErrorState = false;
            this.cd.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this.userProfileSubscription) {
            this.userProfileSubscription.unsubscribe();
        }
    }
}
ManageProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileComponent, deps: [{ token: ManageProfilePreferencesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ManageProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageProfileComponent, selector: "ng-component", inputs: { notificationDismissTime: "notificationDismissTime" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: ManageProfilePreferencesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { notificationDismissTime: [{
                type: Input
            }] } });

// eslint-disable-next-line @angular-eslint/directive-class-suffix
class PhoneNumberInputBase extends InputBase {
    constructor(manageProfilePreferencesService, phoneNumberFormatter) {
        super();
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.phoneNumberFormatter = phoneNumberFormatter;
        this.phoneNumberPreferencesSubscription = this.manageProfilePreferencesService
            .getPhoneNumberInputPreferences()
            .subscribe((preferences) => {
            if (preferences) {
                this.preferences = preferences;
                this.preferences.debounceTime = this.preferences.debounceTime * 1000;
            }
        });
    }
    // eslint-disable-next-line complexity
    ngOnInit() {
        if (this.enablePhoneNumberFormatter && this.phoneNumberDebounceTime === undefined) {
            throw new Error(`phoneNumberDebounceTime is required when enablePhoneNumberFormatter is true`);
        }
        if (this.enablePhoneNumberFormatter && this.phoneNumberCountryCode === undefined) {
            throw new Error(`phoneNumberCountryCode is required when enablePhoneNumberFormatter is true`);
        }
        if (this.enablePhoneNumberFormatter !== false) {
            if (this.enablePhoneNumberFormatter || (this.preferences || {}).enablePhoneNumberFormatter) {
                this.phoneNumberSubscription = this.fieldControl.valueChanges
                    .pipe(distinctUntilChanged(), debounceTime((this.phoneNumberDebounceTime && this.phoneNumberDebounceTime * 1000) || this.preference.debounceTime))
                    .subscribe((value) => {
                    value = this.phoneNumberFormatter.transform(value, this.phoneNumberCountryCode || this.preference.countryCode, true);
                    this.fieldControl.setValue(value);
                });
            }
        }
    }
    get preference() {
        if (!this.preferences) {
            throw new Error('preferences are not defined');
        }
        return this.preferences;
    }
    ngOnDestroy() {
        this.phoneNumberPreferencesSubscription.unsubscribe();
        if (this.phoneNumberSubscription) {
            this.phoneNumberSubscription.unsubscribe();
        }
    }
}
PhoneNumberInputBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PhoneNumberInputBase, deps: [{ token: ManageProfilePreferencesService }, { token: i2$2.PhoneNumberPipe }], target: i0.ɵɵFactoryTarget.Directive });
PhoneNumberInputBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PhoneNumberInputBase, selector: "[bbUserPhoneNumberInputBase]", inputs: { phoneNumberCountryCode: "phoneNumberCountryCode", phoneNumberDebounceTime: "phoneNumberDebounceTime", enablePhoneNumberFormatter: "enablePhoneNumberFormatter" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PhoneNumberInputBase, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserPhoneNumberInputBase]',
                }]
        }], ctorParameters: function () { return [{ type: ManageProfilePreferencesService }, { type: i2$2.PhoneNumberPipe }]; }, propDecorators: { phoneNumberCountryCode: [{
                type: Input
            }], phoneNumberDebounceTime: [{
                type: Input
            }], enablePhoneNumberFormatter: [{
                type: Input
            }] } });

const components = [
    EditAddressComponent,
    EditEmailAddressComponent,
    EditPhoneNumberComponent,
    EditPostalAddressComponent,
    InputBase,
    ManageEmailAddressesComponent,
    ManageEmailAddressComponent,
    ManagePhoneNumbersComponent,
    ManagePhoneNumberComponent,
    ManagePostalAddressesComponent,
    ManagePostalAddressComponent,
    ManageProfileComponent,
    ManageProfileComponent,
    ManageProfileFormComponent,
    ManageProfileEmailAddressFormComponent,
    ManageProfilePhoneNumberFormComponent,
    ManageProfilePostalAddressFormComponent,
    NewAddressComponent,
    NewEmailAddressComponent,
    NewPhoneNumberComponent,
    NewPostalAddressComponent,
    PhoneNumberInputBase,
];
class UserCommonModule {
}
UserCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
UserCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserCommonModule, declarations: [EditAddressComponent,
        EditEmailAddressComponent,
        EditPhoneNumberComponent,
        EditPostalAddressComponent,
        InputBase,
        ManageEmailAddressesComponent,
        ManageEmailAddressComponent,
        ManagePhoneNumbersComponent,
        ManagePhoneNumberComponent,
        ManagePostalAddressesComponent,
        ManagePostalAddressComponent,
        ManageProfileComponent,
        ManageProfileComponent,
        ManageProfileFormComponent,
        ManageProfileEmailAddressFormComponent,
        ManageProfilePhoneNumberFormComponent,
        ManageProfilePostalAddressFormComponent,
        NewAddressComponent,
        NewEmailAddressComponent,
        NewPhoneNumberComponent,
        NewPostalAddressComponent,
        PhoneNumberInputBase], imports: [CommonModule], exports: [EditAddressComponent,
        EditEmailAddressComponent,
        EditPhoneNumberComponent,
        EditPostalAddressComponent,
        InputBase,
        ManageEmailAddressesComponent,
        ManageEmailAddressComponent,
        ManagePhoneNumbersComponent,
        ManagePhoneNumberComponent,
        ManagePostalAddressesComponent,
        ManagePostalAddressComponent,
        ManageProfileComponent,
        ManageProfileComponent,
        ManageProfileFormComponent,
        ManageProfileEmailAddressFormComponent,
        ManageProfilePhoneNumberFormComponent,
        ManageProfilePostalAddressFormComponent,
        NewAddressComponent,
        NewEmailAddressComponent,
        NewPhoneNumberComponent,
        NewPostalAddressComponent,
        PhoneNumberInputBase] });
UserCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserCommonModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [...components],
                    exports: [...components],
                }]
        }] });

class IdGeneratorService {
    generateId(elementKey) {
        return `${elementKey}-${Math.random().toString(36).substring(2, 9)}`;
    }
}
IdGeneratorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdGeneratorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
IdGeneratorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdGeneratorService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: IdGeneratorService, decorators: [{
            type: Injectable
        }] });

class LegalEntityDataService {
    constructor(legalEntityData) {
        this.legalEntityData = legalEntityData;
    }
    getLegalentitiesSubEntities(searchSubEntitiesParameters) {
        return this.legalEntityData.postSubEntities({ searchSubEntitiesParameters });
    }
}
LegalEntityDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LegalEntityDataService, deps: [{ token: i1$3.LegalEntitiesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
LegalEntityDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LegalEntityDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LegalEntityDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.LegalEntitiesHttpService }]; } });

class ManageProfileService {
    constructor() {
        this.sortUserContactListsByPrimary = (profile) => {
            this.sortListByPrimary(profile['electronic-addresses']);
            this.sortListByPrimary(profile['phone-addresses']);
            this.sortListByPrimary(profile['postal-addresses']);
            return profile;
        };
    }
    sortListByPrimary(list) {
        if (list) {
            list.sort((a, b) => {
                if (a.primary === b.primary) {
                    return 0;
                }
                return a.primary ? -1 : 1;
            });
        }
    }
}
ManageProfileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ManageProfileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileService, decorators: [{
            type: Injectable
        }] });

class UserDataService {
    constructor(userManagementService, identityManagementService) {
        this.userManagementService = userManagementService;
        this.identityManagementService = identityManagementService;
    }
    checkUsernameAvailability(externalId) {
        return this.userManagementService.checkUserExists({ externalId }, 'response').pipe(map(this.isNotFound), catchError((error) => of(this.isNotFound(error))));
    }
    createUser(createIdentityRequest) {
        return this.identityManagementService.createIdentity({ createIdentityRequest });
    }
    getPendingApprovalsByInternalIdAndType(internalId, type) {
        return this.getPendingApprovalsByInternalId(internalId).pipe(map((approvals) => approvals.filter((approval) => approval.type === type)));
    }
    getPendingApprovalsByInternalId(internalId) {
        return this.identityManagementService.getIdentityPendingApprovals({ internalId });
    }
    getUsersIdentitiesSessionsByInternalId(internalId) {
        return this.identityManagementService.getSessions({ internalId });
    }
    updateUsersIdentitiesSessionsLogoutRecordByInternalId(internalId, sessionIds = []) {
        return this.identityManagementService.logoutSessions({
            internalId,
            identityLogoutRequest: { sessionIds },
        });
    }
    updateUserActions(internalId, actions) {
        return this.identityManagementService.sendRequiredActions({
            internalId,
            identityRequiredActionsRequest: { actions },
        });
    }
    updateUserRecordActions(internalId, updateIdentityRequest) {
        return this.identityManagementService.updateIdentity({
            internalId,
            updateIdentityRequest,
        });
    }
    changeUserPassword(existingPassword, newPassword) {
        return this.identityManagementService.changePassword({
            changePasswordRequest: {
                existingPassword,
                newPassword,
            },
        });
    }
    getUserDetails(internalId) {
        return this.identityManagementService.getIdentity({ internalId });
    }
    isNotFound(response) {
        return response.status === 404;
    }
}
UserDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDataService, deps: [{ token: i1$4.UserManagementService }, { token: i1$4.IdentityManagementService }], target: i0.ɵɵFactoryTarget.Injectable });
UserDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$4.UserManagementService }, { type: i1$4.IdentityManagementService }]; } });

class UserRouterService {
    constructor(route) {
        this.route = route;
        this.userId = this.getRouteParam(this.route, 'userId');
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // Ensure that level that has actual value keeps it from being cleared.
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map((params) => params[0] || params[1]));
    }
}
UserRouterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserRouterService, deps: [{ token: i1$5.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });
UserRouterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserRouterService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserRouterService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$5.ActivatedRoute }]; } });

class UtilityService {
    getBody(data) {
        if (!data.body) {
            throw new Error('No body found in resource');
        }
        return data.body;
    }
}
UtilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UtilityService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
UtilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UtilityService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UtilityService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

/**
 * Details the allowed actions that can be set on the user
 */
var UserActions;
(function (UserActions) {
    UserActions["updatePassword"] = "UPDATE_PASSWORD";
    UserActions["verifyEmail"] = "VERIFY_EMAIL";
    UserActions["updateProfile"] = "UPDATE_PROFILE";
    UserActions["configureTotp"] = "CONFIGURE_TOTP";
    UserActions["acceptTermsAndConditions"] = "ACCEPT_TERMS_AND_CONDITIONS";
})(UserActions || (UserActions = {}));

var ApprovalType;
(function (ApprovalType) {
    ApprovalType["UNLOCK"] = "UNLOCK";
})(ApprovalType || (ApprovalType = {}));

var UserStatus;
(function (UserStatus) {
    UserStatus["ENABLED"] = "ENABLED";
    UserStatus["DISABLED"] = "DISABLED";
    UserStatus["LOCKED"] = "TEMPORARILY_LOCKED";
    UserStatus["DORMANT"] = "DORMANT";
    UserStatus["INACTIVE"] = "INACTIVE";
    UserStatus["ACCESS_REVOKED"] = "ACCESS_REVOKED";
})(UserStatus || (UserStatus = {}));

const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));
const convertCommaSeparatedStringToStringArray = (value) => value ? value.split(',').map((arrayItem) => arrayItem.trim()) : [];

// Services

/**
 * Generated bundle index. Do not edit.
 */

export { ApprovalType, CancelModalModule, EditEmailAddressComponent, EditPhoneNumberComponent, EditPostalAddressComponent, IdGeneratorService, InputBase, LegalEntityDataService, ManageEmailAddressComponent, ManageEmailAddressesComponent, ManagePhoneNumberComponent, ManagePhoneNumbersComponent, ManagePostalAddressComponent, ManagePostalAddressesComponent, ManageProfileComponent, ManageProfileEmailAddressFormComponent, ManageProfilePhoneNumberFormComponent, ManageProfilePostalAddressFormComponent, ManageProfilePreferencesService, ManageProfileService, NewEmailAddressComponent, NewPhoneNumberComponent, NewPostalAddressComponent, PhoneNumberInputBase, UserActions, UserCommonModule, UserDataService, UserRouterService, UserStatus, UtilityService, convertCommaSeparatedStringToStringArray, filterInputParameters, CancelModalComponent as ӨCancelModalComponent, EditAddressComponent as ӨEditAddressComponent, ManageProfileFormComponent as ӨManageProfileFormComponent, NewAddressComponent as ӨNewAddressComponent };
//# sourceMappingURL=backbase-user-common.js.map
