import { Injectable, Optional } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
const defaultProperties = {
    notificationDismissTime: 3,
    enablePhoneNumberFormatter: true,
    phoneNumberCountryCode: 'CA',
    phoneNumberDebounceTime: 1,
    lockUnlockUserAccountCommentRequired: false,
    emailAddressTypes: [''],
    postalAddressTypes: [''],
    phoneNumberTypes: [''],
    maxEmailAddresses: 3,
    maxPhoneNumbers: 3,
    maxPostalAddresses: 3,
    legalEntityDebounceTime: 1,
    usernameDebounceTime: 1,
    requiredUserActionsDebounceTime: 1,
    legalEntityResponseSize: 5,
    showWidgetHeader: true,
};
export class ManageProfilePreferencesService {
    constructor(model) {
        this.model = model;
    }
    getPhoneNumberInputPreferences() {
        return combineLatest([
            this.getPhoneNumberDebounceTimePreference(),
            this.getPhoneNumberCountryCodePreference(),
            this.getPhoneNumberFormatPreference(),
        ]).pipe(map(([debounceTime, countryCode, enablePhoneNumberFormatter]) => ({
            debounceTime,
            countryCode,
            enablePhoneNumberFormatter,
        })));
    }
    getPhoneNumberDebounceTimePreference() {
        return this.model
            ? this.model.property('phoneNumberDebounceTime', defaultProperties.phoneNumberDebounceTime)
            : of(defaultProperties.phoneNumberDebounceTime);
    }
    getPhoneNumberCountryCodePreference() {
        return this.model ? this.model.property('phoneNumberCountryCode', 'CA') : of('CA');
    }
    getPhoneNumberFormatPreference() {
        return this.model
            ? this.model
                .property('enablePhoneNumberFormatter', JSON.stringify(defaultProperties.enablePhoneNumberFormatter))
                .pipe(map((value) => value === 'true'))
            : of(defaultProperties.enablePhoneNumberFormatter);
    }
    getNotificationDismissTimePreference() {
        return this.model
            ? this.model.property('notificationDismissTime', defaultProperties.notificationDismissTime)
            : of(defaultProperties.notificationDismissTime);
    }
    getLockUnlockAccountCommentRequiredPreference() {
        return this.model
            ? this.model.property('lockUnlockUserAccountCommentRequired', defaultProperties.lockUnlockUserAccountCommentRequired)
            : of(defaultProperties.lockUnlockUserAccountCommentRequired);
    }
    getWidgetPreferences() {
        const preferenceObservables = [
            this.getEmailAddressTypePreferences(),
            this.getPostalAddressTypePreferences(),
            this.getPhoneNumberTypePreferences(),
            this.getMaxEmailAddressesPreference(),
            this.getMaxPhoneNumbersPreference(),
            this.getMaxPostalAddressesPreference(),
            this.getShowWidgetHeaderPreference(),
        ];
        return combineLatest(preferenceObservables).pipe(map(([emailAddressTypes, postalAddressTypes, phoneNumberTypes, maxEmailAddresses, maxPhoneNumbers, maxPostalAddresses, showWidgetHeader,]) => ({
            emailAddressTypes,
            postalAddressTypes,
            phoneNumberTypes,
            maxEmailAddresses,
            maxPhoneNumbers,
            maxPostalAddresses,
            showWidgetHeader,
        })));
    }
    getEmailAddressTypePreferences() {
        return this.getModelToSeparatedStringArray('emailAddressTypes');
    }
    getPostalAddressTypePreferences() {
        return this.getModelToSeparatedStringArray('postalAddressTypes');
    }
    getPhoneNumberTypePreferences() {
        return this.getModelToSeparatedStringArray('phoneNumberTypes');
    }
    getModelToSeparatedStringArray(modelName) {
        return this.model
            ? this.model.property(modelName, '').pipe(map(this.convertCommaSeparatedStringToStringArray))
            : of(defaultProperties[modelName]);
    }
    convertCommaSeparatedStringToStringArray(value) {
        return value ? value.split(',').map((arrayItem) => arrayItem.trim()) : [];
    }
    getMaxEmailAddressesPreference() {
        return this.model
            ? this.model.property('maxEmailAddresses', defaultProperties.maxEmailAddresses)
            : of(defaultProperties.maxEmailAddresses);
    }
    getMaxPhoneNumbersPreference() {
        return this.model
            ? this.model.property('maxPhoneNumbers', defaultProperties.maxPhoneNumbers)
            : of(defaultProperties.maxPhoneNumbers);
    }
    getMaxPostalAddressesPreference() {
        return this.model
            ? this.model.property('maxPostalAddresses', defaultProperties.maxPostalAddresses)
            : of(defaultProperties.maxPostalAddresses);
    }
    getLegalEntityDebouncePreference() {
        return this.model
            ? this.model.property('legalEntityDebounceTime', defaultProperties.legalEntityDebounceTime)
            : of(defaultProperties.legalEntityDebounceTime);
    }
    getUsernameDebouncePreference() {
        return this.model
            ? this.model.property('usernameDebounceTime', defaultProperties.usernameDebounceTime)
            : of(defaultProperties.usernameDebounceTime);
    }
    getRequiredUserActionsDebouncePreference() {
        return this.model
            ? this.model.property('requiredUserActionsDebounceTime', defaultProperties.requiredUserActionsDebounceTime)
            : of(defaultProperties.requiredUserActionsDebounceTime);
    }
    getLegalEntityResponseSizePreference() {
        return this.model
            ? this.model.property('legalEntityResponseSize', defaultProperties.legalEntityResponseSize)
            : of(defaultProperties.legalEntityResponseSize);
    }
    getShowWidgetHeaderPreference() {
        return this.model
            ? this.model
                .property('showWidgetHeader', JSON.stringify(defaultProperties.showWidgetHeader))
                .pipe(map((value) => !!value && value !== 'false'))
            : of(defaultProperties.showWidgetHeader);
    }
}
ManageProfilePreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePreferencesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManageProfilePreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfilePreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,