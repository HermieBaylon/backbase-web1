import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/user";
export class UserDataService {
    constructor(userManagementService, identityManagementService) {
        this.userManagementService = userManagementService;
        this.identityManagementService = identityManagementService;
    }
    checkUsernameAvailability(externalId) {
        return this.userManagementService.checkUserExists({ externalId }, 'response').pipe(map(this.isNotFound), catchError((error) => of(this.isNotFound(error))));
    }
    createUser(createIdentityRequest) {
        return this.identityManagementService.createIdentity({ createIdentityRequest });
    }
    getPendingApprovalsByInternalIdAndType(internalId, type) {
        return this.getPendingApprovalsByInternalId(internalId).pipe(map((approvals) => approvals.filter((approval) => approval.type === type)));
    }
    getPendingApprovalsByInternalId(internalId) {
        return this.identityManagementService.getIdentityPendingApprovals({ internalId });
    }
    getUsersIdentitiesSessionsByInternalId(internalId) {
        return this.identityManagementService.getSessions({ internalId });
    }
    updateUsersIdentitiesSessionsLogoutRecordByInternalId(internalId, sessionIds = []) {
        return this.identityManagementService.logoutSessions({
            internalId,
            identityLogoutRequest: { sessionIds },
        });
    }
    updateUserActions(internalId, actions) {
        return this.identityManagementService.sendRequiredActions({
            internalId,
            identityRequiredActionsRequest: { actions },
        });
    }
    updateUserRecordActions(internalId, updateIdentityRequest) {
        return this.identityManagementService.updateIdentity({
            internalId,
            updateIdentityRequest,
        });
    }
    changeUserPassword(existingPassword, newPassword) {
        return this.identityManagementService.changePassword({
            changePasswordRequest: {
                existingPassword,
                newPassword,
            },
        });
    }
    getUserDetails(internalId) {
        return this.identityManagementService.getIdentity({ internalId });
    }
    isNotFound(response) {
        return response.status === 404;
    }
}
UserDataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDataService, deps: [{ token: i1.UserManagementService }, { token: i1.IdentityManagementService }], target: i0.ɵɵFactoryTarget.Injectable });
UserDataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDataService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserDataService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserManagementService }, { type: i1.IdentityManagementService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VzZXItY29tbW9uL3NyYy9zZXJ2aWNlcy91c2VyLWRhdGEvdXNlci1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVczQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUtqRCxNQUFNLE9BQU8sZUFBZTtJQUMxQixZQUNtQixxQkFBNEMsRUFDNUMseUJBQW9EO1FBRHBELDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtJQUNwRSxDQUFDO0lBRUoseUJBQXlCLENBQUMsVUFBa0I7UUFDMUMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLEVBQUUsVUFBVSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNoRixHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUNwQixVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDbEQsQ0FBQztJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMscUJBQTRDO1FBQ3JELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBRUQsc0NBQXNDLENBQUMsVUFBa0IsRUFBRSxJQUFrQjtRQUMzRSxPQUFPLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQzFELEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUMzRSxDQUFDO0lBQ0osQ0FBQztJQUVELCtCQUErQixDQUFDLFVBQWtCO1FBQ2hELE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLDJCQUEyQixDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQsc0NBQXNDLENBQUMsVUFBa0I7UUFDdkQsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQscURBQXFELENBQUMsVUFBa0IsRUFBRSxhQUE0QixFQUFFO1FBQ3RHLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQztZQUNuRCxVQUFVO1lBQ1YscUJBQXFCLEVBQUUsRUFBRSxVQUFVLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGlCQUFpQixDQUFDLFVBQWtCLEVBQUUsT0FBc0I7UUFDMUQsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsbUJBQW1CLENBQUM7WUFDeEQsVUFBVTtZQUNWLDhCQUE4QixFQUFFLEVBQUUsT0FBTyxFQUFFO1NBQzVDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxVQUFrQixFQUFFLHFCQUE0QztRQUN0RixPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUM7WUFDbkQsVUFBVTtZQUNWLHFCQUFxQjtTQUN0QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsa0JBQWtCLENBQUMsZ0JBQXdCLEVBQUUsV0FBbUI7UUFDOUQsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxDQUFDO1lBQ25ELHFCQUFxQixFQUFFO2dCQUNyQixnQkFBZ0I7Z0JBQ2hCLFdBQVc7YUFDWjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxjQUFjLENBQUMsVUFBa0I7UUFDL0IsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRU8sVUFBVSxDQUFDLFFBQTJCO1FBQzVDLE9BQU8sUUFBUSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUM7SUFDakMsQ0FBQzs7NkdBbkVVLGVBQWU7aUhBQWYsZUFBZTs0RkFBZixlQUFlO2tCQUQzQixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ3JlYXRlSWRlbnRpdHlSZXF1ZXN0LFxuICBDcmVhdGVJZGVudGl0eVJlc3BvbnNlLFxuICBHZXRJZGVudGl0eSxcbiAgR2V0SWRlbnRpdHlTZXNzaW9ucyxcbiAgR2V0UGVuZGluZ0FwcHJvdmFsLFxuICBJZGVudGl0eU1hbmFnZW1lbnRTZXJ2aWNlLFxuICBVcGRhdGVJZGVudGl0eVJlcXVlc3QsXG4gIFVzZXJNYW5hZ2VtZW50U2VydmljZSxcbn0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL3VzZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFVzZXJBY3Rpb25zIH0gZnJvbSAnLi4vLi4vdHlwZXMvdXNlci1hY3Rpb25zLmVudW0nO1xuaW1wb3J0IHsgQXBwcm92YWxUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMvdXNlci1hcHByb3ZhbC10eXBlLmVudW0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNlckRhdGFTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSB1c2VyTWFuYWdlbWVudFNlcnZpY2U6IFVzZXJNYW5hZ2VtZW50U2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlkZW50aXR5TWFuYWdlbWVudFNlcnZpY2U6IElkZW50aXR5TWFuYWdlbWVudFNlcnZpY2UsXG4gICkge31cblxuICBjaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5KGV4dGVybmFsSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJNYW5hZ2VtZW50U2VydmljZS5jaGVja1VzZXJFeGlzdHMoeyBleHRlcm5hbElkIH0sICdyZXNwb25zZScpLnBpcGUoXG4gICAgICBtYXAodGhpcy5pc05vdEZvdW5kKSxcbiAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiBvZih0aGlzLmlzTm90Rm91bmQoZXJyb3IpKSksXG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZVVzZXIoY3JlYXRlSWRlbnRpdHlSZXF1ZXN0OiBDcmVhdGVJZGVudGl0eVJlcXVlc3QpOiBPYnNlcnZhYmxlPENyZWF0ZUlkZW50aXR5UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5pZGVudGl0eU1hbmFnZW1lbnRTZXJ2aWNlLmNyZWF0ZUlkZW50aXR5KHsgY3JlYXRlSWRlbnRpdHlSZXF1ZXN0IH0pO1xuICB9XG5cbiAgZ2V0UGVuZGluZ0FwcHJvdmFsc0J5SW50ZXJuYWxJZEFuZFR5cGUoaW50ZXJuYWxJZDogc3RyaW5nLCB0eXBlOiBBcHByb3ZhbFR5cGUpOiBPYnNlcnZhYmxlPEdldFBlbmRpbmdBcHByb3ZhbFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGVuZGluZ0FwcHJvdmFsc0J5SW50ZXJuYWxJZChpbnRlcm5hbElkKS5waXBlKFxuICAgICAgbWFwKChhcHByb3ZhbHMpID0+IGFwcHJvdmFscy5maWx0ZXIoKGFwcHJvdmFsKSA9PiBhcHByb3ZhbC50eXBlID09PSB0eXBlKSksXG4gICAgKTtcbiAgfVxuXG4gIGdldFBlbmRpbmdBcHByb3ZhbHNCeUludGVybmFsSWQoaW50ZXJuYWxJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxHZXRQZW5kaW5nQXBwcm92YWxbXT4ge1xuICAgIHJldHVybiB0aGlzLmlkZW50aXR5TWFuYWdlbWVudFNlcnZpY2UuZ2V0SWRlbnRpdHlQZW5kaW5nQXBwcm92YWxzKHsgaW50ZXJuYWxJZCB9KTtcbiAgfVxuXG4gIGdldFVzZXJzSWRlbnRpdGllc1Nlc3Npb25zQnlJbnRlcm5hbElkKGludGVybmFsSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8R2V0SWRlbnRpdHlTZXNzaW9ucz4ge1xuICAgIHJldHVybiB0aGlzLmlkZW50aXR5TWFuYWdlbWVudFNlcnZpY2UuZ2V0U2Vzc2lvbnMoeyBpbnRlcm5hbElkIH0pO1xuICB9XG5cbiAgdXBkYXRlVXNlcnNJZGVudGl0aWVzU2Vzc2lvbnNMb2dvdXRSZWNvcmRCeUludGVybmFsSWQoaW50ZXJuYWxJZDogc3RyaW5nLCBzZXNzaW9uSWRzOiBBcnJheTxzdHJpbmc+ID0gW10pIHtcbiAgICByZXR1cm4gdGhpcy5pZGVudGl0eU1hbmFnZW1lbnRTZXJ2aWNlLmxvZ291dFNlc3Npb25zKHtcbiAgICAgIGludGVybmFsSWQsXG4gICAgICBpZGVudGl0eUxvZ291dFJlcXVlc3Q6IHsgc2Vzc2lvbklkcyB9LFxuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlVXNlckFjdGlvbnMoaW50ZXJuYWxJZDogc3RyaW5nLCBhY3Rpb25zOiBVc2VyQWN0aW9uc1tdKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5pZGVudGl0eU1hbmFnZW1lbnRTZXJ2aWNlLnNlbmRSZXF1aXJlZEFjdGlvbnMoe1xuICAgICAgaW50ZXJuYWxJZCxcbiAgICAgIGlkZW50aXR5UmVxdWlyZWRBY3Rpb25zUmVxdWVzdDogeyBhY3Rpb25zIH0sXG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVVc2VyUmVjb3JkQWN0aW9ucyhpbnRlcm5hbElkOiBzdHJpbmcsIHVwZGF0ZUlkZW50aXR5UmVxdWVzdDogVXBkYXRlSWRlbnRpdHlSZXF1ZXN0KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5pZGVudGl0eU1hbmFnZW1lbnRTZXJ2aWNlLnVwZGF0ZUlkZW50aXR5KHtcbiAgICAgIGludGVybmFsSWQsXG4gICAgICB1cGRhdGVJZGVudGl0eVJlcXVlc3QsXG4gICAgfSk7XG4gIH1cblxuICBjaGFuZ2VVc2VyUGFzc3dvcmQoZXhpc3RpbmdQYXNzd29yZDogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5pZGVudGl0eU1hbmFnZW1lbnRTZXJ2aWNlLmNoYW5nZVBhc3N3b3JkKHtcbiAgICAgIGNoYW5nZVBhc3N3b3JkUmVxdWVzdDoge1xuICAgICAgICBleGlzdGluZ1Bhc3N3b3JkLFxuICAgICAgICBuZXdQYXNzd29yZCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBnZXRVc2VyRGV0YWlscyhpbnRlcm5hbElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEdldElkZW50aXR5PiB7XG4gICAgcmV0dXJuIHRoaXMuaWRlbnRpdHlNYW5hZ2VtZW50U2VydmljZS5nZXRJZGVudGl0eSh7IGludGVybmFsSWQgfSk7XG4gIH1cblxuICBwcml2YXRlIGlzTm90Rm91bmQocmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+KSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0O1xuICB9XG59XG4iXX0=