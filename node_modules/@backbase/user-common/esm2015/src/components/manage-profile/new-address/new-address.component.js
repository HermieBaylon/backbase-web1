import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { catchError, map, publish, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/manage-profile/manage-profile-preferences.service";
import * as i2 from "@backbase/ui-ang/notification";
export class NewAddressComponent {
    constructor(manageProfilePreferencesService, cd, notificationService) {
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.close = new EventEmitter();
        this.closeAfterSave = new EventEmitter();
        this.isSubmitting = false;
        this.notificationDismissTimeSubject = new BehaviorSubject(undefined);
        this.dismissTimeoutPreferenceSubscription = combineLatest([
            this.notificationDismissTimeSubject.asObservable(),
            this.manageProfilePreferencesService.getNotificationDismissTimePreference(),
        ])
            .pipe(map(([input, preference]) => (input !== undefined ? input : preference * 1000)))
            .subscribe({
            next: (val) => (this.dismissTimeout = val),
        });
        this.handleServiceResponse = () => (source) => source.pipe(tap(this.onFormSubmissionSuccessful), catchError(this.onFormSubmissionUnsuccessful), publish());
        this.onFormSubmissionSuccessful = () => {
            this.isSubmitting = false;
            this.notificationService.showNotification({
                message: this.notificationSuccessTemplate,
                modifier: 'success',
                ttl: this.dismissTimeout,
            });
            this.cd.markForCheck();
            this.closeAfterSave.emit();
        };
        this.onFormSubmissionUnsuccessful = () => {
            this.isSubmitting = false;
            this.notificationService.showNotification({
                message: this.notificationFailureTemplate,
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
            this.cd.markForCheck();
            return of(undefined);
        };
    }
    set notificationDismissTime(value) {
        this.notificationDismissTimeSubject.next(value);
    }
    handleCancelClick() {
        this.close.emit();
    }
    ngOnDestroy() {
        this.dismissTimeoutPreferenceSubscription.unsubscribe();
    }
}
NewAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewAddressComponent, deps: [{ token: i1.ManageProfilePreferencesService }, { token: i0.ChangeDetectorRef }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
NewAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: NewAddressComponent, selector: "ng-component", inputs: { notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close", closeAfterSave: "closeAfterSave" }, viewQueries: [{ propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NewAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageProfilePreferencesService }, { type: i0.ChangeDetectorRef }, { type: i2.NotificationService }]; }, propDecorators: { close: [{
                type: Output
            }], closeAfterSave: [{
                type: Output
            }], notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess']
            }], notificationFailureTemplate: [{
                type: ViewChild,
                args: ['notificationFailure']
            }], notificationDismissTime: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3LWFkZHJlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91c2VyLWNvbW1vbi9zcmMvY29tcG9uZW50cy9tYW5hZ2UtcHJvZmlsZS9uZXctYWRkcmVzcy9uZXctYWRkcmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUVMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFFTixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUNwRixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFNL0QsTUFBTSxPQUFPLG1CQUFtQjtJQXVCOUIsWUFDcUIsK0JBQWdFLEVBQ2hFLEVBQXFCLEVBQ3JCLG1CQUF3QztRQUZ4QyxvQ0FBK0IsR0FBL0IsK0JBQStCLENBQWlDO1FBQ2hFLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUF6Qm5ELFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBQ2pDLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQVFwRCxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUVKLG1DQUE4QixHQUFHLElBQUksZUFBZSxDQUFxQixTQUFTLENBQUMsQ0FBQztRQUVyRyx5Q0FBb0MsR0FBaUIsYUFBYSxDQUFDO1lBQ2pFLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxZQUFZLEVBQUU7WUFDbEQsSUFBSSxDQUFDLCtCQUErQixDQUFDLG9DQUFvQyxFQUFFO1NBQzVFLENBQUM7YUFDQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNqRyxTQUFTLENBQUM7WUFDVCxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUM7U0FDM0MsQ0FBQyxDQUFDO1FBWUksMEJBQXFCLEdBQzVCLEdBQUcsRUFBRSxDQUNMLENBQUMsTUFBMkMsRUFBbUQsRUFBRSxDQUMvRixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUUvRiwrQkFBMEIsR0FBRyxHQUFHLEVBQUU7WUFDakQsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDMUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDO2dCQUN4QyxPQUFPLEVBQUUsSUFBSSxDQUFDLDJCQUErQztnQkFDN0QsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLEdBQUcsRUFBRSxJQUFJLENBQUMsY0FBYzthQUN6QixDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBRWUsaUNBQTRCLEdBQUcsR0FBMEIsRUFBRTtZQUMxRSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3hDLE9BQU8sRUFBRSxJQUFJLENBQUMsMkJBQStDO2dCQUM3RCxRQUFRLEVBQUUsT0FBTztnQkFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxjQUFjO2FBQ3pCLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7WUFFdkIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdkIsQ0FBQyxDQUFDO0lBaENDLENBQUM7SUFyQkosSUFBYSx1QkFBdUIsQ0FBQyxLQUF5QjtRQUM1RCxJQUFJLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFxQkQsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBOEJELFdBQVc7UUFDVCxJQUFJLENBQUMsb0NBQW9DLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDMUQsQ0FBQzs7aUhBL0RVLG1CQUFtQjtxR0FBbkIsbUJBQW1CLDRhQUZwQixFQUFFOzRGQUVELG1CQUFtQjtrQkFIL0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsRUFBRTtpQkFDYjt3TEFFVyxLQUFLO3NCQUFkLE1BQU07Z0JBQ0csY0FBYztzQkFBdkIsTUFBTTtnQkFDMkIsMkJBQTJCO3NCQUE1RCxTQUFTO3VCQUFDLHFCQUFxQjtnQkFDRSwyQkFBMkI7c0JBQTVELFNBQVM7dUJBQUMscUJBQXFCO2dCQUVuQix1QkFBdUI7c0JBQW5DLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHB1Ymxpc2gsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1hbmFnZVByb2ZpbGVQcmVmZXJlbmNlc1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9tYW5hZ2UtcHJvZmlsZS9tYW5hZ2UtcHJvZmlsZS1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiAnJyxcbn0pXG5leHBvcnQgY2xhc3MgTmV3QWRkcmVzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIEBPdXRwdXQoKSBjbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIGNsb3NlQWZ0ZXJTYXZlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAVmlld0NoaWxkKCdub3RpZmljYXRpb25TdWNjZXNzJykgbm90aWZpY2F0aW9uU3VjY2Vzc1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgdW5kZWZpbmVkO1xuICBAVmlld0NoaWxkKCdub3RpZmljYXRpb25GYWlsdXJlJykgbm90aWZpY2F0aW9uRmFpbHVyZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgdW5kZWZpbmVkO1xuXG4gIEBJbnB1dCgpIHNldCBub3RpZmljYXRpb25EaXNtaXNzVGltZSh2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5ub3RpZmljYXRpb25EaXNtaXNzVGltZVN1YmplY3QubmV4dCh2YWx1ZSk7XG4gIH1cblxuICBpc1N1Ym1pdHRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBkaXNtaXNzVGltZW91dDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmaWNhdGlvbkRpc21pc3NUaW1lU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4gIGRpc21pc3NUaW1lb3V0UHJlZmVyZW5jZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0gY29tYmluZUxhdGVzdChbXG4gICAgdGhpcy5ub3RpZmljYXRpb25EaXNtaXNzVGltZVN1YmplY3QuYXNPYnNlcnZhYmxlKCksXG4gICAgdGhpcy5tYW5hZ2VQcm9maWxlUHJlZmVyZW5jZXNTZXJ2aWNlLmdldE5vdGlmaWNhdGlvbkRpc21pc3NUaW1lUHJlZmVyZW5jZSgpLFxuICBdKVxuICAgIC5waXBlKG1hcCgoW2lucHV0LCBwcmVmZXJlbmNlXTogW2FueSwgYW55XSkgPT4gKGlucHV0ICE9PSB1bmRlZmluZWQgPyBpbnB1dCA6IHByZWZlcmVuY2UgKiAxMDAwKSkpXG4gICAgLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiAodmFsKSA9PiAodGhpcy5kaXNtaXNzVGltZW91dCA9IHZhbCksXG4gICAgfSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1hbmFnZVByb2ZpbGVQcmVmZXJlbmNlc1NlcnZpY2U6IE1hbmFnZVByb2ZpbGVQcmVmZXJlbmNlc1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbm90aWZpY2F0aW9uU2VydmljZTogTm90aWZpY2F0aW9uU2VydmljZSxcbiAgKSB7fVxuXG4gIGhhbmRsZUNhbmNlbENsaWNrKCkge1xuICAgIHRoaXMuY2xvc2UuZW1pdCgpO1xuICB9XG5cbiAgcmVhZG9ubHkgaGFuZGxlU2VydmljZVJlc3BvbnNlID1cbiAgICAoKSA9PlxuICAgIChzb3VyY2U6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPHVuZGVmaW5lZD4+KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8dW5kZWZpbmVkPiB8IHVuZGVmaW5lZD4gPT5cbiAgICAgIHNvdXJjZS5waXBlKHRhcCh0aGlzLm9uRm9ybVN1Ym1pc3Npb25TdWNjZXNzZnVsKSwgY2F0Y2hFcnJvcih0aGlzLm9uRm9ybVN1Ym1pc3Npb25VbnN1Y2Nlc3NmdWwpLCBwdWJsaXNoKCkpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgb25Gb3JtU3VibWlzc2lvblN1Y2Nlc3NmdWwgPSAoKSA9PiB7XG4gICAgdGhpcy5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLm5vdGlmaWNhdGlvblNlcnZpY2Uuc2hvd05vdGlmaWNhdGlvbih7XG4gICAgICBtZXNzYWdlOiB0aGlzLm5vdGlmaWNhdGlvblN1Y2Nlc3NUZW1wbGF0ZSBhcyBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgICAgbW9kaWZpZXI6ICdzdWNjZXNzJyxcbiAgICAgIHR0bDogdGhpcy5kaXNtaXNzVGltZW91dCxcbiAgICB9KTtcbiAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICAgIHRoaXMuY2xvc2VBZnRlclNhdmUuZW1pdCgpO1xuICB9O1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgb25Gb3JtU3VibWlzc2lvblVuc3VjY2Vzc2Z1bCA9ICgpOiBPYnNlcnZhYmxlPHVuZGVmaW5lZD4gPT4ge1xuICAgIHRoaXMuaXNTdWJtaXR0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5ub3RpZmljYXRpb25TZXJ2aWNlLnNob3dOb3RpZmljYXRpb24oe1xuICAgICAgbWVzc2FnZTogdGhpcy5ub3RpZmljYXRpb25GYWlsdXJlVGVtcGxhdGUgYXMgVGVtcGxhdGVSZWY8YW55PixcbiAgICAgIG1vZGlmaWVyOiAnZXJyb3InLFxuICAgICAgdHRsOiB0aGlzLmRpc21pc3NUaW1lb3V0LFxuICAgIH0pO1xuICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG5cbiAgICByZXR1cm4gb2YodW5kZWZpbmVkKTtcbiAgfTtcblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRpc21pc3NUaW1lb3V0UHJlZmVyZW5jZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=