import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class ManageProfileFormComponent {
    constructor() {
        /**
         * Whether the form is being submitted.
         * Defaults to false.
         */
        this.isSubmitting = false;
        this.cancel = new EventEmitter();
        this.delete = new EventEmitter();
        this.save = new EventEmitter();
        this.showFormErrors = false;
        this.showDeleteButton = false;
        this.isCancelModalOpen = false;
        this.isDeleteModalOpen = false;
        this.hasBeenSubmitted = false;
    }
    ngOnInit() {
        if (this.data.key) {
            this.showDeleteButton = !!(this.count && this.count > 1);
        }
        this.createForm();
    }
    get form() {
        if (!this.formData) {
            throw new Error('formData is not defined');
        }
        return this.formData;
    }
    handleSubmit() {
        this.hasBeenSubmitted = true;
        this.markFormAsTouched();
        this.showErrorsOnForm();
        if (!this.form.valid) {
            return;
        }
        this.form.updateValueAndValidity();
        this.save.emit(this.form.value);
    }
    handleCancelClick() {
        if (this.form.touched) {
            this.isCancelModalOpen = true;
        }
        else {
            this.cancel.emit();
        }
    }
    closeCancelModal() {
        this.isCancelModalOpen = false;
        this.cancel.emit();
    }
    dismissCancelModal() {
        this.isCancelModalOpen = false;
        this.markFormAsTouched();
        this.showErrorsOnForm();
    }
    handleDelete() {
        this.isDeleteModalOpen = true;
    }
    closeDeleteModal() {
        this.isDeleteModalOpen = false;
        this.delete.emit(this.form.value);
    }
    dismissDeleteModal() {
        this.isDeleteModalOpen = false;
        this.markFormAsTouched();
        this.showErrorsOnForm();
    }
    showErrorsOnForm() {
        this.showFormErrors = !this.form.valid;
    }
    markFormAsTouched() { }
    createForm() { }
}
ManageProfileFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileFormComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ManageProfileFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageProfileFormComponent, selector: "ng-component", inputs: { types: "types", data: "data", count: "count", isSubmitting: "isSubmitting" }, outputs: { cancel: "cancel", delete: "delete", save: "save" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileFormComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { types: [{
                type: Input
            }], data: [{
                type: Input
            }], count: [{
                type: Input
            }], isSubmitting: [{
                type: Input
            }], cancel: [{
                type: Output
            }], delete: [{
                type: Output
            }], save: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLXByb2ZpbGUtZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VzZXItY29tbW9uL3NyYy9jb21wb25lbnRzL21hbmFnZS1wcm9maWxlL21hbmFnZS1wcm9maWxlLWZvcm0vbWFuYWdlLXByb2ZpbGUtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFPL0UsTUFBTSxPQUFPLDBCQUEwQjtJQUh2QztRQWdCRTs7O1dBR0c7UUFDTSxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNwQixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUNsQyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQTZELENBQUM7UUFDdkYsU0FBSSxHQUFHLElBQUksWUFBWSxFQUE2RCxDQUFDO1FBRy9GLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQUN6QixzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDMUIsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQzFCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztLQXNFMUI7SUFwRUMsUUFBUTtRQUNOLElBQUssSUFBSSxDQUFDLElBQWtFLENBQUMsR0FBRyxFQUFFO1lBQ2hGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDMUQ7UUFDRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM1QztRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3BCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxpQkFBaUI7UUFDZixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7U0FDL0I7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztRQUMvQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFDaEMsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDekMsQ0FBQztJQUVTLGlCQUFpQixLQUFJLENBQUM7SUFFdEIsVUFBVSxLQUFJLENBQUM7O3dIQWhHZCwwQkFBMEI7NEdBQTFCLDBCQUEwQiwyTUFGM0IsRUFBRTs0RkFFRCwwQkFBMEI7a0JBSHRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7OEJBS1UsS0FBSztzQkFBYixLQUFLO2dCQUlHLElBQUk7c0JBQVosS0FBSztnQkFJRyxLQUFLO3NCQUFiLEtBQUs7Z0JBS0csWUFBWTtzQkFBcEIsS0FBSztnQkFDSSxNQUFNO3NCQUFmLE1BQU07Z0JBQ0csTUFBTTtzQkFBZixNQUFNO2dCQUNHLElBQUk7c0JBQWIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEdldEVsZWN0cm9uaWNBZGRyZXNzLCBHZXRQaG9uZUFkZHJlc3MsIEdldFBvc3RhbEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi9jb21tb24tdHlwZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGU6ICcnLFxufSlcbmV4cG9ydCBjbGFzcyBNYW5hZ2VQcm9maWxlRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBhZGRyZXNzIHR5cGVzLlxuICAgKi9cbiAgQElucHV0KCkgdHlwZXM6IEFycmF5PHN0cmluZz4gfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgZGF0YSBmb3IgdGhlIGFkZHJlc3MgZW50cnkuXG4gICAqL1xuICBASW5wdXQoKSBkYXRhOiBHZXRQaG9uZUFkZHJlc3MgfCBHZXRFbGVjdHJvbmljQWRkcmVzcyB8IEdldFBvc3RhbEFkZHJlc3MgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGFkZHJlc3NlcyBzdG9yZWQuXG4gICAqL1xuICBASW5wdXQoKSBjb3VudDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogV2hldGhlciB0aGUgZm9ybSBpcyBiZWluZyBzdWJtaXR0ZWQuXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgQElucHV0KCkgaXNTdWJtaXR0aW5nID0gZmFsc2U7XG4gIEBPdXRwdXQoKSBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBkZWxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPEdldFBob25lQWRkcmVzcyB8IEdldEVsZWN0cm9uaWNBZGRyZXNzIHwgR2V0UG9zdGFsQWRkcmVzcz4oKTtcbiAgQE91dHB1dCgpIHNhdmUgPSBuZXcgRXZlbnRFbWl0dGVyPEdldFBob25lQWRkcmVzcyB8IEdldEVsZWN0cm9uaWNBZGRyZXNzIHwgR2V0UG9zdGFsQWRkcmVzcz4oKTtcblxuICBmb3JtRGF0YTogRm9ybUdyb3VwIHwgdW5kZWZpbmVkO1xuICBzaG93Rm9ybUVycm9ycyA9IGZhbHNlO1xuICBzaG93RGVsZXRlQnV0dG9uID0gZmFsc2U7XG4gIGlzQ2FuY2VsTW9kYWxPcGVuID0gZmFsc2U7XG4gIGlzRGVsZXRlTW9kYWxPcGVuID0gZmFsc2U7XG4gIGhhc0JlZW5TdWJtaXR0ZWQgPSBmYWxzZTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoKHRoaXMuZGF0YSBhcyBHZXRQaG9uZUFkZHJlc3MgfCBHZXRFbGVjdHJvbmljQWRkcmVzcyB8IEdldFBvc3RhbEFkZHJlc3MpLmtleSkge1xuICAgICAgdGhpcy5zaG93RGVsZXRlQnV0dG9uID0gISEodGhpcy5jb3VudCAmJiB0aGlzLmNvdW50ID4gMSk7XG4gICAgfVxuICAgIHRoaXMuY3JlYXRlRm9ybSgpO1xuICB9XG5cbiAgZ2V0IGZvcm0oKSB7XG4gICAgaWYgKCF0aGlzLmZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zvcm1EYXRhIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZm9ybURhdGE7XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoKSB7XG4gICAgdGhpcy5oYXNCZWVuU3VibWl0dGVkID0gdHJ1ZTtcbiAgICB0aGlzLm1hcmtGb3JtQXNUb3VjaGVkKCk7XG4gICAgdGhpcy5zaG93RXJyb3JzT25Gb3JtKCk7XG4gICAgaWYgKCF0aGlzLmZvcm0udmFsaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm0udXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgIHRoaXMuc2F2ZS5lbWl0KHRoaXMuZm9ybS52YWx1ZSk7XG4gIH1cblxuICBoYW5kbGVDYW5jZWxDbGljaygpIHtcbiAgICBpZiAodGhpcy5mb3JtLnRvdWNoZWQpIHtcbiAgICAgIHRoaXMuaXNDYW5jZWxNb2RhbE9wZW4gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbmNlbC5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgY2xvc2VDYW5jZWxNb2RhbCgpIHtcbiAgICB0aGlzLmlzQ2FuY2VsTW9kYWxPcGVuID0gZmFsc2U7XG4gICAgdGhpcy5jYW5jZWwuZW1pdCgpO1xuICB9XG5cbiAgZGlzbWlzc0NhbmNlbE1vZGFsKCkge1xuICAgIHRoaXMuaXNDYW5jZWxNb2RhbE9wZW4gPSBmYWxzZTtcbiAgICB0aGlzLm1hcmtGb3JtQXNUb3VjaGVkKCk7XG4gICAgdGhpcy5zaG93RXJyb3JzT25Gb3JtKCk7XG4gIH1cblxuICBoYW5kbGVEZWxldGUoKSB7XG4gICAgdGhpcy5pc0RlbGV0ZU1vZGFsT3BlbiA9IHRydWU7XG4gIH1cblxuICBjbG9zZURlbGV0ZU1vZGFsKCkge1xuICAgIHRoaXMuaXNEZWxldGVNb2RhbE9wZW4gPSBmYWxzZTtcbiAgICB0aGlzLmRlbGV0ZS5lbWl0KHRoaXMuZm9ybS52YWx1ZSk7XG4gIH1cblxuICBkaXNtaXNzRGVsZXRlTW9kYWwoKSB7XG4gICAgdGhpcy5pc0RlbGV0ZU1vZGFsT3BlbiA9IGZhbHNlO1xuICAgIHRoaXMubWFya0Zvcm1Bc1RvdWNoZWQoKTtcbiAgICB0aGlzLnNob3dFcnJvcnNPbkZvcm0oKTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvd0Vycm9yc09uRm9ybSgpIHtcbiAgICB0aGlzLnNob3dGb3JtRXJyb3JzID0gIXRoaXMuZm9ybS52YWxpZDtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXJrRm9ybUFzVG91Y2hlZCgpIHt9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZUZvcm0oKSB7fVxufVxuIl19