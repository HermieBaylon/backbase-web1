import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { catchError, map, publish, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/manage-profile/manage-profile-preferences.service";
import * as i2 from "@backbase/ui-ang/notification";
export class EditAddressComponent {
    constructor(manageProfilePreferencesService, cd, notificationService) {
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.close = new EventEmitter();
        this.closeAfterSave = new EventEmitter();
        this.isSubmitting = false;
        this.notificationDismissTimeSubject = new BehaviorSubject(undefined);
        this.dismissTimeoutPreferenceSubscription = combineLatest([
            this.notificationDismissTimeSubject.asObservable(),
            this.manageProfilePreferencesService.getNotificationDismissTimePreference(),
        ])
            .pipe(map(([input, preference]) => (input !== undefined ? input : preference * 1000)))
            .subscribe({
            next: (val) => (this.dismissTimeout = val),
        });
        this.handleUpdateResponse = () => (source) => source.pipe(tap(this.onFormSubmissionSuccessful), catchError(this.onFormSubmissionUnsuccessful), publish());
        this.handleDeleteResponse = () => (source) => source.pipe(tap(this.onDeletionSuccessful), catchError(this.onFormSubmissionUnsuccessful), publish());
        this.onFormSubmissionSuccessful = () => {
            this.isSubmitting = false;
            this.onSuccess(this.notificationUpdateSuccessTemplate);
        };
        this.onDeletionSuccessful = () => {
            this.isSubmitting = false;
            this.onSuccess(this.notificationDeleteSuccessTemplate);
        };
        this.onFormSubmissionUnsuccessful = () => {
            this.isSubmitting = false;
            this.notificationService.showNotification({
                message: this.notificationFailureTemplate,
                modifier: 'error',
                ttl: this.dismissTimeout,
            });
            this.cd.markForCheck();
            return of(undefined);
        };
    }
    set notificationDismissTime(value) {
        this.notificationDismissTimeSubject.next(value);
    }
    handleCancelClick() {
        this.close.emit();
    }
    onSuccess(template) {
        this.notificationService.showNotification({
            message: template,
            modifier: 'success',
            ttl: this.dismissTimeout,
        });
        this.cd.markForCheck();
        this.closeAfterSave.emit();
    }
    ngOnDestroy() {
        this.dismissTimeoutPreferenceSubscription.unsubscribe();
    }
}
EditAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditAddressComponent, deps: [{ token: i1.ManageProfilePreferencesService }, { token: i0.ChangeDetectorRef }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
EditAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: EditAddressComponent, selector: "ng-component", inputs: { notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close", closeAfterSave: "closeAfterSave" }, viewQueries: [{ propertyName: "notificationUpdateSuccessTemplate", first: true, predicate: ["notificationUpdateSuccess"], descendants: true }, { propertyName: "notificationDeleteSuccessTemplate", first: true, predicate: ["notificationDeleteSuccess"], descendants: true }, { propertyName: "notificationFailureTemplate", first: true, predicate: ["notificationFailure"], descendants: true }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EditAddressComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageProfilePreferencesService }, { type: i0.ChangeDetectorRef }, { type: i2.NotificationService }]; }, propDecorators: { close: [{
                type: Output
            }], closeAfterSave: [{
                type: Output
            }], notificationUpdateSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationUpdateSuccess']
            }], notificationDeleteSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationDeleteSuccess']
            }], notificationFailureTemplate: [{
                type: ViewChild,
                args: ['notificationFailure']
            }], notificationDismissTime: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,