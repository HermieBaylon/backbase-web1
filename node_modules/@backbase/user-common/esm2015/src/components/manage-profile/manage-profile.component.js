import { Component, Input } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/manage-profile/manage-profile-preferences.service";
export class ManageProfileComponent {
    constructor(manageProfilePreferencesService, cd) {
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.cd = cd;
        this.loadingState = true;
        this.loadingErrorState = false;
        this.disableAddressManaging = false;
        /** @deprecated */
        this.widgetPreferences = this.manageProfilePreferencesService.getWidgetPreferences();
        this.userProfileSubject = new BehaviorSubject(undefined);
        this.handleProfileError = (error) => {
            this.loadingState = false;
            this.loadingErrorState = true;
            this.loadingError = error;
            this.cd.markForCheck();
            return new Observable();
        };
        this.onProfileUpdate = () => {
            this.loadingState = true;
            this.loadingError = undefined;
        };
    }
    refreshProfileData() {
        this.handleManageAddressClose();
        this.userProfileSubject.next(undefined);
    }
    handleManageAddressOpen() {
        this.disableAddressManaging = true;
    }
    handleManageAddressClose() {
        this.disableAddressManaging = false;
    }
    setUserProfileObservable() {
        return this.userProfileSubject.asObservable().pipe(map(() => ({
            fullName: '',
        })));
    }
    ngOnInit() {
        this.userProfileObservable = this.setUserProfileObservable();
        this.userProfileSubscription = this.userProfileObservable.subscribe((userProfileData) => {
            this.userProfile = userProfileData;
            this.loadingState = false;
            this.loadingErrorState = false;
            this.cd.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this.userProfileSubscription) {
            this.userProfileSubscription.unsubscribe();
        }
    }
}
ManageProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileComponent, deps: [{ token: i1.ManageProfilePreferencesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ManageProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ManageProfileComponent, selector: "ng-component", inputs: { notificationDismissTime: "notificationDismissTime" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageProfileComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageProfilePreferencesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { notificationDismissTime: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuYWdlLXByb2ZpbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91c2VyLWNvbW1vbi9zcmMvY29tcG9uZW50cy9tYW5hZ2UtcHJvZmlsZS9tYW5hZ2UtcHJvZmlsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFxQixTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFVckMsTUFBTSxPQUFPLHNCQUFzQjtJQXVEakMsWUFDcUIsK0JBQWdFLEVBQ2hFLEVBQXFCO1FBRHJCLG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBaUM7UUFDaEUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFyRDFDLGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLHNCQUFpQixHQUFHLEtBQUssQ0FBQztRQUUxQiwyQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFFL0Isa0JBQWtCO1FBQ1Qsc0JBQWlCLEdBQ3hCLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBRTNDLHVCQUFrQixHQUFHLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBaUI5RCx1QkFBa0IsR0FBRyxDQUFDLEtBQXdCLEVBQUUsRUFBRTtZQUN6RCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1lBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1lBQzFCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7WUFFdkIsT0FBTyxJQUFJLFVBQVUsRUFBZSxDQUFDO1FBQ3ZDLENBQUMsQ0FBQztRQUVPLG9CQUFlLEdBQUcsR0FBRyxFQUFFO1lBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztJQWdCQyxDQUFDO0lBekNKLGtCQUFrQjtRQUNoQixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCx1QkFBdUI7UUFDckIsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQztJQUNyQyxDQUFDO0lBRUQsd0JBQXdCO1FBQ3RCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7SUFDdEMsQ0FBQztJQWdCUyx3QkFBd0I7UUFDaEMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUNoRCxHQUFHLENBQ0QsR0FBRyxFQUFFLENBQ0gsQ0FBQztZQUNDLFFBQVEsRUFBRSxFQUFFO1NBQ0csQ0FBQSxDQUNwQixDQUNGLENBQUM7SUFDSixDQUFDO0lBT0QsUUFBUTtRQUNOLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUM3RCxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDLGVBQTRCLEVBQUUsRUFBRTtZQUNuRyxJQUFJLENBQUMsV0FBVyxHQUFHLGVBQWUsQ0FBQztZQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1lBQy9CLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQ2hDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUM1QztJQUNILENBQUM7O29IQTFFVSxzQkFBc0I7d0dBQXRCLHNCQUFzQixvSEFGdkIsRUFBRTs0RkFFRCxzQkFBc0I7a0JBSGxDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7c0pBRVUsdUJBQXVCO3NCQUEvQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBVc2VyUHJvZmlsZSB9IGZyb20gJy4uLy4uL2NvbW1vbi10eXBlcyc7XG5pbXBvcnQge1xuICBNYW5hZ2VQcm9maWxlUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICBXaWRnZXRQcmVmZXJlbmNlcyxcbn0gZnJvbSAnLi4vLi4vc2VydmljZXMvbWFuYWdlLXByb2ZpbGUvbWFuYWdlLXByb2ZpbGUtcHJlZmVyZW5jZXMuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogJycsXG59KVxuZXhwb3J0IGNsYXNzIE1hbmFnZVByb2ZpbGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XG4gIEBJbnB1dCgpIG5vdGlmaWNhdGlvbkRpc21pc3NUaW1lOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgdXNlclByb2ZpbGU6IFVzZXJQcm9maWxlIHwgdW5kZWZpbmVkO1xuICBsb2FkaW5nU3RhdGUgPSB0cnVlO1xuICBsb2FkaW5nRXJyb3JTdGF0ZSA9IGZhbHNlO1xuICBsb2FkaW5nRXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlIHwgdW5kZWZpbmVkO1xuICBkaXNhYmxlQWRkcmVzc01hbmFnaW5nID0gZmFsc2U7XG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIHJlYWRvbmx5IHdpZGdldFByZWZlcmVuY2VzOiBPYnNlcnZhYmxlPFdpZGdldFByZWZlcmVuY2VzPiA9XG4gICAgdGhpcy5tYW5hZ2VQcm9maWxlUHJlZmVyZW5jZXNTZXJ2aWNlLmdldFdpZGdldFByZWZlcmVuY2VzKCk7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHVzZXJQcm9maWxlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3QodW5kZWZpbmVkKTtcbiAgcHJpdmF0ZSB1c2VyUHJvZmlsZU9ic2VydmFibGU6IE9ic2VydmFibGU8VXNlclByb2ZpbGU+IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHVzZXJQcm9maWxlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQ7XG5cbiAgcmVmcmVzaFByb2ZpbGVEYXRhKCkge1xuICAgIHRoaXMuaGFuZGxlTWFuYWdlQWRkcmVzc0Nsb3NlKCk7XG4gICAgdGhpcy51c2VyUHJvZmlsZVN1YmplY3QubmV4dCh1bmRlZmluZWQpO1xuICB9XG5cbiAgaGFuZGxlTWFuYWdlQWRkcmVzc09wZW4oKSB7XG4gICAgdGhpcy5kaXNhYmxlQWRkcmVzc01hbmFnaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIGhhbmRsZU1hbmFnZUFkZHJlc3NDbG9zZSgpIHtcbiAgICB0aGlzLmRpc2FibGVBZGRyZXNzTWFuYWdpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHJlYWRvbmx5IGhhbmRsZVByb2ZpbGVFcnJvciA9IChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICB0aGlzLmxvYWRpbmdTdGF0ZSA9IGZhbHNlO1xuICAgIHRoaXMubG9hZGluZ0Vycm9yU3RhdGUgPSB0cnVlO1xuICAgIHRoaXMubG9hZGluZ0Vycm9yID0gZXJyb3I7XG4gICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcblxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxVc2VyUHJvZmlsZT4oKTtcbiAgfTtcblxuICByZWFkb25seSBvblByb2ZpbGVVcGRhdGUgPSAoKSA9PiB7XG4gICAgdGhpcy5sb2FkaW5nU3RhdGUgPSB0cnVlO1xuICAgIHRoaXMubG9hZGluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHByb3RlY3RlZCBzZXRVc2VyUHJvZmlsZU9ic2VydmFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlclByb2ZpbGVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpLnBpcGUoXG4gICAgICBtYXAoXG4gICAgICAgICgpID0+XG4gICAgICAgICAgKHtcbiAgICAgICAgICAgIGZ1bGxOYW1lOiAnJyxcbiAgICAgICAgICB9IGFzIFVzZXJQcm9maWxlKSxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBtYW5hZ2VQcm9maWxlUHJlZmVyZW5jZXNTZXJ2aWNlOiBNYW5hZ2VQcm9maWxlUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnVzZXJQcm9maWxlT2JzZXJ2YWJsZSA9IHRoaXMuc2V0VXNlclByb2ZpbGVPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy51c2VyUHJvZmlsZVN1YnNjcmlwdGlvbiA9IHRoaXMudXNlclByb2ZpbGVPYnNlcnZhYmxlLnN1YnNjcmliZSgodXNlclByb2ZpbGVEYXRhOiBVc2VyUHJvZmlsZSkgPT4ge1xuICAgICAgdGhpcy51c2VyUHJvZmlsZSA9IHVzZXJQcm9maWxlRGF0YTtcbiAgICAgIHRoaXMubG9hZGluZ1N0YXRlID0gZmFsc2U7XG4gICAgICB0aGlzLmxvYWRpbmdFcnJvclN0YXRlID0gZmFsc2U7XG4gICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMudXNlclByb2ZpbGVTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMudXNlclByb2ZpbGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==