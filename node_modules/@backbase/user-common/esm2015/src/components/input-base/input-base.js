import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class InputBase {
    constructor() {
        /**
         * A flag to determine if the form has been submitted.
         * Defaults to false.
         */
        this.hasBeenSubmitted = false;
        this.hasBlurred = false;
    }
    get fieldControl() {
        if (!this.formGroup) {
            throw new Error('formGroup must be initialised to type FormGroup');
        }
        if (!this.fieldName) {
            throw new Error('fieldName must be initialised to type FormFieldName');
        }
        return this.formGroup.controls[this.fieldName];
    }
    get hasErrors() {
        if (this.hasBeenSubmitted) {
            this.onFieldBlur();
        }
        return Boolean(this.fieldControl && this.fieldControl.touched && this.fieldControl.errors && this.hasBlurred);
    }
    onFieldBlur() {
        this.hasBlurred = true;
    }
}
InputBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: InputBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
InputBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: InputBase, selector: "[bbUserInputBase]", inputs: { formGroup: "formGroup", fieldName: "fieldName", hasBeenSubmitted: "hasBeenSubmitted" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: InputBase, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserInputBase]',
                }]
        }], propDecorators: { formGroup: [{
                type: Input
            }], fieldName: [{
                type: Input
            }], hasBeenSubmitted: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdXNlci1jb21tb24vc3JjL2NvbXBvbmVudHMvaW5wdXQtYmFzZS9pbnB1dC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU1qRCxrRUFBa0U7QUFDbEUsTUFBTSxPQUFPLFNBQVM7SUFKdEI7UUFhRTs7O1dBR0c7UUFDTSxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDbEMsZUFBVSxHQUFHLEtBQUssQ0FBQztLQXlCcEI7SUF2QkMsSUFBSSxZQUFZO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtRQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQzs7dUdBdENVLFNBQVM7MkZBQVQsU0FBUzs0RkFBVCxTQUFTO2tCQUpyQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCOzhCQU1VLFNBQVM7c0JBQWpCLEtBQUs7Z0JBSUcsU0FBUztzQkFBakIsS0FBSztnQkFLRyxnQkFBZ0I7c0JBQXhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiVXNlcklucHV0QmFzZV0nLFxufSlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIElucHV0QmFzZSB7XG4gIC8qKlxuICAgKiBUaGUgZm9ybSBncm91cCB1c2VkIGZvciBpbnB1dCBtb2RlbC5cbiAgICovXG4gIEBJbnB1dCgpIGZvcm1Hcm91cDogRm9ybUdyb3VwIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZpZWxkIGluIHRoZSBmb3JtIGdyb3VwLlxuICAgKi9cbiAgQElucHV0KCkgZmllbGROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBBIGZsYWcgdG8gZGV0ZXJtaW5lIGlmIHRoZSBmb3JtIGhhcyBiZWVuIHN1Ym1pdHRlZC5cbiAgICogRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqL1xuICBASW5wdXQoKSBoYXNCZWVuU3VibWl0dGVkID0gZmFsc2U7XG4gIGhhc0JsdXJyZWQgPSBmYWxzZTtcblxuICBnZXQgZmllbGRDb250cm9sKCk6IEFic3RyYWN0Q29udHJvbCB7XG4gICAgaWYgKCF0aGlzLmZvcm1Hcm91cCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdmb3JtR3JvdXAgbXVzdCBiZSBpbml0aWFsaXNlZCB0byB0eXBlIEZvcm1Hcm91cCcpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5maWVsZE5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZmllbGROYW1lIG11c3QgYmUgaW5pdGlhbGlzZWQgdG8gdHlwZSBGb3JtRmllbGROYW1lJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZm9ybUdyb3VwLmNvbnRyb2xzW3RoaXMuZmllbGROYW1lXTtcbiAgfVxuXG4gIGdldCBoYXNFcnJvcnMoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuaGFzQmVlblN1Ym1pdHRlZCkge1xuICAgICAgdGhpcy5vbkZpZWxkQmx1cigpO1xuICAgIH1cblxuICAgIHJldHVybiBCb29sZWFuKHRoaXMuZmllbGRDb250cm9sICYmIHRoaXMuZmllbGRDb250cm9sLnRvdWNoZWQgJiYgdGhpcy5maWVsZENvbnRyb2wuZXJyb3JzICYmIHRoaXMuaGFzQmx1cnJlZCk7XG4gIH1cblxuICBvbkZpZWxkQmx1cigpIHtcbiAgICB0aGlzLmhhc0JsdXJyZWQgPSB0cnVlO1xuICB9XG59XG4iXX0=