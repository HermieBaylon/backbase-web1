import { Directive, Input } from '@angular/core';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { InputBase } from '../input-base/input-base';
import * as i0 from "@angular/core";
import * as i1 from "../../services/manage-profile/manage-profile-preferences.service";
import * as i2 from "@backbase/ui-ang/phone-number-format-pipe";
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class PhoneNumberInputBase extends InputBase {
    constructor(manageProfilePreferencesService, phoneNumberFormatter) {
        super();
        this.manageProfilePreferencesService = manageProfilePreferencesService;
        this.phoneNumberFormatter = phoneNumberFormatter;
        this.phoneNumberPreferencesSubscription = this.manageProfilePreferencesService
            .getPhoneNumberInputPreferences()
            .subscribe((preferences) => {
            if (preferences) {
                this.preferences = preferences;
                this.preferences.debounceTime = this.preferences.debounceTime * 1000;
            }
        });
    }
    // eslint-disable-next-line complexity
    ngOnInit() {
        if (this.enablePhoneNumberFormatter && this.phoneNumberDebounceTime === undefined) {
            throw new Error(`phoneNumberDebounceTime is required when enablePhoneNumberFormatter is true`);
        }
        if (this.enablePhoneNumberFormatter && this.phoneNumberCountryCode === undefined) {
            throw new Error(`phoneNumberCountryCode is required when enablePhoneNumberFormatter is true`);
        }
        if (this.enablePhoneNumberFormatter !== false) {
            if (this.enablePhoneNumberFormatter || (this.preferences || {}).enablePhoneNumberFormatter) {
                this.phoneNumberSubscription = this.fieldControl.valueChanges
                    .pipe(distinctUntilChanged(), debounceTime((this.phoneNumberDebounceTime && this.phoneNumberDebounceTime * 1000) || this.preference.debounceTime))
                    .subscribe((value) => {
                    value = this.phoneNumberFormatter.transform(value, this.phoneNumberCountryCode || this.preference.countryCode, true);
                    this.fieldControl.setValue(value);
                });
            }
        }
    }
    get preference() {
        if (!this.preferences) {
            throw new Error('preferences are not defined');
        }
        return this.preferences;
    }
    ngOnDestroy() {
        this.phoneNumberPreferencesSubscription.unsubscribe();
        if (this.phoneNumberSubscription) {
            this.phoneNumberSubscription.unsubscribe();
        }
    }
}
PhoneNumberInputBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PhoneNumberInputBase, deps: [{ token: i1.ManageProfilePreferencesService }, { token: i2.PhoneNumberPipe }], target: i0.ɵɵFactoryTarget.Directive });
PhoneNumberInputBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PhoneNumberInputBase, selector: "[bbUserPhoneNumberInputBase]", inputs: { phoneNumberCountryCode: "phoneNumberCountryCode", phoneNumberDebounceTime: "phoneNumberDebounceTime", enablePhoneNumberFormatter: "enablePhoneNumberFormatter" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PhoneNumberInputBase, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbUserPhoneNumberInputBase]',
                }]
        }], ctorParameters: function () { return [{ type: i1.ManageProfilePreferencesService }, { type: i2.PhoneNumberPipe }]; }, propDecorators: { phoneNumberCountryCode: [{
                type: Input
            }], phoneNumberDebounceTime: [{
                type: Input
            }], enablePhoneNumberFormatter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGhvbmUtbnVtYmVyLWlucHV0LWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VzZXItY29tbW9uL3NyYy9jb21wb25lbnRzL3Bob25lLW51bWJlci1pbnB1dC9waG9uZS1udW1iZXItaW5wdXQtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFJcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3BFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7OztBQUtyRCxrRUFBa0U7QUFDbEUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFNBQVM7SUFpQmpELFlBQ3FCLCtCQUFnRSxFQUNoRSxvQkFBcUM7UUFFeEQsS0FBSyxFQUFFLENBQUM7UUFIVyxvQ0FBK0IsR0FBL0IsK0JBQStCLENBQWlDO1FBQ2hFLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBaUI7UUFYekMsdUNBQWtDLEdBQWlCLElBQUksQ0FBQywrQkFBK0I7YUFDckcsOEJBQThCLEVBQUU7YUFDaEMsU0FBUyxDQUFDLENBQUMsV0FBd0MsRUFBRSxFQUFFO1lBQ3RELElBQUksV0FBVyxFQUFFO2dCQUNmLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO2dCQUMvQixJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7YUFDdEU7UUFDSCxDQUFDLENBQUMsQ0FBQztJQU9MLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLDBCQUEwQixJQUFJLElBQUksQ0FBQyx1QkFBdUIsS0FBSyxTQUFTLEVBQUU7WUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQyw2RUFBNkUsQ0FBQyxDQUFDO1NBQ2hHO1FBRUQsSUFBSSxJQUFJLENBQUMsMEJBQTBCLElBQUksSUFBSSxDQUFDLHNCQUFzQixLQUFLLFNBQVMsRUFBRTtZQUNoRixNQUFNLElBQUksS0FBSyxDQUFDLDRFQUE0RSxDQUFDLENBQUM7U0FDL0Y7UUFFRCxJQUFJLElBQUksQ0FBQywwQkFBMEIsS0FBSyxLQUFLLEVBQUU7WUFDN0MsSUFBSSxJQUFJLENBQUMsMEJBQTBCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDLDBCQUEwQixFQUFFO2dCQUMxRixJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZO3FCQUMxRCxJQUFJLENBQ0gsb0JBQW9CLEVBQUUsRUFDdEIsWUFBWSxDQUNWLENBQUMsSUFBSSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FDdEcsQ0FDRjtxQkFDQSxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDbkIsS0FBSyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQ3pDLEtBQUssRUFDTCxJQUFJLENBQUMsc0JBQXNCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQzFELElBQUksQ0FDTCxDQUFDO29CQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNwQyxDQUFDLENBQUMsQ0FBQzthQUNOO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RELElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQ2hDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUM1QztJQUNILENBQUM7O2tIQXBFVSxvQkFBb0I7c0dBQXBCLG9CQUFvQjs0RkFBcEIsb0JBQW9CO2tCQUpoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSw4QkFBOEI7aUJBQ3pDO29KQU1VLHNCQUFzQjtzQkFBOUIsS0FBSztnQkFDRyx1QkFBdUI7c0JBQS9CLEtBQUs7Z0JBQ0csMEJBQTBCO3NCQUFsQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvdW50cnlDb2RlIH0gZnJvbSAnQGJhY2tiYXNlL3Bob25lLW51bWJlci1saWInO1xuaW1wb3J0IHsgUGhvbmVOdW1iZXJQaXBlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9waG9uZS1udW1iZXItZm9ybWF0LXBpcGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgTWFuYWdlUHJvZmlsZVByZWZlcmVuY2VzU2VydmljZSxcbiAgUGhvbmVOdW1iZXJJbnB1dFByZWZlcmVuY2VzLFxufSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9tYW5hZ2UtcHJvZmlsZS9tYW5hZ2UtcHJvZmlsZS1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcbmltcG9ydCB7IElucHV0QmFzZSB9IGZyb20gJy4uL2lucHV0LWJhc2UvaW5wdXQtYmFzZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYlVzZXJQaG9uZU51bWJlcklucHV0QmFzZV0nLFxufSlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFBob25lTnVtYmVySW5wdXRCYXNlIGV4dGVuZHMgSW5wdXRCYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHBob25lTnVtYmVyU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgcHJlZmVyZW5jZXM6IFBob25lTnVtYmVySW5wdXRQcmVmZXJlbmNlcyB8IHVuZGVmaW5lZDtcblxuICBASW5wdXQoKSBwaG9uZU51bWJlckNvdW50cnlDb2RlOiBDb3VudHJ5Q29kZSB8IHVuZGVmaW5lZDtcbiAgQElucHV0KCkgcGhvbmVOdW1iZXJEZWJvdW5jZVRpbWU6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgQElucHV0KCkgZW5hYmxlUGhvbmVOdW1iZXJGb3JtYXR0ZXI6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBwaG9uZU51bWJlclByZWZlcmVuY2VzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSB0aGlzLm1hbmFnZVByb2ZpbGVQcmVmZXJlbmNlc1NlcnZpY2VcbiAgICAuZ2V0UGhvbmVOdW1iZXJJbnB1dFByZWZlcmVuY2VzKClcbiAgICAuc3Vic2NyaWJlKChwcmVmZXJlbmNlczogUGhvbmVOdW1iZXJJbnB1dFByZWZlcmVuY2VzKSA9PiB7XG4gICAgICBpZiAocHJlZmVyZW5jZXMpIHtcbiAgICAgICAgdGhpcy5wcmVmZXJlbmNlcyA9IHByZWZlcmVuY2VzO1xuICAgICAgICB0aGlzLnByZWZlcmVuY2VzLmRlYm91bmNlVGltZSA9IHRoaXMucHJlZmVyZW5jZXMuZGVib3VuY2VUaW1lICogMTAwMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbWFuYWdlUHJvZmlsZVByZWZlcmVuY2VzU2VydmljZTogTWFuYWdlUHJvZmlsZVByZWZlcmVuY2VzU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGhvbmVOdW1iZXJGb3JtYXR0ZXI6IFBob25lTnVtYmVyUGlwZSxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmVuYWJsZVBob25lTnVtYmVyRm9ybWF0dGVyICYmIHRoaXMucGhvbmVOdW1iZXJEZWJvdW5jZVRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwaG9uZU51bWJlckRlYm91bmNlVGltZSBpcyByZXF1aXJlZCB3aGVuIGVuYWJsZVBob25lTnVtYmVyRm9ybWF0dGVyIGlzIHRydWVgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbmFibGVQaG9uZU51bWJlckZvcm1hdHRlciAmJiB0aGlzLnBob25lTnVtYmVyQ291bnRyeUNvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBwaG9uZU51bWJlckNvdW50cnlDb2RlIGlzIHJlcXVpcmVkIHdoZW4gZW5hYmxlUGhvbmVOdW1iZXJGb3JtYXR0ZXIgaXMgdHJ1ZWApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVuYWJsZVBob25lTnVtYmVyRm9ybWF0dGVyICE9PSBmYWxzZSkge1xuICAgICAgaWYgKHRoaXMuZW5hYmxlUGhvbmVOdW1iZXJGb3JtYXR0ZXIgfHwgKHRoaXMucHJlZmVyZW5jZXMgfHwge30pLmVuYWJsZVBob25lTnVtYmVyRm9ybWF0dGVyKSB7XG4gICAgICAgIHRoaXMucGhvbmVOdW1iZXJTdWJzY3JpcHRpb24gPSB0aGlzLmZpZWxkQ29udHJvbC52YWx1ZUNoYW5nZXNcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgICAgICBkZWJvdW5jZVRpbWUoXG4gICAgICAgICAgICAgICh0aGlzLnBob25lTnVtYmVyRGVib3VuY2VUaW1lICYmIHRoaXMucGhvbmVOdW1iZXJEZWJvdW5jZVRpbWUgKiAxMDAwKSB8fCB0aGlzLnByZWZlcmVuY2UuZGVib3VuY2VUaW1lLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApXG4gICAgICAgICAgLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5waG9uZU51bWJlckZvcm1hdHRlci50cmFuc2Zvcm0oXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICB0aGlzLnBob25lTnVtYmVyQ291bnRyeUNvZGUgfHwgdGhpcy5wcmVmZXJlbmNlLmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZmllbGRDb250cm9sLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgcHJlZmVyZW5jZSgpIHtcbiAgICBpZiAoIXRoaXMucHJlZmVyZW5jZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJlZmVyZW5jZXMgYXJlIG5vdCBkZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJlZmVyZW5jZXM7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnBob25lTnVtYmVyUHJlZmVyZW5jZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICBpZiAodGhpcy5waG9uZU51bWJlclN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5waG9uZU51bWJlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19