import { CreateIdentityRequest, CreateIdentityResponse, GetIdentity, GetIdentitySessions, GetPendingApproval, IdentityManagementService, UpdateIdentityRequest, UserManagementService } from '@backbase/data-ang/user';
import { Observable } from 'rxjs';
import { UserActions } from '../../types/user-actions.enum';
import { ApprovalType } from '../../types/user-approval-type.enum';
import * as i0 from "@angular/core";
export declare class UserDataService {
    private readonly userManagementService;
    private readonly identityManagementService;
    constructor(userManagementService: UserManagementService, identityManagementService: IdentityManagementService);
    checkUsernameAvailability(externalId: string): Observable<boolean>;
    createUser(createIdentityRequest: CreateIdentityRequest): Observable<CreateIdentityResponse>;
    getPendingApprovalsByInternalIdAndType(internalId: string, type: ApprovalType): Observable<GetPendingApproval[]>;
    getPendingApprovalsByInternalId(internalId: string): Observable<GetPendingApproval[]>;
    getUsersIdentitiesSessionsByInternalId(internalId: string): Observable<GetIdentitySessions>;
    updateUsersIdentitiesSessionsLogoutRecordByInternalId(internalId: string, sessionIds?: Array<string>): Observable<any>;
    updateUserActions(internalId: string, actions: UserActions[]): Observable<any>;
    updateUserRecordActions(internalId: string, updateIdentityRequest: UpdateIdentityRequest): Observable<any>;
    changeUserPassword(existingPassword: string, newPassword: string): Observable<any>;
    getUserDetails(internalId: string): Observable<GetIdentity>;
    private isNotFound;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserDataService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserDataService>;
}
