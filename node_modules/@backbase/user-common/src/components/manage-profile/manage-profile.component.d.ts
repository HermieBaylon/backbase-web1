import { HttpErrorResponse } from '@angular/common/http';
import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { UserProfile } from '../../common-types';
import { ManageProfilePreferencesService, WidgetPreferences } from '../../services/manage-profile/manage-profile-preferences.service';
import * as i0 from "@angular/core";
export declare class ManageProfileComponent implements OnDestroy, OnInit {
    protected readonly manageProfilePreferencesService: ManageProfilePreferencesService;
    protected readonly cd: ChangeDetectorRef;
    notificationDismissTime: number | undefined;
    userProfile: UserProfile | undefined;
    loadingState: boolean;
    loadingErrorState: boolean;
    loadingError: HttpErrorResponse | undefined;
    disableAddressManaging: boolean;
    /** @deprecated */
    readonly widgetPreferences: Observable<WidgetPreferences>;
    protected readonly userProfileSubject: BehaviorSubject<undefined>;
    private userProfileObservable;
    private userProfileSubscription;
    refreshProfileData(): void;
    handleManageAddressOpen(): void;
    handleManageAddressClose(): void;
    readonly handleProfileError: (error: HttpErrorResponse) => Observable<UserProfile>;
    readonly onProfileUpdate: () => void;
    protected setUserProfileObservable(): Observable<UserProfile>;
    constructor(manageProfilePreferencesService: ManageProfilePreferencesService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageProfileComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ManageProfileComponent, "ng-component", never, { "notificationDismissTime": "notificationDismissTime"; }, {}, never, never>;
}
