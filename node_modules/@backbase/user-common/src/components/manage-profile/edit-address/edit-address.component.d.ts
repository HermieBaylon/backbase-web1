import { HttpResponse } from '@angular/common/http';
import { ChangeDetectorRef, EventEmitter, OnDestroy, TemplateRef } from '@angular/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Observable, Subscription } from 'rxjs';
import { ManageProfilePreferencesService } from '../../../services/manage-profile/manage-profile-preferences.service';
import * as i0 from "@angular/core";
export declare class EditAddressComponent implements OnDestroy {
    protected readonly manageProfilePreferencesService: ManageProfilePreferencesService;
    protected readonly cd: ChangeDetectorRef;
    protected readonly notificationService: NotificationService;
    close: EventEmitter<void>;
    closeAfterSave: EventEmitter<void>;
    notificationUpdateSuccessTemplate: TemplateRef<any> | undefined;
    notificationDeleteSuccessTemplate: TemplateRef<any> | undefined;
    notificationFailureTemplate: TemplateRef<any> | undefined;
    set notificationDismissTime(value: number | undefined);
    isSubmitting: boolean;
    private dismissTimeout;
    private readonly notificationDismissTimeSubject;
    dismissTimeoutPreferenceSubscription: Subscription;
    constructor(manageProfilePreferencesService: ManageProfilePreferencesService, cd: ChangeDetectorRef, notificationService: NotificationService);
    handleCancelClick(): void;
    readonly handleUpdateResponse: () => (source: Observable<HttpResponse<undefined>>) => Observable<HttpResponse<undefined> | undefined>;
    readonly handleDeleteResponse: () => (source: Observable<HttpResponse<undefined>>) => Observable<HttpResponse<undefined> | undefined>;
    private readonly onFormSubmissionSuccessful;
    private readonly onDeletionSuccessful;
    private onSuccess;
    private readonly onFormSubmissionUnsuccessful;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EditAddressComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EditAddressComponent, "ng-component", never, { "notificationDismissTime": "notificationDismissTime"; }, { "close": "close"; "closeAfterSave": "closeAfterSave"; }, never, never>;
}
