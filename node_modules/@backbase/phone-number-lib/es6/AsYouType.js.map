{"version":3,"sources":["../source/AsYouType.js"],"names":["Metadata","PhoneNumber","matches_entirely","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","extractCountryCallingCode","extract_formatted_phone_number","find_country_code","strip_national_prefix_and_carrier_code","FIRST_GROUP_PATTERN","format_national_number_using_format","local_to_international_style","check_number_length_for_type","parseIncompletePhoneNumber","DUMMY_DIGIT","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","RegExp","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","country_code","metadata","options","hasCountry","default_country","reset","text","extracted_number","indexOf","test","current_output","process_input","input","parsed_input","reset_countriness","slice","national_number","is_international","countryCallingCode","extract_country_calling_code","initialize_phone_number_formats_for_this_country_calling_code","reset_format","determine_the_country","country","previous_national_prefix","national_prefix","extract_national_prefix","matching_formats","undefined","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","format_national_phone_number","full_phone_number","next_digits","national_number_formatted_with_previous_format","chosen_format","format_next_national_number_digits","formatted_number","attempt_to_format_complete_phone_number","choose_another_format","reformat_national_number","carrierCode","reset_country","available_formats","template","partially_populated_template","last_match_position","formats","filter","format","internationalFormat","leading_digits","index_of_leading_digits_pattern","length","had_enough_leading_digits","should_format","leading_digits_patterns_count","leadingDigitsPatterns","leading_digits_pattern_index","Math","min","leading_digits_pattern","matcher","pattern","is_format_applicable","create_formatting_template","full_number","replace","formatted_national_number","number","chooseCountryByCountryCallingCode","selectedCountry","potential_national_number","possibleLengths","is_possible_number","nationalNumberPattern","validation_result","nationalPrefixIsMandatoryWhenFormatting","get_template_for_phone_number_format_pattern","number_pattern","dummy_phone_number_matching_format_pattern","match","number_format","get_format_format","strict_pattern","national_number_dummy_digits","digits","split","digit","search","cut_stripping_dangling_braces","nationalPrefixFormattingRule","usesNationalPrefix","phoneNumber","index","i","strip_dangling_braces","string","dangling_braces","push","pop","start","cleared_string","cut_before_index","close_dangling_braces","cut_before","retained_template","opening_braces","count_occurences","closing_braces","symbol","count","character","times","result"],"mappings":"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","file":"AsYouType.js","sourcesContent":["// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of October 26th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata'\n\nimport PhoneNumber from './PhoneNumber'\n\nimport\n{\n\tmatches_entirely,\n\tVALID_DIGITS,\n\tVALID_PUNCTUATION,\n\tPLUS_CHARS,\n\textractCountryCallingCode\n}\nfrom './common'\n\nimport\n{\n\textract_formatted_phone_number,\n\tfind_country_code,\n\tstrip_national_prefix_and_carrier_code\n}\nfrom './parse'\n\nimport\n{\n\tFIRST_GROUP_PATTERN,\n\tformat_national_number_using_format,\n\tlocal_to_international_style\n}\nfrom './format'\n\nimport\n{\n\tcheck_number_length_for_type\n}\nfrom './getNumberType'\n\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nconst DUMMY_DIGIT = '9'\n// I don't know why is it exactly `15`\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nconst CREATE_CHARACTER_CLASS_PATTERN = () => /\\[([^\\[\\]])*\\]/g\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nconst CREATE_STANDALONE_DIGIT_PATTERN = () => /\\d(?=[^,}][^,}])/g\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp\n(\n\t'^' +\n\t'[' + VALID_PUNCTUATION + ']*' +\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\n\t'$'\n)\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nconst MIN_LEADING_DIGITS_LENGTH = 3\n\nconst VALID_INCOMPLETE_PHONE_NUMBER =\n\t'[' + PLUS_CHARS + ']{0,1}' +\n\t'[' +\n\t\tVALID_PUNCTUATION +\n\t\tVALID_DIGITS +\n\t']*'\n\nconst VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i')\n\nexport default class AsYouType\n{\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\toptions = {}\n\n\t/**\n\t * @param {string} [country_code] - The default country used for parsing non-international phone numbers.\n\t * @param {Object} metadata\n\t */\n\tconstructor(country_code, metadata)\n\t{\n\t\tthis.metadata = new Metadata(metadata)\n\n\t\tif (country_code && this.metadata.hasCountry(country_code))\n\t\t{\n\t\t\tthis.default_country = country_code\n\t\t}\n\n\t\tthis.reset()\n\t}\n\n\tinput(text)\n\t{\n\t\t// Parse input\n\n\t\tlet extracted_number = extract_formatted_phone_number(text) || ''\n\n\t\t// Special case for a lone '+' sign\n\t\t// since it's not considered a possible phone number.\n\t\tif (!extracted_number)\n\t\t{\n\t\t\tif (text && text.indexOf('+') >= 0)\n\t\t\t{\n\t\t\t\textracted_number = '+'\n\t\t\t}\n\t\t}\n\n\t\t// Validate possible first part of a phone number\n\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number))\n\t\t{\n\t\t\treturn this.current_output\n\t\t}\n\n\t\treturn this.process_input(parseIncompletePhoneNumber(extracted_number))\n\t}\n\n\tprocess_input(input)\n\t{\n\t\t// If an out of position '+' sign detected\n\t\t// (or a second '+' sign),\n\t\t// then just drop it from the input.\n\t\tif (input[0] === '+')\n\t\t{\n\t\t\tif (!this.parsed_input)\n\t\t\t{\n\t\t\t\tthis.parsed_input += '+'\n\n\t\t\t\t// If a default country was set\n\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t// phone number is being entered\n\t\t\t\tthis.reset_countriness()\n\t\t\t}\n\n\t\t\tinput = input.slice(1)\n\t\t}\n\n\t\t// Raw phone number\n\t\tthis.parsed_input += input\n\n\t\t// // Reset phone number validation state\n\t\t// this.valid = false\n\n\t\t// Add digits to the national number\n\t\tthis.national_number += input\n\n\t\t// TODO: Deprecated: rename `this.national_number`\n\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t// Try to format the parsed input\n\n\t\tif (this.is_international())\n\t\t{\n\t\t\tif (!this.countryCallingCode)\n\t\t\t{\n\t\t\t\t// No need to format anything\n\t\t\t\t// if there's no national phone number.\n\t\t\t\t// (e.g. just the country calling code)\n\t\t\t\tif (!this.national_number)\n\t\t\t\t{\n\t\t\t\t\t// Return raw phone number\n\t\t\t\t\treturn this.parsed_input\n\t\t\t\t}\n\n\t\t\t\t// If one looks at country phone codes\n\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t// then just return the raw phone number,\n\t\t\t\t// because it has no way of knowing\n\t\t\t\t// how to format the phone number so far.\n\t\t\t\tif (!this.extract_country_calling_code())\n\t\t\t\t{\n\t\t\t\t\t// Return raw phone number\n\t\t\t\t\treturn this.parsed_input\n\t\t\t\t}\n\n\t\t\t\t// Initialize country-specific data\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\n\t\t\t\tthis.reset_format()\n\t\t\t\tthis.determine_the_country()\n\t\t\t}\n\t\t\t// `this.country` could be `undefined`,\n\t\t\t// for instance, when there is ambiguity\n\t\t\t// in a form of several different countries\n\t\t\t// each corresponding to the same country phone code\n\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t// and there's not enough digits entered\n\t\t\t// to reliably determine the country\n\t\t\t// the phone number belongs to.\n\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t// each time something is input,\n\t\t\t// try to determine the country\n\t\t\t// (if it's not determined yet).\n\t\t\telse if (!this.country)\n\t\t\t{\n\t\t\t\tthis.determine_the_country()\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\tconst previous_national_prefix = this.national_prefix\n\t\t\tthis.national_number = this.national_prefix + this.national_number\n\n\t\t\t// Possibly extract a national prefix\n\t\t\tthis.extract_national_prefix()\n\n\t\t\tif (this.national_prefix !== previous_national_prefix)\n\t\t\t{\n\t\t\t\t// National number has changed\n\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t// therefore national number has changed\n\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t// (and leading digits matching state)\n\t\t\t\tthis.matching_formats = undefined\n\t\t\t\tthis.reset_format()\n\t\t\t}\n\t\t}\n\n\t\t// if (!this.should_format())\n\t\t// {\n\t\t// \treturn this.format_as_non_formatted_number()\n\t\t// }\n\n\t\tif (!this.national_number)\n\t\t{\n\t\t\treturn this.format_as_non_formatted_number()\n\t\t}\n\n\t\t// Check the available phone number formats\n\t\t// based on the currently available leading digits.\n\t\tthis.match_formats_by_leading_digits()\n\n\t\t// Format the phone number (given the next digits)\n\t\tconst formatted_national_phone_number = this.format_national_phone_number(input)\n\n\t\t// If the phone number could be formatted,\n\t\t// then return it, possibly prepending with country phone code\n\t\t// (for international phone numbers only)\n\t\tif (formatted_national_phone_number)\n\t\t{\n\t\t\treturn this.full_phone_number(formatted_national_phone_number)\n\t\t}\n\n\t\t// If the phone number couldn't be formatted,\n\t\t// then just fall back to the raw phone number.\n\t\treturn this.format_as_non_formatted_number()\n\t}\n\n\tformat_as_non_formatted_number()\n\t{\n\t\t// Strip national prefix for incorrectly inputted international phones.\n\t\tif (this.is_international() && this.countryCallingCode)\n\t\t{\n\t\t\treturn `+${this.countryCallingCode}${this.national_number}`\n\t\t}\n\n\t\treturn this.parsed_input\n\t}\n\n\tformat_national_phone_number(next_digits)\n\t{\n\t\t// Format the next phone number digits\n\t\t// using the previously chosen phone number format.\n\t\t//\n\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t// was placed before this call then the `template`\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t//\n\t\tlet national_number_formatted_with_previous_format\n\t\tif (this.chosen_format)\n\t\t{\n\t\t\tnational_number_formatted_with_previous_format = this.format_next_national_number_digits(next_digits)\n\t\t}\n\n\t\t// See if the input digits can be formatted properly already. If not,\n\t\t// use the results from format_next_national_number_digits(), which does formatting\n\t\t// based on the formatting pattern chosen.\n\n\t\tconst formatted_number = this.attempt_to_format_complete_phone_number()\n\n\t\t// Just because a phone number doesn't have a suitable format\n\t\t// that doesn't mean that the phone is invalid\n\t\t// because phone number formats only format phone numbers,\n\t\t// they don't validate them and some (rare) phone numbers\n\t\t// are meant to stay non-formatted.\n\t\tif (formatted_number)\n\t\t{\n\t\t\treturn formatted_number\n\t\t}\n\n\t\t// For some phone number formats national prefix\n\n\t\t// If the previously chosen phone number format\n\t\t// didn't match the next (current) digit being input\n\t\t// (leading digits pattern didn't match).\n\t\tif (this.choose_another_format())\n\t\t{\n\t\t\t// And a more appropriate phone number format\n\t\t\t// has been chosen for these `leading digits`,\n\t\t\t// then format the national phone number (so far)\n\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t// the supplied national number\n\t\t\t// using the selected phone number pattern.\n\n\t\t\treturn this.reformat_national_number()\n\t\t}\n\n\t\t// If could format the next (current) digit\n\t\t// using the previously chosen phone number format\n\t\t// then return the formatted number so far.\n\n\t\t// If no new phone number format could be chosen,\n\t\t// and couldn't format the supplied national number\n\t\t// using the selected phone number pattern,\n\t\t// then it will return `undefined`.\n\n\t\treturn national_number_formatted_with_previous_format\n\t}\n\n\treset()\n\t{\n\t\t// Input stripped of non-phone-number characters.\n\t\t// Can only contain a possible leading '+' sign and digits.\n\t\tthis.parsed_input = ''\n\n\t\tthis.current_output = ''\n\n\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t// digits without formatting.\n\t\tthis.national_prefix = ''\n\n\t\tthis.national_number = ''\n\t\tthis.carrierCode = ''\n\n\t\tthis.reset_countriness()\n\n\t\tthis.reset_format()\n\n\t\t// this.valid = false\n\n\t\treturn this\n\t}\n\n\treset_country()\n\t{\n\t\tif (this.is_international())\n\t\t{\n\t\t\tthis.country = undefined\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.country = this.default_country\n\t\t}\n\t}\n\n\treset_countriness()\n\t{\n\t\tthis.reset_country()\n\n\t\tif (this.default_country && !this.is_international())\n\t\t{\n\t\t\tthis.metadata.country(this.default_country)\n\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode()\n\n\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.metadata.country(undefined)\n\t\t\tthis.countryCallingCode = undefined\n\n\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\t\t\tthis.available_formats = []\n\t\t\tthis.matching_formats = undefined\n\t\t}\n\t}\n\n\treset_format()\n\t{\n\t\tthis.chosen_format = undefined\n\t\tthis.template = undefined\n\t\tthis.partially_populated_template = undefined\n\t\tthis.last_match_position = -1\n\t}\n\n\t// Format each digit of national phone number (so far)\n\t// using the newly selected phone number pattern.\n\treformat_national_number()\n\t{\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the selected phone number pattern.\n\t\treturn this.format_next_national_number_digits(this.national_number)\n\t}\n\n\tinitialize_phone_number_formats_for_this_country_calling_code()\n\t{\n\t\t// Get all \"eligible\" phone number formats for this country\n\t\tthis.available_formats = this.metadata.formats().filter((format) =>\n\t\t{\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat())\n\t\t})\n\n\t\tthis.matching_formats = undefined\n\t}\n\n\tmatch_formats_by_leading_digits()\n\t{\n\t\tconst leading_digits = this.national_number\n\n\t\t// \"leading digits\" pattern list starts with a\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t// this national (significant) number can already be formatted.\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t// This implementation is different from Google's\n\t\t// in that it searches for a fitting format\n\t\t// even if the user has entered less than\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t// Because some leading digits patterns already match for a single first digit.\n\t\tlet index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH\n\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\tindex_of_leading_digits_pattern = 0\n\t\t}\n\n\t\t// \"Available formats\" are all formats available for the country.\n\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t// then format matching starts narrowing down the list of possible formats\n\t\t// (only previously matched formats are considered for next digits).\n\t\tconst available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats\n\t\tthis.had_enough_leading_digits = this.should_format()\n\n\t\tthis.matching_formats = available_formats.filter((format) =>\n\t\t{\n\t\t\tconst leading_digits_patterns_count = format.leadingDigitsPatterns().length\n\n\t\t\t// If this format is not restricted to a certain\n\t\t\t// leading digits pattern then it fits.\n\t\t\tif (leading_digits_patterns_count === 0)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tconst leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1)\n\t\t\tconst leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]\n\n\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\treturn new RegExp(`^(${leading_digits_pattern})`).test(leading_digits)\n\t\t})\n\n\t\t// If there was a phone number format chosen\n\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t// The test for this `if` condition is marked as:\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t// To construct a valid test case for this one can find a country\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\tif (this.chosen_format && this.matching_formats.indexOf(this.chosen_format) === -1)\n\t\t{\n\t\t\tthis.reset_format()\n\t\t}\n\t}\n\n\tshould_format()\n\t{\n\t\t// Start matching any formats at all when the national number\n\t\t// entered so far is at least 3 digits long,\n\t\t// otherwise format matching would give false negatives\n\t\t// like when the digits entered so far are `2`\n\t\t// and the leading digits pattern is `21` –\n\t\t// it's quite obvious in this case that the format could be the one\n\t\t// but due to the absence of further digits it would give false negative.\n\t\t//\n\t\t// Presumably the limitation of \"3 digits min\"\n\t\t// is imposed to exclude false matches,\n\t\t// e.g. when there are two different formats\n\t\t// each one fitting one or two leading digits being input.\n\t\t// But for this case I would propose a specific `if/else` condition.\n\t\t//\n\t\treturn this.national_number.length >= MIN_LEADING_DIGITS_LENGTH\n\t}\n\n\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t// should use this instead of any other formatting template whose\n\t// `leadingDigitsPattern` also matches the input.\n\tattempt_to_format_complete_phone_number()\n\t{\n\t\tfor (const format of this.matching_formats)\n\t\t{\n\t\t\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\n\n\t\t\tif (!matcher.test(this.national_number))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (!this.is_format_applicable(format))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// To leave the formatter in a consistent state\n\t\t\tthis.reset_format()\n\t\t\tthis.chosen_format = format\n\n\t\t\tconst formatted_number = format_national_number_using_format\n\t\t\t(\n\t\t\t\tthis.national_number,\n\t\t\t\tformat,\n\t\t\t\tthis.is_international(),\n\t\t\t\tthis.national_prefix.length > 0,\n\t\t\t\tthis.metadata\n\t\t\t)\n\n\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t//\n\t\t\t// `else` case doesn't ever happen\n\t\t\t// with the current metadata,\n\t\t\t// but just in case.\n\t\t\t//\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.create_formatting_template(format))\n\t\t\t{\n\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\tthis.reformat_national_number()\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\tconst full_number = this.full_phone_number(formatted_number)\n\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\n\t\t\t\tthis.partially_populated_template = full_number\n\t\t\t}\n\n\t\t\treturn formatted_number\n\t\t}\n\t}\n\n\t// Prepends `+CountryCode` in case of an international phone number\n\tfull_phone_number(formatted_national_number)\n\t{\n\t\tif (this.is_international())\n\t\t{\n\t\t\treturn `+${this.countryCallingCode} ${formatted_national_number}`\n\t\t}\n\n\t\treturn formatted_national_number\n\t}\n\n\t// Extracts the country calling code from the beginning\n\t// of the entered `national_number` (so far),\n\t// and places the remaining input into the `national_number`.\n\textract_country_calling_code()\n\t{\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(this.parsed_input, this.default_country, this.metadata.metadata)\n\n\t\tif (!countryCallingCode)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\tthis.countryCallingCode = countryCallingCode\n\n\t\t// Sometimes people erroneously write national prefix\n\t\t// as part of an international number, e.g. +44 (0) ....\n\t\t// This violates the standards for international phone numbers,\n\t\t// so \"As You Type\" formatter assumes no national prefix\n\t\t// when parsing a phone number starting from `+`.\n\t\t// Even if it did attempt to filter-out that national prefix\n\t\t// it would look weird for a user trying to enter a digit\n\t\t// because from user's perspective the keyboard \"wouldn't be working\".\n\t\tthis.national_number = number\n\n\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode)\n\t\treturn this.metadata.selectedCountry() !== undefined\n\t}\n\n\textract_national_prefix()\n\t{\n\t\tthis.national_prefix = ''\n\n\t\tif (!this.metadata.selectedCountry())\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// Only strip national prefixes for non-international phone numbers\n\t\t// because national prefixes can't be present in international phone numbers.\n\t\t// Otherwise, while forgiving, it would parse a NANPA number `+1 1877 215 5230`\n\t\t// first to `1877 215 5230` and then, stripping the leading `1`, to `877 215 5230`,\n\t\t// and then it would assume that's a valid number which it isn't.\n\t\t// So no forgiveness for grandmas here.\n\t\t// The issue asking for this fix:\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/159\n\t\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(this.national_number, this.metadata)\n\n\t\tif (carrierCode) {\n\t\t\tthis.carrierCode = carrierCode\n\t\t}\n\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tif (!this.metadata.possibleLengths() ||\n\t\t\tthis.is_possible_number(this.national_number) &&\n\t\t\t!this.is_possible_number(potential_national_number))\n\t\t{\n\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t//\n\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\tif (matches_entirely(this.national_number, this.metadata.nationalNumberPattern()) &&\n\t\t\t\t!matches_entirely(potential_national_number, this.metadata.nationalNumberPattern()))\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tthis.national_prefix = this.national_number.slice(0, this.national_number.length - potential_national_number.length)\n\t\tthis.national_number = potential_national_number\n\n\t\treturn this.national_prefix\n\t}\n\n\tis_possible_number(number)\n\t{\n\t\tconst validation_result = check_number_length_for_type(number, undefined, this.metadata)\n\t\tswitch (validation_result)\n\t\t{\n\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\treturn true\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t// \treturn !this.is_international()\n\t\t\tdefault:\n\t\t\t\treturn false\n\t\t}\n\t}\n\n\tchoose_another_format()\n\t{\n\t\t// When there are multiple available formats, the formatter uses the first\n\t\t// format where a formatting template could be created.\n\t\tfor (const format of this.matching_formats)\n\t\t{\n\t\t\t// If this format is currently being used\n\t\t\t// and is still possible, then stick to it.\n\t\t\tif (this.chosen_format === format)\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t// then extract the template from this format\n\t\t\t// and use it to format the phone number being input.\n\n\t\t\tif (!this.is_format_applicable(format))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (!this.create_formatting_template(format))\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tthis.chosen_format = format\n\n\t\t\t// With a new formatting template, the matched position\n\t\t\t// using the old template needs to be reset.\n\t\t\tthis.last_match_position = -1\n\n\t\t\treturn true\n\t\t}\n\n\t\t// No format matches the phone number,\n\t\t// therefore set `country` to `undefined`\n\t\t// (or to the default country).\n\t\tthis.reset_country()\n\n\t\t// No format matches the national phone number entered\n\t\tthis.reset_format()\n\t}\n\n\tis_format_applicable(format)\n\t{\n\t\t// If national prefix is mandatory for this phone number format\n\t\t// and the user didn't input the national prefix,\n\t\t// then this phone number format isn't suitable.\n\t\tif (!this.is_international() && !this.national_prefix && format.nationalPrefixIsMandatoryWhenFormatting())\n\t\t{\n\t\t\treturn false\n\t\t}\n\n\t\treturn true\n\t}\n\n\tcreate_formatting_template(format)\n\t{\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t// (Though there's no such format in current metadata)\n\t\t/* istanbul ignore if */\n\t\tif (format.pattern().indexOf('|') >= 0)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// Get formatting template for this phone number format\n\t\tconst template = this.get_template_for_phone_number_format_pattern(format)\n\n\t\t// If the national number entered is too long\n\t\t// for any phone number format, then abort.\n\t\tif (!template)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// This one is for national number only\n\t\tthis.partially_populated_template = template\n\n\t\t// For convenience, the public `.template` property\n\t\t// contains the whole international number\n\t\t// if the phone number being input is international:\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t// a spacebar and then the template for the formatted national number.\n\t\tif (this.is_international())\n\t\t{\n\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template\n\t\t}\n\t\t// For local numbers, replace national prefix\n\t\t// with a digit placeholder.\n\t\telse\n\t\t{\n\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER)\n\t\t}\n\n\t\t// This one is for the full phone number\n\t\treturn this.template\n\t}\n\n\t// Generates formatting template for a phone number format\n\tget_template_for_phone_number_format_pattern(format)\n\t{\n\t\t// A very smart trick by the guys at Google\n\t\tconst number_pattern = format.pattern()\n\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\n\n\t\t// This match will always succeed,\n\t\t// because the \"longest dummy phone number\"\n\t\t// has enough length to accomodate any possible\n\t\t// national phone number format pattern.\n\t\tlet dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]\n\n\t\t// If the national number entered is too long\n\t\t// for any phone number format, then abort.\n\t\tif (this.national_number.length > dummy_phone_number_matching_format_pattern.length)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// Prepare the phone number format\n\t\tconst number_format = this.get_format_format(format)\n\n\t\t// Get a formatting template which can be used to efficiently format\n\t\t// a partial number where digits are added one by one.\n\n\t\t// Below `strict_pattern` is used for the\n\t\t// regular expression (with `^` and `$`).\n\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t// and I guess they don't really need it\n\t\t// because they're not using \"templates\" to format phone numbers\n\t\t// but I added `strict_pattern` after encountering\n\t\t// South Korean phone number formatting bug.\n\t\t//\n\t\t// Non-strict regular expression bug demonstration:\n\t\t//\n\t\t// this.national_number : `111111111` (9 digits)\n\t\t//\n\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t// number_format : `$1 $2 $3`\n\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t//\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t//\n\t\t// template : xx xxxx xxxx\n\t\t//\n\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t// The template was generated incorrectly because of the\n\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t//\n\t\t// The fix is, if `this.national_number` has already sufficient length\n\t\t// to satisfy the `number_pattern` completely then `this.national_number` is used\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\tconst strict_pattern = new RegExp('^' + number_pattern + '$')\n\t\tconst national_number_dummy_digits = this.national_number.replace(/\\d/g, DUMMY_DIGIT)\n\n\t\t// If `this.national_number` has already sufficient length\n\t\t// to satisfy the `number_pattern` completely then use it\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\tif (strict_pattern.test(national_number_dummy_digits))\n\t\t{\n\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits\n\t\t}\n\n\t\t// Generate formatting template for this phone number format\n\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\n\t}\n\n\tformat_next_national_number_digits(digits)\n\t{\n\t\t// Using `.split('')` to iterate through a string here\n\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t// `.split('')` is generally not safe for Unicode,\n\t\t// but in this particular case for `digits` it is safe.\n\t\t// for (const digit of digits)\n\t\tfor (const digit of digits.split(''))\n\t\t{\n\t\t\t// If there is room for more digits in current `template`,\n\t\t\t// then set the next digit in the `template`,\n\t\t\t// and return the formatted digits so far.\n\n\t\t\t// If more digits are entered than the current format could handle\n\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1)\n\t\t\t{\n\t\t\t\t// Reset the current format,\n\t\t\t\t// so that the new format will be chosen\n\t\t\t\t// in a subsequent `this.choose_another_format()` call\n\t\t\t\t// later in code.\n\t\t\t\tthis.chosen_format = undefined\n\t\t\t\tthis.template = undefined\n\t\t\t\tthis.partially_populated_template = undefined\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER)\n\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\n\t\t}\n\n\t\t// Return the formatted phone number so far.\n\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\n\t\t// The old way which was good for `input-format` but is not so good\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t}\n\n\tis_international()\n\t{\n\t\treturn this.parsed_input && this.parsed_input[0] === '+'\n\t}\n\n\tget_format_format(format)\n\t{\n\t\tif (this.is_international())\n\t\t{\n\t\t\treturn local_to_international_style(format.internationalFormat())\n\t\t}\n\n\t\t// If national prefix formatting rule is set\n\t\t// for this phone number format\n\t\tif (format.nationalPrefixFormattingRule())\n\t\t{\n\t\t\t// If the user did input the national prefix\n\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t// then maybe make it part of the phone number template\n\t\t\tif (this.national_prefix || !format.usesNationalPrefix())\n\t\t\t{\n\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n\t\t\t}\n\t\t}\n\n\t\treturn format.format()\n\t}\n\n\t// Determines the country of the phone number\n\t// entered so far based on the country phone code\n\t// and the national phone number.\n\tdetermine_the_country()\n\t{\n\t\tthis.country = find_country_code(this.countryCallingCode, this.national_number, this.metadata)\n\t}\n\n\tgetNumber()\n\t{\n\t\tif (!this.countryCallingCode || !this.national_number) {\n\t\t\treturn undefined\n\t\t}\n\t\tconst phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.national_number, this.metadata.metadata)\n\t\tif (this.carrierCode) {\n\t\t\tphoneNumber.carrierCode = this.carrierCode\n\t\t}\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\treturn phoneNumber\n\t}\n\n\tgetNationalNumber()\n\t{\n\t\treturn this.national_number\n\t}\n\n\tgetTemplate()\n\t{\n\t\tif (!this.template) {\n\t\t\treturn\n\t\t}\n\n\t\tlet index = -1\n\n\t\tlet i = 0\n\t\twhile (i < this.parsed_input.length)\n\t\t{\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\n\t\t\ti++\n\t\t}\n\n\t\treturn cut_stripping_dangling_braces(this.template, index + 1)\n\t}\n}\n\nexport function strip_dangling_braces(string)\n{\n\tconst dangling_braces =[]\n\tlet i = 0\n\twhile (i < string.length)\n\t{\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i)\n\t\t}\n\t\telse if (string[i] === ')') {\n\t\t\tdangling_braces.pop()\n\t\t}\n\t\ti++\n\t}\n\n\tlet start = 0\n\tlet cleared_string = ''\n\tdangling_braces.push(string.length)\n\tfor (const index of dangling_braces)\n\t{\n\t\tcleared_string += string.slice(start, index)\n\t\tstart = index + 1\n\t}\n\n\treturn cleared_string\n}\n\nexport function cut_stripping_dangling_braces(string, cut_before_index)\n{\n\tif (string[cut_before_index] === ')') {\n\t\tcut_before_index++\n\t}\n\treturn strip_dangling_braces(string.slice(0, cut_before_index))\n}\n\nexport function close_dangling_braces(template, cut_before)\n{\n\tconst retained_template = template.slice(0, cut_before)\n\n\tconst opening_braces = count_occurences('(', retained_template)\n\tconst closing_braces = count_occurences(')', retained_template)\n\n\tlet dangling_braces = opening_braces - closing_braces\n\twhile (dangling_braces > 0 && cut_before < template.length)\n\t{\n\t\tif (template[cut_before] === ')')\n\t\t{\n\t\t\tdangling_braces--\n\t\t}\n\t\tcut_before++\n\t}\n\n\treturn template.slice(0, cut_before)\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function count_occurences(symbol, string)\n{\n\tlet count = 0\n\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (const character of string.split(''))\n\t{\n\t\tif (character === symbol)\n\t\t{\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times)\n{\n\tif (times < 1)\n\t{\n\t\treturn ''\n\t}\n\n\tlet result = ''\n\n\twhile (times > 1)\n\t{\n\t\tif (times & 1)\n\t\t{\n\t\t\tresult += string\n\t\t}\n\n\t\ttimes >>= 1\n\t\tstring += string\n\t}\n\n\treturn result + string\n}"]}