{"version":3,"file":"backbase-identity-auth-impersonation.js","sources":["../../../../libs/identity-auth/impersonation/banner/banner-layout/banner-layout.component.ts","../../../../libs/identity-auth/impersonation/banner/banner-layout/banner-layout.component.html","../../../../libs/identity-auth/impersonation/impersonation-data/impersonation-data.service.ts","../../../../libs/identity-auth/impersonation/impersonation.model.ts","../../../../libs/identity-auth/impersonation/impersonation-service/impersonation.service.ts","../../../../libs/identity-auth/impersonation/banner/banner.component.ts","../../../../libs/identity-auth/impersonation/banner/banner.component.html","../../../../libs/identity-auth/impersonation/impersonation.module.ts","../../../../libs/identity-auth/impersonation/backbase-identity-auth-impersonation.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { GetOwnUser } from '@backbase/data-ang/user';\n\n@Component({\n  selector: 'bb-impersonation-banner-layout',\n  templateUrl: 'banner-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImpersonationBannerLayoutComponent {\n  /**\n   * The details of the user who is being impersonated.\n   */\n  @Input() user: GetOwnUser | undefined;\n\n  /**\n   * Emits when the impersonation session stop button is clicked.\n   */\n  @Output() readonly stop = new EventEmitter<void>();\n}\n","<bb-mode-header-ui\n  i18n-title=\"\n    Header that displays who is being emulated when the banner appears during an emulation session\n    @@bb-impersonation-banner.layout.title\"\n  title=\"Emulating {{ user?.fullName }}\"\n  data-role=\"impersonation-banner\"\n  [showCloseButton]=\"false\"\n>\n  <button\n    mode-header-status\n    bbButton\n    type=\"button\"\n    buttonSize=\"sm\"\n    color=\"danger\"\n    data-role=\"impersonation-banner-stop-button\"\n    i18n=\"Stop button used to end the emulation session @@bb-impersonation-banner.layout.button.stop\"\n    (click)=\"stop.emit()\"\n  >\n    Stop\n  </button>\n</bb-mode-header-ui>\n","import { Injectable } from '@angular/core';\nimport { IdentityImpersonationService } from '@backbase/data-ang/impersonation-v1';\nimport { UserManagementService } from '@backbase/data-ang/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImpersonationDataService {\n  constructor(\n    private readonly identityImpersonationService: IdentityImpersonationService,\n    private readonly userService: UserManagementService,\n  ) {}\n\n  getImpersonationUrl(accessToken: string, targetUserId: string, targetWebApp: string) {\n    return this.identityImpersonationService.getImpersonationTokenReference({\n      tokenReferenceRequest: {\n        targetUserId,\n        targetWebApp,\n        sourceWebApp: window.location.origin + window.location.pathname,\n        accessToken,\n      },\n    });\n  }\n\n  getAccessToken(ref: string, client: string, realm: string) {\n    return this.identityImpersonationService.getImpersonationAccessToken({\n      accessTokenRequest: {\n        realm,\n        client,\n        ref,\n      },\n    });\n  }\n\n  getOwnUser() {\n    return this.userService.getOwnUser();\n  }\n}\n","export const impersonationCodeParam = 'impersonation_code';\nexport const storageKeys = {\n  impersonation: 'is_impersonated',\n  accessToken: 'access_token',\n  refreshToken: 'refresh_token',\n};\n","import { Injectable, Optional } from '@angular/core';\nimport { AccessTokenResponse } from '@backbase/data-ang/impersonation-v1';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, first, map, switchMap } from 'rxjs/operators';\nimport { AccessToken, ɵɵOidcAuthService } from '@backbase/identity-auth';\nimport { ImpersonationDataService } from '../impersonation-data/impersonation-data.service';\nimport { impersonationCodeParam, storageKeys } from '../impersonation.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImpersonationService {\n  private readonly isImpersonated$$ = new BehaviorSubject<boolean>(this.storedState);\n  /**\n   * Flag to determine if the current user is being impersonated.\n   */\n  readonly isImpersonated$ = this.isImpersonated$$.asObservable();\n\n  /** @internal */\n  constructor(\n    private readonly dataService: ImpersonationDataService,\n    @Optional() private readonly oidcAuthService: ɵɵOidcAuthService,\n  ) {\n    if (!oidcAuthService) {\n      throw new Error(\n        `In order to use ImpersonationService, please include IdentityAuthModule to your application module`,\n      );\n    }\n    this.clearImpersonationStateOnLogout();\n  }\n\n  /**\n   * Contacts the Identity Impersonation service to obtain an impersonation url for the\n   * input user and target web app.\n   * @param targetUserId the id of the user to be impersonated.\n   * @param targetWebApp the url of the app to impersonate the user in.\n   * @returns a url for the target app containing an impersonation code.\n   */\n  readonly getImpersonationUrl = (targetUserId: string, targetWebApp: string): Observable<string> =>\n    this.oidcAuthService.accessToken$.pipe(\n      filter((token): token is AccessToken => !!token),\n      first(),\n      switchMap(({ raw }) => this.dataService.getImpersonationUrl(raw, targetUserId, targetWebApp)),\n      map(({ ref }) => this.appendParamToUrl(targetWebApp, ref)),\n    );\n\n  /**\n   * Checks the current URL for an `impersonation_code` reference.\n   * @returns a promise that resolves when the impersonation state is determined.\n   */\n  readonly checkImpersonationStatus = async (): Promise<void> => {\n    const impersonationToken = this.getImpersonationCode();\n    if (!impersonationToken) {\n      return;\n    }\n\n    const accessTokenResponse = await this.dataService\n      .getAccessToken(impersonationToken, this.getClientId(), this.getRealm())\n      .toPromise();\n\n    this.setAccessTokenToOAuthStorage(accessTokenResponse);\n    this.stripParamFromUrl();\n    this.storedState = true;\n    await this.oidcAuthService.loadDiscoveryDocument();\n    await this.oidcAuthService.refresh();\n  };\n\n  private get storedState() {\n    return !!this.oidcAuthService.storage.getItem(storageKeys.impersonation);\n  }\n\n  private set storedState(value: boolean) {\n    this.isImpersonated$$.next(value);\n    if (value) {\n      this.oidcAuthService.storage.setItem(storageKeys.impersonation, value.toString());\n    } else {\n      this.oidcAuthService.storage.removeItem(storageKeys.impersonation);\n    }\n  }\n\n  private stripParamFromUrl() {\n    const url = new URL(window.location.href);\n    url.searchParams.delete(impersonationCodeParam);\n    window.history.replaceState(window.history.state, '', url.toString());\n  }\n\n  private appendParamToUrl(targetWebAppUrl: string, value: string) {\n    const url = new URL(targetWebAppUrl);\n    url.searchParams.append(impersonationCodeParam, value);\n    return url.toString();\n  }\n\n  private setAccessTokenToOAuthStorage(response: AccessTokenResponse) {\n    this.oidcAuthService.storage.setItem(storageKeys.accessToken, response.access_token || '');\n    this.oidcAuthService.storage.setItem(storageKeys.refreshToken, response.refresh_token || '');\n  }\n\n  private getClientId() {\n    return this.oidcAuthService.authConfig.clientId || '';\n  }\n\n  private getRealm() {\n    const issuer = this.oidcAuthService.authConfig.issuer;\n    if (!issuer) {\n      return '';\n    }\n\n    return new URL(issuer).pathname.split('/').pop() || '';\n  }\n\n  private clearImpersonationStateOnLogout() {\n    this.oidcAuthService.events$\n      .pipe(\n        filter((event) => ['logout', 'session_terminated'].includes(event.type)),\n        first(),\n      )\n      .subscribe({\n        next: () => (this.storedState = false),\n      });\n  }\n\n  private getImpersonationCode() {\n    return new URLSearchParams(location.search).get(impersonationCodeParam);\n  }\n}\n","import { Component, EventEmitter, Output, Renderer2 } from '@angular/core';\nimport { GetOwnUser } from '@backbase/data-ang/user';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { ImpersonationDataService } from '../impersonation-data/impersonation-data.service';\nimport { ImpersonationService } from '../impersonation-service/impersonation.service';\n\n@Component({\n  selector: 'bb-impersonation-banner',\n  templateUrl: 'banner.component.html',\n})\nexport class ImpersonationBannerComponent {\n  /**\n   * Event Emitted when stop impersonation button is pressed.\n   * Please logout the user as your app requires.\n   */\n  @Output() stopImpersonation = new EventEmitter();\n\n  private readonly impersonatedClass = 'impersonated';\n  readonly user$: Observable<GetOwnUser> = this.impersonationService.isImpersonated$.pipe(\n    tap((state) => this.setImpersonationClass(state)),\n    filter((state) => !!state),\n    switchMap(() => this.dataService.getOwnUser()),\n  );\n\n  /** @internal */\n  constructor(\n    private readonly impersonationService: ImpersonationService,\n    private readonly dataService: ImpersonationDataService,\n    private readonly renderer: Renderer2,\n  ) {}\n\n  private readonly setImpersonationClass = (state: boolean) =>\n    state\n      ? this.renderer.addClass(document.body, this.impersonatedClass)\n      : this.renderer.removeClass(document.body, this.impersonatedClass);\n}\n","<bb-impersonation-banner-layout\n  *ngIf=\"user$ | async as user\"\n  [user]=\"user\"\n  (stop)=\"this.stopImpersonation.emit()\"\n></bb-impersonation-banner-layout>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonModule } from '@backbase/ui-ang/button';\nimport { ModeHeaderModule } from '@backbase/ui-ang/mode-header';\nimport { ImpersonationBannerLayoutComponent } from './banner/banner-layout/banner-layout.component';\nimport { ImpersonationBannerComponent } from './banner/banner.component';\n\n@NgModule({\n  imports: [CommonModule, ModeHeaderModule, ButtonModule],\n  declarations: [ImpersonationBannerLayoutComponent, ImpersonationBannerComponent],\n  exports: [ImpersonationBannerComponent],\n})\nexport class ImpersonationModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}