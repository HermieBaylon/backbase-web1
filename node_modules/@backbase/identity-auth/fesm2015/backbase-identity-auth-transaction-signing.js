import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Pipe, Optional, Inject, Component, ChangeDetectionStrategy, Input, EventEmitter, Output, NgModule } from '@angular/core';
import { BehaviorSubject, Subject, interval, from, of, ReplaySubject, throwError, Observable, timer } from 'rxjs';
import { takeUntil, map, switchMap, retry, filter, first, withLatestFrom, mapTo, catchError, retryWhen } from 'rxjs/operators';
import { __rest } from 'tslib';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@angular/common/http';
import { HttpResponse, HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/http';
import * as i3 from '@backbase/identity-auth';
import '@angular/localize/init';
import * as i1$5 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i1$1 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i2 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i1$2 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i1$3 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i6 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i1$4 from '@angular/forms';
import { Validators, ReactiveFormsModule } from '@angular/forms';
import * as i3$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i4 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i5$1 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i3$2 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i4$1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5$2 from '@backbase/ui-ang/progressbar';
import { ProgressbarModule } from '@backbase/ui-ang/progressbar';

/* eslint-disable @typescript-eslint/ban-types */

/**
 * TransactionSigningConfig Injection Token
 */
const TRANSACTION_SIGNING_CONFIG = new InjectionToken('TransactionSigningConfig injection token');

class CountdownService {
    constructor() {
        this.counter = new BehaviorSubject(0);
        this.finished = new Subject();
        this.remainingTime$ = this.counter.asObservable();
    }
    registerStart(period) {
        this.counter.next(period);
        this.dueTime = new Date().getTime() + period * 1000;
    }
    get remainingTime() {
        return Math.ceil((this.dueTime - new Date().getTime()) / 1000);
    }
    start(period) {
        this.registerStart(period);
        interval(1000)
            .pipe(takeUntil(this.finished), map(() => this.remainingTime))
            .subscribe((remainingTime) => {
            if (remainingTime > 0) {
                this.counter.next(remainingTime);
            }
            else {
                this.counter.next(0);
                this.finished.next();
            }
        });
    }
}
/** @nocollapse */ CountdownService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CountdownService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CountdownService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CountdownService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CountdownService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

var ProgressStatus;
(function (ProgressStatus) {
    ProgressStatus["CONFIRMATION_PENDING"] = "CONFIRMATION_PENDING";
    ProgressStatus["USER_DECLINED"] = "USER_DECLINED";
    ProgressStatus["SYSTEM_DECLINED"] = "SYSTEM_DECLINED";
    ProgressStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
    ProgressStatus["SENDING"] = "SENDING";
    ProgressStatus["ACCEPTED"] = "ACCEPTED";
    ProgressStatus["REJECTED"] = "REJECTED";
    ProgressStatus["PROCESSED"] = "PROCESSED";
    ProgressStatus["NO_PROGRESS"] = "NO_PROGRESS";
})(ProgressStatus || (ProgressStatus = {}));
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["success"] = "success";
    TransactionStatus["rejected"] = "rejected";
    TransactionStatus["declined"] = "declined";
    TransactionStatus["pending"] = "pending";
})(TransactionStatus || (TransactionStatus = {}));

class TransactionSigningHelperService {
    constructor() {
        this.defaultPollInterval = 1000;
        this.defaultMaxRetries = 3;
        this.defaultStatusMap = {
            success: [ProgressStatus.ACCEPTED, ProgressStatus.PROCESSED, ProgressStatus.PENDING_APPROVAL],
            rejected: [ProgressStatus.REJECTED],
            declined: [ProgressStatus.SYSTEM_DECLINED, ProgressStatus.USER_DECLINED],
            pending: [ProgressStatus.CONFIRMATION_PENDING, ProgressStatus.SENDING],
        };
    }
    /**
     * Determines if the response was returned from the Transaction Signing flow.
     * @param response the data returned after a possible transaction signing request.
     * @returns boolean
     */
    isTransactionSigningResponse(response) {
        return response && !!response['confirmation-type'];
    }
    /**
     * Polls a fetch function. Designed to run after transaction signing has occurred.
     * @param data  this is passed to the fetchFn as param.
     * @param fetchFn a function that triggers an http call.
     * @param pollOptions options to configure the polling such as pollInterval, maxRetries etc.
     * @param pendingStatuses array of statuses which determines if the polling should continue.
     * @returns an Observable that sequencially emits a value based on configured time interval.
     */
    setupPolling(data, fetchFn, pollOptions, pendingStatuses) {
        const pollUntil = pollOptions.pollUntilFn || this.defaultPollUntilFn.bind(this, pendingStatuses);
        return interval(pollOptions.pollInterval || this.defaultPollInterval).pipe(takeUntil(pollOptions.complete$), switchMap(() => from(fetchFn(data))), retry(pollOptions.maxRetries || this.defaultMaxRetries), filter((res) => pollUntil(res)), first());
    }
    /**
     * Handles scenarios after signing a transaction and triggers appropriate callbacks.
     * @param options Configuration for determining different flows of the transaction.
     */
    getTransactionInfo(options) {
        if (options.asyncPollingOptions) {
            this.handleAsyncPollingFlow(options);
        }
        else {
            this.handleGenericFlow(options);
        }
    }
    defaultPollUntilFn(pendingStatuses, status) {
        return !!status && !pendingStatuses.includes(status);
    }
    handleAsyncPollingFlow(options) {
        const { asyncPollingOptions } = options;
        const { pending } = options.statusMap || this.defaultStatusMap;
        if (options.fetchFn) {
            this.setupPolling(options.data, options.fetchFn, asyncPollingOptions, pending).subscribe((status) => {
                this.triggerTransactionCallback({ status }, options);
            }, (error) => {
                options.onError(error);
            });
        }
        else {
            console.warn('`fetchFn` is mandatory when polling options are provided');
        }
    }
    handleGenericFlow(options) {
        const item$ = options.fetchFn ? options.fetchFn(options.data) : of(options.data);
        item$.pipe(first()).subscribe((response) => {
            this.triggerTransactionCallback(response, options);
        }, (error) => {
            options.onError(error);
        });
    }
    triggerTransactionCallback(response, options) {
        const { status } = response || {};
        const { success, declined, rejected } = options.statusMap || this.defaultStatusMap;
        if (success.includes(status)) {
            options.onSuccess(response);
        }
        else if (declined.includes(status)) {
            options.onDeclined(response);
        }
        else if (rejected.includes(status)) {
            options.onRejected(response);
        }
        else {
            options.onError(response);
        }
    }
}
/** @nocollapse */ TransactionSigningHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ TransactionSigningHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHelperService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHelperService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

function getHttpHeaderValueWithName(headers, name) {
    const headerKey = headers.keys().find((key) => key.toLowerCase() === name);
    return (headerKey && headers.get(headerKey)) || undefined;
}
function hasStatusWithHeaderValue(response, status, headerKey, headerValue) {
    const authHeaderValue = getHttpHeaderValueWithName(response.headers, headerKey);
    return response.status === status && authHeaderValue === headerValue;
}

/*
 * Sets the input hard token challenge amount to a fixed number of decimal places.
 * Takes a decimalPlaces argument that defaults to 2.
 */
class TransactionAmountPipe {
    transform(value, decimalPlaces = 2) {
        return Number(value.data.txnData.paymentAmount).toFixed(decimalPlaces);
    }
}
/** @nocollapse */ TransactionAmountPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionAmountPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ TransactionAmountPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionAmountPipe, name: "transactionAmount" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionAmountPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'transactionAmount',
                }]
        }] });

const HeaderPaymentTitle = {
    defaultPayment: $localize `:@@bb-transaction-signing-header.initiate-payment.title.default-payment:Authorise Payment`,
    debitPayment: $localize `:@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorize Debit`,
    debitEditedPayment: $localize `:@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorize Debit (Edited)`,
    editedPayment: $localize `:@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorise Payment (Edited)`,
};

/**
 * Angular Service used to instigate and manage transaction signing for an action.
 */
class TransactionSigningService {
    /** @internal */
    constructor(httpClient, location, oidcAuthService, serviceConfig) {
        this.httpClient = httpClient;
        this.location = location;
        this.oidcAuthService = oidcAuthService;
        this.serviceConfig = serviceConfig;
        /**
         * A subject that emits when a new transaction signing event occurs.
         * The subject will emit an object containing the initial challenge from
         * the Identity Auth Server. To respond to this challenge use the
         * `respondToChallenge` endpoint provided.
         */
        this.requestSubject = new ReplaySubject(1);
        this.actionSubject = new ReplaySubject(1);
        this.observerSubject = new ReplaySubject(1);
        this.isHandlingTransaction = false;
        this.authHeaderKey = 'www-authenticate';
        this.authHeaderValue = 'Bearer challenge_types=reauth';
        this.authStatus = 401;
        this.onAuthError = (err) => {
            if (err.error && err.error.challenges) {
                const _a = err.error.challenges[0], { challengeType, actionUrl } = _a, challengeData = __rest(_a, ["challengeType", "actionUrl"]);
                this.actionSubject.next(this.getActionUrl(actionUrl));
                return throwError({
                    challengeType,
                    challengeData,
                });
            }
            return throwError(this.getErrorResponse(err));
        };
        if (!oidcAuthService) {
            throw new Error(`In order to use ImpersonationService, please include IdentityAuthModule to your application module`);
        }
    }
    /** @internal */
    initiateTransactionSigning(error) {
        if (!hasStatusWithHeaderValue(error, this.authStatus, this.authHeaderKey, this.authHeaderValue) ||
            this.isHandlingTransaction) {
            return throwError(error);
        }
        const body = error.error || {};
        const challenge = this.getFirstChallenge(body);
        return challenge ? this.authenticateUser(challenge, body.data) : throwError(error);
    }
    /**
     * Method that supports the response to an issued challenge.
     * @param data The data to be submitted in response to the challenge.
     * @returns an observable that will either be successful or throw a new challenge
     */
    respondToChallenge(data) {
        return this.actionSubject.pipe(first(), switchMap((url) => this.postResponse(url, data)));
    }
    /**
     * Method that will announce to the initiating widget that the transaction signing
     * process is complete, and that the process was successful.
     * The widget will be updated with an HttpResponse object containing the initial
     * transaction data in the body.
     */
    completeWithSuccess() {
        this.observerSubject.pipe(withLatestFrom(this.requestSubject), first()).subscribe({
            next: ([observer, request]) => {
                observer.next(new HttpResponse({ body: request.transactionData }));
                observer.complete();
                this.isHandlingTransaction = false;
            },
        });
    }
    /**
     * Method that will announce to the initiating widget that the transaction signing
     * process is complete, and that the process failed.
     * The widget will be updated with an HttpErrorResponse object containing the initial
     * transaction data and the error reason.
     */
    completeWithFailure(error) {
        this.observerSubject.pipe(withLatestFrom(this.requestSubject), first()).subscribe({
            next: ([observer, request]) => {
                observer.error(new HttpErrorResponse({
                    status: 401,
                    statusText: error.message,
                    error: {
                        error,
                        data: request.transactionData,
                    },
                }));
                this.isHandlingTransaction = false;
            },
        });
    }
    getFirstChallenge(body) {
        const challenges = body.challenges || [];
        return challenges.find((c) => c.scope !== undefined);
    }
    authenticateUser(challenge, transactionData) {
        return this.reauthenticate(challenge).pipe(first(), mapTo(new HttpResponse({ body: transactionData })), catchError((response) => {
            return new Observable((observer) => {
                this.isHandlingTransaction = true;
                this.requestSubject.next({
                    challenge: response,
                    transactionData,
                });
                this.observerSubject.next(observer);
            });
        }));
    }
    reauthenticate(challenge) {
        const { acrValues, scope } = challenge;
        return this.oidcAuthService.createReauthLoginUrl(scope, acrValues).pipe(switchMap((url) => {
            if (this.serviceConfig && this.serviceConfig.useRedirectFlow) {
                this.location.go(url);
            }
            return this.requestChallenge(url);
        }));
    }
    requestChallenge(url) {
        return this.httpClient
            .get(url, this.getRequestOptions())
            .pipe(catchError(this.onAuthError));
    }
    postResponse(url, data) {
        return this.httpClient
            .post(url, data, this.getRequestOptions())
            .pipe(catchError(this.onAuthError));
    }
    getRequestOptions() {
        return {
            headers: {
                Accept: '*/*',
                'X-Convert-Redirects': 'true',
                Authentication: this.oidcAuthService.authorizationHeader(),
            },
            withCredentials: true,
            observe: 'response',
        };
    }
    getErrorResponse(error) {
        const url = new URL(error.headers.get('location') || error.headers.get('Location') || '');
        const params = new URLSearchParams(url.search);
        return {
            error: {
                errorCode: params.get('error') || 'unknown_error',
                errorDescription: params.get('error_description') || undefined,
            },
        };
    }
    getActionUrl(url) {
        const idp = new URL(this.oidcAuthService.authConfig.issuer || '');
        return url.startsWith('/auth') ? `${idp.origin}${url}` : `${idp.origin}/auth${url}`;
    }
}
/** @nocollapse */ TransactionSigningService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningService, deps: [{ token: i1.HttpClient }, { token: i5.Location }, { token: i3.ɵɵOidcAuthService, optional: true }, { token: TRANSACTION_SIGNING_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ TransactionSigningService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i5.Location }, { type: i3.ɵɵOidcAuthService, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TRANSACTION_SIGNING_CONFIG]
                }] }]; } });

class TransactionSigningHeaderComponent {
    constructor() {
        this.headerPaymentTitle = HeaderPaymentTitle;
    }
}
/** @nocollapse */ TransactionSigningHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningHeaderComponent, selector: "bb-transaction-signing-header", inputs: { data: "data" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"data?.['confirmation-type'] || data?.confirmationType\">\n  <div *ngSwitchDefault>\n    <ng-container\n      *ngTemplateOutlet=\"\n      data?.['counter-party-role'] === 'DEBTOR'\n        ? debitHeaderTmpl\n        : defaultHeaderTmpl;\n        context: { $implicit: data, isEdited: (data?.['confirmation-type'] || data?.confirmationType) === 'edit-payment' }\"\n    >\n    </ng-container>\n  </div>\n\n  <div *ngSwitchCase=\"'approve-payment'\">\n    <bb-header-ui\n      headingType=\"h2\"\n      i18n-heading=\"\n        Transaction signing modal title for approve-payment@@bb-transaction-signing-header.approve-payment.title\"\n      heading=\"Authorisation\"\n    >\n    </bb-header-ui>\n    <div\n      *ngIf=\"data?.['counter-party-role'] !== 'DEBTOR'; else debitSubTitle\"\n      data-role=\"ts-modal-subtitle\"\n      i18n=\"\n        Transaction signing modal sub-title for approve-payment@@bb-transaction-signing-header.approve-payment.sub-title\"\n    >\n      Payment of\n      <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.amount\"></bb-amount-ui>\n      to {{ data?.['counter-party-name'] }}.\n    </div>\n  </div>\n  <div *ngSwitchCase=\"'approve-batch'\">\n    <bb-header-ui\n      headingType=\"h2\"\n      i18n-heading=\"\n        Transaction signing modal title for approve-batch@@bb-transaction-signing-header.approve-batch.title\"\n      heading=\"Authorisation\"\n    >\n    </bb-header-ui>\n    <div\n      data-role=\"ts-modal-subtitle\"\n      i18n=\"\n        Transaction signing modal sub-title for approve-batch@@bb-transaction-signing-header.approve-batch.sub-title\"\n    >\n      Batch with a total value of<br />\n      <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.totalAmount\"></bb-amount-ui>\n      to {{ data?.totalTransactionsCount }} {data?.totalTransactionsCount, plural, =1 {transfer} other {transfers}}\n      (multiple accounts).\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #debitHeaderTmpl let-data let-isEdited=\"isEdited\">\n  <bb-header-ui\n    headingType=\"h2\"\n    [heading]=\"isEdited ? headerPaymentTitle.debitEditedPayment : headerPaymentTitle.debitPayment\"\n  >\n  </bb-header-ui>\n\n  <ng-container *ngTemplateOutlet=\"debitSubTitle\"></ng-container>\n</ng-template>\n\n<ng-template #defaultHeaderTmpl let-data let-isEdited=\"isEdited\">\n  <bb-header-ui\n    headingType=\"h2\"\n    [heading]=\"isEdited ? headerPaymentTitle.editedPayment : headerPaymentTitle.defaultPayment\"\n  >\n  </bb-header-ui>\n\n  <div\n    data-role=\"ts-modal-subtitle\"\n    i18n=\"\n      Transaction signing modal sub-title for initiate-payment@@bb-transaction-signing-header.initiate-payment.sub-title\"\n  >\n    Send\n    <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.amount\"></bb-amount-ui>\n    to {{ data?.['counter-party-name'] }}.\n  </div>\n</ng-template>\n\n<ng-template #debitSubTitle>\n  <div\n    data-role=\"ts-modal-subtitle\"\n    i18n=\"\n      Transaction signing modal sub-title for\n      initiate-payment@@bb-transaction-signing-header.initiate-payment-debit.sub-title\"\n  >\n    Receive\n    <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.amount\"></bb-amount-ui>\n    from {{ data?.['counter-party-name'] }}.\n  </div>\n</ng-template>\n", components: [{ type: i1$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-header',
                    templateUrl: 'header.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { data: [{
                type: Input
            }] } });

class TransactionSigningActionPendingComponent {
}
/** @nocollapse */ TransactionSigningActionPendingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningActionPendingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningActionPendingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningActionPendingComponent, selector: "bb-transaction-signing-action-pending", ngImport: i0, template: "<bb-loading-indicator-ui\n  data-role=\"ts-action-pending\"\n  loaderSize=\"lg\"\n  i18n-text=\"Transaction signing action pending text@@bb-transaction-signing-action-pending.text\"\n  text=\"Performing action...\"\n>\n</bb-loading-indicator-ui>\n", components: [{ type: i1$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningActionPendingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-action-pending',
                    templateUrl: 'action-pending.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

class TransactionSigningErrorComponent {
    constructor() {
        this.closeModal = new EventEmitter();
    }
    onClose() {
        this.closeModal.emit(new Error(this.error && (this.error.errorDescription || this.error.errorCode)));
    }
}
/** @nocollapse */ TransactionSigningErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: { error: "error" }, outputs: { closeModal: "closeModal" }, ngImport: i0, template: "<div class=\"bb-block bb-block--md\" data-role=\"ts-error\">\n  <div class=\"bb-block bb-block--md\">\n    <ng-container *ngTemplateOutlet=\"tsErrorState\"></ng-container>\n  </div>\n  <div class=\"bb-button-bar bb-button-bar--center\">\n    <button\n      bbButton\n      data-role=\"ts-accept-error\"\n      class=\"bb-button-bar__button\"\n      color=\"primary\"\n      i18n=\"Cancel transaction button@@bb-transaction-signing-error.cancel\"\n      (click)=\"onClose()\"\n    >\n      Close\n    </button>\n  </div>\n</div>\n\n<ng-template #tsErrorState>\n  <ng-container [ngSwitch]=\"error?.errorDescription\">\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'invalid_token'\"\n      iconSize=\"xxl\"\n      iconModifier=\"lock\"\n      i18n-title=\"Transaction signing invalid token title@@bb-transaction-signing-error.invalid-token.title\"\n      title=\"Access denied\"\n      i18n-subtitle=\"Transaction signing invalid token subtitle@@bb-transaction-signing-error.invalid-token.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'confirmation_not_found'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing not found title@@bb-transaction-signing-error.not-found.title\"\n      title=\"No confirmation found\"\n      i18n-subtitle=\"Transaction signing not found subtitle@@bb-transaction-signing-error.not-found.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'confirmation_is_not_pending'\"\n      iconSize=\"xxl\"\n      iconModifier=\"access-alarm\"\n      i18n-title=\"Transaction signing not pending title@@bb-transaction-signing-error.not-pending.title\"\n      title=\"The confirmation has expired\"\n      i18n-subtitle=\"Transaction signing not pending subtitle@@bb-transaction-signing-error.not-pending.subtitle\"\n      subtitle=\"This transaction has timed out and been cancelled. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'confirmation_user_mismatch'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing user mismatch title@@bb-transaction-signing-error.user-mismatch.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"Transaction signing user mismatch subtitle@@bb-transaction-signing-error.user-mismatch.subtitle\"\n      subtitle=\"You do not have permission to confirm this action. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'rejected_by_user'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing rejected title@@bb-transaction-signing-error.rejected.title\"\n      title=\"Transaction rejected by user\"\n      i18n-subtitle=\"Transaction signing rejected subtitle@@bb-transaction-signing-error.rejected.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'user_disabled'\"\n      iconSize=\"xxl\"\n      iconModifier=\"lock\"\n      i18n-title=\"Transaction signing disabled title@@bb-transaction-signing-error.disabled.title\"\n      title=\"Unable to process transaction\"\n      i18n-subtitle=\"Transaction signing disabled subtitle@@bb-transaction-signing-error.disabled.subtitle\"\n      subtitle=\"This user is currently locked. Please cancel the dialogue and unlock your account before retrying the action.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'user_temporarily_disabled'\"\n      iconSize=\"xxl\"\n      iconModifier=\"lock\"\n      i18n-title=\"\n        Transaction signing temporarily disabled title@@bb-transaction-signing-error.temporarily-disabled.title\"\n      title=\"Unable to process transaction\"\n      i18n-subtitle=\"\n        Transaction signing temporarily disabled subtitle@@bb-transaction-signing-error.temporarily-disabled.subtitle\"\n      subtitle=\"This user is currently locked. Please cancel the dialogue and unlock your account before retrying the action.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'unsupported_challenge'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"\n        Transaction signing unsupported challenge title@@bb-transaction-signing-error.unsupported-challenge.title\"\n      title=\"Unable to process request\"\n      i18n-subtitle=\"\n        Transaction signing unsupported challenge subtitle@@bb-transaction-signing-error.unsupported-challenge.subtitle\"\n      subtitle=\"The transaction requires an unsupported challenge. Please cancel this dialogue and contact an admin.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'challenge_not_found'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing challenge not found title@@bb-transaction-signing-error.challenge-not-found.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"\n        Transaction signing challenge not found subtitle@@bb-transaction-signing-error.challenge-not-found.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'hard_token_integration_error'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"\n        Transaction signing hard token integration title@@bb-transaction-signing-error.hard-token-integration.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"\n        Transaction signing hard token integration\n        subtitle@@bb-transaction-signing-error.hard-token-integration.subtitle\"\n      subtitle=\"We could not reach the hard-token vendor to confirm your response. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'no_devices_registered'\"\n      iconSize=\"xxl\"\n      iconModifier=\"phonelink-off\"\n      i18n-title=\"\n        Transaction signing no devices registered title@@bb-transaction-signing-error.no-devices-registered.title\"\n      title=\"No devices available\"\n      i18n-subtitle=\"\n        Transaction signing no devices registered subtitle@@bb-transaction-signing-error.no-devices-registered.subtitle\"\n      subtitle=\"We were unable to process this transaction as no devices are registered. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchDefault\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing default error title@@bb-transaction-signing-error.default.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"Transaction signing default error subtitle@@bb-transaction-signing-error.default.subtitle\"\n      subtitle=\"We have experienced a critical error on this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n  </ng-container>\n</ng-template>\n", components: [{ type: i1$3.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5.NgSwitchDefault, selector: "[ngSwitchDefault]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-error',
                    templateUrl: 'error.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { closeModal: [{
                type: Output
            }], error: [{
                type: Input
            }] } });

class TransactionSigningHardTokenComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.cancel = new EventEmitter();
        this.submitResponse = new EventEmitter();
        this.acceptError = new EventEmitter();
        this.invalidRequestError = 'invalid_request';
        this.displayErrors = false;
        this.form = this.formBuilder.group({
            otp: ['', [Validators.required, Validators.pattern(/^\d{6}$/)]],
        });
        this.displayAlert = false;
    }
    set data(value) {
        this.challengeData = value;
        this.displayAlert = false;
        this.displayErrors = false;
    }
    get data() {
        if (!this.challengeData) {
            throw new Error('No challenge data set');
        }
        return this.challengeData;
    }
    set error(value) {
        this.displayAlert = false;
        this.displayErrors = false;
        if (value && this.isRecognizedError(value)) {
            this.displayAlert = true;
        }
        else {
            this.errorValue = value;
        }
    }
    get error() {
        return this.errorValue;
    }
    onSubmit() {
        this.displayErrors = true;
        if (this.form.valid) {
            this.submitResponse.emit(Object.assign(Object.assign({}, this.form.value), { code: this.data.data.code }));
        }
    }
    onCancel() {
        this.cancel.emit();
    }
    onErrorClose(error) {
        this.acceptError.emit(error);
    }
    hasError(control) {
        return this.displayErrors && control.errors && (control.errors.required || control.errors.pattern);
    }
    isRecognizedError(error) {
        return error.errorCode === this.invalidRequestError && error.errorDescription === this.invalidRequestError;
    }
}
/** @nocollapse */ TransactionSigningHardTokenComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHardTokenComponent, deps: [{ token: i1$4.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningHardTokenComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningHardTokenComponent, selector: "bb-transaction-signing-hard-token", inputs: { data: "data", error: "error" }, outputs: { cancel: "cancel", submitResponse: "submitResponse", acceptError: "acceptError" }, ngImport: i0, template: "<bb-transaction-signing-error\n  *ngIf=\"errorValue; else displayForm\"\n  [error]=\"errorValue\"\n  (closeModal)=\"onErrorClose($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <bb-alert-ui\n    *ngIf=\"displayAlert\"\n    data-role=\"ts-hard-token-no-value-alert\"\n    i18n-title=\"No value alert title for hard token signing@@bb-hard-token-signing.alert.no-value.title\"\n    title=\"No value entered\"\n  >\n    <span i18n=\"No value alert message for hard token signing@@bb-hard-token-signing.alert.no-value.message\">\n      Please enter the value displayed on your {{ data.data.vendorDetails.model }} device.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"data.remainingAuthenticationAttempts !== undefined\"\n    data-role=\"ts-hard-token-remaining-alert\"\n    i18n-title=\"Remaining attempts alert title for hard token signing@@bb-hard-token-signing.alert.remaining.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Remaining attempts alert message for hard token signing@@bb-hard-token-signing.alert.remaining.message\">\n      The number you entered was incorrect. <br />\n      You have {{ data.remainingAuthenticationAttempts }} other {data.remainingAuthenticationAttempts, plural, =1\n      {attempt} other {attempts}} remaining.\n    </span>\n  </bb-alert-ui>\n  <div class=\"bb-block bb-block--md\" i18n=\"Instruction for hard token signing@@bb-hard-token-signing.instruction\">\n    Using your {{ data.data.vendorDetails.model }} device, follow these steps\n  </div>\n\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <ol data-role=\"hard-token-txn-widget__form\" class=\"bb-ordered-list bb-block bb-block--md\">\n      <li data-role=\"hard-token-txn-widget__form-sign\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 1 for hard token signing@@bb-hard-token-signing.steps.1\">\n          Press '<strong>sign</strong>' on your device\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-enter-pin\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 2 for hard token signing@@bb-hard-token-signing.steps.2\">\n          Enter your pin in to your device\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-reference-number\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 3 for hard token signing@@bb-hard-token-signing.steps.3\"> Enter the `reference number` </span>\n        <br />\n        <span class=\"bb-hero\">\n          {{ data.data.code }}\n        </span>\n      </li>\n      <li\n        data-role=\"hard-token-txn-widget__form-transaction-amount\"\n        *ngIf=\"data.data.txnData.paymentAmount !== undefined\"\n        class=\"bb-block bb-block--sm\"\n      >\n        <span i18n=\"Step 4 (when amount present) for hard token signing@@bb-hard-token-signing.steps.4\">\n          Enter the transaction amount\n        </span>\n        <br />\n        <span class=\"bb-hero\">\n          {{ data | transactionAmount }}\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-insert-number\" class=\"bb-block bb-block--sm\">\n        <span\n          data-role=\"hard-token-txn-widget__form-insert-number__financial\"\n          i18n=\"Step 5 (when amount present), or step 4 for hard token signing@@bb-hard-token-signing.steps.5\"\n        >\n          Insert the number produced on your {{ data.data.vendorDetails.model }} device\n        </span>\n        <br />\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            data-role=\"ts-hard-token-otp\"\n            class=\"bb-form-field bb-form-field--xs\"\n            formControlName=\"otp\"\n            i18n-attr.aria-label=\"Aria label for otp field input@@bb-hard-token-signing.otp.aria-label\"\n            attr.aria-label=\"Insert the number produced on your {{ data.data.vendorDetails.model }} device\"\n            [maxLength]=\"6\"\n            [minLength]=\"6\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui [showErrors]=\"hasError(form.controls.otp)\">\n            <span\n              data-role=\"ts-hard-token-otp-error\"\n              i18n=\"Otp input length error message@@bb-hard-token-signing.otp.errors.length\"\n            >\n              The value must be exactly 6 numbers.\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </li>\n    </ol>\n\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-hard-token-complete\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-hard-token-signing.complete\"\n      >\n        Complete\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-hard-token-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"onCancel()\"\n        i18n=\"Cancel button@@bb-hard-token-signing.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "transactionAmount": TransactionAmountPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHardTokenComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-hard-token',
                    templateUrl: 'hard-token.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$4.FormBuilder }]; }, propDecorators: { cancel: [{
                type: Output
            }], submitResponse: [{
                type: Output
            }], acceptError: [{
                type: Output
            }], data: [{
                type: Input
            }], error: [{
                type: Input
            }] } });

class TransactionSigningOobSelectDeviceComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.cancel = new EventEmitter();
        this.acceptError = new EventEmitter();
        this.submitResponse = new EventEmitter();
        this.form = this.formBuilder.group({
            device: [undefined, Validators.required],
        });
        this.showErrors = false;
    }
    set data(value) {
        this.challengeData = value;
    }
    get data() {
        if (!this.challengeData) {
            throw new Error('No challenge data set');
        }
        return this.challengeData;
    }
    onSubmit() {
        this.showErrors = true;
        if (this.form.invalid) {
            return;
        }
        this.submitResponse.emit({ deviceId: this.form.controls.device.value });
    }
    onCancel() {
        this.cancel.emit();
    }
    deviceHasFriendlyName(device) {
        return typeof device.friendlyName === 'string';
    }
    deviceGetVendorModelName(device) {
        return device.vendor && device.model ? `${device.vendor} ${device.model}` : false;
    }
    get showDeviceNotChosenError() {
        return !this.form.value.device;
    }
}
/** @nocollapse */ TransactionSigningOobSelectDeviceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningOobSelectDeviceComponent, deps: [{ token: i1$4.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningOobSelectDeviceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningOobSelectDeviceComponent, selector: "bb-transaction-signing-oob-select-device", inputs: { data: "data", error: "error" }, outputs: { cancel: "cancel", acceptError: "acceptError", submitResponse: "submitResponse" }, ngImport: i0, template: "<bb-transaction-signing-error *ngIf=\"error; else displayForm\" [error]=\"error\" (closeModal)=\"acceptError.emit($event)\">\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <label\n      for=\"bb-transaction-signing-select-device-dropdown\"\n      i18n=\"Select device text@@bb-oob-select-device-signing.text.label\"\n    >\n      Select the device you would like to sign this transaction with.\n    </label>\n    <p>\n      <small i18n=\"Devices ordered text@@bb-oob-select-device-signing.text.hint\">\n        (Devices ordered by most recent registered)\n      </small>\n    </p>\n\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        data-role=\"ts-select-device-control\"\n        id=\"bb-transaction-signing-select-device-dropdown\"\n        i18n-placeholder=\"Select device placeholder@@bb-oob-select-device-signing.input.select-placeholder\"\n        placeholder=\"Select a device...\"\n        formControlName=\"device\"\n        [required]=\"true\"\n      >\n        <ng-container *ngIf=\"challengeData && challengeData.devices\">\n          <ng-container *ngFor=\"let device of challengeData.devices\">\n            <bb-dropdown-single-select-option-ui\n              *ngIf=\"deviceHasFriendlyName(device); else noFriendlyNameDevice\"\n              data-role=\"ts-oob-select-device-option-with-name\"\n              label=\"{{ device.friendlyName }} (Registered on: {{ device.created | date: 'medium' }})\"\n              i18n-label=\"\n                Select device friendly name option@@bb-oob-select-device-signing.input.select-option-friendly-name\"\n              [value]=\"device.deviceId\"\n            >\n            </bb-dropdown-single-select-option-ui>\n\n            <ng-template #noFriendlyNameDevice>\n              <ng-container\n                *ngIf=\"device.vendor && device.model; then displayVendorModelDevice; else displayUnknownDevice\"\n              ></ng-container>\n            </ng-template>\n\n            <ng-template #displayVendorModelDevice>\n              <bb-dropdown-single-select-option-ui\n                data-role=\"ts-oob-select-device-option-with-vendor-model\"\n                label=\"{{ deviceGetVendorModelName(device) }} (Registered on: {{ device.created | date: 'medium' }})\"\n                i18n-label=\"\n                  Select device vendor model option@@bb-oob-select-device-signing.input.select-option-vendor-model\"\n                [value]=\"device.deviceId\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </ng-template>\n            <ng-template #displayUnknownDevice>\n              <bb-dropdown-single-select-option-ui\n                data-role=\"ts-oob-select-device-option-without-name\"\n                label=\"Unknown Device (Registered on: {{ device.created | date: 'medium' }})\"\n                i18n-label=\"Select device unknown option@@bb-oob-select-device-signing.input.select-option-unknown\"\n                [value]=\"device.deviceId\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </ng-template>\n          </ng-container>\n        </ng-container>\n      </bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui [showErrors]=\"showErrors\">\n        <span\n          *ngIf=\"showDeviceNotChosenError\"\n          data-role=\"ts-oob-select-device-missing-error\"\n          i18n=\"Device not chosen error message@@bb-oob-select-device-signing.errors.missing\"\n        >\n          You must choose a device.\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <p>\n      <strong\n        i18n=\"Selected device action description@@bb-oob-select-device-signing.text.selected-action-description\"\n        data-role=\"ts-select-device-validation-message\"\n      >\n        Your selected device will be sent a notification to sign the transaction.\n      </strong>\n    </p>\n    <hr />\n    <p>\n      <small i18n=\"Navigation away notice@@bb-oob-select-device-signing.text.navigation-away\">\n        Note: Navigation away from this modal will result in a cancellation of this transaction signing process.\n      </small>\n    </p>\n\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-select-device-continue\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-oob-select-device-signing.complete\"\n      >\n        Continue\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-select-device-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"onCancel()\"\n        i18n=\"Cancel button@@bb-oob-select-device-signing.cancel\"\n      >\n        Cancel transaction\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i3$2.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i5$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i5.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningOobSelectDeviceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-oob-select-device',
                    templateUrl: 'oob-select-device.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$4.FormBuilder }]; }, propDecorators: { cancel: [{
                type: Output
            }], acceptError: [{
                type: Output
            }], submitResponse: [{
                type: Output
            }], data: [{
                type: Input
            }], error: [{
                type: Input
            }] } });

class TransactionSigningOobDeviceComponent {
    constructor(countdown) {
        this.countdown = countdown;
        this.acceptError = new EventEmitter();
        this.cancel = new EventEmitter();
        this.poll = new EventEmitter();
        this.resend = new EventEmitter();
        this.icon = '';
        this.timeUntilResend$ = this.countdown.remainingTime$;
    }
    get data() {
        if (!this.challengeData) {
            throw new Error('No challenge data set');
        }
        return this.challengeData;
    }
    set data(value) {
        this.challengeData = value;
        if (this.challengeData) {
            this.deviceInfo = this.challengeData.data.deviceInformation;
            this.pushNotificationData = this.challengeData.data.pushNotificationInformation;
            this.setResendTime();
        }
        if (this.deviceInfo) {
            this.icon = this.deviceInfo.vendor === 'Apple' ? 'phone-iphone' : 'phone-android';
        }
    }
    get pushData() {
        if (!this.pushNotificationData) {
            throw new Error('No push notification data set');
        }
        return this.pushNotificationData;
    }
    get pushFailure() {
        return this.enableResendPushNotification && !this.pushData.sendSuccessful;
    }
    ngOnInit() {
        this.poll.emit();
    }
    setResendTime() {
        if (this.pushData.nextResendSeconds > 0) {
            this.countdown.start(this.pushData.nextResendSeconds);
        }
    }
}
/** @nocollapse */ TransactionSigningOobDeviceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningOobDeviceComponent, deps: [{ token: CountdownService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningOobDeviceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningOobDeviceComponent, selector: "bb-transaction-signing-oob-device", inputs: { error: "error", enableResendPushNotification: "enableResendPushNotification", data: "data" }, outputs: { acceptError: "acceptError", cancel: "cancel", poll: "poll", resend: "resend" }, ngImport: i0, template: "<bb-transaction-signing-error\n  *ngIf=\"error; else displayHoldingScreen\"\n  [error]=\"error\"\n  (closeModal)=\"acceptError.emit($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayHoldingScreen>\n  <bb-alert-ui\n    *ngIf=\"pushFailure\"\n    data-role=\"ts-oob-device-incorrect-alert\"\n    i18n-title=\"\n      Failure to send push notification for out of band device transaction\n      signing@@bb-transaction-signing-oob-device.alert.failure.title\"\n    title=\"Push notification failure\"\n  >\n    <span\n      i18n=\"\n        Incorrect attempts alert message for sms otp signing@@bb-transaction-signing-oob-device.alert.failure.message\"\n    >\n      Failure to send push notification. Please open your app to complete the transaction.\n    </span>\n  </bb-alert-ui>\n\n  <div class=\"bb-block bb-block--md\">\n    <div\n      data-role=\"oob-device-title\"\n      class=\"bb-highlight bb-block bb-block--md\"\n      i18n=\"Instruction for oob device signing@@bb-transaction-signing-oob-device.instruction.check-device-header\"\n    >\n      Check your device:\n    </div>\n    <div class=\"bb-stack\">\n      <bb-icon-ui class=\"bb-stack__item\" [name]=\"icon\" size=\"xl\" data-role=\"oob-device-icon\"></bb-icon-ui>\n      <div>\n        <div *ngIf=\"deviceInfo?.friendlyName; else defaultFriendlyName\" class=\"bb-stack__item bb-highlight\">\n          <span data-role=\"oob-device-friendly-name\">{{ deviceInfo?.friendlyName }}</span>\n        </div>\n        <div *ngIf=\"deviceInfo?.vendor && deviceInfo?.model; else defaultVendor\" class=\"bb-stack__item bb-text-support\">\n          <span data-role=\"oob-device-vendor-model\">{{ deviceInfo?.vendor }} {{ deviceInfo?.model }}</span>\n        </div>\n        <div class=\"bb-stack__item bb-text-support bb-subheader bb-subheader--regular\">\n          <span\n            data-role=\"oob-device-registered-date\"\n            i18n=\"Device registered date@@bb-transaction-signing-oob-device.registered-date\"\n          >\n            Registered on: {{ deviceInfo?.created | date: 'medium' }}</span\n          >\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"bb-block bb-block--md\"\n    i18n=\"Instruction for oob device signing@@bb-transaction-signing-oob-device.instruction\"\n  >\n    <strong>Please sign this transaction through your banking app. When confirmed, this page will refresh.</strong>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <ng-container *ngIf=\"enableResendPushNotification\">\n      <hr />\n\n      <div class=\"bb-block bb-block--sm\">\n        <span\n          data-role=\"oob-no-notification-title\"\n          class=\"bb-highlight\"\n          i18n=\"No notification received@@bb-oob-notification-signing.resend.no-notification\"\n        >\n          Didn't receive the notification?\n        </span>\n      </div>\n\n      <ng-container *ngIf=\"pushData.resendAttemptsLeft > 0; else displayNoRemainingRequests\">\n        <ng-container *ngIf=\"timeUntilResend$ | async as time; else displayResendButton\">\n          <span\n            class=\"bb-subtitle bb-text-support bb-block bb-block--sm\"\n            i18n=\"Time before resend@@bb-oob-notification-signing.resend.time-before\"\n          >\n            Next resend available in {{ time }} {time, plural, =1 {second} other {seconds}}\n          </span>\n        </ng-container>\n\n        <ng-template #displayResendButton>\n          <div class=\"bb-block bb-block--sm\">\n            <button\n              bbButton\n              buttonSize=\"md\"\n              data-role=\"oob-device-resend\"\n              color=\"link-text\"\n              i18n=\"Resend OOB notification button@@bb-oob-notification-signing.resend\"\n              (click)=\"this.resend.emit()\"\n            >\n              Send another notification\n            </button>\n          </div>\n\n          <div class=\"bb-text-support\">\n            <span\n              [ngClass]=\"{ 'bb-text-danger': pushData.resendAttemptsLeft === 1 }\"\n              i18n=\"Message resend alert message for oob signin@@bb-oob-signing.alert.resend.message\"\n            >\n              You have {{ pushData.resendAttemptsLeft }} resend {pushData.resendAttemptsLeft, plural, =1 {attempt} other\n              {attempts}} left.\n            </span>\n          </div>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #displayNoRemainingRequests>\n        <span\n          data-role=\"ts-oob-device-no-resend\"\n          class=\"bb-subtitle bb-text-danger\"\n          i18n=\"No device push notification resend attempts remaining@@bb-transaction-signing-oob-device.no-resend\"\n        >\n          You are out of resend attempts.\n        </span>\n      </ng-template>\n    </ng-container>\n  </div>\n\n  <hr />\n\n  <div class=\"bb-block bb-block--lg\">\n    <small i18n=\"Helper text for oob device signing@@bb-transaction-signing-oob-device.helper\">\n      Note: Navigation away from this modal will result in a cancellation of this transaction signing process.\n    </small>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <button\n      bbButton\n      data-role=\"oob-device-cancel\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n      (click)=\"cancel.emit()\"\n      i18n=\"Cancel button@@bb-transaction-signing-oob-device.cancel\"\n    >\n      Cancel transaction\n    </button>\n  </div>\n\n  <ng-template\n    #defaultFriendlyName\n    i18n=\"Default friendly name@@bb-transaction-signing-oob-device.default-friendly-name\"\n  >\n    <span data-role=\"oob-device-friendly-name-default\">Unknown Device</span>\n  </ng-template>\n\n  <ng-template #defaultVendor i18n=\"Device vendor default text@@bb-transaction-signing-oob-device.default-vendor\">\n    <span data-role=\"oob-device-vendor-default\">Unknown</span>\n  </ng-template>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i5.DatePipe, "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningOobDeviceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-oob-device',
                    templateUrl: 'oob-device.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: CountdownService }]; }, propDecorators: { acceptError: [{
                type: Output
            }], cancel: [{
                type: Output
            }], poll: [{
                type: Output
            }], resend: [{
                type: Output
            }], error: [{
                type: Input
            }], enableResendPushNotification: [{
                type: Input
            }], data: [{
                type: Input
            }] } });

class TransactionSigningSmsOtpComponent {
    constructor(formBuilder, countdown) {
        this.formBuilder = formBuilder;
        this.countdown = countdown;
        this.cancel = new EventEmitter();
        this.submitResponse = new EventEmitter();
        this.acceptError = new EventEmitter();
        this.resend = new EventEmitter();
        this.invalidRequestError = 'invalid_request';
        this.form = this.formBuilder.group({
            otp: ['', [Validators.required, Validators.pattern(/^\d{6}$/)]],
        });
        this.timeUntilResend$ = this.countdown.remainingTime$;
        this.displayIncorrectAlert = false;
        this.displayMissingAlert = false;
        this.displayRemainingAlert = false;
        this.displayResendAlert = false;
    }
    set data(value) {
        this.setOtpValidators(value.expectedOtpLength);
        this.clearAlerts();
        this.setResendCountdown(value);
    }
    get data() {
        if (!this.challengeData) {
            throw new Error('No challenge data set');
        }
        return this.challengeData;
    }
    set error(value) {
        if (!value || !this.isRecognizedError(value)) {
            this.errorValue = value;
            return;
        }
        this.clearAlerts();
        this.form.reset();
        this.form.markAllAsTouched();
        this.displayMissingAlert = true;
    }
    get error() {
        return this.errorValue;
    }
    ngOnChanges(changes) {
        this.setResendOptions(changes.data.currentValue.remainingOtpRequests);
        this.setRemainingOptions(changes.data.currentValue.remainingAuthenticationAttempts);
        this.challengeData = Object.assign(Object.assign({}, this.previousData), changes.data.currentValue);
    }
    onSubmit() {
        this.clearAlerts();
        if (this.form.valid) {
            return this.submitResponse.emit(Object.assign({}, this.form.value));
        }
        if (!this.form.value.otp || !this.form.value.otp.length) {
            this.displayMissingAlert = true;
            this.form.markAllAsTouched();
        }
        if (this.form.controls.otp.errors && this.form.controls.otp.errors.pattern) {
            this.displayIncorrectAlert = true;
            this.form.reset();
            this.form.markAllAsTouched();
        }
    }
    showInvalidError() {
        return (this.displayIncorrectAlert || this.displayRemainingAlert) && !this.form.value.otp;
    }
    showMissingError() {
        return this.displayMissingAlert && !this.form.value.otp;
    }
    clearAlerts() {
        this.displayIncorrectAlert = false;
        this.displayMissingAlert = false;
        this.displayRemainingAlert = false;
        this.displayResendAlert = false;
    }
    setOtpValidators(patternLength) {
        const regex = new RegExp('^\\d{' + patternLength + '}$');
        this.form.controls.otp.setValidators([Validators.required, Validators.pattern(regex)]);
    }
    isRecognizedError(error) {
        return error.errorCode === this.invalidRequestError && error.errorDescription === this.invalidRequestError;
    }
    setResendCountdown(challenge) {
        if (challenge.nextOtpTime > 0 && challenge.remainingOtpRequests !== 0) {
            this.countdown.start(challenge.nextOtpTime);
        }
    }
    setResendOptions(remaining) {
        if (remaining === undefined || !this.previousData) {
            return;
        }
        const previousRemaining = this.previousData && this.previousData.remainingOtpRequests;
        if (!previousRemaining || remaining < previousRemaining) {
            this.displayResendAlert = true;
            this.displayRemainingAlert = false;
        }
    }
    setRemainingOptions(remaining) {
        if (remaining === undefined || !this.previousData) {
            return;
        }
        const previousRemaining = this.previousData.remainingAuthenticationAttempts;
        if (!previousRemaining || remaining < previousRemaining) {
            this.form.reset();
            this.form.markAllAsTouched();
            this.displayRemainingAlert = true;
            this.displayResendAlert = false;
        }
    }
}
/** @nocollapse */ TransactionSigningSmsOtpComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningSmsOtpComponent, deps: [{ token: i1$4.FormBuilder }, { token: CountdownService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningSmsOtpComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningSmsOtpComponent, selector: "bb-transaction-signing-sms-otp", inputs: { previousData: "previousData", data: "data", error: "error" }, outputs: { cancel: "cancel", submitResponse: "submitResponse", acceptError: "acceptError", resend: "resend" }, usesOnChanges: true, ngImport: i0, template: "<bb-transaction-signing-error\n  *ngIf=\"errorValue; else displayForm\"\n  [error]=\"errorValue\"\n  (closeModal)=\"acceptError.emit($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <bb-alert-ui\n    *ngIf=\"displayMissingAlert\"\n    data-role=\"ts-sms-otp-missing-alert\"\n    i18n-title=\"No value alert title for sms otp signing@@bb-sms-otp-signing.alert.missing.title\"\n    title=\"No value entered\"\n  >\n    <span i18n=\"No value alert message for sms otp signing@@bb-sms-otp-signing.alert.missing.message\">\n      Please enter the value displayed on your device.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayIncorrectAlert\"\n    data-role=\"ts-sms-otp-incorrect-alert\"\n    i18n-title=\"Incorrect attempts alert title for sms otp signing@@bb-sms-otp-signing.alert.incorrect.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Incorrect attempts alert message for sms otp signing@@bb-sms-otp-signing.alert.incorrect.message\">\n      The number you entered was incorrect.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayRemainingAlert\"\n    data-role=\"ts-sms-otp-remaining-alert\"\n    i18n-title=\"Remaining attempts alert title for sms otp signing@@bb-sms-otp-signing.alert.remaining.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Remaining attempts alert message for sms otp signing@@bb-sms-otp-signing.alert.remaining.message\">\n      The number you entered was incorrect. <br />\n      You have {{ data.remainingAuthenticationAttempts }} other {data.remainingAuthenticationAttempts, plural, =1\n      {attempt} other {attempts}} remaining.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayResendAlert\"\n    data-role=\"ts-sms-otp-resend-alert\"\n    modifier=\"info\"\n    i18n-title=\"Message resend alert title for sms otp signing@@bb-sms-otp-signing.alert.resend.title\"\n    title=\"SMS message resent\"\n  >\n    <span i18n=\"Message resend alert message for sms otp signing@@bb-sms-otp-signing.alert.resend.message\">\n      The SMS message has been successfully sent. <br />\n      You have {data.remainingOtpRequests, plural, =0 {no} other {{{data.remainingOtpRequests}} SMS}} resend\n      {data.remainingOtpRequests, plural, =1 {attempt} other {attempts}} left.\n    </span>\n  </bb-alert-ui>\n  <div class=\"bb-block bb-block--sm\" i18n=\"Instruction for sms otp signing@@bb-sms-otp-signing.instruction\">\n    SMS message sent to {{ data.phoneNumber }}\n  </div>\n  <div class=\"bb-block bb-block--lg\">\n    <ng-container *ngIf=\"data.remainingOtpRequests !== 0; else displayNoRemainingRequests\">\n      <ng-container *ngIf=\"timeUntilResend$ | async as time; else displayResendButton\">\n        <span\n          class=\"bb-subtitle bb-text-support bb-block bb-block--sm\"\n          i18n=\"Time before resend@@bb-sms-otp-signing.resend.time-before\"\n          data-role=\"ts-sms-otp-resend-helper\"\n        >\n          Next resend available in {{ time }} {time, plural, =1 {second} other {seconds}}\n        </span>\n        <bb-progressbar-ui height=\"0.5rem\" [value]=\"data.nextOtpTime - time\" [max]=\"data.nextOtpTime\">\n        </bb-progressbar-ui>\n      </ng-container>\n      <ng-template #displayResendButton>\n        <button\n          bbButton\n          data-role=\"ts-sms-otp-resend\"\n          color=\"secondary\"\n          buttonSize=\"sm\"\n          i18n=\"Resend SMS OTP button@@bb-sms-otp-signing.resend\"\n          (click)=\"resend.emit()\"\n        >\n          Resend message\n        </button>\n      </ng-template>\n    </ng-container>\n    <ng-template #displayNoRemainingRequests>\n      <span\n        data-role=\"ts-sms-otp-no-resend\"\n        class=\"bb-subtitle bb-text-danger\"\n        i18n=\"No otp resend attempts remaining@@bb-sms-otp-signing.no-resend\"\n      >\n        You have no SMS resend attempts left. <br />\n        Please enter the correct OTP code or cancel this transaction.\n      </span>\n    </ng-template>\n  </div>\n\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"ts-sms-otp-field\"\n        class=\"bb-form-field bb-form-field--xs\"\n        formControlName=\"otp\"\n        i18n-label=\"Aria label for otp field input@@bb-sms-otp-signing.label\"\n        label=\"Input OTP code\"\n        [maxLength]=\"data.expectedOtpLength\"\n        [minLength]=\"data.expectedOtpLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"true\">\n        <span\n          *ngIf=\"showInvalidError()\"\n          data-role=\"ts-sms-otp-incorrect-error\"\n          i18n=\"Otp input invalid error message@@bb-sms-otp-signing.errors.invalid\"\n        >\n          Incorrect code. Try again.\n        </span>\n        <span\n          *ngIf=\"showMissingError()\"\n          data-role=\"ts-sms-otp-missing-error\"\n          i18n=\"Otp input missing error message@@bb-sms-otp-signing.errors.missing\"\n        >\n          You must enter an OTP.\n        </span>\n      </bb-input-validation-message-ui>\n      <small class=\"bb-text-support\" i18n=\"Otp input helper text@@bb-sms-otp-signing.helper\">\n        Value must be exactly {{ data.expectedOtpLength }} digits\n      </small>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-sms-otp-complete\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-sms-otp-signing.complete\"\n      >\n        Complete\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-sms-otp-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"cancel.emit()\"\n        i18n=\"Cancel button@@bb-sms-otp-signing.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i5$2.ProgressbarComponent, selector: "bb-progressbar-ui", inputs: ["height", "max", "showValue", "striped", "animated", "type", "value"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningSmsOtpComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-sms-otp',
                    templateUrl: 'sms-otp.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$4.FormBuilder }, { type: CountdownService }]; }, propDecorators: { cancel: [{
                type: Output
            }], submitResponse: [{
                type: Output
            }], acceptError: [{
                type: Output
            }], resend: [{
                type: Output
            }], previousData: [{
                type: Input
            }], data: [{
                type: Input
            }], error: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/ban-types */
class TransactionSigningInterfaceComponent {
    constructor() {
        this.failure = new EventEmitter();
        this.postSuccess = new EventEmitter();
        this.poll = new EventEmitter();
        this.post = new EventEmitter();
        /**
         * Whether a signing is pending.
         */
        this.isPending = false;
        this.modalOptions = {
            keyboard: false,
            backdrop: 'static',
        };
    }
    /**
     * The data involved in the challenge.
     */
    get challengeData() {
        if (!this.currentChallengeData) {
            throw new Error('No current challenge data set');
        }
        return this.currentChallengeData;
    }
    set challengeData(newData) {
        this.previousChallengeData = this.currentChallengeData;
        this.currentChallengeData = Object.assign(Object.assign({}, this.previousChallengeData), newData);
    }
}
/** @nocollapse */ TransactionSigningInterfaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningInterfaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningInterfaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningInterfaceComponent, selector: "bb-transaction-signing-interface", inputs: { isPending: "isPending", error: "error", transactionData: "transactionData", challengeType: "challengeType", enableResendPushNotification: "enableResendPushNotification", challengeError: "challengeError", challengeData: "challengeData" }, outputs: { failure: "failure", postSuccess: "postSuccess", poll: "poll", post: "post" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"true\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui data-role=\"ts-modal\">\n    <ng-template bbCustomModalHeader>\n      <bb-transaction-signing-header [data]=\"transactionData\"></bb-transaction-signing-header>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <hr class=\"mt-0\" />\n      <bb-transaction-signing-action-pending *ngIf=\"isPending\"></bb-transaction-signing-action-pending>\n      <ng-container *ngIf=\"!isPending\">\n        <bb-transaction-signing-error\n          *ngIf=\"challengeError\"\n          [error]=\"challengeError\"\n          (closeModal)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-error>\n        <bb-transaction-signing-hard-token\n          *ngIf=\"challengeType === 'hard-token-auth'\"\n          [data]=\"challengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-hard-token>\n        <bb-transaction-signing-oob-select-device\n          *ngIf=\"challengeType === 'oob-ts-select-device'\"\n          [data]=\"challengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-oob-select-device>\n        <bb-transaction-signing-oob-device\n          *ngIf=\"challengeType === 'oob-uaf-auth'\"\n          [data]=\"challengeData\"\n          [enableResendPushNotification]=\"enableResendPushNotification\"\n          [error]=\"error\"\n          (poll)=\"poll.emit({ responseType: 'system-poll' })\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n          (resend)=\"post.emit({ responseType: 'pn-resend' })\"\n        >\n        </bb-transaction-signing-oob-device>\n        <bb-transaction-signing-sms-otp\n          *ngIf=\"challengeType === 'sms-otp-auth'\"\n          [data]=\"challengeData\"\n          [previousData]=\"previousChallengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n          (resend)=\"post.emit({ responseType: 'otp-resend' })\"\n        >\n        </bb-transaction-signing-sms-otp>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i1$5.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$5.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: TransactionSigningHeaderComponent, selector: "bb-transaction-signing-header", inputs: ["data"] }, { type: i1$5.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: TransactionSigningActionPendingComponent, selector: "bb-transaction-signing-action-pending" }, { type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: TransactionSigningHardTokenComponent, selector: "bb-transaction-signing-hard-token", inputs: ["data", "error"], outputs: ["cancel", "submitResponse", "acceptError"] }, { type: TransactionSigningOobSelectDeviceComponent, selector: "bb-transaction-signing-oob-select-device", inputs: ["data", "error"], outputs: ["cancel", "acceptError", "submitResponse"] }, { type: TransactionSigningOobDeviceComponent, selector: "bb-transaction-signing-oob-device", inputs: ["error", "enableResendPushNotification", "data"], outputs: ["acceptError", "cancel", "poll", "resend"] }, { type: TransactionSigningSmsOtpComponent, selector: "bb-transaction-signing-sms-otp", inputs: ["previousData", "data", "error"], outputs: ["cancel", "submitResponse", "acceptError", "resend"] }], directives: [{ type: i1$5.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$5.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningInterfaceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-interface',
                    templateUrl: 'interface.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { failure: [{
                type: Output
            }], postSuccess: [{
                type: Output
            }], poll: [{
                type: Output
            }], post: [{
                type: Output
            }], isPending: [{
                type: Input
            }], error: [{
                type: Input
            }], transactionData: [{
                type: Input
            }], challengeType: [{
                type: Input
            }], enableResendPushNotification: [{
                type: Input
            }], challengeError: [{
                type: Input
            }], challengeData: [{
                type: Input
            }] } });

class TransactionSigningComponent {
    constructor(transactionSigningService, config) {
        this.transactionSigningService = transactionSigningService;
        this.config = config;
        this.errorSubject = new BehaviorSubject(undefined);
        this.pendingSubject = new BehaviorSubject(false);
        this.challengeSubject = new BehaviorSubject(undefined);
        this.requestSubscription = this.setupRequestSubscription();
        this.challenge = this.challengeSubject.asObservable();
        this.error = this.errorSubject.asObservable();
        this.pending = this.pendingSubject.asObservable();
        this.enableResendPushNotification = this.config.enableResendPushNotification;
    }
    ngOnDestroy() {
        this.requestSubscription.unsubscribe();
        if (this.pollingSubscription) {
            this.pollingSubscription.unsubscribe();
        }
    }
    onFailure(error) {
        this.transactionSigningService.completeWithFailure(error);
        this.clearChallenge();
    }
    onSuccess() {
        this.transactionSigningService.completeWithSuccess();
        this.clearChallenge();
    }
    onPoll(data) {
        this.pollingSubscription = of(data)
            .pipe(switchMap((d) => this.transactionSigningService.respondToChallenge(d)), retryWhen((errors) => {
            return errors.pipe(switchMap((response) => {
                if (response.error) {
                    return throwError(response);
                }
                return timer(this.config.pollingCycleTime);
            }));
        }))
            .subscribe({
            next: () => this.onSuccess(),
            error: (response) => {
                this.errorSubject.next(response.error);
            },
        });
    }
    onPost(data) {
        if (this.pollingSubscription) {
            this.pollingSubscription.unsubscribe();
        }
        this.pendingSubject.next(true);
        this.transactionSigningService.respondToChallenge(data).subscribe({
            next: () => this.onSuccess(),
            error: (response) => {
                if (response.error) {
                    if (response.error.errorDescription === 'rejected_by_user') {
                        this.onFailure(new Error(response.error.errorDescription));
                    }
                    else {
                        this.errorSubject.next(response.error);
                    }
                }
                else {
                    this.challengeSubject.next(response);
                }
                this.pendingSubject.next(false);
            },
        });
    }
    setupRequestSubscription() {
        return this.transactionSigningService.requestSubject.subscribe((value) => this.updateChallenge(value));
    }
    updateChallenge(handler) {
        this.txnData = handler.transactionData;
        this.pendingSubject.next(false);
        if (handler.challenge) {
            this.challengeSubject.next(handler.challenge);
        }
    }
    clearChallenge() {
        this.challengeSubject.next(undefined);
        this.errorSubject.next(undefined);
        this.txnData = undefined;
        this.pendingSubject.next(false);
    }
}
/** @nocollapse */ TransactionSigningComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningComponent, deps: [{ token: TransactionSigningService }, { token: TRANSACTION_SIGNING_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningComponent, selector: "bb-transaction-signing", ngImport: i0, template: "<bb-transaction-signing-interface\n  *ngIf=\"challenge | async as challengeData\"\n  [isPending]=\"(pending | async) || false\"\n  [error]=\"(error | async) || undefined\"\n  [transactionData]=\"txnData\"\n  [challengeType]=\"challengeData.challengeType\"\n  [challengeData]=\"challengeData.challengeData\"\n  [challengeError]=\"challengeData.error\"\n  [enableResendPushNotification]=\"enableResendPushNotification\"\n  (failure)=\"onFailure($event)\"\n  (postSuccess)=\"onSuccess()\"\n  (poll)=\"onPoll($event)\"\n  (post)=\"onPost($event)\"\n>\n</bb-transaction-signing-interface>\n", components: [{ type: TransactionSigningInterfaceComponent, selector: "bb-transaction-signing-interface", inputs: ["isPending", "error", "transactionData", "challengeType", "enableResendPushNotification", "challengeError", "challengeData"], outputs: ["failure", "postSuccess", "poll", "post"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing',
                    templateUrl: 'transaction-signing.component.html',
                }]
        }], ctorParameters: function () { return [{ type: TransactionSigningService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TRANSACTION_SIGNING_CONFIG]
                }] }]; } });

/**
 * Interceptor used to check for reauthentication errors
 */
class TransactionSigningInterceptor {
    constructor(transactionSigningService) {
        this.transactionSigningService = transactionSigningService;
    }
    intercept(request, next) {
        return next
            .handle(request)
            .pipe(catchError((error) => this.transactionSigningService.initiateTransactionSigning(error)));
    }
}
/** @nocollapse */ TransactionSigningInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningInterceptor, deps: [{ token: TransactionSigningService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ TransactionSigningInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: TransactionSigningService }]; } });

const tsDefaults = {
    useRedirectFlow: false,
    pollingCycleTime: 3000,
    enableResendPushNotification: false,
};
const providers = [
    TransactionSigningService,
    {
        provide: HTTP_INTERCEPTORS,
        useClass: TransactionSigningInterceptor,
        multi: true,
    },
];
const defaultConfigProviders = [
    {
        provide: TRANSACTION_SIGNING_CONFIG,
        useValue: tsDefaults,
    },
];
const uiComponents = [
    ModalModule,
    HeaderModule,
    ButtonModule,
    ReactiveFormsModule,
    AmountModule,
    InputTextModule,
    InputValidationMessageModule,
    LoadingIndicatorModule,
    EmptyStateModule,
    AlertModule,
    IconModule,
    ProgressbarModule,
    DropdownSingleSelectModule,
];
const components = [
    TransactionSigningComponent,
    TransactionSigningErrorComponent,
    TransactionSigningInterfaceComponent,
    TransactionSigningActionPendingComponent,
    TransactionSigningHeaderComponent,
    TransactionSigningHardTokenComponent,
    TransactionSigningOobDeviceComponent,
    TransactionSigningOobSelectDeviceComponent,
    TransactionSigningSmsOtpComponent,
    TransactionAmountPipe,
];
/**
 * Module used to initialize Transaction Signing with a configuration
 */
class TransactionSigningModule {
    /**
     * Creates a configured TransactionSigningModule.
     *
     * This should be called only once per app.
     *
     * @usageNotes
     *
     * ### Example
     *
     * ```
     * @NgModule({
     *   imports: [
     *     TransactionSigningModule.withConfig({
     *        useRedirectFlow: true,
     *        pollingCycleTime: 5000,
     *        enableResendPushNotification: true,
     *     })
     *   ]
     * })
     * class AppModule {}
     * ```
     */
    static withConfig(config) {
        return {
            ngModule: TransactionSigningModule,
            providers: [
                {
                    provide: TRANSACTION_SIGNING_CONFIG,
                    useValue: Object.assign(Object.assign({}, tsDefaults), config),
                },
                ...providers,
            ],
        };
    }
}
/** @nocollapse */ TransactionSigningModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ TransactionSigningModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningModule, declarations: [TransactionSigningComponent,
        TransactionSigningErrorComponent,
        TransactionSigningInterfaceComponent,
        TransactionSigningActionPendingComponent,
        TransactionSigningHeaderComponent,
        TransactionSigningHardTokenComponent,
        TransactionSigningOobDeviceComponent,
        TransactionSigningOobSelectDeviceComponent,
        TransactionSigningSmsOtpComponent,
        TransactionAmountPipe], imports: [CommonModule, ModalModule,
        HeaderModule,
        ButtonModule,
        ReactiveFormsModule,
        AmountModule,
        InputTextModule,
        InputValidationMessageModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        AlertModule,
        IconModule,
        ProgressbarModule,
        DropdownSingleSelectModule], exports: [TransactionSigningComponent] });
/** @nocollapse */ TransactionSigningModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningModule, providers: [...providers, ...defaultConfigProviders], imports: [[CommonModule, ...uiComponents]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiComponents],
                    declarations: [...components],
                    providers: [...providers, ...defaultConfigProviders],
                    exports: [TransactionSigningComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ProgressStatus, TRANSACTION_SIGNING_CONFIG, TransactionSigningComponent, TransactionSigningHelperService, TransactionSigningInterceptor, TransactionSigningModule, TransactionSigningService, TransactionStatus };
//# sourceMappingURL=backbase-identity-auth-transaction-signing.js.map
