(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/localize/init'), require('@angular/common/http'), require('@angular/common'), require('@backbase/identity-auth'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/button'), require('@angular/forms'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/progressbar')) :
    typeof define === 'function' && define.amd ? define('@backbase/identity-auth/transaction-signing', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/localize/init', '@angular/common/http', '@angular/common', '@backbase/identity-auth', '@backbase/ui-ang/modal', '@backbase/ui-ang/header', '@backbase/ui-ang/amount', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/button', '@angular/forms', '@backbase/ui-ang/alert', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/icon', '@backbase/ui-ang/progressbar'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["identity-auth"] = global.backbase["identity-auth"] || {}, global.backbase["identity-auth"]["transaction-signing"] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.ng.localize.init, global.ng.common.http, global.ng.common, global.backbase["identity-auth"], global.i1$5, global.i1$1, global.i2, global.i1$2, global.i1$3, global.i6, global.ng.forms, global.i3$1, global.i4, global.i5$1, global.i3$2, global.i4$1, global.i5$2));
})(this, (function (exports, i0, rxjs, operators, init, i1, i5, i3, i1$5, i1$1, i2, i1$2, i1$3, i6, i1$4, i3$1, i4, i5$1, i3$2, i4$1, i5$2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);

    /**
     * TransactionSigningConfig Injection Token
     */
    var TRANSACTION_SIGNING_CONFIG = new i0.InjectionToken('TransactionSigningConfig injection token');

    var CountdownService = /** @class */ (function () {
        function CountdownService() {
            this.counter = new rxjs.BehaviorSubject(0);
            this.finished = new rxjs.Subject();
            this.remainingTime$ = this.counter.asObservable();
        }
        CountdownService.prototype.registerStart = function (period) {
            this.counter.next(period);
            this.dueTime = new Date().getTime() + period * 1000;
        };
        Object.defineProperty(CountdownService.prototype, "remainingTime", {
            get: function () {
                return Math.ceil((this.dueTime - new Date().getTime()) / 1000);
            },
            enumerable: false,
            configurable: true
        });
        CountdownService.prototype.start = function (period) {
            var _this = this;
            this.registerStart(period);
            rxjs.interval(1000)
                .pipe(operators.takeUntil(this.finished), operators.map(function () { return _this.remainingTime; }))
                .subscribe(function (remainingTime) {
                if (remainingTime > 0) {
                    _this.counter.next(remainingTime);
                }
                else {
                    _this.counter.next(0);
                    _this.finished.next();
                }
            });
        };
        return CountdownService;
    }());
    /** @nocollapse */ CountdownService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CountdownService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ CountdownService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CountdownService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CountdownService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    exports.ProgressStatus = void 0;
    (function (ProgressStatus) {
        ProgressStatus["CONFIRMATION_PENDING"] = "CONFIRMATION_PENDING";
        ProgressStatus["USER_DECLINED"] = "USER_DECLINED";
        ProgressStatus["SYSTEM_DECLINED"] = "SYSTEM_DECLINED";
        ProgressStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
        ProgressStatus["SENDING"] = "SENDING";
        ProgressStatus["ACCEPTED"] = "ACCEPTED";
        ProgressStatus["REJECTED"] = "REJECTED";
        ProgressStatus["PROCESSED"] = "PROCESSED";
        ProgressStatus["NO_PROGRESS"] = "NO_PROGRESS";
    })(exports.ProgressStatus || (exports.ProgressStatus = {}));
    exports.TransactionStatus = void 0;
    (function (TransactionStatus) {
        TransactionStatus["success"] = "success";
        TransactionStatus["rejected"] = "rejected";
        TransactionStatus["declined"] = "declined";
        TransactionStatus["pending"] = "pending";
    })(exports.TransactionStatus || (exports.TransactionStatus = {}));

    var TransactionSigningHelperService = /** @class */ (function () {
        function TransactionSigningHelperService() {
            this.defaultPollInterval = 1000;
            this.defaultMaxRetries = 3;
            this.defaultStatusMap = {
                success: [exports.ProgressStatus.ACCEPTED, exports.ProgressStatus.PROCESSED, exports.ProgressStatus.PENDING_APPROVAL],
                rejected: [exports.ProgressStatus.REJECTED],
                declined: [exports.ProgressStatus.SYSTEM_DECLINED, exports.ProgressStatus.USER_DECLINED],
                pending: [exports.ProgressStatus.CONFIRMATION_PENDING, exports.ProgressStatus.SENDING],
            };
        }
        /**
         * Determines if the response was returned from the Transaction Signing flow.
         * @param response the data returned after a possible transaction signing request.
         * @returns boolean
         */
        TransactionSigningHelperService.prototype.isTransactionSigningResponse = function (response) {
            return response && !!response['confirmation-type'];
        };
        /**
         * Polls a fetch function. Designed to run after transaction signing has occurred.
         * @param data  this is passed to the fetchFn as param.
         * @param fetchFn a function that triggers an http call.
         * @param pollOptions options to configure the polling such as pollInterval, maxRetries etc.
         * @param pendingStatuses array of statuses which determines if the polling should continue.
         * @returns an Observable that sequencially emits a value based on configured time interval.
         */
        TransactionSigningHelperService.prototype.setupPolling = function (data, fetchFn, pollOptions, pendingStatuses) {
            var pollUntil = pollOptions.pollUntilFn || this.defaultPollUntilFn.bind(this, pendingStatuses);
            return rxjs.interval(pollOptions.pollInterval || this.defaultPollInterval).pipe(operators.takeUntil(pollOptions.complete$), operators.switchMap(function () { return rxjs.from(fetchFn(data)); }), operators.retry(pollOptions.maxRetries || this.defaultMaxRetries), operators.filter(function (res) { return pollUntil(res); }), operators.first());
        };
        /**
         * Handles scenarios after signing a transaction and triggers appropriate callbacks.
         * @param options Configuration for determining different flows of the transaction.
         */
        TransactionSigningHelperService.prototype.getTransactionInfo = function (options) {
            if (options.asyncPollingOptions) {
                this.handleAsyncPollingFlow(options);
            }
            else {
                this.handleGenericFlow(options);
            }
        };
        TransactionSigningHelperService.prototype.defaultPollUntilFn = function (pendingStatuses, status) {
            return !!status && !pendingStatuses.includes(status);
        };
        TransactionSigningHelperService.prototype.handleAsyncPollingFlow = function (options) {
            var _this = this;
            var asyncPollingOptions = options.asyncPollingOptions;
            var pending = (options.statusMap || this.defaultStatusMap).pending;
            if (options.fetchFn) {
                this.setupPolling(options.data, options.fetchFn, asyncPollingOptions, pending).subscribe(function (status) {
                    _this.triggerTransactionCallback({ status: status }, options);
                }, function (error) {
                    options.onError(error);
                });
            }
            else {
                console.warn('`fetchFn` is mandatory when polling options are provided');
            }
        };
        TransactionSigningHelperService.prototype.handleGenericFlow = function (options) {
            var _this = this;
            var item$ = options.fetchFn ? options.fetchFn(options.data) : rxjs.of(options.data);
            item$.pipe(operators.first()).subscribe(function (response) {
                _this.triggerTransactionCallback(response, options);
            }, function (error) {
                options.onError(error);
            });
        };
        TransactionSigningHelperService.prototype.triggerTransactionCallback = function (response, options) {
            var status = (response || {}).status;
            var _a = options.statusMap || this.defaultStatusMap, success = _a.success, declined = _a.declined, rejected = _a.rejected;
            if (success.includes(status)) {
                options.onSuccess(response);
            }
            else if (declined.includes(status)) {
                options.onDeclined(response);
            }
            else if (rejected.includes(status)) {
                options.onRejected(response);
            }
            else {
                options.onError(response);
            }
        };
        return TransactionSigningHelperService;
    }());
    /** @nocollapse */ TransactionSigningHelperService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningHelperService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ TransactionSigningHelperService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningHelperService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningHelperService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    function getHttpHeaderValueWithName(headers, name) {
        var headerKey = headers.keys().find(function (key) { return key.toLowerCase() === name; });
        return (headerKey && headers.get(headerKey)) || undefined;
    }
    function hasStatusWithHeaderValue(response, status, headerKey, headerValue) {
        var authHeaderValue = getHttpHeaderValueWithName(response.headers, headerKey);
        return response.status === status && authHeaderValue === headerValue;
    }

    /*
     * Sets the input hard token challenge amount to a fixed number of decimal places.
     * Takes a decimalPlaces argument that defaults to 2.
     */
    var TransactionAmountPipe = /** @class */ (function () {
        function TransactionAmountPipe() {
        }
        TransactionAmountPipe.prototype.transform = function (value, decimalPlaces) {
            if (decimalPlaces === void 0) { decimalPlaces = 2; }
            return Number(value.data.txnData.paymentAmount).toFixed(decimalPlaces);
        };
        return TransactionAmountPipe;
    }());
    /** @nocollapse */ TransactionAmountPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionAmountPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ TransactionAmountPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionAmountPipe, name: "transactionAmount" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionAmountPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'transactionAmount',
                    }]
            }] });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var HeaderPaymentTitle = {
        defaultPayment: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@bb-transaction-signing-header.initiate-payment.title.default-payment:Authorise Payment"], [":@@bb-transaction-signing-header.initiate-payment.title.default-payment:Authorise Payment"]))),
        debitPayment: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorize Debit"], [":@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorize Debit"]))),
        debitEditedPayment: $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorize Debit (Edited)"], [":@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorize Debit (Edited)"]))),
        editedPayment: $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorise Payment (Edited)"], [":@@bb-transaction-signing-header.initiate-payment.title.debit-payment:Authorise Payment (Edited)"]))),
    };
    var templateObject_1, templateObject_2, templateObject_3, templateObject_4;

    /**
     * Angular Service used to instigate and manage transaction signing for an action.
     */
    var TransactionSigningService = /** @class */ (function () {
        /** @internal */
        function TransactionSigningService(httpClient, location, oidcAuthService, serviceConfig) {
            var _this = this;
            this.httpClient = httpClient;
            this.location = location;
            this.oidcAuthService = oidcAuthService;
            this.serviceConfig = serviceConfig;
            /**
             * A subject that emits when a new transaction signing event occurs.
             * The subject will emit an object containing the initial challenge from
             * the Identity Auth Server. To respond to this challenge use the
             * `respondToChallenge` endpoint provided.
             */
            this.requestSubject = new rxjs.ReplaySubject(1);
            this.actionSubject = new rxjs.ReplaySubject(1);
            this.observerSubject = new rxjs.ReplaySubject(1);
            this.isHandlingTransaction = false;
            this.authHeaderKey = 'www-authenticate';
            this.authHeaderValue = 'Bearer challenge_types=reauth';
            this.authStatus = 401;
            this.onAuthError = function (err) {
                if (err.error && err.error.challenges) {
                    var _a = err.error.challenges[0], challengeType = _a.challengeType, actionUrl = _a.actionUrl, challengeData = __rest(_a, ["challengeType", "actionUrl"]);
                    _this.actionSubject.next(_this.getActionUrl(actionUrl));
                    return rxjs.throwError({
                        challengeType: challengeType,
                        challengeData: challengeData,
                    });
                }
                return rxjs.throwError(_this.getErrorResponse(err));
            };
            if (!oidcAuthService) {
                throw new Error("In order to use ImpersonationService, please include IdentityAuthModule to your application module");
            }
        }
        /** @internal */
        TransactionSigningService.prototype.initiateTransactionSigning = function (error) {
            if (!hasStatusWithHeaderValue(error, this.authStatus, this.authHeaderKey, this.authHeaderValue) ||
                this.isHandlingTransaction) {
                return rxjs.throwError(error);
            }
            var body = error.error || {};
            var challenge = this.getFirstChallenge(body);
            return challenge ? this.authenticateUser(challenge, body.data) : rxjs.throwError(error);
        };
        /**
         * Method that supports the response to an issued challenge.
         * @param data The data to be submitted in response to the challenge.
         * @returns an observable that will either be successful or throw a new challenge
         */
        TransactionSigningService.prototype.respondToChallenge = function (data) {
            var _this = this;
            return this.actionSubject.pipe(operators.first(), operators.switchMap(function (url) { return _this.postResponse(url, data); }));
        };
        /**
         * Method that will announce to the initiating widget that the transaction signing
         * process is complete, and that the process was successful.
         * The widget will be updated with an HttpResponse object containing the initial
         * transaction data in the body.
         */
        TransactionSigningService.prototype.completeWithSuccess = function () {
            var _this = this;
            this.observerSubject.pipe(operators.withLatestFrom(this.requestSubject), operators.first()).subscribe({
                next: function (_b) {
                    var _c = __read(_b, 2), observer = _c[0], request = _c[1];
                    observer.next(new i1.HttpResponse({ body: request.transactionData }));
                    observer.complete();
                    _this.isHandlingTransaction = false;
                },
            });
        };
        /**
         * Method that will announce to the initiating widget that the transaction signing
         * process is complete, and that the process failed.
         * The widget will be updated with an HttpErrorResponse object containing the initial
         * transaction data and the error reason.
         */
        TransactionSigningService.prototype.completeWithFailure = function (error) {
            var _this = this;
            this.observerSubject.pipe(operators.withLatestFrom(this.requestSubject), operators.first()).subscribe({
                next: function (_b) {
                    var _c = __read(_b, 2), observer = _c[0], request = _c[1];
                    observer.error(new i1.HttpErrorResponse({
                        status: 401,
                        statusText: error.message,
                        error: {
                            error: error,
                            data: request.transactionData,
                        },
                    }));
                    _this.isHandlingTransaction = false;
                },
            });
        };
        TransactionSigningService.prototype.getFirstChallenge = function (body) {
            var challenges = body.challenges || [];
            return challenges.find(function (c) { return c.scope !== undefined; });
        };
        TransactionSigningService.prototype.authenticateUser = function (challenge, transactionData) {
            var _this = this;
            return this.reauthenticate(challenge).pipe(operators.first(), operators.mapTo(new i1.HttpResponse({ body: transactionData })), operators.catchError(function (response) {
                return new rxjs.Observable(function (observer) {
                    _this.isHandlingTransaction = true;
                    _this.requestSubject.next({
                        challenge: response,
                        transactionData: transactionData,
                    });
                    _this.observerSubject.next(observer);
                });
            }));
        };
        TransactionSigningService.prototype.reauthenticate = function (challenge) {
            var _this = this;
            var acrValues = challenge.acrValues, scope = challenge.scope;
            return this.oidcAuthService.createReauthLoginUrl(scope, acrValues).pipe(operators.switchMap(function (url) {
                if (_this.serviceConfig && _this.serviceConfig.useRedirectFlow) {
                    _this.location.go(url);
                }
                return _this.requestChallenge(url);
            }));
        };
        TransactionSigningService.prototype.requestChallenge = function (url) {
            return this.httpClient
                .get(url, this.getRequestOptions())
                .pipe(operators.catchError(this.onAuthError));
        };
        TransactionSigningService.prototype.postResponse = function (url, data) {
            return this.httpClient
                .post(url, data, this.getRequestOptions())
                .pipe(operators.catchError(this.onAuthError));
        };
        TransactionSigningService.prototype.getRequestOptions = function () {
            return {
                headers: {
                    Accept: '*/*',
                    'X-Convert-Redirects': 'true',
                    Authentication: this.oidcAuthService.authorizationHeader(),
                },
                withCredentials: true,
                observe: 'response',
            };
        };
        TransactionSigningService.prototype.getErrorResponse = function (error) {
            var url = new URL(error.headers.get('location') || error.headers.get('Location') || '');
            var params = new URLSearchParams(url.search);
            return {
                error: {
                    errorCode: params.get('error') || 'unknown_error',
                    errorDescription: params.get('error_description') || undefined,
                },
            };
        };
        TransactionSigningService.prototype.getActionUrl = function (url) {
            var idp = new URL(this.oidcAuthService.authConfig.issuer || '');
            return url.startsWith('/auth') ? "" + idp.origin + url : idp.origin + "/auth" + url;
        };
        return TransactionSigningService;
    }());
    /** @nocollapse */ TransactionSigningService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningService, deps: [{ token: i1__namespace.HttpClient }, { token: i5__namespace.Location }, { token: i3__namespace.ɵɵOidcAuthService, optional: true }, { token: TRANSACTION_SIGNING_CONFIG }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ TransactionSigningService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: i5__namespace.Location }, { type: i3__namespace.ɵɵOidcAuthService, decorators: [{
                            type: i0.Optional
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TRANSACTION_SIGNING_CONFIG]
                        }] }];
        } });

    var TransactionSigningHeaderComponent = /** @class */ (function () {
        function TransactionSigningHeaderComponent() {
            this.headerPaymentTitle = HeaderPaymentTitle;
        }
        return TransactionSigningHeaderComponent;
    }());
    /** @nocollapse */ TransactionSigningHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningHeaderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningHeaderComponent, selector: "bb-transaction-signing-header", inputs: { data: "data" }, ngImport: i0__namespace, template: "<ng-container [ngSwitch]=\"data?.['confirmation-type'] || data?.confirmationType\">\n  <div *ngSwitchDefault>\n    <ng-container\n      *ngTemplateOutlet=\"\n      data?.['counter-party-role'] === 'DEBTOR'\n        ? debitHeaderTmpl\n        : defaultHeaderTmpl;\n        context: { $implicit: data, isEdited: (data?.['confirmation-type'] || data?.confirmationType) === 'edit-payment' }\"\n    >\n    </ng-container>\n  </div>\n\n  <div *ngSwitchCase=\"'approve-payment'\">\n    <bb-header-ui\n      headingType=\"h2\"\n      i18n-heading=\"\n        Transaction signing modal title for approve-payment@@bb-transaction-signing-header.approve-payment.title\"\n      heading=\"Authorisation\"\n    >\n    </bb-header-ui>\n    <div\n      *ngIf=\"data?.['counter-party-role'] !== 'DEBTOR'; else debitSubTitle\"\n      data-role=\"ts-modal-subtitle\"\n      i18n=\"\n        Transaction signing modal sub-title for approve-payment@@bb-transaction-signing-header.approve-payment.sub-title\"\n    >\n      Payment of\n      <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.amount\"></bb-amount-ui>\n      to {{ data?.['counter-party-name'] }}.\n    </div>\n  </div>\n  <div *ngSwitchCase=\"'approve-batch'\">\n    <bb-header-ui\n      headingType=\"h2\"\n      i18n-heading=\"\n        Transaction signing modal title for approve-batch@@bb-transaction-signing-header.approve-batch.title\"\n      heading=\"Authorisation\"\n    >\n    </bb-header-ui>\n    <div\n      data-role=\"ts-modal-subtitle\"\n      i18n=\"\n        Transaction signing modal sub-title for approve-batch@@bb-transaction-signing-header.approve-batch.sub-title\"\n    >\n      Batch with a total value of<br />\n      <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.totalAmount\"></bb-amount-ui>\n      to {{ data?.totalTransactionsCount }} {data?.totalTransactionsCount, plural, =1 {transfer} other {transfers}}\n      (multiple accounts).\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #debitHeaderTmpl let-data let-isEdited=\"isEdited\">\n  <bb-header-ui\n    headingType=\"h2\"\n    [heading]=\"isEdited ? headerPaymentTitle.debitEditedPayment : headerPaymentTitle.debitPayment\"\n  >\n  </bb-header-ui>\n\n  <ng-container *ngTemplateOutlet=\"debitSubTitle\"></ng-container>\n</ng-template>\n\n<ng-template #defaultHeaderTmpl let-data let-isEdited=\"isEdited\">\n  <bb-header-ui\n    headingType=\"h2\"\n    [heading]=\"isEdited ? headerPaymentTitle.editedPayment : headerPaymentTitle.defaultPayment\"\n  >\n  </bb-header-ui>\n\n  <div\n    data-role=\"ts-modal-subtitle\"\n    i18n=\"\n      Transaction signing modal sub-title for initiate-payment@@bb-transaction-signing-header.initiate-payment.sub-title\"\n  >\n    Send\n    <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.amount\"></bb-amount-ui>\n    to {{ data?.['counter-party-name'] }}.\n  </div>\n</ng-template>\n\n<ng-template #debitSubTitle>\n  <div\n    data-role=\"ts-modal-subtitle\"\n    i18n=\"\n      Transaction signing modal sub-title for\n      initiate-payment@@bb-transaction-signing-header.initiate-payment-debit.sub-title\"\n  >\n    Receive\n    <bb-amount-ui [currency]=\"data?.currency\" [amount]=\"data?.amount\"></bb-amount-ui>\n    from {{ data?.['counter-party-name'] }}.\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i5__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-header',
                        templateUrl: 'header.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }] } });

    var TransactionSigningActionPendingComponent = /** @class */ (function () {
        function TransactionSigningActionPendingComponent() {
        }
        return TransactionSigningActionPendingComponent;
    }());
    /** @nocollapse */ TransactionSigningActionPendingComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningActionPendingComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningActionPendingComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningActionPendingComponent, selector: "bb-transaction-signing-action-pending", ngImport: i0__namespace, template: "<bb-loading-indicator-ui\n  data-role=\"ts-action-pending\"\n  loaderSize=\"lg\"\n  i18n-text=\"Transaction signing action pending text@@bb-transaction-signing-action-pending.text\"\n  text=\"Performing action...\"\n>\n</bb-loading-indicator-ui>\n", components: [{ type: i1__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningActionPendingComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-action-pending',
                        templateUrl: 'action-pending.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var TransactionSigningErrorComponent = /** @class */ (function () {
        function TransactionSigningErrorComponent() {
            this.closeModal = new i0.EventEmitter();
        }
        TransactionSigningErrorComponent.prototype.onClose = function () {
            this.closeModal.emit(new Error(this.error && (this.error.errorDescription || this.error.errorCode)));
        };
        return TransactionSigningErrorComponent;
    }());
    /** @nocollapse */ TransactionSigningErrorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningErrorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningErrorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: { error: "error" }, outputs: { closeModal: "closeModal" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--md\" data-role=\"ts-error\">\n  <div class=\"bb-block bb-block--md\">\n    <ng-container *ngTemplateOutlet=\"tsErrorState\"></ng-container>\n  </div>\n  <div class=\"bb-button-bar bb-button-bar--center\">\n    <button\n      bbButton\n      data-role=\"ts-accept-error\"\n      class=\"bb-button-bar__button\"\n      color=\"primary\"\n      i18n=\"Cancel transaction button@@bb-transaction-signing-error.cancel\"\n      (click)=\"onClose()\"\n    >\n      Close\n    </button>\n  </div>\n</div>\n\n<ng-template #tsErrorState>\n  <ng-container [ngSwitch]=\"error?.errorDescription\">\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'invalid_token'\"\n      iconSize=\"xxl\"\n      iconModifier=\"lock\"\n      i18n-title=\"Transaction signing invalid token title@@bb-transaction-signing-error.invalid-token.title\"\n      title=\"Access denied\"\n      i18n-subtitle=\"Transaction signing invalid token subtitle@@bb-transaction-signing-error.invalid-token.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'confirmation_not_found'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing not found title@@bb-transaction-signing-error.not-found.title\"\n      title=\"No confirmation found\"\n      i18n-subtitle=\"Transaction signing not found subtitle@@bb-transaction-signing-error.not-found.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'confirmation_is_not_pending'\"\n      iconSize=\"xxl\"\n      iconModifier=\"access-alarm\"\n      i18n-title=\"Transaction signing not pending title@@bb-transaction-signing-error.not-pending.title\"\n      title=\"The confirmation has expired\"\n      i18n-subtitle=\"Transaction signing not pending subtitle@@bb-transaction-signing-error.not-pending.subtitle\"\n      subtitle=\"This transaction has timed out and been cancelled. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'confirmation_user_mismatch'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing user mismatch title@@bb-transaction-signing-error.user-mismatch.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"Transaction signing user mismatch subtitle@@bb-transaction-signing-error.user-mismatch.subtitle\"\n      subtitle=\"You do not have permission to confirm this action. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'rejected_by_user'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing rejected title@@bb-transaction-signing-error.rejected.title\"\n      title=\"Transaction rejected by user\"\n      i18n-subtitle=\"Transaction signing rejected subtitle@@bb-transaction-signing-error.rejected.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'user_disabled'\"\n      iconSize=\"xxl\"\n      iconModifier=\"lock\"\n      i18n-title=\"Transaction signing disabled title@@bb-transaction-signing-error.disabled.title\"\n      title=\"Unable to process transaction\"\n      i18n-subtitle=\"Transaction signing disabled subtitle@@bb-transaction-signing-error.disabled.subtitle\"\n      subtitle=\"This user is currently locked. Please cancel the dialogue and unlock your account before retrying the action.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'user_temporarily_disabled'\"\n      iconSize=\"xxl\"\n      iconModifier=\"lock\"\n      i18n-title=\"\n        Transaction signing temporarily disabled title@@bb-transaction-signing-error.temporarily-disabled.title\"\n      title=\"Unable to process transaction\"\n      i18n-subtitle=\"\n        Transaction signing temporarily disabled subtitle@@bb-transaction-signing-error.temporarily-disabled.subtitle\"\n      subtitle=\"This user is currently locked. Please cancel the dialogue and unlock your account before retrying the action.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'unsupported_challenge'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"\n        Transaction signing unsupported challenge title@@bb-transaction-signing-error.unsupported-challenge.title\"\n      title=\"Unable to process request\"\n      i18n-subtitle=\"\n        Transaction signing unsupported challenge subtitle@@bb-transaction-signing-error.unsupported-challenge.subtitle\"\n      subtitle=\"The transaction requires an unsupported challenge. Please cancel this dialogue and contact an admin.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'challenge_not_found'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing challenge not found title@@bb-transaction-signing-error.challenge-not-found.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"\n        Transaction signing challenge not found subtitle@@bb-transaction-signing-error.challenge-not-found.subtitle\"\n      subtitle=\"We were unable to process this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'hard_token_integration_error'\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"\n        Transaction signing hard token integration title@@bb-transaction-signing-error.hard-token-integration.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"\n        Transaction signing hard token integration\n        subtitle@@bb-transaction-signing-error.hard-token-integration.subtitle\"\n      subtitle=\"We could not reach the hard-token vendor to confirm your response. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchCase=\"'no_devices_registered'\"\n      iconSize=\"xxl\"\n      iconModifier=\"phonelink-off\"\n      i18n-title=\"\n        Transaction signing no devices registered title@@bb-transaction-signing-error.no-devices-registered.title\"\n      title=\"No devices available\"\n      i18n-subtitle=\"\n        Transaction signing no devices registered subtitle@@bb-transaction-signing-error.no-devices-registered.subtitle\"\n      subtitle=\"We were unable to process this transaction as no devices are registered. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n    <bb-empty-state-ui\n      *ngSwitchDefault\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      i18n-title=\"Transaction signing default error title@@bb-transaction-signing-error.default.title\"\n      title=\"Something went wrong\"\n      i18n-subtitle=\"Transaction signing default error subtitle@@bb-transaction-signing-error.default.subtitle\"\n      subtitle=\"We have experienced a critical error on this transaction. Please cancel this dialogue and try again.\"\n    >\n    </bb-empty-state-ui>\n  </ng-container>\n</ng-template>\n", components: [{ type: i1__namespace$3.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningErrorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-error',
                        templateUrl: 'error.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { closeModal: [{
                    type: i0.Output
                }], error: [{
                    type: i0.Input
                }] } });

    var TransactionSigningHardTokenComponent = /** @class */ (function () {
        function TransactionSigningHardTokenComponent(formBuilder) {
            this.formBuilder = formBuilder;
            this.cancel = new i0.EventEmitter();
            this.submitResponse = new i0.EventEmitter();
            this.acceptError = new i0.EventEmitter();
            this.invalidRequestError = 'invalid_request';
            this.displayErrors = false;
            this.form = this.formBuilder.group({
                otp: ['', [i1$4.Validators.required, i1$4.Validators.pattern(/^\d{6}$/)]],
            });
            this.displayAlert = false;
        }
        Object.defineProperty(TransactionSigningHardTokenComponent.prototype, "data", {
            get: function () {
                if (!this.challengeData) {
                    throw new Error('No challenge data set');
                }
                return this.challengeData;
            },
            set: function (value) {
                this.challengeData = value;
                this.displayAlert = false;
                this.displayErrors = false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionSigningHardTokenComponent.prototype, "error", {
            get: function () {
                return this.errorValue;
            },
            set: function (value) {
                this.displayAlert = false;
                this.displayErrors = false;
                if (value && this.isRecognizedError(value)) {
                    this.displayAlert = true;
                }
                else {
                    this.errorValue = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        TransactionSigningHardTokenComponent.prototype.onSubmit = function () {
            this.displayErrors = true;
            if (this.form.valid) {
                this.submitResponse.emit(Object.assign(Object.assign({}, this.form.value), { code: this.data.data.code }));
            }
        };
        TransactionSigningHardTokenComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        TransactionSigningHardTokenComponent.prototype.onErrorClose = function (error) {
            this.acceptError.emit(error);
        };
        TransactionSigningHardTokenComponent.prototype.hasError = function (control) {
            return this.displayErrors && control.errors && (control.errors.required || control.errors.pattern);
        };
        TransactionSigningHardTokenComponent.prototype.isRecognizedError = function (error) {
            return error.errorCode === this.invalidRequestError && error.errorDescription === this.invalidRequestError;
        };
        return TransactionSigningHardTokenComponent;
    }());
    /** @nocollapse */ TransactionSigningHardTokenComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningHardTokenComponent, deps: [{ token: i1__namespace$4.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningHardTokenComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningHardTokenComponent, selector: "bb-transaction-signing-hard-token", inputs: { data: "data", error: "error" }, outputs: { cancel: "cancel", submitResponse: "submitResponse", acceptError: "acceptError" }, ngImport: i0__namespace, template: "<bb-transaction-signing-error\n  *ngIf=\"errorValue; else displayForm\"\n  [error]=\"errorValue\"\n  (closeModal)=\"onErrorClose($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <bb-alert-ui\n    *ngIf=\"displayAlert\"\n    data-role=\"ts-hard-token-no-value-alert\"\n    i18n-title=\"No value alert title for hard token signing@@bb-hard-token-signing.alert.no-value.title\"\n    title=\"No value entered\"\n  >\n    <span i18n=\"No value alert message for hard token signing@@bb-hard-token-signing.alert.no-value.message\">\n      Please enter the value displayed on your {{ data.data.vendorDetails.model }} device.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"data.remainingAuthenticationAttempts !== undefined\"\n    data-role=\"ts-hard-token-remaining-alert\"\n    i18n-title=\"Remaining attempts alert title for hard token signing@@bb-hard-token-signing.alert.remaining.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Remaining attempts alert message for hard token signing@@bb-hard-token-signing.alert.remaining.message\">\n      The number you entered was incorrect. <br />\n      You have {{ data.remainingAuthenticationAttempts }} other {data.remainingAuthenticationAttempts, plural, =1\n      {attempt} other {attempts}} remaining.\n    </span>\n  </bb-alert-ui>\n  <div class=\"bb-block bb-block--md\" i18n=\"Instruction for hard token signing@@bb-hard-token-signing.instruction\">\n    Using your {{ data.data.vendorDetails.model }} device, follow these steps\n  </div>\n\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <ol data-role=\"hard-token-txn-widget__form\" class=\"bb-ordered-list bb-block bb-block--md\">\n      <li data-role=\"hard-token-txn-widget__form-sign\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 1 for hard token signing@@bb-hard-token-signing.steps.1\">\n          Press '<strong>sign</strong>' on your device\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-enter-pin\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 2 for hard token signing@@bb-hard-token-signing.steps.2\">\n          Enter your pin in to your device\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-reference-number\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 3 for hard token signing@@bb-hard-token-signing.steps.3\"> Enter the `reference number` </span>\n        <br />\n        <span class=\"bb-hero\">\n          {{ data.data.code }}\n        </span>\n      </li>\n      <li\n        data-role=\"hard-token-txn-widget__form-transaction-amount\"\n        *ngIf=\"data.data.txnData.paymentAmount !== undefined\"\n        class=\"bb-block bb-block--sm\"\n      >\n        <span i18n=\"Step 4 (when amount present) for hard token signing@@bb-hard-token-signing.steps.4\">\n          Enter the transaction amount\n        </span>\n        <br />\n        <span class=\"bb-hero\">\n          {{ data | transactionAmount }}\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-insert-number\" class=\"bb-block bb-block--sm\">\n        <span\n          data-role=\"hard-token-txn-widget__form-insert-number__financial\"\n          i18n=\"Step 5 (when amount present), or step 4 for hard token signing@@bb-hard-token-signing.steps.5\"\n        >\n          Insert the number produced on your {{ data.data.vendorDetails.model }} device\n        </span>\n        <br />\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            data-role=\"ts-hard-token-otp\"\n            class=\"bb-form-field bb-form-field--xs\"\n            formControlName=\"otp\"\n            i18n-attr.aria-label=\"Aria label for otp field input@@bb-hard-token-signing.otp.aria-label\"\n            attr.aria-label=\"Insert the number produced on your {{ data.data.vendorDetails.model }} device\"\n            [maxLength]=\"6\"\n            [minLength]=\"6\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui [showErrors]=\"hasError(form.controls.otp)\">\n            <span\n              data-role=\"ts-hard-token-otp-error\"\n              i18n=\"Otp input length error message@@bb-hard-token-signing.otp.errors.length\"\n            >\n              The value must be exactly 6 numbers.\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </li>\n    </ol>\n\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-hard-token-complete\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-hard-token-signing.complete\"\n      >\n        Complete\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-hard-token-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"onCancel()\"\n        i18n=\"Cancel button@@bb-hard-token-signing.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3__namespace$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4__namespace.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "transactionAmount": TransactionAmountPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningHardTokenComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-hard-token',
                        templateUrl: 'hard-token.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.FormBuilder }]; }, propDecorators: { cancel: [{
                    type: i0.Output
                }], submitResponse: [{
                    type: i0.Output
                }], acceptError: [{
                    type: i0.Output
                }], data: [{
                    type: i0.Input
                }], error: [{
                    type: i0.Input
                }] } });

    var TransactionSigningOobSelectDeviceComponent = /** @class */ (function () {
        function TransactionSigningOobSelectDeviceComponent(formBuilder) {
            this.formBuilder = formBuilder;
            this.cancel = new i0.EventEmitter();
            this.acceptError = new i0.EventEmitter();
            this.submitResponse = new i0.EventEmitter();
            this.form = this.formBuilder.group({
                device: [undefined, i1$4.Validators.required],
            });
            this.showErrors = false;
        }
        Object.defineProperty(TransactionSigningOobSelectDeviceComponent.prototype, "data", {
            get: function () {
                if (!this.challengeData) {
                    throw new Error('No challenge data set');
                }
                return this.challengeData;
            },
            set: function (value) {
                this.challengeData = value;
            },
            enumerable: false,
            configurable: true
        });
        TransactionSigningOobSelectDeviceComponent.prototype.onSubmit = function () {
            this.showErrors = true;
            if (this.form.invalid) {
                return;
            }
            this.submitResponse.emit({ deviceId: this.form.controls.device.value });
        };
        TransactionSigningOobSelectDeviceComponent.prototype.onCancel = function () {
            this.cancel.emit();
        };
        TransactionSigningOobSelectDeviceComponent.prototype.deviceHasFriendlyName = function (device) {
            return typeof device.friendlyName === 'string';
        };
        TransactionSigningOobSelectDeviceComponent.prototype.deviceGetVendorModelName = function (device) {
            return device.vendor && device.model ? device.vendor + " " + device.model : false;
        };
        Object.defineProperty(TransactionSigningOobSelectDeviceComponent.prototype, "showDeviceNotChosenError", {
            get: function () {
                return !this.form.value.device;
            },
            enumerable: false,
            configurable: true
        });
        return TransactionSigningOobSelectDeviceComponent;
    }());
    /** @nocollapse */ TransactionSigningOobSelectDeviceComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningOobSelectDeviceComponent, deps: [{ token: i1__namespace$4.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningOobSelectDeviceComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningOobSelectDeviceComponent, selector: "bb-transaction-signing-oob-select-device", inputs: { data: "data", error: "error" }, outputs: { cancel: "cancel", acceptError: "acceptError", submitResponse: "submitResponse" }, ngImport: i0__namespace, template: "<bb-transaction-signing-error *ngIf=\"error; else displayForm\" [error]=\"error\" (closeModal)=\"acceptError.emit($event)\">\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <label\n      for=\"bb-transaction-signing-select-device-dropdown\"\n      i18n=\"Select device text@@bb-oob-select-device-signing.text.label\"\n    >\n      Select the device you would like to sign this transaction with.\n    </label>\n    <p>\n      <small i18n=\"Devices ordered text@@bb-oob-select-device-signing.text.hint\">\n        (Devices ordered by most recent registered)\n      </small>\n    </p>\n\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        data-role=\"ts-select-device-control\"\n        id=\"bb-transaction-signing-select-device-dropdown\"\n        i18n-placeholder=\"Select device placeholder@@bb-oob-select-device-signing.input.select-placeholder\"\n        placeholder=\"Select a device...\"\n        formControlName=\"device\"\n        [required]=\"true\"\n      >\n        <ng-container *ngIf=\"challengeData && challengeData.devices\">\n          <ng-container *ngFor=\"let device of challengeData.devices\">\n            <bb-dropdown-single-select-option-ui\n              *ngIf=\"deviceHasFriendlyName(device); else noFriendlyNameDevice\"\n              data-role=\"ts-oob-select-device-option-with-name\"\n              label=\"{{ device.friendlyName }} (Registered on: {{ device.created | date: 'medium' }})\"\n              i18n-label=\"\n                Select device friendly name option@@bb-oob-select-device-signing.input.select-option-friendly-name\"\n              [value]=\"device.deviceId\"\n            >\n            </bb-dropdown-single-select-option-ui>\n\n            <ng-template #noFriendlyNameDevice>\n              <ng-container\n                *ngIf=\"device.vendor && device.model; then displayVendorModelDevice; else displayUnknownDevice\"\n              ></ng-container>\n            </ng-template>\n\n            <ng-template #displayVendorModelDevice>\n              <bb-dropdown-single-select-option-ui\n                data-role=\"ts-oob-select-device-option-with-vendor-model\"\n                label=\"{{ deviceGetVendorModelName(device) }} (Registered on: {{ device.created | date: 'medium' }})\"\n                i18n-label=\"\n                  Select device vendor model option@@bb-oob-select-device-signing.input.select-option-vendor-model\"\n                [value]=\"device.deviceId\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </ng-template>\n            <ng-template #displayUnknownDevice>\n              <bb-dropdown-single-select-option-ui\n                data-role=\"ts-oob-select-device-option-without-name\"\n                label=\"Unknown Device (Registered on: {{ device.created | date: 'medium' }})\"\n                i18n-label=\"Select device unknown option@@bb-oob-select-device-signing.input.select-option-unknown\"\n                [value]=\"device.deviceId\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </ng-template>\n          </ng-container>\n        </ng-container>\n      </bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui [showErrors]=\"showErrors\">\n        <span\n          *ngIf=\"showDeviceNotChosenError\"\n          data-role=\"ts-oob-select-device-missing-error\"\n          i18n=\"Device not chosen error message@@bb-oob-select-device-signing.errors.missing\"\n        >\n          You must choose a device.\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <p>\n      <strong\n        i18n=\"Selected device action description@@bb-oob-select-device-signing.text.selected-action-description\"\n        data-role=\"ts-select-device-validation-message\"\n      >\n        Your selected device will be sent a notification to sign the transaction.\n      </strong>\n    </p>\n    <hr />\n    <p>\n      <small i18n=\"Navigation away notice@@bb-oob-select-device-signing.text.navigation-away\">\n        Note: Navigation away from this modal will result in a cancellation of this transaction signing process.\n      </small>\n    </p>\n\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-select-device-continue\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-oob-select-device-signing.complete\"\n      >\n        Continue\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-select-device-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"onCancel()\"\n        i18n=\"Cancel button@@bb-oob-select-device-signing.cancel\"\n      >\n        Cancel transaction\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3__namespace$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i3__namespace$2.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i5__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i5__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningOobSelectDeviceComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-oob-select-device',
                        templateUrl: 'oob-select-device.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.FormBuilder }]; }, propDecorators: { cancel: [{
                    type: i0.Output
                }], acceptError: [{
                    type: i0.Output
                }], submitResponse: [{
                    type: i0.Output
                }], data: [{
                    type: i0.Input
                }], error: [{
                    type: i0.Input
                }] } });

    var TransactionSigningOobDeviceComponent = /** @class */ (function () {
        function TransactionSigningOobDeviceComponent(countdown) {
            this.countdown = countdown;
            this.acceptError = new i0.EventEmitter();
            this.cancel = new i0.EventEmitter();
            this.poll = new i0.EventEmitter();
            this.resend = new i0.EventEmitter();
            this.icon = '';
            this.timeUntilResend$ = this.countdown.remainingTime$;
        }
        Object.defineProperty(TransactionSigningOobDeviceComponent.prototype, "data", {
            get: function () {
                if (!this.challengeData) {
                    throw new Error('No challenge data set');
                }
                return this.challengeData;
            },
            set: function (value) {
                this.challengeData = value;
                if (this.challengeData) {
                    this.deviceInfo = this.challengeData.data.deviceInformation;
                    this.pushNotificationData = this.challengeData.data.pushNotificationInformation;
                    this.setResendTime();
                }
                if (this.deviceInfo) {
                    this.icon = this.deviceInfo.vendor === 'Apple' ? 'phone-iphone' : 'phone-android';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionSigningOobDeviceComponent.prototype, "pushData", {
            get: function () {
                if (!this.pushNotificationData) {
                    throw new Error('No push notification data set');
                }
                return this.pushNotificationData;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionSigningOobDeviceComponent.prototype, "pushFailure", {
            get: function () {
                return this.enableResendPushNotification && !this.pushData.sendSuccessful;
            },
            enumerable: false,
            configurable: true
        });
        TransactionSigningOobDeviceComponent.prototype.ngOnInit = function () {
            this.poll.emit();
        };
        TransactionSigningOobDeviceComponent.prototype.setResendTime = function () {
            if (this.pushData.nextResendSeconds > 0) {
                this.countdown.start(this.pushData.nextResendSeconds);
            }
        };
        return TransactionSigningOobDeviceComponent;
    }());
    /** @nocollapse */ TransactionSigningOobDeviceComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningOobDeviceComponent, deps: [{ token: CountdownService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningOobDeviceComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningOobDeviceComponent, selector: "bb-transaction-signing-oob-device", inputs: { error: "error", enableResendPushNotification: "enableResendPushNotification", data: "data" }, outputs: { acceptError: "acceptError", cancel: "cancel", poll: "poll", resend: "resend" }, ngImport: i0__namespace, template: "<bb-transaction-signing-error\n  *ngIf=\"error; else displayHoldingScreen\"\n  [error]=\"error\"\n  (closeModal)=\"acceptError.emit($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayHoldingScreen>\n  <bb-alert-ui\n    *ngIf=\"pushFailure\"\n    data-role=\"ts-oob-device-incorrect-alert\"\n    i18n-title=\"\n      Failure to send push notification for out of band device transaction\n      signing@@bb-transaction-signing-oob-device.alert.failure.title\"\n    title=\"Push notification failure\"\n  >\n    <span\n      i18n=\"\n        Incorrect attempts alert message for sms otp signing@@bb-transaction-signing-oob-device.alert.failure.message\"\n    >\n      Failure to send push notification. Please open your app to complete the transaction.\n    </span>\n  </bb-alert-ui>\n\n  <div class=\"bb-block bb-block--md\">\n    <div\n      data-role=\"oob-device-title\"\n      class=\"bb-highlight bb-block bb-block--md\"\n      i18n=\"Instruction for oob device signing@@bb-transaction-signing-oob-device.instruction.check-device-header\"\n    >\n      Check your device:\n    </div>\n    <div class=\"bb-stack\">\n      <bb-icon-ui class=\"bb-stack__item\" [name]=\"icon\" size=\"xl\" data-role=\"oob-device-icon\"></bb-icon-ui>\n      <div>\n        <div *ngIf=\"deviceInfo?.friendlyName; else defaultFriendlyName\" class=\"bb-stack__item bb-highlight\">\n          <span data-role=\"oob-device-friendly-name\">{{ deviceInfo?.friendlyName }}</span>\n        </div>\n        <div *ngIf=\"deviceInfo?.vendor && deviceInfo?.model; else defaultVendor\" class=\"bb-stack__item bb-text-support\">\n          <span data-role=\"oob-device-vendor-model\">{{ deviceInfo?.vendor }} {{ deviceInfo?.model }}</span>\n        </div>\n        <div class=\"bb-stack__item bb-text-support bb-subheader bb-subheader--regular\">\n          <span\n            data-role=\"oob-device-registered-date\"\n            i18n=\"Device registered date@@bb-transaction-signing-oob-device.registered-date\"\n          >\n            Registered on: {{ deviceInfo?.created | date: 'medium' }}</span\n          >\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"bb-block bb-block--md\"\n    i18n=\"Instruction for oob device signing@@bb-transaction-signing-oob-device.instruction\"\n  >\n    <strong>Please sign this transaction through your banking app. When confirmed, this page will refresh.</strong>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <ng-container *ngIf=\"enableResendPushNotification\">\n      <hr />\n\n      <div class=\"bb-block bb-block--sm\">\n        <span\n          data-role=\"oob-no-notification-title\"\n          class=\"bb-highlight\"\n          i18n=\"No notification received@@bb-oob-notification-signing.resend.no-notification\"\n        >\n          Didn't receive the notification?\n        </span>\n      </div>\n\n      <ng-container *ngIf=\"pushData.resendAttemptsLeft > 0; else displayNoRemainingRequests\">\n        <ng-container *ngIf=\"timeUntilResend$ | async as time; else displayResendButton\">\n          <span\n            class=\"bb-subtitle bb-text-support bb-block bb-block--sm\"\n            i18n=\"Time before resend@@bb-oob-notification-signing.resend.time-before\"\n          >\n            Next resend available in {{ time }} {time, plural, =1 {second} other {seconds}}\n          </span>\n        </ng-container>\n\n        <ng-template #displayResendButton>\n          <div class=\"bb-block bb-block--sm\">\n            <button\n              bbButton\n              buttonSize=\"md\"\n              data-role=\"oob-device-resend\"\n              color=\"link-text\"\n              i18n=\"Resend OOB notification button@@bb-oob-notification-signing.resend\"\n              (click)=\"this.resend.emit()\"\n            >\n              Send another notification\n            </button>\n          </div>\n\n          <div class=\"bb-text-support\">\n            <span\n              [ngClass]=\"{ 'bb-text-danger': pushData.resendAttemptsLeft === 1 }\"\n              i18n=\"Message resend alert message for oob signin@@bb-oob-signing.alert.resend.message\"\n            >\n              You have {{ pushData.resendAttemptsLeft }} resend {pushData.resendAttemptsLeft, plural, =1 {attempt} other\n              {attempts}} left.\n            </span>\n          </div>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #displayNoRemainingRequests>\n        <span\n          data-role=\"ts-oob-device-no-resend\"\n          class=\"bb-subtitle bb-text-danger\"\n          i18n=\"No device push notification resend attempts remaining@@bb-transaction-signing-oob-device.no-resend\"\n        >\n          You are out of resend attempts.\n        </span>\n      </ng-template>\n    </ng-container>\n  </div>\n\n  <hr />\n\n  <div class=\"bb-block bb-block--lg\">\n    <small i18n=\"Helper text for oob device signing@@bb-transaction-signing-oob-device.helper\">\n      Note: Navigation away from this modal will result in a cancellation of this transaction signing process.\n    </small>\n  </div>\n\n  <div class=\"bb-button-bar\">\n    <button\n      bbButton\n      data-role=\"oob-device-cancel\"\n      class=\"bb-button-bar__button\"\n      color=\"secondary\"\n      (click)=\"cancel.emit()\"\n      i18n=\"Cancel button@@bb-transaction-signing-oob-device.cancel\"\n    >\n      Cancel transaction\n    </button>\n  </div>\n\n  <ng-template\n    #defaultFriendlyName\n    i18n=\"Default friendly name@@bb-transaction-signing-oob-device.default-friendly-name\"\n  >\n    <span data-role=\"oob-device-friendly-name-default\">Unknown Device</span>\n  </ng-template>\n\n  <ng-template #defaultVendor i18n=\"Device vendor default text@@bb-transaction-signing-oob-device.default-vendor\">\n    <span data-role=\"oob-device-vendor-default\">Unknown</span>\n  </ng-template>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3__namespace$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i5__namespace.DatePipe, "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningOobDeviceComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-oob-device',
                        templateUrl: 'oob-device.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: CountdownService }]; }, propDecorators: { acceptError: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }], poll: [{
                    type: i0.Output
                }], resend: [{
                    type: i0.Output
                }], error: [{
                    type: i0.Input
                }], enableResendPushNotification: [{
                    type: i0.Input
                }], data: [{
                    type: i0.Input
                }] } });

    var TransactionSigningSmsOtpComponent = /** @class */ (function () {
        function TransactionSigningSmsOtpComponent(formBuilder, countdown) {
            this.formBuilder = formBuilder;
            this.countdown = countdown;
            this.cancel = new i0.EventEmitter();
            this.submitResponse = new i0.EventEmitter();
            this.acceptError = new i0.EventEmitter();
            this.resend = new i0.EventEmitter();
            this.invalidRequestError = 'invalid_request';
            this.form = this.formBuilder.group({
                otp: ['', [i1$4.Validators.required, i1$4.Validators.pattern(/^\d{6}$/)]],
            });
            this.timeUntilResend$ = this.countdown.remainingTime$;
            this.displayIncorrectAlert = false;
            this.displayMissingAlert = false;
            this.displayRemainingAlert = false;
            this.displayResendAlert = false;
        }
        Object.defineProperty(TransactionSigningSmsOtpComponent.prototype, "data", {
            get: function () {
                if (!this.challengeData) {
                    throw new Error('No challenge data set');
                }
                return this.challengeData;
            },
            set: function (value) {
                this.setOtpValidators(value.expectedOtpLength);
                this.clearAlerts();
                this.setResendCountdown(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionSigningSmsOtpComponent.prototype, "error", {
            get: function () {
                return this.errorValue;
            },
            set: function (value) {
                if (!value || !this.isRecognizedError(value)) {
                    this.errorValue = value;
                    return;
                }
                this.clearAlerts();
                this.form.reset();
                this.form.markAllAsTouched();
                this.displayMissingAlert = true;
            },
            enumerable: false,
            configurable: true
        });
        TransactionSigningSmsOtpComponent.prototype.ngOnChanges = function (changes) {
            this.setResendOptions(changes.data.currentValue.remainingOtpRequests);
            this.setRemainingOptions(changes.data.currentValue.remainingAuthenticationAttempts);
            this.challengeData = Object.assign(Object.assign({}, this.previousData), changes.data.currentValue);
        };
        TransactionSigningSmsOtpComponent.prototype.onSubmit = function () {
            this.clearAlerts();
            if (this.form.valid) {
                return this.submitResponse.emit(Object.assign({}, this.form.value));
            }
            if (!this.form.value.otp || !this.form.value.otp.length) {
                this.displayMissingAlert = true;
                this.form.markAllAsTouched();
            }
            if (this.form.controls.otp.errors && this.form.controls.otp.errors.pattern) {
                this.displayIncorrectAlert = true;
                this.form.reset();
                this.form.markAllAsTouched();
            }
        };
        TransactionSigningSmsOtpComponent.prototype.showInvalidError = function () {
            return (this.displayIncorrectAlert || this.displayRemainingAlert) && !this.form.value.otp;
        };
        TransactionSigningSmsOtpComponent.prototype.showMissingError = function () {
            return this.displayMissingAlert && !this.form.value.otp;
        };
        TransactionSigningSmsOtpComponent.prototype.clearAlerts = function () {
            this.displayIncorrectAlert = false;
            this.displayMissingAlert = false;
            this.displayRemainingAlert = false;
            this.displayResendAlert = false;
        };
        TransactionSigningSmsOtpComponent.prototype.setOtpValidators = function (patternLength) {
            var regex = new RegExp('^\\d{' + patternLength + '}$');
            this.form.controls.otp.setValidators([i1$4.Validators.required, i1$4.Validators.pattern(regex)]);
        };
        TransactionSigningSmsOtpComponent.prototype.isRecognizedError = function (error) {
            return error.errorCode === this.invalidRequestError && error.errorDescription === this.invalidRequestError;
        };
        TransactionSigningSmsOtpComponent.prototype.setResendCountdown = function (challenge) {
            if (challenge.nextOtpTime > 0 && challenge.remainingOtpRequests !== 0) {
                this.countdown.start(challenge.nextOtpTime);
            }
        };
        TransactionSigningSmsOtpComponent.prototype.setResendOptions = function (remaining) {
            if (remaining === undefined || !this.previousData) {
                return;
            }
            var previousRemaining = this.previousData && this.previousData.remainingOtpRequests;
            if (!previousRemaining || remaining < previousRemaining) {
                this.displayResendAlert = true;
                this.displayRemainingAlert = false;
            }
        };
        TransactionSigningSmsOtpComponent.prototype.setRemainingOptions = function (remaining) {
            if (remaining === undefined || !this.previousData) {
                return;
            }
            var previousRemaining = this.previousData.remainingAuthenticationAttempts;
            if (!previousRemaining || remaining < previousRemaining) {
                this.form.reset();
                this.form.markAllAsTouched();
                this.displayRemainingAlert = true;
                this.displayResendAlert = false;
            }
        };
        return TransactionSigningSmsOtpComponent;
    }());
    /** @nocollapse */ TransactionSigningSmsOtpComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningSmsOtpComponent, deps: [{ token: i1__namespace$4.FormBuilder }, { token: CountdownService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningSmsOtpComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningSmsOtpComponent, selector: "bb-transaction-signing-sms-otp", inputs: { previousData: "previousData", data: "data", error: "error" }, outputs: { cancel: "cancel", submitResponse: "submitResponse", acceptError: "acceptError", resend: "resend" }, usesOnChanges: true, ngImport: i0__namespace, template: "<bb-transaction-signing-error\n  *ngIf=\"errorValue; else displayForm\"\n  [error]=\"errorValue\"\n  (closeModal)=\"acceptError.emit($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <bb-alert-ui\n    *ngIf=\"displayMissingAlert\"\n    data-role=\"ts-sms-otp-missing-alert\"\n    i18n-title=\"No value alert title for sms otp signing@@bb-sms-otp-signing.alert.missing.title\"\n    title=\"No value entered\"\n  >\n    <span i18n=\"No value alert message for sms otp signing@@bb-sms-otp-signing.alert.missing.message\">\n      Please enter the value displayed on your device.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayIncorrectAlert\"\n    data-role=\"ts-sms-otp-incorrect-alert\"\n    i18n-title=\"Incorrect attempts alert title for sms otp signing@@bb-sms-otp-signing.alert.incorrect.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Incorrect attempts alert message for sms otp signing@@bb-sms-otp-signing.alert.incorrect.message\">\n      The number you entered was incorrect.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayRemainingAlert\"\n    data-role=\"ts-sms-otp-remaining-alert\"\n    i18n-title=\"Remaining attempts alert title for sms otp signing@@bb-sms-otp-signing.alert.remaining.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Remaining attempts alert message for sms otp signing@@bb-sms-otp-signing.alert.remaining.message\">\n      The number you entered was incorrect. <br />\n      You have {{ data.remainingAuthenticationAttempts }} other {data.remainingAuthenticationAttempts, plural, =1\n      {attempt} other {attempts}} remaining.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayResendAlert\"\n    data-role=\"ts-sms-otp-resend-alert\"\n    modifier=\"info\"\n    i18n-title=\"Message resend alert title for sms otp signing@@bb-sms-otp-signing.alert.resend.title\"\n    title=\"SMS message resent\"\n  >\n    <span i18n=\"Message resend alert message for sms otp signing@@bb-sms-otp-signing.alert.resend.message\">\n      The SMS message has been successfully sent. <br />\n      You have {data.remainingOtpRequests, plural, =0 {no} other {{{data.remainingOtpRequests}} SMS}} resend\n      {data.remainingOtpRequests, plural, =1 {attempt} other {attempts}} left.\n    </span>\n  </bb-alert-ui>\n  <div class=\"bb-block bb-block--sm\" i18n=\"Instruction for sms otp signing@@bb-sms-otp-signing.instruction\">\n    SMS message sent to {{ data.phoneNumber }}\n  </div>\n  <div class=\"bb-block bb-block--lg\">\n    <ng-container *ngIf=\"data.remainingOtpRequests !== 0; else displayNoRemainingRequests\">\n      <ng-container *ngIf=\"timeUntilResend$ | async as time; else displayResendButton\">\n        <span\n          class=\"bb-subtitle bb-text-support bb-block bb-block--sm\"\n          i18n=\"Time before resend@@bb-sms-otp-signing.resend.time-before\"\n          data-role=\"ts-sms-otp-resend-helper\"\n        >\n          Next resend available in {{ time }} {time, plural, =1 {second} other {seconds}}\n        </span>\n        <bb-progressbar-ui height=\"0.5rem\" [value]=\"data.nextOtpTime - time\" [max]=\"data.nextOtpTime\">\n        </bb-progressbar-ui>\n      </ng-container>\n      <ng-template #displayResendButton>\n        <button\n          bbButton\n          data-role=\"ts-sms-otp-resend\"\n          color=\"secondary\"\n          buttonSize=\"sm\"\n          i18n=\"Resend SMS OTP button@@bb-sms-otp-signing.resend\"\n          (click)=\"resend.emit()\"\n        >\n          Resend message\n        </button>\n      </ng-template>\n    </ng-container>\n    <ng-template #displayNoRemainingRequests>\n      <span\n        data-role=\"ts-sms-otp-no-resend\"\n        class=\"bb-subtitle bb-text-danger\"\n        i18n=\"No otp resend attempts remaining@@bb-sms-otp-signing.no-resend\"\n      >\n        You have no SMS resend attempts left. <br />\n        Please enter the correct OTP code or cancel this transaction.\n      </span>\n    </ng-template>\n  </div>\n\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"ts-sms-otp-field\"\n        class=\"bb-form-field bb-form-field--xs\"\n        formControlName=\"otp\"\n        i18n-label=\"Aria label for otp field input@@bb-sms-otp-signing.label\"\n        label=\"Input OTP code\"\n        [maxLength]=\"data.expectedOtpLength\"\n        [minLength]=\"data.expectedOtpLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"true\">\n        <span\n          *ngIf=\"showInvalidError()\"\n          data-role=\"ts-sms-otp-incorrect-error\"\n          i18n=\"Otp input invalid error message@@bb-sms-otp-signing.errors.invalid\"\n        >\n          Incorrect code. Try again.\n        </span>\n        <span\n          *ngIf=\"showMissingError()\"\n          data-role=\"ts-sms-otp-missing-error\"\n          i18n=\"Otp input missing error message@@bb-sms-otp-signing.errors.missing\"\n        >\n          You must enter an OTP.\n        </span>\n      </bb-input-validation-message-ui>\n      <small class=\"bb-text-support\" i18n=\"Otp input helper text@@bb-sms-otp-signing.helper\">\n        Value must be exactly {{ data.expectedOtpLength }} digits\n      </small>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-sms-otp-complete\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-sms-otp-signing.complete\"\n      >\n        Complete\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-sms-otp-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"cancel.emit()\"\n        i18n=\"Cancel button@@bb-sms-otp-signing.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3__namespace$1.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i5__namespace$2.ProgressbarComponent, selector: "bb-progressbar-ui", inputs: ["height", "max", "showValue", "striped", "animated", "type", "value"] }, { type: i4__namespace.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1__namespace$4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningSmsOtpComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-sms-otp',
                        templateUrl: 'sms-otp.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.FormBuilder }, { type: CountdownService }]; }, propDecorators: { cancel: [{
                    type: i0.Output
                }], submitResponse: [{
                    type: i0.Output
                }], acceptError: [{
                    type: i0.Output
                }], resend: [{
                    type: i0.Output
                }], previousData: [{
                    type: i0.Input
                }], data: [{
                    type: i0.Input
                }], error: [{
                    type: i0.Input
                }] } });

    /* eslint-disable @typescript-eslint/ban-types */
    var TransactionSigningInterfaceComponent = /** @class */ (function () {
        function TransactionSigningInterfaceComponent() {
            this.failure = new i0.EventEmitter();
            this.postSuccess = new i0.EventEmitter();
            this.poll = new i0.EventEmitter();
            this.post = new i0.EventEmitter();
            /**
             * Whether a signing is pending.
             */
            this.isPending = false;
            this.modalOptions = {
                keyboard: false,
                backdrop: 'static',
            };
        }
        Object.defineProperty(TransactionSigningInterfaceComponent.prototype, "challengeData", {
            /**
             * The data involved in the challenge.
             */
            get: function () {
                if (!this.currentChallengeData) {
                    throw new Error('No current challenge data set');
                }
                return this.currentChallengeData;
            },
            set: function (newData) {
                this.previousChallengeData = this.currentChallengeData;
                this.currentChallengeData = Object.assign(Object.assign({}, this.previousChallengeData), newData);
            },
            enumerable: false,
            configurable: true
        });
        return TransactionSigningInterfaceComponent;
    }());
    /** @nocollapse */ TransactionSigningInterfaceComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningInterfaceComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningInterfaceComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningInterfaceComponent, selector: "bb-transaction-signing-interface", inputs: { isPending: "isPending", error: "error", transactionData: "transactionData", challengeType: "challengeType", enableResendPushNotification: "enableResendPushNotification", challengeError: "challengeError", challengeData: "challengeData" }, outputs: { failure: "failure", postSuccess: "postSuccess", poll: "poll", post: "post" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"true\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui data-role=\"ts-modal\">\n    <ng-template bbCustomModalHeader>\n      <bb-transaction-signing-header [data]=\"transactionData\"></bb-transaction-signing-header>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <hr class=\"mt-0\" />\n      <bb-transaction-signing-action-pending *ngIf=\"isPending\"></bb-transaction-signing-action-pending>\n      <ng-container *ngIf=\"!isPending\">\n        <bb-transaction-signing-error\n          *ngIf=\"challengeError\"\n          [error]=\"challengeError\"\n          (closeModal)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-error>\n        <bb-transaction-signing-hard-token\n          *ngIf=\"challengeType === 'hard-token-auth'\"\n          [data]=\"challengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-hard-token>\n        <bb-transaction-signing-oob-select-device\n          *ngIf=\"challengeType === 'oob-ts-select-device'\"\n          [data]=\"challengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n        >\n        </bb-transaction-signing-oob-select-device>\n        <bb-transaction-signing-oob-device\n          *ngIf=\"challengeType === 'oob-uaf-auth'\"\n          [data]=\"challengeData\"\n          [enableResendPushNotification]=\"enableResendPushNotification\"\n          [error]=\"error\"\n          (poll)=\"poll.emit({ responseType: 'system-poll' })\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n          (resend)=\"post.emit({ responseType: 'pn-resend' })\"\n        >\n        </bb-transaction-signing-oob-device>\n        <bb-transaction-signing-sms-otp\n          *ngIf=\"challengeType === 'sms-otp-auth'\"\n          [data]=\"challengeData\"\n          [previousData]=\"previousChallengeData\"\n          [error]=\"error\"\n          (submitResponse)=\"post.emit($event)\"\n          (cancel)=\"post.emit({ responseType: 'confirmation-abort' })\"\n          (acceptError)=\"failure.emit($event)\"\n          (resend)=\"post.emit({ responseType: 'otp-resend' })\"\n        >\n        </bb-transaction-signing-sms-otp>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace$5.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$5.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: TransactionSigningHeaderComponent, selector: "bb-transaction-signing-header", inputs: ["data"] }, { type: i1__namespace$5.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: TransactionSigningActionPendingComponent, selector: "bb-transaction-signing-action-pending" }, { type: TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: TransactionSigningHardTokenComponent, selector: "bb-transaction-signing-hard-token", inputs: ["data", "error"], outputs: ["cancel", "submitResponse", "acceptError"] }, { type: TransactionSigningOobSelectDeviceComponent, selector: "bb-transaction-signing-oob-select-device", inputs: ["data", "error"], outputs: ["cancel", "acceptError", "submitResponse"] }, { type: TransactionSigningOobDeviceComponent, selector: "bb-transaction-signing-oob-device", inputs: ["error", "enableResendPushNotification", "data"], outputs: ["acceptError", "cancel", "poll", "resend"] }, { type: TransactionSigningSmsOtpComponent, selector: "bb-transaction-signing-sms-otp", inputs: ["previousData", "data", "error"], outputs: ["cancel", "submitResponse", "acceptError", "resend"] }], directives: [{ type: i1__namespace$5.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace$5.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningInterfaceComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing-interface',
                        templateUrl: 'interface.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { failure: [{
                    type: i0.Output
                }], postSuccess: [{
                    type: i0.Output
                }], poll: [{
                    type: i0.Output
                }], post: [{
                    type: i0.Output
                }], isPending: [{
                    type: i0.Input
                }], error: [{
                    type: i0.Input
                }], transactionData: [{
                    type: i0.Input
                }], challengeType: [{
                    type: i0.Input
                }], enableResendPushNotification: [{
                    type: i0.Input
                }], challengeError: [{
                    type: i0.Input
                }], challengeData: [{
                    type: i0.Input
                }] } });

    var TransactionSigningComponent = /** @class */ (function () {
        function TransactionSigningComponent(transactionSigningService, config) {
            this.transactionSigningService = transactionSigningService;
            this.config = config;
            this.errorSubject = new rxjs.BehaviorSubject(undefined);
            this.pendingSubject = new rxjs.BehaviorSubject(false);
            this.challengeSubject = new rxjs.BehaviorSubject(undefined);
            this.requestSubscription = this.setupRequestSubscription();
            this.challenge = this.challengeSubject.asObservable();
            this.error = this.errorSubject.asObservable();
            this.pending = this.pendingSubject.asObservable();
            this.enableResendPushNotification = this.config.enableResendPushNotification;
        }
        TransactionSigningComponent.prototype.ngOnDestroy = function () {
            this.requestSubscription.unsubscribe();
            if (this.pollingSubscription) {
                this.pollingSubscription.unsubscribe();
            }
        };
        TransactionSigningComponent.prototype.onFailure = function (error) {
            this.transactionSigningService.completeWithFailure(error);
            this.clearChallenge();
        };
        TransactionSigningComponent.prototype.onSuccess = function () {
            this.transactionSigningService.completeWithSuccess();
            this.clearChallenge();
        };
        TransactionSigningComponent.prototype.onPoll = function (data) {
            var _this = this;
            this.pollingSubscription = rxjs.of(data)
                .pipe(operators.switchMap(function (d) { return _this.transactionSigningService.respondToChallenge(d); }), operators.retryWhen(function (errors) {
                return errors.pipe(operators.switchMap(function (response) {
                    if (response.error) {
                        return rxjs.throwError(response);
                    }
                    return rxjs.timer(_this.config.pollingCycleTime);
                }));
            }))
                .subscribe({
                next: function () { return _this.onSuccess(); },
                error: function (response) {
                    _this.errorSubject.next(response.error);
                },
            });
        };
        TransactionSigningComponent.prototype.onPost = function (data) {
            var _this = this;
            if (this.pollingSubscription) {
                this.pollingSubscription.unsubscribe();
            }
            this.pendingSubject.next(true);
            this.transactionSigningService.respondToChallenge(data).subscribe({
                next: function () { return _this.onSuccess(); },
                error: function (response) {
                    if (response.error) {
                        if (response.error.errorDescription === 'rejected_by_user') {
                            _this.onFailure(new Error(response.error.errorDescription));
                        }
                        else {
                            _this.errorSubject.next(response.error);
                        }
                    }
                    else {
                        _this.challengeSubject.next(response);
                    }
                    _this.pendingSubject.next(false);
                },
            });
        };
        TransactionSigningComponent.prototype.setupRequestSubscription = function () {
            var _this = this;
            return this.transactionSigningService.requestSubject.subscribe(function (value) { return _this.updateChallenge(value); });
        };
        TransactionSigningComponent.prototype.updateChallenge = function (handler) {
            this.txnData = handler.transactionData;
            this.pendingSubject.next(false);
            if (handler.challenge) {
                this.challengeSubject.next(handler.challenge);
            }
        };
        TransactionSigningComponent.prototype.clearChallenge = function () {
            this.challengeSubject.next(undefined);
            this.errorSubject.next(undefined);
            this.txnData = undefined;
            this.pendingSubject.next(false);
        };
        return TransactionSigningComponent;
    }());
    /** @nocollapse */ TransactionSigningComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningComponent, deps: [{ token: TransactionSigningService }, { token: TRANSACTION_SIGNING_CONFIG, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TransactionSigningComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningComponent, selector: "bb-transaction-signing", ngImport: i0__namespace, template: "<bb-transaction-signing-interface\n  *ngIf=\"challenge | async as challengeData\"\n  [isPending]=\"(pending | async) || false\"\n  [error]=\"(error | async) || undefined\"\n  [transactionData]=\"txnData\"\n  [challengeType]=\"challengeData.challengeType\"\n  [challengeData]=\"challengeData.challengeData\"\n  [challengeError]=\"challengeData.error\"\n  [enableResendPushNotification]=\"enableResendPushNotification\"\n  (failure)=\"onFailure($event)\"\n  (postSuccess)=\"onSuccess()\"\n  (poll)=\"onPoll($event)\"\n  (post)=\"onPost($event)\"\n>\n</bb-transaction-signing-interface>\n", components: [{ type: TransactionSigningInterfaceComponent, selector: "bb-transaction-signing-interface", inputs: ["isPending", "error", "transactionData", "challengeType", "enableResendPushNotification", "challengeError", "challengeData"], outputs: ["failure", "postSuccess", "poll", "post"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-signing',
                        templateUrl: 'transaction-signing.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: TransactionSigningService }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [TRANSACTION_SIGNING_CONFIG]
                        }] }];
        } });

    /**
     * Interceptor used to check for reauthentication errors
     */
    var TransactionSigningInterceptor = /** @class */ (function () {
        function TransactionSigningInterceptor(transactionSigningService) {
            this.transactionSigningService = transactionSigningService;
        }
        TransactionSigningInterceptor.prototype.intercept = function (request, next) {
            var _this = this;
            return next
                .handle(request)
                .pipe(operators.catchError(function (error) { return _this.transactionSigningService.initiateTransactionSigning(error); }));
        };
        return TransactionSigningInterceptor;
    }());
    /** @nocollapse */ TransactionSigningInterceptor.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningInterceptor, deps: [{ token: TransactionSigningService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ TransactionSigningInterceptor.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningInterceptor });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningInterceptor, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: TransactionSigningService }]; } });

    var tsDefaults = {
        useRedirectFlow: false,
        pollingCycleTime: 3000,
        enableResendPushNotification: false,
    };
    var providers = [
        TransactionSigningService,
        {
            provide: i1.HTTP_INTERCEPTORS,
            useClass: TransactionSigningInterceptor,
            multi: true,
        },
    ];
    var defaultConfigProviders = [
        {
            provide: TRANSACTION_SIGNING_CONFIG,
            useValue: tsDefaults,
        },
    ];
    var uiComponents = [
        i1$5.ModalModule,
        i1$1.HeaderModule,
        i6.ButtonModule,
        i1$4.ReactiveFormsModule,
        i2.AmountModule,
        i4.InputTextModule,
        i5$1.InputValidationMessageModule,
        i1$2.LoadingIndicatorModule,
        i1$3.EmptyStateModule,
        i3$1.AlertModule,
        i4$1.IconModule,
        i5$2.ProgressbarModule,
        i3$2.DropdownSingleSelectModule,
    ];
    var components = [
        TransactionSigningComponent,
        TransactionSigningErrorComponent,
        TransactionSigningInterfaceComponent,
        TransactionSigningActionPendingComponent,
        TransactionSigningHeaderComponent,
        TransactionSigningHardTokenComponent,
        TransactionSigningOobDeviceComponent,
        TransactionSigningOobSelectDeviceComponent,
        TransactionSigningSmsOtpComponent,
        TransactionAmountPipe,
    ];
    /**
     * Module used to initialize Transaction Signing with a configuration
     */
    var TransactionSigningModule = /** @class */ (function () {
        function TransactionSigningModule() {
        }
        /**
         * Creates a configured TransactionSigningModule.
         *
         * This should be called only once per app.
         *
         * @usageNotes
         *
         * ### Example
         *
         * ```
         * @NgModule({
         *   imports: [
         *     TransactionSigningModule.withConfig({
         *        useRedirectFlow: true,
         *        pollingCycleTime: 5000,
         *        enableResendPushNotification: true,
         *     })
         *   ]
         * })
         * class AppModule {}
         * ```
         */
        TransactionSigningModule.withConfig = function (config) {
            return {
                ngModule: TransactionSigningModule,
                providers: __spreadArray([
                    {
                        provide: TRANSACTION_SIGNING_CONFIG,
                        useValue: Object.assign(Object.assign({}, tsDefaults), config),
                    }
                ], __read(providers)),
            };
        };
        return TransactionSigningModule;
    }());
    /** @nocollapse */ TransactionSigningModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ TransactionSigningModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningModule, declarations: [TransactionSigningComponent,
            TransactionSigningErrorComponent,
            TransactionSigningInterfaceComponent,
            TransactionSigningActionPendingComponent,
            TransactionSigningHeaderComponent,
            TransactionSigningHardTokenComponent,
            TransactionSigningOobDeviceComponent,
            TransactionSigningOobSelectDeviceComponent,
            TransactionSigningSmsOtpComponent,
            TransactionAmountPipe], imports: [i5.CommonModule, i1$5.ModalModule,
            i1$1.HeaderModule,
            i6.ButtonModule,
            i1$4.ReactiveFormsModule,
            i2.AmountModule,
            i4.InputTextModule,
            i5$1.InputValidationMessageModule,
            i1$2.LoadingIndicatorModule,
            i1$3.EmptyStateModule,
            i3$1.AlertModule,
            i4$1.IconModule,
            i5$2.ProgressbarModule,
            i3$2.DropdownSingleSelectModule], exports: [TransactionSigningComponent] });
    /** @nocollapse */ TransactionSigningModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningModule, providers: __spreadArray(__spreadArray([], __read(providers)), __read(defaultConfigProviders)), imports: [__spreadArray([i5.CommonModule], __read(uiComponents))] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: TransactionSigningModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([i5.CommonModule], __read(uiComponents)),
                        declarations: __spreadArray([], __read(components)),
                        providers: __spreadArray(__spreadArray([], __read(providers)), __read(defaultConfigProviders)),
                        exports: [TransactionSigningComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TRANSACTION_SIGNING_CONFIG = TRANSACTION_SIGNING_CONFIG;
    exports.TransactionSigningComponent = TransactionSigningComponent;
    exports.TransactionSigningHelperService = TransactionSigningHelperService;
    exports.TransactionSigningInterceptor = TransactionSigningInterceptor;
    exports.TransactionSigningModule = TransactionSigningModule;
    exports.TransactionSigningService = TransactionSigningService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-identity-auth-transaction-signing.umd.js.map
