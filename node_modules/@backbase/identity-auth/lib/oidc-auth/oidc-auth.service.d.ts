import { AuthConfig, OAuthEvent, OAuthService, OAuthStorage, OAuthSuccessEvent } from 'angular-oauth2-oidc';
import { Observable } from 'rxjs';
import { AccessToken } from './oidc-auth.model';
import * as i0 from "@angular/core";
/** @internal */
export declare class ɵɵOidcAuthService {
    private readonly oAuthService;
    private readonly oAuthStorage;
    private readonly oAuthConfig;
    private readonly _window;
    private readonly window;
    private readonly authenticated$$;
    readonly storage: OAuthStorage;
    readonly authConfig: AuthConfig;
    readonly events$: Observable<OAuthEvent>;
    readonly isAuthenticated$: Observable<boolean>;
    readonly accessToken$: Observable<AccessToken | undefined>;
    constructor(oAuthService: OAuthService, oAuthStorage: OAuthStorage, oAuthConfig: AuthConfig, _window: any);
    logout(redirectUri?: string): Promise<void>;
    timeToLive(): number;
    refresh(): Promise<void>;
    loadDiscoveryDocument(): Promise<OAuthSuccessEvent>;
    authorizationHeader(): string;
    createReauthLoginUrl(scope: string, acr_values: string): Observable<string>;
    private parseJwt;
    static ɵfac: i0.ɵɵFactoryDeclaration<ɵɵOidcAuthService, [{ optional: true; }, null, null, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ɵɵOidcAuthService>;
}
