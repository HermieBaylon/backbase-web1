{"version":3,"file":"activity-monitor.service.js","sourceRoot":"","sources":["../../../../../../libs/identity-auth/src/lib/activity-monitor/activity-monitor.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { WINDOW } from '../auth/auth.model';\nimport { ActivityEvent, ActivityMonitorConfig, ACTIVITY_MONITOR_CONFIG } from './activity-monitor.model';\n\n/**\n * Service for monitoring user activity\n */\n@Injectable()\nexport class ActivityMonitorService {\n  private events$ = new Subject<ActivityEvent>();\n  private isActive = false;\n  private lastActiveEpoch = 0;\n  private config: ActivityMonitorConfig = {\n    maxInactivityDuration: 180,\n    countdownDuration: 30,\n  };\n  private listenerCallback = this.setLastActiveEpoch.bind(this);\n  private intervalId?: number;\n  private countdownActive = false;\n  private window: Window;\n\n  readonly events = this.events$.asObservable();\n\n  // https://angular.io/guide/aot-metadata-errors#could-not-resolve-type\n  constructor(\n    @Inject(WINDOW) _window: any,\n    @Optional() @Inject(ACTIVITY_MONITOR_CONFIG) _config?: Partial<ActivityMonitorConfig>,\n  ) {\n    this.window = _window as Window;\n    Object.assign(this.config, _config || {});\n  }\n\n  /**\n   * Starts activity monitoring.\n   */\n  start(_config: Partial<ActivityMonitorConfig> = {}) {\n    Object.assign(this.config, _config);\n    if (this.isActive) {\n      this.stop();\n    }\n    this.listen(true, { passive: true, capture: true });\n  }\n\n  // Stops activity monitoring.\n  stop() {\n    if (this.isActive) {\n      this.listen(false, true);\n    }\n  }\n\n  private getInactivityDuration(): number {\n    const now: number = Math.floor(Date.now() / 1000);\n    const last: number = Math.floor(this.lastActiveEpoch / 1000);\n    return Math.floor(now - last);\n  }\n\n  private setLastActiveEpoch() {\n    this.lastActiveEpoch = Date.now();\n  }\n\n  private listen(activate: boolean, options: AddEventListenerOptions | boolean) {\n    this.isActive = activate;\n    const func = activate ? this.window.document.addEventListener : this.window.document.removeEventListener;\n    this.setLastActiveEpoch();\n    func('mousemove', this.listenerCallback, options);\n    func('mousedown', this.listenerCallback, options);\n    func('keydown', this.listenerCallback, options);\n    func('mousewheel', this.listenerCallback, options);\n    func('touchmove', this.listenerCallback, options);\n    if (activate) {\n      this.intervalId = this.window.setInterval(this.onEverySecond.bind(this), 1000);\n    } else {\n      this.window.clearInterval(this.intervalId);\n      if (this.countdownActive) {\n        this.countdownActive = false;\n        this.events$.next({ type: 'reset' });\n      }\n    }\n  }\n\n  private onEverySecond() {\n    const ttl = this.config.maxInactivityDuration - this.getInactivityDuration();\n    if (ttl > -1 && ttl <= this.config.countdownDuration) {\n      if (!this.countdownActive) {\n        this.countdownActive = true;\n        this.events$.next({ type: 'start' });\n        this.events$.next({ type: 'tick', remaining: ttl });\n        return;\n      }\n      if (ttl > 0) {\n        this.events$.next({ type: 'tick', remaining: ttl });\n      } else {\n        this.countdownActive = false;\n        this.events$.next({ type: 'end' });\n        this.stop();\n      }\n    } else if (this.countdownActive) {\n      this.countdownActive = false;\n      this.events$.next({ type: 'reset' });\n    }\n  }\n}\n"]}