import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../error/error.component";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "../../util/transaction-amount/transaction-amount.pipe";
export class TransactionSigningHardTokenComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.cancel = new EventEmitter();
        this.submitResponse = new EventEmitter();
        this.acceptError = new EventEmitter();
        this.invalidRequestError = 'invalid_request';
        this.displayErrors = false;
        this.form = this.formBuilder.group({
            otp: ['', [Validators.required, Validators.pattern(/^\d{6}$/)]],
        });
        this.displayAlert = false;
    }
    set data(value) {
        this.challengeData = value;
        this.displayAlert = false;
        this.displayErrors = false;
    }
    get data() {
        if (!this.challengeData) {
            throw new Error('No challenge data set');
        }
        return this.challengeData;
    }
    set error(value) {
        this.displayAlert = false;
        this.displayErrors = false;
        if (value && this.isRecognizedError(value)) {
            this.displayAlert = true;
        }
        else {
            this.errorValue = value;
        }
    }
    get error() {
        return this.errorValue;
    }
    onSubmit() {
        this.displayErrors = true;
        if (this.form.valid) {
            this.submitResponse.emit(Object.assign(Object.assign({}, this.form.value), { code: this.data.data.code }));
        }
    }
    onCancel() {
        this.cancel.emit();
    }
    onErrorClose(error) {
        this.acceptError.emit(error);
    }
    hasError(control) {
        return this.displayErrors && control.errors && (control.errors.required || control.errors.pattern);
    }
    isRecognizedError(error) {
        return error.errorCode === this.invalidRequestError && error.errorDescription === this.invalidRequestError;
    }
}
/** @nocollapse */ TransactionSigningHardTokenComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHardTokenComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningHardTokenComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningHardTokenComponent, selector: "bb-transaction-signing-hard-token", inputs: { data: "data", error: "error" }, outputs: { cancel: "cancel", submitResponse: "submitResponse", acceptError: "acceptError" }, ngImport: i0, template: "<bb-transaction-signing-error\n  *ngIf=\"errorValue; else displayForm\"\n  [error]=\"errorValue\"\n  (closeModal)=\"onErrorClose($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <bb-alert-ui\n    *ngIf=\"displayAlert\"\n    data-role=\"ts-hard-token-no-value-alert\"\n    i18n-title=\"No value alert title for hard token signing@@bb-hard-token-signing.alert.no-value.title\"\n    title=\"No value entered\"\n  >\n    <span i18n=\"No value alert message for hard token signing@@bb-hard-token-signing.alert.no-value.message\">\n      Please enter the value displayed on your {{ data.data.vendorDetails.model }} device.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"data.remainingAuthenticationAttempts !== undefined\"\n    data-role=\"ts-hard-token-remaining-alert\"\n    i18n-title=\"Remaining attempts alert title for hard token signing@@bb-hard-token-signing.alert.remaining.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Remaining attempts alert message for hard token signing@@bb-hard-token-signing.alert.remaining.message\">\n      The number you entered was incorrect. <br />\n      You have {{ data.remainingAuthenticationAttempts }} other {data.remainingAuthenticationAttempts, plural, =1\n      {attempt} other {attempts}} remaining.\n    </span>\n  </bb-alert-ui>\n  <div class=\"bb-block bb-block--md\" i18n=\"Instruction for hard token signing@@bb-hard-token-signing.instruction\">\n    Using your {{ data.data.vendorDetails.model }} device, follow these steps\n  </div>\n\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <ol data-role=\"hard-token-txn-widget__form\" class=\"bb-ordered-list bb-block bb-block--md\">\n      <li data-role=\"hard-token-txn-widget__form-sign\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 1 for hard token signing@@bb-hard-token-signing.steps.1\">\n          Press '<strong>sign</strong>' on your device\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-enter-pin\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 2 for hard token signing@@bb-hard-token-signing.steps.2\">\n          Enter your pin in to your device\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-reference-number\" class=\"bb-block bb-block--sm\">\n        <span i18n=\"Step 3 for hard token signing@@bb-hard-token-signing.steps.3\"> Enter the `reference number` </span>\n        <br />\n        <span class=\"bb-hero\">\n          {{ data.data.code }}\n        </span>\n      </li>\n      <li\n        data-role=\"hard-token-txn-widget__form-transaction-amount\"\n        *ngIf=\"data.data.txnData.paymentAmount !== undefined\"\n        class=\"bb-block bb-block--sm\"\n      >\n        <span i18n=\"Step 4 (when amount present) for hard token signing@@bb-hard-token-signing.steps.4\">\n          Enter the transaction amount\n        </span>\n        <br />\n        <span class=\"bb-hero\">\n          {{ data | transactionAmount }}\n        </span>\n      </li>\n      <li data-role=\"hard-token-txn-widget__form-insert-number\" class=\"bb-block bb-block--sm\">\n        <span\n          data-role=\"hard-token-txn-widget__form-insert-number__financial\"\n          i18n=\"Step 5 (when amount present), or step 4 for hard token signing@@bb-hard-token-signing.steps.5\"\n        >\n          Insert the number produced on your {{ data.data.vendorDetails.model }} device\n        </span>\n        <br />\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            data-role=\"ts-hard-token-otp\"\n            class=\"bb-form-field bb-form-field--xs\"\n            formControlName=\"otp\"\n            i18n-attr.aria-label=\"Aria label for otp field input@@bb-hard-token-signing.otp.aria-label\"\n            attr.aria-label=\"Insert the number produced on your {{ data.data.vendorDetails.model }} device\"\n            [maxLength]=\"6\"\n            [minLength]=\"6\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui [showErrors]=\"hasError(form.controls.otp)\">\n            <span\n              data-role=\"ts-hard-token-otp-error\"\n              i18n=\"Otp input length error message@@bb-hard-token-signing.otp.errors.length\"\n            >\n              The value must be exactly 6 numbers.\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </li>\n    </ol>\n\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-hard-token-complete\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-hard-token-signing.complete\"\n      >\n        Complete\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-hard-token-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"onCancel()\"\n        i18n=\"Cancel button@@bb-hard-token-signing.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i2.TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "transactionAmount": i8.TransactionAmountPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningHardTokenComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-hard-token',
                    templateUrl: 'hard-token.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { cancel: [{
                type: Output
            }], submitResponse: [{
                type: Output
            }], acceptError: [{
                type: Output
            }], data: [{
                type: Input
            }], error: [{
                type: Input
            }] } });
//# sourceMappingURL=hard-token.component.js.map