{"version":3,"file":"helper.service.js","sourceRoot":"","sources":["../../../../../../../libs/identity-auth/transaction-signing/util/helper/helper.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { from, interval, Observable, of } from 'rxjs';\nimport { filter, first, retry, switchMap, takeUntil } from 'rxjs/operators';\nimport { CapabilityData } from '../challenge/challenge.model';\nimport { AsyncPollingOptions, ProgressStatus, TransactionSigningOptions } from './helper.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransactionSigningHelperService {\n  private readonly defaultPollInterval = 1000;\n  private readonly defaultMaxRetries = 3;\n  private readonly defaultStatusMap = {\n    success: [ProgressStatus.ACCEPTED, ProgressStatus.PROCESSED, ProgressStatus.PENDING_APPROVAL],\n    rejected: [ProgressStatus.REJECTED],\n    declined: [ProgressStatus.SYSTEM_DECLINED, ProgressStatus.USER_DECLINED],\n    pending: [ProgressStatus.CONFIRMATION_PENDING, ProgressStatus.SENDING],\n  };\n\n  /**\n   * Determines if the response was returned from the Transaction Signing flow.\n   * @param response the data returned after a possible transaction signing request.\n   * @returns boolean\n   */\n  isTransactionSigningResponse(response: CapabilityData) {\n    return response && !!response['confirmation-type'];\n  }\n\n  /**\n   * Polls a fetch function. Designed to run after transaction signing has occurred.\n   * @param data  this is passed to the fetchFn as param.\n   * @param fetchFn a function that triggers an http call.\n   * @param pollOptions options to configure the polling such as pollInterval, maxRetries etc.\n   * @param pendingStatuses array of statuses which determines if the polling should continue.\n   * @returns an Observable that sequencially emits a value based on configured time interval.\n   */\n  setupPolling(\n    data: any,\n    fetchFn: (param: any) => Observable<any>,\n    pollOptions: AsyncPollingOptions,\n    pendingStatuses: string[],\n  ) {\n    const pollUntil = pollOptions.pollUntilFn || this.defaultPollUntilFn.bind(this, pendingStatuses);\n    return interval(pollOptions.pollInterval || this.defaultPollInterval).pipe(\n      takeUntil(pollOptions.complete$),\n      switchMap(() => from(fetchFn(data))),\n      retry(pollOptions.maxRetries || this.defaultMaxRetries),\n      filter((res) => pollUntil(res)),\n      first(),\n    );\n  }\n\n  /**\n   * Handles scenarios after signing a transaction and triggers appropriate callbacks.\n   * @param options Configuration for determining different flows of the transaction.\n   */\n  getTransactionInfo(options: TransactionSigningOptions) {\n    if (options.asyncPollingOptions) {\n      this.handleAsyncPollingFlow(options);\n    } else {\n      this.handleGenericFlow(options);\n    }\n  }\n\n  private defaultPollUntilFn(pendingStatuses: Array<string>, status: string) {\n    return !!status && !pendingStatuses.includes(status);\n  }\n\n  private handleAsyncPollingFlow(options: TransactionSigningOptions) {\n    const { asyncPollingOptions } = options;\n    const { pending } = options.statusMap || this.defaultStatusMap;\n\n    if (options.fetchFn) {\n      this.setupPolling(options.data, options.fetchFn, <AsyncPollingOptions>asyncPollingOptions, pending).subscribe(\n        (status) => {\n          this.triggerTransactionCallback({ status }, options);\n        },\n        (error) => {\n          options.onError(error);\n        },\n      );\n    } else {\n      console.warn('`fetchFn` is mandatory when polling options are provided');\n    }\n  }\n\n  private handleGenericFlow(options: TransactionSigningOptions) {\n    const item$ = options.fetchFn ? options.fetchFn(options.data) : of(options.data);\n\n    item$.pipe(first()).subscribe(\n      (response) => {\n        this.triggerTransactionCallback(response, options);\n      },\n      (error) => {\n        options.onError(error);\n      },\n    );\n  }\n\n  private triggerTransactionCallback(response: any, options: TransactionSigningOptions) {\n    const { status } = response || {};\n    const { success, declined, rejected } = options.statusMap || this.defaultStatusMap;\n\n    if (success.includes(status)) {\n      options.onSuccess(response);\n    } else if (declined.includes(status)) {\n      options.onDeclined(response);\n    } else if (rejected.includes(status)) {\n      options.onRejected(response);\n    } else {\n      options.onError(response);\n    }\n  }\n}\n"]}