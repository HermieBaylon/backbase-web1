{"version":3,"file":"transaction-signing.service.js","sourceRoot":"","sources":["../../../../../../libs/identity-auth/transaction-signing/service/transaction-signing.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Location } from '@angular/common';\nimport { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { ɵɵOidcAuthService } from '@backbase/identity-auth';\nimport { Observable, ReplaySubject, Subscriber, throwError } from 'rxjs';\nimport { catchError, first, mapTo, switchMap, withLatestFrom } from 'rxjs/operators';\nimport {\n  CapabilityChallenge,\n  CapabilityData,\n  CapabilityResponse,\n  ChallengeResponse,\n  hasStatusWithHeaderValue,\n  TransactionSigningConfig,\n  TransactionSigningHandler,\n  TRANSACTION_SIGNING_CONFIG,\n} from '../util';\n\n/**\n * Angular Service used to instigate and manage transaction signing for an action.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransactionSigningService {\n  /**\n   * A subject that emits when a new transaction signing event occurs.\n   * The subject will emit an object containing the initial challenge from\n   * the Identity Auth Server. To respond to this challenge use the\n   * `respondToChallenge` endpoint provided.\n   */\n  readonly requestSubject = new ReplaySubject<TransactionSigningHandler>(1);\n\n  private readonly actionSubject = new ReplaySubject<string>(1);\n  private readonly observerSubject = new ReplaySubject<Subscriber<HttpResponse<unknown>>>(1);\n  private isHandlingTransaction = false;\n  private readonly authHeaderKey = 'www-authenticate';\n  private readonly authHeaderValue = 'Bearer challenge_types=reauth';\n  private readonly authStatus = 401;\n\n  /** @internal */\n  constructor(\n    private readonly httpClient: HttpClient,\n    private readonly location: Location,\n    @Optional() private readonly oidcAuthService: ɵɵOidcAuthService,\n    @Inject(TRANSACTION_SIGNING_CONFIG) private readonly serviceConfig: TransactionSigningConfig,\n  ) {\n    if (!oidcAuthService) {\n      throw new Error(\n        `In order to use ImpersonationService, please include IdentityAuthModule to your application module`,\n      );\n    }\n  }\n\n  /** @internal */\n  initiateTransactionSigning(error: HttpErrorResponse): Observable<HttpResponse<unknown>> {\n    if (\n      !hasStatusWithHeaderValue(error, this.authStatus, this.authHeaderKey, this.authHeaderValue) ||\n      this.isHandlingTransaction\n    ) {\n      return throwError(error);\n    }\n\n    const body: CapabilityResponse = error.error || {};\n    const challenge = this.getFirstChallenge(body);\n    return challenge ? this.authenticateUser(challenge, body.data) : throwError(error);\n  }\n\n  /**\n   * Method that supports the response to an issued challenge.\n   * @param data The data to be submitted in response to the challenge.\n   * @returns an observable that will either be successful or throw a new challenge\n   */\n  respondToChallenge(data: unknown): Observable<unknown | ChallengeResponse> {\n    return this.actionSubject.pipe(\n      first(),\n      switchMap((url) => this.postResponse(url, data)),\n    );\n  }\n\n  /**\n   * Method that will announce to the initiating widget that the transaction signing\n   * process is complete, and that the process was successful.\n   * The widget will be updated with an HttpResponse object containing the initial\n   * transaction data in the body.\n   */\n  completeWithSuccess() {\n    this.observerSubject.pipe(withLatestFrom(this.requestSubject), first()).subscribe({\n      next: ([observer, request]) => {\n        observer.next(new HttpResponse({ body: request.transactionData }));\n        observer.complete();\n        this.isHandlingTransaction = false;\n      },\n    });\n  }\n\n  /**\n   * Method that will announce to the initiating widget that the transaction signing\n   * process is complete, and that the process failed.\n   * The widget will be updated with an HttpErrorResponse object containing the initial\n   * transaction data and the error reason.\n   */\n  completeWithFailure(error: Error) {\n    this.observerSubject.pipe(withLatestFrom(this.requestSubject), first()).subscribe({\n      next: ([observer, request]) => {\n        observer.error(\n          new HttpErrorResponse({\n            status: 401,\n            statusText: error.message,\n            error: {\n              error,\n              data: request.transactionData,\n            },\n          }),\n        );\n        this.isHandlingTransaction = false;\n      },\n    });\n  }\n\n  private getFirstChallenge(body: CapabilityResponse): CapabilityChallenge | undefined {\n    const challenges: Array<CapabilityChallenge> = body.challenges || [];\n    return challenges.find((c) => c.scope !== undefined);\n  }\n\n  private authenticateUser(\n    challenge: CapabilityChallenge,\n    transactionData: CapabilityData,\n  ): Observable<HttpResponse<unknown>> {\n    return this.reauthenticate(challenge).pipe(\n      first(),\n      mapTo(new HttpResponse({ body: transactionData })),\n      catchError((response: ChallengeResponse) => {\n        return new Observable<HttpResponse<unknown>>((observer) => {\n          this.isHandlingTransaction = true;\n          this.requestSubject.next({\n            challenge: response,\n            transactionData,\n          });\n          this.observerSubject.next(observer);\n        });\n      }),\n    );\n  }\n\n  private reauthenticate(challenge: CapabilityChallenge) {\n    const { acrValues, scope } = challenge;\n    return this.oidcAuthService.createReauthLoginUrl(scope, acrValues).pipe(\n      switchMap((url) => {\n        if (this.serviceConfig && this.serviceConfig.useRedirectFlow) {\n          this.location.go(url);\n        }\n        return this.requestChallenge(url);\n      }),\n    );\n  }\n\n  private requestChallenge(url: string) {\n    return this.httpClient\n      .get<unknown | ChallengeResponse>(url, this.getRequestOptions())\n      .pipe(catchError(this.onAuthError));\n  }\n\n  private postResponse(url: string, data: unknown) {\n    return this.httpClient\n      .post<unknown | ChallengeResponse>(url, data, this.getRequestOptions())\n      .pipe(catchError(this.onAuthError));\n  }\n\n  private getRequestOptions() {\n    return {\n      headers: {\n        Accept: '*/*',\n        'X-Convert-Redirects': 'true',\n        Authentication: this.oidcAuthService.authorizationHeader(),\n      },\n      withCredentials: true,\n      observe: 'response' as const,\n    };\n  }\n\n  private onAuthError = (err: HttpErrorResponse): Observable<ChallengeResponse> => {\n    if (err.error && err.error.challenges) {\n      const { challengeType, actionUrl, ...challengeData } = err.error.challenges[0];\n      this.actionSubject.next(this.getActionUrl(actionUrl));\n      return throwError({\n        challengeType,\n        challengeData,\n      });\n    }\n    return throwError(this.getErrorResponse(err));\n  };\n\n  private getErrorResponse(error: HttpErrorResponse): ChallengeResponse {\n    const url = new URL(error.headers.get('location') || error.headers.get('Location') || '');\n    const params = new URLSearchParams(url.search);\n    return {\n      error: {\n        errorCode: params.get('error') || 'unknown_error',\n        errorDescription: params.get('error_description') || undefined,\n      },\n    };\n  }\n\n  private getActionUrl(url: string): string {\n    const idp = new URL(this.oidcAuthService.authConfig.issuer || '');\n    return url.startsWith('/auth') ? `${idp.origin}${url}` : `${idp.origin}/auth${url}`;\n  }\n}\n"]}