{"version":3,"file":"impersonation.service.js","sourceRoot":"","sources":["../../../../../../libs/identity-auth/impersonation/impersonation-service/impersonation.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { AccessTokenResponse } from '@backbase/data-ang/impersonation-v1';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, first, map, switchMap } from 'rxjs/operators';\nimport { AccessToken, ɵɵOidcAuthService } from '@backbase/identity-auth';\nimport { ImpersonationDataService } from '../impersonation-data/impersonation-data.service';\nimport { impersonationCodeParam, storageKeys } from '../impersonation.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImpersonationService {\n  private readonly isImpersonated$$ = new BehaviorSubject<boolean>(this.storedState);\n  /**\n   * Flag to determine if the current user is being impersonated.\n   */\n  readonly isImpersonated$ = this.isImpersonated$$.asObservable();\n\n  /** @internal */\n  constructor(\n    private readonly dataService: ImpersonationDataService,\n    @Optional() private readonly oidcAuthService: ɵɵOidcAuthService,\n  ) {\n    if (!oidcAuthService) {\n      throw new Error(\n        `In order to use ImpersonationService, please include IdentityAuthModule to your application module`,\n      );\n    }\n    this.clearImpersonationStateOnLogout();\n  }\n\n  /**\n   * Contacts the Identity Impersonation service to obtain an impersonation url for the\n   * input user and target web app.\n   * @param targetUserId the id of the user to be impersonated.\n   * @param targetWebApp the url of the app to impersonate the user in.\n   * @returns a url for the target app containing an impersonation code.\n   */\n  readonly getImpersonationUrl = (targetUserId: string, targetWebApp: string): Observable<string> =>\n    this.oidcAuthService.accessToken$.pipe(\n      filter((token): token is AccessToken => !!token),\n      first(),\n      switchMap(({ raw }) => this.dataService.getImpersonationUrl(raw, targetUserId, targetWebApp)),\n      map(({ ref }) => this.appendParamToUrl(targetWebApp, ref)),\n    );\n\n  /**\n   * Checks the current URL for an `impersonation_code` reference.\n   * @returns a promise that resolves when the impersonation state is determined.\n   */\n  readonly checkImpersonationStatus = async (): Promise<void> => {\n    const impersonationToken = this.getImpersonationCode();\n    if (!impersonationToken) {\n      return;\n    }\n\n    const accessTokenResponse = await this.dataService\n      .getAccessToken(impersonationToken, this.getClientId(), this.getRealm())\n      .toPromise();\n\n    this.setAccessTokenToOAuthStorage(accessTokenResponse);\n    this.stripParamFromUrl();\n    this.storedState = true;\n    await this.oidcAuthService.loadDiscoveryDocument();\n    await this.oidcAuthService.refresh();\n  };\n\n  private get storedState() {\n    return !!this.oidcAuthService.storage.getItem(storageKeys.impersonation);\n  }\n\n  private set storedState(value: boolean) {\n    this.isImpersonated$$.next(value);\n    if (value) {\n      this.oidcAuthService.storage.setItem(storageKeys.impersonation, value.toString());\n    } else {\n      this.oidcAuthService.storage.removeItem(storageKeys.impersonation);\n    }\n  }\n\n  private stripParamFromUrl() {\n    const url = new URL(window.location.href);\n    url.searchParams.delete(impersonationCodeParam);\n    window.history.replaceState(window.history.state, '', url.toString());\n  }\n\n  private appendParamToUrl(targetWebAppUrl: string, value: string) {\n    const url = new URL(targetWebAppUrl);\n    url.searchParams.append(impersonationCodeParam, value);\n    return url.toString();\n  }\n\n  private setAccessTokenToOAuthStorage(response: AccessTokenResponse) {\n    this.oidcAuthService.storage.setItem(storageKeys.accessToken, response.access_token || '');\n    this.oidcAuthService.storage.setItem(storageKeys.refreshToken, response.refresh_token || '');\n  }\n\n  private getClientId() {\n    return this.oidcAuthService.authConfig.clientId || '';\n  }\n\n  private getRealm() {\n    const issuer = this.oidcAuthService.authConfig.issuer;\n    if (!issuer) {\n      return '';\n    }\n\n    return new URL(issuer).pathname.split('/').pop() || '';\n  }\n\n  private clearImpersonationStateOnLogout() {\n    this.oidcAuthService.events$\n      .pipe(\n        filter((event) => ['logout', 'session_terminated'].includes(event.type)),\n        first(),\n      )\n      .subscribe({\n        next: () => (this.storedState = false),\n      });\n  }\n\n  private getImpersonationCode() {\n    return new URLSearchParams(location.search).get(impersonationCodeParam);\n  }\n}\n"]}