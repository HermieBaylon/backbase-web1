import { Observable } from 'rxjs';
import { ɵɵOidcAuthService } from '@backbase/identity-auth';
import { ImpersonationDataService } from '../impersonation-data/impersonation-data.service';
import * as i0 from "@angular/core";
export declare class ImpersonationService {
    private readonly dataService;
    private readonly oidcAuthService;
    private readonly isImpersonated$$;
    /**
     * Flag to determine if the current user is being impersonated.
     */
    readonly isImpersonated$: Observable<boolean>;
    /** @internal */
    constructor(dataService: ImpersonationDataService, oidcAuthService: ɵɵOidcAuthService);
    /**
     * Contacts the Identity Impersonation service to obtain an impersonation url for the
     * input user and target web app.
     * @param targetUserId the id of the user to be impersonated.
     * @param targetWebApp the url of the app to impersonate the user in.
     * @returns a url for the target app containing an impersonation code.
     */
    readonly getImpersonationUrl: (targetUserId: string, targetWebApp: string) => Observable<string>;
    /**
     * Checks the current URL for an `impersonation_code` reference.
     * @returns a promise that resolves when the impersonation state is determined.
     */
    readonly checkImpersonationStatus: () => Promise<void>;
    private get storedState();
    private set storedState(value);
    private stripParamFromUrl;
    private appendParamToUrl;
    private setAccessTokenToOAuthStorage;
    private getClientId;
    private getRealm;
    private clearImpersonationStateOnLogout;
    private getImpersonationCode;
    static ɵfac: i0.ɵɵFactoryDeclaration<ImpersonationService, [null, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ImpersonationService>;
}
