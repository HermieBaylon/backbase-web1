import { OnChanges, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AccountStatementBaseWidgetComponent, LoadingState } from '@backbase/account-statement-common-ang';
import { AccountStatementsFilterParams, AccountStatementStoreModel } from '@backbase/account-statement-store-ang';
import { AccountStatement } from '@backbase/data-ang/account-statements';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import { AccountStatementBusinessPropertiesService } from '../../services/account-statement-business-properties.service';
import * as i0 from "@angular/core";
export declare class AccountStatementBusinessWidgetComponent extends AccountStatementBaseWidgetComponent<AccountStatementBusinessPropertiesService> implements OnInit, OnDestroy, OnChanges {
    private readonly route;
    private readonly store;
    accountId: string;
    readonly accountStatements$: Observable<AccountStatement[]>;
    readonly accountStatementsLoading$: Observable<LoadingState>;
    readonly accountStatementsError$: Observable<Error | undefined>;
    readonly pageSize$: Observable<number>;
    readonly accountStatementsFilterParams$: Observable<AccountStatementsFilterParams>;
    readonly loadingStates: typeof LoadingState;
    private readonly destroy$;
    private accountId$;
    readonly accountIds$: Observable<string[]>;
    constructor(route: ActivatedRoute, store: AccountStatementStoreModel, propertiesService: AccountStatementBusinessPropertiesService);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private get initializeMinimalDateFilterLimit();
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountStatementBusinessWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccountStatementBusinessWidgetComponent, "bb-account-statement-business-widget", never, { "accountId": "accountId"; }, {}, never, never>;
}
export declare class AccountStatementBusinessWidgetCustomizableDirective extends BbTemplate<AccountStatementBusinessWidgetComponent, {
    accountStatements: AccountStatement[];
    accountStatementsLoading: LoadingState;
    accountStatementsError?: Error;
    accountStatementsFilterParams?: AccountStatementsFilterParams;
    loadingStates: typeof LoadingState;
    accountIds: string[];
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountStatementBusinessWidgetCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AccountStatementBusinessWidgetCustomizableDirective, "[bbAccountStatementBusinessWidgetCustomizable]", never, {}, {}, never>;
}
