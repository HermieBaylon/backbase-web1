(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/foundation-ang/core'), require('@backbase/account-statement-store-ang'), require('@backbase/account-statement-common-ang'), require('rxjs'), require('rxjs/operators'), require('@angular/router'), require('@angular/forms'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/dropdown-multi-select'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/table'), require('@backbase/ui-ang/date-pipe'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/pagination'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/account-selector')) :
    typeof define === 'function' && define.amd ? define('@backbase/account-statement-business-widget-ang', ['exports', '@angular/core', '@angular/common', '@backbase/foundation-ang/core', '@backbase/account-statement-store-ang', '@backbase/account-statement-common-ang', 'rxjs', 'rxjs/operators', '@angular/router', '@angular/forms', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/icon', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/dropdown-multi-select', '@backbase/ui-ang/button', '@backbase/ui-ang/notification', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/table', '@backbase/ui-ang/date-pipe', '@backbase/ui-ang/load-button', '@backbase/ui-ang/pagination', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/account-selector'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["account-statement-business-widget-ang"] = {}), global.ng.core, global.ng.common, global.i1$1, global.i2, global.i1, global.rxjs, global.rxjs.operators, global.ng.router, global.ng.forms, global.i4, global.i5, global.i6, global.i7, global.i8, global.i9, global.i10, global.i2$1, global.i5$1, global.i6$1, global.i8$2, global.i4$1, global.i5$2, global.i7$1, global.accountSelector));
})(this, (function (exports, i0, i8$1, i1$1, i2, i1, rxjs, operators, i1$3, i1$2, i4, i5, i6, i7, i8, i9, i10, i2$1, i5$1, i6$1, i8$2, i4$1, i5$2, i7$1, accountSelector) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i8__namespace$2 = /*#__PURE__*/_interopNamespace(i8$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AccountStatementBusinessPropertiesService = /** @class */ (function (_super) {
        __extends(AccountStatementBusinessPropertiesService, _super);
        function AccountStatementBusinessPropertiesService(itemModel) {
            return _super.call(this, itemModel) || this;
        }
        AccountStatementBusinessPropertiesService.prototype.getPaginationTypeIM$ = function () {
            var _a;
            var defaultValue = i1.PaginationType.Pagination;
            return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('paginationType', defaultValue)) || rxjs.of(defaultValue);
        };
        return AccountStatementBusinessPropertiesService;
    }(i1.AccountStatementBasePropertiesService));
    AccountStatementBusinessPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessPropertiesService, deps: [{ token: i1__namespace.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AccountStatementBusinessPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    /**
     * Extract the given param from activated route.
     *
     * @param route of type ActivatedRoute
     * @param param URL param that needs to be get from the active route
     * @returns Observable of extracted param
     */
    var getRouteParam = function (route, param) { return route.paramMap.pipe(operators.pluck('params', param)); };
    /**
     * Check if the given object is of type ProductSummaryItem or not
     *
     * @param account Either ProductSummaryItem or string
     * @returns boolean
     */
    var isProductsummaryItem = function (account) { return account.id !== undefined; };
    /**
     * Check if the passed parameter is ProductSummaryItem array or accountId's array and return id from it
     *
     * @param accounts Array of either ProductSummaryItem or string
     * @returns string accountId
     */
    var getAccountId = function (accounts) { return isProductsummaryItem(accounts[0]) ? accounts[0].id : accounts[0]; };

    var AccountStatementBusinessFiltersComponent = /** @class */ (function () {
        function AccountStatementBusinessFiltersComponent(fb, store, propertiesService) {
            this.fb = fb;
            this.store = store;
            this.propertiesService = propertiesService;
            this.filterDatePeriods = i1.DatePeriods;
            this.areFiltersApplied$ = this.store.accountStatementsFilterParams$.pipe(operators.map(function (filters) {
                var isDateRangeApplied = !!(filters.dateFrom && filters.dateTo);
                var isCategoryApplied = !!(filters.category && filters.category.length > 0);
                return isDateRangeApplied || isCategoryApplied;
            }));
            this.datePreferences$ = this.initializeDatePreferences;
            this.datePeriodsToDisplay$ = this.initializeFilterDatePeriods;
            this.categories$ = this.store.categories$;
            this.showCategory$ = this.propertiesService.showCategory$;
        }
        AccountStatementBusinessFiltersComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.store.accountStatementsFilterParams$.pipe(operators.first()).subscribe(function (params) {
                var from = params.dateFrom, to = params.dateTo, category = params.category;
                _this.filterForm = _this.fb.group({
                    bookDate: from && to ? { from: from, to: to } : '',
                    customFilterPeriods: params.datePeriod,
                    categories: [category || []],
                });
            });
        };
        AccountStatementBusinessFiltersComponent.prototype.resetForm = function () {
            var _this = this;
            this.areFiltersApplied$
                .pipe(operators.first(), operators.filter(Boolean), operators.withLatestFrom(this.propertiesService.pageSize$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), size = _b[1];
                _this.store.dispatchLoadAccountStatementsBusiness({
                    paginationParams: {
                        size: size,
                        from: 0,
                    },
                    filterParams: {
                        dateFrom: undefined,
                        dateTo: undefined,
                        datePeriod: i1.DatePeriods.AllTime,
                        category: undefined,
                    },
                });
            });
            this.filterForm.reset({ customFilterPeriods: this.filterDatePeriods.AllTime });
            this.focusFilterButton();
        };
        AccountStatementBusinessFiltersComponent.prototype.focusFilterButton = function () {
            if (this.filterButton) {
                this.filterButton.nativeElement.focus();
            }
        };
        AccountStatementBusinessFiltersComponent.prototype.onSubmit = function () {
            var customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');
            var bookDateFormField = this.filterForm.controls.bookDate;
            if (customFilterPeriodsFormField && bookDateFormField.touched) {
                customFilterPeriodsFormField.reset();
            }
            this.applyFormData();
            this.focusFilterButton();
        };
        AccountStatementBusinessFiltersComponent.prototype.setCustomFilter = function () {
            var customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');
            var bookDateFormField = this.filterForm.get('bookDate');
            var selectedPeriod = customFilterPeriodsFormField && customFilterPeriodsFormField.value;
            var selectedPeriodDates = i1.CUSTOM_FILTER_PERIODS_VALUES[selectedPeriod]();
            var from = selectedPeriodDates.from && selectedPeriodDates.from.toISOString();
            var to = selectedPeriodDates.to && selectedPeriodDates.to.toISOString();
            if (bookDateFormField) {
                var bookDateValue = from && to ? { from: from, to: to } : '';
                bookDateFormField.setValue(bookDateValue);
            }
            this.applyFormData();
        };
        AccountStatementBusinessFiltersComponent.prototype.applyFormData = function () {
            var _this = this;
            var bookDateControl = this.filterForm.get('bookDate');
            var selectedPeriodControl = this.filterForm.get('customFilterPeriods');
            var categoriesControl = this.filterForm.get('categories');
            var selectedPeriodControlValue = selectedPeriodControl && selectedPeriodControl.value;
            var categoriesValue = categoriesControl && categoriesControl.value;
            var _a = (bookDateControl && bookDateControl.value) || {}, dateFrom = _a.from, dateTo = _a.to;
            this.propertiesService.pageSize$.pipe(operators.first()).subscribe(function (size) {
                _this.store.dispatchLoadAccountStatementsBusiness({
                    paginationParams: {
                        size: size,
                        from: 0,
                    },
                    filterParams: {
                        dateFrom: dateFrom,
                        dateTo: dateTo || dateFrom,
                        datePeriod: selectedPeriodControlValue || undefined,
                        category: categoriesValue || undefined,
                    },
                });
            });
            this.filterForm.markAsPristine();
        };
        Object.defineProperty(AccountStatementBusinessFiltersComponent.prototype, "initializeDatePreferences", {
            get: function () {
                return this.store.accountStatementsWidgetPreferences$.pipe(operators.map(function (preferences) { return ({
                    minimalDate: i1.convertDateObjToDateStruct(preferences.minimalDate),
                    maximumDate: i1.convertDateObjToDateStruct(preferences.maximumDate),
                }); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountStatementBusinessFiltersComponent.prototype, "initializeFilterDatePeriods", {
            get: function () {
                return this.store.accountStatementsWidgetPreferences$.pipe(operators.map(function (preferences) {
                    var datePeriodValues = Object.values(i1.DatePeriods);
                    return datePeriodValues.filter(function (value) {
                        var periodValue = i1.CUSTOM_FILTER_PERIODS_VALUES[value]();
                        return periodValue.from >= preferences.minimalDate;
                    });
                }));
            },
            enumerable: false,
            configurable: true
        });
        return AccountStatementBusinessFiltersComponent;
    }());
    AccountStatementBusinessFiltersComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessFiltersComponent, deps: [{ token: i1__namespace$1.FormBuilder }, { token: i2__namespace.AccountStatementStoreModel }, { token: AccountStatementBusinessPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementBusinessFiltersComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessFiltersComponent, selector: "bb-account-statement-business-filters", viewQueries: [{ propertyName: "filterButton", first: true, predicate: ["filterButton"], descendants: true }], ngImport: i0__namespace, template: "<ng-container\n  bbAccountStatementBusinessFiltersCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    areFiltersApplied: (areFiltersApplied$ | async)!,\n    datePreferences: (datePreferences$ | async)!,\n    datePeriodsToDisplay: (datePeriodsToDisplay$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    categories: (categories$ | async)!,\n    filterForm: filterForm\n  }\"\n></ng-container>\n<ng-template\n  bbAccountStatementBusinessFiltersCustomizable\n  let-host\n  let-areFiltersApplied=\"context.areFiltersApplied\"\n  let-filterForm=\"context.filterForm\"\n  let-datePreferences=\"context.datePreferences\"\n  let-datePeriodsToDisplay=\"context.datePeriodsToDisplay\"\n  let-showCategory=\"context.showCategory\"\n  let-categories=\"context.categories\"\n>\n  <bb-collapsible-ui>\n    <form [formGroup]=\"filterForm\">\n      <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-stack bb-stack--wrap\">\n            <button\n              class=\"bb-stack__item bb-stack__item--spacing-lg bb-stack__item--push-left-sm-down bb-stack__break--sm-down bb-block bb-block--md-md-down\"\n              bbButton\n              #filterButton\n              data-role=\"collapsible-filter-btn\"\n              [color]=\"areFiltersApplied && !isOpen ? 'primary' : 'secondary'\"\n              [ngClass]=\"{ active: isOpen }\"\n              (click)=\"toggle()\"\n            >\n              <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n              <span\n                *ngIf=\"areFiltersApplied; else filterButtonTextDefault\"\n                i18n=\"\n                  Filters applied|Filter form button filter\n                  label@@account-statement-business.filters.button.applied-label\"\n              >\n                Filters applied\n              </span>\n              <ng-template #filterButtonTextDefault>\n                <span\n                  i18n=\"Filter|Filter form button filter label@@account-statement-business.filters.button.filter-label\"\n                >\n                  Filter\n                </span>\n              </ng-template>\n            </button>\n\n            <bb-dropdown-single-select-ui\n              (change)=\"host.setCustomFilter()\"\n              class=\"bb-stack__item bb-stack__break--sm-down\"\n              formControlName=\"customFilterPeriods\"\n              [required]=\"false\"\n              [attr.data-role]=\"'dropdown-single-select'\"\n              placeholder=\"Custom\"\n              i18n-placeholder=\"Custom single select placeholder@@bb-dropdown-single-select.custom.placeholder\"\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Today) !== -1\"\n                [value]=\"host.filterDatePeriods.Today\"\n                label=\"Today\"\n                i18n-label=\"Today option label@@bb-dropdown-single-select-option-ui.today.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Yesterday) !== -1\"\n                [value]=\"host.filterDatePeriods.Yesterday\"\n                label=\"Yesterday\"\n                i18n-label=\"Yesterday option label@@bb-dropdown-single-select-option-ui.yesterday.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisWeek\"\n                label=\"This week\"\n                i18n-label=\"This week option label@@bb-dropdown-single-select-option-ui.this-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.LastWeek\"\n                label=\"Last week\"\n                i18n-label=\"Last week option label@@bb-dropdown-single-select-option-ui.last-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisMonth\"\n                label=\"This month\"\n                i18n-label=\"This month option label@@bb-dropdown-single-select-option-ui.this-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.LastMonth\"\n                label=\"Last month\"\n                i18n-label=\"Last month option label@@bb-dropdown-single-select-option-ui.last-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisQuarter\"\n                label=\"This quarter\"\n                i18n-label=\"This quarter option label@@bb-dropdown-single-select-option-ui.this-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.LastQuarter\"\n                label=\"Last quarter\"\n                i18n-label=\"Last quarter option label@@bb-dropdown-single-select-option-ui.last-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisYear) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisYear\"\n                label=\"This year\"\n                i18n-label=\"This year option label@@bb-dropdown-single-select-option-ui.this-year.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                [value]=\"host.filterDatePeriods.AllTime\"\n                label=\"All time\"\n                i18n-label=\"All time option label@@bb-dropdown-single-select-option-ui.all-time.label\"\n              ></bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n          </div>\n        </div>\n      </ng-template>\n\n      <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n        <div\n          class=\"card-body account-statements-filter__form-container account-statements-filter__form-container--no-container\"\n          data-role=\"filter-form\"\n        >\n          <div class=\"row\">\n            <div class=\"bb-block bb-block--md col-12 col-sm-6\">\n              <div class=\"account-statements-filter__date-field-wrapper\">\n                <bb-input-datepicker-ui\n                  i18n-label=\"\n                    Book date|Filter form book date label@@account-statement-business.filters.datepicker-label\"\n                  label=\"Date range\"\n                  labelClasses=\"form-label\"\n                  [rangeSelection]=\"true\"\n                  [minDate]=\"datePreferences.minimalDate\"\n                  [maxDate]=\"datePreferences.maximumDate\"\n                  aria-label=\"Book date\"\n                  i18n-aria-label=\"\n                    Book date filter aria label@@account-statement-business.filters.datepicker.aria-label\"\n                  [attr.aria-invalid]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                  formControlName=\"bookDate\"\n                  data-role=\"book-date\"\n                ></bb-input-datepicker-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                >\n                  <span\n                    i18n=\"\n                      Error invalid date format in book date\n                      range@@account-statement-business.filters.datepicker.error.invalid-date-format\"\n                    data-role=\"invalid-book-date-error-message\"\n                    >Invalid date format</span\n                  >\n                </bb-input-validation-message-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"\n                    !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                    (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                      host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n                  \"\n                >\n                  <span\n                    i18n=\"\n                      Selected date range contains invalid dates\n                      range@@account-statement-business.filters.datepicker.error.dateLessThanMinDate\"\n                    data-role=\"invalid-book-date-limit-error-message\"\n                    >The selected dates include values outside the allowed date range. Please select a date interval in\n                    the permitted time frame.</span\n                  >\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n            <ng-container *ngIf=\"showCategory\">\n              <bb-dropdown-multi-select-ui\n                *ngIf=\"categories.length\"\n                [formControl]=\"host.filterForm.controls['categories']\"\n                class=\"bb-block bb-block--lg col-12 col-sm-6\"\n                data-role=\"categories-filter\"\n                placeholder=\"Select product category\"\n                i18n-placeholder=\"\n                  Category select placeholder|Category multiple\n                  select@@account-statement-business.filter.form.categories.placeholder\"\n                label=\"Category\"\n                i18n-label=\"\n                  Category label|Category multiple select@@account-statement-business.filter.form.categories.label\"\n              >\n                <bb-dropdown-multi-select-option-ui *ngFor=\"let option of categories\" [label]=\"option\" [value]=\"option\">\n                </bb-dropdown-multi-select-option-ui>\n              </bb-dropdown-multi-select-ui>\n            </ng-container>\n          </div>\n          <div class=\"bb-button-bar\">\n            <button\n              bbButton\n              type=\"submit\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"apply\"\n              [disabled]=\"filterForm.pristine || filterForm.invalid\"\n              (click)=\"host.onSubmit(); toggle()\"\n              i18n=\"Apply|Filter form button apply label@@account-statement-business.filters.button.apply-label\"\n            >\n              Apply\n            </button>\n            <button\n              bbButton\n              color=\"secondary\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"close\"\n              (click)=\"toggle(); host.focusFilterButton()\"\n              i18n=\"Close|Filter form button close label@@account-statement-business.filters.button.close-label\"\n            >\n              Close\n            </button>\n            <button\n              bbButton\n              color=\"link\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"clear-all\"\n              *ngIf=\"filterForm.dirty || areFiltersApplied\"\n              (click)=\"host.resetForm()\"\n              i18n=\"Clear All|Filter form button clear label@@account-statement-business.filters.button.clear-label\"\n            >\n              Clear all\n            </button>\n          </div>\n        </div>\n      </ng-template>\n    </form>\n  </bb-collapsible-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i4__namespace.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementBusinessFiltersCustomizableDirective; }), selector: "[bbAccountStatementBusinessFiltersCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0__namespace.forwardRef(function () { return i10__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i8__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessFiltersComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-business-filters',
                        templateUrl: './account-statement-business-filters.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.FormBuilder }, { type: i2__namespace.AccountStatementStoreModel }, { type: AccountStatementBusinessPropertiesService }]; }, propDecorators: { filterButton: [{
                    type: i0.ViewChild,
                    args: ['filterButton']
                }] } });
    var AccountStatementBusinessFiltersCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementBusinessFiltersCustomizableDirective, _super);
        function AccountStatementBusinessFiltersCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementBusinessFiltersCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementBusinessFiltersCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessFiltersCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementBusinessFiltersCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessFiltersCustomizableDirective, selector: "[bbAccountStatementBusinessFiltersCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessFiltersCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[bbAccountStatementBusinessFiltersCustomizable]' }]
            }] });

    var AccountStatementViewOnlineBusinessWrapperComponent = /** @class */ (function () {
        function AccountStatementViewOnlineBusinessWrapperComponent() {
            this.describedByElementId = '';
        }
        Object.defineProperty(AccountStatementViewOnlineBusinessWrapperComponent.prototype, "documents", {
            set: function (documents) {
                this.documentPDF = documents.find(function (document) { return document.contentType === 'application/pdf'; });
            },
            enumerable: false,
            configurable: true
        });
        return AccountStatementViewOnlineBusinessWrapperComponent;
    }());
    AccountStatementViewOnlineBusinessWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementViewOnlineBusinessWrapperComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementViewOnlineBusinessWrapperComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementViewOnlineBusinessWrapperComponent, selector: "bb-account-statement-view-online-business-wrapper", inputs: { documents: "documents", describedByElementId: "describedByElementId" }, ngImport: i0__namespace, template: "<bb-account-statement-view-online\n  *ngIf=\"documentPDF\"\n  [href]=\"documentPDF.url!\"\n  [describedByElementId]=\"describedByElementId\"\n></bb-account-statement-view-online>\n", components: [{ type: i1__namespace$2.ӨAccountStatementViewOnlineComponent, selector: "bb-account-statement-view-online", inputs: ["href", "describedByElementId"] }], directives: [{ type: i8__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementViewOnlineBusinessWrapperComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-view-online-business-wrapper',
                        templateUrl: './account-statement-view-online-business-wrapper.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { documents: [{
                    type: i0.Input
                }], describedByElementId: [{
                    type: i0.Input
                }] } });

    var AccountStatementBusinessTableComponent = /** @class */ (function () {
        function AccountStatementBusinessTableComponent(dataService, notificationsService, propertiesService) {
            this.dataService = dataService;
            this.notificationsService = notificationsService;
            this.propertiesService = propertiesService;
            this.loading = false;
            this.showCategory = true;
            this.sort = new i0.EventEmitter();
            this.mimeTypeExtensions = i1.mimeTypeExtensions;
            this.accountStatementsValue = [];
        }
        Object.defineProperty(AccountStatementBusinessTableComponent.prototype, "accountStatements", {
            get: function () {
                return this.accountStatementsValue;
            },
            set: function (accountStatements) {
                var _this = this;
                this.accountStatementsValue = accountStatements.map(function (accountStatement) { return (Object.assign(Object.assign({}, accountStatement), { documents: accountStatement.documents.map(function (document) { return (Object.assign(Object.assign({}, document), { url: _this.getDocumentLink(document) })); }) })); });
            },
            enumerable: false,
            configurable: true
        });
        AccountStatementBusinessTableComponent.prototype.onSort = function (sortEvent) {
            this.sort.emit(sortEvent);
        };
        AccountStatementBusinessTableComponent.prototype.onDownloadFailure = function () {
            var _this = this;
            this.propertiesService.notificationDismissTime$.subscribe(function (ttl) {
                _this.notificationsService.showNotification({
                    header: _this.downloadFailureNotificationHeader,
                    message: '',
                    modifier: 'error',
                    ttl: ttl,
                });
            });
        };
        AccountStatementBusinessTableComponent.prototype.getDirection = function (column) {
            return this.sortingParams && this.sortingParams.column === column ? this.sortingParams.direction : '';
        };
        AccountStatementBusinessTableComponent.prototype.getDocumentLink = function (document) {
            return document.url || this.dataService.getAccountStatementDownloadUrl(document.uid || '');
        };
        return AccountStatementBusinessTableComponent;
    }());
    AccountStatementBusinessTableComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessTableComponent, deps: [{ token: i1__namespace$2.AccountStatementDataService }, { token: i2__namespace$1.NotificationService }, { token: AccountStatementBusinessPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementBusinessTableComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessTableComponent, selector: "bb-account-statement-business-table", inputs: { accountStatements: "accountStatements", sortingParams: "sortingParams", loading: "loading", showCategory: "showCategory" }, outputs: { sort: "sort" }, viewQueries: [{ propertyName: "downloadFailureNotificationHeader", first: true, predicate: ["downloadFailureNotificationHeader"], descendants: true }], ngImport: i0__namespace, template: "<ng-container\n  bbAccountStatementBusinessTableCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: accountStatements,\n    mimeTypeExtensions: mimeTypeExtensions,\n    loading: loading\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessTableCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-mimeTypeExtensions=\"context.mimeTypeExtensions\"\n  let-loading=\"context.loading\"\n>\n  <table\n    bbTableFocus\n    [bbTable]=\"accountStatements\"\n    (sort)=\"hostRef.onSort($event)\"\n    class=\"table\"\n    aria-label=\"Account statements table\"\n    i18n-aria-label=\"Aria label for account statements table@@account-statement-business.table.aria-label\"\n  >\n    <thead>\n      <tr class=\"d-sm-table-row d-none\">\n        <th bbSortable=\"date\" [direction]=\"hostRef.getDirection('date')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Book date|table heading@@account-statement-business.table-head.book-date\"\n            data-role=\"book-date-thead\"\n            >Book date</span\n          >\n        </th>\n        <th *ngIf=\"showCategory\" bbSortable=\"category\" [direction]=\"hostRef.getDirection('category')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Category|table heading@@account-statement-business.table-head.category\"\n            data-role=\"category-thead\"\n            >Category</span\n          >\n        </th>\n        <th bbSortable=\"accountName\" [direction]=\"hostRef.getDirection('accountName')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Account name, number|table heading@@account-statement-business.table-head.account\"\n            data-role=\"account-name-thead\"\n            >Account name, number</span\n          >\n        </th>\n        <th scope=\"col\" class=\"bb-text-align-center\">\n          <span\n            class=\"th-content\"\n            i18n=\"Preview|table heading@@account-statement-business.table-head.preview\"\n            data-role=\"preview-thead\"\n            >Preview</span\n          >\n        </th>\n        <th scope=\"col\" class=\"bb-text-align-center\">\n          <span\n            class=\"th-content\"\n            i18n=\"Download|table heading@@account-statement-business.table-head.download\"\n            data-role=\"download-thead\"\n            >Download</span\n          >\n        </th>\n      </tr>\n    </thead>\n\n    <tbody *ngIf=\"!loading\">\n      <ng-container *ngFor=\"let accountStatement of accountStatements; let rowNumber = index\">\n        <tr class=\"d-sm-table-row d-none\">\n          <td data-role=\"date-td\">{{ accountStatement.date | bbDate: 'shortDate' }}</td>\n\n          <td *ngIf=\"showCategory\" data-role=\"category-td\">{{ accountStatement.category }}</td>\n\n          <td class=\"text-break\" data-role=\"account-name-td\">\n            <div>{{ accountStatement.accountName }}</div>\n            <div class=\"bb-text-support\">{{ accountStatement.accountNumber }}</div>\n          </td>\n\n          <td class=\"bb-text-align-center\">\n            <span\n              *ngIf=\"accountStatement.documents?.length\"\n              id=\"describe-preview-by-{{ rowNumber }}\"\n              class=\"sr-only\"\n              i18n=\"\n                Account and book date|describing what row data this preview action is\n                for@@account-statement-business.preview-button.description\"\n            >\n              Preview for account {{ accountStatement.accountName }} and book date\n              {{ accountStatement.date | bbDate: 'fullDate' }}\n            </span>\n\n            <bb-account-statement-view-online-business-wrapper\n              [documents]=\"accountStatement.documents\"\n              describedByElementId=\"describe-preview-by-{{ rowNumber }}\"\n            ></bb-account-statement-view-online-business-wrapper>\n          </td>\n\n          <td class=\"bb-text-align-center\">\n            <span *ngIf=\"accountStatement.documents?.length\" id=\"describe-download-by-{{ rowNumber }}\" class=\"sr-only\">\n              <ng-container\n                *ngIf=\"accountStatement.documents?.length === 1; else multipleDownloadDocumentsDescription\"\n                i18n=\"\n                  Account and book date|describing what row data this download action is\n                  for@@account-statement-business.download-button.description\"\n              >\n                Download {{ mimeTypeExtensions[accountStatement.documents[0]?.contentType] }} for account\n                {{ accountStatement.accountName }} and book date {{ accountStatement.date | bbDate: 'fullDate' }}\n              </ng-container>\n\n              <ng-template\n                #multipleDownloadDocumentsDescription\n                i18n=\"\n                  Account and book date|describing what data in a row this download action is\n                  for@@account-statement-business.download-dropdown-button.description\"\n              >\n                Show download actions for account {{ accountStatement.accountName }} and book date\n                {{ accountStatement.date | bbDate: 'fullDate' }}\n              </ng-template>\n            </span>\n\n            <bb-account-statement-downloads\n              describedByElementId=\"describe-download-by-{{ rowNumber }}\"\n              [documents]=\"accountStatement.documents\"\n              [mimeTypeExtensions]=\"mimeTypeExtensions\"\n              (downloadFailure)=\"hostRef.onDownloadFailure()\"\n            ></bb-account-statement-downloads>\n          </td>\n        </tr>\n\n        <div class=\"d-sm-none bb-list__item\">\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-stack bb-stack--align-top\">\n              <div class=\"bb-stack__item\">\n                <div\n                  class=\"bb-block bb-block--xs bb-text-semi-bold\"\n                  i18n=\"Book date|table heading@@account-statement-business.list-head.book-date\"\n                >\n                  Book date\n                </div>\n                <div>{{ accountStatement.date | bbDate: 'shortDate' }}</div>\n              </div>\n\n              <bb-account-statement-view-online-business-wrapper\n                class=\"bb-stack__item bb-stack__item--push-right\"\n                [documents]=\"accountStatement.documents\"\n                describedByElementId=\"describe-preview-by-{{ rowNumber }}\"\n              ></bb-account-statement-view-online-business-wrapper>\n\n              <bb-account-statement-downloads\n                describedByElementId=\"describe-download-by-{{ rowNumber }}\"\n                tooltipPlacement=\"top-right\"\n                [documents]=\"accountStatement.documents\"\n                [mimeTypeExtensions]=\"mimeTypeExtensions\"\n                (downloadFailure)=\"hostRef.onDownloadFailure()\"\n              ></bb-account-statement-downloads>\n            </div>\n          </div>\n          <ng-container *ngIf=\"showCategory\">\n            <div\n              class=\"bb-block bb-block--xs bb-text-semi-bold\"\n              i18n=\"Category|table heading@@account-statement-business.list-head.category\"\n            >\n              Category\n            </div>\n            <div class=\"bb-block bb-block--md\">{{ accountStatement.category }}</div>\n          </ng-container>\n\n          <div\n            class=\"bb-block bb-block--xs bb-text-semi-bold\"\n            i18n=\"Account name|table heading@@account-statement-business.list-head.account-name\"\n          >\n            Account name\n          </div>\n          <div class=\"bb-block bb-block--md\">{{ accountStatement.accountName }}</div>\n\n          <div\n            class=\"bb-block bb-block--xs bb-text-semi-bold\"\n            i18n=\"Account number|table heading@@account-statement-business.list-head.account-number\"\n          >\n            Account number\n          </div>\n          <div class=\"text-break\">{{ accountStatement.accountNumber }}</div>\n        </div>\n      </ng-container>\n    </tbody>\n  </table>\n\n  <bb-loading-indicator-ui *ngIf=\"loading\" loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #downloadFailureNotificationHeader>\n  <ng-container bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective [bbHostRef]=\"this\">\n  </ng-container>\n\n  <ng-template bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective>\n    <span i18n=\"Failed to download statement@@account-statement-business-table-row.error-notification.header\"\n      >The statement cannot be downloaded now, please try again later</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return AccountStatementViewOnlineBusinessWrapperComponent; }), selector: "bb-account-statement-view-online-business-wrapper", inputs: ["documents", "describedByElementId"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ӨAccountStatementDownloadsComponent; }), selector: "bb-account-statement-downloads", inputs: ["documents", "mimeTypeExtensions", "describedByElementId", "tooltipPlacement"], outputs: ["downloadFailure"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementBusinessTableCustomizableDirective; }), selector: "[bbAccountStatementBusinessTableCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.TableDirective; }), selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.TableFocusDirective; }), selector: "[bbTableFocus]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.TableSortableDirective; }), selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective; }), selector: "[bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective]" }], pipes: { "bbDate": i0__namespace.forwardRef(function () { return i8__namespace$2.BbDatePipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessTableComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-business-table',
                        templateUrl: './account-statement-business-table.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.AccountStatementDataService }, { type: i2__namespace$1.NotificationService }, { type: AccountStatementBusinessPropertiesService }]; }, propDecorators: { accountStatements: [{
                    type: i0.Input
                }], sortingParams: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], showCategory: [{
                    type: i0.Input
                }], sort: [{
                    type: i0.Output
                }], downloadFailureNotificationHeader: [{
                    type: i0.ViewChild,
                    args: ['downloadFailureNotificationHeader']
                }] } });
    var AccountStatementBusinessTableCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementBusinessTableCustomizableDirective, _super);
        function AccountStatementBusinessTableCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementBusinessTableCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementBusinessTableCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessTableCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementBusinessTableCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessTableCustomizableDirective, selector: "[bbAccountStatementBusinessTableCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessTableCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[bbAccountStatementBusinessTableCustomizable]' }]
            }] });
    var AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, _super);
        function AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, selector: "[bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective]',
                    }]
            }] });

    var AccountStatementBusinessStatementsContainerComponent = /** @class */ (function () {
        function AccountStatementBusinessStatementsContainerComponent(store, propertiesService) {
            this.store = store;
            this.propertiesService = propertiesService;
            this.accountStatements$ = this.store.accountStatements$;
            this.totalCount$ = this.store.accountStatementsTotalCount$;
            this.accountStatementsLoading$ = this.store.accountStatementsLoading$;
            this.sortingParams$ = this.store.accountStatementsSortingParams$;
            this.paginationParams$ = this.store.accountStatementsPaginationParams$;
            this.loadingStates = i1.LoadingState;
            this.paginationTypes = i1.PaginationType;
            this.paginationType$ = this.propertiesService.paginationType$;
            this.showCategory$ = this.propertiesService.showCategory$;
            this.pageSize$ = this.propertiesService.pageSize$.pipe(operators.first());
        }
        AccountStatementBusinessStatementsContainerComponent.prototype.loadMore = function (params) {
            var _this = this;
            this.pageSize$.subscribe(function (size) {
                _this.store.dispatchLoadAccountStatementsBusiness({
                    paginationParams: {
                        size: size,
                        from: params.from,
                    },
                    append: true,
                });
            });
        };
        AccountStatementBusinessStatementsContainerComponent.prototype.onSort = function (sortEvent) {
            var _this = this;
            this.pageSize$.subscribe(function (size) {
                _this.store.dispatchLoadAccountStatementsBusiness({
                    sortingParams: sortEvent,
                    paginationParams: {
                        size: size,
                        from: 0,
                    },
                });
            });
        };
        AccountStatementBusinessStatementsContainerComponent.prototype.handlePageChange = function (page) {
            var _this = this;
            this.pageSize$.subscribe(function (size) {
                _this.store.dispatchLoadAccountStatementsBusiness({
                    paginationParams: {
                        size: size,
                        from: page,
                    },
                });
            });
        };
        return AccountStatementBusinessStatementsContainerComponent;
    }());
    AccountStatementBusinessStatementsContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessStatementsContainerComponent, deps: [{ token: i2__namespace.AccountStatementStoreModel }, { token: AccountStatementBusinessPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementBusinessStatementsContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessStatementsContainerComponent, selector: "bb-account-statement-business-statements-container", ngImport: i0__namespace, template: "<ng-container\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    totalCount: (totalCount$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    loadingStates: loadingStates,\n    paginationParams: (paginationParams$ | async)!,\n    sortingParams: (sortingParams$ | async)!,\n    paginationType: (paginationType$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    paginationTypes: paginationTypes\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-totalCount=\"context.totalCount\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-loadingStates=\"context.loadingStates\"\n  let-paginationParams=\"context.paginationParams\"\n  let-sortingParams=\"context.sortingParams\"\n  let-paginationType=\"context.paginationType\"\n  let-showCategory=\"context.showCategory\"\n  let-paginationTypes=\"context.paginationTypes\"\n>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-account-statement-business-table\n      [accountStatements]=\"accountStatements\"\n      [sortingParams]=\"sortingParams\"\n      [showCategory]=\"showCategory\"\n      [loading]=\"accountStatementsLoading === loadingStates.LOADING_TABLE\"\n      (sort)=\"hostRef.onSort($event)\"\n    ></bb-account-statement-business-table>\n  </div>\n\n  <div class=\"bb-text-align-center\" *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_TABLE\">\n    <bb-load-button-ui\n      color=\"link\"\n      [ngClass]=\"{ 'd-sm-none': paginationType !== paginationTypes.LoadMore }\"\n      [isLoading]=\"accountStatementsLoading === loadingStates.LOADING_MORE\"\n      [size]=\"paginationParams.size\"\n      [from]=\"paginationParams.from\"\n      [totalCount]=\"totalCount\"\n      (paramChange)=\"hostRef.loadMore($event)\"\n      data-role=\"load-more-button\"\n    >\n      <span i18n=\"Load more|Load More button text@@account-statement-business.list.load-more\">Load more</span>\n    </bb-load-button-ui>\n\n    <bb-pagination-ui\n      class=\"d-none d-sm-block\"\n      *ngIf=\"paginationType === paginationTypes.Pagination\"\n      [page]=\"paginationParams.from\"\n      [itemsPerPage]=\"paginationParams.size\"\n      [totalItems]=\"totalCount\"\n      [boundaryLinks]=\"true\"\n      [directionLinks]=\"true\"\n      (pageChange)=\"hostRef.handlePageChange($event)\"\n      data-role=\"pagination\"\n    ></bb-pagination-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return AccountStatementBusinessTableComponent; }), selector: "bb-account-statement-business-table", inputs: ["accountStatements", "sortingParams", "loading", "showCategory"], outputs: ["sort"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$2.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementBusinessStatementsContainerCustomizableDirective; }), selector: "[bbAccountStatementBusinessStatementsContainerCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i8__namespace$1.AsyncPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessStatementsContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-business-statements-container',
                        templateUrl: './account-statement-business-statements-container.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.AccountStatementStoreModel }, { type: AccountStatementBusinessPropertiesService }]; } });
    var AccountStatementBusinessStatementsContainerCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementBusinessStatementsContainerCustomizableDirective, _super);
        function AccountStatementBusinessStatementsContainerCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementBusinessStatementsContainerCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementBusinessStatementsContainerCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessStatementsContainerCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementBusinessStatementsContainerCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessStatementsContainerCustomizableDirective, selector: "[bbAccountStatementBusinessStatementsContainerCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessStatementsContainerCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[bbAccountStatementBusinessStatementsContainerCustomizable]' }]
            }] });

    var AccountStatementBusinessWidgetComponent = /** @class */ (function (_super) {
        __extends(AccountStatementBusinessWidgetComponent, _super);
        function AccountStatementBusinessWidgetComponent(route, store, propertiesService) {
            var _this = _super.call(this, propertiesService) || this;
            _this.route = route;
            _this.store = store;
            _this.accountId = '';
            _this.accountStatements$ = _this.store.accountStatements$;
            _this.accountStatementsLoading$ = _this.store.accountStatementsLoading$;
            _this.accountStatementsError$ = _this.store.accountStatementsError$;
            _this.pageSize$ = _this.propertiesService.pageSize$.pipe(operators.first());
            _this.accountStatementsFilterParams$ = _this.store.accountStatementsFilterParams$;
            _this.loadingStates = i1.LoadingState;
            _this.destroy$ = new rxjs.Subject();
            _this.accountId$ = new rxjs.BehaviorSubject('');
            // In order to be able to transmit an account ids both using the route parameter and through the input
            // eslint-disable-next-line @typescript-eslint/member-ordering
            _this.accountIds$ = rxjs.merge(getRouteParam(_this.route, 'selectedAccount'), _this.accountId$.pipe(operators.filter(function (accountId) { return !!accountId; }))).pipe(operators.map(function (accountIds) { return i1.stringToWords(accountIds, ','); }));
            return _this;
        }
        AccountStatementBusinessWidgetComponent.prototype.ngOnChanges = function () {
            if (this.accountId) {
                this.accountId$.next(this.accountId);
            }
        };
        AccountStatementBusinessWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.initializeMinimalDateFilterLimit.pipe(operators.takeUntil(this.destroy$)).subscribe(function (minimalDate) {
                var widgetPreferences = { minimalDate: minimalDate, maximumDate: i1.today() };
                _this.store.dispatchUpdateWidgetPreferences({ widgetPreferences: widgetPreferences });
            });
            var sortingParams$ = rxjs.combineLatest([
                this.propertiesService.sortingOrder$,
                this.propertiesService.sortingDirection$.pipe(operators.map(function (direction) { return direction.toLowerCase(); })),
            ]).pipe(operators.first(), operators.map(function (_a) {
                var _b = __read(_a, 2), column = _b[0], direction = _b[1];
                return ({
                    column: column,
                    direction: direction,
                });
            }));
            rxjs.combineLatest([
                // fetch statements if exactly one account ID is provided
                this.accountIds$.pipe(operators.filter(function (_a) {
                    var length = _a.length;
                    return length === 1;
                })),
                this.pageSize$,
                sortingParams$,
            ])
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (_a) {
                var _b = __read(_a, 3), accounts = _b[0], size = _b[1], sortingParams = _b[2];
                _this.store.dispatchLoadAccountStatementsBusiness({
                    accountIds: [getAccountId(accounts)],
                    sortingParams: sortingParams,
                    paginationParams: {
                        from: 0,
                        size: size,
                    },
                    // reset filters for date
                    filterParams: {
                        datePeriod: i1.DatePeriods.AllTime,
                    },
                });
            });
            this.propertiesService.showCategory$
                .pipe(operators.filter(Boolean), operators.takeUntil(this.destroy$))
                .subscribe(function (_) { return _this.store.dispatchLoadCategories(); });
        };
        AccountStatementBusinessWidgetComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        Object.defineProperty(AccountStatementBusinessWidgetComponent.prototype, "initializeMinimalDateFilterLimit", {
            get: function () {
                return rxjs.combineLatest([this.propertiesService.absoluteDateLimit$, this.propertiesService.relativeDateLimit$]).pipe(operators.map(function (_a) {
                    var _b = __read(_a, 2), absoluteDateLimit = _b[0], relativeMonthLimit = _b[1];
                    return i1.getDateFilterLimit(absoluteDateLimit, relativeMonthLimit);
                }));
            },
            enumerable: false,
            configurable: true
        });
        return AccountStatementBusinessWidgetComponent;
    }(i1.AccountStatementBaseWidgetComponent));
    AccountStatementBusinessWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetComponent, deps: [{ token: i1__namespace$3.ActivatedRoute }, { token: i2__namespace.AccountStatementStoreModel }, { token: AccountStatementBusinessPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountStatementBusinessWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessWidgetComponent, selector: "bb-account-statement-business-widget", inputs: { accountId: "accountId" }, providers: [i2.AccountStatementStoreModel, AccountStatementBusinessPropertiesService], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace, template: "<ng-container\n  bbAccountStatementBusinessWidgetCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    accountStatementsError: (accountStatementsError$ | async)!,\n    accountStatementsFilterParams: (accountStatementsFilterParams$ | async)!,\n    accountIds: (accountIds$ | async)!,\n    loadingStates: loadingStates\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessWidgetCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-accountStatementsFilterParams=\"context.accountStatementsFilterParams\"\n  let-accountStatementsError=\"context.accountStatementsError\"\n  let-accountIds=\"context.accountIds\"\n  let-loadingStates=\"context.loadingStates\"\n>\n  <div aria-live=\"polite\" data-role=\"account-statements-container\">\n    <ng-container *ngIf=\"!accountStatementsError; else accountStatementsErrorState\">\n      <ng-container [ngSwitch]=\"accountIds.length\">\n        <ng-container *ngSwitchCase=\"1\">\n          <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING; else loadingState\">\n            <ng-container\n              *ngIf=\"\n                accountStatements.length || accountStatementsFilterParams.dateFrom;\n                else accountStatementsEmptyState\n              \"\n            >\n              <bb-account-statement-business-filters></bb-account-statement-business-filters>\n              <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_FILTERED; else loadingState\">\n                <ng-container *ngIf=\"accountStatements.length; else accountStatementsFilteredEmptyState\">\n                  <bb-account-statement-business-statements-container></bb-account-statement-business-statements-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"0\">\n          <ng-container *ngTemplateOutlet=\"accountStatementsNoAccountsError\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <ng-container *ngTemplateOutlet=\"accountStatementsMultipleAccountsError\"></ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      data-role=\"account-statements-empty-state\"\n      title=\"No account statements found\"\n      i18n-title=\"No account statements found@@account-statement-business.statements.empty-state.title\"\n      subtitle=\"You don't have any account statements to be displayed for this account.\"\n      i18n-subtitle=\"\n        You don't have any account statements...@@account-statement-business.statements.empty-state.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsErrorState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      data-role=\"account-statements-error-state\"\n      title=\"Account statements are not loading\"\n      i18n-title=\"Account statements are not loading@@account-statement-business.statement-list.error-state.title\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Try to reload the page@@account-statement-business.statement-list.error-state.subtitle\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsFilteredEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      data-role=\"account-statements-filters-empty-state\"\n      i18n-title=\"Account statements filtered state title@@account-statement-business.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        Account statements filtered state subtitle@@account-statement-business.statements.filtered.state.subtitle\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsNoAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-no-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"current-accounts\"\n      iconClasses=\"text-muted\"\n      title=\"You did not select an account yet\"\n      i18n-title=\"\n        You did not select an account yet |Error title when no account is\n        selected@@account-statement-business.statements.error.no-account.title\"\n      subtitle=\"No statements to show. You need to select a bank account first.\"\n      i18n-subtitle=\"\n        No statements to show. You need to select a bank account first. |Error subtitle when when no account is\n        selected@@account-statement-business.statements.error.no-account.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsMultipleAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-multiple-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      title=\"You have selected multiple accounts\"\n      i18n-title=\"\n        You have selected multiple accounts |Error title when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.title\"\n      subtitle=\"Please select only one account to display the account information.\"\n      i18n-subtitle=\"\n        Please select only one account to display the account information |Error subtitle when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return AccountStatementBusinessFiltersComponent; }), selector: "bb-account-statement-business-filters" }, { type: i0__namespace.forwardRef(function () { return AccountStatementBusinessStatementsContainerComponent; }), selector: "bb-account-statement-business-statements-container" }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return AccountStatementBusinessWidgetCustomizableDirective; }), selector: "[bbAccountStatementBusinessWidgetCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i8__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-statement-business-widget',
                        templateUrl: './account-statement-business-widget.component.html',
                        providers: [i2.AccountStatementStoreModel, AccountStatementBusinessPropertiesService],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.ActivatedRoute }, { type: i2__namespace.AccountStatementStoreModel }, { type: AccountStatementBusinessPropertiesService }]; }, propDecorators: { accountId: [{
                    type: i0.Input
                }] } });
    var AccountStatementBusinessWidgetCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountStatementBusinessWidgetCustomizableDirective, _super);
        function AccountStatementBusinessWidgetCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountStatementBusinessWidgetCustomizableDirective;
    }(i1$1.BbTemplate));
    AccountStatementBusinessWidgetCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccountStatementBusinessWidgetCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessWidgetCustomizableDirective, selector: "[bbAccountStatementBusinessWidgetCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: '[bbAccountStatementBusinessWidgetCustomizable]' }]
            }] });

    var components = [
        AccountStatementBusinessWidgetComponent,
        AccountStatementBusinessTableComponent,
        AccountStatementViewOnlineBusinessWrapperComponent,
        AccountStatementBusinessStatementsContainerComponent,
        AccountStatementBusinessFiltersComponent,
    ];
    var directives = [
        AccountStatementBusinessTableCustomizableDirective,
        AccountStatementBusinessWidgetCustomizableDirective,
        AccountStatementBusinessStatementsContainerCustomizableDirective,
        AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,
        AccountStatementBusinessFiltersCustomizableDirective,
    ];
    var uiModules = [
        i6$1.TableModule,
        accountSelector.AccountSelectorModule,
        i4$1.LoadButtonModule,
        i7$1.EmptyStateModule,
        i5$1.LoadingIndicatorModule,
        i4.CollapsibleModule,
        i7.InputDatepickerModule,
        i8.InputValidationMessageModule,
        i5$2.PaginationModule,
        i6.DropdownSingleSelectModule,
        i8$2.BbDatePipeModule,
        i9.DropdownMultiSelectModule,
    ];
    var AccountStatementBusinessWidgetModule = /** @class */ (function () {
        function AccountStatementBusinessWidgetModule() {
        }
        return AccountStatementBusinessWidgetModule;
    }());
    AccountStatementBusinessWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AccountStatementBusinessWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetModule, declarations: [AccountStatementBusinessWidgetComponent,
            AccountStatementBusinessTableComponent,
            AccountStatementViewOnlineBusinessWrapperComponent,
            AccountStatementBusinessStatementsContainerComponent,
            AccountStatementBusinessFiltersComponent, AccountStatementBusinessTableCustomizableDirective,
            AccountStatementBusinessWidgetCustomizableDirective,
            AccountStatementBusinessStatementsContainerCustomizableDirective,
            AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,
            AccountStatementBusinessFiltersCustomizableDirective], imports: [i6$1.TableModule,
            accountSelector.AccountSelectorModule,
            i4$1.LoadButtonModule,
            i7$1.EmptyStateModule,
            i5$1.LoadingIndicatorModule,
            i4.CollapsibleModule,
            i7.InputDatepickerModule,
            i8.InputValidationMessageModule,
            i5$2.PaginationModule,
            i6.DropdownSingleSelectModule,
            i8$2.BbDatePipeModule,
            i9.DropdownMultiSelectModule, i8$1.CommonModule,
            i1$2.ReactiveFormsModule, i1__namespace.BackbaseCoreModule, i2.AccountStatementStoreModule,
            i1.AccountStatementCommonModule], exports: [i1.AccountStatementCommonModule, AccountStatementBusinessWidgetComponent,
            AccountStatementBusinessTableComponent,
            AccountStatementViewOnlineBusinessWrapperComponent,
            AccountStatementBusinessStatementsContainerComponent,
            AccountStatementBusinessFiltersComponent, AccountStatementBusinessTableCustomizableDirective,
            AccountStatementBusinessWidgetCustomizableDirective,
            AccountStatementBusinessStatementsContainerCustomizableDirective,
            AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,
            AccountStatementBusinessFiltersCustomizableDirective, i6$1.TableModule,
            accountSelector.AccountSelectorModule,
            i4$1.LoadButtonModule,
            i7$1.EmptyStateModule,
            i5$1.LoadingIndicatorModule,
            i4.CollapsibleModule,
            i7.InputDatepickerModule,
            i8.InputValidationMessageModule,
            i5$2.PaginationModule,
            i6.DropdownSingleSelectModule,
            i8$2.BbDatePipeModule,
            i9.DropdownMultiSelectModule] });
    AccountStatementBusinessWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetModule, imports: [__spreadArray(__spreadArray([], __read(uiModules)), [
                i8$1.CommonModule,
                i1$2.ReactiveFormsModule,
                i1$1.BackbaseCoreModule.withConfig({
                    // eslint-disable-next-line @typescript-eslint/naming-convention
                    classMap: { AccountStatementBusinessWidgetComponent: AccountStatementBusinessWidgetComponent },
                }),
                i2.AccountStatementStoreModule,
                i1.AccountStatementCommonModule,
            ]), i1.AccountStatementCommonModule, i6$1.TableModule,
            accountSelector.AccountSelectorModule,
            i4$1.LoadButtonModule,
            i7$1.EmptyStateModule,
            i5$1.LoadingIndicatorModule,
            i4.CollapsibleModule,
            i7.InputDatepickerModule,
            i8.InputValidationMessageModule,
            i5$2.PaginationModule,
            i6.DropdownSingleSelectModule,
            i8$2.BbDatePipeModule,
            i9.DropdownMultiSelectModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccountStatementBusinessWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        imports: __spreadArray(__spreadArray([], __read(uiModules)), [
                            i8$1.CommonModule,
                            i1$2.ReactiveFormsModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                // eslint-disable-next-line @typescript-eslint/naming-convention
                                classMap: { AccountStatementBusinessWidgetComponent: AccountStatementBusinessWidgetComponent },
                            }),
                            i2.AccountStatementStoreModule,
                            i1.AccountStatementCommonModule,
                        ]),
                        exports: __spreadArray(__spreadArray(__spreadArray([i1.AccountStatementCommonModule], __read(components)), __read(directives)), __read(uiModules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective = AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective;
    exports.AccountStatementBusinessFiltersComponent = AccountStatementBusinessFiltersComponent;
    exports.AccountStatementBusinessFiltersCustomizableDirective = AccountStatementBusinessFiltersCustomizableDirective;
    exports.AccountStatementBusinessPropertiesService = AccountStatementBusinessPropertiesService;
    exports.AccountStatementBusinessTableComponent = AccountStatementBusinessTableComponent;
    exports.AccountStatementBusinessTableCustomizableDirective = AccountStatementBusinessTableCustomizableDirective;
    exports.AccountStatementBusinessWidgetComponent = AccountStatementBusinessWidgetComponent;
    exports.AccountStatementBusinessWidgetModule = AccountStatementBusinessWidgetModule;
    exports["ӨAccountStatementBusinessStatementsContainerComponent"] = AccountStatementBusinessStatementsContainerComponent;
    exports["ӨAccountStatementBusinessStatementsContainerCustomizableDirective"] = AccountStatementBusinessStatementsContainerCustomizableDirective;
    exports["ӨAccountStatementBusinessWidgetCustomizableDirective"] = AccountStatementBusinessWidgetCustomizableDirective;
    exports["ӨAccountStatementViewOnlineBusinessWrapperComponent"] = AccountStatementViewOnlineBusinessWrapperComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-account-statement-business-widget-ang.umd.js.map
