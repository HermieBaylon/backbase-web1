import { Component, Directive, Input } from '@angular/core';
import { AccountStatementBaseWidgetComponent, DatePeriods, getDateFilterLimit, LoadingState, stringToWords, today, } from '@backbase/account-statement-common-ang';
import { AccountStatementStoreModel } from '@backbase/account-statement-store-ang';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { combineLatest, Subject, BehaviorSubject, merge } from 'rxjs';
import { filter, first, map, takeUntil } from 'rxjs/operators';
import { AccountStatementBusinessPropertiesService } from '../../services/account-statement-business-properties.service';
import { getAccountId, getRouteParam } from '../../helpers/utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@backbase/account-statement-store-ang";
import * as i3 from "../../services/account-statement-business-properties.service";
import * as i4 from "../account-statement-business-filters/account-statement-business-filters.component";
import * as i5 from "../account-statement-business-statements-container/account-statement-business-statements-container.component";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@backbase/ui-ang/empty-state";
import * as i8 from "@angular/common";
export class AccountStatementBusinessWidgetComponent extends AccountStatementBaseWidgetComponent {
    constructor(route, store, propertiesService) {
        super(propertiesService);
        this.route = route;
        this.store = store;
        this.accountId = '';
        this.accountStatements$ = this.store.accountStatements$;
        this.accountStatementsLoading$ = this.store.accountStatementsLoading$;
        this.accountStatementsError$ = this.store.accountStatementsError$;
        this.pageSize$ = this.propertiesService.pageSize$.pipe(first());
        this.accountStatementsFilterParams$ = this.store.accountStatementsFilterParams$;
        this.loadingStates = LoadingState;
        this.destroy$ = new Subject();
        this.accountId$ = new BehaviorSubject('');
        // In order to be able to transmit an account ids both using the route parameter and through the input
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.accountIds$ = merge(getRouteParam(this.route, 'selectedAccount'), this.accountId$.pipe(filter(accountId => !!accountId))).pipe(map(accountIds => stringToWords(accountIds, ',')));
    }
    ngOnChanges() {
        if (this.accountId) {
            this.accountId$.next(this.accountId);
        }
    }
    ngOnInit() {
        this.initializeMinimalDateFilterLimit.pipe(takeUntil(this.destroy$)).subscribe(minimalDate => {
            const widgetPreferences = { minimalDate, maximumDate: today() };
            this.store.dispatchUpdateWidgetPreferences({ widgetPreferences });
        });
        const sortingParams$ = combineLatest([
            this.propertiesService.sortingOrder$,
            this.propertiesService.sortingDirection$.pipe(map(direction => direction.toLowerCase())),
        ]).pipe(first(), map(([column, direction]) => ({
            column,
            direction,
        })));
        combineLatest([
            // fetch statements if exactly one account ID is provided
            this.accountIds$.pipe(filter(({ length }) => length === 1)),
            this.pageSize$,
            sortingParams$,
        ])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([accounts, size, sortingParams]) => {
            this.store.dispatchLoadAccountStatementsBusiness({
                accountIds: [getAccountId(accounts)],
                sortingParams,
                paginationParams: {
                    from: 0,
                    size,
                },
                // reset filters for date
                filterParams: {
                    datePeriod: DatePeriods.AllTime,
                },
            });
        });
        this.propertiesService.showCategory$
            .pipe(filter(Boolean), takeUntil(this.destroy$))
            .subscribe(_ => this.store.dispatchLoadCategories());
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    get initializeMinimalDateFilterLimit() {
        return combineLatest([this.propertiesService.absoluteDateLimit$, this.propertiesService.relativeDateLimit$]).pipe(map(([absoluteDateLimit, relativeMonthLimit]) => getDateFilterLimit(absoluteDateLimit, relativeMonthLimit)));
    }
}
AccountStatementBusinessWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.AccountStatementStoreModel }, { token: i3.AccountStatementBusinessPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementBusinessWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessWidgetComponent, selector: "bb-account-statement-business-widget", inputs: { accountId: "accountId" }, providers: [AccountStatementStoreModel, AccountStatementBusinessPropertiesService], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-container\n  bbAccountStatementBusinessWidgetCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    accountStatementsError: (accountStatementsError$ | async)!,\n    accountStatementsFilterParams: (accountStatementsFilterParams$ | async)!,\n    accountIds: (accountIds$ | async)!,\n    loadingStates: loadingStates\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessWidgetCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-accountStatementsFilterParams=\"context.accountStatementsFilterParams\"\n  let-accountStatementsError=\"context.accountStatementsError\"\n  let-accountIds=\"context.accountIds\"\n  let-loadingStates=\"context.loadingStates\"\n>\n  <div aria-live=\"polite\" data-role=\"account-statements-container\">\n    <ng-container *ngIf=\"!accountStatementsError; else accountStatementsErrorState\">\n      <ng-container [ngSwitch]=\"accountIds.length\">\n        <ng-container *ngSwitchCase=\"1\">\n          <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING; else loadingState\">\n            <ng-container\n              *ngIf=\"\n                accountStatements.length || accountStatementsFilterParams.dateFrom;\n                else accountStatementsEmptyState\n              \"\n            >\n              <bb-account-statement-business-filters></bb-account-statement-business-filters>\n              <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_FILTERED; else loadingState\">\n                <ng-container *ngIf=\"accountStatements.length; else accountStatementsFilteredEmptyState\">\n                  <bb-account-statement-business-statements-container></bb-account-statement-business-statements-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"0\">\n          <ng-container *ngTemplateOutlet=\"accountStatementsNoAccountsError\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <ng-container *ngTemplateOutlet=\"accountStatementsMultipleAccountsError\"></ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      data-role=\"account-statements-empty-state\"\n      title=\"No account statements found\"\n      i18n-title=\"No account statements found@@account-statement-business.statements.empty-state.title\"\n      subtitle=\"You don't have any account statements to be displayed for this account.\"\n      i18n-subtitle=\"\n        You don't have any account statements...@@account-statement-business.statements.empty-state.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsErrorState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      data-role=\"account-statements-error-state\"\n      title=\"Account statements are not loading\"\n      i18n-title=\"Account statements are not loading@@account-statement-business.statement-list.error-state.title\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Try to reload the page@@account-statement-business.statement-list.error-state.subtitle\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsFilteredEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      data-role=\"account-statements-filters-empty-state\"\n      i18n-title=\"Account statements filtered state title@@account-statement-business.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        Account statements filtered state subtitle@@account-statement-business.statements.filtered.state.subtitle\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsNoAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-no-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"current-accounts\"\n      iconClasses=\"text-muted\"\n      title=\"You did not select an account yet\"\n      i18n-title=\"\n        You did not select an account yet |Error title when no account is\n        selected@@account-statement-business.statements.error.no-account.title\"\n      subtitle=\"No statements to show. You need to select a bank account first.\"\n      i18n-subtitle=\"\n        No statements to show. You need to select a bank account first. |Error subtitle when when no account is\n        selected@@account-statement-business.statements.error.no-account.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsMultipleAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-multiple-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      title=\"You have selected multiple accounts\"\n      i18n-title=\"\n        You have selected multiple accounts |Error title when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.title\"\n      subtitle=\"Please select only one account to display the account information.\"\n      i18n-subtitle=\"\n        Please select only one account to display the account information |Error subtitle when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.AccountStatementBusinessFiltersComponent; }), selector: "bb-account-statement-business-filters" }, { type: i0.forwardRef(function () { return i5.AccountStatementBusinessStatementsContainerComponent; }), selector: "bb-account-statement-business-statements-container" }, { type: i0.forwardRef(function () { return i6.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i7.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementBusinessWidgetCustomizableDirective; }), selector: "[bbAccountStatementBusinessWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i8.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i8.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i8.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-business-widget',
                    templateUrl: './account-statement-business-widget.component.html',
                    providers: [AccountStatementStoreModel, AccountStatementBusinessPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.AccountStatementStoreModel }, { type: i3.AccountStatementBusinessPropertiesService }]; }, propDecorators: { accountId: [{
                type: Input
            }] } });
export class AccountStatementBusinessWidgetCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessWidgetCustomizableDirective, selector: "[bbAccountStatementBusinessWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementBusinessWidgetCustomizable]' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Mtd2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Mtd2lkZ2V0LWFuZy9zcmMvY29tcG9uZW50cy9hY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy13aWRnZXQvYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Mtd2lkZ2V0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Mtd2lkZ2V0LWFuZy9zcmMvY29tcG9uZW50cy9hY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy13aWRnZXQvYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Mtd2lkZ2V0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBZ0MsTUFBTSxlQUFlLENBQUM7QUFHMUYsT0FBTyxFQUNMLG1DQUFtQyxFQUNuQyxXQUFXLEVBQ1gsa0JBQWtCLEVBQ2xCLFlBQVksRUFDWixhQUFhLEVBQ2IsS0FBSyxHQUNOLE1BQU0sd0NBQXdDLENBQUM7QUFDaEQsT0FBTyxFQUFpQywwQkFBMEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBRWxILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFjLE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUseUNBQXlDLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUN6SCxPQUFPLEVBQUUs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Q0FBQyxDQUM1RyxDQUFDO0lBQ0osQ0FBQzs7cUlBMUZVLHVDQUF1Qzt5SEFBdkMsdUNBQXVDLG1HQUZ2QyxDQUFDLDBCQUEwQixFQUFFLHlDQUF5QyxDQUFDLHNFQ3ZCcEYsaW1NQXVJQSwwd0JEaEJhLG1EQUFtRDs0RkE5Rm5ELHVDQUF1QztrQkFMbkQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0NBQXNDO29CQUNoRCxXQUFXLEVBQUUsb0RBQW9EO29CQUNqRSxTQUFTLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSx5Q0FBeUMsQ0FBQztpQkFDbkY7c01BS1UsU0FBUztzQkFBakIsS0FBSzs7QUEwRlIsTUFBTSxPQUFPLG1EQUFvRCxTQUFRLFVBVXhFOztpSkFWWSxtREFBbUQ7cUlBQW5ELG1EQUFtRDs0RkFBbkQsbURBQW1EO2tCQUQvRCxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLGdEQUFnRCxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7XG4gIEFjY291bnRTdGF0ZW1lbnRCYXNlV2lkZ2V0Q29tcG9uZW50LFxuICBEYXRlUGVyaW9kcyxcbiAgZ2V0RGF0ZUZpbHRlckxpbWl0LFxuICBMb2FkaW5nU3RhdGUsXG4gIHN0cmluZ1RvV29yZHMsXG4gIHRvZGF5LFxufSBmcm9tICdAYmFja2Jhc2UvYWNjb3VudC1zdGF0ZW1lbnQtY29tbW9uLWFuZyc7XG5pbXBvcnQgeyBBY2NvdW50U3RhdGVtZW50c0ZpbHRlclBhcmFtcywgQWNjb3VudFN0YXRlbWVudFN0b3JlTW9kZWwgfSBmcm9tICdAYmFja2Jhc2UvYWNjb3VudC1zdGF0ZW1lbnQtc3RvcmUtYW5nJztcbmltcG9ydCB7IEFjY291bnRTdGF0ZW1lbnQgfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYWNjb3VudC1zdGF0ZW1lbnRzJztcbmltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIGZpcnN0LCBtYXAsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFjY291bnRTdGF0ZW1lbnRCdXNpbmVzc1Byb3BlcnRpZXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3MtcHJvcGVydGllcy5zZXJ2aWNlJztcbmltcG9ydCB7IGdldEFjY291bnRJZCwgZ2V0Um91dGVQYXJhbSB9IGZyb20gJy4uLy4uL2hlbHBlcnMvdXRpbHMnO1xuaW1wb3J0IHsgU29ydERpcmVjdGlvbiB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvdGFibGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1hY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy13aWRnZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Mtd2lkZ2V0LmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbQWNjb3VudFN0YXRlbWVudFN0b3JlTW9kZWwsIEFjY291bnRTdGF0ZW1lbnRCdXNpbmVzc1Byb3BlcnRpZXNTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3VudFN0YXRlbWVudEJ1c2luZXNzV2lkZ2V0Q29tcG9uZW50XG4gIGV4dGVuZHMgQWNjb3VudFN0YXRlbWVudEJhc2VXaWRnZXRDb21wb25lbnQ8QWNjb3VudFN0YXRlbWVudEJ1c2luZXNzUHJvcGVydGllc1NlcnZpY2U+XG4gIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlc1xue1xuICBASW5wdXQoKSBhY2NvdW50SWQgPSAnJztcbiAgcmVhZG9ubHkgYWNjb3VudFN0YXRlbWVudHMkOiBPYnNlcnZhYmxlPEFjY291bnRTdGF0ZW1lbnRbXT4gPSB0aGlzLnN0b3JlLmFjY291bnRTdGF0ZW1lbnRzJDtcbiAgcmVhZG9ubHkgYWNjb3VudFN0YXRlbWVudHNMb2FkaW5nJDogT2JzZXJ2YWJsZTxMb2FkaW5nU3RhdGU+ID0gdGhpcy5zdG9yZS5hY2NvdW50U3RhdGVtZW50c0xvYWRpbmckO1xuICByZWFkb25seSBhY2NvdW50U3RhdGVtZW50c0Vycm9yJDogT2JzZXJ2YWJsZTxFcnJvciB8IHVuZGVmaW5lZD4gPSB0aGlzLnN0b3JlLmFjY291bnRTdGF0ZW1lbnRzRXJyb3IkO1xuICByZWFkb25seSBwYWdlU2l6ZSQ6IE9ic2VydmFibGU8bnVtYmVyPiA9IHRoaXMucHJvcGVydGllc1NlcnZpY2UucGFnZVNpemUkLnBpcGUoZmlyc3QoKSk7XG4gIHJlYWRvbmx5IGFjY291bnRTdGF0ZW1lbnRzRmlsdGVyUGFyYW1zJDogT2JzZXJ2YWJsZTxBY2NvdW50U3RhdGVtZW50c0ZpbHRlclBhcmFtcz4gPVxuICAgIHRoaXMuc3RvcmUuYWNjb3VudFN0YXRlbWVudHNGaWx0ZXJQYXJhbXMkO1xuICByZWFkb25seSBsb2FkaW5nU3RhdGVzID0gTG9hZGluZ1N0YXRlO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIGFjY291bnRJZCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4oJycpO1xuXG4gIC8vIEluIG9yZGVyIHRvIGJlIGFibGUgdG8gdHJhbnNtaXQgYW4gYWNjb3VudCBpZHMgYm90aCB1c2luZyB0aGUgcm91dGUgcGFyYW1ldGVyIGFuZCB0aHJvdWdoIHRoZSBpbnB1dFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L21lbWJlci1vcmRlcmluZ1xuICByZWFkb25seSBhY2NvdW50SWRzJDogT2JzZXJ2YWJsZTxzdHJpbmdbXT4gPSBtZXJnZShcbiAgICBnZXRSb3V0ZVBhcmFtKHRoaXMucm91dGUsICdzZWxlY3RlZEFjY291bnQnKSxcbiAgICB0aGlzLmFjY291bnRJZCQucGlwZShmaWx0ZXIoYWNjb3VudElkID0+ICEhYWNjb3VudElkKSksXG4gICkucGlwZShtYXAoYWNjb3VudElkcyA9PiBzdHJpbmdUb1dvcmRzKGFjY291bnRJZHMsICcsJykpKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0b3JlOiBBY2NvdW50U3RhdGVtZW50U3RvcmVNb2RlbCxcbiAgICBwcm9wZXJ0aWVzU2VydmljZTogQWNjb3VudFN0YXRlbWVudEJ1c2luZXNzUHJvcGVydGllc1NlcnZpY2UsXG4gICkge1xuICAgIHN1cGVyKHByb3BlcnRpZXNTZXJ2aWNlKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmFjY291bnRJZCkge1xuICAgICAgdGhpcy5hY2NvdW50SWQkLm5leHQodGhpcy5hY2NvdW50SWQpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZU1pbmltYWxEYXRlRmlsdGVyTGltaXQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZShtaW5pbWFsRGF0ZSA9PiB7XG4gICAgICBjb25zdCB3aWRnZXRQcmVmZXJlbmNlcyA9IHsgbWluaW1hbERhdGUsIG1heGltdW1EYXRlOiB0b2RheSgpIH07XG4gICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoVXBkYXRlV2lkZ2V0UHJlZmVyZW5jZXMoeyB3aWRnZXRQcmVmZXJlbmNlcyB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHNvcnRpbmdQYXJhbXMkID0gY29tYmluZUxhdGVzdChbXG4gICAgICB0aGlzLnByb3BlcnRpZXNTZXJ2aWNlLnNvcnRpbmdPcmRlciQsXG4gICAgICB0aGlzLnByb3BlcnRpZXNTZXJ2aWNlLnNvcnRpbmdEaXJlY3Rpb24kLnBpcGUobWFwKGRpcmVjdGlvbiA9PiBkaXJlY3Rpb24udG9Mb3dlckNhc2UoKSBhcyBTb3J0RGlyZWN0aW9uKSksXG4gICAgXSkucGlwZShcbiAgICAgIGZpcnN0KCksXG4gICAgICBtYXAoKFtjb2x1bW4sIGRpcmVjdGlvbl0pID0+ICh7XG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgfSkpLFxuICAgICk7XG5cbiAgICBjb21iaW5lTGF0ZXN0KFtcbiAgICAgIC8vIGZldGNoIHN0YXRlbWVudHMgaWYgZXhhY3RseSBvbmUgYWNjb3VudCBJRCBpcyBwcm92aWRlZFxuICAgICAgdGhpcy5hY2NvdW50SWRzJC5waXBlKGZpbHRlcigoeyBsZW5ndGggfSkgPT4gbGVuZ3RoID09PSAxKSksXG4gICAgICB0aGlzLnBhZ2VTaXplJCxcbiAgICAgIHNvcnRpbmdQYXJhbXMkLFxuICAgIF0pXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpXG4gICAgICAuc3Vic2NyaWJlKChbYWNjb3VudHMsIHNpemUsIHNvcnRpbmdQYXJhbXNdKSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2hMb2FkQWNjb3VudFN0YXRlbWVudHNCdXNpbmVzcyh7XG4gICAgICAgICAgYWNjb3VudElkczogW2dldEFjY291bnRJZChhY2NvdW50cyldLFxuICAgICAgICAgIHNvcnRpbmdQYXJhbXMsXG4gICAgICAgICAgcGFnaW5hdGlvblBhcmFtczoge1xuICAgICAgICAgICAgZnJvbTogMCxcbiAgICAgICAgICAgIHNpemUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyByZXNldCBmaWx0ZXJzIGZvciBkYXRlXG4gICAgICAgICAgZmlsdGVyUGFyYW1zOiB7XG4gICAgICAgICAgICBkYXRlUGVyaW9kOiBEYXRlUGVyaW9kcy5BbGxUaW1lLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLnByb3BlcnRpZXNTZXJ2aWNlLnNob3dDYXRlZ29yeSRcbiAgICAgIC5waXBlKGZpbHRlcihCb29sZWFuKSwgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgLnN1YnNjcmliZShfID0+IHRoaXMuc3RvcmUuZGlzcGF0Y2hMb2FkQ2F0ZWdvcmllcygpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IGluaXRpYWxpemVNaW5pbWFsRGF0ZUZpbHRlckxpbWl0KCk6IE9ic2VydmFibGU8RGF0ZT4ge1xuICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFt0aGlzLnByb3BlcnRpZXNTZXJ2aWNlLmFic29sdXRlRGF0ZUxpbWl0JCwgdGhpcy5wcm9wZXJ0aWVzU2VydmljZS5yZWxhdGl2ZURhdGVMaW1pdCRdKS5waXBlKFxuICAgICAgbWFwKChbYWJzb2x1dGVEYXRlTGltaXQsIHJlbGF0aXZlTW9udGhMaW1pdF0pID0+IGdldERhdGVGaWx0ZXJMaW1pdChhYnNvbHV0ZURhdGVMaW1pdCwgcmVsYXRpdmVNb250aExpbWl0KSksXG4gICAgKTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbYmJBY2NvdW50U3RhdGVtZW50QnVzaW5lc3NXaWRnZXRDdXN0b21pemFibGVdJyB9KVxuZXhwb3J0IGNsYXNzIEFjY291bnRTdGF0ZW1lbnRCdXNpbmVzc1dpZGdldEN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIEFjY291bnRTdGF0ZW1lbnRCdXNpbmVzc1dpZGdldENvbXBvbmVudCxcbiAge1xuICAgIGFjY291bnRTdGF0ZW1lbnRzOiBBY2NvdW50U3RhdGVtZW50W107XG4gICAgYWNjb3VudFN0YXRlbWVudHNMb2FkaW5nOiBMb2FkaW5nU3RhdGU7XG4gICAgYWNjb3VudFN0YXRlbWVudHNFcnJvcj86IEVycm9yO1xuICAgIGFjY291bnRTdGF0ZW1lbnRzRmlsdGVyUGFyYW1zPzogQWNjb3VudFN0YXRlbWVudHNGaWx0ZXJQYXJhbXM7XG4gICAgbG9hZGluZ1N0YXRlczogdHlwZW9mIExvYWRpbmdTdGF0ZTtcbiAgICBhY2NvdW50SWRzOiBzdHJpbmdbXTtcbiAgfVxuPiB7fVxuIiwiPG5nLWNvbnRhaW5lclxuICBiYkFjY291bnRTdGF0ZW1lbnRCdXNpbmVzc1dpZGdldEN1c3RvbWl6YWJsZVxuICBbYmJIb3N0UmVmXT1cInRoaXNcIlxuICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgIGFjY291bnRTdGF0ZW1lbnRzOiAoYWNjb3VudFN0YXRlbWVudHMkIHwgYXN5bmMpISxcbiAgICBhY2NvdW50U3RhdGVtZW50c0xvYWRpbmc6IChhY2NvdW50U3RhdGVtZW50c0xvYWRpbmckIHwgYXN5bmMpISxcbiAgICBhY2NvdW50U3RhdGVtZW50c0Vycm9yOiAoYWNjb3VudFN0YXRlbWVudHNFcnJvciQgfCBhc3luYykhLFxuICAgIGFjY291bnRTdGF0ZW1lbnRzRmlsdGVyUGFyYW1zOiAoYWNjb3VudFN0YXRlbWVudHNGaWx0ZXJQYXJhbXMkIHwgYXN5bmMpISxcbiAgICBhY2NvdW50SWRzOiAoYWNjb3VudElkcyQgfCBhc3luYykhLFxuICAgIGxvYWRpbmdTdGF0ZXM6IGxvYWRpbmdTdGF0ZXNcbiAgfVwiXG4+PC9uZy1jb250YWluZXI+XG5cbjxuZy10ZW1wbGF0ZVxuICBiYkFjY291bnRTdGF0ZW1lbnRCdXNpbmVzc1dpZGdldEN1c3RvbWl6YWJsZVxuICBsZXQtaG9zdFJlZlxuICBsZXQtYWNjb3VudFN0YXRlbWVudHM9XCJjb250ZXh0LmFjY291bnRTdGF0ZW1lbnRzXCJcbiAgbGV0LWFjY291bnRTdGF0ZW1lbnRzTG9hZGluZz1cImNvbnRleHQuYWNjb3VudFN0YXRlbWVudHNMb2FkaW5nXCJcbiAgbGV0LWFjY291bnRTdGF0ZW1lbnRzRmlsdGVyUGFyYW1zPVwiY29udGV4dC5hY2NvdW50U3RhdGVtZW50c0ZpbHRlclBhcmFtc1wiXG4gIGxldC1hY2NvdW50U3RhdGVtZW50c0Vycm9yPVwiY29udGV4dC5hY2NvdW50U3RhdGVtZW50c0Vycm9yXCJcbiAgbGV0LWFjY291bnRJZHM9XCJjb250ZXh0LmFjY291bnRJZHNcIlxuICBsZXQtbG9hZGluZ1N0YXRlcz1cImNvbnRleHQubG9hZGluZ1N0YXRlc1wiXG4+XG4gIDxkaXYgYXJpYS1saXZlPVwicG9saXRlXCIgZGF0YS1yb2xlPVwiYWNjb3VudC1zdGF0ZW1lbnRzLWNvbnRhaW5lclwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhYWNjb3VudFN0YXRlbWVudHNFcnJvcjsgZWxzZSBhY2NvdW50U3RhdGVtZW50c0Vycm9yU3RhdGVcIj5cbiAgICAgIDxuZy1jb250YWluZXIgW25nU3dpdGNoXT1cImFjY291bnRJZHMubGVuZ3RoXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cIjFcIj5cbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiYWNjb3VudFN0YXRlbWVudHNMb2FkaW5nICE9PSBsb2FkaW5nU3RhdGVzLkxPQURJTkc7IGVsc2UgbG9hZGluZ1N0YXRlXCI+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgYWNjb3VudFN0YXRlbWVudHMubGVuZ3RoIHx8IGFjY291bnRTdGF0ZW1lbnRzRmlsdGVyUGFyYW1zLmRhdGVGcm9tO1xuICAgICAgICAgICAgICAgIGVsc2UgYWNjb3VudFN0YXRlbWVudHNFbXB0eVN0YXRlXG4gICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxiYi1hY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy1maWx0ZXJzPjwvYmItYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3MtZmlsdGVycz5cbiAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImFjY291bnRTdGF0ZW1lbnRzTG9hZGluZyAhPT0gbG9hZGluZ1N0YXRlcy5MT0FESU5HX0ZJTFRFUkVEOyBlbHNlIGxvYWRpbmdTdGF0ZVwiPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJhY2NvdW50U3RhdGVtZW50cy5sZW5ndGg7IGVsc2UgYWNjb3VudFN0YXRlbWVudHNGaWx0ZXJlZEVtcHR5U3RhdGVcIj5cbiAgICAgICAgICAgICAgICAgIDxiYi1hY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy1zdGF0ZW1lbnRzLWNvbnRhaW5lcj48L2JiLWFjY291bnQtc3RhdGVtZW50LWJ1c2luZXNzLXN0YXRlbWVudHMtY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaENhc2U9XCIwXCI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cImFjY291bnRTdGF0ZW1lbnRzTm9BY2NvdW50c0Vycm9yXCI+PC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoRGVmYXVsdD5cbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiYWNjb3VudFN0YXRlbWVudHNNdWx0aXBsZUFjY291bnRzRXJyb3JcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9kaXY+XG5cbiAgPG5nLXRlbXBsYXRlICNsb2FkaW5nU3RhdGU+XG4gICAgPGJiLWxvYWRpbmctaW5kaWNhdG9yLXVpIGxvYWRlclNpemU9XCJsZ1wiPjwvYmItbG9hZGluZy1pbmRpY2F0b3ItdWk+XG4gIDwvbmctdGVtcGxhdGU+XG5cbiAgPG5nLXRlbXBsYXRlICNhY2NvdW50U3RhdGVtZW50c0VtcHR5U3RhdGU+XG4gICAgPGJiLWVtcHR5LXN0YXRlLXVpXG4gICAgICBjbGFzcz1cImJiLXN0YXRlLWNvbnRhaW5lclwiXG4gICAgICBpY29uU2l6ZT1cInh4bFwiXG4gICAgICBpY29uTW9kaWZpZXI9XCJkZXNjcmlwdGlvblwiXG4gICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LXN0YXRlbWVudHMtZW1wdHktc3RhdGVcIlxuICAgICAgdGl0bGU9XCJObyBhY2NvdW50IHN0YXRlbWVudHMgZm91bmRcIlxuICAgICAgaTE4bi10aXRsZT1cIk5vIGFjY291bnQgc3RhdGVtZW50cyBmb3VuZEBAYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Muc3RhdGVtZW50cy5lbXB0eS1zdGF0ZS50aXRsZVwiXG4gICAgICBzdWJ0aXRsZT1cIllvdSBkb24ndCBoYXZlIGFueSBhY2NvdW50IHN0YXRlbWVudHMgdG8gYmUgZGlzcGxheWVkIGZvciB0aGlzIGFjY291bnQuXCJcbiAgICAgIGkxOG4tc3VidGl0bGU9XCJcbiAgICAgICAgWW91IGRvbid0IGhhdmUgYW55IGFjY291bnQgc3RhdGVtZW50cy4uLkBAYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Muc3RhdGVtZW50cy5lbXB0eS1zdGF0ZS5zdWJ0aXRsZVwiXG4gICAgPjwvYmItZW1wdHktc3RhdGUtdWk+XG4gIDwvbmctdGVtcGxhdGU+XG5cbiAgPG5nLXRlbXBsYXRlICNhY2NvdW50U3RhdGVtZW50c0Vycm9yU3RhdGU+XG4gICAgPGJiLWVtcHR5LXN0YXRlLXVpXG4gICAgICBjbGFzcz1cImJiLXN0YXRlLWNvbnRhaW5lclwiXG4gICAgICBpY29uU2l6ZT1cInh4bFwiXG4gICAgICBpY29uTW9kaWZpZXI9XCJlcnJvclwiXG4gICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LXN0YXRlbWVudHMtZXJyb3Itc3RhdGVcIlxuICAgICAgdGl0bGU9XCJBY2NvdW50IHN0YXRlbWVudHMgYXJlIG5vdCBsb2FkaW5nXCJcbiAgICAgIGkxOG4tdGl0bGU9XCJBY2NvdW50IHN0YXRlbWVudHMgYXJlIG5vdCBsb2FkaW5nQEBhY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy5zdGF0ZW1lbnQtbGlzdC5lcnJvci1zdGF0ZS50aXRsZVwiXG4gICAgICBzdWJ0aXRsZT1cIlRyeSB0byByZWxvYWQgdGhlIHBhZ2Ugb3IgY29udGFjdCB0aGUgc3lzdGVtIGFkbWluaXN0cmF0b3IuXCJcbiAgICAgIGkxOG4tc3VidGl0bGU9XCJUcnkgdG8gcmVsb2FkIHRoZSBwYWdlQEBhY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy5zdGF0ZW1lbnQtbGlzdC5lcnJvci1zdGF0ZS5zdWJ0aXRsZVwiXG4gICAgPlxuICAgIDwvYmItZW1wdHktc3RhdGUtdWk+XG4gIDwvbmctdGVtcGxhdGU+XG5cbiAgPG5nLXRlbXBsYXRlICNhY2NvdW50U3RhdGVtZW50c0ZpbHRlcmVkRW1wdHlTdGF0ZT5cbiAgICA8YmItZW1wdHktc3RhdGUtdWlcbiAgICAgIGNsYXNzPVwiYmItc3RhdGUtY29udGFpbmVyXCJcbiAgICAgIGljb25TaXplPVwieHhsXCJcbiAgICAgIGljb25Nb2RpZmllcj1cInNlYXJjaFwiXG4gICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LXN0YXRlbWVudHMtZmlsdGVycy1lbXB0eS1zdGF0ZVwiXG4gICAgICBpMThuLXRpdGxlPVwiQWNjb3VudCBzdGF0ZW1lbnRzIGZpbHRlcmVkIHN0YXRlIHRpdGxlQEBhY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy5zdGF0ZW1lbnRzLmZpbHRlcmVkLnN0YXRlLnRpdGxlXCJcbiAgICAgIHRpdGxlPVwiTm8gUmVzdWx0cyBGb3VuZFwiXG4gICAgICBpMThuLXN1YnRpdGxlPVwiXG4gICAgICAgIEFjY291bnQgc3RhdGVtZW50cyBmaWx0ZXJlZCBzdGF0ZSBzdWJ0aXRsZUBAYWNjb3VudC1zdGF0ZW1lbnQtYnVzaW5lc3Muc3RhdGVtZW50cy5maWx0ZXJlZC5zdGF0ZS5zdWJ0aXRsZVwiXG4gICAgICBzdWJ0aXRsZT1cIldlIGNhbuKAmXQgZmluZCB3aGF0IHlvdeKAmXJlIGxvb2tpbmcgZm9yLiBQbGVhc2UgdHJ5IGEgZGlmZmVyZW50IGNyaXRlcmlhLlwiXG4gICAgPjwvYmItZW1wdHktc3RhdGUtdWk+XG4gIDwvbmctdGVtcGxhdGU+XG5cbiAgPG5nLXRlbXBsYXRlICNhY2NvdW50U3RhdGVtZW50c05vQWNjb3VudHNFcnJvcj5cbiAgICA8YmItZW1wdHktc3RhdGUtdWlcbiAgICAgIGRhdGEtcm9sZT1cImFjY291bnQtc3RhdGVtZW50cy1lcnJvci1uby1hY2NvdW50c1wiXG4gICAgICBpY29uU2l6ZT1cInh4bFwiXG4gICAgICBpY29uTW9kaWZpZXI9XCJjdXJyZW50LWFjY291bnRzXCJcbiAgICAgIGljb25DbGFzc2VzPVwidGV4dC1tdXRlZFwiXG4gICAgICB0aXRsZT1cIllvdSBkaWQgbm90IHNlbGVjdCBhbiBhY2NvdW50IHlldFwiXG4gICAgICBpMThuLXRpdGxlPVwiXG4gICAgICAgIFlvdSBkaWQgbm90IHNlbGVjdCBhbiBhY2NvdW50IHlldCB8RXJyb3IgdGl0bGUgd2hlbiBubyBhY2NvdW50IGlzXG4gICAgICAgIHNlbGVjdGVkQEBhY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy5zdGF0ZW1lbnRzLmVycm9yLm5vLWFjY291bnQudGl0bGVcIlxuICAgICAgc3VidGl0bGU9XCJObyBzdGF0ZW1lbnRzIHRvIHNob3cuIFlvdSBuZWVkIHRvIHNlbGVjdCBhIGJhbmsgYWNjb3VudCBmaXJzdC5cIlxuICAgICAgaTE4bi1zdWJ0aXRsZT1cIlxuICAgICAgICBObyBzdGF0ZW1lbnRzIHRvIHNob3cuIFlvdSBuZWVkIHRvIHNlbGVjdCBhIGJhbmsgYWNjb3VudCBmaXJzdC4gfEVycm9yIHN1YnRpdGxlIHdoZW4gd2hlbiBubyBhY2NvdW50IGlzXG4gICAgICAgIHNlbGVjdGVkQEBhY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy5zdGF0ZW1lbnRzLmVycm9yLm5vLWFjY291bnQuc3VidGl0bGVcIlxuICAgID48L2JiLWVtcHR5LXN0YXRlLXVpPlxuICA8L25nLXRlbXBsYXRlPlxuXG4gIDxuZy10ZW1wbGF0ZSAjYWNjb3VudFN0YXRlbWVudHNNdWx0aXBsZUFjY291bnRzRXJyb3I+XG4gICAgPGJiLWVtcHR5LXN0YXRlLXVpXG4gICAgICBkYXRhLXJvbGU9XCJhY2NvdW50LXN0YXRlbWVudHMtZXJyb3ItbXVsdGlwbGUtYWNjb3VudHNcIlxuICAgICAgaWNvblNpemU9XCJ4eGxcIlxuICAgICAgaWNvbk1vZGlmaWVyPVwiZXJyb3Itb3V0bGluZVwiXG4gICAgICBpY29uQ2xhc3Nlcz1cInRleHQtbXV0ZWRcIlxuICAgICAgdGl0bGU9XCJZb3UgaGF2ZSBzZWxlY3RlZCBtdWx0aXBsZSBhY2NvdW50c1wiXG4gICAgICBpMThuLXRpdGxlPVwiXG4gICAgICAgIFlvdSBoYXZlIHNlbGVjdGVkIG11bHRpcGxlIGFjY291bnRzIHxFcnJvciB0aXRsZSB3aGVuIGdldHRpbmcgbXVsdGlwbGVcbiAgICAgICAgYWNjb3VudHNAQGFjY291bnQtc3RhdGVtZW50LWJ1c2luZXNzLnN0YXRlbWVudHMuZXJyb3IubXVsdGlwbGUtYWNjb3VudHMudGl0bGVcIlxuICAgICAgc3VidGl0bGU9XCJQbGVhc2Ugc2VsZWN0IG9ubHkgb25lIGFjY291bnQgdG8gZGlzcGxheSB0aGUgYWNjb3VudCBpbmZvcm1hdGlvbi5cIlxuICAgICAgaTE4bi1zdWJ0aXRsZT1cIlxuICAgICAgICBQbGVhc2Ugc2VsZWN0IG9ubHkgb25lIGFjY291bnQgdG8gZGlzcGxheSB0aGUgYWNjb3VudCBpbmZvcm1hdGlvbiB8RXJyb3Igc3VidGl0bGUgd2hlbiBnZXR0aW5nIG11bHRpcGxlXG4gICAgICAgIGFjY291bnRzQEBhY2NvdW50LXN0YXRlbWVudC1idXNpbmVzcy5zdGF0ZW1lbnRzLmVycm9yLm11bHRpcGxlLWFjY291bnRzLnN1YnRpdGxlXCJcbiAgICA+PC9iYi1lbXB0eS1zdGF0ZS11aT5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvbmctdGVtcGxhdGU+XG4iXX0=