import { Component, Directive, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { filter, first, map, withLatestFrom } from 'rxjs/operators';
import { convertDateObjToDateStruct, CUSTOM_FILTER_PERIODS_VALUES, DatePeriods, } from '@backbase/account-statement-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/account-statement-store-ang";
import * as i3 from "../../services/account-statement-business-properties.service";
import * as i4 from "@backbase/ui-ang/collapsible";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@backbase/ui-ang/dropdown-single-select";
import * as i7 from "@backbase/ui-ang/input-datepicker";
import * as i8 from "@backbase/ui-ang/input-validation-message";
import * as i9 from "@backbase/ui-ang/dropdown-multi-select";
import * as i10 from "@backbase/ui-ang/button";
import * as i11 from "@angular/common";
export class AccountStatementBusinessFiltersComponent {
    constructor(fb, store, propertiesService) {
        this.fb = fb;
        this.store = store;
        this.propertiesService = propertiesService;
        this.filterDatePeriods = DatePeriods;
        this.areFiltersApplied$ = this.store.accountStatementsFilterParams$.pipe(map(filters => {
            const isDateRangeApplied = !!(filters.dateFrom && filters.dateTo);
            const isCategoryApplied = !!(filters.category && filters.category.length > 0);
            return isDateRangeApplied || isCategoryApplied;
        }));
        this.datePreferences$ = this.initializeDatePreferences;
        this.datePeriodsToDisplay$ = this.initializeFilterDatePeriods;
        this.categories$ = this.store.categories$;
        this.showCategory$ = this.propertiesService.showCategory$;
    }
    ngOnInit() {
        this.store.accountStatementsFilterParams$.pipe(first()).subscribe(params => {
            const { dateFrom: from, dateTo: to, category } = params;
            this.filterForm = this.fb.group({
                bookDate: from && to ? { from, to } : '',
                customFilterPeriods: params.datePeriod,
                categories: [category || []],
            });
        });
    }
    resetForm() {
        this.areFiltersApplied$
            .pipe(first(), filter(Boolean), withLatestFrom(this.propertiesService.pageSize$))
            .subscribe(([, size]) => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: 0,
                },
                filterParams: {
                    dateFrom: undefined,
                    dateTo: undefined,
                    datePeriod: DatePeriods.AllTime,
                    category: undefined,
                },
            });
        });
        this.filterForm.reset({ customFilterPeriods: this.filterDatePeriods.AllTime });
        this.focusFilterButton();
    }
    focusFilterButton() {
        if (this.filterButton) {
            this.filterButton.nativeElement.focus();
        }
    }
    onSubmit() {
        const customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');
        const bookDateFormField = this.filterForm.controls.bookDate;
        if (customFilterPeriodsFormField && bookDateFormField.touched) {
            customFilterPeriodsFormField.reset();
        }
        this.applyFormData();
        this.focusFilterButton();
    }
    setCustomFilter() {
        const customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');
        const bookDateFormField = this.filterForm.get('bookDate');
        const selectedPeriod = customFilterPeriodsFormField && customFilterPeriodsFormField.value;
        const selectedPeriodDates = CUSTOM_FILTER_PERIODS_VALUES[selectedPeriod]();
        const from = selectedPeriodDates.from && selectedPeriodDates.from.toISOString();
        const to = selectedPeriodDates.to && selectedPeriodDates.to.toISOString();
        if (bookDateFormField) {
            const bookDateValue = from && to ? { from, to } : '';
            bookDateFormField.setValue(bookDateValue);
        }
        this.applyFormData();
    }
    applyFormData() {
        const bookDateControl = this.filterForm.get('bookDate');
        const selectedPeriodControl = this.filterForm.get('customFilterPeriods');
        const categoriesControl = this.filterForm.get('categories');
        const selectedPeriodControlValue = selectedPeriodControl && selectedPeriodControl.value;
        const categoriesValue = categoriesControl && categoriesControl.value;
        const { from: dateFrom, to: dateTo } = (bookDateControl && bookDateControl.value) || {};
        this.propertiesService.pageSize$.pipe(first()).subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: 0,
                },
                filterParams: {
                    dateFrom,
                    dateTo: dateTo || dateFrom,
                    datePeriod: selectedPeriodControlValue || undefined,
                    category: categoriesValue || undefined,
                },
            });
        });
        this.filterForm.markAsPristine();
    }
    get initializeDatePreferences() {
        return this.store.accountStatementsWidgetPreferences$.pipe(map(preferences => ({
            minimalDate: convertDateObjToDateStruct(preferences.minimalDate),
            maximumDate: convertDateObjToDateStruct(preferences.maximumDate),
        })));
    }
    get initializeFilterDatePeriods() {
        return this.store.accountStatementsWidgetPreferences$.pipe(map(preferences => {
            const datePeriodValues = Object.values(DatePeriods);
            return datePeriodValues.filter((value) => {
                const periodValue = CUSTOM_FILTER_PERIODS_VALUES[value]();
                return periodValue.from >= preferences.minimalDate;
            });
        }));
    }
}
AccountStatementBusinessFiltersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersComponent, deps: [{ token: i1.FormBuilder }, { token: i2.AccountStatementStoreModel }, { token: i3.AccountStatementBusinessPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementBusinessFiltersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessFiltersComponent, selector: "bb-account-statement-business-filters", viewQueries: [{ propertyName: "filterButton", first: true, predicate: ["filterButton"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbAccountStatementBusinessFiltersCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    areFiltersApplied: (areFiltersApplied$ | async)!,\n    datePreferences: (datePreferences$ | async)!,\n    datePeriodsToDisplay: (datePeriodsToDisplay$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    categories: (categories$ | async)!,\n    filterForm: filterForm\n  }\"\n></ng-container>\n<ng-template\n  bbAccountStatementBusinessFiltersCustomizable\n  let-host\n  let-areFiltersApplied=\"context.areFiltersApplied\"\n  let-filterForm=\"context.filterForm\"\n  let-datePreferences=\"context.datePreferences\"\n  let-datePeriodsToDisplay=\"context.datePeriodsToDisplay\"\n  let-showCategory=\"context.showCategory\"\n  let-categories=\"context.categories\"\n>\n  <bb-collapsible-ui>\n    <form [formGroup]=\"filterForm\">\n      <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-stack bb-stack--wrap\">\n            <button\n              class=\"bb-stack__item bb-stack__item--spacing-lg bb-stack__item--push-left-sm-down bb-stack__break--sm-down bb-block bb-block--md-md-down\"\n              bbButton\n              #filterButton\n              data-role=\"collapsible-filter-btn\"\n              [color]=\"areFiltersApplied && !isOpen ? 'primary' : 'secondary'\"\n              [ngClass]=\"{ active: isOpen }\"\n              (click)=\"toggle()\"\n            >\n              <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n              <span\n                *ngIf=\"areFiltersApplied; else filterButtonTextDefault\"\n                i18n=\"\n                  Filters applied|Filter form button filter\n                  label@@account-statement-business.filters.button.applied-label\"\n              >\n                Filters applied\n              </span>\n              <ng-template #filterButtonTextDefault>\n                <span\n                  i18n=\"Filter|Filter form button filter label@@account-statement-business.filters.button.filter-label\"\n                >\n                  Filter\n                </span>\n              </ng-template>\n            </button>\n\n            <bb-dropdown-single-select-ui\n              (change)=\"host.setCustomFilter()\"\n              class=\"bb-stack__item bb-stack__break--sm-down\"\n              formControlName=\"customFilterPeriods\"\n              [required]=\"false\"\n              [attr.data-role]=\"'dropdown-single-select'\"\n              placeholder=\"Custom\"\n              i18n-placeholder=\"Custom single select placeholder@@bb-dropdown-single-select.custom.placeholder\"\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Today) !== -1\"\n                [value]=\"host.filterDatePeriods.Today\"\n                label=\"Today\"\n                i18n-label=\"Today option label@@bb-dropdown-single-select-option-ui.today.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Yesterday) !== -1\"\n                [value]=\"host.filterDatePeriods.Yesterday\"\n                label=\"Yesterday\"\n                i18n-label=\"Yesterday option label@@bb-dropdown-single-select-option-ui.yesterday.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisWeek\"\n                label=\"This week\"\n                i18n-label=\"This week option label@@bb-dropdown-single-select-option-ui.this-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.LastWeek\"\n                label=\"Last week\"\n                i18n-label=\"Last week option label@@bb-dropdown-single-select-option-ui.last-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisMonth\"\n                label=\"This month\"\n                i18n-label=\"This month option label@@bb-dropdown-single-select-option-ui.this-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.LastMonth\"\n                label=\"Last month\"\n                i18n-label=\"Last month option label@@bb-dropdown-single-select-option-ui.last-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisQuarter\"\n                label=\"This quarter\"\n                i18n-label=\"This quarter option label@@bb-dropdown-single-select-option-ui.this-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.LastQuarter\"\n                label=\"Last quarter\"\n                i18n-label=\"Last quarter option label@@bb-dropdown-single-select-option-ui.last-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisYear) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisYear\"\n                label=\"This year\"\n                i18n-label=\"This year option label@@bb-dropdown-single-select-option-ui.this-year.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                [value]=\"host.filterDatePeriods.AllTime\"\n                label=\"All time\"\n                i18n-label=\"All time option label@@bb-dropdown-single-select-option-ui.all-time.label\"\n              ></bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n          </div>\n        </div>\n      </ng-template>\n\n      <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n        <div\n          class=\"card-body account-statements-filter__form-container account-statements-filter__form-container--no-container\"\n          data-role=\"filter-form\"\n        >\n          <div class=\"row\">\n            <div class=\"bb-block bb-block--md col-12 col-sm-6\">\n              <div class=\"account-statements-filter__date-field-wrapper\">\n                <bb-input-datepicker-ui\n                  i18n-label=\"\n                    Book date|Filter form book date label@@account-statement-business.filters.datepicker-label\"\n                  label=\"Date range\"\n                  labelClasses=\"form-label\"\n                  [rangeSelection]=\"true\"\n                  [minDate]=\"datePreferences.minimalDate\"\n                  [maxDate]=\"datePreferences.maximumDate\"\n                  aria-label=\"Book date\"\n                  i18n-aria-label=\"\n                    Book date filter aria label@@account-statement-business.filters.datepicker.aria-label\"\n                  [attr.aria-invalid]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                  formControlName=\"bookDate\"\n                  data-role=\"book-date\"\n                ></bb-input-datepicker-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                >\n                  <span\n                    i18n=\"\n                      Error invalid date format in book date\n                      range@@account-statement-business.filters.datepicker.error.invalid-date-format\"\n                    data-role=\"invalid-book-date-error-message\"\n                    >Invalid date format</span\n                  >\n                </bb-input-validation-message-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"\n                    !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                    (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                      host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n                  \"\n                >\n                  <span\n                    i18n=\"\n                      Selected date range contains invalid dates\n                      range@@account-statement-business.filters.datepicker.error.dateLessThanMinDate\"\n                    data-role=\"invalid-book-date-limit-error-message\"\n                    >The selected dates include values outside the allowed date range. Please select a date interval in\n                    the permitted time frame.</span\n                  >\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n            <ng-container *ngIf=\"showCategory\">\n              <bb-dropdown-multi-select-ui\n                *ngIf=\"categories.length\"\n                [formControl]=\"host.filterForm.controls['categories']\"\n                class=\"bb-block bb-block--lg col-12 col-sm-6\"\n                data-role=\"categories-filter\"\n                placeholder=\"Select product category\"\n                i18n-placeholder=\"\n                  Category select placeholder|Category multiple\n                  select@@account-statement-business.filter.form.categories.placeholder\"\n                label=\"Category\"\n                i18n-label=\"\n                  Category label|Category multiple select@@account-statement-business.filter.form.categories.label\"\n              >\n                <bb-dropdown-multi-select-option-ui *ngFor=\"let option of categories\" [label]=\"option\" [value]=\"option\">\n                </bb-dropdown-multi-select-option-ui>\n              </bb-dropdown-multi-select-ui>\n            </ng-container>\n          </div>\n          <div class=\"bb-button-bar\">\n            <button\n              bbButton\n              type=\"submit\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"apply\"\n              [disabled]=\"filterForm.pristine || filterForm.invalid\"\n              (click)=\"host.onSubmit(); toggle()\"\n              i18n=\"Apply|Filter form button apply label@@account-statement-business.filters.button.apply-label\"\n            >\n              Apply\n            </button>\n            <button\n              bbButton\n              color=\"secondary\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"close\"\n              (click)=\"toggle(); host.focusFilterButton()\"\n              i18n=\"Close|Filter form button close label@@account-statement-business.filters.button.close-label\"\n            >\n              Close\n            </button>\n            <button\n              bbButton\n              color=\"link\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"clear-all\"\n              *ngIf=\"filterForm.dirty || areFiltersApplied\"\n              (click)=\"host.resetForm()\"\n              i18n=\"Clear All|Filter form button clear label@@account-statement-business.filters.button.clear-label\"\n            >\n              Clear all\n            </button>\n          </div>\n        </div>\n      </ng-template>\n    </form>\n  </bb-collapsible-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i6.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i6.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0.forwardRef(function () { return i7.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i8.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i9.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0.forwardRef(function () { return i9.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementBusinessFiltersCustomizableDirective; }), selector: "[bbAccountStatementBusinessFiltersCustomizable]" }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i4.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0.forwardRef(function () { return i10.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i11.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i11.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i1.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i4.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0.forwardRef(function () { return i7.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i7.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0.forwardRef(function () { return i1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i11.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0.forwardRef(function () { return i11.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-business-filters',
                    templateUrl: './account-statement-business-filters.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.AccountStatementStoreModel }, { type: i3.AccountStatementBusinessPropertiesService }]; }, propDecorators: { filterButton: [{
                type: ViewChild,
                args: ['filterButton']
            }] } });
export class AccountStatementBusinessFiltersCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessFiltersCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessFiltersCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessFiltersCustomizableDirective, selector: "[bbAccountStatementBusinessFiltersCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementBusinessFiltersCustomizable]' }]
        }] });
//# sourceMappingURL=data:application/json;base64,