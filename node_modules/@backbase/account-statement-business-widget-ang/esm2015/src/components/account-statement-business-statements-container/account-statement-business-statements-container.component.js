import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { first } from 'rxjs/operators';
import { LoadingState, PaginationType } from '@backbase/account-statement-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/account-statement-store-ang";
import * as i2 from "../../services/account-statement-business-properties.service";
import * as i3 from "../account-statement-business-table/account-statement-business-table.component";
import * as i4 from "@backbase/ui-ang/load-button";
import * as i5 from "@backbase/ui-ang/pagination";
import * as i6 from "@angular/common";
export class AccountStatementBusinessStatementsContainerComponent {
    constructor(store, propertiesService) {
        this.store = store;
        this.propertiesService = propertiesService;
        this.accountStatements$ = this.store.accountStatements$;
        this.totalCount$ = this.store.accountStatementsTotalCount$;
        this.accountStatementsLoading$ = this.store.accountStatementsLoading$;
        this.sortingParams$ = this.store.accountStatementsSortingParams$;
        this.paginationParams$ = this.store.accountStatementsPaginationParams$;
        this.loadingStates = LoadingState;
        this.paginationTypes = PaginationType;
        this.paginationType$ = this.propertiesService.paginationType$;
        this.showCategory$ = this.propertiesService.showCategory$;
        this.pageSize$ = this.propertiesService.pageSize$.pipe(first());
    }
    loadMore(params) {
        this.pageSize$.subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: params.from,
                },
                append: true,
            });
        });
    }
    onSort(sortEvent) {
        this.pageSize$.subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                sortingParams: sortEvent,
                paginationParams: {
                    size,
                    from: 0,
                },
            });
        });
    }
    handlePageChange(page) {
        this.pageSize$.subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: page,
                },
            });
        });
    }
}
AccountStatementBusinessStatementsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerComponent, deps: [{ token: i1.AccountStatementStoreModel }, { token: i2.AccountStatementBusinessPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementBusinessStatementsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessStatementsContainerComponent, selector: "bb-account-statement-business-statements-container", ngImport: i0, template: "<ng-container\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    totalCount: (totalCount$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    loadingStates: loadingStates,\n    paginationParams: (paginationParams$ | async)!,\n    sortingParams: (sortingParams$ | async)!,\n    paginationType: (paginationType$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    paginationTypes: paginationTypes\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-totalCount=\"context.totalCount\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-loadingStates=\"context.loadingStates\"\n  let-paginationParams=\"context.paginationParams\"\n  let-sortingParams=\"context.sortingParams\"\n  let-paginationType=\"context.paginationType\"\n  let-showCategory=\"context.showCategory\"\n  let-paginationTypes=\"context.paginationTypes\"\n>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-account-statement-business-table\n      [accountStatements]=\"accountStatements\"\n      [sortingParams]=\"sortingParams\"\n      [showCategory]=\"showCategory\"\n      [loading]=\"accountStatementsLoading === loadingStates.LOADING_TABLE\"\n      (sort)=\"hostRef.onSort($event)\"\n    ></bb-account-statement-business-table>\n  </div>\n\n  <div class=\"bb-text-align-center\" *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_TABLE\">\n    <bb-load-button-ui\n      color=\"link\"\n      [ngClass]=\"{ 'd-sm-none': paginationType !== paginationTypes.LoadMore }\"\n      [isLoading]=\"accountStatementsLoading === loadingStates.LOADING_MORE\"\n      [size]=\"paginationParams.size\"\n      [from]=\"paginationParams.from\"\n      [totalCount]=\"totalCount\"\n      (paramChange)=\"hostRef.loadMore($event)\"\n      data-role=\"load-more-button\"\n    >\n      <span i18n=\"Load more|Load More button text@@account-statement-business.list.load-more\">Load more</span>\n    </bb-load-button-ui>\n\n    <bb-pagination-ui\n      class=\"d-none d-sm-block\"\n      *ngIf=\"paginationType === paginationTypes.Pagination\"\n      [page]=\"paginationParams.from\"\n      [itemsPerPage]=\"paginationParams.size\"\n      [totalItems]=\"totalCount\"\n      [boundaryLinks]=\"true\"\n      [directionLinks]=\"true\"\n      (pageChange)=\"hostRef.handlePageChange($event)\"\n      data-role=\"pagination\"\n    ></bb-pagination-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.AccountStatementBusinessTableComponent; }), selector: "bb-account-statement-business-table", inputs: ["accountStatements", "sortingParams", "loading", "showCategory"], outputs: ["sort"] }, { type: i0.forwardRef(function () { return i4.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i5.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementBusinessStatementsContainerCustomizableDirective; }), selector: "[bbAccountStatementBusinessStatementsContainerCustomizable]" }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-business-statements-container',
                    templateUrl: './account-statement-business-statements-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountStatementStoreModel }, { type: i2.AccountStatementBusinessPropertiesService }]; } });
export class AccountStatementBusinessStatementsContainerCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessStatementsContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessStatementsContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessStatementsContainerCustomizableDirective, selector: "[bbAccountStatementBusinessStatementsContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementBusinessStatementsContainerCustomizable]' }]
        }] });
//# sourceMappingURL=data:application/json;base64,