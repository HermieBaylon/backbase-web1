{"version":3,"file":"backbase-account-statement-business-widget-ang.js","sources":["../../../../libs/account-statement-business-widget-ang/src/services/account-statement-business-properties.service.ts","../../../../libs/account-statement-business-widget-ang/src/helpers/utils.ts","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-filters/account-statement-business-filters.component.ts","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-filters/account-statement-business-filters.component.html","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-view-online-business-wrapper/account-statement-view-online-business-wrapper.component.ts","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-view-online-business-wrapper/account-statement-view-online-business-wrapper.component.html","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-table/account-statement-business-table.component.ts","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-table/account-statement-business-table.component.html","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-statements-container/account-statement-business-statements-container.component.ts","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-statements-container/account-statement-business-statements-container.component.html","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-widget/account-statement-business-widget.component.ts","../../../../libs/account-statement-business-widget-ang/src/components/account-statement-business-widget/account-statement-business-widget.component.html","../../../../libs/account-statement-business-widget-ang/src/account-statement-business-widget.module.ts","../../../../libs/account-statement-business-widget-ang/backbase-account-statement-business-widget-ang.ts"],"sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { ItemModel } from '@backbase/foundation-ang/core';\nimport { AccountStatementBasePropertiesService, PaginationType } from '@backbase/account-statement-common-ang';\n\n@Injectable()\nexport class AccountStatementBusinessPropertiesService extends AccountStatementBasePropertiesService {\n  constructor(@Optional() itemModel: ItemModel) {\n    super(itemModel);\n  }\n\n  protected getPaginationTypeIM$(): Observable<PaginationType> {\n    const defaultValue = PaginationType.Pagination;\n    return this.itemModel?.property('paginationType', defaultValue) || of(defaultValue);\n  }\n}\n","import { ActivatedRoute, ParamMap } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\n\nimport { ProductSummaryItem } from '@backbase/data-ang/arrangements';\n\n/**\n * Extract the given param from activated route.\n *\n * @param route of type ActivatedRoute\n * @param param URL param that needs to be get from the active route\n * @returns Observable of extracted param\n */\nexport const getRouteParam = (route: ActivatedRoute, param: string): Observable<string | undefined> =>\n  route.paramMap.pipe(pluck<ParamMap, string | undefined>('params', param));\n\n/**\n * Check if the given object is of type ProductSummaryItem or not\n *\n * @param account Either ProductSummaryItem or string\n * @returns boolean\n */\nexport const isProductsummaryItem = (account: ProductSummaryItem | string): account is ProductSummaryItem =>\n  (account as ProductSummaryItem).id !== undefined;\n\n/**\n * Check if the passed parameter is ProductSummaryItem array or accountId's array and return id from it\n *\n * @param accounts Array of either ProductSummaryItem or string\n * @returns string accountId\n */\nexport const getAccountId = (accounts: ProductSummaryItem[] | string[]): string =>\n  isProductsummaryItem(accounts[0]) ? accounts[0].id : accounts[0];\n","import { Component, Directive, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { AccountStatementStoreModel, WidgetPreferences } from '@backbase/account-statement-store-ang';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map, withLatestFrom } from 'rxjs/operators';\nimport { AccountStatementBusinessPropertiesService } from '../../services/account-statement-business-properties.service';\nimport {\n  Categories,\n  convertDateObjToDateStruct,\n  CUSTOM_FILTER_PERIODS_VALUES,\n  DatePeriods,\n} from '@backbase/account-statement-common-ang';\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\n\ntype DatePreferences = Record<keyof Pick<WidgetPreferences, 'minimalDate' | 'maximumDate'>, NgbDateStruct>;\n\n@Component({\n  selector: 'bb-account-statement-business-filters',\n  templateUrl: './account-statement-business-filters.component.html',\n})\nexport class AccountStatementBusinessFiltersComponent implements OnInit {\n  @ViewChild('filterButton') filterButton?: ElementRef;\n\n  readonly filterDatePeriods = DatePeriods;\n\n  filterForm!: FormGroup;\n  readonly areFiltersApplied$: Observable<boolean> = this.store.accountStatementsFilterParams$.pipe(\n    map(filters => {\n      const isDateRangeApplied = !!(filters.dateFrom && filters.dateTo);\n      const isCategoryApplied = !!(filters.category && filters.category.length > 0);\n      return isDateRangeApplied || isCategoryApplied;\n    }),\n  );\n\n  readonly datePreferences$: Observable<DatePreferences> = this.initializeDatePreferences;\n\n  readonly datePeriodsToDisplay$: Observable<string[]> = this.initializeFilterDatePeriods;\n\n  readonly categories$: Observable<Categories> = this.store.categories$;\n\n  readonly showCategory$ = this.propertiesService.showCategory$;\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly store: AccountStatementStoreModel,\n    private readonly propertiesService: AccountStatementBusinessPropertiesService,\n  ) {}\n\n  ngOnInit(): void {\n    this.store.accountStatementsFilterParams$.pipe(first()).subscribe(params => {\n      const { dateFrom: from, dateTo: to, category } = params;\n      this.filterForm = this.fb.group({\n        bookDate: from && to ? { from, to } : '',\n        customFilterPeriods: params.datePeriod,\n        categories: [category || []],\n      });\n    });\n  }\n\n  resetForm() {\n    this.areFiltersApplied$\n      .pipe(first(), filter(Boolean), withLatestFrom(this.propertiesService.pageSize$))\n      .subscribe(([, size]) => {\n        this.store.dispatchLoadAccountStatementsBusiness({\n          paginationParams: {\n            size,\n            from: 0,\n          },\n          filterParams: {\n            dateFrom: undefined,\n            dateTo: undefined,\n            datePeriod: DatePeriods.AllTime,\n            category: undefined,\n          },\n        });\n      });\n\n    this.filterForm.reset({ customFilterPeriods: this.filterDatePeriods.AllTime });\n\n    this.focusFilterButton();\n  }\n\n  focusFilterButton() {\n    if (this.filterButton) {\n      this.filterButton.nativeElement.focus();\n    }\n  }\n\n  onSubmit() {\n    const customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');\n    const bookDateFormField = this.filterForm.controls.bookDate;\n    if (customFilterPeriodsFormField && bookDateFormField.touched) {\n      customFilterPeriodsFormField.reset();\n    }\n\n    this.applyFormData();\n    this.focusFilterButton();\n  }\n\n  setCustomFilter() {\n    const customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');\n    const bookDateFormField = this.filterForm.get('bookDate');\n\n    const selectedPeriod: DatePeriods = customFilterPeriodsFormField && customFilterPeriodsFormField.value;\n    const selectedPeriodDates = CUSTOM_FILTER_PERIODS_VALUES[selectedPeriod]();\n    const from = selectedPeriodDates.from && selectedPeriodDates.from.toISOString();\n    const to = selectedPeriodDates.to && selectedPeriodDates.to.toISOString();\n\n    if (bookDateFormField) {\n      const bookDateValue = from && to ? { from, to } : '';\n      bookDateFormField.setValue(bookDateValue);\n    }\n\n    this.applyFormData();\n  }\n\n  private applyFormData() {\n    const bookDateControl = this.filterForm.get('bookDate');\n    const selectedPeriodControl = this.filterForm.get('customFilterPeriods');\n    const categoriesControl = this.filterForm.get('categories');\n    const selectedPeriodControlValue = selectedPeriodControl && selectedPeriodControl.value;\n    const categoriesValue = categoriesControl && categoriesControl.value;\n    const { from: dateFrom, to: dateTo } = (bookDateControl && bookDateControl.value) || {};\n\n    this.propertiesService.pageSize$.pipe(first()).subscribe(size => {\n      this.store.dispatchLoadAccountStatementsBusiness({\n        paginationParams: {\n          size,\n          from: 0,\n        },\n        filterParams: {\n          dateFrom,\n          dateTo: dateTo || dateFrom,\n          datePeriod: selectedPeriodControlValue || undefined,\n          category: categoriesValue || undefined,\n        },\n      });\n    });\n\n    this.filterForm.markAsPristine();\n  }\n\n  private get initializeDatePreferences(): Observable<DatePreferences> {\n    return this.store.accountStatementsWidgetPreferences$.pipe(\n      map(preferences => ({\n        minimalDate: convertDateObjToDateStruct(preferences.minimalDate),\n        maximumDate: convertDateObjToDateStruct(preferences.maximumDate),\n      })),\n    );\n  }\n\n  private get initializeFilterDatePeriods(): Observable<string[]> {\n    return this.store.accountStatementsWidgetPreferences$.pipe(\n      map(preferences => {\n        const datePeriodValues = Object.values(DatePeriods);\n        return datePeriodValues.filter((value: DatePeriods) => {\n          const periodValue = CUSTOM_FILTER_PERIODS_VALUES[value]() as { from: Date; to: Date };\n          return periodValue.from >= preferences.minimalDate;\n        });\n      }),\n    );\n  }\n}\n\n@Directive({ selector: '[bbAccountStatementBusinessFiltersCustomizable]' })\nexport class AccountStatementBusinessFiltersCustomizableDirective extends BbTemplate<\n  AccountStatementBusinessFiltersComponent,\n  {\n    areFiltersApplied: boolean;\n    filterForm: FormGroup;\n    datePreferences: DatePreferences;\n    datePeriodsToDisplay: string[];\n    categories: Categories;\n    showCategory: boolean;\n  }\n> {}\n","<ng-container\n  bbAccountStatementBusinessFiltersCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    areFiltersApplied: (areFiltersApplied$ | async)!,\n    datePreferences: (datePreferences$ | async)!,\n    datePeriodsToDisplay: (datePeriodsToDisplay$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    categories: (categories$ | async)!,\n    filterForm: filterForm\n  }\"\n></ng-container>\n<ng-template\n  bbAccountStatementBusinessFiltersCustomizable\n  let-host\n  let-areFiltersApplied=\"context.areFiltersApplied\"\n  let-filterForm=\"context.filterForm\"\n  let-datePreferences=\"context.datePreferences\"\n  let-datePeriodsToDisplay=\"context.datePeriodsToDisplay\"\n  let-showCategory=\"context.showCategory\"\n  let-categories=\"context.categories\"\n>\n  <bb-collapsible-ui>\n    <form [formGroup]=\"filterForm\">\n      <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-stack bb-stack--wrap\">\n            <button\n              class=\"bb-stack__item bb-stack__item--spacing-lg bb-stack__item--push-left-sm-down bb-stack__break--sm-down bb-block bb-block--md-md-down\"\n              bbButton\n              #filterButton\n              data-role=\"collapsible-filter-btn\"\n              [color]=\"areFiltersApplied && !isOpen ? 'primary' : 'secondary'\"\n              [ngClass]=\"{ active: isOpen }\"\n              (click)=\"toggle()\"\n            >\n              <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n              <span\n                *ngIf=\"areFiltersApplied; else filterButtonTextDefault\"\n                i18n=\"\n                  Filters applied|Filter form button filter\n                  label@@account-statement-business.filters.button.applied-label\"\n              >\n                Filters applied\n              </span>\n              <ng-template #filterButtonTextDefault>\n                <span\n                  i18n=\"Filter|Filter form button filter label@@account-statement-business.filters.button.filter-label\"\n                >\n                  Filter\n                </span>\n              </ng-template>\n            </button>\n\n            <bb-dropdown-single-select-ui\n              (change)=\"host.setCustomFilter()\"\n              class=\"bb-stack__item bb-stack__break--sm-down\"\n              formControlName=\"customFilterPeriods\"\n              [required]=\"false\"\n              [attr.data-role]=\"'dropdown-single-select'\"\n              placeholder=\"Custom\"\n              i18n-placeholder=\"Custom single select placeholder@@bb-dropdown-single-select.custom.placeholder\"\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Today) !== -1\"\n                [value]=\"host.filterDatePeriods.Today\"\n                label=\"Today\"\n                i18n-label=\"Today option label@@bb-dropdown-single-select-option-ui.today.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Yesterday) !== -1\"\n                [value]=\"host.filterDatePeriods.Yesterday\"\n                label=\"Yesterday\"\n                i18n-label=\"Yesterday option label@@bb-dropdown-single-select-option-ui.yesterday.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisWeek\"\n                label=\"This week\"\n                i18n-label=\"This week option label@@bb-dropdown-single-select-option-ui.this-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.LastWeek\"\n                label=\"Last week\"\n                i18n-label=\"Last week option label@@bb-dropdown-single-select-option-ui.last-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisMonth\"\n                label=\"This month\"\n                i18n-label=\"This month option label@@bb-dropdown-single-select-option-ui.this-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.LastMonth\"\n                label=\"Last month\"\n                i18n-label=\"Last month option label@@bb-dropdown-single-select-option-ui.last-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisQuarter\"\n                label=\"This quarter\"\n                i18n-label=\"This quarter option label@@bb-dropdown-single-select-option-ui.this-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.LastQuarter\"\n                label=\"Last quarter\"\n                i18n-label=\"Last quarter option label@@bb-dropdown-single-select-option-ui.last-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisYear) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisYear\"\n                label=\"This year\"\n                i18n-label=\"This year option label@@bb-dropdown-single-select-option-ui.this-year.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                [value]=\"host.filterDatePeriods.AllTime\"\n                label=\"All time\"\n                i18n-label=\"All time option label@@bb-dropdown-single-select-option-ui.all-time.label\"\n              ></bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n          </div>\n        </div>\n      </ng-template>\n\n      <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n        <div\n          class=\"card-body account-statements-filter__form-container account-statements-filter__form-container--no-container\"\n          data-role=\"filter-form\"\n        >\n          <div class=\"row\">\n            <div class=\"bb-block bb-block--md col-12 col-sm-6\">\n              <div class=\"account-statements-filter__date-field-wrapper\">\n                <bb-input-datepicker-ui\n                  i18n-label=\"\n                    Book date|Filter form book date label@@account-statement-business.filters.datepicker-label\"\n                  label=\"Date range\"\n                  labelClasses=\"form-label\"\n                  [rangeSelection]=\"true\"\n                  [minDate]=\"datePreferences.minimalDate\"\n                  [maxDate]=\"datePreferences.maximumDate\"\n                  aria-label=\"Book date\"\n                  i18n-aria-label=\"\n                    Book date filter aria label@@account-statement-business.filters.datepicker.aria-label\"\n                  [attr.aria-invalid]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                  formControlName=\"bookDate\"\n                  data-role=\"book-date\"\n                ></bb-input-datepicker-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                >\n                  <span\n                    i18n=\"\n                      Error invalid date format in book date\n                      range@@account-statement-business.filters.datepicker.error.invalid-date-format\"\n                    data-role=\"invalid-book-date-error-message\"\n                    >Invalid date format</span\n                  >\n                </bb-input-validation-message-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"\n                    !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                    (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                      host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n                  \"\n                >\n                  <span\n                    i18n=\"\n                      Selected date range contains invalid dates\n                      range@@account-statement-business.filters.datepicker.error.dateLessThanMinDate\"\n                    data-role=\"invalid-book-date-limit-error-message\"\n                    >The selected dates include values outside the allowed date range. Please select a date interval in\n                    the permitted time frame.</span\n                  >\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n            <ng-container *ngIf=\"showCategory\">\n              <bb-dropdown-multi-select-ui\n                *ngIf=\"categories.length\"\n                [formControl]=\"host.filterForm.controls['categories']\"\n                class=\"bb-block bb-block--lg col-12 col-sm-6\"\n                data-role=\"categories-filter\"\n                placeholder=\"Select product category\"\n                i18n-placeholder=\"\n                  Category select placeholder|Category multiple\n                  select@@account-statement-business.filter.form.categories.placeholder\"\n                label=\"Category\"\n                i18n-label=\"\n                  Category label|Category multiple select@@account-statement-business.filter.form.categories.label\"\n              >\n                <bb-dropdown-multi-select-option-ui *ngFor=\"let option of categories\" [label]=\"option\" [value]=\"option\">\n                </bb-dropdown-multi-select-option-ui>\n              </bb-dropdown-multi-select-ui>\n            </ng-container>\n          </div>\n          <div class=\"bb-button-bar\">\n            <button\n              bbButton\n              type=\"submit\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"apply\"\n              [disabled]=\"filterForm.pristine || filterForm.invalid\"\n              (click)=\"host.onSubmit(); toggle()\"\n              i18n=\"Apply|Filter form button apply label@@account-statement-business.filters.button.apply-label\"\n            >\n              Apply\n            </button>\n            <button\n              bbButton\n              color=\"secondary\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"close\"\n              (click)=\"toggle(); host.focusFilterButton()\"\n              i18n=\"Close|Filter form button close label@@account-statement-business.filters.button.close-label\"\n            >\n              Close\n            </button>\n            <button\n              bbButton\n              color=\"link\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"clear-all\"\n              *ngIf=\"filterForm.dirty || areFiltersApplied\"\n              (click)=\"host.resetForm()\"\n              i18n=\"Clear All|Filter form button clear label@@account-statement-business.filters.button.clear-label\"\n            >\n              Clear all\n            </button>\n          </div>\n        </div>\n      </ng-template>\n    </form>\n  </bb-collapsible-ui>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { AccountStatementDocument } from '@backbase/data-ang/account-statements';\n\n@Component({\n  selector: 'bb-account-statement-view-online-business-wrapper',\n  templateUrl: './account-statement-view-online-business-wrapper.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccountStatementViewOnlineBusinessWrapperComponent {\n  @Input()\n  set documents(documents: AccountStatementDocument[]) {\n    this.documentPDF = documents.find(document => document.contentType === 'application/pdf');\n  }\n\n  @Input() describedByElementId = '';\n\n  documentPDF?: AccountStatementDocument;\n}\n","<bb-account-statement-view-online\n  *ngIf=\"documentPDF\"\n  [href]=\"documentPDF.url!\"\n  [describedByElementId]=\"describedByElementId\"\n></bb-account-statement-view-online>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport {\n  AccountStatementDataService,\n  MimeTypeExtensions,\n  mimeTypeExtensions,\n} from '@backbase/account-statement-common-ang';\nimport { SortingParams } from '@backbase/account-statement-store-ang';\nimport { AccountStatement, AccountStatementDocument } from '@backbase/data-ang/account-statements';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { AccountStatementBusinessPropertiesService } from '../../services/account-statement-business-properties.service';\nimport { NotificationService } from '@backbase/ui-ang/notification';\nimport { SortDirection, SortEvent } from '@backbase/ui-ang/table';\n\n@Component({\n  selector: 'bb-account-statement-business-table',\n  templateUrl: './account-statement-business-table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccountStatementBusinessTableComponent {\n  @Input()\n  set accountStatements(accountStatements: AccountStatement[]) {\n    this.accountStatementsValue = accountStatements.map(accountStatement => ({\n      ...accountStatement,\n      documents: accountStatement.documents.map(document => ({\n        ...document,\n        url: this.getDocumentLink(document),\n      })),\n    }));\n  }\n  get accountStatements(): AccountStatement[] {\n    return this.accountStatementsValue;\n  }\n\n  @Input() sortingParams?: SortingParams;\n\n  @Input() loading = false;\n\n  @Input() showCategory = true;\n\n  @Output() sort = new EventEmitter<SortEvent>();\n\n  @ViewChild('downloadFailureNotificationHeader') downloadFailureNotificationHeader!: TemplateRef<any>;\n\n  readonly mimeTypeExtensions = mimeTypeExtensions;\n\n  private accountStatementsValue: AccountStatement[] = [];\n\n  constructor(\n    private readonly dataService: AccountStatementDataService,\n    private readonly notificationsService: NotificationService,\n    private readonly propertiesService: AccountStatementBusinessPropertiesService,\n  ) {}\n\n  onSort(sortEvent: SortEvent) {\n    this.sort.emit(sortEvent);\n  }\n\n  onDownloadFailure() {\n    this.propertiesService.notificationDismissTime$.subscribe(ttl => {\n      this.notificationsService.showNotification({\n        header: this.downloadFailureNotificationHeader,\n        message: '',\n        modifier: 'error',\n        ttl,\n      });\n    });\n  }\n\n  getDirection(column: string): SortDirection {\n    return this.sortingParams && this.sortingParams.column === column ? this.sortingParams.direction : '';\n  }\n\n  private getDocumentLink(document: AccountStatementDocument): string {\n    return document.url || this.dataService.getAccountStatementDownloadUrl(document.uid || '');\n  }\n}\n\n@Directive({ selector: '[bbAccountStatementBusinessTableCustomizable]' })\nexport class AccountStatementBusinessTableCustomizableDirective extends BbTemplate<\n  AccountStatementBusinessTableComponent,\n  {\n    accountStatements: AccountStatement[];\n    mimeTypeExtensions: MimeTypeExtensions;\n    loading: boolean;\n  }\n> {}\n\n@Directive({\n  selector: '[bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective]',\n})\nexport class AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective extends BbTemplate<\n  AccountStatementBusinessTableComponent,\n  void\n> {}\n","<ng-container\n  bbAccountStatementBusinessTableCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: accountStatements,\n    mimeTypeExtensions: mimeTypeExtensions,\n    loading: loading\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessTableCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-mimeTypeExtensions=\"context.mimeTypeExtensions\"\n  let-loading=\"context.loading\"\n>\n  <table\n    bbTableFocus\n    [bbTable]=\"accountStatements\"\n    (sort)=\"hostRef.onSort($event)\"\n    class=\"table\"\n    aria-label=\"Account statements table\"\n    i18n-aria-label=\"Aria label for account statements table@@account-statement-business.table.aria-label\"\n  >\n    <thead>\n      <tr class=\"d-sm-table-row d-none\">\n        <th bbSortable=\"date\" [direction]=\"hostRef.getDirection('date')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Book date|table heading@@account-statement-business.table-head.book-date\"\n            data-role=\"book-date-thead\"\n            >Book date</span\n          >\n        </th>\n        <th *ngIf=\"showCategory\" bbSortable=\"category\" [direction]=\"hostRef.getDirection('category')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Category|table heading@@account-statement-business.table-head.category\"\n            data-role=\"category-thead\"\n            >Category</span\n          >\n        </th>\n        <th bbSortable=\"accountName\" [direction]=\"hostRef.getDirection('accountName')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Account name, number|table heading@@account-statement-business.table-head.account\"\n            data-role=\"account-name-thead\"\n            >Account name, number</span\n          >\n        </th>\n        <th scope=\"col\" class=\"bb-text-align-center\">\n          <span\n            class=\"th-content\"\n            i18n=\"Preview|table heading@@account-statement-business.table-head.preview\"\n            data-role=\"preview-thead\"\n            >Preview</span\n          >\n        </th>\n        <th scope=\"col\" class=\"bb-text-align-center\">\n          <span\n            class=\"th-content\"\n            i18n=\"Download|table heading@@account-statement-business.table-head.download\"\n            data-role=\"download-thead\"\n            >Download</span\n          >\n        </th>\n      </tr>\n    </thead>\n\n    <tbody *ngIf=\"!loading\">\n      <ng-container *ngFor=\"let accountStatement of accountStatements; let rowNumber = index\">\n        <tr class=\"d-sm-table-row d-none\">\n          <td data-role=\"date-td\">{{ accountStatement.date | bbDate: 'shortDate' }}</td>\n\n          <td *ngIf=\"showCategory\" data-role=\"category-td\">{{ accountStatement.category }}</td>\n\n          <td class=\"text-break\" data-role=\"account-name-td\">\n            <div>{{ accountStatement.accountName }}</div>\n            <div class=\"bb-text-support\">{{ accountStatement.accountNumber }}</div>\n          </td>\n\n          <td class=\"bb-text-align-center\">\n            <span\n              *ngIf=\"accountStatement.documents?.length\"\n              id=\"describe-preview-by-{{ rowNumber }}\"\n              class=\"sr-only\"\n              i18n=\"\n                Account and book date|describing what row data this preview action is\n                for@@account-statement-business.preview-button.description\"\n            >\n              Preview for account {{ accountStatement.accountName }} and book date\n              {{ accountStatement.date | bbDate: 'fullDate' }}\n            </span>\n\n            <bb-account-statement-view-online-business-wrapper\n              [documents]=\"accountStatement.documents\"\n              describedByElementId=\"describe-preview-by-{{ rowNumber }}\"\n            ></bb-account-statement-view-online-business-wrapper>\n          </td>\n\n          <td class=\"bb-text-align-center\">\n            <span *ngIf=\"accountStatement.documents?.length\" id=\"describe-download-by-{{ rowNumber }}\" class=\"sr-only\">\n              <ng-container\n                *ngIf=\"accountStatement.documents?.length === 1; else multipleDownloadDocumentsDescription\"\n                i18n=\"\n                  Account and book date|describing what row data this download action is\n                  for@@account-statement-business.download-button.description\"\n              >\n                Download {{ mimeTypeExtensions[accountStatement.documents[0]?.contentType] }} for account\n                {{ accountStatement.accountName }} and book date {{ accountStatement.date | bbDate: 'fullDate' }}\n              </ng-container>\n\n              <ng-template\n                #multipleDownloadDocumentsDescription\n                i18n=\"\n                  Account and book date|describing what data in a row this download action is\n                  for@@account-statement-business.download-dropdown-button.description\"\n              >\n                Show download actions for account {{ accountStatement.accountName }} and book date\n                {{ accountStatement.date | bbDate: 'fullDate' }}\n              </ng-template>\n            </span>\n\n            <bb-account-statement-downloads\n              describedByElementId=\"describe-download-by-{{ rowNumber }}\"\n              [documents]=\"accountStatement.documents\"\n              [mimeTypeExtensions]=\"mimeTypeExtensions\"\n              (downloadFailure)=\"hostRef.onDownloadFailure()\"\n            ></bb-account-statement-downloads>\n          </td>\n        </tr>\n\n        <div class=\"d-sm-none bb-list__item\">\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-stack bb-stack--align-top\">\n              <div class=\"bb-stack__item\">\n                <div\n                  class=\"bb-block bb-block--xs bb-text-semi-bold\"\n                  i18n=\"Book date|table heading@@account-statement-business.list-head.book-date\"\n                >\n                  Book date\n                </div>\n                <div>{{ accountStatement.date | bbDate: 'shortDate' }}</div>\n              </div>\n\n              <bb-account-statement-view-online-business-wrapper\n                class=\"bb-stack__item bb-stack__item--push-right\"\n                [documents]=\"accountStatement.documents\"\n                describedByElementId=\"describe-preview-by-{{ rowNumber }}\"\n              ></bb-account-statement-view-online-business-wrapper>\n\n              <bb-account-statement-downloads\n                describedByElementId=\"describe-download-by-{{ rowNumber }}\"\n                tooltipPlacement=\"top-right\"\n                [documents]=\"accountStatement.documents\"\n                [mimeTypeExtensions]=\"mimeTypeExtensions\"\n                (downloadFailure)=\"hostRef.onDownloadFailure()\"\n              ></bb-account-statement-downloads>\n            </div>\n          </div>\n          <ng-container *ngIf=\"showCategory\">\n            <div\n              class=\"bb-block bb-block--xs bb-text-semi-bold\"\n              i18n=\"Category|table heading@@account-statement-business.list-head.category\"\n            >\n              Category\n            </div>\n            <div class=\"bb-block bb-block--md\">{{ accountStatement.category }}</div>\n          </ng-container>\n\n          <div\n            class=\"bb-block bb-block--xs bb-text-semi-bold\"\n            i18n=\"Account name|table heading@@account-statement-business.list-head.account-name\"\n          >\n            Account name\n          </div>\n          <div class=\"bb-block bb-block--md\">{{ accountStatement.accountName }}</div>\n\n          <div\n            class=\"bb-block bb-block--xs bb-text-semi-bold\"\n            i18n=\"Account number|table heading@@account-statement-business.list-head.account-number\"\n          >\n            Account number\n          </div>\n          <div class=\"text-break\">{{ accountStatement.accountNumber }}</div>\n        </div>\n      </ng-container>\n    </tbody>\n  </table>\n\n  <bb-loading-indicator-ui *ngIf=\"loading\" loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #downloadFailureNotificationHeader>\n  <ng-container bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective [bbHostRef]=\"this\">\n  </ng-container>\n\n  <ng-template bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective>\n    <span i18n=\"Failed to download statement@@account-statement-business-table-row.error-notification.header\"\n      >The statement cannot be downloaded now, please try again later</span\n    >\n  </ng-template>\n</ng-template>\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { AccountStatement } from '@backbase/data-ang/account-statements';\nimport { AccountStatementStoreModel, SortingParams, PaginationParams } from '@backbase/account-statement-store-ang';\nimport { first } from 'rxjs/operators';\nimport { AccountStatementBusinessPropertiesService } from '../../services/account-statement-business-properties.service';\nimport { LoadingState, PaginationType } from '@backbase/account-statement-common-ang';\nimport { LoadMoreParams } from '@backbase/ui-ang/load-button';\nimport { SortEvent } from '@backbase/ui-ang/table';\n\n@Component({\n  selector: 'bb-account-statement-business-statements-container',\n  templateUrl: './account-statement-business-statements-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccountStatementBusinessStatementsContainerComponent {\n  readonly accountStatements$ = this.store.accountStatements$;\n  readonly totalCount$ = this.store.accountStatementsTotalCount$;\n  readonly accountStatementsLoading$ = this.store.accountStatementsLoading$;\n  readonly sortingParams$ = this.store.accountStatementsSortingParams$;\n  readonly paginationParams$ = this.store.accountStatementsPaginationParams$;\n  readonly loadingStates = LoadingState;\n  readonly paginationTypes = PaginationType;\n  readonly paginationType$ = this.propertiesService.paginationType$;\n  readonly showCategory$ = this.propertiesService.showCategory$;\n  private readonly pageSize$ = this.propertiesService.pageSize$.pipe(first());\n\n  constructor(\n    private readonly store: AccountStatementStoreModel,\n    private readonly propertiesService: AccountStatementBusinessPropertiesService,\n  ) {}\n\n  loadMore(params: LoadMoreParams) {\n    this.pageSize$.subscribe(size => {\n      this.store.dispatchLoadAccountStatementsBusiness({\n        paginationParams: {\n          size,\n          from: params.from,\n        },\n        append: true,\n      });\n    });\n  }\n\n  onSort(sortEvent: SortEvent) {\n    this.pageSize$.subscribe(size => {\n      this.store.dispatchLoadAccountStatementsBusiness({\n        sortingParams: sortEvent,\n        paginationParams: {\n          size,\n          from: 0,\n        },\n      });\n    });\n  }\n\n  handlePageChange(page: number) {\n    this.pageSize$.subscribe(size => {\n      this.store.dispatchLoadAccountStatementsBusiness({\n        paginationParams: {\n          size,\n          from: page,\n        },\n      });\n    });\n  }\n}\n\n@Directive({ selector: '[bbAccountStatementBusinessStatementsContainerCustomizable]' })\nexport class AccountStatementBusinessStatementsContainerCustomizableDirective extends BbTemplate<\n  AccountStatementBusinessStatementsContainerComponent,\n  {\n    accountStatements: AccountStatement[];\n    totalCount: number;\n    accountStatementsLoading: LoadingState;\n    loadingStates: typeof LoadingState;\n    paginationParams: PaginationParams;\n    sortingParams: SortingParams;\n    paginationType: PaginationType;\n    showCategory: boolean;\n    paginationTypes: typeof PaginationType;\n  }\n> {}\n","<ng-container\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    totalCount: (totalCount$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    loadingStates: loadingStates,\n    paginationParams: (paginationParams$ | async)!,\n    sortingParams: (sortingParams$ | async)!,\n    paginationType: (paginationType$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    paginationTypes: paginationTypes\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-totalCount=\"context.totalCount\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-loadingStates=\"context.loadingStates\"\n  let-paginationParams=\"context.paginationParams\"\n  let-sortingParams=\"context.sortingParams\"\n  let-paginationType=\"context.paginationType\"\n  let-showCategory=\"context.showCategory\"\n  let-paginationTypes=\"context.paginationTypes\"\n>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-account-statement-business-table\n      [accountStatements]=\"accountStatements\"\n      [sortingParams]=\"sortingParams\"\n      [showCategory]=\"showCategory\"\n      [loading]=\"accountStatementsLoading === loadingStates.LOADING_TABLE\"\n      (sort)=\"hostRef.onSort($event)\"\n    ></bb-account-statement-business-table>\n  </div>\n\n  <div class=\"bb-text-align-center\" *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_TABLE\">\n    <bb-load-button-ui\n      color=\"link\"\n      [ngClass]=\"{ 'd-sm-none': paginationType !== paginationTypes.LoadMore }\"\n      [isLoading]=\"accountStatementsLoading === loadingStates.LOADING_MORE\"\n      [size]=\"paginationParams.size\"\n      [from]=\"paginationParams.from\"\n      [totalCount]=\"totalCount\"\n      (paramChange)=\"hostRef.loadMore($event)\"\n      data-role=\"load-more-button\"\n    >\n      <span i18n=\"Load more|Load More button text@@account-statement-business.list.load-more\">Load more</span>\n    </bb-load-button-ui>\n\n    <bb-pagination-ui\n      class=\"d-none d-sm-block\"\n      *ngIf=\"paginationType === paginationTypes.Pagination\"\n      [page]=\"paginationParams.from\"\n      [itemsPerPage]=\"paginationParams.size\"\n      [totalItems]=\"totalCount\"\n      [boundaryLinks]=\"true\"\n      [directionLinks]=\"true\"\n      (pageChange)=\"hostRef.handlePageChange($event)\"\n      data-role=\"pagination\"\n    ></bb-pagination-ui>\n  </div>\n</ng-template>\n","import { Component, Directive, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport {\n  AccountStatementBaseWidgetComponent,\n  DatePeriods,\n  getDateFilterLimit,\n  LoadingState,\n  stringToWords,\n  today,\n} from '@backbase/account-statement-common-ang';\nimport { AccountStatementsFilterParams, AccountStatementStoreModel } from '@backbase/account-statement-store-ang';\nimport { AccountStatement } from '@backbase/data-ang/account-statements';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { combineLatest, Observable, Subject, BehaviorSubject, merge } from 'rxjs';\nimport { filter, first, map, takeUntil } from 'rxjs/operators';\nimport { AccountStatementBusinessPropertiesService } from '../../services/account-statement-business-properties.service';\nimport { getAccountId, getRouteParam } from '../../helpers/utils';\nimport { SortDirection } from '@backbase/ui-ang/table';\n\n@Component({\n  selector: 'bb-account-statement-business-widget',\n  templateUrl: './account-statement-business-widget.component.html',\n  providers: [AccountStatementStoreModel, AccountStatementBusinessPropertiesService],\n})\nexport class AccountStatementBusinessWidgetComponent\n  extends AccountStatementBaseWidgetComponent<AccountStatementBusinessPropertiesService>\n  implements OnInit, OnDestroy, OnChanges\n{\n  @Input() accountId = '';\n  readonly accountStatements$: Observable<AccountStatement[]> = this.store.accountStatements$;\n  readonly accountStatementsLoading$: Observable<LoadingState> = this.store.accountStatementsLoading$;\n  readonly accountStatementsError$: Observable<Error | undefined> = this.store.accountStatementsError$;\n  readonly pageSize$: Observable<number> = this.propertiesService.pageSize$.pipe(first());\n  readonly accountStatementsFilterParams$: Observable<AccountStatementsFilterParams> =\n    this.store.accountStatementsFilterParams$;\n  readonly loadingStates = LoadingState;\n\n  private readonly destroy$ = new Subject<void>();\n  private accountId$ = new BehaviorSubject<string>('');\n\n  // In order to be able to transmit an account ids both using the route parameter and through the input\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  readonly accountIds$: Observable<string[]> = merge(\n    getRouteParam(this.route, 'selectedAccount'),\n    this.accountId$.pipe(filter(accountId => !!accountId)),\n  ).pipe(map(accountIds => stringToWords(accountIds, ',')));\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly store: AccountStatementStoreModel,\n    propertiesService: AccountStatementBusinessPropertiesService,\n  ) {\n    super(propertiesService);\n  }\n\n  ngOnChanges() {\n    if (this.accountId) {\n      this.accountId$.next(this.accountId);\n    }\n  }\n\n  ngOnInit() {\n    this.initializeMinimalDateFilterLimit.pipe(takeUntil(this.destroy$)).subscribe(minimalDate => {\n      const widgetPreferences = { minimalDate, maximumDate: today() };\n      this.store.dispatchUpdateWidgetPreferences({ widgetPreferences });\n    });\n\n    const sortingParams$ = combineLatest([\n      this.propertiesService.sortingOrder$,\n      this.propertiesService.sortingDirection$.pipe(map(direction => direction.toLowerCase() as SortDirection)),\n    ]).pipe(\n      first(),\n      map(([column, direction]) => ({\n        column,\n        direction,\n      })),\n    );\n\n    combineLatest([\n      // fetch statements if exactly one account ID is provided\n      this.accountIds$.pipe(filter(({ length }) => length === 1)),\n      this.pageSize$,\n      sortingParams$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([accounts, size, sortingParams]) => {\n        this.store.dispatchLoadAccountStatementsBusiness({\n          accountIds: [getAccountId(accounts)],\n          sortingParams,\n          paginationParams: {\n            from: 0,\n            size,\n          },\n          // reset filters for date\n          filterParams: {\n            datePeriod: DatePeriods.AllTime,\n          },\n        });\n      });\n\n    this.propertiesService.showCategory$\n      .pipe(filter(Boolean), takeUntil(this.destroy$))\n      .subscribe(_ => this.store.dispatchLoadCategories());\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private get initializeMinimalDateFilterLimit(): Observable<Date> {\n    return combineLatest([this.propertiesService.absoluteDateLimit$, this.propertiesService.relativeDateLimit$]).pipe(\n      map(([absoluteDateLimit, relativeMonthLimit]) => getDateFilterLimit(absoluteDateLimit, relativeMonthLimit)),\n    );\n  }\n}\n\n@Directive({ selector: '[bbAccountStatementBusinessWidgetCustomizable]' })\nexport class AccountStatementBusinessWidgetCustomizableDirective extends BbTemplate<\n  AccountStatementBusinessWidgetComponent,\n  {\n    accountStatements: AccountStatement[];\n    accountStatementsLoading: LoadingState;\n    accountStatementsError?: Error;\n    accountStatementsFilterParams?: AccountStatementsFilterParams;\n    loadingStates: typeof LoadingState;\n    accountIds: string[];\n  }\n> {}\n","<ng-container\n  bbAccountStatementBusinessWidgetCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    accountStatementsError: (accountStatementsError$ | async)!,\n    accountStatementsFilterParams: (accountStatementsFilterParams$ | async)!,\n    accountIds: (accountIds$ | async)!,\n    loadingStates: loadingStates\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessWidgetCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-accountStatementsFilterParams=\"context.accountStatementsFilterParams\"\n  let-accountStatementsError=\"context.accountStatementsError\"\n  let-accountIds=\"context.accountIds\"\n  let-loadingStates=\"context.loadingStates\"\n>\n  <div aria-live=\"polite\" data-role=\"account-statements-container\">\n    <ng-container *ngIf=\"!accountStatementsError; else accountStatementsErrorState\">\n      <ng-container [ngSwitch]=\"accountIds.length\">\n        <ng-container *ngSwitchCase=\"1\">\n          <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING; else loadingState\">\n            <ng-container\n              *ngIf=\"\n                accountStatements.length || accountStatementsFilterParams.dateFrom;\n                else accountStatementsEmptyState\n              \"\n            >\n              <bb-account-statement-business-filters></bb-account-statement-business-filters>\n              <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_FILTERED; else loadingState\">\n                <ng-container *ngIf=\"accountStatements.length; else accountStatementsFilteredEmptyState\">\n                  <bb-account-statement-business-statements-container></bb-account-statement-business-statements-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"0\">\n          <ng-container *ngTemplateOutlet=\"accountStatementsNoAccountsError\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <ng-container *ngTemplateOutlet=\"accountStatementsMultipleAccountsError\"></ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      data-role=\"account-statements-empty-state\"\n      title=\"No account statements found\"\n      i18n-title=\"No account statements found@@account-statement-business.statements.empty-state.title\"\n      subtitle=\"You don't have any account statements to be displayed for this account.\"\n      i18n-subtitle=\"\n        You don't have any account statements...@@account-statement-business.statements.empty-state.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsErrorState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      data-role=\"account-statements-error-state\"\n      title=\"Account statements are not loading\"\n      i18n-title=\"Account statements are not loading@@account-statement-business.statement-list.error-state.title\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Try to reload the page@@account-statement-business.statement-list.error-state.subtitle\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsFilteredEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      data-role=\"account-statements-filters-empty-state\"\n      i18n-title=\"Account statements filtered state title@@account-statement-business.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        Account statements filtered state subtitle@@account-statement-business.statements.filtered.state.subtitle\"\n      subtitle=\"We can’t find what you’re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsNoAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-no-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"current-accounts\"\n      iconClasses=\"text-muted\"\n      title=\"You did not select an account yet\"\n      i18n-title=\"\n        You did not select an account yet |Error title when no account is\n        selected@@account-statement-business.statements.error.no-account.title\"\n      subtitle=\"No statements to show. You need to select a bank account first.\"\n      i18n-subtitle=\"\n        No statements to show. You need to select a bank account first. |Error subtitle when when no account is\n        selected@@account-statement-business.statements.error.no-account.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsMultipleAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-multiple-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      title=\"You have selected multiple accounts\"\n      i18n-title=\"\n        You have selected multiple accounts |Error title when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.title\"\n      subtitle=\"Please select only one account to display the account information.\"\n      i18n-subtitle=\"\n        Please select only one account to display the account information |Error subtitle when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport { AccountStatementStoreModule } from '@backbase/account-statement-store-ang';\nimport { AccountStatementCommonModule } from '@backbase/account-statement-common-ang';\nimport {\n  AccountStatementBusinessWidgetComponent,\n  AccountStatementBusinessWidgetCustomizableDirective,\n} from './components/account-statement-business-widget/account-statement-business-widget.component';\nimport {\n  AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,\n  AccountStatementBusinessTableComponent,\n  AccountStatementBusinessTableCustomizableDirective,\n} from './components/account-statement-business-table/account-statement-business-table.component';\nimport { AccountStatementViewOnlineBusinessWrapperComponent } from './components/account-statement-view-online-business-wrapper/account-statement-view-online-business-wrapper.component';\nimport {\n  AccountStatementBusinessStatementsContainerComponent,\n  AccountStatementBusinessStatementsContainerCustomizableDirective,\n} from './components/account-statement-business-statements-container/account-statement-business-statements-container.component';\nimport {\n  AccountStatementBusinessFiltersComponent,\n  AccountStatementBusinessFiltersCustomizableDirective,\n} from './components/account-statement-business-filters/account-statement-business-filters.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AccountSelectorModule } from '@backbase/ui-ang/account-selector';\nimport { TableModule } from '@backbase/ui-ang/table';\nimport { LoadButtonModule } from '@backbase/ui-ang/load-button';\nimport { EmptyStateModule } from '@backbase/ui-ang/empty-state';\nimport { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';\nimport { CollapsibleModule } from '@backbase/ui-ang/collapsible';\nimport { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';\nimport { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';\nimport { PaginationModule } from '@backbase/ui-ang/pagination';\nimport { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';\nimport { DropdownMultiSelectModule } from '@backbase/ui-ang/dropdown-multi-select';\nimport { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';\n\nconst components = [\n  AccountStatementBusinessWidgetComponent,\n  AccountStatementBusinessTableComponent,\n  AccountStatementViewOnlineBusinessWrapperComponent,\n  AccountStatementBusinessStatementsContainerComponent,\n  AccountStatementBusinessFiltersComponent,\n];\n\nconst directives = [\n  AccountStatementBusinessTableCustomizableDirective,\n  AccountStatementBusinessWidgetCustomizableDirective,\n  AccountStatementBusinessStatementsContainerCustomizableDirective,\n  AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,\n  AccountStatementBusinessFiltersCustomizableDirective,\n];\n\nconst uiModules = [\n  TableModule,\n  AccountSelectorModule,\n  LoadButtonModule,\n  EmptyStateModule,\n  LoadingIndicatorModule,\n  CollapsibleModule,\n  InputDatepickerModule,\n  InputValidationMessageModule,\n  PaginationModule,\n  DropdownSingleSelectModule,\n  BbDatePipeModule,\n  DropdownMultiSelectModule,\n];\n\n@NgModule({\n  declarations: [...components, ...directives],\n  imports: [\n    ...uiModules,\n    CommonModule,\n    ReactiveFormsModule,\n    BackbaseCoreModule.withConfig({\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      classMap: { AccountStatementBusinessWidgetComponent },\n    }),\n    AccountStatementStoreModule,\n    AccountStatementCommonModule,\n  ],\n  exports: [AccountStatementCommonModule, ...components, ...directives, ...uiModules],\n})\nexport class AccountStatementBusinessWidgetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAOa,yCAA0C,SAAQ,qCAAqC;IAClG,YAAwB,SAAoB;QAC1C,KAAK,CAAC,SAAS,CAAC,CAAC;KAClB;IAES,oBAAoB;;QAC5B,MAAM,YAAY,GAAG,cAAc,CAAC,UAAU,CAAC;QAC/C,OAAO,CAAA,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAI,EAAE,CAAC,YAAY,CAAC,CAAC;KACrF;;uIARU,yCAAyC;2IAAzC,yCAAyC;4FAAzC,yCAAyC;kBADrD,UAAU;;0BAEI,QAAQ;;;ACDvB;;;;;;;AAOO,MAAM,aAAa,GAAG,CAAC,KAAqB,EAAE,KAAa,KAChE,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAA+B,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;AAE5E;;;;;;AAMO,MAAM,oBAAoB,GAAG,CAAC,OAAoC,KACtE,OAA8B,CAAC,EAAE,KAAK,SAAS,CAAC;AAEnD;;;;;;AAMO,MAAM,YAAY,GAAG,CAAC,QAAyC,KACpE,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC;;MCZrD,wCAAwC;IAsBnD,YACmB,EAAe,EACf,KAAiC,EACjC,iBAA4D;QAF5D,OAAE,GAAF,EAAE,CAAa;QACf,UAAK,GAAL,KAAK,CAA4B;QACjC,sBAAiB,GAAjB,iBAAiB,CAA2C;QAtBtE,sBAAiB,GAAG,WAAW,CAAC;QAGhC,uBAAkB,GAAwB,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,IAAI,CAC/F,GAAG,CAAC,OAAO;YACT,MAAM,kBAAkB,GAAG,CAAC,EAAE,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;YAClE,MAAM,iBAAiB,GAAG,CAAC,EAAE,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9E,OAAO,kBAAkB,IAAI,iBAAiB,CAAC;SAChD,CAAC,CACH,CAAC;QAEO,qBAAgB,GAAgC,IAAI,CAAC,yBAAyB,CAAC;QAE/E,0BAAqB,GAAyB,IAAI,CAAC,2BAA2B,CAAC;QAE/E,gBAAW,GAA2B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QAE7D,kBAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC;KAM1D;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM;YACtE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;YACxD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;gBAC9B,QAAQ,EAAE,IAAI,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE;gBACxC,mBAAmB,EAAE,MAAM,CAAC,UAAU;gBACtC,UAAU,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC;aAC7B,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED,SAAS;QACP,IAAI,CAAC,kBAAkB;aACpB,IAAI,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,EAAE,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;aAChF,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC;gBAC/C,gBAAgB,EAAE;oBAChB,IAAI;oBACJ,IAAI,EAAE,CAAC;iBACR;gBACD,YAAY,EAAE;oBACZ,QAAQ,EAAE,SAAS;oBACnB,MAAM,EAAE,SAAS;oBACjB,UAAU,EAAE,WAAW,CAAC,OAAO;oBAC/B,QAAQ,EAAE,SAAS;iBACpB;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;QAEL,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,mBAAmB,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC;QAE/E,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,iBAAiB;QACf,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;SACzC;KACF;IAED,QAAQ;QACN,MAAM,4BAA4B,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAChF,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC5D,IAAI,4BAA4B,IAAI,iBAAiB,CAAC,OAAO,EAAE;YAC7D,4BAA4B,CAAC,KAAK,EAAE,CAAC;SACtC;QAED,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,eAAe;QACb,MAAM,4BAA4B,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAChF,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAE1D,MAAM,cAAc,GAAgB,4BAA4B,IAAI,4BAA4B,CAAC,KAAK,CAAC;QACvG,MAAM,mBAAmB,GAAG,4BAA4B,CAAC,cAAc,CAAC,EAAE,CAAC;QAC3E,MAAM,IAAI,GAAG,mBAAmB,CAAC,IAAI,IAAI,mBAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAChF,MAAM,EAAE,GAAG,mBAAmB,CAAC,EAAE,IAAI,mBAAmB,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC;QAE1E,IAAI,iBAAiB,EAAE;YACrB,MAAM,aAAa,GAAG,IAAI,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;YACrD,iBAAiB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;SAC3C;QAED,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;IAEO,aAAa;QACnB,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxD,MAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACzE,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC5D,MAAM,0BAA0B,GAAG,qBAAqB,IAAI,qBAAqB,CAAC,KAAK,CAAC;QACxF,MAAM,eAAe,GAAG,iBAAiB,IAAI,iBAAiB,CAAC,KAAK,CAAC;QACrE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,CAAC,eAAe,IAAI,eAAe,CAAC,KAAK,KAAK,EAAE,CAAC;QAExF,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI;YAC3D,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC;gBAC/C,gBAAgB,EAAE;oBAChB,IAAI;oBACJ,IAAI,EAAE,CAAC;iBACR;gBACD,YAAY,EAAE;oBACZ,QAAQ;oBACR,MAAM,EAAE,MAAM,IAAI,QAAQ;oBAC1B,UAAU,EAAE,0BAA0B,IAAI,SAAS;oBACnD,QAAQ,EAAE,eAAe,IAAI,SAAS;iBACvC;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;KAClC;IAED,IAAY,yBAAyB;QACnC,OAAO,IAAI,CAAC,KAAK,CAAC,mCAAmC,CAAC,IAAI,CACxD,GAAG,CAAC,WAAW,KAAK;YAClB,WAAW,EAAE,0BAA0B,CAAC,WAAW,CAAC,WAAW,CAAC;YAChE,WAAW,EAAE,0BAA0B,CAAC,WAAW,CAAC,WAAW,CAAC;SACjE,CAAC,CAAC,CACJ,CAAC;KACH;IAED,IAAY,2BAA2B;QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,mCAAmC,CAAC,IAAI,CACxD,GAAG,CAAC,WAAW;YACb,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACpD,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC,KAAkB;gBAChD,MAAM,WAAW,GAAG,4BAA4B,CAAC,KAAK,CAAC,EAA8B,CAAC;gBACtF,OAAO,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,WAAW,CAAC;aACpD,CAAC,CAAC;SACJ,CAAC,CACH,CAAC;KACH;;sIA7IU,wCAAwC;0HAAxC,wCAAwC,2LCrBrD,uwYAsPA,81DDhFa,oDAAoD;4FAjJpD,wCAAwC;kBAJpD,SAAS;mBAAC;oBACT,QAAQ,EAAE,uCAAuC;oBACjD,WAAW,EAAE,qDAAqD;iBACnE;kMAE4B,YAAY;sBAAtC,SAAS;uBAAC,cAAc;;MAgJd,oDAAqD,SAAQ,UAUzE;;kJAVY,oDAAoD;sIAApD,oDAAoD;4FAApD,oDAAoD;kBADhE,SAAS;mBAAC,EAAE,QAAQ,EAAE,iDAAiD,EAAE;;;ME7J7D,kDAAkD;IAL/D;QAWW,yBAAoB,GAAG,EAAE,CAAC;KAGpC;IARC,IACI,SAAS,CAAC,SAAqC;QACjD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,WAAW,KAAK,iBAAiB,CAAC,CAAC;KAC3F;;gJAJU,kDAAkD;oIAAlD,kDAAkD,2KCR/D,sLAKA;4FDGa,kDAAkD;kBAL9D,SAAS;mBAAC;oBACT,QAAQ,EAAE,mDAAmD;oBAC7D,WAAW,EAAE,iEAAiE;oBAC9E,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;8BAGK,SAAS;sBADZ,KAAK;gBAKG,oBAAoB;sBAA5B,KAAK;;;MEaK,sCAAsC;IA6BjD,YACmB,WAAwC,EACxC,oBAAyC,EACzC,iBAA4D;QAF5D,gBAAW,GAAX,WAAW,CAA6B;QACxC,yBAAoB,GAApB,oBAAoB,CAAqB;QACzC,sBAAiB,GAAjB,iBAAiB,CAA2C;QAftE,YAAO,GAAG,KAAK,CAAC;QAEhB,iBAAY,GAAG,IAAI,CAAC;QAEnB,SAAI,GAAG,IAAI,YAAY,EAAa,CAAC;QAItC,uBAAkB,GAAG,kBAAkB,CAAC;QAEzC,2BAAsB,GAAuB,EAAE,CAAC;KAMpD;IAhCJ,IACI,iBAAiB,CAAC,iBAAqC;QACzD,IAAI,CAAC,sBAAsB,GAAG,iBAAiB,CAAC,GAAG,CAAC,gBAAgB,qCAC/D,gBAAgB,KACnB,SAAS,EAAE,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,qCAC7C,QAAQ,KACX,GAAG,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IACnC,CAAC,IACH,CAAC,CAAC;KACL;IACD,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,sBAAsB,CAAC;KACpC;IAsBD,MAAM,CAAC,SAAoB;QACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC3B;IAED,iBAAiB;QACf,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,SAAS,CAAC,GAAG;YAC3D,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;gBACzC,MAAM,EAAE,IAAI,CAAC,iCAAiC;gBAC9C,OAAO,EAAE,EAAE;gBACX,QAAQ,EAAE,OAAO;gBACjB,GAAG;aACJ,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED,YAAY,CAAC,MAAc;QACzB,OAAO,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;KACvG;IAEO,eAAe,CAAC,QAAkC;QACxD,OAAO,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,8BAA8B,CAAC,QAAQ,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;KAC5F;;oIAxDU,sCAAsC;wHAAtC,sCAAsC,oYC3BnD,knRA4MA,utBDrHa,kDAAkD,uyBAYlD,8EAA8E;4FAxE9E,sCAAsC;kBALlD,SAAS;mBAAC;oBACT,QAAQ,EAAE,qCAAqC;oBAC/C,WAAW,EAAE,mDAAmD;oBAChE,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;6MAGK,iBAAiB;sBADpB,KAAK;gBAcG,aAAa;sBAArB,KAAK;gBAEG,OAAO;sBAAf,KAAK;gBAEG,YAAY;sBAApB,KAAK;gBAEI,IAAI;sBAAb,MAAM;gBAEyC,iCAAiC;sBAAhF,SAAS;uBAAC,mCAAmC;;MAqCnC,kDAAmD,SAAQ,UAOvE;;gJAPY,kDAAkD;oIAAlD,kDAAkD;4FAAlD,kDAAkD;kBAD9D,SAAS;mBAAC,EAAE,QAAQ,EAAE,+CAA+C,EAAE;;MAa3D,8EAA+E,SAAQ,UAGnG;;4KAHY,8EAA8E;gKAA9E,8EAA8E;4FAA9E,8EAA8E;kBAH1F,SAAS;mBAAC;oBACT,QAAQ,EAAE,oFAAoF;iBAC/F;;;MEnFY,oDAAoD;IAY/D,YACmB,KAAiC,EACjC,iBAA4D;QAD5D,UAAK,GAAL,KAAK,CAA4B;QACjC,sBAAiB,GAAjB,iBAAiB,CAA2C;QAbtE,uBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;QACnD,gBAAW,GAAG,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC;QACtD,8BAAyB,GAAG,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC;QACjE,mBAAc,GAAG,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC;QAC5D,sBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,kCAAkC,CAAC;QAClE,kBAAa,GAAG,YAAY,CAAC;QAC7B,oBAAe,GAAG,cAAc,CAAC;QACjC,oBAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC;QACzD,kBAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC;QAC7C,cAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAKxE;IAEJ,QAAQ,CAAC,MAAsB;QAC7B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI;YAC3B,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC;gBAC/C,gBAAgB,EAAE;oBAChB,IAAI;oBACJ,IAAI,EAAE,MAAM,CAAC,IAAI;iBAClB;gBACD,MAAM,EAAE,IAAI;aACb,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED,MAAM,CAAC,SAAoB;QACzB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI;YAC3B,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC;gBAC/C,aAAa,EAAE,SAAS;gBACxB,gBAAgB,EAAE;oBAChB,IAAI;oBACJ,IAAI,EAAE,CAAC;iBACR;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;IAED,gBAAgB,CAAC,IAAY;QAC3B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI;YAC3B,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC;gBAC/C,gBAAgB,EAAE;oBAChB,IAAI;oBACJ,IAAI,EAAE,IAAI;iBACX;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;;kJAlDU,oDAAoD;sIAApD,oDAAoD,0FCfjE,klFAkEA,stBDGa,gEAAgE;4FAtDhE,oDAAoD;kBALhE,SAAS;mBAAC;oBACT,QAAQ,EAAE,oDAAoD;oBAC9D,WAAW,EAAE,kEAAkE;oBAC/E,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;MAuDY,gEAAiE,SAAQ,UAarF;;8JAbY,gEAAgE;kJAAhE,gEAAgE;4FAAhE,gEAAgE;kBAD5E,SAAS;mBAAC,EAAE,QAAQ,EAAE,6DAA6D,EAAE;;;ME3CzE,uCACX,SAAQ,mCAA8E;IAsBtF,YACmB,KAAqB,EACrB,KAAiC,EAClD,iBAA4D;QAE5D,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAJR,UAAK,GAAL,KAAK,CAAgB;QACrB,UAAK,GAAL,KAAK,CAA4B;QArB3C,cAAS,GAAG,EAAE,CAAC;QACf,uBAAkB,GAAmC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;QACnF,8BAAyB,GAA6B,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC;QAC3F,4BAAuB,GAAkC,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC;QAC5F,cAAS,GAAuB,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC/E,mCAA8B,GACrC,IAAI,CAAC,KAAK,CAAC,8BAA8B,CAAC;QACnC,kBAAa,GAAG,YAAY,CAAC;QAErB,aAAQ,GAAG,IAAI,OAAO,EAAQ,CAAC;QACxC,eAAU,GAAG,IAAI,eAAe,CAAS,EAAE,CAAC,CAAC;;;QAI5C,gBAAW,GAAyB,KAAK,CAChD,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,iBAAiB,CAAC,EAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CACvD,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,IAAI,aAAa,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;KAQzD;IAED,WAAW;QACT,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACtC;KACF;IAED,QAAQ;QACN,IAAI,CAAC,gCAAgC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW;YACxF,MAAM,iBAAiB,GAAG,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,EAAE,EAAE,CAAC;YAChE,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC,EAAE,iBAAiB,EAAE,CAAC,CAAC;SACnE,CAAC,CAAC;QAEH,MAAM,cAAc,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,iBAAiB,CAAC,aAAa;YACpC,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,WAAW,EAAmB,CAAC,CAAC;SAC1G,CAAC,CAAC,IAAI,CACL,KAAK,EAAE,EACP,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM;YAC5B,MAAM;YACN,SAAS;SACV,CAAC,CAAC,CACJ,CAAC;QAEF,aAAa,CAAC;;YAEZ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,MAAM,KAAK,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,SAAS;YACd,cAAc;SACf,CAAC;aACC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,EAAE,aAAa,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC;gBAC/C,UAAU,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;gBACpC,aAAa;gBACb,gBAAgB,EAAE;oBAChB,IAAI,EAAE,CAAC;oBACP,IAAI;iBACL;;gBAED,YAAY,EAAE;oBACZ,UAAU,EAAE,WAAW,CAAC,OAAO;iBAChC;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;QAEL,IAAI,CAAC,iBAAiB,CAAC,aAAa;aACjC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC/C,SAAS,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAAC;KACxD;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;KAC1B;IAED,IAAY,gCAAgC;QAC1C,OAAO,aAAa,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAC/G,GAAG,CAAC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,KAAK,kBAAkB,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC,CAC5G,CAAC;KACH;;qIA1FU,uCAAuC;yHAAvC,uCAAuC,mGAFvC,CAAC,0BAA0B,EAAE,yCAAyC,CAAC,sECvBpF,imMAuIA,wwBDhBa,mDAAmD;4FA9FnD,uCAAuC;kBALnD,SAAS;mBAAC;oBACT,QAAQ,EAAE,sCAAsC;oBAChD,WAAW,EAAE,oDAAoD;oBACjE,SAAS,EAAE,CAAC,0BAA0B,EAAE,yCAAyC,CAAC;iBACnF;qMAKU,SAAS;sBAAjB,KAAK;;MA0FK,mDAAoD,SAAQ,UAUxE;;iJAVY,mDAAmD;qIAAnD,mDAAmD;4FAAnD,mDAAmD;kBAD/D,SAAS;mBAAC,EAAE,QAAQ,EAAE,gDAAgD,EAAE;;;AEjFzE,MAAM,UAAU,GAAG;IACjB,uCAAuC;IACvC,sCAAsC;IACtC,kDAAkD;IAClD,oDAAoD;IACpD,wCAAwC;CACzC,CAAC;AAEF,MAAM,UAAU,GAAG;IACjB,kDAAkD;IAClD,mDAAmD;IACnD,gEAAgE;IAChE,8EAA8E;IAC9E,oDAAoD;CACrD,CAAC;AAEF,MAAM,SAAS,GAAG;IAChB,WAAW;IACX,qBAAqB;IACrB,gBAAgB;IAChB,gBAAgB;IAChB,sBAAsB;IACtB,iBAAiB;IACjB,qBAAqB;IACrB,4BAA4B;IAC5B,gBAAgB;IAChB,0BAA0B;IAC1B,gBAAgB;IAChB,yBAAyB;CAC1B,CAAC;MAiBW,oCAAoC;;kIAApC,oCAAoC;mIAApC,oCAAoC,iBA7C/C,uCAAuC;QACvC,sCAAsC;QACtC,kDAAkD;QAClD,oDAAoD;QACpD,wCAAwC,EAIxC,kDAAkD;QAClD,mDAAmD;QACnD,gEAAgE;QAChE,8EAA8E;QAC9E,oDAAoD,aAIpD,WAAW;QACX,qBAAqB;QACrB,gBAAgB;QAChB,gBAAgB;QAChB,sBAAsB;QACtB,iBAAiB;QACjB,qBAAqB;QACrB,4BAA4B;QAC5B,gBAAgB;QAChB,0BAA0B;QAC1B,gBAAgB;QAChB,yBAAyB,EAOvB,YAAY;QACZ,mBAAmB,yBAKnB,2BAA2B;QAC3B,4BAA4B,aAEpB,4BAA4B,EA3CtC,uCAAuC;QACvC,sCAAsC;QACtC,kDAAkD;QAClD,oDAAoD;QACpD,wCAAwC,EAIxC,kDAAkD;QAClD,mDAAmD;QACnD,gEAAgE;QAChE,8EAA8E;QAC9E,oDAAoD,EAIpD,WAAW;QACX,qBAAqB;QACrB,gBAAgB;QAChB,gBAAgB;QAChB,sBAAsB;QACtB,iBAAiB;QACjB,qBAAqB;QACrB,4BAA4B;QAC5B,gBAAgB;QAChB,0BAA0B;QAC1B,gBAAgB;QAChB,yBAAyB;mIAkBd,oCAAoC,YAbtC;YACP,GAAG,SAAS;YACZ,YAAY;YACZ,mBAAmB;YACnB,kBAAkB,CAAC,UAAU,CAAC;;gBAE5B,QAAQ,EAAE,EAAE,uCAAuC,EAAE;aACtD,CAAC;YACF,2BAA2B;YAC3B,4BAA4B;SAC7B,EACS,4BAA4B,EA3BtC,WAAW;QACX,qBAAqB;QACrB,gBAAgB;QAChB,gBAAgB;QAChB,sBAAsB;QACtB,iBAAiB;QACjB,qBAAqB;QACrB,4BAA4B;QAC5B,gBAAgB;QAChB,0BAA0B;QAC1B,gBAAgB;QAChB,yBAAyB;4FAkBd,oCAAoC;kBAfhD,QAAQ;mBAAC;oBACR,YAAY,EAAE,CAAC,GAAG,UAAU,EAAE,GAAG,UAAU,CAAC;oBAC5C,OAAO,EAAE;wBACP,GAAG,SAAS;wBACZ,YAAY;wBACZ,mBAAmB;wBACnB,kBAAkB,CAAC,UAAU,CAAC;;4BAE5B,QAAQ,EAAE,EAAE,uCAAuC,EAAE;yBACtD,CAAC;wBACF,2BAA2B;wBAC3B,4BAA4B;qBAC7B;oBACD,OAAO,EAAE,CAAC,4BAA4B,EAAE,GAAG,UAAU,EAAE,GAAG,UAAU,EAAE,GAAG,SAAS,CAAC;iBACpF;;;AClFD;;;;;;"}