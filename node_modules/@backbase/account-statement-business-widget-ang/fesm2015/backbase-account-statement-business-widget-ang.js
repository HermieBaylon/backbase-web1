import * as i0 from '@angular/core';
import { Injectable, Optional, Component, ViewChild, Directive, ChangeDetectionStrategy, Input, EventEmitter, Output, NgModule } from '@angular/core';
import * as i8$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i2 from '@backbase/account-statement-store-ang';
import { AccountStatementStoreModel, AccountStatementStoreModule } from '@backbase/account-statement-store-ang';
import * as i1$2 from '@backbase/account-statement-common-ang';
import { AccountStatementBasePropertiesService, PaginationType, DatePeriods, CUSTOM_FILTER_PERIODS_VALUES, convertDateObjToDateStruct, mimeTypeExtensions, LoadingState, AccountStatementBaseWidgetComponent, stringToWords, today, getDateFilterLimit, AccountStatementCommonModule } from '@backbase/account-statement-common-ang';
import { of, Subject, BehaviorSubject, merge, combineLatest } from 'rxjs';
import { pluck, map, first, filter, withLatestFrom, takeUntil } from 'rxjs/operators';
import * as i1$3 from '@angular/router';
import * as i1$1 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import * as i4 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i5 from '@backbase/ui-ang/icon';
import * as i6 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i7 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i8 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i9 from '@backbase/ui-ang/dropdown-multi-select';
import { DropdownMultiSelectModule } from '@backbase/ui-ang/dropdown-multi-select';
import * as i10 from '@backbase/ui-ang/button';
import * as i2$1 from '@backbase/ui-ang/notification';
import * as i5$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i6$1 from '@backbase/ui-ang/table';
import { TableModule } from '@backbase/ui-ang/table';
import * as i8$2 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i4$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i5$2 from '@backbase/ui-ang/pagination';
import { PaginationModule } from '@backbase/ui-ang/pagination';
import * as i7$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';

class AccountStatementBusinessPropertiesService extends AccountStatementBasePropertiesService {
    constructor(itemModel) {
        super(itemModel);
    }
    getPaginationTypeIM$() {
        var _a;
        const defaultValue = PaginationType.Pagination;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('paginationType', defaultValue)) || of(defaultValue);
    }
}
AccountStatementBusinessPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementBusinessPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

/**
 * Extract the given param from activated route.
 *
 * @param route of type ActivatedRoute
 * @param param URL param that needs to be get from the active route
 * @returns Observable of extracted param
 */
const getRouteParam = (route, param) => route.paramMap.pipe(pluck('params', param));
/**
 * Check if the given object is of type ProductSummaryItem or not
 *
 * @param account Either ProductSummaryItem or string
 * @returns boolean
 */
const isProductsummaryItem = (account) => account.id !== undefined;
/**
 * Check if the passed parameter is ProductSummaryItem array or accountId's array and return id from it
 *
 * @param accounts Array of either ProductSummaryItem or string
 * @returns string accountId
 */
const getAccountId = (accounts) => isProductsummaryItem(accounts[0]) ? accounts[0].id : accounts[0];

class AccountStatementBusinessFiltersComponent {
    constructor(fb, store, propertiesService) {
        this.fb = fb;
        this.store = store;
        this.propertiesService = propertiesService;
        this.filterDatePeriods = DatePeriods;
        this.areFiltersApplied$ = this.store.accountStatementsFilterParams$.pipe(map(filters => {
            const isDateRangeApplied = !!(filters.dateFrom && filters.dateTo);
            const isCategoryApplied = !!(filters.category && filters.category.length > 0);
            return isDateRangeApplied || isCategoryApplied;
        }));
        this.datePreferences$ = this.initializeDatePreferences;
        this.datePeriodsToDisplay$ = this.initializeFilterDatePeriods;
        this.categories$ = this.store.categories$;
        this.showCategory$ = this.propertiesService.showCategory$;
    }
    ngOnInit() {
        this.store.accountStatementsFilterParams$.pipe(first()).subscribe(params => {
            const { dateFrom: from, dateTo: to, category } = params;
            this.filterForm = this.fb.group({
                bookDate: from && to ? { from, to } : '',
                customFilterPeriods: params.datePeriod,
                categories: [category || []],
            });
        });
    }
    resetForm() {
        this.areFiltersApplied$
            .pipe(first(), filter(Boolean), withLatestFrom(this.propertiesService.pageSize$))
            .subscribe(([, size]) => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: 0,
                },
                filterParams: {
                    dateFrom: undefined,
                    dateTo: undefined,
                    datePeriod: DatePeriods.AllTime,
                    category: undefined,
                },
            });
        });
        this.filterForm.reset({ customFilterPeriods: this.filterDatePeriods.AllTime });
        this.focusFilterButton();
    }
    focusFilterButton() {
        if (this.filterButton) {
            this.filterButton.nativeElement.focus();
        }
    }
    onSubmit() {
        const customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');
        const bookDateFormField = this.filterForm.controls.bookDate;
        if (customFilterPeriodsFormField && bookDateFormField.touched) {
            customFilterPeriodsFormField.reset();
        }
        this.applyFormData();
        this.focusFilterButton();
    }
    setCustomFilter() {
        const customFilterPeriodsFormField = this.filterForm.get('customFilterPeriods');
        const bookDateFormField = this.filterForm.get('bookDate');
        const selectedPeriod = customFilterPeriodsFormField && customFilterPeriodsFormField.value;
        const selectedPeriodDates = CUSTOM_FILTER_PERIODS_VALUES[selectedPeriod]();
        const from = selectedPeriodDates.from && selectedPeriodDates.from.toISOString();
        const to = selectedPeriodDates.to && selectedPeriodDates.to.toISOString();
        if (bookDateFormField) {
            const bookDateValue = from && to ? { from, to } : '';
            bookDateFormField.setValue(bookDateValue);
        }
        this.applyFormData();
    }
    applyFormData() {
        const bookDateControl = this.filterForm.get('bookDate');
        const selectedPeriodControl = this.filterForm.get('customFilterPeriods');
        const categoriesControl = this.filterForm.get('categories');
        const selectedPeriodControlValue = selectedPeriodControl && selectedPeriodControl.value;
        const categoriesValue = categoriesControl && categoriesControl.value;
        const { from: dateFrom, to: dateTo } = (bookDateControl && bookDateControl.value) || {};
        this.propertiesService.pageSize$.pipe(first()).subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: 0,
                },
                filterParams: {
                    dateFrom,
                    dateTo: dateTo || dateFrom,
                    datePeriod: selectedPeriodControlValue || undefined,
                    category: categoriesValue || undefined,
                },
            });
        });
        this.filterForm.markAsPristine();
    }
    get initializeDatePreferences() {
        return this.store.accountStatementsWidgetPreferences$.pipe(map(preferences => ({
            minimalDate: convertDateObjToDateStruct(preferences.minimalDate),
            maximumDate: convertDateObjToDateStruct(preferences.maximumDate),
        })));
    }
    get initializeFilterDatePeriods() {
        return this.store.accountStatementsWidgetPreferences$.pipe(map(preferences => {
            const datePeriodValues = Object.values(DatePeriods);
            return datePeriodValues.filter((value) => {
                const periodValue = CUSTOM_FILTER_PERIODS_VALUES[value]();
                return periodValue.from >= preferences.minimalDate;
            });
        }));
    }
}
AccountStatementBusinessFiltersComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersComponent, deps: [{ token: i1$1.FormBuilder }, { token: i2.AccountStatementStoreModel }, { token: AccountStatementBusinessPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementBusinessFiltersComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessFiltersComponent, selector: "bb-account-statement-business-filters", viewQueries: [{ propertyName: "filterButton", first: true, predicate: ["filterButton"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbAccountStatementBusinessFiltersCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    areFiltersApplied: (areFiltersApplied$ | async)!,\n    datePreferences: (datePreferences$ | async)!,\n    datePeriodsToDisplay: (datePeriodsToDisplay$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    categories: (categories$ | async)!,\n    filterForm: filterForm\n  }\"\n></ng-container>\n<ng-template\n  bbAccountStatementBusinessFiltersCustomizable\n  let-host\n  let-areFiltersApplied=\"context.areFiltersApplied\"\n  let-filterForm=\"context.filterForm\"\n  let-datePreferences=\"context.datePreferences\"\n  let-datePeriodsToDisplay=\"context.datePeriodsToDisplay\"\n  let-showCategory=\"context.showCategory\"\n  let-categories=\"context.categories\"\n>\n  <bb-collapsible-ui>\n    <form [formGroup]=\"filterForm\">\n      <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\" let-toggle=\"toggle\">\n        <div class=\"bb-block bb-block--md\">\n          <div class=\"bb-stack bb-stack--wrap\">\n            <button\n              class=\"bb-stack__item bb-stack__item--spacing-lg bb-stack__item--push-left-sm-down bb-stack__break--sm-down bb-block bb-block--md-md-down\"\n              bbButton\n              #filterButton\n              data-role=\"collapsible-filter-btn\"\n              [color]=\"areFiltersApplied && !isOpen ? 'primary' : 'secondary'\"\n              [ngClass]=\"{ active: isOpen }\"\n              (click)=\"toggle()\"\n            >\n              <bb-icon-ui [cropped]=\"true\" name=\"filter\"></bb-icon-ui>\n              <span\n                *ngIf=\"areFiltersApplied; else filterButtonTextDefault\"\n                i18n=\"\n                  Filters applied|Filter form button filter\n                  label@@account-statement-business.filters.button.applied-label\"\n              >\n                Filters applied\n              </span>\n              <ng-template #filterButtonTextDefault>\n                <span\n                  i18n=\"Filter|Filter form button filter label@@account-statement-business.filters.button.filter-label\"\n                >\n                  Filter\n                </span>\n              </ng-template>\n            </button>\n\n            <bb-dropdown-single-select-ui\n              (change)=\"host.setCustomFilter()\"\n              class=\"bb-stack__item bb-stack__break--sm-down\"\n              formControlName=\"customFilterPeriods\"\n              [required]=\"false\"\n              [attr.data-role]=\"'dropdown-single-select'\"\n              placeholder=\"Custom\"\n              i18n-placeholder=\"Custom single select placeholder@@bb-dropdown-single-select.custom.placeholder\"\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Today) !== -1\"\n                [value]=\"host.filterDatePeriods.Today\"\n                label=\"Today\"\n                i18n-label=\"Today option label@@bb-dropdown-single-select-option-ui.today.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.Yesterday) !== -1\"\n                [value]=\"host.filterDatePeriods.Yesterday\"\n                label=\"Yesterday\"\n                i18n-label=\"Yesterday option label@@bb-dropdown-single-select-option-ui.yesterday.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisWeek\"\n                label=\"This week\"\n                i18n-label=\"This week option label@@bb-dropdown-single-select-option-ui.this-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastWeek) !== -1\"\n                [value]=\"host.filterDatePeriods.LastWeek\"\n                label=\"Last week\"\n                i18n-label=\"Last week option label@@bb-dropdown-single-select-option-ui.last-week.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisMonth\"\n                label=\"This month\"\n                i18n-label=\"This month option label@@bb-dropdown-single-select-option-ui.this-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastMonth) !== -1\"\n                [value]=\"host.filterDatePeriods.LastMonth\"\n                label=\"Last month\"\n                i18n-label=\"Last month option label@@bb-dropdown-single-select-option-ui.last-month.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisQuarter\"\n                label=\"This quarter\"\n                i18n-label=\"This quarter option label@@bb-dropdown-single-select-option-ui.this-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.LastQuarter) !== -1\"\n                [value]=\"host.filterDatePeriods.LastQuarter\"\n                label=\"Last quarter\"\n                i18n-label=\"Last quarter option label@@bb-dropdown-single-select-option-ui.last-quarter.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                *ngIf=\"datePeriodsToDisplay.indexOf(host.filterDatePeriods.ThisYear) !== -1\"\n                [value]=\"host.filterDatePeriods.ThisYear\"\n                label=\"This year\"\n                i18n-label=\"This year option label@@bb-dropdown-single-select-option-ui.this-year.label\"\n              ></bb-dropdown-single-select-option-ui>\n              <bb-dropdown-single-select-option-ui\n                [value]=\"host.filterDatePeriods.AllTime\"\n                label=\"All time\"\n                i18n-label=\"All time option label@@bb-dropdown-single-select-option-ui.all-time.label\"\n              ></bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n          </div>\n        </div>\n      </ng-template>\n\n      <ng-template bbCollapsibleBody let-toggle=\"toggle\">\n        <div\n          class=\"card-body account-statements-filter__form-container account-statements-filter__form-container--no-container\"\n          data-role=\"filter-form\"\n        >\n          <div class=\"row\">\n            <div class=\"bb-block bb-block--md col-12 col-sm-6\">\n              <div class=\"account-statements-filter__date-field-wrapper\">\n                <bb-input-datepicker-ui\n                  i18n-label=\"\n                    Book date|Filter form book date label@@account-statement-business.filters.datepicker-label\"\n                  label=\"Date range\"\n                  labelClasses=\"form-label\"\n                  [rangeSelection]=\"true\"\n                  [minDate]=\"datePreferences.minimalDate\"\n                  [maxDate]=\"datePreferences.maximumDate\"\n                  aria-label=\"Book date\"\n                  i18n-aria-label=\"\n                    Book date filter aria label@@account-statement-business.filters.datepicker.aria-label\"\n                  [attr.aria-invalid]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                  formControlName=\"bookDate\"\n                  data-role=\"book-date\"\n                ></bb-input-datepicker-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"filterForm.controls['bookDate'].hasError('invalidDateFormat')\"\n                >\n                  <span\n                    i18n=\"\n                      Error invalid date format in book date\n                      range@@account-statement-business.filters.datepicker.error.invalid-date-format\"\n                    data-role=\"invalid-book-date-error-message\"\n                    >Invalid date format</span\n                  >\n                </bb-input-validation-message-ui>\n\n                <bb-input-validation-message-ui\n                  class=\"account-statements-filter__validation-message\"\n                  aria-live=\"polite\"\n                  [showErrors]=\"\n                    !host.filterForm.controls['bookDate'].hasError('invalidDateFormat') &&\n                    (host.filterForm.controls['bookDate'].hasError('dateGreaterThanMaxDate') ||\n                      host.filterForm.controls['bookDate'].hasError('dateLessThanMinDate'))\n                  \"\n                >\n                  <span\n                    i18n=\"\n                      Selected date range contains invalid dates\n                      range@@account-statement-business.filters.datepicker.error.dateLessThanMinDate\"\n                    data-role=\"invalid-book-date-limit-error-message\"\n                    >The selected dates include values outside the allowed date range. Please select a date interval in\n                    the permitted time frame.</span\n                  >\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n            <ng-container *ngIf=\"showCategory\">\n              <bb-dropdown-multi-select-ui\n                *ngIf=\"categories.length\"\n                [formControl]=\"host.filterForm.controls['categories']\"\n                class=\"bb-block bb-block--lg col-12 col-sm-6\"\n                data-role=\"categories-filter\"\n                placeholder=\"Select product category\"\n                i18n-placeholder=\"\n                  Category select placeholder|Category multiple\n                  select@@account-statement-business.filter.form.categories.placeholder\"\n                label=\"Category\"\n                i18n-label=\"\n                  Category label|Category multiple select@@account-statement-business.filter.form.categories.label\"\n              >\n                <bb-dropdown-multi-select-option-ui *ngFor=\"let option of categories\" [label]=\"option\" [value]=\"option\">\n                </bb-dropdown-multi-select-option-ui>\n              </bb-dropdown-multi-select-ui>\n            </ng-container>\n          </div>\n          <div class=\"bb-button-bar\">\n            <button\n              bbButton\n              type=\"submit\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"apply\"\n              [disabled]=\"filterForm.pristine || filterForm.invalid\"\n              (click)=\"host.onSubmit(); toggle()\"\n              i18n=\"Apply|Filter form button apply label@@account-statement-business.filters.button.apply-label\"\n            >\n              Apply\n            </button>\n            <button\n              bbButton\n              color=\"secondary\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"close\"\n              (click)=\"toggle(); host.focusFilterButton()\"\n              i18n=\"Close|Filter form button close label@@account-statement-business.filters.button.close-label\"\n            >\n              Close\n            </button>\n            <button\n              bbButton\n              color=\"link\"\n              buttonSize=\"sm\"\n              class=\"bb-button-bar__button\"\n              data-role=\"clear-all\"\n              *ngIf=\"filterForm.dirty || areFiltersApplied\"\n              (click)=\"host.resetForm()\"\n              i18n=\"Clear All|Filter form button clear label@@account-statement-business.filters.button.clear-label\"\n            >\n              Clear all\n            </button>\n          </div>\n        </div>\n      </ng-template>\n    </form>\n  </bb-collapsible-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i6.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i6.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0.forwardRef(function () { return i7.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i8.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i9.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0.forwardRef(function () { return i9.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementBusinessFiltersCustomizableDirective; }), selector: "[bbAccountStatementBusinessFiltersCustomizable]" }, { type: i0.forwardRef(function () { return i1$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i4.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0.forwardRef(function () { return i10.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i8$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i1$1.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i4.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0.forwardRef(function () { return i7.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i7.MaxDateValidatorDirective; }), selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i0.forwardRef(function () { return i1$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i8$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0.forwardRef(function () { return i8$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-business-filters',
                    templateUrl: './account-statement-business-filters.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.FormBuilder }, { type: i2.AccountStatementStoreModel }, { type: AccountStatementBusinessPropertiesService }]; }, propDecorators: { filterButton: [{
                type: ViewChild,
                args: ['filterButton']
            }] } });
class AccountStatementBusinessFiltersCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessFiltersCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessFiltersCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessFiltersCustomizableDirective, selector: "[bbAccountStatementBusinessFiltersCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessFiltersCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementBusinessFiltersCustomizable]' }]
        }] });

class AccountStatementViewOnlineBusinessWrapperComponent {
    constructor() {
        this.describedByElementId = '';
    }
    set documents(documents) {
        this.documentPDF = documents.find(document => document.contentType === 'application/pdf');
    }
}
AccountStatementViewOnlineBusinessWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementViewOnlineBusinessWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountStatementViewOnlineBusinessWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementViewOnlineBusinessWrapperComponent, selector: "bb-account-statement-view-online-business-wrapper", inputs: { documents: "documents", describedByElementId: "describedByElementId" }, ngImport: i0, template: "<bb-account-statement-view-online\n  *ngIf=\"documentPDF\"\n  [href]=\"documentPDF.url!\"\n  [describedByElementId]=\"describedByElementId\"\n></bb-account-statement-view-online>\n", components: [{ type: i1$2.ӨAccountStatementViewOnlineComponent, selector: "bb-account-statement-view-online", inputs: ["href", "describedByElementId"] }], directives: [{ type: i8$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementViewOnlineBusinessWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-view-online-business-wrapper',
                    templateUrl: './account-statement-view-online-business-wrapper.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { documents: [{
                type: Input
            }], describedByElementId: [{
                type: Input
            }] } });

class AccountStatementBusinessTableComponent {
    constructor(dataService, notificationsService, propertiesService) {
        this.dataService = dataService;
        this.notificationsService = notificationsService;
        this.propertiesService = propertiesService;
        this.loading = false;
        this.showCategory = true;
        this.sort = new EventEmitter();
        this.mimeTypeExtensions = mimeTypeExtensions;
        this.accountStatementsValue = [];
    }
    set accountStatements(accountStatements) {
        this.accountStatementsValue = accountStatements.map(accountStatement => (Object.assign(Object.assign({}, accountStatement), { documents: accountStatement.documents.map(document => (Object.assign(Object.assign({}, document), { url: this.getDocumentLink(document) }))) })));
    }
    get accountStatements() {
        return this.accountStatementsValue;
    }
    onSort(sortEvent) {
        this.sort.emit(sortEvent);
    }
    onDownloadFailure() {
        this.propertiesService.notificationDismissTime$.subscribe(ttl => {
            this.notificationsService.showNotification({
                header: this.downloadFailureNotificationHeader,
                message: '',
                modifier: 'error',
                ttl,
            });
        });
    }
    getDirection(column) {
        return this.sortingParams && this.sortingParams.column === column ? this.sortingParams.direction : '';
    }
    getDocumentLink(document) {
        return document.url || this.dataService.getAccountStatementDownloadUrl(document.uid || '');
    }
}
AccountStatementBusinessTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessTableComponent, deps: [{ token: i1$2.AccountStatementDataService }, { token: i2$1.NotificationService }, { token: AccountStatementBusinessPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementBusinessTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessTableComponent, selector: "bb-account-statement-business-table", inputs: { accountStatements: "accountStatements", sortingParams: "sortingParams", loading: "loading", showCategory: "showCategory" }, outputs: { sort: "sort" }, viewQueries: [{ propertyName: "downloadFailureNotificationHeader", first: true, predicate: ["downloadFailureNotificationHeader"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbAccountStatementBusinessTableCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: accountStatements,\n    mimeTypeExtensions: mimeTypeExtensions,\n    loading: loading\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessTableCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-mimeTypeExtensions=\"context.mimeTypeExtensions\"\n  let-loading=\"context.loading\"\n>\n  <table\n    bbTableFocus\n    [bbTable]=\"accountStatements\"\n    (sort)=\"hostRef.onSort($event)\"\n    class=\"table\"\n    aria-label=\"Account statements table\"\n    i18n-aria-label=\"Aria label for account statements table@@account-statement-business.table.aria-label\"\n  >\n    <thead>\n      <tr class=\"d-sm-table-row d-none\">\n        <th bbSortable=\"date\" [direction]=\"hostRef.getDirection('date')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Book date|table heading@@account-statement-business.table-head.book-date\"\n            data-role=\"book-date-thead\"\n            >Book date</span\n          >\n        </th>\n        <th *ngIf=\"showCategory\" bbSortable=\"category\" [direction]=\"hostRef.getDirection('category')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Category|table heading@@account-statement-business.table-head.category\"\n            data-role=\"category-thead\"\n            >Category</span\n          >\n        </th>\n        <th bbSortable=\"accountName\" [direction]=\"hostRef.getDirection('accountName')\" scope=\"col\">\n          <span\n            class=\"th-content\"\n            i18n=\"Account name, number|table heading@@account-statement-business.table-head.account\"\n            data-role=\"account-name-thead\"\n            >Account name, number</span\n          >\n        </th>\n        <th scope=\"col\" class=\"bb-text-align-center\">\n          <span\n            class=\"th-content\"\n            i18n=\"Preview|table heading@@account-statement-business.table-head.preview\"\n            data-role=\"preview-thead\"\n            >Preview</span\n          >\n        </th>\n        <th scope=\"col\" class=\"bb-text-align-center\">\n          <span\n            class=\"th-content\"\n            i18n=\"Download|table heading@@account-statement-business.table-head.download\"\n            data-role=\"download-thead\"\n            >Download</span\n          >\n        </th>\n      </tr>\n    </thead>\n\n    <tbody *ngIf=\"!loading\">\n      <ng-container *ngFor=\"let accountStatement of accountStatements; let rowNumber = index\">\n        <tr class=\"d-sm-table-row d-none\">\n          <td data-role=\"date-td\">{{ accountStatement.date | bbDate: 'shortDate' }}</td>\n\n          <td *ngIf=\"showCategory\" data-role=\"category-td\">{{ accountStatement.category }}</td>\n\n          <td class=\"text-break\" data-role=\"account-name-td\">\n            <div>{{ accountStatement.accountName }}</div>\n            <div class=\"bb-text-support\">{{ accountStatement.accountNumber }}</div>\n          </td>\n\n          <td class=\"bb-text-align-center\">\n            <span\n              *ngIf=\"accountStatement.documents?.length\"\n              id=\"describe-preview-by-{{ rowNumber }}\"\n              class=\"sr-only\"\n              i18n=\"\n                Account and book date|describing what row data this preview action is\n                for@@account-statement-business.preview-button.description\"\n            >\n              Preview for account {{ accountStatement.accountName }} and book date\n              {{ accountStatement.date | bbDate: 'fullDate' }}\n            </span>\n\n            <bb-account-statement-view-online-business-wrapper\n              [documents]=\"accountStatement.documents\"\n              describedByElementId=\"describe-preview-by-{{ rowNumber }}\"\n            ></bb-account-statement-view-online-business-wrapper>\n          </td>\n\n          <td class=\"bb-text-align-center\">\n            <span *ngIf=\"accountStatement.documents?.length\" id=\"describe-download-by-{{ rowNumber }}\" class=\"sr-only\">\n              <ng-container\n                *ngIf=\"accountStatement.documents?.length === 1; else multipleDownloadDocumentsDescription\"\n                i18n=\"\n                  Account and book date|describing what row data this download action is\n                  for@@account-statement-business.download-button.description\"\n              >\n                Download {{ mimeTypeExtensions[accountStatement.documents[0]?.contentType] }} for account\n                {{ accountStatement.accountName }} and book date {{ accountStatement.date | bbDate: 'fullDate' }}\n              </ng-container>\n\n              <ng-template\n                #multipleDownloadDocumentsDescription\n                i18n=\"\n                  Account and book date|describing what data in a row this download action is\n                  for@@account-statement-business.download-dropdown-button.description\"\n              >\n                Show download actions for account {{ accountStatement.accountName }} and book date\n                {{ accountStatement.date | bbDate: 'fullDate' }}\n              </ng-template>\n            </span>\n\n            <bb-account-statement-downloads\n              describedByElementId=\"describe-download-by-{{ rowNumber }}\"\n              [documents]=\"accountStatement.documents\"\n              [mimeTypeExtensions]=\"mimeTypeExtensions\"\n              (downloadFailure)=\"hostRef.onDownloadFailure()\"\n            ></bb-account-statement-downloads>\n          </td>\n        </tr>\n\n        <div class=\"d-sm-none bb-list__item\">\n          <div class=\"bb-block bb-block--md\">\n            <div class=\"bb-stack bb-stack--align-top\">\n              <div class=\"bb-stack__item\">\n                <div\n                  class=\"bb-block bb-block--xs bb-text-semi-bold\"\n                  i18n=\"Book date|table heading@@account-statement-business.list-head.book-date\"\n                >\n                  Book date\n                </div>\n                <div>{{ accountStatement.date | bbDate: 'shortDate' }}</div>\n              </div>\n\n              <bb-account-statement-view-online-business-wrapper\n                class=\"bb-stack__item bb-stack__item--push-right\"\n                [documents]=\"accountStatement.documents\"\n                describedByElementId=\"describe-preview-by-{{ rowNumber }}\"\n              ></bb-account-statement-view-online-business-wrapper>\n\n              <bb-account-statement-downloads\n                describedByElementId=\"describe-download-by-{{ rowNumber }}\"\n                tooltipPlacement=\"top-right\"\n                [documents]=\"accountStatement.documents\"\n                [mimeTypeExtensions]=\"mimeTypeExtensions\"\n                (downloadFailure)=\"hostRef.onDownloadFailure()\"\n              ></bb-account-statement-downloads>\n            </div>\n          </div>\n          <ng-container *ngIf=\"showCategory\">\n            <div\n              class=\"bb-block bb-block--xs bb-text-semi-bold\"\n              i18n=\"Category|table heading@@account-statement-business.list-head.category\"\n            >\n              Category\n            </div>\n            <div class=\"bb-block bb-block--md\">{{ accountStatement.category }}</div>\n          </ng-container>\n\n          <div\n            class=\"bb-block bb-block--xs bb-text-semi-bold\"\n            i18n=\"Account name|table heading@@account-statement-business.list-head.account-name\"\n          >\n            Account name\n          </div>\n          <div class=\"bb-block bb-block--md\">{{ accountStatement.accountName }}</div>\n\n          <div\n            class=\"bb-block bb-block--xs bb-text-semi-bold\"\n            i18n=\"Account number|table heading@@account-statement-business.list-head.account-number\"\n          >\n            Account number\n          </div>\n          <div class=\"text-break\">{{ accountStatement.accountNumber }}</div>\n        </div>\n      </ng-container>\n    </tbody>\n  </table>\n\n  <bb-loading-indicator-ui *ngIf=\"loading\" loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #downloadFailureNotificationHeader>\n  <ng-container bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective [bbHostRef]=\"this\">\n  </ng-container>\n\n  <ng-template bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective>\n    <span i18n=\"Failed to download statement@@account-statement-business-table-row.error-notification.header\"\n      >The statement cannot be downloaded now, please try again later</span\n    >\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return AccountStatementViewOnlineBusinessWrapperComponent; }), selector: "bb-account-statement-view-online-business-wrapper", inputs: ["documents", "describedByElementId"] }, { type: i0.forwardRef(function () { return i1$2.ӨAccountStatementDownloadsComponent; }), selector: "bb-account-statement-downloads", inputs: ["documents", "mimeTypeExtensions", "describedByElementId", "tooltipPlacement"], outputs: ["downloadFailure"] }, { type: i0.forwardRef(function () { return i5$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementBusinessTableCustomizableDirective; }), selector: "[bbAccountStatementBusinessTableCustomizable]" }, { type: i0.forwardRef(function () { return i6$1.TableDirective; }), selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i0.forwardRef(function () { return i6$1.TableFocusDirective; }), selector: "[bbTableFocus]" }, { type: i0.forwardRef(function () { return i6$1.TableSortableDirective; }), selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i0.forwardRef(function () { return i8$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective; }), selector: "[bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective]" }], pipes: { "bbDate": i0.forwardRef(function () { return i8$2.BbDatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-business-table',
                    templateUrl: './account-statement-business-table.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.AccountStatementDataService }, { type: i2$1.NotificationService }, { type: AccountStatementBusinessPropertiesService }]; }, propDecorators: { accountStatements: [{
                type: Input
            }], sortingParams: [{
                type: Input
            }], loading: [{
                type: Input
            }], showCategory: [{
                type: Input
            }], sort: [{
                type: Output
            }], downloadFailureNotificationHeader: [{
                type: ViewChild,
                args: ['downloadFailureNotificationHeader']
            }] } });
class AccountStatementBusinessTableCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessTableCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessTableCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessTableCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessTableCustomizableDirective, selector: "[bbAccountStatementBusinessTableCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessTableCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementBusinessTableCustomizable]' }]
        }] });
class AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, selector: "[bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective]',
                }]
        }] });

class AccountStatementBusinessStatementsContainerComponent {
    constructor(store, propertiesService) {
        this.store = store;
        this.propertiesService = propertiesService;
        this.accountStatements$ = this.store.accountStatements$;
        this.totalCount$ = this.store.accountStatementsTotalCount$;
        this.accountStatementsLoading$ = this.store.accountStatementsLoading$;
        this.sortingParams$ = this.store.accountStatementsSortingParams$;
        this.paginationParams$ = this.store.accountStatementsPaginationParams$;
        this.loadingStates = LoadingState;
        this.paginationTypes = PaginationType;
        this.paginationType$ = this.propertiesService.paginationType$;
        this.showCategory$ = this.propertiesService.showCategory$;
        this.pageSize$ = this.propertiesService.pageSize$.pipe(first());
    }
    loadMore(params) {
        this.pageSize$.subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: params.from,
                },
                append: true,
            });
        });
    }
    onSort(sortEvent) {
        this.pageSize$.subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                sortingParams: sortEvent,
                paginationParams: {
                    size,
                    from: 0,
                },
            });
        });
    }
    handlePageChange(page) {
        this.pageSize$.subscribe(size => {
            this.store.dispatchLoadAccountStatementsBusiness({
                paginationParams: {
                    size,
                    from: page,
                },
            });
        });
    }
}
AccountStatementBusinessStatementsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerComponent, deps: [{ token: i2.AccountStatementStoreModel }, { token: AccountStatementBusinessPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementBusinessStatementsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessStatementsContainerComponent, selector: "bb-account-statement-business-statements-container", ngImport: i0, template: "<ng-container\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    totalCount: (totalCount$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    loadingStates: loadingStates,\n    paginationParams: (paginationParams$ | async)!,\n    sortingParams: (sortingParams$ | async)!,\n    paginationType: (paginationType$ | async)!,\n    showCategory: (showCategory$ | async)!,\n    paginationTypes: paginationTypes\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessStatementsContainerCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-totalCount=\"context.totalCount\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-loadingStates=\"context.loadingStates\"\n  let-paginationParams=\"context.paginationParams\"\n  let-sortingParams=\"context.sortingParams\"\n  let-paginationType=\"context.paginationType\"\n  let-showCategory=\"context.showCategory\"\n  let-paginationTypes=\"context.paginationTypes\"\n>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-account-statement-business-table\n      [accountStatements]=\"accountStatements\"\n      [sortingParams]=\"sortingParams\"\n      [showCategory]=\"showCategory\"\n      [loading]=\"accountStatementsLoading === loadingStates.LOADING_TABLE\"\n      (sort)=\"hostRef.onSort($event)\"\n    ></bb-account-statement-business-table>\n  </div>\n\n  <div class=\"bb-text-align-center\" *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_TABLE\">\n    <bb-load-button-ui\n      color=\"link\"\n      [ngClass]=\"{ 'd-sm-none': paginationType !== paginationTypes.LoadMore }\"\n      [isLoading]=\"accountStatementsLoading === loadingStates.LOADING_MORE\"\n      [size]=\"paginationParams.size\"\n      [from]=\"paginationParams.from\"\n      [totalCount]=\"totalCount\"\n      (paramChange)=\"hostRef.loadMore($event)\"\n      data-role=\"load-more-button\"\n    >\n      <span i18n=\"Load more|Load More button text@@account-statement-business.list.load-more\">Load more</span>\n    </bb-load-button-ui>\n\n    <bb-pagination-ui\n      class=\"d-none d-sm-block\"\n      *ngIf=\"paginationType === paginationTypes.Pagination\"\n      [page]=\"paginationParams.from\"\n      [itemsPerPage]=\"paginationParams.size\"\n      [totalItems]=\"totalCount\"\n      [boundaryLinks]=\"true\"\n      [directionLinks]=\"true\"\n      (pageChange)=\"hostRef.handlePageChange($event)\"\n      data-role=\"pagination\"\n    ></bb-pagination-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return AccountStatementBusinessTableComponent; }), selector: "bb-account-statement-business-table", inputs: ["accountStatements", "sortingParams", "loading", "showCategory"], outputs: ["sort"] }, { type: i0.forwardRef(function () { return i4$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i5$2.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementBusinessStatementsContainerCustomizableDirective; }), selector: "[bbAccountStatementBusinessStatementsContainerCustomizable]" }, { type: i0.forwardRef(function () { return i8$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i0.forwardRef(function () { return i8$1.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-business-statements-container',
                    templateUrl: './account-statement-business-statements-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i2.AccountStatementStoreModel }, { type: AccountStatementBusinessPropertiesService }]; } });
class AccountStatementBusinessStatementsContainerCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessStatementsContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessStatementsContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessStatementsContainerCustomizableDirective, selector: "[bbAccountStatementBusinessStatementsContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessStatementsContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementBusinessStatementsContainerCustomizable]' }]
        }] });

class AccountStatementBusinessWidgetComponent extends AccountStatementBaseWidgetComponent {
    constructor(route, store, propertiesService) {
        super(propertiesService);
        this.route = route;
        this.store = store;
        this.accountId = '';
        this.accountStatements$ = this.store.accountStatements$;
        this.accountStatementsLoading$ = this.store.accountStatementsLoading$;
        this.accountStatementsError$ = this.store.accountStatementsError$;
        this.pageSize$ = this.propertiesService.pageSize$.pipe(first());
        this.accountStatementsFilterParams$ = this.store.accountStatementsFilterParams$;
        this.loadingStates = LoadingState;
        this.destroy$ = new Subject();
        this.accountId$ = new BehaviorSubject('');
        // In order to be able to transmit an account ids both using the route parameter and through the input
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.accountIds$ = merge(getRouteParam(this.route, 'selectedAccount'), this.accountId$.pipe(filter(accountId => !!accountId))).pipe(map(accountIds => stringToWords(accountIds, ',')));
    }
    ngOnChanges() {
        if (this.accountId) {
            this.accountId$.next(this.accountId);
        }
    }
    ngOnInit() {
        this.initializeMinimalDateFilterLimit.pipe(takeUntil(this.destroy$)).subscribe(minimalDate => {
            const widgetPreferences = { minimalDate, maximumDate: today() };
            this.store.dispatchUpdateWidgetPreferences({ widgetPreferences });
        });
        const sortingParams$ = combineLatest([
            this.propertiesService.sortingOrder$,
            this.propertiesService.sortingDirection$.pipe(map(direction => direction.toLowerCase())),
        ]).pipe(first(), map(([column, direction]) => ({
            column,
            direction,
        })));
        combineLatest([
            // fetch statements if exactly one account ID is provided
            this.accountIds$.pipe(filter(({ length }) => length === 1)),
            this.pageSize$,
            sortingParams$,
        ])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([accounts, size, sortingParams]) => {
            this.store.dispatchLoadAccountStatementsBusiness({
                accountIds: [getAccountId(accounts)],
                sortingParams,
                paginationParams: {
                    from: 0,
                    size,
                },
                // reset filters for date
                filterParams: {
                    datePeriod: DatePeriods.AllTime,
                },
            });
        });
        this.propertiesService.showCategory$
            .pipe(filter(Boolean), takeUntil(this.destroy$))
            .subscribe(_ => this.store.dispatchLoadCategories());
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    get initializeMinimalDateFilterLimit() {
        return combineLatest([this.propertiesService.absoluteDateLimit$, this.propertiesService.relativeDateLimit$]).pipe(map(([absoluteDateLimit, relativeMonthLimit]) => getDateFilterLimit(absoluteDateLimit, relativeMonthLimit)));
    }
}
AccountStatementBusinessWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetComponent, deps: [{ token: i1$3.ActivatedRoute }, { token: i2.AccountStatementStoreModel }, { token: AccountStatementBusinessPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
AccountStatementBusinessWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessWidgetComponent, selector: "bb-account-statement-business-widget", inputs: { accountId: "accountId" }, providers: [AccountStatementStoreModel, AccountStatementBusinessPropertiesService], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-container\n  bbAccountStatementBusinessWidgetCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    accountStatements: (accountStatements$ | async)!,\n    accountStatementsLoading: (accountStatementsLoading$ | async)!,\n    accountStatementsError: (accountStatementsError$ | async)!,\n    accountStatementsFilterParams: (accountStatementsFilterParams$ | async)!,\n    accountIds: (accountIds$ | async)!,\n    loadingStates: loadingStates\n  }\"\n></ng-container>\n\n<ng-template\n  bbAccountStatementBusinessWidgetCustomizable\n  let-hostRef\n  let-accountStatements=\"context.accountStatements\"\n  let-accountStatementsLoading=\"context.accountStatementsLoading\"\n  let-accountStatementsFilterParams=\"context.accountStatementsFilterParams\"\n  let-accountStatementsError=\"context.accountStatementsError\"\n  let-accountIds=\"context.accountIds\"\n  let-loadingStates=\"context.loadingStates\"\n>\n  <div aria-live=\"polite\" data-role=\"account-statements-container\">\n    <ng-container *ngIf=\"!accountStatementsError; else accountStatementsErrorState\">\n      <ng-container [ngSwitch]=\"accountIds.length\">\n        <ng-container *ngSwitchCase=\"1\">\n          <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING; else loadingState\">\n            <ng-container\n              *ngIf=\"\n                accountStatements.length || accountStatementsFilterParams.dateFrom;\n                else accountStatementsEmptyState\n              \"\n            >\n              <bb-account-statement-business-filters></bb-account-statement-business-filters>\n              <ng-container *ngIf=\"accountStatementsLoading !== loadingStates.LOADING_FILTERED; else loadingState\">\n                <ng-container *ngIf=\"accountStatements.length; else accountStatementsFilteredEmptyState\">\n                  <bb-account-statement-business-statements-container></bb-account-statement-business-statements-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchCase=\"0\">\n          <ng-container *ngTemplateOutlet=\"accountStatementsNoAccountsError\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngSwitchDefault>\n          <ng-container *ngTemplateOutlet=\"accountStatementsMultipleAccountsError\"></ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"description\"\n      data-role=\"account-statements-empty-state\"\n      title=\"No account statements found\"\n      i18n-title=\"No account statements found@@account-statement-business.statements.empty-state.title\"\n      subtitle=\"You don't have any account statements to be displayed for this account.\"\n      i18n-subtitle=\"\n        You don't have any account statements...@@account-statement-business.statements.empty-state.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsErrorState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n      data-role=\"account-statements-error-state\"\n      title=\"Account statements are not loading\"\n      i18n-title=\"Account statements are not loading@@account-statement-business.statement-list.error-state.title\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      i18n-subtitle=\"Try to reload the page@@account-statement-business.statement-list.error-state.subtitle\"\n    >\n    </bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsFilteredEmptyState>\n    <bb-empty-state-ui\n      class=\"bb-state-container\"\n      iconSize=\"xxl\"\n      iconModifier=\"search\"\n      data-role=\"account-statements-filters-empty-state\"\n      i18n-title=\"Account statements filtered state title@@account-statement-business.statements.filtered.state.title\"\n      title=\"No Results Found\"\n      i18n-subtitle=\"\n        Account statements filtered state subtitle@@account-statement-business.statements.filtered.state.subtitle\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsNoAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-no-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"current-accounts\"\n      iconClasses=\"text-muted\"\n      title=\"You did not select an account yet\"\n      i18n-title=\"\n        You did not select an account yet |Error title when no account is\n        selected@@account-statement-business.statements.error.no-account.title\"\n      subtitle=\"No statements to show. You need to select a bank account first.\"\n      i18n-subtitle=\"\n        No statements to show. You need to select a bank account first. |Error subtitle when when no account is\n        selected@@account-statement-business.statements.error.no-account.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n\n  <ng-template #accountStatementsMultipleAccountsError>\n    <bb-empty-state-ui\n      data-role=\"account-statements-error-multiple-accounts\"\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      title=\"You have selected multiple accounts\"\n      i18n-title=\"\n        You have selected multiple accounts |Error title when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.title\"\n      subtitle=\"Please select only one account to display the account information.\"\n      i18n-subtitle=\"\n        Please select only one account to display the account information |Error subtitle when getting multiple\n        accounts@@account-statement-business.statements.error.multiple-accounts.subtitle\"\n    ></bb-empty-state-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return AccountStatementBusinessFiltersComponent; }), selector: "bb-account-statement-business-filters" }, { type: i0.forwardRef(function () { return AccountStatementBusinessStatementsContainerComponent; }), selector: "bb-account-statement-business-statements-container" }, { type: i0.forwardRef(function () { return i5$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i7$1.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return AccountStatementBusinessWidgetCustomizableDirective; }), selector: "[bbAccountStatementBusinessWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i8$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i8$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i8$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i8$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i8$1.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }], pipes: { "async": i0.forwardRef(function () { return i8$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-statement-business-widget',
                    templateUrl: './account-statement-business-widget.component.html',
                    providers: [AccountStatementStoreModel, AccountStatementBusinessPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ActivatedRoute }, { type: i2.AccountStatementStoreModel }, { type: AccountStatementBusinessPropertiesService }]; }, propDecorators: { accountId: [{
                type: Input
            }] } });
class AccountStatementBusinessWidgetCustomizableDirective extends BbTemplate {
}
AccountStatementBusinessWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
AccountStatementBusinessWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccountStatementBusinessWidgetCustomizableDirective, selector: "[bbAccountStatementBusinessWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbAccountStatementBusinessWidgetCustomizable]' }]
        }] });

const components = [
    AccountStatementBusinessWidgetComponent,
    AccountStatementBusinessTableComponent,
    AccountStatementViewOnlineBusinessWrapperComponent,
    AccountStatementBusinessStatementsContainerComponent,
    AccountStatementBusinessFiltersComponent,
];
const directives = [
    AccountStatementBusinessTableCustomizableDirective,
    AccountStatementBusinessWidgetCustomizableDirective,
    AccountStatementBusinessStatementsContainerCustomizableDirective,
    AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,
    AccountStatementBusinessFiltersCustomizableDirective,
];
const uiModules = [
    TableModule,
    AccountSelectorModule,
    LoadButtonModule,
    EmptyStateModule,
    LoadingIndicatorModule,
    CollapsibleModule,
    InputDatepickerModule,
    InputValidationMessageModule,
    PaginationModule,
    DropdownSingleSelectModule,
    BbDatePipeModule,
    DropdownMultiSelectModule,
];
class AccountStatementBusinessWidgetModule {
}
AccountStatementBusinessWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountStatementBusinessWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetModule, declarations: [AccountStatementBusinessWidgetComponent,
        AccountStatementBusinessTableComponent,
        AccountStatementViewOnlineBusinessWrapperComponent,
        AccountStatementBusinessStatementsContainerComponent,
        AccountStatementBusinessFiltersComponent, AccountStatementBusinessTableCustomizableDirective,
        AccountStatementBusinessWidgetCustomizableDirective,
        AccountStatementBusinessStatementsContainerCustomizableDirective,
        AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,
        AccountStatementBusinessFiltersCustomizableDirective], imports: [TableModule,
        AccountSelectorModule,
        LoadButtonModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        CollapsibleModule,
        InputDatepickerModule,
        InputValidationMessageModule,
        PaginationModule,
        DropdownSingleSelectModule,
        BbDatePipeModule,
        DropdownMultiSelectModule, CommonModule,
        ReactiveFormsModule, i1.BackbaseCoreModule, AccountStatementStoreModule,
        AccountStatementCommonModule], exports: [AccountStatementCommonModule, AccountStatementBusinessWidgetComponent,
        AccountStatementBusinessTableComponent,
        AccountStatementViewOnlineBusinessWrapperComponent,
        AccountStatementBusinessStatementsContainerComponent,
        AccountStatementBusinessFiltersComponent, AccountStatementBusinessTableCustomizableDirective,
        AccountStatementBusinessWidgetCustomizableDirective,
        AccountStatementBusinessStatementsContainerCustomizableDirective,
        AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective,
        AccountStatementBusinessFiltersCustomizableDirective, TableModule,
        AccountSelectorModule,
        LoadButtonModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        CollapsibleModule,
        InputDatepickerModule,
        InputValidationMessageModule,
        PaginationModule,
        DropdownSingleSelectModule,
        BbDatePipeModule,
        DropdownMultiSelectModule] });
AccountStatementBusinessWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetModule, imports: [[
            ...uiModules,
            CommonModule,
            ReactiveFormsModule,
            BackbaseCoreModule.withConfig({
                // eslint-disable-next-line @typescript-eslint/naming-convention
                classMap: { AccountStatementBusinessWidgetComponent },
            }),
            AccountStatementStoreModule,
            AccountStatementCommonModule,
        ], AccountStatementCommonModule, TableModule,
        AccountSelectorModule,
        LoadButtonModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        CollapsibleModule,
        InputDatepickerModule,
        InputValidationMessageModule,
        PaginationModule,
        DropdownSingleSelectModule,
        BbDatePipeModule,
        DropdownMultiSelectModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementBusinessWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components, ...directives],
                    imports: [
                        ...uiModules,
                        CommonModule,
                        ReactiveFormsModule,
                        BackbaseCoreModule.withConfig({
                            // eslint-disable-next-line @typescript-eslint/naming-convention
                            classMap: { AccountStatementBusinessWidgetComponent },
                        }),
                        AccountStatementStoreModule,
                        AccountStatementCommonModule,
                    ],
                    exports: [AccountStatementCommonModule, ...components, ...directives, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccountStatementBusinessDownloadFailureNotificationHeaderCustomizableDirective, AccountStatementBusinessFiltersComponent, AccountStatementBusinessFiltersCustomizableDirective, AccountStatementBusinessPropertiesService, AccountStatementBusinessTableComponent, AccountStatementBusinessTableCustomizableDirective, AccountStatementBusinessWidgetComponent, AccountStatementBusinessWidgetModule, AccountStatementBusinessStatementsContainerComponent as ӨAccountStatementBusinessStatementsContainerComponent, AccountStatementBusinessStatementsContainerCustomizableDirective as ӨAccountStatementBusinessStatementsContainerCustomizableDirective, AccountStatementBusinessWidgetCustomizableDirective as ӨAccountStatementBusinessWidgetCustomizableDirective, AccountStatementViewOnlineBusinessWrapperComponent as ӨAccountStatementViewOnlineBusinessWrapperComponent };
//# sourceMappingURL=backbase-account-statement-business-widget-ang.js.map
