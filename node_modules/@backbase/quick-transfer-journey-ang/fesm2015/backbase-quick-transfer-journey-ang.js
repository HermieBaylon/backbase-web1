import '@angular/localize/init';
import * as i0 from '@angular/core';
import { Injectable, Component, Input, EventEmitter, ChangeDetectionStrategy, Output, ViewChild, Optional, Self, LOCALE_ID, Inject, InjectionToken, NgModule } from '@angular/core';
import * as i1 from '@ngrx/store';
import { createAction, props, createFeatureSelector, createSelector, createReducer, on, StoreModule } from '@ngrx/store';
import * as i1$1 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i9 from '@angular/common';
import { getLocaleNumberSymbol, NumberSymbol, CommonModule } from '@angular/common';
import * as i3 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { map, take, distinctUntilChanged, takeUntil, filter, first, pluck, withLatestFrom, startWith, concatMap, exhaustMap, catchError } from 'rxjs/operators';
import * as i2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i3$1 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i4 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import { combineLatest, Subject, Subscription, of } from 'rxjs';
import * as i4$2 from '@backbase/data-ang/payment-order';
import { InvolvedPartyRole, SchemeNames } from '@backbase/data-ang/payment-order';
import * as i2$1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i6 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import { __awaiter } from 'tslib';
import * as i2$2 from '@angular/forms';
import { Validators, ReactiveFormsModule } from '@angular/forms';
import BigNumber from 'bignumber.js';
import { fadeSlideAnimation, tabsAnim, fadeInAnimation, slideUpAnimation as slideUpAnimation$1 } from '@backbase/ui-ang/util';
import * as i1$2 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i6$1 from '@backbase/ui-ang/amount-input';
import { AmountInputModule } from '@backbase/ui-ang/amount-input';
import * as i5 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i6$2 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i4$1 from '@backbase/ui-ang/tab';
import { TabModule } from '@backbase/ui-ang/tab';
import * as i2$3 from '@angular/router';
import { NavigationEnd } from '@angular/router';
import { animation, style, animate, transition, useAnimation, trigger } from '@angular/animations';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i1$3 from '@backbase/data-ang/arrangements';
import * as i2$4 from '@backbase/data-ang/contact-manager';
import * as i3$2 from '@backbase/data-ang/payment-order-a2a';
import * as i5$1 from '@backbase/identity-auth/transaction-signing';
import * as i1$4 from '@ngrx/effects';
import { createEffect, ofType, EffectsModule } from '@ngrx/effects';
import { HttpErrorResponse } from '@angular/common/http';

class CommunicationService {
}

/** Enum representing different possible loading states of ajax call */
var LoadingState;
(function (LoadingState) {
    LoadingState["INIT"] = "INIT";
    LoadingState["LOADING"] = "LOADING";
    LoadingState["LOADED"] = "LOADED";
})(LoadingState || (LoadingState = {}));
var ProgressStatus;
(function (ProgressStatus) {
    ProgressStatus["CONFIRMATION_PENDING"] = "CONFIRMATION_PENDING";
    ProgressStatus["USER_DECLINED"] = "USER_DECLINED";
    ProgressStatus["SYSTEM_DECLINED"] = "SYSTEM_DECLINED";
    ProgressStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
    ProgressStatus["SENDING"] = "SENDING";
    ProgressStatus["ACCEPTED"] = "ACCEPTED";
    ProgressStatus["REJECTED"] = "REJECTED";
    ProgressStatus["PROCESSED"] = "PROCESSED";
    ProgressStatus["NO_PROGRESS"] = "NO_PROGRESS";
})(ProgressStatus || (ProgressStatus = {}));

/** Enum representing different view states */
var ViewState;
(function (ViewState) {
    ViewState["FORM"] = "FORM";
    ViewState["FROM"] = "FROM";
    ViewState["PAYEE"] = "PAYEE";
    ViewState["COMPLETE"] = "COMPLETE";
    ViewState["REVIEW"] = "REVIEW";
})(ViewState || (ViewState = {}));
var Location;
(function (Location) {
    Location["FROM"] = "FROM";
    Location["TO"] = "TO";
})(Location || (Location = {}));

const accountsFetch = createAction('[Accounts API] fetching accounts');
const contactsFetch = createAction('[Contacts API] fetching contacts');
const externalAccountsFetch = createAction('[Payments API] fetching external accounts');
// Success
const accountsFetchSuccess = createAction('[Accounts API] accounts fetched success', props());
const contactsFetchSuccess = createAction('[Contacts API] contacts fetched success', props());
const extAccountsFetchSuccess = createAction('[Payments API] external accounts fetched success', props());
// Error
const accountsFetchError = createAction('[Accounts API] accounts fetching error', props());
const contactsFetchError = createAction('[Contacts API] contacts fetching error', props());
const extAccountsFetchError = createAction('[Payments API] external accounts fetching error', props());
const openView = createAction('[Quick Transfer Widget] current view changed', props());
const setPayeeAccount = createAction('[Quick Transfer Widget] payee account picked up', props());
const setFromAccount = createAction('[Quick Transfer Widget] From Account changed', props());
const sendTransferOrder = createAction('[Payments Order API] send transfer order', props());
const transferOrderSuccess = createAction('[Payments Order API] transfer order is successful');
const transferOrderError = createAction('[Payments Order API] transfer order is failed', props());
const setAmount = createAction('[Quick Transfer Widget] Transfer Amount Set', props());
const setModalOpen = createAction('[Quick Transfer Widget] Confirmation Modal Open', props());
const resetWidget = createAction('[Quick Transfer Widget] Reset widget', props());
const resetFocus = createAction('[Quick Transfer Widget] Reset Focus Element');
const setFieldTouched = createAction('[Quick Transfer Widget] Set Field Touched', props());
const setDefaultCurrency = createAction('[Quick Transfer Widget] Default Currency changed', props());

const FEATURE_STORE_SELECTOR = 'quick-transfer-store';
const initialState = {
    debitAccounts: undefined,
    creditAccounts: undefined,
    contacts: undefined,
    extAccounts: undefined,
    viewState: ViewState.FORM,
    fromAccount: undefined,
    payeeTo: undefined,
    amount: undefined,
    defaultCurrency: '',
    accountsCallState: LoadingState.INIT,
    extAccountsCallState: LoadingState.INIT,
    contactsCallState: LoadingState.INIT,
    transferOrderCallState: LoadingState.INIT,
    isModalOpen: false,
    touchedFields: [],
    focusElement: undefined,
};

const child = createFeatureSelector(FEATURE_STORE_SELECTOR);
const selectFromAccount = createSelector(child, (state) => state['fromAccount']);
const selectDebitAccounts = createSelector(child, (state) => state['debitAccounts']);
const selectCreditAccounts = createSelector(child, (state) => state['creditAccounts']);
const selectExtAccounts = createSelector(child, (state) => state['extAccounts']);
const selectContacts = createSelector(child, (state) => state['contacts']);
const selectAccountsCallState = createSelector(child, (state) => state['accountsCallState']);
const selectContactsCallState = createSelector(child, (state) => state['contactsCallState']);
const selectExtAccountsCallState = createSelector(child, (state) => state['extAccountsCallState']);
const selectTransferOrderCallState = createSelector(child, (state) => state['transferOrderCallState']);
const selectViewState = createSelector(child, (state) => state['viewState']);
const selectPayeeAccount = createSelector(child, (state) => state['payeeTo']);
const selectAmount = createSelector(child, (state) => state['amount']);
const selectIsModalOpen = createSelector(child, (state) => state['isModalOpen']);
const selectTouchedFields = createSelector(child, (state) => state['touchedFields']);
const selectFocusElement = createSelector(child, (state) => state['focusElement']);

class QuickTransferStoreService {
    constructor(store) {
        this.store = store;
        /**
         * Stream of api call state for fetching accounts
         */
        this.accountsCallState$ = this.store.select(selectAccountsCallState);
        /**
         * Stream of api call state for fetching contacts
         */
        this.contactsCallState$ = this.store.select(selectContactsCallState);
        /**
         * Stream of api call state for fetching external accounts
         */
        this.extAccountsCallState$ = this.store.select(selectExtAccountsCallState);
        /**
         * Stream of current view state
         */
        this.currentView$ = this.store.select(selectViewState);
        /**
         * Stream of debit accounts
         */
        this.debitAccounts$ = this.store.select(selectDebitAccounts);
        /**
         * Stream of credit accounts
         */
        this.creditAccounts$ = this.store.select(selectCreditAccounts);
        /**
         * Stream of external accounts
         */
        this.extAccounts$ = this.store.select(selectExtAccounts);
        /**
         * Stream of contacts
         */
        this.contacts$ = this.store.select(selectContacts);
        /**
         * Stream of fromAccount
         */
        this.fromAccount$ = this.store.select(selectFromAccount);
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.select(selectPayeeAccount);
        /**
         * Stream of transfer amount
         */
        this.amount$ = this.store.select(selectAmount);
        /**
         * Boolean flag for the confirmation modal
         */
        this.isModalOpen$ = this.store.select(selectIsModalOpen);
        /**
         * Stream of touched fields.
         */
        this.touchedFields$ = this.store.select(selectTouchedFields);
        /**
         * Stream of Element selector to be focused.
         */
        this.focusElement$ = this.store.select(selectFocusElement);
        /**
         * Boolean flag for transfer order state loading
         */
        this.paymentOrderCallState$ = this.store.select(selectTransferOrderCallState);
    }
    /**
     * Method to set initial accounts after fetching
     */
    fetchAccounts() {
        this.store.dispatch(accountsFetch());
    }
    /**
     * Method to set initial external accounts after fetching
     */
    fetchExtAccounts() {
        this.store.dispatch(externalAccountsFetch());
    }
    /**
     * Method to set initial contacts after fetching
     */
    fetchContacts() {
        this.store.dispatch(contactsFetch());
    }
    /**
     * Method to set initial contacts after fetching
     */
    sendTranferOrder(reqData) {
        this.store.dispatch(sendTransferOrder({ reqData }));
    }
    /**
     * Method to set initial accounts after fetching
     */
    setView(view, focus) {
        this.store.dispatch(openView({ view, focus }));
    }
    /**
     * Method to set toPayee for account
     */
    setPayee(id) {
        this.store.dispatch(setPayeeAccount({ id }));
    }
    /**
     * Method to set initial accounts after fetching
     */
    selectFromAccount(accountId) {
        this.store.dispatch(setFromAccount({ accountId }));
    }
    /**
     * Method to set transfer amount
     */
    setAmount({ amount, defaultCurrency }) {
        this.store.dispatch(setAmount({ amount, defaultCurrency }));
    }
    /**
     * Method to open/close confirmation modal
     */
    setModalOpen(isOpen) {
        this.store.dispatch(setModalOpen({ isOpen }));
    }
    /**
     * Method to set form submitted
     */
    setTouchedField(fieldName) {
        this.store.dispatch(setFieldTouched({ fieldName }));
    }
    /**
     * Method to reset the widget
     */
    reset(focus) {
        this.store.dispatch(resetWidget({ focus }));
    }
    /**
     * Method to set form submitted
     */
    resetFocus() {
        this.store.dispatch(resetFocus());
    }
    /**
     * Method to pass default currency into the store
     */
    updateDefaultCurrency(currency) {
        this.store.dispatch(setDefaultCurrency({ currency }));
    }
}
/** @nocollapse */ QuickTransferStoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreService, deps: [{ token: i1.Store }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferStoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }]; } });

class BaseAccountSelectorComponent {
    constructor(store) {
        this.store = store;
        /**
         * Stream of accountsCallState
         */
        this.accountsCallState$ = this.store.accountsCallState$;
        /**
         * Enum for loadingstate
         */
        this.loadingstate = LoadingState;
        /**
         * Stream of extAccountsCallState
         */
        this.extAccountsCallState$ = this.store.extAccountsCallState$;
    }
    /**
     * Method to navigate back to the main Form
     */
    backToForm(fromSelector) {
        this.store.setView(ViewState.FORM, fromSelector);
    }
    /**
     * Method to dispatch store action for fetching the accounts
     */
    getAccounts() {
        this.store.fetchAccounts();
    }
    /**
     * Method to dispatch store action for fetching external accounts
     */
    getExtAccounts() {
        this.store.fetchExtAccounts();
    }
}
/** @nocollapse */ BaseAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseAccountSelectorComponent, deps: [{ token: QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BaseAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BaseAccountSelectorComponent, selector: "ng-component", inputs: { config: "config" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { config: [{
                type: Input
            }] } });

class QuickTransferAccountsComponent {
    constructor() {
        /**
         * Output to inform which account or contact is selected
         */
        this.select = new EventEmitter();
    }
    /**
     * Emit event to inform parent with the picked account id
     *
     * @param id
     */
    pick(id) {
        this.select.emit(id);
    }
}
/** @nocollapse */ QuickTransferAccountsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferAccountsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferAccountsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: { arrangements: "arrangements", selected: "selected", selectedCounterPartyAccount: "selectedCounterPartyAccount", config: "config" }, outputs: { select: "select" }, ngImport: i0, template: "<button\n  bbButton\n  color=\"unstyled\"\n  *ngFor=\"let arrangement of arrangements\"\n  class=\"bb-quick-transfer__product-item bb-stack\"\n  [class.bb-quick-transfer--selected-bg]=\"arrangement.uuid === selected\"\n  (click)=\"pick(arrangement.uuid)\"\n  [disabled]=\"arrangement.uuid === selectedCounterPartyAccount\"\n>\n  <bb-product-item-basic-account-ui\n    [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n    [title]=\"arrangement.name\"\n    [amount]=\"arrangement?.balance\"\n    [productNumber]=\"arrangement.number\"\n    [currency]=\"arrangement?.currency\"\n    [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n    [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n    [active]=\"false\"\n    [class.bb-quick-transfer--disabled]=\"arrangement.uuid === selectedCounterPartyAccount\"\n  ></bb-product-item-basic-account-ui>\n</button>\n", components: [{ type: i1$1.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }], directives: [{ type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferAccountsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-accounts-ui',
                    templateUrl: './quick-transfer-accounts.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { arrangements: [{
                type: Input
            }], selected: [{
                type: Input
            }], selectedCounterPartyAccount: [{
                type: Input
            }], config: [{
                type: Input
            }], select: [{
                type: Output
            }] } });

const TO_ACCOUNT = '[data-role="select-payee-button"] button';
const FROM_ACCOUNT = '[data-role="select-from-button"] button';

/**
 * Get params from all router-outlet scopes
 */
function getRouteParams(route) {
    let params = route.snapshot.params;
    params = Object.assign(Object.assign({}, route.snapshot.queryParams), params);
    if (route.children) {
        for (const r of route.children) {
            params = Object.assign(Object.assign({}, getRouteParams(r)), params);
        }
    }
    return params;
}
/** Amount value should be positive value **/
function nonZeroValidator(control) {
    if (!control.value || Number(control.value) <= 0) {
        return { nonZero: true };
    }
    else {
        // eslint-disable-next-line no-null/no-null
        return null;
    }
}
function generateId() {
    return Math.floor(Math.random() * Date.now()).toString();
}

class QuickTransferCompleteComponent {
    constructor(store) {
        this.store = store;
        this.id = generateId();
        /**
         * unique time to reload animated svg everytime
         */
        this.timestamp = new Date().getTime();
        /**
         * Stream of transfer amount
         */
        this.amount$ = this.store.amount$;
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.toPayee$;
        /**
         * Stream of paymentOrderCallState
         */
        this.paymentOrderCallState$ = this.store.paymentOrderCallState$.pipe(map(state => {
            if (state.error) {
                const error = state.error;
                const cancelTransactionSigningMessage = `Your Transfer Has Been Cancelled.`;
                const defaultErrorMessage = `Oops, something went wrong!`;
                const transactionSigningCancelErrorText = 'rejected_by_user';
                const message = error.statusText === transactionSigningCancelErrorText
                    ? $localize `:@@quick-transfer.cancel-transaction-signing.fail-message:${cancelTransactionSigningMessage}`
                    : $localize `:@@quick-transfer.complete.fail-message:${defaultErrorMessage}`;
                return Object.assign(Object.assign({}, error), { message });
            }
            return state;
        }));
        /**
         * Enum for loadingstate
         */
        this.loadingstate = LoadingState;
    }
    ngAfterViewInit() {
        this.doneButton.nativeElement.focus();
    }
    /**
     * Method to call resetWidget
     */
    restart() {
        this.store.reset(FROM_ACCOUNT);
    }
    /**
     * Method to get back to form for trying transfer again
     */
    tryAgain() {
        this.store.setView(ViewState.FORM, FROM_ACCOUNT);
    }
}
/** @nocollapse */ QuickTransferCompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferCompleteComponent, deps: [{ token: QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferCompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferCompleteComponent, selector: "bb-quick-transfer-complete-ui", inputs: { successImg: "successImg", successImgNoMotion: "successImgNoMotion", config: "config" }, viewQueries: [{ propertyName: "doneButton", first: true, predicate: ["done"], descendants: true }], ngImport: i0, template: "<div class=\"bb-quick-transfer__complete\">\n  <ng-container *ngIf=\"(paymentOrderCallState$ | async) === loadingstate.LOADED; else paymentOrderFail\">\n    <div\n      role=\"dialog\"\n      attr.aria-describedby=\"payment-success-img-{{ id }} payment-success-title-{{ id }} payment-success-description-{{\n        id\n      }}\"\n    >\n      <div class=\"bb-text-align-right bb-block\">\n        <button\n          bbButton\n          color=\"unstyled\"\n          class=\"btn-unstyled--focusable\"\n          (click)=\"restart()\"\n          data-role=\"clear-icon-button\"\n          aria-label=\"close transfer\"\n          i18-aria-label=\"Close transfer|Text for close transfer@@quick-transfer.complete.close.button\"\n        >\n          <bb-icon-ui name=\"clear\" size=\"lg\"></bb-icon-ui>\n        </button>\n      </div>\n      <div class=\"bb-text-align-center flex-fill bb-block bb-block--lg\">\n        <picture>\n          <source srcset=\"{{ successImgNoMotion }}\" media=\"(prefers-reduced-motion: reduce)\" />\n          <img\n            id=\"payment-success-img-{{ id }}\"\n            srcset=\"{{ successImg + '?' + timestamp }}\"\n            alt=\"Transfer succeeded!\"\n            i18n-alt=\"Transfer succeeded|Text for transfer succeeded@@quick-transfer.complete.transfer-succeeded\"\n            data-role=\"transfer-success-anim\"\n            class=\"img-fluid\"\n          />\n        </picture>\n        <bb-header-ui\n          id=\"payment-success-title-{{ id }}\"\n          headingClasses=\"bb-text-semi-bold h5\"\n          headingType=\"h3\"\n          heading=\"Well done!\"\n          i18n-heading=\"Well Done!|Text for well done@@quick-transfer.complete.well-done\"\n        ></bb-header-ui>\n        <span\n          class=\"bb-text-support bb-subtitle\"\n          *ngIf=\"amount$ | async as amount\"\n          id=\"payment-success-description-{{ id }}\"\n          ><span i18n=\"Success Transfer|Text for success transfer@@quick-transfer.complete.success-message\"\n            >You just transferred\n          </span>\n          <bb-amount-ui\n            [currency]=\"amount.currency\"\n            [amount]=\"amount.amount\"\n            [mapCurrency]=\"config?.uiComponentProps.mapCurrency\"\n            [showPlusSign]=\"false\"\n          ></bb-amount-ui>\n          <span i18n=\"Transfer To|Text for success transfer to@@quick-transfer.complete.success-message-to\"> to </span>\n          <ng-container *ngIf=\"toPayee$ | async as toPayee\"\n            ><span>{{ toPayee.name }}.</span></ng-container\n          >\n        </span>\n      </div>\n      <div class=\"bb-text-align-center bb-block bb-block--sm\">\n        <button\n          bbButton\n          color=\"secondary\"\n          (click)=\"restart()\"\n          i18n=\"Done button|Transfer Done@@quick-transfer.complete.button.transfer-done\"\n          data-role=\"transfer-done\"\n          #done\n        >\n          Done\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #paymentOrderFail>\n  <div role=\"dialog\" attr.aria-describedby=\"payment-error-title-{{ id }} payment-error-description-{{ id }}\">\n    <div class=\"bb-text-align-right bb-block bb-block--xl\">\n      <button\n        bbButton\n        color=\"unstyled\"\n        (click)=\"tryAgain()\"\n        data-role=\"clear-icon-button\"\n        aria-label=\"close transfer\"\n        i18-aria-label=\"Close transfer|Text for close transfer@@quick-transfer.complete.close.button\"\n      >\n        <bb-icon-ui name=\"clear\" size=\"lg\"></bb-icon-ui>\n      </button>\n    </div>\n    <div\n      class=\"bb-text-align-center flex-fill bb-block bb-block--xl\"\n      data-role=\"transfer-fail-message\"\n      *ngIf=\"paymentOrderCallState$ | async as errorState\"\n    >\n      <bb-icon-ui\n        color=\"danger\"\n        class=\"bb-quick-transfer__fail-icon bb-block bb-block--md\"\n        name=\"error-outline\"\n        size=\"xxl\"\n        data-role=\"complete-error-outline\"\n      ></bb-icon-ui>\n\n      <bb-header-ui\n        id=\"payment-error-title-{{ id }}\"\n        headingClasses=\"bb-text-semi-bold h5\"\n        headingType=\"h3\"\n        [heading]=\"errorState.message\"\n      ></bb-header-ui>\n      <span\n        id=\"payment-error-description-{{ id }}\"\n        class=\"bb-text-support bb-subtitle\"\n        i18n=\"Transfer Failed Sub-Message|Extra Text for the failed transfer@@quick-transfer.complete.fail-sub.message\"\n        >Our system was unable to process your transfer at the moment.</span\n      >\n    </div>\n    <div class=\"bb-text-align-center bb-block bb-block--sm\">\n      <button\n        bbButton\n        color=\"secondary\"\n        i18n=\"Try again button|Transfer Fail@@quick-transfer.complete.button.try-again\"\n        data-role=\"transfer-try-again-button\"\n        (click)=\"tryAgain()\"\n        #done\n      >\n        Try again\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i9.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferCompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-complete-ui',
                    templateUrl: './quick-transfer-complete.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { successImg: [{
                type: Input
            }], successImgNoMotion: [{
                type: Input
            }], config: [{
                type: Input
            }], doneButton: [{
                type: ViewChild,
                args: ['done']
            }] } });

var QuickTransferProductKinds;
(function (QuickTransferProductKinds) {
    QuickTransferProductKinds["currentAccount"] = "Current Account";
    QuickTransferProductKinds["savingsAccount"] = "Savings Account";
    QuickTransferProductKinds["creditCard"] = "Credit Card";
    QuickTransferProductKinds["loanAccount"] = "Loan";
    QuickTransferProductKinds["connectedAccounts"] = "Connected Account";
    QuickTransferProductKinds["contacts"] = "Contact";
})(QuickTransferProductKinds || (QuickTransferProductKinds = {}));

const getCurrentDate = () => new Date().toISOString().slice(0, 10);
const mapPaymentData = (fromAccount, toAccount, amount, paymentTypes) => {
    const { connectedAccounts, contacts } = QuickTransferProductKinds;
    const _fromAccount = fromAccount.productKindName === connectedAccounts ? toAccount : fromAccount;
    const _toAccount = fromAccount.productKindName === connectedAccounts ? fromAccount : toAccount;
    const _role = fromAccount.productKindName === connectedAccounts ? InvolvedPartyRole.DEBTOR : InvolvedPartyRole.CREDITOR;
    function getPaymentType() {
        switch (_toAccount.productKindName) {
            case connectedAccounts:
                return paymentTypes.external;
            case contacts:
                return paymentTypes.contact;
            default:
                return paymentTypes.internal;
        }
    }
    function getScheme() {
        switch (_toAccount.productKindName) {
            case connectedAccounts:
                return SchemeNames.EXTERNALID;
            case contacts:
                return SchemeNames.BBAN;
            default:
                return SchemeNames.ID;
        }
    }
    const originatorAccount = {
        identification: {
            identification: _fromAccount.uuid,
            schemeName: SchemeNames.ID,
        },
    };
    const identification = {
        identification: _toAccount.productKindName === contacts ? _toAccount.number : _toAccount.uuid,
        schemeName: getScheme(),
    };
    const transferTransactionInformation = {
        instructedAmount: {
            amount: amount.amount,
            currencyCode: amount.currency,
        },
        counterparty: {
            name: _toAccount.name,
            role: _role,
        },
        counterpartyAccount: Object.assign({ identification }, (_toAccount.productKindName === contacts && {
            selectedContact: { contactId: _toAccount.uuid, accountId: '' },
        })),
    };
    return {
        originatorAccount,
        requestedExecutionDate: getCurrentDate(),
        paymentType: getPaymentType(),
        transferTransactionInformation,
    };
};

class QuickTransferConfirmationModalComponent {
    constructor(store) {
        this.store = store;
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.toPayee$;
        /**
         * Stream of fromAccount
         */
        this.fromAccount$ = this.store.fromAccount$;
        /**
         * Stream of transfer amount
         */
        this.amount$ = this.store.amount$;
        /**
         * Stream of isModalOpen
         */
        this.isOpen$ = this.store.isModalOpen$;
        /**
         * Stream of loading
         */
        this.paymentOrderCallState$ = this.store.paymentOrderCallState$;
        /**
         * Enum for loadingstate
         */
        this.loadingstate = LoadingState;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
    }
    /**
     * close the modal
     */
    closeModal() {
        this.store.setModalOpen(false);
    }
    /**
     * close the modal
     */
    handleConfirm() {
        this.subscriptions$ = combineLatest([this.fromAccount$, this.toPayee$, this.amount$])
            .pipe(take(1))
            .subscribe(([fromAccount, toPayee, amount]) => {
            if (fromAccount && toPayee && amount) {
                const postData = mapPaymentData(fromAccount, toPayee, amount, this.paymentTypes || {});
                this.store.sendTranferOrder(postData);
            }
        });
    }
    ngOnDestroy() {
        if (this.subscriptions$) {
            this.subscriptions$.unsubscribe();
        }
    }
}
/** @nocollapse */ QuickTransferConfirmationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferConfirmationModalComponent, deps: [{ token: QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferConfirmationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferConfirmationModalComponent, selector: "bb-quick-transfer-confirmation-modal-ui", inputs: { paymentTypes: "paymentTypes", config: "config" }, ngImport: i0, template: "<bb-modal-ui\n  class=\"bb-quick-transfer__modal\"\n  [isOpen]=\"isOpen$ | async\"\n  (cancel)=\"closeModal()\"\n  (confirm)=\"handleConfirm()\"\n>\n  <bb-modal-header-ui [title]=\"config?.titles?.[viewState.FORM]\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-block bb-block--md\" *ngIf=\"amount$ | async as amount\" data-role=\"quick-transfer-review-amount\">\n        <label\n          class=\"bb-block bb-block--xs font-weight-normal bb-text-support bb-subtitle\"\n          i18n=\"Amount label|Label for transfer amount@@quick-transfer.confirmation-modal.amount-label\"\n          >Amount</label\n        ><br />\n        <bb-amount-ui\n          data-role=\"confirmation-amount\"\n          class=\"bb-highlight\"\n          [currency]=\"amount.currency\"\n          [amount]=\"amount.amount\"\n          [mapCurrency]=\"true\"\n          [showPlusSign]=\"false\"\n        ></bb-amount-ui>\n      </div>\n      <div class=\"bb-stack\">\n        <div\n          class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--spacing-lg bb-quick-transfer__modal-from bb-stack__item--fill\"\n          *ngIf=\"fromAccount$ | async as fromAccount\"\n        >\n          <div class=\"bb-quick-transfer__modal-wrap\">\n            <label\n              class=\"bb-text-support bb-subtitle font-weight-normal bb-block bb-block--xs\"\n              i18n=\"\n                From account label|Label for account to be transferred\n                from@@quick-transfer.confirmation-modal.from-label\"\n              >From</label\n            >\n            <div>\n              <bb-product-item-basic-account-ui\n                data-role=\"confirmation-from-account\"\n                [title]=\"fromAccount.name\"\n                [productNumber]=\"fromAccount.number\"\n                [amount]=\"fromAccount?.balance\"\n                [currency]=\"fromAccount?.currency\"\n                [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n                [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n                [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n                [active]=\"false\"\n              ></bb-product-item-basic-account-ui>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--spacing-lg\" aria-hidden=\"true\">\n          <bb-icon-ui name=\"arrow-forward\" size=\"md\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--fill\"\n          *ngIf=\"toPayee$ | async as toAccount\"\n        >\n          <div class=\"bb-quick-transfer__modal-wrap\">\n            <label\n              class=\"bb-text-support bb-subtitle font-weight-normal bb-block bb-block--xs\"\n              i18n=\"To account label|Label for account to be transferred to@@quick-transfer.confirmation-modal.to-label\"\n              >To</label\n            >\n            <div>\n              <bb-product-item-basic-account-ui\n                data-role=\"confirmation-to-account\"\n                [title]=\"toAccount.name\"\n                [productNumber]=\"toAccount.number\"\n                [amount]=\"toAccount?.balance\"\n                [currency]=\"toAccount?.currency\"\n                [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n                [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n                [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n                [active]=\"false\"\n              ></bb-product-item-basic-account-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          (click)=\"handleConfirm()\"\n          i18n=\"Confirm button|Button for to confirm transfer@@quick-transfer.confirmation-modal.confirm\"\n          data-role=\"modal-confirm-button\"\n          [isLoading]=\"(paymentOrderCallState$ | async) === loadingstate.LOADING\"\n        >\n          Confirm transfer\n        </bb-load-button-ui>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeModal()\"\n          [disabled]=\"(paymentOrderCallState$ | async) === loadingstate.LOADING\"\n        >\n          <span\n            i18n=\"Cancel button|Button for to cancel transfer confirmation@@quick-transfer.confirmation-modal.cancel\"\n            >Cancel</span\n          >\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i2$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i2$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1$1.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i2$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i9.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferConfirmationModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-confirmation-modal-ui',
                    templateUrl: './quick-transfer-confirmation-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { paymentTypes: [{
                type: Input
            }], config: [{
                type: Input
            }] } });

class CustomProductSelectorComponent {
    constructor(parentFormControl) {
        this.parentFormControl = parentFormControl;
        this.open = new EventEmitter();
        /**
         * parent touched state
         */
        this.touched = false;
        this.onChange = (_) => { };
        this.onTouched = () => { };
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
    writeValue(model) {
        if (!model) {
            return;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    markAsTouched() {
        this.onTouched();
    }
    /**
     * Method to open from account selector
     */
    openAccountSelectorView() {
        this.open.emit(true);
    }
}
/** @nocollapse */ CustomProductSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomProductSelectorComponent, deps: [{ token: i2$2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CustomProductSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CustomProductSelectorComponent, selector: "bb-custom-product-selector", inputs: { emptyLabel: "emptyLabel", account: "account", touched: "touched", ariaDescribedby: ["aria-describedby", "ariaDescribedby"] }, outputs: { open: "open" }, ngImport: i0, template: "<button\n  bbButton\n  color=\"unstyled\"\n  [class.border-danger]=\"touched && parentFormControl?.invalid\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  class=\"bb-stack form-control bb-quick-transfer-selector-field\"\n  (click)=\"openAccountSelectorView()\"\n>\n  <span\n    class=\"bb-stack__item bb-stack__item--fill bb-text-semi-bold bb-ellipsis--single-line\"\n    *ngIf=\"account; else accountTemplate\"\n    >{{ account.name }}</span\n  >\n  <ng-template #accountTemplate>\n    <span class=\"bb-stack__item bb-stack__item--fill bb-text-support\">{{ emptyLabel }}</span>\n  </ng-template>\n  <bb-icon-ui name=\"angle-right\" cropped class=\"bb-text-support bb-stack__item\"></bb-icon-ui>\n</button>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomProductSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-custom-product-selector',
                    templateUrl: './custom-product-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i2$2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { open: [{
                type: Output
            }], emptyLabel: [{
                type: Input
            }], account: [{
                type: Input
            }], touched: [{
                type: Input
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }] } });

class QuickTransferValidationMessageComponent {
    ngOnInit() {
        this.requiredMessage = this.getValidationMessage('required');
    }
    getValidationMessage(error) {
        var _a;
        const validation = (_a = this.validationMessages) === null || _a === void 0 ? void 0 : _a.find(msg => { var _a, _b; return !!((_b = (_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[error || msg.name]); });
        return (validation === null || validation === void 0 ? void 0 : validation.message) || '';
    }
}
/** @nocollapse */ QuickTransferValidationMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferValidationMessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferValidationMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferValidationMessageComponent, selector: "bb-quick-transfer-validation-message", inputs: { control: "control", validationMessages: "validationMessages", id: "id" }, ngImport: i0, template: "<bb-input-validation-message-ui\n  data-role=\"input-error\"\n  *ngIf=\"control?.touched && control?.invalid\"\n  [showErrors]=\"control?.touched && control?.invalid\"\n  [@fadeSlideInOut]\n>\n  <ng-container *ngIf=\"control?.errors?.['required']; else invalidError\">\n    <span data-role=\"required-error\" [attr.id]=\"id\" *ngIf=\"requiredMessage\">\n      {{ requiredMessage }}\n    </span>\n  </ng-container>\n\n  <ng-template #invalidError>\n    <span data-role=\"required-error\" [attr.id]=\"id\" *ngIf=\"getValidationMessage() as validationMessage\">\n      {{ validationMessage }}</span\n    >\n  </ng-template>\n</bb-input-validation-message-ui>\n", components: [{ type: i1$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [fadeSlideAnimation] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferValidationMessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-validation-message',
                    templateUrl: './validation-message.component.html',
                    animations: [fadeSlideAnimation],
                }]
        }], propDecorators: { control: [{
                type: Input
            }], validationMessages: [{
                type: Input
            }], id: [{
                type: Input
            }] } });

class QuickTransferFormComponent {
    constructor(store, formBuilder, locale) {
        this.store = store;
        this.formBuilder = formBuilder;
        this.locale = locale;
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.toPayee$;
        /**
         * Stream of fromAccount
         */
        this.fromAccount$ = this.store.fromAccount$;
        /**
         * Stream of amount
         */
        this.amount$ = this.store.amount$;
        /**
         * Stream of touchedFields
         */
        this.touchedFields$ = this.store.touchedFields$;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
        /**
         * unique key used for ids
         */
        this.id = new Date().getTime();
        /**
         * Stream of the current view
         */
        this.currentView$ = this.store.currentView$;
        this.destroy$ = new Subject();
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
        this.format = {
            groupSeparator: '',
            decimalSeparator: this.decimalSeparator,
            groupSize: 3,
        };
    }
    /**
     * Stream of the current view
     */
    get amountConfig() {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.fields.amount;
    }
    ngOnInit() {
        var _a, _b;
        this.initializeForm();
        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('amountGroup.amount')) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroy$)).subscribe(change => {
            this.storeAmountValue(change);
        });
        this.touchedFields$.pipe(take(1)).subscribe(fields => {
            if (fields === null || fields === void 0 ? void 0 : fields.length) {
                fields.forEach(field => {
                    var _a, _b;
                    (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(field)) === null || _b === void 0 ? void 0 : _b.markAsTouched();
                });
            }
        });
        //Set Initial form data from store
        combineLatest([
            this.amount$.pipe(take(1)),
            this.toPayee$.pipe(take(1)),
            this.fromAccount$.pipe(distinctUntilChanged()), // To have account preselected by route params
        ])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([amount, toAccount, fromAccount]) => {
            var _a, _b;
            const amountVal = amount === null || amount === void 0 ? void 0 : amount.amount;
            (_a = this.form) === null || _a === void 0 ? void 0 : _a.patchValue({
                amountGroup: {
                    amount: amountVal ? new BigNumber(amountVal).toFormat(this.format) : '',
                    currency: (amount === null || amount === void 0 ? void 0 : amount.currency) || ((_b = this.amountConfig) === null || _b === void 0 ? void 0 : _b.initialCurrency),
                },
                toAccount,
                fromAccount,
            });
        });
    }
    ngAfterViewInit() {
        this.store.focusElement$.pipe(distinctUntilChanged(), filter(Boolean), takeUntil(this.destroy$)).subscribe(el => {
            const focusElement = this.formEl.nativeElement.querySelector(el);
            if (focusElement) {
                focusElement.focus({ preventScroll: true });
                this.store.resetFocus();
            }
        });
        this.amount$
            .pipe(filter(amount => !amount), take(1))
            .subscribe(() => {
            var _a, _b, _c;
            (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('amountGroup.amount')) === null || _b === void 0 ? void 0 : _b.patchValue(' ');
            (_c = this.form) === null || _c === void 0 ? void 0 : _c.reset();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Method to open from account selector
     */
    openFromAccount() {
        this.store.setView(ViewState.FROM);
        this.store.setTouchedField('fromAccount');
    }
    /**
     * Method to open to account selector
     */
    openPayeeAccount() {
        this.store.setView(ViewState.PAYEE);
        this.store.setTouchedField('toAccount');
    }
    /**
     * Method to store amount input value
     */
    storeAmountValue(amount) {
        this.store.setAmount({ amount: amount === null || amount === void 0 ? void 0 : amount.replace(this.decimalSeparator, '.') });
    }
    /**
     * Method to handle transfer
     */
    openConfirmation() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const currentView = yield this.currentView$.pipe(first()).toPromise();
            if (currentView === ViewState.FORM && ((_a = this.form) === null || _a === void 0 ? void 0 : _a.valid)) {
                this.storeAmountValue(this.form.value.amountGroup.amount);
                this.store.setModalOpen(true);
            }
            else {
                this.setTouched('amountGroup.amount');
                this.setTouched('fromAccount');
                this.setTouched('toAccount');
            }
        });
    }
    /**
     * Method to check field Validity
     */
    isFieldValid(fieldName) {
        var _a;
        const control = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        return control && (control.valid || control.untouched);
    }
    /**
     * Method to set field as touched
     */
    setTouched(fieldName) {
        var _a;
        const control = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        if (control) {
            control.markAsTouched();
            this.store.setTouchedField(fieldName);
        }
    }
    initializeForm() {
        var _a;
        const { fromAccount, toAccount, amount } = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.fields) || {};
        this.form = this.formBuilder.group({
            amountGroup: this.formBuilder.group({
                amount: ['', (amount === null || amount === void 0 ? void 0 : amount.validators) || [], (amount === null || amount === void 0 ? void 0 : amount.asyncValidators) || []],
                currency: ['', Validators.required],
            }),
            fromAccount: ['', (fromAccount === null || fromAccount === void 0 ? void 0 : fromAccount.validators) || [], (fromAccount === null || fromAccount === void 0 ? void 0 : fromAccount.asyncValidators) || []],
            toAccount: ['', (toAccount === null || toAccount === void 0 ? void 0 : toAccount.validators) || [], (toAccount === null || toAccount === void 0 ? void 0 : toAccount.asyncValidators) || []],
        });
    }
}
/** @nocollapse */ QuickTransferFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFormComponent, deps: [{ token: QuickTransferStoreService }, { token: i2$2.FormBuilder }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferFormComponent, selector: "bb-quick-transfer-form-ui", inputs: { config: "config" }, viewQueries: [{ propertyName: "formEl", first: true, predicate: ["formElement"], descendants: true }], ngImport: i0, template: "<div class=\"bb-quick-transfer__view bb-quick-transfer__view--form\">\n  <div class=\"bb-block bb-quick-transfer__heading\">\n    <div class=\"bb-stack\">\n      <bb-header-ui\n        [heading]=\"config?.titles?.[viewState.FORM]\"\n        data-role=\"quick-transfer-header\"\n        headingType=\"h2\"\n        headingClasses=\"bb-block bb-block--lg\"\n        class=\"bb-stack__item bb-stack__item--fill\"\n      ></bb-header-ui>\n    </div>\n  </div>\n  <form\n    class=\"bb-quick-transfer__form\"\n    [formGroup]=\"form\"\n    data-role=\"quick-transfer-form\"\n    (ngSubmit)=\"openConfirmation()\"\n    #formElement\n  >\n    <fieldset [disabled]=\"(currentView$ | async) !== viewState.FORM\">\n      <legend class=\"sr-only\" i18n=\"Legend|Quick transfer form legend@@quick-transfer.form.legend\">\n        Quick transfer Form\n      </legend>\n      <div class=\"bb-block bb-block--lg\">\n        <label class=\"bb-label\" data-role=\"from-label\">{{ config?.fields?.fromAccount?.label }}</label>\n        <bb-custom-product-selector\n          [touched]=\"!isFieldValid('fromAccount')\"\n          formControlName=\"fromAccount\"\n          (focusout)=\"setTouched('fromAccount')\"\n          [account]=\"fromAccount$ | async\"\n          (open)=\"openFromAccount()\"\n          data-role=\"select-from-button\"\n          emptyLabel=\"Select your account\"\n          aria-describedby=\"{{ 'fromAccount-errors-' + id }}\"\n          i18n-emptyLabel=\"Select Account|Quick transfer input for account@@quick-transfer.form.from\"\n        ></bb-custom-product-selector>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'fromAccount-errors-' + id }}\"\n          [control]=\"form?.get('fromAccount')\"\n          [validationMessages]=\"config?.fields?.fromAccount?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div class=\"bb-block bb-block--lg\">\n        <label\n          class=\"bb-label\"\n          data-role=\"payee-label\"\n          i18n=\"Input label|Quick transfer input label for beneficiary@@quick-transfer.form.to.label\"\n          >{{ config?.fields?.toAccount?.label }}</label\n        >\n        <bb-custom-product-selector\n          [touched]=\"!isFieldValid('toAccount')\"\n          formControlName=\"toAccount\"\n          (focusout)=\"setTouched('toAccount')\"\n          [account]=\"toPayee$ | async\"\n          (open)=\"openPayeeAccount()\"\n          data-role=\"select-payee-button\"\n          emptyLabel=\"Select beneficiary\"\n          aria-describedby=\"{{ 'toAccount-errors-' + id }}\"\n          i18n-emptyLabel=\"Select beneficiary|Quick transfer input for beneficiary@@quick-transfer.form.to\"\n        ></bb-custom-product-selector>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'toAccount-errors-' + id }}\"\n          [control]=\"form?.get('toAccount')\"\n          [validationMessages]=\"config?.fields?.toAccount?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div\n        class=\"bb-block bb-block--xl\"\n        formGroupName=\"amountGroup\"\n        [class.was-validated]=\"!isFieldValid('amountGroup.amount')\"\n      >\n        <label\n          class=\"bb-label\"\n          for=\"{{ 'amount-' + id }}\"\n          i18n=\"Amount of transfer|Quick transfer input for amount@@quick-transfer.form.amount\"\n          >{{ config?.fields?.amount?.label }}</label\n        >\n        <bb-amount-input-ui\n          formControlName=\"amount\"\n          data-role=\"amount-input\"\n          [id]=\"'amount-' + id\"\n          [autoDecimal]=\"amountConfig?.autoDecimal\"\n          (focusout)=\"setTouched('amountGroup.amount')\"\n          [wrapperClasses]=\"amountConfig?.wrapperClasses\"\n          [mapCurrency]=\"config?.uiComponentProps.mapCurrency\"\n          [currency]=\"(fromAccount$ | async)?.currency || amountConfig?.initialCurrency\"\n          [required]=\"amountConfig?.required\"\n          aria-describedby=\"{{ 'amount-errors-' + id }}\"\n          [placeholder]=\"amountConfig?.placeholder\"\n        ></bb-amount-input-ui>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'amount-errors-' + id }}\"\n          [control]=\"form?.get('amountGroup.amount')\"\n          [validationMessages]=\"amountConfig?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div class=\"bb-block bb-block--sm\">\n        <button\n          bbButton\n          color=\"primary\"\n          data-role=\"open-confirmation\"\n          [block]=\"true\"\n          i18n=\"Approve button|Transfer the amount@@quick-transfer.button.transfer-now\"\n          type=\"submit\"\n        >\n          Transfer Now\n        </button>\n      </div>\n    </fieldset>\n  </form>\n</div>\n", components: [{ type: i3$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: CustomProductSelectorComponent, selector: "bb-custom-product-selector", inputs: ["emptyLabel", "account", "touched", "aria-describedby"], outputs: ["open"] }, { type: QuickTransferValidationMessageComponent, selector: "bb-quick-transfer-validation-message", inputs: ["control", "validationMessages", "id"] }, { type: i6$1.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i2$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i9.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-form-ui',
                    templateUrl: './quick-transfer-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: QuickTransferStoreService }, { type: i2$2.FormBuilder }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { config: [{
                type: Input
            }], formEl: [{
                type: ViewChild,
                args: ['formElement']
            }] } });

const filterByProductKinds = (arrangements, productKinds) => {
    const _arrangements = arrangements || [];
    return _arrangements.filter((arrangement) => productKinds ? productKinds.includes(arrangement.productKindName) : true);
};
/**
 * @deprecated since version 1.1.0, use `mapItems` instead
 */
const filterByOtherProps = (arrangements, filters) => {
    const _arrangements = arrangements || [];
    return _arrangements.filter((arr) => filters && filters.length
        ? filters.every(({ key, value }) => {
            return value.some(v => arr.defaultRecord && v === arr.defaultRecord[key]);
        })
        : true);
};
const filterByDisabledCombinations = (arrangements, counterPartyAccount, disabledCombinations, location) => {
    if (!arrangements)
        return [];
    const combinations = disabledCombinations || [];
    // Disable a transfer from connected to connected and connected to contacts account by default
    combinations.push({
        from: QuickTransferProductKinds.connectedAccounts,
        to: QuickTransferProductKinds.connectedAccounts,
    });
    combinations.push({ from: QuickTransferProductKinds.connectedAccounts, to: QuickTransferProductKinds.contacts });
    const disabledProductKinds = combinations
        .filter((i) => {
        return location === Location.FROM
            ? i.to === (counterPartyAccount === null || counterPartyAccount === void 0 ? void 0 : counterPartyAccount.productKindName)
            : i.from === (counterPartyAccount === null || counterPartyAccount === void 0 ? void 0 : counterPartyAccount.productKindName);
    })
        .map(i => (location === Location.FROM ? i.from : i.to));
    return arrangements.filter(arr => !disabledProductKinds.includes(arr.productKindName));
};

class QuickTransferFromAccountComponent extends BaseAccountSelectorComponent {
    constructor(store) {
        super(store);
        this.store = store;
        /**
         * Stream of fromAccount
         */
        this.fromAccountId$ = this.store.fromAccount$.pipe(filter(Boolean), pluck('uuid'));
        /**
         * Stream of toPayee
         */
        this.selectedToPayee$ = this.store.toPayee$.pipe(take(1));
        /**
         * Selector of the to account button to be focused
         */
        this.fromAccountSelector = FROM_ACCOUNT;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
    }
    ngAfterViewInit() {
        this.backbutton.nativeElement.focus({ preventScroll: true });
    }
    /**
     * Method to handle selecting from account
     *
     * @param id
     */
    handleSelectFrom(id) {
        this.store.selectFromAccount(id);
    }
    /**
     * If not yet called the accounts API call it
     */
    ngOnInit() {
        const { fields, disabledCombinations } = this.config || {};
        const { productKinds } = (fields === null || fields === void 0 ? void 0 : fields.fromAccount) || {};
        combineLatest([this.extAccountsCallState$, this.accountsCallState$])
            .pipe(take(1))
            .subscribe(([extAccountsState, accountsState]) => {
            if (extAccountsState === LoadingState.INIT && (productKinds === null || productKinds === void 0 ? void 0 : productKinds.includes(QuickTransferProductKinds.connectedAccounts))) {
                this.getExtAccounts();
            }
            if (accountsState === LoadingState.INIT)
                this.getAccounts();
        });
        this.accounts$ = this.store.debitAccounts$.pipe(take(1), withLatestFrom(this.selectedToPayee$.pipe(take(1))), map(([accounts, toPayee]) => filterByDisabledCombinations(accounts, toPayee, disabledCombinations, Location.FROM)));
        this.extAccounts$ = this.store.extAccounts$.pipe(withLatestFrom(this.selectedToPayee$.pipe(take(1))), map(([accounts, toPayee]) => filterByDisabledCombinations(accounts, toPayee, disabledCombinations, Location.FROM)));
    }
}
/** @nocollapse */ QuickTransferFromAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFromAccountComponent, deps: [{ token: QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferFromAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferFromAccountComponent, selector: "bb-quick-transfer-from-account-ui", providers: [QuickTransferStoreService], viewQueries: [{ propertyName: "backbutton", first: true, predicate: ["back"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-quick-transfer__view\">\n  <div class=\"bb-quick-transfer__heading bb-stack bb-quick-transfer__heading--border\" data-role=\"from-account-header\">\n    <button\n      (click)=\"backToForm(fromAccountSelector)\"\n      bbButton\n      aria-label=\"back to form\"\n      i18-aria-label=\"Back button|Quick transfer back button@@quick-transfer.fromaccount.back.button\"\n      color=\"unstyled\"\n      class=\"bb-stack__item btn-unstyled--focusable bb-block bb-block--lg\"\n      #back\n    >\n      <bb-icon-ui name=\"arrow-back\"></bb-icon-ui>\n    </button>\n    <bb-header-ui\n      class=\"bb-stack__item\"\n      headingClasses=\"h3 bb-block bb-block--lg\"\n      [heading]=\"config?.titles?.[viewState.FROM]\"\n      headingType=\"h2\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-quick-transfer__tabs-content scrollable-box-content\" data-role=\"from-account\">\n    <ng-container\n      *ngIf=\"{ internal: accountsCallState$ | async, external: extAccountsCallState$ | async } as callStates\"\n    >\n      <ng-container *ngIf=\"callStates.internal && callStates.external\">\n        <ng-container [ngSwitch]=\"true\">\n          <ng-container\n            *ngSwitchCase=\"callStates.internal === loadingstate.LOADING && callStates.external === loadingstate.LOADING\"\n          >\n            <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"!!callStates.internal['error'] && !!callStates.external['error']\">\n            <ng-container *ngTemplateOutlet=\"errorCase\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngIf=\"callStates.internal !== loadingstate.LOADING; else loadingState\">\n              <ng-container *ngIf=\"callStates.internal === loadingstate.LOADED\">\n                <div *ngIf=\"accounts$ | async as accounts\">\n                  <bb-quick-transfer-accounts-ui\n                    data-role=\"internal-accounts\"\n                    [arrangements]=\"accounts\"\n                    (select)=\"handleSelectFrom($event)\"\n                    [selected]=\"fromAccountId$ | async\"\n                    [selectedCounterPartyAccount]=\"(selectedToPayee$ | async)?.uuid\"\n                    [config]=\"config\"\n                  ></bb-quick-transfer-accounts-ui>\n                </div>\n              </ng-container>\n              <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.internal['error']\">\n                <bb-icon-ui\n                  name=\"error-outline\"\n                  size=\"md\"\n                  class=\"bb-stack__item bb-stack__item--align-top\"\n                ></bb-icon-ui>\n                <div class=\"bb-subtitle\">\n                  <span i18n=\"Fetch accounts error|Fetch accounts error@@quick-transfer.fetch-accounts.error-message\">\n                    We could not retrieve data for your internal accounts.</span\n                  >\n                  <br />\n                  <button\n                    bbButton\n                    color=\"link-text\"\n                    data-role=\"reload-accounts\"\n                    (click)=\"getAccounts()\"\n                    i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                  >\n                    Reload\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n\n            <div *ngIf=\"callStates.external !== loadingstate.LOADED || (extAccounts$ | async) as extAccounts\">\n              <h3\n                class=\"bb-subheader bb-text-support bb-quick-transfer__subheader bb-block bb-block--no-margin bb-inline-stack h4\"\n                *ngIf=\"\n                  (extAccounts.length || callStates.external !== loadingstate.LOADED) &&\n                  config?.fields?.fromAccount?.connectedAccountsSubHeader as subHeader\n                \"\n              >\n                <bb-icon-ui name=\"insert-link\" cropped class=\"bb-inline-stack__item--spacing-sm\"></bb-icon-ui>\n                <span\n                  data-role=\"external-accounts-header\"\n                  i18n=\"\n                    Account type subheader|Quick transfer 'connected accounts' type\n                    subheader@@quick-transfer.from.account-type-subheader\"\n                >\n                  {{ subHeader }}\n                </span>\n              </h3>\n              <ng-container *ngIf=\"callStates.external !== loadingstate.LOADING; else loadingState\">\n                <bb-quick-transfer-accounts-ui\n                  data-role=\"external-accounts\"\n                  *ngIf=\"callStates.external === loadingstate.LOADED\"\n                  [arrangements]=\"extAccounts\"\n                  (select)=\"handleSelectFrom($event)\"\n                  [selected]=\"fromAccountId$ | async\"\n                  [config]=\"config\"\n                ></bb-quick-transfer-accounts-ui>\n                <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.external['error']\">\n                  <bb-icon-ui\n                    name=\"error-outline\"\n                    size=\"md\"\n                    class=\"bb-stack__item bb-stack__item--align-top\"\n                  ></bb-icon-ui>\n                  <div class=\"bb-subtitle\">\n                    <span\n                      i18n=\"\n                        Fetch external accounts error|Fetch external accounts\n                        error@@quick-transfer.fetch-external-accounts.error-message\"\n                    >\n                      We could not retrieve data for your external accounts.</span\n                    >\n                    <br />\n                    <button\n                      bbButton\n                      color=\"link-text\"\n                      data-role=\"reload-accounts\"\n                      (click)=\"getExtAccounts()\"\n                      i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                    >\n                      Reload\n                    </button>\n                  </div>\n                </div>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #loadingState let-size=\"$implicit\">\n  <div class=\"bb-loading-indicator\">\n    <bb-loading-indicator-ui [loaderSize]=\"size || 'sm'\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n<ng-template #errorCase>\n  <div class=\"bb-quick-transfer__heading\">\n    <div class=\"bb-state-container\" data-role=\"double-error-state\">\n      <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n      <bb-empty-state-ui\n        title=\"No data retrieved\"\n        class=\"bb-block bb-block--md\"\n        iconClasses=\"\"\n        iconSize=\"xxl\"\n        message=\"We could not retrieve data for your accounts.\"\n        i18n-message=\"Could not retrieve data|Fetch accounts error@@quick-transfer.fetch-data.error-message\"\n        iconModifier=\"error-outline\"\n      ></bb-empty-state-ui>\n      <button\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        (click)=\"getAccounts(); getExtAccounts()\"\n        data-role=\"reload-accounts\"\n        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n      >\n        Reload\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: ["arrangements", "selected", "selectedCounterPartyAccount", "config"], outputs: ["select"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i9.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFromAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-from-account-ui',
                    templateUrl: './quick-transfer-from-account.component.html',
                    providers: [QuickTransferStoreService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { backbutton: [{
                type: ViewChild,
                args: ['back']
            }] } });

class QuickTransferToAccountComponent extends BaseAccountSelectorComponent {
    constructor(store) {
        super(store);
        this.store = store;
        /**
         * Show My Accounts or Contacts tabs, It is My Accounts by default
         */
        this.selectedTab = 0;
        /**
         * Stream of contacts
         */
        this.contacts$ = this.store.contacts$;
        /**
         * Stream of toPayee
         */
        this.selectedToPayeeId$ = this.store.toPayee$.pipe(filter(Boolean), pluck('uuid'));
        /**
         * Stream of fromAccount
         */
        this.selectedFromAccount$ = this.store.fromAccount$.pipe(take(1));
        /**
         * Stream of contactsCallState
         */
        this.contactsCallState$ = this.store.contactsCallState$;
        /**
         * Stream to indicate if contacts are going to be rendered
         */
        this.renderContacts$ = this.selectedFromAccount$.pipe(map(account => {
            var _a;
            const { toAccount } = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.fields) || {};
            const { connectedAccounts, contacts } = QuickTransferProductKinds;
            const isCounterPartyConnectedAccount = (account === null || account === void 0 ? void 0 : account.productKindName) === connectedAccounts;
            const isContactsSetInConfig = (toAccount === null || toAccount === void 0 ? void 0 : toAccount.productKinds) ? toAccount === null || toAccount === void 0 ? void 0 : toAccount.productKinds.includes(contacts) : true;
            return !isCounterPartyConnectedAccount && isContactsSetInConfig;
        }));
        /**
         * Selector of the to account button to be focused
         */
        this.toAccountSelector = TO_ACCOUNT;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
    }
    /**
     * If not yet called the contacts, accounts and external accounts API call it
     */
    ngOnInit() {
        const { fields, disabledCombinations } = this.config || {};
        const { productKinds } = (fields === null || fields === void 0 ? void 0 : fields.toAccount) || {};
        combineLatest([this.extAccountsCallState$, this.accountsCallState$])
            .pipe(take(1))
            .subscribe(([extAccountsState, accountsState]) => {
            if (extAccountsState === LoadingState.INIT && (productKinds === null || productKinds === void 0 ? void 0 : productKinds.includes(QuickTransferProductKinds.connectedAccounts))) {
                this.getExtAccounts();
            }
            if (accountsState === LoadingState.INIT)
                this.getAccounts();
        });
        this.accounts$ = this.store.creditAccounts$.pipe(take(1), withLatestFrom(this.selectedFromAccount$), map(([accounts, fromAccount]) => filterByDisabledCombinations(accounts, fromAccount, disabledCombinations, Location.TO)));
        this.extAccounts$ = this.store.extAccounts$.pipe(withLatestFrom(this.selectedFromAccount$), map(([accounts, fromAccount]) => filterByDisabledCombinations(accounts, fromAccount, disabledCombinations, Location.TO)));
    }
    ngAfterViewInit() {
        this.backbutton.nativeElement.focus({ preventScroll: true });
    }
    /**
     * Method to switch tabs
     *
     * @param ev
     */
    onTabSelect(ev) {
        this.selectedTab = ev;
        if (ev === 1) {
            this.contactsCallState$
                .pipe(take(1), filter(s => s === LoadingState.INIT))
                .subscribe(() => {
                this.getContacts();
            });
        }
    }
    /**
     * Method to set payee
     *
     * @param id
     */
    pickPayee(id) {
        this.store.setPayee(id);
    }
    /**
     * Method to dispatch store action for fetching contacts
     */
    getContacts() {
        this.store.fetchContacts();
    }
}
/** @nocollapse */ QuickTransferToAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferToAccountComponent, deps: [{ token: QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferToAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferToAccountComponent, selector: "bb-quick-transfer-to-account-ui", viewQueries: [{ propertyName: "backbutton", first: true, predicate: ["back"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-quick-transfer__view\">\n  <div\n    class=\"bb-quick-transfer__heading bb-stack\"\n    [class.bb-quick-transfer__heading--border]=\"!(renderContacts$ | async)\"\n    data-role=\"to-account-header\"\n  >\n    <button\n      (click)=\"backToForm(toAccountSelector)\"\n      bbButton\n      aria-label=\"back to form\"\n      i18-aria-label=\"Back button|Quick transfer back button@@quick-transfer.to-account.back.button\"\n      color=\"unstyled\"\n      class=\"bb-stack__item btn-unstyled--focusable bb-block bb-block--xs\"\n      [class.bb-stack__item--align-top]=\"!(renderContacts$ | async)\"\n      #back\n    >\n      <bb-icon-ui name=\"arrow-back\"></bb-icon-ui>\n    </button>\n    <bb-header-ui\n      class=\"bb-stack__item\"\n      headingClasses=\"bb-block bb-block--{{ (renderContacts$ | async) ? 'sm' : 'lg' }} h3\"\n      [heading]=\"config?.titles?.[viewState.PAYEE]\"\n      headingType=\"h2\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-quick-transfer__tabs-container\">\n    <bb-tab-group-ui *ngIf=\"renderContacts$ | async\" [initialSelection]=\"0\" (select)=\"onTabSelect($event)\">\n      <bb-tab-ui\n        data-role=\"account-tab-header\"\n        i18n=\"Tab header for to-accounts|Quick transfer 'my accounts' tab header@@quick-transfer.to.tabs.account-header\"\n        >My Accounts</bb-tab-ui\n      >\n      <bb-tab-ui\n        data-role=\"contacts-tab-header\"\n        i18n=\"Tab header for to-contacts|Quick transfer 'contacts' tab header@@quick-transfer.to.tabs.contact-header\"\n        >Contacts</bb-tab-ui\n      >\n    </bb-tab-group-ui>\n    <div class=\"bb-quick-transfer__tabs-content scrollable-box-content\" [@tabsAnimation]=\"selectedTab\">\n      <div *ngIf=\"selectedTab === 0\" data-role=\"quick-transfer-accounts-tab\">\n        <ng-container\n          *ngIf=\"{ internal: accountsCallState$ | async, external: extAccountsCallState$ | async } as callStates\"\n        >\n          <ng-container *ngIf=\"callStates.internal && callStates.external\">\n            <ng-container [ngSwitch]=\"true\">\n              <ng-container\n                *ngSwitchCase=\"\n                  callStates.internal === loadingstate.LOADING && callStates.external === loadingstate.LOADING\n                \"\n              >\n                <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n              </ng-container>\n              <ng-container *ngSwitchCase=\"!!callStates.internal['error'] && !!callStates.external['error']\">\n                <ng-container *ngTemplateOutlet=\"errorCase\"></ng-container>\n              </ng-container>\n              <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"callStates.internal !== loadingstate.LOADING; else loadingState\">\n                  <ng-container *ngIf=\"callStates.internal === loadingstate.LOADED\">\n                    <div *ngIf=\"accounts$ | async as accounts\">\n                      <bb-quick-transfer-accounts-ui\n                        data-role=\"internal-accounts\"\n                        [arrangements]=\"accounts\"\n                        (select)=\"pickPayee($event)\"\n                        [selected]=\"selectedToPayeeId$ | async\"\n                        [selectedCounterPartyAccount]=\"(selectedFromAccount$ | async)?.uuid\"\n                        [config]=\"config\"\n                      ></bb-quick-transfer-accounts-ui>\n                    </div>\n                  </ng-container>\n                  <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.internal['error']\">\n                    <bb-icon-ui\n                      name=\"error-outline\"\n                      size=\"md\"\n                      class=\"bb-stack__item bb-stack__item--align-top\"\n                    ></bb-icon-ui>\n                    <div class=\"bb-subtitle\">\n                      <span\n                        i18n=\"Fetch accounts error|Fetch accounts error@@quick-transfer.fetch-accounts.error-message\"\n                      >\n                        We could not retrieve data for your internal accounts.</span\n                      >\n                      <br />\n                      <button\n                        bbButton\n                        color=\"link-text\"\n                        data-role=\"reload-accounts\"\n                        (click)=\"getAccounts()\"\n                        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                      >\n                        Reload\n                      </button>\n                    </div>\n                  </div>\n                </ng-container>\n\n                <div *ngIf=\"callStates.external !== loadingstate.LOADED || (extAccounts$ | async) as extAccounts\">\n                  <h3\n                    class=\"bb-subheader bb-text-support bb-quick-transfer__subheader bb-block bb-block--no-margin bb-inline-stack\"\n                    *ngIf=\"\n                      (extAccounts.length || callStates.external !== loadingstate.LOADED) &&\n                      config?.fields?.toAccount?.connectedAccountsSubHeader as subHeader\n                    \"\n                  >\n                    <bb-icon-ui name=\"insert-link\" cropped class=\"bb-inline-stack__item--spacing-sm\"></bb-icon-ui>\n                    <span\n                      data-role=\"external-accounts-header\"\n                      i18n=\"\n                        Account type subheader|Quick transfer 'connected accounts' type\n                        subheader@@quick-transfer.to.account-type-subheader\"\n                    >\n                      {{ subHeader }}\n                    </span>\n                  </h3>\n                  <ng-container *ngIf=\"callStates.external !== loadingstate.LOADING; else loadingState\">\n                    <bb-quick-transfer-accounts-ui\n                      data-role=\"external-accounts\"\n                      *ngIf=\"callStates.external === loadingstate.LOADED\"\n                      [arrangements]=\"extAccounts\"\n                      (select)=\"pickPayee($event)\"\n                      [selected]=\"selectedToPayeeId$ | async\"\n                      [config]=\"config\"\n                    ></bb-quick-transfer-accounts-ui>\n                    <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.external['error']\">\n                      <bb-icon-ui\n                        name=\"error-outline\"\n                        size=\"md\"\n                        class=\"bb-stack__item bb-stack__item--align-top\"\n                      ></bb-icon-ui>\n                      <div class=\"bb-subtitle\">\n                        <span\n                          i18n=\"\n                            Fetch external accounts error|Fetch external accounts\n                            error@@quick-transfer.fetch-external-accounts.error-message\"\n                        >\n                          We could not retrieve data for your external accounts.</span\n                        >\n                        <br />\n                        <button\n                          bbButton\n                          color=\"link-text\"\n                          data-role=\"reload-accounts\"\n                          (click)=\"getExtAccounts()\"\n                          i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                        >\n                          Reload\n                        </button>\n                      </div>\n                    </div>\n                  </ng-container>\n                </div>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div *ngIf=\"selectedTab === 1\" data-role=\"quick-transfer-contacts-tab\">\n        <ng-container *ngIf=\"contactsCallState$ | async as contactsCallState\">\n          <ng-container [ngSwitch]=\"true\">\n            <ng-container *ngSwitchCase=\"contactsCallState === loadingstate.LOADED\">\n              <div *ngIf=\"contacts$ | async as contacts\">\n                <bb-quick-transfer-accounts-ui\n                  [arrangements]=\"contacts\"\n                  (select)=\"pickPayee($event)\"\n                  [selected]=\"selectedToPayeeId$ | async\"\n                  [config]=\"config\"\n                ></bb-quick-transfer-accounts-ui>\n              </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"contactsCallState === loadingstate.LOADING\">\n              <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"!!contactsCallState.error\">\n              <div class=\"bb-quick-transfer__heading\">\n                <div class=\"bb-state-container\" data-role=\"contacts-error-state\">\n                  <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n                  <bb-empty-state-ui\n                    title=\"No data retrieved\"\n                    class=\"bb-block bb-block--md\"\n                    iconClasses=\"\"\n                    iconSize=\"xxl\"\n                    message=\"We could not retrieve data for your contacts.\"\n                    i18n-message=\"\n                      Could not retrieve contacts|Fetch contacts error@@quick-transfer.fetch-contacts.error-message\"\n                    iconModifier=\"error-outline\"\n                  ></bb-empty-state-ui>\n                  <button\n                    bbButton\n                    buttonSize=\"sm\"\n                    color=\"primary\"\n                    (click)=\"getContacts()\"\n                    data-role=\"reload-accounts\"\n                    i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                  >\n                    Reload\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #loadingState let-size=\"$implicit\">\n  <div class=\"bb-loading-indicator\">\n    <bb-loading-indicator-ui [loaderSize]=\"size || 'sm'\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n<ng-template #errorCase>\n  <div class=\"bb-quick-transfer__heading\">\n    <div class=\"bb-state-container\" data-role=\"double-error-state\">\n      <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n      <bb-empty-state-ui\n        title=\"No data retrieved\"\n        class=\"bb-block bb-block--md\"\n        iconClasses=\"\"\n        message=\"We could not retrieve data for your accounts.\"\n        i18n-message=\"Could not retrieve data|Fetch accounts error@@quick-transfer.fetch-data.error-message\"\n        iconModifier=\"error-outline\"\n      ></bb-empty-state-ui>\n      <button\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        (click)=\"getAccounts(); getExtAccounts()\"\n        data-role=\"reload-accounts\"\n        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n      >\n        Reload\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4$1.TabGroupComponent, selector: "bb-tab-group-ui", inputs: ["initialSelection"], outputs: ["select"] }, { type: i4$1.TabComponent, selector: "bb-tab-ui" }, { type: QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: ["arrangements", "selected", "selectedCounterPartyAccount", "config"], outputs: ["select"] }, { type: i6$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i9.AsyncPipe }, animations: [tabsAnim], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferToAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-to-account-ui',
                    templateUrl: './quick-transfer-to-account.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tabsAnim],
                }]
        }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { backbutton: [{
                type: ViewChild,
                args: ['back']
            }] } });

const timing = '200ms ease-in';
const distances = {
    normalX: 'translateX(0%)',
    right: 'translateX(100%)',
    left: 'translateX(-100%)',
    normalY: 'translateY(0%)',
    bottom: 'translateY(100%)',
};
const slideAnimation = animation([
    style({
        position: 'absolute',
        height: '100%',
        width: '100%',
        transform: '{{from}}',
        display: 'block',
        top: 0,
    }),
    animate(timing, style({ transform: '{{to}}' })),
]);
function slide2D(from, to) {
    return [
        transition(':enter', [
            useAnimation(slideAnimation, {
                params: { from, to },
            }),
        ]),
        transition(':leave', [
            useAnimation(slideAnimation, {
                params: { from: to, to: from },
            }),
        ]),
    ];
}
// used to animate account selector view
const slideLeftAnimation = trigger('slideLeft', slide2D(distances.right, distances.normalX));
// used to animate the main view "form view"
const slideRightAnimation = trigger('slideRight', slide2D(distances.left, distances.normalX));
// used for transition of the success/fail screen
const slideUpAnimation = trigger('slideUp', slide2D(distances.bottom, distances.normalY));

const fromAccount = {
    productKinds: [
        QuickTransferProductKinds.savingsAccount,
        QuickTransferProductKinds.currentAccount,
        QuickTransferProductKinds.creditCard,
        QuickTransferProductKinds.loanAccount,
        QuickTransferProductKinds.connectedAccounts,
    ],
    label: $localize `:@@quick-transfer.form.label:From`,
    mapItems: accounts => {
        return accounts.filter((account) => ['EUR', 'AED', 'USD'].includes((account === null || account === void 0 ? void 0 : account.currency) || ''));
    },
    connectedAccountsSubHeader: $localize `:@@quick-transfer-initiator-connected-acc-subheader:Connected Accounts`,
    validators: [Validators.required],
    validationMessages: [
        {
            name: 'required',
            message: $localize `:@@quick-transfer-initiator-validation-required:Account is required`,
        },
    ],
};
const toAccount = {
    productKinds: [
        QuickTransferProductKinds.savingsAccount,
        QuickTransferProductKinds.currentAccount,
        QuickTransferProductKinds.creditCard,
        QuickTransferProductKinds.loanAccount,
        QuickTransferProductKinds.connectedAccounts,
        QuickTransferProductKinds.contacts,
    ],
    label: $localize `:@@quick-transfer.to.label:To`,
    mapContacts: (contacts) => contacts.filter(contact => !!contact.number),
    connectedAccountsSubHeader: $localize `:@@quick-transfer-counterparty-connected-acc-subheader:Connected Accounts`,
    validators: [Validators.required],
    validationMessages: [
        {
            name: 'required',
            message: $localize `:@@quick-transfer-counterparty-validation-required:Beneficiary is required`,
        },
    ],
};
const amount = {
    initialCurrency: 'USD',
    autoDecimal: true,
    placeholder: '0.00',
    wrapperClasses: 'bb-amount-input__field--large',
    label: $localize `:@@quick-transfer.amount.label:Amount`,
    validationMessages: [
        {
            name: 'nonZero',
            message: $localize `:@@quick-transfer-counterparty-validation-invalid-amount:Transfer amount is required`,
        },
    ],
    validators: [nonZeroValidator],
};
const configDefaults = {
    fields: { fromAccount, toAccount, amount },
    businessFunction: 'A2A Transfer',
    titles: {
        [ViewState.FORM]: $localize `:@@quick-transfer-journey.title:Quick Transfer`,
        [ViewState.FROM]: $localize `:@@quick-transfer-journey.initiator-title:Transfer from`,
        [ViewState.PAYEE]: $localize `:@@quick-transfer-journey.counterparty-title:Transfer to`,
        [ViewState.REVIEW]: $localize `:@@quick-transfer-journey.review-title:Quick Transfer`,
    },
    paymentTypes: {
        internal: 'INTERNAL_TRANSFER',
        external: 'EXTERNAL_A2A',
        contact: 'INTRABANK_TRANSFER',
    },
    disabledCombinations: [
        { from: QuickTransferProductKinds.loanAccount, to: QuickTransferProductKinds.loanAccount },
        { from: QuickTransferProductKinds.creditCard, to: QuickTransferProductKinds.creditCard },
    ],
    uiComponentProps: {
        mapCurrency: true,
        accountNumberFormat: {
            segments: 0,
            length: 0,
            maskRange: [0, 0],
        },
    },
};
const QuickTransferJourneyConfigurationToken = new InjectionToken('QuickTransferJourneyConfigurationToken injection token');
class QuickTransferJourneyConfigService {
    constructor(config) {
        this.config = config;
        this._config = Object.assign(Object.assign({}, configDefaults), (this.config || {}));
    }
    get defaults() {
        return configDefaults;
    }
    get fields() {
        return this._config.fields;
    }
    get businessFunction() {
        return this._config.businessFunction;
    }
    get paymentTypes() {
        return this._config.paymentTypes;
    }
    get disabledCombinations() {
        return this._config.disabledCombinations;
    }
    get productSummaryQueryParameters() {
        return this._config.productSummaryQueryParameters;
    }
    get uiComponentProps() {
        return this._config.uiComponentProps;
    }
    get titles() {
        return this._config.titles;
    }
}
/** @nocollapse */ QuickTransferJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyConfigService, deps: [{ token: QuickTransferJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [QuickTransferJourneyConfigurationToken]
                }] }]; } });

class QuickTransferJourneyComponent {
    constructor(store, router, activatedRoute, config) {
        this.store = store;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.config = config;
        this.subscription$ = new Subscription();
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
        /**
         * Stream of the current view
         */
        this.currentView$ = this.store.currentView$;
        /**
         * Success image path
         */
        this.successImg = 'assets/bb-quick-transfer-widget-ang/succeed.svg';
        /**
         * Fail image path
         */
        this.successImgNoMotion = 'assets/bb-quick-transfer-widget-ang/no-motion.svg';
    }
    ngOnInit() {
        var _a, _b;
        this.subscription$ = this.router.events
            .pipe(filter(event => event instanceof NavigationEnd), startWith(getRouteParams(this.activatedRoute.root)), withLatestFrom(this.store.touchedFields$, this.store.accountsCallState$), map(([_, touchedFields, callState]) => {
            if (callState === LoadingState.INIT)
                this.store.fetchAccounts();
            return !(touchedFields === null || touchedFields === void 0 ? void 0 : touchedFields.includes('fromAccount')); // Indicate if there is already selected account by user
        }), filter(Boolean), concatMap(() => this.applyDisabledCombination(getRouteParams(this.activatedRoute.root).selectedAccount)))
            .subscribe(() => {
            const selectedAccountId = getRouteParams(this.activatedRoute.root).selectedAccount;
            this.store.selectFromAccount(selectedAccountId);
        });
        this.store.updateDefaultCurrency((_b = (_a = this.config.fields) === null || _a === void 0 ? void 0 : _a.amount) === null || _b === void 0 ? void 0 : _b.initialCurrency);
    }
    ngOnDestroy() {
        this.store.reset();
        this.subscription$.unsubscribe();
    }
    /**
     * Apply disabled combination filtration for selected product summary item in app level
     */
    applyDisabledCombination(id) {
        const { disabledCombinations } = this.config || {};
        return this.store.debitAccounts$.pipe(filter(Boolean), take(1), withLatestFrom(this.store.toPayee$), map(([acc, toPayee]) => {
            const _accounts = filterByDisabledCombinations(acc, toPayee, disabledCombinations, Location.FROM);
            return _accounts.some((item) => item.uuid === id);
        }), filter(Boolean));
    }
}
/** @nocollapse */ QuickTransferJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyComponent, deps: [{ token: QuickTransferStoreService }, { token: i2$3.Router }, { token: i2$3.ActivatedRoute }, { token: QuickTransferJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferJourneyComponent, selector: "bb-quick-transfer-journey", providers: [QuickTransferJourneyConfigService, QuickTransferStoreService], ngImport: i0, template: "<div class=\"bb-quick-transfer\" *ngIf=\"currentView$ | async as currentView\">\n  <bb-quick-transfer-form-ui\n    [config]=\"config\"\n    *ngIf=\"currentView === viewState.FORM || currentView === viewState.COMPLETE as formView\"\n    [@slideRight]\n  ></bb-quick-transfer-form-ui>\n  <bb-quick-transfer-from-account-ui\n    *ngIf=\"currentView === viewState.FROM as fromView\"\n    [config]=\"config\"\n    [@slideLeft]\n  ></bb-quick-transfer-from-account-ui>\n  <bb-quick-transfer-to-account-ui\n    *ngIf=\"currentView === viewState.PAYEE as payeeView\"\n    [config]=\"config\"\n    [@slideLeft]\n  ></bb-quick-transfer-to-account-ui>\n  <div class=\"bb-quick-transfer__success-overlay\" *ngIf=\"currentView === viewState.COMPLETE\" [@fadeIn]></div>\n  <bb-quick-transfer-complete-ui\n    *ngIf=\"currentView === viewState.COMPLETE\"\n    [successImg]=\"successImg\"\n    [successImgNoMotion]=\"successImgNoMotion\"\n    [config]=\"config\"\n    [@slideUp]\n  ></bb-quick-transfer-complete-ui>\n\n  <bb-quick-transfer-confirmation-modal-ui\n    [paymentTypes]=\"config.paymentTypes\"\n    [config]=\"config\"\n  ></bb-quick-transfer-confirmation-modal-ui>\n</div>\n", components: [{ type: QuickTransferFormComponent, selector: "bb-quick-transfer-form-ui", inputs: ["config"] }, { type: QuickTransferFromAccountComponent, selector: "bb-quick-transfer-from-account-ui" }, { type: QuickTransferToAccountComponent, selector: "bb-quick-transfer-to-account-ui" }, { type: QuickTransferCompleteComponent, selector: "bb-quick-transfer-complete-ui", inputs: ["successImg", "successImgNoMotion", "config"] }, { type: QuickTransferConfirmationModalComponent, selector: "bb-quick-transfer-confirmation-modal-ui", inputs: ["paymentTypes", "config"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i9.AsyncPipe }, animations: [slideRightAnimation, slideLeftAnimation, fadeInAnimation, slideUpAnimation$1] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-journey',
                    templateUrl: 'quick-transfer-journey.component.html',
                    providers: [QuickTransferJourneyConfigService, QuickTransferStoreService],
                    animations: [slideRightAnimation, slideLeftAnimation, fadeInAnimation, slideUpAnimation$1],
                }]
        }], ctorParameters: function () { return [{ type: QuickTransferStoreService }, { type: i2$3.Router }, { type: i2$3.ActivatedRoute }, { type: QuickTransferJourneyConfigService }]; } });

const RESOURCE_NAME = 'Payments';
const PRIVILEGE = 'create';
const LIST_SIZE = 1000000;
const EXTERNAL_ID = 'EXTERNAL_ID';
const FROM_PAGES = 0;
const PAGE_SIZE = 100;

/**
 * Method to extract ProductKind array from ProductsummaryGET response
 *
 * @param res
 */
const responseToProductList = (res) => {
    return res === null || res === void 0 ? void 0 : res.map(record => {
        let balance;
        switch (record.productKindName) {
            case 'Term Deposit':
                balance = record.principalAmount;
                break;
            case 'Investment Account':
                balance = record.currentInvestmentValue;
                break;
            default:
                balance = record.bookedBalance;
                break;
        }
        return {
            uuid: record.id,
            balance: balance || 0,
            name: record.displayName,
            currency: record.currency,
            number: record.IBAN || record.BBAN || record.BIC || record.number,
            externalTransferAllowed: record.externalTransferAllowed,
            productKindName: record.productKindName,
            defaultRecord: record,
        };
    });
};

class QuickTransferHttpService {
    constructor(productSummaryDataHttpService, contactService, paymentA2AService, paymentOrderService, transactionSigningHelper, configService) {
        this.productSummaryDataHttpService = productSummaryDataHttpService;
        this.contactService = contactService;
        this.paymentA2AService = paymentA2AService;
        this.paymentOrderService = paymentOrderService;
        this.transactionSigningHelper = transactionSigningHelper;
        this.configService = configService;
        this.destroy$ = new Subject();
        this.paymentOrderResponse$ = new Subject();
        /**
         * Product Summary default parameters
         */
        this.productSummaryParameters = {
            resourceName: RESOURCE_NAME,
            privilege: PRIVILEGE,
            from: FROM_PAGES,
            size: PAGE_SIZE,
            businessFunction: 'A2A Transfer',
        };
        const { productSummaryQueryParameters, businessFunction } = this.configService || {};
        this.productSummaryParameters = Object.assign(Object.assign(Object.assign({}, this.productSummaryParameters), productSummaryQueryParameters), (businessFunction ? { businessFunction } : undefined));
    }
    /**
     * Load debit accounts
     */
    getDebitAccounts() {
        const { fields } = this.configService || {};
        const { productKinds, mapItems, otherFilters } = (fields === null || fields === void 0 ? void 0 : fields.fromAccount) || {};
        return this.productSummaryDataHttpService
            .getArrangementsByBusinessFunction(Object.assign(Object.assign({}, this.productSummaryParameters), { debitAccount: true }))
            .pipe(map((res) => responseToProductList(res)), map(accounts => filterByProductKinds(accounts, productKinds)), map(accounts => filterByOtherProps(accounts, otherFilters)), map(accounts => (mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length) ? mapItems(accounts) : accounts)));
    }
    /**
     * Load credit accounts
     */
    getCreditAccounts() {
        const { fields } = this.configService || {};
        const { productKinds, mapItems, otherFilters } = (fields === null || fields === void 0 ? void 0 : fields.toAccount) || {};
        return this.productSummaryDataHttpService
            .getArrangementsByBusinessFunction(Object.assign(Object.assign({}, this.productSummaryParameters), { creditAccount: true }))
            .pipe(map((res) => responseToProductList(res)), map(accounts => filterByProductKinds(accounts, productKinds)), map(accounts => filterByOtherProps(accounts, otherFilters)), map(accounts => (mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length) ? mapItems(accounts) : accounts)));
    }
    /**
     * Load contacts
     */
    getContacts() {
        const mapContacts = this.configService.fields.toAccount.mapContacts;
        return this.contactService.getContacts({}).pipe(map((contacts) => contacts === null || contacts === void 0 ? void 0 : contacts.map(contact => ({
            uuid: contact.id,
            name: contact.name,
            number: contact.accounts[0].accountNumber || contact.accounts[0].IBAN,
            productKindName: QuickTransferProductKinds.contacts,
            defaultRecord: contact,
        }))), map(contacts => (mapContacts && (contacts === null || contacts === void 0 ? void 0 : contacts.length) ? mapContacts(contacts) : contacts)));
    }
    /**
     * Get external accounts
     */
    getExternalAccounts() {
        return this.paymentA2AService.getAll().pipe(map((body) => {
            if (body.accounts) {
                return body.accounts
                    .filter(({ status }) => status === 'Active')
                    .map(({ externalAccountId, accountNickName, accountNumber, bankName }) => ({
                    uuid: externalAccountId,
                    name: accountNickName || bankName,
                    number: accountNumber,
                    productKindName: QuickTransferProductKinds.connectedAccounts,
                }));
            }
            return;
        }));
    }
    /**
     * Post method to initiate payment order
     */
    sendPaymentOrder(paymentOrdersPost) {
        return this.paymentOrderService.postPaymentOrders({ paymentOrdersPost }).pipe(exhaustMap(response => {
            var _a;
            if ((_a = this.transactionSigningHelper) === null || _a === void 0 ? void 0 : _a.isTransactionSigningResponse(response)) {
                this.handleTransactionSigning(response);
                return this.paymentOrderResponse$.asObservable();
            }
            else {
                return of(response);
            }
        }));
    }
    getPaymentProgressStatus(data) {
        const paymentOrderId = ((data === null || data === void 0 ? void 0 : data['payment-order-id']) || '');
        return this.paymentOrderService
            .getProgressStatusByPaymentOrderId({ paymentOrderId }, 'body')
            .pipe(pluck('progressStatus'));
    }
    handleTransactionSigning(response) {
        if (!this.transactionSigningHelper)
            return;
        const paymentOrderId = response['payment-order-id'];
        if (paymentOrderId) {
            this.transactionSigningHelper.getTransactionInfo({
                data: response,
                asyncPollingOptions: {
                    pollInterval: 1000,
                    maxRetries: 3,
                    pollUntilFn: this.isPaymentConfirmed,
                    complete$: this.destroy$,
                },
                fetchFn: this.getPaymentProgressStatus.bind(this),
                onSuccess: this.onTransactionSigningSuccess.bind(this, paymentOrderId),
                onRejected: this.onTransactionFail.bind(this, paymentOrderId),
                onDeclined: this.onTransactionFail.bind(this),
                onError: this.onTransactionFail.bind(this),
            });
        }
    }
    isPaymentConfirmed(status) {
        return !!status && status !== ProgressStatus.CONFIRMATION_PENDING && status !== ProgressStatus.SENDING;
    }
    onTransactionSigningSuccess(paymentOrderId) {
        this.paymentOrderService
            .getPaymentOrderById({ paymentOrderId }, 'body')
            .pipe(takeUntil(this.destroy$))
            .subscribe(response => {
            this.paymentOrderResponse$.next(response);
        });
    }
    onTransactionFail() {
        this.paymentOrderResponse$.next();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
/** @nocollapse */ QuickTransferHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferHttpService, deps: [{ token: i1$3.ProductSummaryHttpService }, { token: i2$4.ContactsHttpService }, { token: i3$2.A2aClientHttpService }, { token: i4$2.PaymentOrdersHttpService }, { token: i5$1.TransactionSigningHelperService, optional: true }, { token: QuickTransferJourneyConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.ProductSummaryHttpService }, { type: i2$4.ContactsHttpService }, { type: i3$2.A2aClientHttpService }, { type: i4$2.PaymentOrdersHttpService }, { type: i5$1.TransactionSigningHelperService, decorators: [{
                    type: Optional
                }] }, { type: QuickTransferJourneyConfigService }]; } });

class QuickTransferEffects {
    constructor(actions$, httpService, communicationService) {
        this.actions$ = actions$;
        this.httpService = httpService;
        this.communicationService = communicationService;
        this.fetchAccounts = createEffect(() => this.actions$.pipe(ofType(accountsFetch), exhaustMap(() => {
            return combineLatest([this.httpService.getCreditAccounts(), this.httpService.getDebitAccounts()]).pipe(map(([creditAccounts, debitAccounts]) => accountsFetchSuccess({ debitAccounts, creditAccounts })), catchError(error => of(accountsFetchError({ error: new HttpErrorResponse({ error: error || 'Accounts Fetch Error' }) }))));
        })));
        this.fetchContacts = createEffect(() => this.actions$.pipe(ofType(contactsFetch), exhaustMap(() => {
            return this.httpService.getContacts().pipe(map((contacts) => contactsFetchSuccess({ contacts })), catchError(error => of(contactsFetchError({ error: new HttpErrorResponse({ error: error || 'Contacts Fetch Error' }) }))));
        })));
        this.fetchExtAccounts = createEffect(() => this.actions$.pipe(ofType(externalAccountsFetch), exhaustMap(() => {
            return this.httpService.getExternalAccounts().pipe(map(extAccounts => extAccountsFetchSuccess({ extAccounts })), catchError(error => of(extAccountsFetchError({
                error: new HttpErrorResponse({ error: error || 'External Accounts Fetch Error' }),
            }))));
        })));
        this.sendTransferOrder = createEffect(() => this.actions$.pipe(ofType(sendTransferOrder), exhaustMap(action => {
            return this.httpService.sendPaymentOrder(action.reqData).pipe(map(resp => {
                if (!!(resp === null || resp === void 0 ? void 0 : resp.id) && resp.status !== ProgressStatus.REJECTED) {
                    if (this.communicationService) {
                        this.communicationService.transferSucceeded();
                    }
                    return transferOrderSuccess();
                }
                else {
                    return transferOrderError({ error: new HttpErrorResponse({ error: 'Transfer Order Post Error' }) });
                }
            }), catchError(error => of(transferOrderError({ error }))));
        })));
        this.setPayeeAccount = createEffect(() => this.actions$.pipe(ofType(setPayeeAccount), map(() => openView({ view: ViewState.FORM, focus: TO_ACCOUNT }))));
        this.pickFromAccount = createEffect(() => this.actions$.pipe(ofType(setFromAccount), map(() => openView({ view: ViewState.FORM, focus: FROM_ACCOUNT }))));
    }
}
/** @nocollapse */ QuickTransferEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferEffects, deps: [{ token: i1$4.Actions }, { token: QuickTransferHttpService }, { token: CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$4.Actions }, { type: QuickTransferHttpService }, { type: CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });

function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
}
const quickTransferReducer = createReducer(initialState, on(accountsFetch, state => (Object.assign(Object.assign({}, state), { accountsCallState: LoadingState.LOADING }))), on(accountsFetchError, (state, { error }) => (Object.assign(Object.assign({}, state), { accountsCallState: { error } }))), on(accountsFetchSuccess, (state, { debitAccounts, creditAccounts }) => (Object.assign(Object.assign({}, state), { debitAccounts,
    creditAccounts, accountsCallState: LoadingState.LOADED }))), on(contactsFetch, state => (Object.assign(Object.assign({}, state), { contactsCallState: LoadingState.LOADING }))), on(contactsFetchError, (state, { error }) => (Object.assign(Object.assign({}, state), { contactsCallState: { error } }))), on(contactsFetchSuccess, (state, { contacts }) => (Object.assign(Object.assign({}, state), { contacts, contactsCallState: LoadingState.LOADED }))), on(externalAccountsFetch, state => (Object.assign(Object.assign({}, state), { extAccountsCallState: LoadingState.LOADING }))), on(extAccountsFetchSuccess, (state, { extAccounts }) => (Object.assign(Object.assign({}, state), { extAccounts, extAccountsCallState: LoadingState.LOADED }))), on(extAccountsFetchError, (state, { error }) => (Object.assign(Object.assign({}, state), { extAccountsCallState: { error } }))), on(setFromAccount, (state, { accountId }) => {
    var _a, _b;
    const _accounts = [...(state.extAccounts || []), ...(state.debitAccounts || [])];
    const account = _accounts.find((a) => a.uuid === accountId) || {};
    const currency = ((_a = account) === null || _a === void 0 ? void 0 : _a.currency) || state.defaultCurrency;
    return Object.assign(Object.assign({}, state), { fromAccount: account, amount: { amount: ((_b = state.amount) === null || _b === void 0 ? void 0 : _b.amount) || '', currency } });
}), on(setPayeeAccount, (state, { id }) => {
    const _accounts = [...(state.extAccounts || []), ...(state.creditAccounts || []), ...(state.contacts || [])];
    const account = _accounts.find(e => e.uuid === id);
    return Object.assign(Object.assign({}, state), { payeeTo: account });
}), on(setModalOpen, (state, { isOpen }) => {
    return Object.assign(Object.assign({}, state), { isModalOpen: isOpen });
}), on(setAmount, (state, { amount, defaultCurrency }) => {
    var _a;
    const newAmount = {
        amount,
        currency: ((_a = state.amount) === null || _a === void 0 ? void 0 : _a.currency) ? state.amount.currency : defaultCurrency,
    };
    return Object.assign(Object.assign({}, state), { amount: newAmount });
}), on(openView, (state, { view, focus }) => {
    return Object.assign(Object.assign({}, state), { viewState: view, focusElement: focus });
}), on(resetFocus, state => {
    return Object.assign(Object.assign({}, state), { focusElement: undefined });
}), on(sendTransferOrder, state => (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.LOADING }))), on(transferOrderSuccess, state => (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.LOADED, isModalOpen: false, viewState: ViewState.COMPLETE }))), on(transferOrderError, (state, { error }) => (Object.assign(Object.assign({}, state), { transferOrderCallState: { error }, isModalOpen: false, viewState: ViewState.COMPLETE }))), on(resetWidget, (state, { focus }) => (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.INIT, viewState: ViewState.FORM, payeeTo: undefined, amount: undefined, fromAccount: undefined, touchedFields: [], focusElement: focus || undefined }))), on(setFieldTouched, (state, { fieldName }) => (Object.assign(Object.assign({}, state), { touchedFields: [...state.touchedFields, fieldName].filter(onlyUnique) }))), on(setDefaultCurrency, (state, { currency }) => (Object.assign(Object.assign({}, state), { defaultCurrency: currency }))));

class QuickTransferStoreModule {
}
/** @nocollapse */ QuickTransferStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ QuickTransferStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreModule, imports: [i1.StoreFeatureModule, i1$4.EffectsFeatureModule] });
/** @nocollapse */ QuickTransferStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreModule, providers: [QuickTransferEffects], imports: [[
            StoreModule.forFeature(FEATURE_STORE_SELECTOR, quickTransferReducer),
            EffectsModule.forFeature([QuickTransferEffects]),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [
                        StoreModule.forFeature(FEATURE_STORE_SELECTOR, quickTransferReducer),
                        EffectsModule.forFeature([QuickTransferEffects]),
                    ],
                    providers: [QuickTransferEffects],
                }]
        }] });

const uiModules = [
    InputValidationMessageModule,
    ButtonModule,
    HeaderModule,
    IconModule,
    CurrencyInputModule,
    TooltipModule,
    ProductItemBasicAccountModule,
    TabModule,
    LoadingIndicatorModule,
    ModalModule,
    LoadButtonModule,
    EmptyStateModule,
    AmountModule,
    AmountInputModule,
];
const components = [
    QuickTransferFormComponent,
    BaseAccountSelectorComponent,
    QuickTransferFromAccountComponent,
    QuickTransferAccountsComponent,
    QuickTransferToAccountComponent,
    QuickTransferConfirmationModalComponent,
    QuickTransferCompleteComponent,
    CustomProductSelectorComponent,
    QuickTransferJourneyComponent,
    QuickTransferValidationMessageComponent,
];
class QuickTransferJourneyModule {
}
/** @nocollapse */ QuickTransferJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ QuickTransferJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyModule, declarations: [QuickTransferFormComponent,
        BaseAccountSelectorComponent,
        QuickTransferFromAccountComponent,
        QuickTransferAccountsComponent,
        QuickTransferToAccountComponent,
        QuickTransferConfirmationModalComponent,
        QuickTransferCompleteComponent,
        CustomProductSelectorComponent,
        QuickTransferJourneyComponent,
        QuickTransferValidationMessageComponent], imports: [CommonModule, ReactiveFormsModule, QuickTransferStoreModule, InputValidationMessageModule,
        ButtonModule,
        HeaderModule,
        IconModule,
        CurrencyInputModule,
        TooltipModule,
        ProductItemBasicAccountModule,
        TabModule,
        LoadingIndicatorModule,
        ModalModule,
        LoadButtonModule,
        EmptyStateModule,
        AmountModule,
        AmountInputModule], exports: [QuickTransferFormComponent,
        BaseAccountSelectorComponent,
        QuickTransferFromAccountComponent,
        QuickTransferAccountsComponent,
        QuickTransferToAccountComponent,
        QuickTransferConfirmationModalComponent,
        QuickTransferCompleteComponent,
        CustomProductSelectorComponent,
        QuickTransferJourneyComponent,
        QuickTransferValidationMessageComponent, QuickTransferStoreModule, InputValidationMessageModule,
        ButtonModule,
        HeaderModule,
        IconModule,
        CurrencyInputModule,
        TooltipModule,
        ProductItemBasicAccountModule,
        TabModule,
        LoadingIndicatorModule,
        ModalModule,
        LoadButtonModule,
        EmptyStateModule,
        AmountModule,
        AmountInputModule] });
/** @nocollapse */ QuickTransferJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyModule, providers: [QuickTransferHttpService, QuickTransferJourneyConfigService], imports: [[CommonModule, ReactiveFormsModule, QuickTransferStoreModule, ...uiModules], QuickTransferStoreModule, InputValidationMessageModule,
        ButtonModule,
        HeaderModule,
        IconModule,
        CurrencyInputModule,
        TooltipModule,
        ProductItemBasicAccountModule,
        TabModule,
        LoadingIndicatorModule,
        ModalModule,
        LoadButtonModule,
        EmptyStateModule,
        AmountModule,
        AmountInputModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components],
                    imports: [CommonModule, ReactiveFormsModule, QuickTransferStoreModule, ...uiModules],
                    exports: [...components, QuickTransferStoreModule, ...uiModules],
                    providers: [QuickTransferHttpService, QuickTransferJourneyConfigService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { QuickTransferHttpService, CommunicationService as QuickTransferJourneyCommunicationService, QuickTransferJourneyComponent, QuickTransferJourneyConfigService, QuickTransferJourneyConfigurationToken, QuickTransferJourneyModule, QuickTransferProductKinds, QuickTransferStoreModule, ViewState, nonZeroValidator, BaseAccountSelectorComponent as ӨBaseAccountSelectorComponent, CustomProductSelectorComponent as ӨCustomProductSelectorComponent, QuickTransferAccountsComponent as ӨQuickTransferAccountsComponent, QuickTransferCompleteComponent as ӨQuickTransferCompleteComponent, QuickTransferConfirmationModalComponent as ӨQuickTransferConfirmationModalComponent, QuickTransferFormComponent as ӨQuickTransferFormComponent, QuickTransferFromAccountComponent as ӨQuickTransferFromAccountComponent, QuickTransferToAccountComponent as ӨQuickTransferToAccountComponent, QuickTransferValidationMessageComponent as ӨQuickTransferValidationMessageComponent };
//# sourceMappingURL=backbase-quick-transfer-journey-ang.js.map
