(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('angular-oauth2-oidc'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@backbase/identity-auth', ['exports', '@angular/core', 'rxjs', 'angular-oauth2-oidc', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["identity-auth"] = {}), global.ng.core, global.rxjs, global.i1, global.rxjs.operators, global.ng.common));
})(this, (function (exports, i0, rxjs, i1, operators, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var ACTIVITY_MONITOR_CONFIG = new i0.InjectionToken('activity-monitor-config');

    var WINDOW = new i0.InjectionToken('Window');

    /**
     * Service for monitoring user activity
     */
    var ActivityMonitorService = /** @class */ (function () {
        // https://angular.io/guide/aot-metadata-errors#could-not-resolve-type
        function ActivityMonitorService(_window, _config) {
            this.events$ = new rxjs.Subject();
            this.isActive = false;
            this.lastActiveEpoch = 0;
            this.config = {
                maxInactivityDuration: 180,
                countdownDuration: 30,
            };
            this.listenerCallback = this.setLastActiveEpoch.bind(this);
            this.countdownActive = false;
            this.events = this.events$.asObservable();
            this.window = _window;
            Object.assign(this.config, _config || {});
        }
        /**
         * Starts activity monitoring.
         */
        ActivityMonitorService.prototype.start = function (_config) {
            if (_config === void 0) { _config = {}; }
            Object.assign(this.config, _config);
            if (this.isActive) {
                this.stop();
            }
            this.listen(true, { passive: true, capture: true });
        };
        // Stops activity monitoring.
        ActivityMonitorService.prototype.stop = function () {
            if (this.isActive) {
                this.listen(false, true);
            }
        };
        ActivityMonitorService.prototype.getInactivityDuration = function () {
            var now = Math.floor(Date.now() / 1000);
            var last = Math.floor(this.lastActiveEpoch / 1000);
            return Math.floor(now - last);
        };
        ActivityMonitorService.prototype.setLastActiveEpoch = function () {
            this.lastActiveEpoch = Date.now();
        };
        ActivityMonitorService.prototype.listen = function (activate, options) {
            this.isActive = activate;
            var func = activate ? this.window.document.addEventListener : this.window.document.removeEventListener;
            this.setLastActiveEpoch();
            func('mousemove', this.listenerCallback, options);
            func('mousedown', this.listenerCallback, options);
            func('keydown', this.listenerCallback, options);
            func('mousewheel', this.listenerCallback, options);
            func('touchmove', this.listenerCallback, options);
            if (activate) {
                this.intervalId = this.window.setInterval(this.onEverySecond.bind(this), 1000);
            }
            else {
                this.window.clearInterval(this.intervalId);
                if (this.countdownActive) {
                    this.countdownActive = false;
                    this.events$.next({ type: 'reset' });
                }
            }
        };
        ActivityMonitorService.prototype.onEverySecond = function () {
            var ttl = this.config.maxInactivityDuration - this.getInactivityDuration();
            if (ttl > -1 && ttl <= this.config.countdownDuration) {
                if (!this.countdownActive) {
                    this.countdownActive = true;
                    this.events$.next({ type: 'start' });
                    this.events$.next({ type: 'tick', remaining: ttl });
                    return;
                }
                if (ttl > 0) {
                    this.events$.next({ type: 'tick', remaining: ttl });
                }
                else {
                    this.countdownActive = false;
                    this.events$.next({ type: 'end' });
                    this.stop();
                }
            }
            else if (this.countdownActive) {
                this.countdownActive = false;
                this.events$.next({ type: 'reset' });
            }
        };
        return ActivityMonitorService;
    }());
    /** @nocollapse */ ActivityMonitorService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActivityMonitorService, deps: [{ token: WINDOW }, { token: ACTIVITY_MONITOR_CONFIG, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ActivityMonitorService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActivityMonitorService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ActivityMonitorService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [WINDOW]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACTIVITY_MONITOR_CONFIG]
                        }] }];
        } });

    /** @internal */
    var ɵɵOidcAuthService = /** @class */ (function () {
        // https://angular.io/guide/aot-metadata-errors#could-not-resolve-type
        function ɵɵOidcAuthService(oAuthService, oAuthStorage, oAuthConfig, _window) {
            var _this = this;
            var _a;
            this.oAuthService = oAuthService;
            this.oAuthStorage = oAuthStorage;
            this.oAuthConfig = oAuthConfig;
            this._window = _window;
            this.authenticated$$ = new rxjs.ReplaySubject();
            this.storage = this.oAuthStorage;
            this.authConfig = this.oAuthConfig;
            this.events$ = (_a = this.oAuthService) === null || _a === void 0 ? void 0 : _a.events;
            this.isAuthenticated$ = this.authenticated$$.pipe(operators.map(function () { return _this.oAuthService.hasValidAccessToken(); }));
            this.accessToken$ = this.isAuthenticated$.pipe(operators.filter(function (loaded) { return loaded; }), operators.map(function () {
                var raw = _this.oAuthService.getAccessToken();
                return {
                    raw: raw,
                    parsed: _this.parseJwt(raw),
                };
            }));
            if (!oAuthService) {
                throw new Error("In order to use \u0275\u0275OidcAuthService, please include OAuthModule.forRoot() to your application module");
            }
            this.window = this._window;
            this.oAuthService.events.subscribe(function (event) {
                switch (event.type) {
                    case 'discovery_document_loaded':
                    case 'token_received':
                    case 'logout':
                        _this.authenticated$$.next();
                        break;
                    default:
                        break;
                }
            });
        }
        ɵɵOidcAuthService.prototype.logout = function (redirectUri) {
            if (redirectUri) {
                this.oAuthService.postLogoutRedirectUri = redirectUri;
            }
            this.oAuthService.logOut();
            return this.oAuthService.events
                .pipe(operators.filter(function (event) { return event.type === 'logout'; }), operators.mapTo(undefined), operators.take(1))
                .toPromise();
        };
        ɵɵOidcAuthService.prototype.timeToLive = function () {
            var expiration = this.oAuthService.getAccessTokenExpiration();
            if (expiration) {
                return expiration - Math.ceil(new Date().getTime() / 1000) + (this.oAuthService.clockSkewInSec || 0);
            }
            return -1;
        };
        ɵɵOidcAuthService.prototype.refresh = function () {
            this.oAuthService.refreshToken();
            return this.oAuthService.events
                .pipe(operators.filter(function (event) { return event.type === 'token_refreshed'; }), operators.mapTo(undefined), operators.take(1))
                .toPromise();
        };
        ɵɵOidcAuthService.prototype.loadDiscoveryDocument = function () {
            return this.oAuthService.loadDiscoveryDocument();
        };
        ɵɵOidcAuthService.prototype.authorizationHeader = function () {
            return this.oAuthService.authorizationHeader();
        };
        ɵɵOidcAuthService.prototype.createReauthLoginUrl = function (scope, acr_values) {
            return rxjs.from(this.oAuthService.createLoginUrl('', // state
            '', // login hint
            location.href, // custom redirect uri
            false, // no prompt
            {
                acr_values: acr_values,
                response_mode: 'fragment',
            })).pipe(operators.map(function (preUrl) {
                var urlParsed = new URL(preUrl);
                urlParsed.searchParams.set('scope', urlParsed.searchParams.get('scope') + " " + scope);
                return urlParsed.href;
            }));
        };
        ɵɵOidcAuthService.prototype.parseJwt = function (token) {
            try {
                var base64Url = token.split('.')[1];
                var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                return JSON.parse(this.window.atob(base64));
            }
            catch (e) {
                return undefined;
            }
        };
        return ɵɵOidcAuthService;
    }());
    /** @nocollapse */ ɵɵOidcAuthService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ɵɵOidcAuthService, deps: [{ token: i1__namespace.OAuthService, optional: true }, { token: i1.OAuthStorage }, { token: i1.AuthConfig }, { token: WINDOW }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ɵɵOidcAuthService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ɵɵOidcAuthService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ɵɵOidcAuthService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.OAuthService, decorators: [{
                            type: i0.Optional
                        }] }, { type: i1__namespace.OAuthStorage, decorators: [{
                            type: i0.Inject,
                            args: [i1.OAuthStorage]
                        }] }, { type: i1__namespace.AuthConfig, decorators: [{
                            type: i0.Inject,
                            args: [i1.AuthConfig]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [WINDOW]
                        }] }];
        } });

    var AuthService = /** @class */ (function () {
        function AuthService(oidcAuthService) {
            this.oidcAuthService = oidcAuthService;
            this.isAuthenticated$ = this.oidcAuthService.isAuthenticated$;
        }
        return AuthService;
    }());
    /** @nocollapse */ AuthService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuthService, deps: [{ token: ɵɵOidcAuthService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ AuthService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuthService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AuthService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: ɵɵOidcAuthService }]; } });

    function _window() {
        return window;
    }
    var IdentityAuthModule = /** @class */ (function () {
        function IdentityAuthModule() {
        }
        return IdentityAuthModule;
    }());
    /** @nocollapse */ IdentityAuthModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IdentityAuthModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ IdentityAuthModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IdentityAuthModule, imports: [common.CommonModule] });
    /** @nocollapse */ IdentityAuthModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IdentityAuthModule, providers: [
            {
                provide: WINDOW,
                useValue: _window,
            },
            AuthService,
            ɵɵOidcAuthService,
            ActivityMonitorService,
        ], imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: IdentityAuthModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        providers: [
                            {
                                provide: WINDOW,
                                useValue: _window,
                            },
                            AuthService,
                            ɵɵOidcAuthService,
                            ActivityMonitorService,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ACTIVITY_MONITOR_CONFIG = ACTIVITY_MONITOR_CONFIG;
    exports.ActivityMonitorService = ActivityMonitorService;
    exports.AuthService = AuthService;
    exports.IdentityAuthModule = IdentityAuthModule;
    exports["ɵɵOidcAuthService"] = ɵɵOidcAuthService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-identity-auth.umd.js.map
