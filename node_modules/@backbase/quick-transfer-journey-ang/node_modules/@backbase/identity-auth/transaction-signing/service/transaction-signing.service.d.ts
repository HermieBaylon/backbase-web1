import { Location } from '@angular/common';
import { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { ɵɵOidcAuthService } from '@backbase/identity-auth';
import { Observable, ReplaySubject } from 'rxjs';
import { ChallengeResponse, TransactionSigningConfig, TransactionSigningHandler } from '../util';
import * as i0 from "@angular/core";
/**
 * Angular Service used to instigate and manage transaction signing for an action.
 */
export declare class TransactionSigningService {
    private readonly httpClient;
    private readonly location;
    private readonly oidcAuthService;
    private readonly serviceConfig;
    /**
     * A subject that emits when a new transaction signing event occurs.
     * The subject will emit an object containing the initial challenge from
     * the Identity Auth Server. To respond to this challenge use the
     * `respondToChallenge` endpoint provided.
     */
    readonly requestSubject: ReplaySubject<TransactionSigningHandler>;
    private readonly actionSubject;
    private readonly observerSubject;
    private isHandlingTransaction;
    private readonly authHeaderKey;
    private readonly authHeaderValue;
    private readonly authStatus;
    /** @internal */
    constructor(httpClient: HttpClient, location: Location, oidcAuthService: ɵɵOidcAuthService, serviceConfig: TransactionSigningConfig);
    /** @internal */
    initiateTransactionSigning(error: HttpErrorResponse): Observable<HttpResponse<unknown>>;
    /**
     * Method that supports the response to an issued challenge.
     * @param data The data to be submitted in response to the challenge.
     * @returns an observable that will either be successful or throw a new challenge
     */
    respondToChallenge(data: unknown): Observable<unknown | ChallengeResponse>;
    /**
     * Method that will announce to the initiating widget that the transaction signing
     * process is complete, and that the process was successful.
     * The widget will be updated with an HttpResponse object containing the initial
     * transaction data in the body.
     */
    completeWithSuccess(): void;
    /**
     * Method that will announce to the initiating widget that the transaction signing
     * process is complete, and that the process failed.
     * The widget will be updated with an HttpErrorResponse object containing the initial
     * transaction data and the error reason.
     */
    completeWithFailure(error: Error): void;
    private getFirstChallenge;
    private authenticateUser;
    private reauthenticate;
    private requestChallenge;
    private postResponse;
    private getRequestOptions;
    private onAuthError;
    private getErrorResponse;
    private getActionUrl;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionSigningService, [null, null, { optional: true; }, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TransactionSigningService>;
}
