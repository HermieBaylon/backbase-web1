import { EventEmitter } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';
import { ChallengeError, ChallengeHardTokenData, HardTokenResponse } from '../../util';
import * as i0 from "@angular/core";
export declare class TransactionSigningHardTokenComponent {
    private readonly formBuilder;
    cancel: EventEmitter<void>;
    submitResponse: EventEmitter<HardTokenResponse>;
    acceptError: EventEmitter<Error>;
    set data(value: ChallengeHardTokenData);
    get data(): ChallengeHardTokenData;
    set error(value: ChallengeError | undefined);
    get error(): ChallengeError | undefined;
    private readonly invalidRequestError;
    private displayErrors;
    readonly form: FormGroup;
    errorValue: ChallengeError | undefined;
    challengeData: ChallengeHardTokenData | undefined;
    displayAlert: boolean;
    constructor(formBuilder: FormBuilder);
    onSubmit(): void;
    onCancel(): void;
    onErrorClose(error: Error): void;
    hasError(control: AbstractControl): any;
    private isRecognizedError;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionSigningHardTokenComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TransactionSigningHardTokenComponent, "bb-transaction-signing-hard-token", never, { "data": "data"; "error": "error"; }, { "cancel": "cancel"; "submitResponse": "submitResponse"; "acceptError": "acceptError"; }, never, never>;
}
