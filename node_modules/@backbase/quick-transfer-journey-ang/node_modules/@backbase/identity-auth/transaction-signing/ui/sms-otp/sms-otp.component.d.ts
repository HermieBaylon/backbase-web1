import { EventEmitter, OnChanges } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { ChallengeError, ChallengeSmsOtpData, CountdownService, SmsOtpResponse } from '../../util';
import * as i0 from "@angular/core";
export declare class TransactionSigningSmsOtpComponent implements OnChanges {
    private readonly formBuilder;
    private countdown;
    cancel: EventEmitter<void>;
    submitResponse: EventEmitter<SmsOtpResponse>;
    acceptError: EventEmitter<Error>;
    resend: EventEmitter<void>;
    previousData: ChallengeSmsOtpData | undefined;
    set data(value: ChallengeSmsOtpData);
    get data(): ChallengeSmsOtpData;
    set error(value: ChallengeError | undefined);
    get error(): ChallengeError | undefined;
    private readonly invalidRequestError;
    readonly form: FormGroup;
    readonly timeUntilResend$: Observable<number>;
    errorValue: ChallengeError | undefined;
    challengeData: ChallengeSmsOtpData | undefined;
    displayIncorrectAlert: boolean;
    displayMissingAlert: boolean;
    displayRemainingAlert: boolean;
    displayResendAlert: boolean;
    constructor(formBuilder: FormBuilder, countdown: CountdownService);
    ngOnChanges(changes: any): void;
    onSubmit(): void;
    showInvalidError(): boolean;
    showMissingError(): boolean;
    private clearAlerts;
    private setOtpValidators;
    private isRecognizedError;
    private setResendCountdown;
    private setResendOptions;
    private setRemainingOptions;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionSigningSmsOtpComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TransactionSigningSmsOtpComponent, "bb-transaction-signing-sms-otp", never, { "previousData": "previousData"; "data": "data"; "error": "error"; }, { "cancel": "cancel"; "submitResponse": "submitResponse"; "acceptError": "acceptError"; "resend": "resend"; }, never, never>;
}
