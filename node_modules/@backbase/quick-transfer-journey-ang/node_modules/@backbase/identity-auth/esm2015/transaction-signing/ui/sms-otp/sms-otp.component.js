import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { CountdownService } from '../../util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../util";
import * as i3 from "../error/error.component";
import * as i4 from "@backbase/ui-ang/alert";
import * as i5 from "@backbase/ui-ang/progressbar";
import * as i6 from "@backbase/ui-ang/input-text";
import * as i7 from "@backbase/ui-ang/input-validation-message";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
export class TransactionSigningSmsOtpComponent {
    constructor(formBuilder, countdown) {
        this.formBuilder = formBuilder;
        this.countdown = countdown;
        this.cancel = new EventEmitter();
        this.submitResponse = new EventEmitter();
        this.acceptError = new EventEmitter();
        this.resend = new EventEmitter();
        this.invalidRequestError = 'invalid_request';
        this.form = this.formBuilder.group({
            otp: ['', [Validators.required, Validators.pattern(/^\d{6}$/)]],
        });
        this.timeUntilResend$ = this.countdown.remainingTime$;
        this.displayIncorrectAlert = false;
        this.displayMissingAlert = false;
        this.displayRemainingAlert = false;
        this.displayResendAlert = false;
    }
    set data(value) {
        this.setOtpValidators(value.expectedOtpLength);
        this.clearAlerts();
        this.setResendCountdown(value);
    }
    get data() {
        if (!this.challengeData) {
            throw new Error('No challenge data set');
        }
        return this.challengeData;
    }
    set error(value) {
        if (!value || !this.isRecognizedError(value)) {
            this.errorValue = value;
            return;
        }
        this.clearAlerts();
        this.form.reset();
        this.form.markAllAsTouched();
        this.displayMissingAlert = true;
    }
    get error() {
        return this.errorValue;
    }
    ngOnChanges(changes) {
        this.setResendOptions(changes.data.currentValue.remainingOtpRequests);
        this.setRemainingOptions(changes.data.currentValue.remainingAuthenticationAttempts);
        this.challengeData = Object.assign(Object.assign({}, this.previousData), changes.data.currentValue);
    }
    onSubmit() {
        this.clearAlerts();
        if (this.form.valid) {
            return this.submitResponse.emit(Object.assign({}, this.form.value));
        }
        if (!this.form.value.otp || !this.form.value.otp.length) {
            this.displayMissingAlert = true;
            this.form.markAllAsTouched();
        }
        if (this.form.controls.otp.errors && this.form.controls.otp.errors.pattern) {
            this.displayIncorrectAlert = true;
            this.form.reset();
            this.form.markAllAsTouched();
        }
    }
    showInvalidError() {
        return (this.displayIncorrectAlert || this.displayRemainingAlert) && !this.form.value.otp;
    }
    showMissingError() {
        return this.displayMissingAlert && !this.form.value.otp;
    }
    clearAlerts() {
        this.displayIncorrectAlert = false;
        this.displayMissingAlert = false;
        this.displayRemainingAlert = false;
        this.displayResendAlert = false;
    }
    setOtpValidators(patternLength) {
        const regex = new RegExp('^\\d{' + patternLength + '}$');
        this.form.controls.otp.setValidators([Validators.required, Validators.pattern(regex)]);
    }
    isRecognizedError(error) {
        return error.errorCode === this.invalidRequestError && error.errorDescription === this.invalidRequestError;
    }
    setResendCountdown(challenge) {
        if (challenge.nextOtpTime > 0 && challenge.remainingOtpRequests !== 0) {
            this.countdown.start(challenge.nextOtpTime);
        }
    }
    setResendOptions(remaining) {
        if (remaining === undefined || !this.previousData) {
            return;
        }
        const previousRemaining = this.previousData && this.previousData.remainingOtpRequests;
        if (!previousRemaining || remaining < previousRemaining) {
            this.displayResendAlert = true;
            this.displayRemainingAlert = false;
        }
    }
    setRemainingOptions(remaining) {
        if (remaining === undefined || !this.previousData) {
            return;
        }
        const previousRemaining = this.previousData.remainingAuthenticationAttempts;
        if (!previousRemaining || remaining < previousRemaining) {
            this.form.reset();
            this.form.markAllAsTouched();
            this.displayRemainingAlert = true;
            this.displayResendAlert = false;
        }
    }
}
/** @nocollapse */ TransactionSigningSmsOtpComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningSmsOtpComponent, deps: [{ token: i1.FormBuilder }, { token: i2.CountdownService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningSmsOtpComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningSmsOtpComponent, selector: "bb-transaction-signing-sms-otp", inputs: { previousData: "previousData", data: "data", error: "error" }, outputs: { cancel: "cancel", submitResponse: "submitResponse", acceptError: "acceptError", resend: "resend" }, usesOnChanges: true, ngImport: i0, template: "<bb-transaction-signing-error\n  *ngIf=\"errorValue; else displayForm\"\n  [error]=\"errorValue\"\n  (closeModal)=\"acceptError.emit($event)\"\n>\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <bb-alert-ui\n    *ngIf=\"displayMissingAlert\"\n    data-role=\"ts-sms-otp-missing-alert\"\n    i18n-title=\"No value alert title for sms otp signing@@bb-sms-otp-signing.alert.missing.title\"\n    title=\"No value entered\"\n  >\n    <span i18n=\"No value alert message for sms otp signing@@bb-sms-otp-signing.alert.missing.message\">\n      Please enter the value displayed on your device.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayIncorrectAlert\"\n    data-role=\"ts-sms-otp-incorrect-alert\"\n    i18n-title=\"Incorrect attempts alert title for sms otp signing@@bb-sms-otp-signing.alert.incorrect.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Incorrect attempts alert message for sms otp signing@@bb-sms-otp-signing.alert.incorrect.message\">\n      The number you entered was incorrect.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayRemainingAlert\"\n    data-role=\"ts-sms-otp-remaining-alert\"\n    i18n-title=\"Remaining attempts alert title for sms otp signing@@bb-sms-otp-signing.alert.remaining.title\"\n    title=\"Authorization failed\"\n  >\n    <span i18n=\"Remaining attempts alert message for sms otp signing@@bb-sms-otp-signing.alert.remaining.message\">\n      The number you entered was incorrect. <br />\n      You have {{ data.remainingAuthenticationAttempts }} other {data.remainingAuthenticationAttempts, plural, =1\n      {attempt} other {attempts}} remaining.\n    </span>\n  </bb-alert-ui>\n  <bb-alert-ui\n    *ngIf=\"displayResendAlert\"\n    data-role=\"ts-sms-otp-resend-alert\"\n    modifier=\"info\"\n    i18n-title=\"Message resend alert title for sms otp signing@@bb-sms-otp-signing.alert.resend.title\"\n    title=\"SMS message resent\"\n  >\n    <span i18n=\"Message resend alert message for sms otp signing@@bb-sms-otp-signing.alert.resend.message\">\n      The SMS message has been successfully sent. <br />\n      You have {data.remainingOtpRequests, plural, =0 {no} other {{{data.remainingOtpRequests}} SMS}} resend\n      {data.remainingOtpRequests, plural, =1 {attempt} other {attempts}} left.\n    </span>\n  </bb-alert-ui>\n  <div class=\"bb-block bb-block--sm\" i18n=\"Instruction for sms otp signing@@bb-sms-otp-signing.instruction\">\n    SMS message sent to {{ data.phoneNumber }}\n  </div>\n  <div class=\"bb-block bb-block--lg\">\n    <ng-container *ngIf=\"data.remainingOtpRequests !== 0; else displayNoRemainingRequests\">\n      <ng-container *ngIf=\"timeUntilResend$ | async as time; else displayResendButton\">\n        <span\n          class=\"bb-subtitle bb-text-support bb-block bb-block--sm\"\n          i18n=\"Time before resend@@bb-sms-otp-signing.resend.time-before\"\n          data-role=\"ts-sms-otp-resend-helper\"\n        >\n          Next resend available in {{ time }} {time, plural, =1 {second} other {seconds}}\n        </span>\n        <bb-progressbar-ui height=\"0.5rem\" [value]=\"data.nextOtpTime - time\" [max]=\"data.nextOtpTime\">\n        </bb-progressbar-ui>\n      </ng-container>\n      <ng-template #displayResendButton>\n        <button\n          bbButton\n          data-role=\"ts-sms-otp-resend\"\n          color=\"secondary\"\n          buttonSize=\"sm\"\n          i18n=\"Resend SMS OTP button@@bb-sms-otp-signing.resend\"\n          (click)=\"resend.emit()\"\n        >\n          Resend message\n        </button>\n      </ng-template>\n    </ng-container>\n    <ng-template #displayNoRemainingRequests>\n      <span\n        data-role=\"ts-sms-otp-no-resend\"\n        class=\"bb-subtitle bb-text-danger\"\n        i18n=\"No otp resend attempts remaining@@bb-sms-otp-signing.no-resend\"\n      >\n        You have no SMS resend attempts left. <br />\n        Please enter the correct OTP code or cancel this transaction.\n      </span>\n    </ng-template>\n  </div>\n\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <div class=\"form-group\">\n      <bb-input-text-ui\n        data-role=\"ts-sms-otp-field\"\n        class=\"bb-form-field bb-form-field--xs\"\n        formControlName=\"otp\"\n        i18n-label=\"Aria label for otp field input@@bb-sms-otp-signing.label\"\n        label=\"Input OTP code\"\n        [maxLength]=\"data.expectedOtpLength\"\n        [minLength]=\"data.expectedOtpLength\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"true\">\n        <span\n          *ngIf=\"showInvalidError()\"\n          data-role=\"ts-sms-otp-incorrect-error\"\n          i18n=\"Otp input invalid error message@@bb-sms-otp-signing.errors.invalid\"\n        >\n          Incorrect code. Try again.\n        </span>\n        <span\n          *ngIf=\"showMissingError()\"\n          data-role=\"ts-sms-otp-missing-error\"\n          i18n=\"Otp input missing error message@@bb-sms-otp-signing.errors.missing\"\n        >\n          You must enter an OTP.\n        </span>\n      </bb-input-validation-message-ui>\n      <small class=\"bb-text-support\" i18n=\"Otp input helper text@@bb-sms-otp-signing.helper\">\n        Value must be exactly {{ data.expectedOtpLength }} digits\n      </small>\n    </div>\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-sms-otp-complete\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-sms-otp-signing.complete\"\n      >\n        Complete\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-sms-otp-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"cancel.emit()\"\n        i18n=\"Cancel button@@bb-sms-otp-signing.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i3.TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i4.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i5.ProgressbarComponent, selector: "bb-progressbar-ui", inputs: ["height", "max", "showValue", "striped", "animated", "type", "value"] }, { type: i6.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i7.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i8.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningSmsOtpComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-sms-otp',
                    templateUrl: 'sms-otp.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.CountdownService }]; }, propDecorators: { cancel: [{
                type: Output
            }], submitResponse: [{
                type: Output
            }], acceptError: [{
                type: Output
            }], resend: [{
                type: Output
            }], previousData: [{
                type: Input
            }], data: [{
                type: Input
            }], error: [{
                type: Input
            }] } });
//# sourceMappingURL=sms-otp.component.js.map