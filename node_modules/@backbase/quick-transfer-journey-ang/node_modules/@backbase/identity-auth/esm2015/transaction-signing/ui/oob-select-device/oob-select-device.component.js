import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../error/error.component";
import * as i3 from "@backbase/ui-ang/dropdown-single-select";
import * as i4 from "@backbase/ui-ang/input-validation-message";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class TransactionSigningOobSelectDeviceComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.cancel = new EventEmitter();
        this.acceptError = new EventEmitter();
        this.submitResponse = new EventEmitter();
        this.form = this.formBuilder.group({
            device: [undefined, Validators.required],
        });
        this.showErrors = false;
    }
    set data(value) {
        this.challengeData = value;
    }
    get data() {
        if (!this.challengeData) {
            throw new Error('No challenge data set');
        }
        return this.challengeData;
    }
    onSubmit() {
        this.showErrors = true;
        if (this.form.invalid) {
            return;
        }
        this.submitResponse.emit({ deviceId: this.form.controls.device.value });
    }
    onCancel() {
        this.cancel.emit();
    }
    deviceHasFriendlyName(device) {
        return typeof device.friendlyName === 'string';
    }
    deviceGetVendorModelName(device) {
        return device.vendor && device.model ? `${device.vendor} ${device.model}` : false;
    }
    get showDeviceNotChosenError() {
        return !this.form.value.device;
    }
}
/** @nocollapse */ TransactionSigningOobSelectDeviceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningOobSelectDeviceComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionSigningOobSelectDeviceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: TransactionSigningOobSelectDeviceComponent, selector: "bb-transaction-signing-oob-select-device", inputs: { data: "data", error: "error" }, outputs: { cancel: "cancel", acceptError: "acceptError", submitResponse: "submitResponse" }, ngImport: i0, template: "<bb-transaction-signing-error *ngIf=\"error; else displayForm\" [error]=\"error\" (closeModal)=\"acceptError.emit($event)\">\n</bb-transaction-signing-error>\n\n<ng-template #displayForm>\n  <form [formGroup]=\"form\" (submit)=\"onSubmit()\" class=\"bb-block bb-block--md\">\n    <label\n      for=\"bb-transaction-signing-select-device-dropdown\"\n      i18n=\"Select device text@@bb-oob-select-device-signing.text.label\"\n    >\n      Select the device you would like to sign this transaction with.\n    </label>\n    <p>\n      <small i18n=\"Devices ordered text@@bb-oob-select-device-signing.text.hint\">\n        (Devices ordered by most recent registered)\n      </small>\n    </p>\n\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        data-role=\"ts-select-device-control\"\n        id=\"bb-transaction-signing-select-device-dropdown\"\n        i18n-placeholder=\"Select device placeholder@@bb-oob-select-device-signing.input.select-placeholder\"\n        placeholder=\"Select a device...\"\n        formControlName=\"device\"\n        [required]=\"true\"\n      >\n        <ng-container *ngIf=\"challengeData && challengeData.devices\">\n          <ng-container *ngFor=\"let device of challengeData.devices\">\n            <bb-dropdown-single-select-option-ui\n              *ngIf=\"deviceHasFriendlyName(device); else noFriendlyNameDevice\"\n              data-role=\"ts-oob-select-device-option-with-name\"\n              label=\"{{ device.friendlyName }} (Registered on: {{ device.created | date: 'medium' }})\"\n              i18n-label=\"\n                Select device friendly name option@@bb-oob-select-device-signing.input.select-option-friendly-name\"\n              [value]=\"device.deviceId\"\n            >\n            </bb-dropdown-single-select-option-ui>\n\n            <ng-template #noFriendlyNameDevice>\n              <ng-container\n                *ngIf=\"device.vendor && device.model; then displayVendorModelDevice; else displayUnknownDevice\"\n              ></ng-container>\n            </ng-template>\n\n            <ng-template #displayVendorModelDevice>\n              <bb-dropdown-single-select-option-ui\n                data-role=\"ts-oob-select-device-option-with-vendor-model\"\n                label=\"{{ deviceGetVendorModelName(device) }} (Registered on: {{ device.created | date: 'medium' }})\"\n                i18n-label=\"\n                  Select device vendor model option@@bb-oob-select-device-signing.input.select-option-vendor-model\"\n                [value]=\"device.deviceId\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </ng-template>\n            <ng-template #displayUnknownDevice>\n              <bb-dropdown-single-select-option-ui\n                data-role=\"ts-oob-select-device-option-without-name\"\n                label=\"Unknown Device (Registered on: {{ device.created | date: 'medium' }})\"\n                i18n-label=\"Select device unknown option@@bb-oob-select-device-signing.input.select-option-unknown\"\n                [value]=\"device.deviceId\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </ng-template>\n          </ng-container>\n        </ng-container>\n      </bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui [showErrors]=\"showErrors\">\n        <span\n          *ngIf=\"showDeviceNotChosenError\"\n          data-role=\"ts-oob-select-device-missing-error\"\n          i18n=\"Device not chosen error message@@bb-oob-select-device-signing.errors.missing\"\n        >\n          You must choose a device.\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <p>\n      <strong\n        i18n=\"Selected device action description@@bb-oob-select-device-signing.text.selected-action-description\"\n        data-role=\"ts-select-device-validation-message\"\n      >\n        Your selected device will be sent a notification to sign the transaction.\n      </strong>\n    </p>\n    <hr />\n    <p>\n      <small i18n=\"Navigation away notice@@bb-oob-select-device-signing.text.navigation-away\">\n        Note: Navigation away from this modal will result in a cancellation of this transaction signing process.\n      </small>\n    </p>\n\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        data-role=\"ts-select-device-continue\"\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        type=\"submit\"\n        i18n=\"Complete button@@bb-oob-select-device-signing.complete\"\n      >\n        Continue\n      </button>\n      <button\n        bbButton\n        data-role=\"ts-select-device-cancel\"\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"onCancel()\"\n        i18n=\"Cancel button@@bb-oob-select-device-signing.cancel\"\n      >\n        Cancel transaction\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i2.TransactionSigningErrorComponent, selector: "bb-transaction-signing-error", inputs: ["error"], outputs: ["closeModal"] }, { type: i3.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i3.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i4.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i5.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TransactionSigningOobSelectDeviceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transaction-signing-oob-select-device',
                    templateUrl: 'oob-select-device.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { cancel: [{
                type: Output
            }], acceptError: [{
                type: Output
            }], submitResponse: [{
                type: Output
            }], data: [{
                type: Input
            }], error: [{
                type: Input
            }] } });
//# sourceMappingURL=oob-select-device.component.js.map