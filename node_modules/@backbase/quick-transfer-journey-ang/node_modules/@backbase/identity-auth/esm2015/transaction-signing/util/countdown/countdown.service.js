import { Injectable } from '@angular/core';
import { BehaviorSubject, interval, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class CountdownService {
    constructor() {
        this.counter = new BehaviorSubject(0);
        this.finished = new Subject();
        this.remainingTime$ = this.counter.asObservable();
    }
    registerStart(period) {
        this.counter.next(period);
        this.dueTime = new Date().getTime() + period * 1000;
    }
    get remainingTime() {
        return Math.ceil((this.dueTime - new Date().getTime()) / 1000);
    }
    start(period) {
        this.registerStart(period);
        interval(1000)
            .pipe(takeUntil(this.finished), map(() => this.remainingTime))
            .subscribe((remainingTime) => {
            if (remainingTime > 0) {
                this.counter.next(remainingTime);
            }
            else {
                this.counter.next(0);
                this.finished.next();
            }
        });
    }
}
/** @nocollapse */ CountdownService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CountdownService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CountdownService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CountdownService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CountdownService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=countdown.service.js.map