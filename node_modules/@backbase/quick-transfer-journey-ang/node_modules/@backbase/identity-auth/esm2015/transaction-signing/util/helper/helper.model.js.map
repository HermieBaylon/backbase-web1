{"version":3,"file":"helper.model.js","sourceRoot":"","sources":["../../../../../../../libs/identity-auth/transaction-signing/util/helper/helper.model.ts"],"names":[],"mappings":"AAEA,MAAM,CAAN,IAAY,cAUX;AAVD,WAAY,cAAc;IACxB,+DAA6C,CAAA;IAC7C,iDAA+B,CAAA;IAC/B,qDAAmC,CAAA;IACnC,uDAAqC,CAAA;IACrC,qCAAmB,CAAA;IACnB,uCAAqB,CAAA;IACrB,uCAAqB,CAAA;IACrB,yCAAuB,CAAA;IACvB,6CAA2B,CAAA;AAC7B,CAAC,EAVW,cAAc,KAAd,cAAc,QAUzB;AAED,MAAM,CAAN,IAAY,iBAKX;AALD,WAAY,iBAAiB;IAC3B,wCAAmB,CAAA;IACnB,0CAAqB,CAAA;IACrB,0CAAqB,CAAA;IACrB,wCAAmB,CAAA;AACrB,CAAC,EALW,iBAAiB,KAAjB,iBAAiB,QAK5B","sourcesContent":["import { Observable, Subject } from 'rxjs';\n\nexport enum ProgressStatus {\n  CONFIRMATION_PENDING = 'CONFIRMATION_PENDING',\n  USER_DECLINED = 'USER_DECLINED',\n  SYSTEM_DECLINED = 'SYSTEM_DECLINED',\n  PENDING_APPROVAL = 'PENDING_APPROVAL',\n  SENDING = 'SENDING',\n  ACCEPTED = 'ACCEPTED',\n  REJECTED = 'REJECTED',\n  PROCESSED = 'PROCESSED',\n  NO_PROGRESS = 'NO_PROGRESS',\n}\n\nexport enum TransactionStatus {\n  success = 'success',\n  rejected = 'rejected',\n  declined = 'declined',\n  pending = 'pending',\n}\n\nexport type TransactionStatusMap = { [key in keyof typeof TransactionStatus]: Array<string> };\n\nexport type TransactionCallbackFn = (param: TransactionCallbackParam) => void;\n\nexport interface TransactionCallbackParam {\n  status: string;\n  data?: any;\n}\n\nexport interface TransactionSigningOptions {\n  /**\n   * Data that is passed as param to the fetchFn\n   */\n  data: any;\n  /**\n   * Options to configure polling flow.\n   */\n  asyncPollingOptions?: AsyncPollingOptions;\n  /**\n   * A hashmap that contains different mapped statuses for success, rejected, declined, or pending.\n   * This map is used to determine the callback to trigger based on the status returned\n   * from `fetchFn`.\n   */\n  statusMap?: TransactionStatusMap;\n  /**\n   * A function that is fetches the status of the transaction.\n   * This is used for polling when `asyncPollingOptions` are provided\n   */\n  fetchFn?: (param?: any) => Observable<any>;\n  /**\n   * A callback function that is triggered on transaction success.\n   */\n  onSuccess: TransactionCallbackFn;\n  /**\n   * A callback function that is triggered on transaction reject.\n   */\n  onRejected: TransactionCallbackFn;\n  /**\n   * A callback function that is triggered on transaction decline.\n   */\n  onDeclined: TransactionCallbackFn;\n  /**\n   * A callback function that is triggered on invalid statuses or error.\n   */\n  onError: (error: any) => void;\n}\n\nexport interface AsyncPollingOptions {\n  /**\n   * Number of times to retry polling in case of error.\n   * Defaults to 3.\n   */\n  maxRetries?: number;\n  /**\n   * Time interval (in ms) between each polling request.\n   * Defaults to 1000.\n   */\n  pollInterval?: number;\n  /**\n   * The function that determines when the polling should be stopped.\n   * It receives the output of `fetchFn` as param.\n   */\n  pollUntilFn?: (param?: any) => boolean;\n  /**\n   * A subject that determines when the polling should be completed\n   * if the transaction in not yet fulfilled.\n   * This is required to stop polling when the user navigates to a different route.\n   */\n  complete$: Subject<any>;\n}\n"]}