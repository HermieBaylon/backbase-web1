import { Inject, Injectable, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { WINDOW } from '../auth/auth.model';
import { ACTIVITY_MONITOR_CONFIG } from './activity-monitor.model';
import * as i0 from "@angular/core";
/**
 * Service for monitoring user activity
 */
export class ActivityMonitorService {
    // https://angular.io/guide/aot-metadata-errors#could-not-resolve-type
    constructor(_window, _config) {
        this.events$ = new Subject();
        this.isActive = false;
        this.lastActiveEpoch = 0;
        this.config = {
            maxInactivityDuration: 180,
            countdownDuration: 30,
        };
        this.listenerCallback = this.setLastActiveEpoch.bind(this);
        this.countdownActive = false;
        this.events = this.events$.asObservable();
        this.window = _window;
        Object.assign(this.config, _config || {});
    }
    /**
     * Starts activity monitoring.
     */
    start(_config = {}) {
        Object.assign(this.config, _config);
        if (this.isActive) {
            this.stop();
        }
        this.listen(true, { passive: true, capture: true });
    }
    // Stops activity monitoring.
    stop() {
        if (this.isActive) {
            this.listen(false, true);
        }
    }
    getInactivityDuration() {
        const now = Math.floor(Date.now() / 1000);
        const last = Math.floor(this.lastActiveEpoch / 1000);
        return Math.floor(now - last);
    }
    setLastActiveEpoch() {
        this.lastActiveEpoch = Date.now();
    }
    listen(activate, options) {
        this.isActive = activate;
        const func = activate ? this.window.document.addEventListener : this.window.document.removeEventListener;
        this.setLastActiveEpoch();
        func('mousemove', this.listenerCallback, options);
        func('mousedown', this.listenerCallback, options);
        func('keydown', this.listenerCallback, options);
        func('mousewheel', this.listenerCallback, options);
        func('touchmove', this.listenerCallback, options);
        if (activate) {
            this.intervalId = this.window.setInterval(this.onEverySecond.bind(this), 1000);
        }
        else {
            this.window.clearInterval(this.intervalId);
            if (this.countdownActive) {
                this.countdownActive = false;
                this.events$.next({ type: 'reset' });
            }
        }
    }
    onEverySecond() {
        const ttl = this.config.maxInactivityDuration - this.getInactivityDuration();
        if (ttl > -1 && ttl <= this.config.countdownDuration) {
            if (!this.countdownActive) {
                this.countdownActive = true;
                this.events$.next({ type: 'start' });
                this.events$.next({ type: 'tick', remaining: ttl });
                return;
            }
            if (ttl > 0) {
                this.events$.next({ type: 'tick', remaining: ttl });
            }
            else {
                this.countdownActive = false;
                this.events$.next({ type: 'end' });
                this.stop();
            }
        }
        else if (this.countdownActive) {
            this.countdownActive = false;
            this.events$.next({ type: 'reset' });
        }
    }
}
/** @nocollapse */ ActivityMonitorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActivityMonitorService, deps: [{ token: WINDOW }, { token: ACTIVITY_MONITOR_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ActivityMonitorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActivityMonitorService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ActivityMonitorService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACTIVITY_MONITOR_CONFIG]
                }] }]; } });
//# sourceMappingURL=activity-monitor.service.js.map