import { Inject, Injectable, Optional } from '@angular/core';
import { AuthConfig, OAuthService, OAuthStorage } from 'angular-oauth2-oidc';
import { from, ReplaySubject } from 'rxjs';
import { filter, map, mapTo, take } from 'rxjs/operators';
import { WINDOW } from '../auth/auth.model';
import * as i0 from "@angular/core";
import * as i1 from "angular-oauth2-oidc";
/** @internal */
export class ɵɵOidcAuthService {
    // https://angular.io/guide/aot-metadata-errors#could-not-resolve-type
    constructor(oAuthService, oAuthStorage, oAuthConfig, _window) {
        var _a;
        this.oAuthService = oAuthService;
        this.oAuthStorage = oAuthStorage;
        this.oAuthConfig = oAuthConfig;
        this._window = _window;
        this.authenticated$$ = new ReplaySubject();
        this.storage = this.oAuthStorage;
        this.authConfig = this.oAuthConfig;
        this.events$ = (_a = this.oAuthService) === null || _a === void 0 ? void 0 : _a.events;
        this.isAuthenticated$ = this.authenticated$$.pipe(map(() => this.oAuthService.hasValidAccessToken()));
        this.accessToken$ = this.isAuthenticated$.pipe(filter((loaded) => loaded), map(() => {
            const raw = this.oAuthService.getAccessToken();
            return {
                raw,
                parsed: this.parseJwt(raw),
            };
        }));
        if (!oAuthService) {
            throw new Error(`In order to use ɵɵOidcAuthService, please include OAuthModule.forRoot() to your application module`);
        }
        this.window = this._window;
        this.oAuthService.events.subscribe((event) => {
            switch (event.type) {
                case 'discovery_document_loaded':
                case 'token_received':
                case 'logout':
                    this.authenticated$$.next();
                    break;
                default:
                    break;
            }
        });
    }
    logout(redirectUri) {
        if (redirectUri) {
            this.oAuthService.postLogoutRedirectUri = redirectUri;
        }
        this.oAuthService.logOut();
        return this.oAuthService.events
            .pipe(filter((event) => event.type === 'logout'), mapTo(undefined), take(1))
            .toPromise();
    }
    timeToLive() {
        const expiration = this.oAuthService.getAccessTokenExpiration();
        if (expiration) {
            return expiration - Math.ceil(new Date().getTime() / 1000) + (this.oAuthService.clockSkewInSec || 0);
        }
        return -1;
    }
    refresh() {
        this.oAuthService.refreshToken();
        return this.oAuthService.events
            .pipe(filter((event) => event.type === 'token_refreshed'), mapTo(undefined), take(1))
            .toPromise();
    }
    loadDiscoveryDocument() {
        return this.oAuthService.loadDiscoveryDocument();
    }
    authorizationHeader() {
        return this.oAuthService.authorizationHeader();
    }
    createReauthLoginUrl(scope, acr_values) {
        return from(this.oAuthService.createLoginUrl('', // state
        '', // login hint
        location.href, // custom redirect uri
        false, // no prompt
        {
            acr_values,
            response_mode: 'fragment',
        })).pipe(map((preUrl) => {
            const urlParsed = new URL(preUrl);
            urlParsed.searchParams.set('scope', `${urlParsed.searchParams.get('scope')} ${scope}`);
            return urlParsed.href;
        }));
    }
    parseJwt(token) {
        try {
            const base64Url = token.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            return JSON.parse(this.window.atob(base64));
        }
        catch (e) {
            return undefined;
        }
    }
}
/** @nocollapse */ ɵɵOidcAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ɵɵOidcAuthService, deps: [{ token: i1.OAuthService, optional: true }, { token: OAuthStorage }, { token: AuthConfig }, { token: WINDOW }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ɵɵOidcAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ɵɵOidcAuthService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ɵɵOidcAuthService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.OAuthService, decorators: [{
                    type: Optional
                }] }, { type: i1.OAuthStorage, decorators: [{
                    type: Inject,
                    args: [OAuthStorage]
                }] }, { type: i1.AuthConfig, decorators: [{
                    type: Inject,
                    args: [AuthConfig]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; } });
//# sourceMappingURL=oidc-auth.service.js.map