import { OnDestroy } from '@angular/core';
import { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { ContactsHttpService } from '@backbase/data-ang/contact-manager';
import { PaymentOrdersHttpService, PaymentOrdersPost, PaymentOrdersPostResponse } from '@backbase/data-ang/payment-order';
import { A2aClientHttpService } from '@backbase/data-ang/payment-order-a2a';
import { CapabilityData, TransactionSigningHelperService } from '@backbase/identity-auth/transaction-signing';
import { Observable, Subject } from 'rxjs';
import { Arrangement, Contact, ExternalAccount } from '../models/items.model';
import { QuickTransferJourneyConfigService } from '../services/config.service';
import * as i0 from "@angular/core";
export declare class QuickTransferHttpService implements OnDestroy {
    private readonly productSummaryDataHttpService;
    private readonly contactService;
    private readonly paymentA2AService;
    private readonly paymentOrderService;
    private readonly transactionSigningHelper;
    private readonly configService;
    private destroy$;
    paymentOrderResponse$: Subject<PaymentOrdersPostResponse | undefined>;
    /**
     * Product Summary default parameters
     */
    private productSummaryParameters;
    constructor(productSummaryDataHttpService: ProductSummaryHttpService, contactService: ContactsHttpService, paymentA2AService: A2aClientHttpService, paymentOrderService: PaymentOrdersHttpService, transactionSigningHelper: TransactionSigningHelperService, configService: QuickTransferJourneyConfigService);
    /**
     * Load debit accounts
     */
    getDebitAccounts(): Observable<Arrangement[]>;
    /**
     * Load credit accounts
     */
    getCreditAccounts(): Observable<Arrangement[]>;
    /**
     * Load contacts
     */
    getContacts(): Observable<Contact[]>;
    /**
     * Get external accounts
     */
    getExternalAccounts(): Observable<ExternalAccount[] | undefined>;
    /**
     * Post method to initiate payment order
     */
    sendPaymentOrder(paymentOrdersPost: PaymentOrdersPost): Observable<PaymentOrdersPostResponse | undefined>;
    getPaymentProgressStatus(data?: CapabilityData): Observable<string | undefined>;
    handleTransactionSigning(response: CapabilityData): void;
    isPaymentConfirmed(status: string): boolean;
    onTransactionSigningSuccess(paymentOrderId: string): void;
    onTransactionFail(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QuickTransferHttpService, [null, null, null, null, { optional: true; }, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<QuickTransferHttpService>;
}
