import { HttpErrorResponse } from '@angular/common/http';
import { PaymentOrdersPost } from '@backbase/data-ang/payment-order';
import { Arrangement, Contact, ExternalAccount } from '../models/items.model';
import { ViewState } from '../models/view.model';
export declare const accountsFetch: import("@ngrx/store").ActionCreator<"[Accounts API] fetching accounts", () => import("@ngrx/store/src/models").TypedAction<"[Accounts API] fetching accounts">>;
export declare const contactsFetch: import("@ngrx/store").ActionCreator<"[Contacts API] fetching contacts", () => import("@ngrx/store/src/models").TypedAction<"[Contacts API] fetching contacts">>;
export declare const externalAccountsFetch: import("@ngrx/store").ActionCreator<"[Payments API] fetching external accounts", () => import("@ngrx/store/src/models").TypedAction<"[Payments API] fetching external accounts">>;
export declare const accountsFetchSuccess: import("@ngrx/store").ActionCreator<"[Accounts API] accounts fetched success", (props: {
    debitAccounts: Arrangement[];
    creditAccounts: Arrangement[];
}) => {
    debitAccounts: Arrangement[];
    creditAccounts: Arrangement[];
} & import("@ngrx/store/src/models").TypedAction<"[Accounts API] accounts fetched success">>;
export declare const contactsFetchSuccess: import("@ngrx/store").ActionCreator<"[Contacts API] contacts fetched success", (props: {
    contacts: Contact[];
}) => {
    contacts: Contact[];
} & import("@ngrx/store/src/models").TypedAction<"[Contacts API] contacts fetched success">>;
export declare const extAccountsFetchSuccess: import("@ngrx/store").ActionCreator<"[Payments API] external accounts fetched success", (props: {
    extAccounts: ExternalAccount[] | undefined;
}) => {
    extAccounts: ExternalAccount[] | undefined;
} & import("@ngrx/store/src/models").TypedAction<"[Payments API] external accounts fetched success">>;
export declare const accountsFetchError: import("@ngrx/store").ActionCreator<"[Accounts API] accounts fetching error", (props: {
    error: HttpErrorResponse;
}) => {
    error: HttpErrorResponse;
} & import("@ngrx/store/src/models").TypedAction<"[Accounts API] accounts fetching error">>;
export declare const contactsFetchError: import("@ngrx/store").ActionCreator<"[Contacts API] contacts fetching error", (props: {
    error: HttpErrorResponse;
}) => {
    error: HttpErrorResponse;
} & import("@ngrx/store/src/models").TypedAction<"[Contacts API] contacts fetching error">>;
export declare const extAccountsFetchError: import("@ngrx/store").ActionCreator<"[Payments API] external accounts fetching error", (props: {
    error: HttpErrorResponse;
}) => {
    error: HttpErrorResponse;
} & import("@ngrx/store/src/models").TypedAction<"[Payments API] external accounts fetching error">>;
export declare const openView: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] current view changed", (props: {
    view: ViewState;
    focus?: string | undefined;
}) => {
    view: ViewState;
    focus?: string | undefined;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] current view changed">>;
export declare const setPayeeAccount: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] payee account picked up", (props: {
    id: string;
}) => {
    id: string;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] payee account picked up">>;
export declare const setFromAccount: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] From Account changed", (props: {
    accountId: string;
}) => {
    accountId: string;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] From Account changed">>;
export declare const sendTransferOrder: import("@ngrx/store").ActionCreator<"[Payments Order API] send transfer order", (props: {
    reqData: PaymentOrdersPost;
}) => {
    reqData: PaymentOrdersPost;
} & import("@ngrx/store/src/models").TypedAction<"[Payments Order API] send transfer order">>;
export declare const transferOrderSuccess: import("@ngrx/store").ActionCreator<"[Payments Order API] transfer order is successful", () => import("@ngrx/store/src/models").TypedAction<"[Payments Order API] transfer order is successful">>;
export declare const transferOrderError: import("@ngrx/store").ActionCreator<"[Payments Order API] transfer order is failed", (props: {
    error: HttpErrorResponse;
}) => {
    error: HttpErrorResponse;
} & import("@ngrx/store/src/models").TypedAction<"[Payments Order API] transfer order is failed">>;
export declare const setAmount: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] Transfer Amount Set", (props: {
    amount: string;
    defaultCurrency?: string | undefined;
}) => {
    amount: string;
    defaultCurrency?: string | undefined;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] Transfer Amount Set">>;
export declare const setModalOpen: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] Confirmation Modal Open", (props: {
    isOpen: boolean;
}) => {
    isOpen: boolean;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] Confirmation Modal Open">>;
export declare const resetWidget: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] Reset widget", (props: {
    focus?: string | undefined;
}) => {
    focus?: string | undefined;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] Reset widget">>;
export declare const resetFocus: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] Reset Focus Element", () => import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] Reset Focus Element">>;
export declare const setFieldTouched: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] Set Field Touched", (props: {
    fieldName: string;
}) => {
    fieldName: string;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] Set Field Touched">>;
export declare const setDefaultCurrency: import("@ngrx/store").ActionCreator<"[Quick Transfer Widget] Default Currency changed", (props: {
    currency: string;
}) => {
    currency: string;
} & import("@ngrx/store/src/models").TypedAction<"[Quick Transfer Widget] Default Currency changed">>;
