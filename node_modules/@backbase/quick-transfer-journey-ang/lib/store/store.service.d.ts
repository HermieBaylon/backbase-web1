import { PaymentOrdersPost } from '@backbase/data-ang/payment-order';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { AccountItem, Arrangement, Contact, ExternalAccount, TransferAmount } from '../models/items.model';
import { CallState, QuickTransferState } from '../models/state.model';
import { ViewState } from '../models/view.model';
import * as i0 from "@angular/core";
export declare class QuickTransferStoreService {
    private readonly store;
    /**
     * Stream of api call state for fetching accounts
     */
    readonly accountsCallState$: Observable<CallState>;
    /**
     * Stream of api call state for fetching contacts
     */
    readonly contactsCallState$: Observable<CallState>;
    /**
     * Stream of api call state for fetching external accounts
     */
    readonly extAccountsCallState$: Observable<CallState>;
    /**
     * Stream of current view state
     */
    readonly currentView$: Observable<ViewState>;
    /**
     * Stream of debit accounts
     */
    readonly debitAccounts$: Observable<Arrangement[] | undefined>;
    /**
     * Stream of credit accounts
     */
    readonly creditAccounts$: Observable<Arrangement[] | undefined>;
    /**
     * Stream of external accounts
     */
    readonly extAccounts$: Observable<ExternalAccount[] | undefined>;
    /**
     * Stream of contacts
     */
    readonly contacts$: Observable<Contact[] | undefined>;
    /**
     * Stream of fromAccount
     */
    readonly fromAccount$: Observable<AccountItem | undefined>;
    /**
     * Stream of toPayee
     */
    readonly toPayee$: Observable<AccountItem | undefined>;
    /**
     * Stream of transfer amount
     */
    readonly amount$: Observable<TransferAmount | undefined>;
    /**
     * Boolean flag for the confirmation modal
     */
    readonly isModalOpen$: Observable<boolean>;
    /**
     * Stream of touched fields.
     */
    readonly touchedFields$: Observable<string[] | undefined>;
    /**
     * Stream of Element selector to be focused.
     */
    readonly focusElement$: Observable<string | undefined>;
    /**
     * Boolean flag for transfer order state loading
     */
    readonly paymentOrderCallState$: Observable<CallState>;
    constructor(store: Store<QuickTransferState>);
    /**
     * Method to set initial accounts after fetching
     */
    fetchAccounts(): void;
    /**
     * Method to set initial external accounts after fetching
     */
    fetchExtAccounts(): void;
    /**
     * Method to set initial contacts after fetching
     */
    fetchContacts(): void;
    /**
     * Method to set initial contacts after fetching
     */
    sendTranferOrder(reqData: PaymentOrdersPost): void;
    /**
     * Method to set initial accounts after fetching
     */
    setView(view: ViewState, focus?: string): void;
    /**
     * Method to set toPayee for account
     */
    setPayee(id: string): void;
    /**
     * Method to set initial accounts after fetching
     */
    selectFromAccount(accountId: string): void;
    /**
     * Method to set transfer amount
     */
    setAmount({ amount, defaultCurrency }: {
        amount: string;
        defaultCurrency?: string;
    }): void;
    /**
     * Method to open/close confirmation modal
     */
    setModalOpen(isOpen: boolean): void;
    /**
     * Method to set form submitted
     */
    setTouchedField(fieldName: string): void;
    /**
     * Method to reset the widget
     */
    reset(focus?: string): void;
    /**
     * Method to set form submitted
     */
    resetFocus(): void;
    /**
     * Method to pass default currency into the store
     */
    updateDefaultCurrency(currency: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QuickTransferStoreService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<QuickTransferStoreService>;
}
