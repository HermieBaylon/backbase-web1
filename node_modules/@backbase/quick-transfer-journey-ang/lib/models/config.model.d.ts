import { AsyncValidatorFn, ValidatorFn } from '@angular/forms';
import { Arrangement, Contact } from './items.model';
import { ViewState } from './view.model';
export interface BaseObject<T> {
    [key: string]: T;
}
export declare enum QuickTransferProductKinds {
    currentAccount = "Current Account",
    savingsAccount = "Savings Account",
    creditCard = "Credit Card",
    loanAccount = "Loan",
    connectedAccounts = "Connected Account",
    contacts = "Contact"
}
export interface ValidationMessage {
    name: string;
    message: string;
}
/**
 * @deprecated since version 1.1.0 use `QuickTransferJourneyConfiguration` instead
 */
export interface FilterState extends BaseObject<Array<string | number | boolean> | string> {
    key: string;
    value: Array<string | number | boolean>;
}
export interface QuickTransferBaseField {
    validationMessages?: ValidationMessage[];
    validators?: Array<ValidatorFn>;
    asyncValidators?: Array<AsyncValidatorFn>;
    label?: string;
}
export interface QuickTransferField extends QuickTransferBaseField {
    productKinds?: QuickTransferProductKinds[];
    connectedAccountsSubHeader?: string;
    mapItems?: (items: Arrangement[]) => Arrangement[];
    mapContacts?: (items: Contact[]) => Contact[];
    /** @deprecated since version 1.1.0, use `mapItems` instead */
    otherFilters?: FilterState[];
}
export interface QuickTransferAmountField extends QuickTransferBaseField {
    initialCurrency: string;
    autoDecimal: boolean;
    maxLength?: number;
    placeholder?: string;
    wrapperClasses?: string;
    required?: boolean;
}
export interface PaymentTypes {
    internal: string;
    external?: string;
    contact?: string;
}
export interface DisabledCombination {
    from: QuickTransferProductKinds;
    to: QuickTransferProductKinds;
}
export interface QuickTransferFields {
    fromAccount: QuickTransferField;
    toAccount: QuickTransferField;
    amount: QuickTransferAmountField;
}
export interface UiComponentProps {
    mapCurrency?: boolean;
    accountNumberFormat?: AccountNumberFormat;
    productItemHighlight?: boolean;
}
export interface AccountNumberFormat {
    length?: number;
    maskRange?: [number, number];
    segments?: number | Array<number>;
}
export interface QuickTransferJourneyConfiguration {
    fields: QuickTransferFields;
    businessFunction?: string;
    successEvents?: string;
    paymentTypes: PaymentTypes;
    disabledCombinations: DisabledCombination[];
    productSummaryQueryParameters?: BaseObject<any>;
    uiComponentProps: UiComponentProps;
    titles: Titles;
}
export interface Titles {
    [ViewState.FORM]: string;
    [ViewState.FROM]: string;
    [ViewState.PAYEE]: string;
    [ViewState.REVIEW]: string;
}
/**
 * @deprecated since version 1.1.0 use `QuickTransferJourneyConfiguration` instead
 */
export interface QuickTransferConfigType {
    fields: QuickTransferFields;
    businessFunction?: string;
    successEvents?: string;
    paymentTypes: PaymentTypes;
    disabledCombinations: DisabledCombination[];
    productSummaryQueryParameters?: BaseObject<any>;
    uiComponentProps: UiComponentProps;
}
