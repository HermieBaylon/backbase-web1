import { OnDestroy } from '@angular/core';
import { Observable, Subscription } from 'rxjs';
import { PaymentTypes, QuickTransferJourneyConfiguration } from '../../models/config.model';
import { AccountItem, TransferAmount } from '../../models/items.model';
import { CallState, LoadingState } from '../../models/state.model';
import { ViewState } from '../../models/view.model';
import { QuickTransferStoreService } from '../../store/store.service';
import * as i0 from "@angular/core";
export declare class QuickTransferConfirmationModalComponent implements OnDestroy {
    private readonly store;
    /**
     * success events array
     */
    paymentTypes?: PaymentTypes;
    /**
     * Quick Transfer configuration
     */
    config?: QuickTransferJourneyConfiguration;
    /**
     * Subscriptions for form fields
     */
    subscriptions$: Subscription | undefined;
    /**
     * Stream of toPayee
     */
    readonly toPayee$: Observable<AccountItem | undefined>;
    /**
     * Stream of fromAccount
     */
    readonly fromAccount$: Observable<AccountItem | undefined>;
    /**
     * Stream of transfer amount
     */
    readonly amount$: Observable<TransferAmount | undefined>;
    /**
     * Stream of isModalOpen
     */
    readonly isOpen$: Observable<boolean>;
    /**
     * Stream of loading
     */
    readonly paymentOrderCallState$: Observable<CallState>;
    /**
     * Enum for loadingstate
     */
    readonly loadingstate: typeof LoadingState;
    /**
     * Enum for current View
     */
    readonly viewState: typeof ViewState;
    constructor(store: QuickTransferStoreService);
    /**
     * close the modal
     */
    closeModal(): void;
    /**
     * close the modal
     */
    handleConfirm(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<QuickTransferConfirmationModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QuickTransferConfirmationModalComponent, "bb-quick-transfer-confirmation-modal-ui", never, { "paymentTypes": "paymentTypes"; "config": "config"; }, {}, never, never>;
}
