import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { QuickTransferAmountField, QuickTransferJourneyConfiguration } from '../../models/config.model';
import { AccountItem, TransferAmount } from '../../models/items.model';
import { ViewState } from '../../models/view.model';
import { QuickTransferStoreService } from '../../store/store.service';
import * as i0 from "@angular/core";
export declare class QuickTransferFormComponent implements OnInit, OnDestroy, AfterViewInit {
    private readonly store;
    private readonly formBuilder;
    private readonly locale;
    /**
     * The format used for bignumber;
     */
    private readonly format;
    private readonly decimalSeparator;
    /**
     * Quick Transfer configuration
     */
    config?: QuickTransferJourneyConfiguration;
    /**
     * Stream of toPayee
     */
    readonly toPayee$: Observable<AccountItem | undefined>;
    /**
     * Stream of fromAccount
     */
    readonly fromAccount$: Observable<AccountItem | undefined>;
    /**
     * Stream of amount
     */
    readonly amount$: Observable<TransferAmount | undefined>;
    /**
     * Stream of touchedFields
     */
    readonly touchedFields$: Observable<string[] | undefined>;
    /**
     * The reactive form
     */
    form?: FormGroup;
    /**
     * Enum for current View
     */
    readonly viewState: typeof ViewState;
    /**
     * unique key used for ids
     */
    readonly id: number;
    /**
     * Stream of the current view
     */
    readonly currentView$: Observable<ViewState | undefined>;
    /**
     * Stream of the current view
     */
    get amountConfig(): QuickTransferAmountField | undefined;
    formEl: ElementRef;
    destroy$: Subject<unknown>;
    constructor(store: QuickTransferStoreService, formBuilder: FormBuilder, locale: string);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Method to open from account selector
     */
    openFromAccount(): void;
    /**
     * Method to open to account selector
     */
    openPayeeAccount(): void;
    /**
     * Method to store amount input value
     */
    private storeAmountValue;
    /**
     * Method to handle transfer
     */
    openConfirmation(): Promise<void>;
    /**
     * Method to check field Validity
     */
    isFieldValid(fieldName: string): boolean | null | undefined;
    /**
     * Method to set field as touched
     */
    setTouched(fieldName: string): void;
    private initializeForm;
    static ɵfac: i0.ɵɵFactoryDeclaration<QuickTransferFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<QuickTransferFormComponent, "bb-quick-transfer-form-ui", never, { "config": "config"; }, {}, never, never>;
}
