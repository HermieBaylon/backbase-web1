(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/localize/init'), require('@angular/core'), require('@ngrx/store'), require('@backbase/ui-ang/product-item-basic-account'), require('@angular/common'), require('@backbase/ui-ang/button'), require('rxjs/operators'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/amount'), require('rxjs'), require('@backbase/data-ang/payment-order'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/load-button'), require('@angular/forms'), require('bignumber.js'), require('@backbase/ui-ang/util'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/amount-input'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/tab'), require('@angular/router'), require('@angular/animations'), require('@backbase/ui-ang/currency-input'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/data-ang/arrangements'), require('@backbase/data-ang/contact-manager'), require('@backbase/data-ang/payment-order-a2a'), require('@backbase/identity-auth/transaction-signing'), require('@ngrx/effects'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@backbase/quick-transfer-journey-ang', ['exports', '@angular/localize/init', '@angular/core', '@ngrx/store', '@backbase/ui-ang/product-item-basic-account', '@angular/common', '@backbase/ui-ang/button', 'rxjs/operators', '@backbase/ui-ang/icon', '@backbase/ui-ang/header', '@backbase/ui-ang/amount', 'rxjs', '@backbase/data-ang/payment-order', '@backbase/ui-ang/modal', '@backbase/ui-ang/load-button', '@angular/forms', 'bignumber.js', '@backbase/ui-ang/util', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/amount-input', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/tab', '@angular/router', '@angular/animations', '@backbase/ui-ang/currency-input', '@backbase/ui-ang/tooltip-directive', '@backbase/data-ang/arrangements', '@backbase/data-ang/contact-manager', '@backbase/data-ang/payment-order-a2a', '@backbase/identity-auth/transaction-signing', '@ngrx/effects', '@angular/common/http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["quick-transfer-journey-ang"] = {}), global.ng.localize.init, global.ng.core, global.i1, global.i1$1, global.ng.common, global.i3, global.rxjs.operators, global.i2, global.i3$1, global.i4, global.rxjs, global.i4$1, global.i2$1, global.i6, global.ng.forms, global.BigNumber, global.util, global.i1$2, global.i6$1, global.i5, global.i6$2, global.i4$2, global.ng.router, global.ng.animations, global.currencyInput, global.tooltipDirective, global.i1$3, global.i2$4, global.i3$2, global.i5$1, global.i1$4, global.ng.common.http));
})(this, (function (exports, init, i0, i1, i1$1, i9, i3, operators, i2, i3$1, i4, rxjs, i4$1, i2$1, i6, i2$2, BigNumber, util, i1$2, i6$1, i5, i6$2, i4$2, i2$3, animations, currencyInput, tooltipDirective, i1$3, i2$4, i3$2, i5$1, i1$4, http) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var BigNumber__default = /*#__PURE__*/_interopDefaultLegacy(BigNumber);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$2);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);

    var CommunicationService = /** @class */ (function () {
        function CommunicationService() {
        }
        return CommunicationService;
    }());

    /** Enum representing different possible loading states of ajax call */
    var LoadingState;
    (function (LoadingState) {
        LoadingState["INIT"] = "INIT";
        LoadingState["LOADING"] = "LOADING";
        LoadingState["LOADED"] = "LOADED";
    })(LoadingState || (LoadingState = {}));
    var ProgressStatus;
    (function (ProgressStatus) {
        ProgressStatus["CONFIRMATION_PENDING"] = "CONFIRMATION_PENDING";
        ProgressStatus["USER_DECLINED"] = "USER_DECLINED";
        ProgressStatus["SYSTEM_DECLINED"] = "SYSTEM_DECLINED";
        ProgressStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
        ProgressStatus["SENDING"] = "SENDING";
        ProgressStatus["ACCEPTED"] = "ACCEPTED";
        ProgressStatus["REJECTED"] = "REJECTED";
        ProgressStatus["PROCESSED"] = "PROCESSED";
        ProgressStatus["NO_PROGRESS"] = "NO_PROGRESS";
    })(ProgressStatus || (ProgressStatus = {}));

    /** Enum representing different view states */
    exports.ViewState = void 0;
    (function (ViewState) {
        ViewState["FORM"] = "FORM";
        ViewState["FROM"] = "FROM";
        ViewState["PAYEE"] = "PAYEE";
        ViewState["COMPLETE"] = "COMPLETE";
        ViewState["REVIEW"] = "REVIEW";
    })(exports.ViewState || (exports.ViewState = {}));
    var Location;
    (function (Location) {
        Location["FROM"] = "FROM";
        Location["TO"] = "TO";
    })(Location || (Location = {}));

    var accountsFetch = i1.createAction('[Accounts API] fetching accounts');
    var contactsFetch = i1.createAction('[Contacts API] fetching contacts');
    var externalAccountsFetch = i1.createAction('[Payments API] fetching external accounts');
    // Success
    var accountsFetchSuccess = i1.createAction('[Accounts API] accounts fetched success', i1.props());
    var contactsFetchSuccess = i1.createAction('[Contacts API] contacts fetched success', i1.props());
    var extAccountsFetchSuccess = i1.createAction('[Payments API] external accounts fetched success', i1.props());
    // Error
    var accountsFetchError = i1.createAction('[Accounts API] accounts fetching error', i1.props());
    var contactsFetchError = i1.createAction('[Contacts API] contacts fetching error', i1.props());
    var extAccountsFetchError = i1.createAction('[Payments API] external accounts fetching error', i1.props());
    var openView = i1.createAction('[Quick Transfer Widget] current view changed', i1.props());
    var setPayeeAccount = i1.createAction('[Quick Transfer Widget] payee account picked up', i1.props());
    var setFromAccount = i1.createAction('[Quick Transfer Widget] From Account changed', i1.props());
    var sendTransferOrder = i1.createAction('[Payments Order API] send transfer order', i1.props());
    var transferOrderSuccess = i1.createAction('[Payments Order API] transfer order is successful');
    var transferOrderError = i1.createAction('[Payments Order API] transfer order is failed', i1.props());
    var setAmount = i1.createAction('[Quick Transfer Widget] Transfer Amount Set', i1.props());
    var setModalOpen = i1.createAction('[Quick Transfer Widget] Confirmation Modal Open', i1.props());
    var resetWidget = i1.createAction('[Quick Transfer Widget] Reset widget', i1.props());
    var resetFocus = i1.createAction('[Quick Transfer Widget] Reset Focus Element');
    var setFieldTouched = i1.createAction('[Quick Transfer Widget] Set Field Touched', i1.props());
    var setDefaultCurrency = i1.createAction('[Quick Transfer Widget] Default Currency changed', i1.props());

    var FEATURE_STORE_SELECTOR = 'quick-transfer-store';
    var initialState = {
        debitAccounts: undefined,
        creditAccounts: undefined,
        contacts: undefined,
        extAccounts: undefined,
        viewState: exports.ViewState.FORM,
        fromAccount: undefined,
        payeeTo: undefined,
        amount: undefined,
        defaultCurrency: '',
        accountsCallState: LoadingState.INIT,
        extAccountsCallState: LoadingState.INIT,
        contactsCallState: LoadingState.INIT,
        transferOrderCallState: LoadingState.INIT,
        isModalOpen: false,
        touchedFields: [],
        focusElement: undefined,
    };

    var child = i1.createFeatureSelector(FEATURE_STORE_SELECTOR);
    var selectFromAccount = i1.createSelector(child, function (state) { return state['fromAccount']; });
    var selectDebitAccounts = i1.createSelector(child, function (state) { return state['debitAccounts']; });
    var selectCreditAccounts = i1.createSelector(child, function (state) { return state['creditAccounts']; });
    var selectExtAccounts = i1.createSelector(child, function (state) { return state['extAccounts']; });
    var selectContacts = i1.createSelector(child, function (state) { return state['contacts']; });
    var selectAccountsCallState = i1.createSelector(child, function (state) { return state['accountsCallState']; });
    var selectContactsCallState = i1.createSelector(child, function (state) { return state['contactsCallState']; });
    var selectExtAccountsCallState = i1.createSelector(child, function (state) { return state['extAccountsCallState']; });
    var selectTransferOrderCallState = i1.createSelector(child, function (state) { return state['transferOrderCallState']; });
    var selectViewState = i1.createSelector(child, function (state) { return state['viewState']; });
    var selectPayeeAccount = i1.createSelector(child, function (state) { return state['payeeTo']; });
    var selectAmount = i1.createSelector(child, function (state) { return state['amount']; });
    var selectIsModalOpen = i1.createSelector(child, function (state) { return state['isModalOpen']; });
    var selectTouchedFields = i1.createSelector(child, function (state) { return state['touchedFields']; });
    var selectFocusElement = i1.createSelector(child, function (state) { return state['focusElement']; });

    var QuickTransferStoreService = /** @class */ (function () {
        function QuickTransferStoreService(store) {
            this.store = store;
            /**
             * Stream of api call state for fetching accounts
             */
            this.accountsCallState$ = this.store.select(selectAccountsCallState);
            /**
             * Stream of api call state for fetching contacts
             */
            this.contactsCallState$ = this.store.select(selectContactsCallState);
            /**
             * Stream of api call state for fetching external accounts
             */
            this.extAccountsCallState$ = this.store.select(selectExtAccountsCallState);
            /**
             * Stream of current view state
             */
            this.currentView$ = this.store.select(selectViewState);
            /**
             * Stream of debit accounts
             */
            this.debitAccounts$ = this.store.select(selectDebitAccounts);
            /**
             * Stream of credit accounts
             */
            this.creditAccounts$ = this.store.select(selectCreditAccounts);
            /**
             * Stream of external accounts
             */
            this.extAccounts$ = this.store.select(selectExtAccounts);
            /**
             * Stream of contacts
             */
            this.contacts$ = this.store.select(selectContacts);
            /**
             * Stream of fromAccount
             */
            this.fromAccount$ = this.store.select(selectFromAccount);
            /**
             * Stream of toPayee
             */
            this.toPayee$ = this.store.select(selectPayeeAccount);
            /**
             * Stream of transfer amount
             */
            this.amount$ = this.store.select(selectAmount);
            /**
             * Boolean flag for the confirmation modal
             */
            this.isModalOpen$ = this.store.select(selectIsModalOpen);
            /**
             * Stream of touched fields.
             */
            this.touchedFields$ = this.store.select(selectTouchedFields);
            /**
             * Stream of Element selector to be focused.
             */
            this.focusElement$ = this.store.select(selectFocusElement);
            /**
             * Boolean flag for transfer order state loading
             */
            this.paymentOrderCallState$ = this.store.select(selectTransferOrderCallState);
        }
        /**
         * Method to set initial accounts after fetching
         */
        QuickTransferStoreService.prototype.fetchAccounts = function () {
            this.store.dispatch(accountsFetch());
        };
        /**
         * Method to set initial external accounts after fetching
         */
        QuickTransferStoreService.prototype.fetchExtAccounts = function () {
            this.store.dispatch(externalAccountsFetch());
        };
        /**
         * Method to set initial contacts after fetching
         */
        QuickTransferStoreService.prototype.fetchContacts = function () {
            this.store.dispatch(contactsFetch());
        };
        /**
         * Method to set initial contacts after fetching
         */
        QuickTransferStoreService.prototype.sendTranferOrder = function (reqData) {
            this.store.dispatch(sendTransferOrder({ reqData: reqData }));
        };
        /**
         * Method to set initial accounts after fetching
         */
        QuickTransferStoreService.prototype.setView = function (view, focus) {
            this.store.dispatch(openView({ view: view, focus: focus }));
        };
        /**
         * Method to set toPayee for account
         */
        QuickTransferStoreService.prototype.setPayee = function (id) {
            this.store.dispatch(setPayeeAccount({ id: id }));
        };
        /**
         * Method to set initial accounts after fetching
         */
        QuickTransferStoreService.prototype.selectFromAccount = function (accountId) {
            this.store.dispatch(setFromAccount({ accountId: accountId }));
        };
        /**
         * Method to set transfer amount
         */
        QuickTransferStoreService.prototype.setAmount = function (_a) {
            var amount = _a.amount, defaultCurrency = _a.defaultCurrency;
            this.store.dispatch(setAmount({ amount: amount, defaultCurrency: defaultCurrency }));
        };
        /**
         * Method to open/close confirmation modal
         */
        QuickTransferStoreService.prototype.setModalOpen = function (isOpen) {
            this.store.dispatch(setModalOpen({ isOpen: isOpen }));
        };
        /**
         * Method to set form submitted
         */
        QuickTransferStoreService.prototype.setTouchedField = function (fieldName) {
            this.store.dispatch(setFieldTouched({ fieldName: fieldName }));
        };
        /**
         * Method to reset the widget
         */
        QuickTransferStoreService.prototype.reset = function (focus) {
            this.store.dispatch(resetWidget({ focus: focus }));
        };
        /**
         * Method to set form submitted
         */
        QuickTransferStoreService.prototype.resetFocus = function () {
            this.store.dispatch(resetFocus());
        };
        /**
         * Method to pass default currency into the store
         */
        QuickTransferStoreService.prototype.updateDefaultCurrency = function (currency) {
            this.store.dispatch(setDefaultCurrency({ currency: currency }));
        };
        return QuickTransferStoreService;
    }());
    /** @nocollapse */ QuickTransferStoreService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferStoreService, deps: [{ token: i1__namespace.Store }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ QuickTransferStoreService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferStoreService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferStoreService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.Store }]; } });

    var BaseAccountSelectorComponent = /** @class */ (function () {
        function BaseAccountSelectorComponent(store) {
            this.store = store;
            /**
             * Stream of accountsCallState
             */
            this.accountsCallState$ = this.store.accountsCallState$;
            /**
             * Enum for loadingstate
             */
            this.loadingstate = LoadingState;
            /**
             * Stream of extAccountsCallState
             */
            this.extAccountsCallState$ = this.store.extAccountsCallState$;
        }
        /**
         * Method to navigate back to the main Form
         */
        BaseAccountSelectorComponent.prototype.backToForm = function (fromSelector) {
            this.store.setView(exports.ViewState.FORM, fromSelector);
        };
        /**
         * Method to dispatch store action for fetching the accounts
         */
        BaseAccountSelectorComponent.prototype.getAccounts = function () {
            this.store.fetchAccounts();
        };
        /**
         * Method to dispatch store action for fetching external accounts
         */
        BaseAccountSelectorComponent.prototype.getExtAccounts = function () {
            this.store.fetchExtAccounts();
        };
        return BaseAccountSelectorComponent;
    }());
    /** @nocollapse */ BaseAccountSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseAccountSelectorComponent, deps: [{ token: QuickTransferStoreService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BaseAccountSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BaseAccountSelectorComponent, selector: "ng-component", inputs: { config: "config" }, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseAccountSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                    }]
            }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { config: [{
                    type: i0.Input
                }] } });

    var QuickTransferAccountsComponent = /** @class */ (function () {
        function QuickTransferAccountsComponent() {
            /**
             * Output to inform which account or contact is selected
             */
            this.select = new i0.EventEmitter();
        }
        /**
         * Emit event to inform parent with the picked account id
         *
         * @param id
         */
        QuickTransferAccountsComponent.prototype.pick = function (id) {
            this.select.emit(id);
        };
        return QuickTransferAccountsComponent;
    }());
    /** @nocollapse */ QuickTransferAccountsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferAccountsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferAccountsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: { arrangements: "arrangements", selected: "selected", selectedCounterPartyAccount: "selectedCounterPartyAccount", config: "config" }, outputs: { select: "select" }, ngImport: i0__namespace, template: "<button\n  bbButton\n  color=\"unstyled\"\n  *ngFor=\"let arrangement of arrangements\"\n  class=\"bb-quick-transfer__product-item bb-stack\"\n  [class.bb-quick-transfer--selected-bg]=\"arrangement.uuid === selected\"\n  (click)=\"pick(arrangement.uuid)\"\n  [disabled]=\"arrangement.uuid === selectedCounterPartyAccount\"\n>\n  <bb-product-item-basic-account-ui\n    [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n    [title]=\"arrangement.name\"\n    [amount]=\"arrangement?.balance\"\n    [productNumber]=\"arrangement.number\"\n    [currency]=\"arrangement?.currency\"\n    [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n    [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n    [active]=\"false\"\n    [class.bb-quick-transfer--disabled]=\"arrangement.uuid === selectedCounterPartyAccount\"\n  ></bb-product-item-basic-account-ui>\n</button>\n", components: [{ type: i1__namespace$1.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }], directives: [{ type: i9__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferAccountsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-accounts-ui',
                        templateUrl: './quick-transfer-accounts.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { arrangements: [{
                    type: i0.Input
                }], selected: [{
                    type: i0.Input
                }], selectedCounterPartyAccount: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], select: [{
                    type: i0.Output
                }] } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var TO_ACCOUNT = '[data-role="select-payee-button"] button';
    var FROM_ACCOUNT = '[data-role="select-from-button"] button';

    /**
     * Get params from all router-outlet scopes
     */
    function getRouteParams(route) {
        var e_1, _a;
        var params = route.snapshot.params;
        params = Object.assign(Object.assign({}, route.snapshot.queryParams), params);
        if (route.children) {
            try {
                for (var _b = __values(route.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var r = _c.value;
                    params = Object.assign(Object.assign({}, getRouteParams(r)), params);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return params;
    }
    /** Amount value should be positive value **/
    function nonZeroValidator(control) {
        if (!control.value || Number(control.value) <= 0) {
            return { nonZero: true };
        }
        else {
            // eslint-disable-next-line no-null/no-null
            return null;
        }
    }
    function generateId() {
        return Math.floor(Math.random() * Date.now()).toString();
    }

    var QuickTransferCompleteComponent = /** @class */ (function () {
        function QuickTransferCompleteComponent(store) {
            this.store = store;
            this.id = generateId();
            /**
             * unique time to reload animated svg everytime
             */
            this.timestamp = new Date().getTime();
            /**
             * Stream of transfer amount
             */
            this.amount$ = this.store.amount$;
            /**
             * Stream of toPayee
             */
            this.toPayee$ = this.store.toPayee$;
            /**
             * Stream of paymentOrderCallState
             */
            this.paymentOrderCallState$ = this.store.paymentOrderCallState$.pipe(operators.map(function (state) {
                if (state.error) {
                    var error = state.error;
                    var cancelTransactionSigningMessage = "Your Transfer Has Been Cancelled.";
                    var defaultErrorMessage = "Oops, something went wrong!";
                    var transactionSigningCancelErrorText = 'rejected_by_user';
                    var message = error.statusText === transactionSigningCancelErrorText
                        ? $localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":@@quick-transfer.cancel-transaction-signing.fail-message:", ""], [":@@quick-transfer.cancel-transaction-signing.fail-message:", ""])), cancelTransactionSigningMessage) : $localize(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([":@@quick-transfer.complete.fail-message:", ""], [":@@quick-transfer.complete.fail-message:", ""])), defaultErrorMessage);
                    return Object.assign(Object.assign({}, error), { message: message });
                }
                return state;
            }));
            /**
             * Enum for loadingstate
             */
            this.loadingstate = LoadingState;
        }
        QuickTransferCompleteComponent.prototype.ngAfterViewInit = function () {
            this.doneButton.nativeElement.focus();
        };
        /**
         * Method to call resetWidget
         */
        QuickTransferCompleteComponent.prototype.restart = function () {
            this.store.reset(FROM_ACCOUNT);
        };
        /**
         * Method to get back to form for trying transfer again
         */
        QuickTransferCompleteComponent.prototype.tryAgain = function () {
            this.store.setView(exports.ViewState.FORM, FROM_ACCOUNT);
        };
        return QuickTransferCompleteComponent;
    }());
    /** @nocollapse */ QuickTransferCompleteComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferCompleteComponent, deps: [{ token: QuickTransferStoreService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferCompleteComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferCompleteComponent, selector: "bb-quick-transfer-complete-ui", inputs: { successImg: "successImg", successImgNoMotion: "successImgNoMotion", config: "config" }, viewQueries: [{ propertyName: "doneButton", first: true, predicate: ["done"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"bb-quick-transfer__complete\">\n  <ng-container *ngIf=\"(paymentOrderCallState$ | async) === loadingstate.LOADED; else paymentOrderFail\">\n    <div\n      role=\"dialog\"\n      attr.aria-describedby=\"payment-success-img-{{ id }} payment-success-title-{{ id }} payment-success-description-{{\n        id\n      }}\"\n    >\n      <div class=\"bb-text-align-right bb-block\">\n        <button\n          bbButton\n          color=\"unstyled\"\n          class=\"btn-unstyled--focusable\"\n          (click)=\"restart()\"\n          data-role=\"clear-icon-button\"\n          aria-label=\"close transfer\"\n          i18-aria-label=\"Close transfer|Text for close transfer@@quick-transfer.complete.close.button\"\n        >\n          <bb-icon-ui name=\"clear\" size=\"lg\"></bb-icon-ui>\n        </button>\n      </div>\n      <div class=\"bb-text-align-center flex-fill bb-block bb-block--lg\">\n        <picture>\n          <source srcset=\"{{ successImgNoMotion }}\" media=\"(prefers-reduced-motion: reduce)\" />\n          <img\n            id=\"payment-success-img-{{ id }}\"\n            srcset=\"{{ successImg + '?' + timestamp }}\"\n            alt=\"Transfer succeeded!\"\n            i18n-alt=\"Transfer succeeded|Text for transfer succeeded@@quick-transfer.complete.transfer-succeeded\"\n            data-role=\"transfer-success-anim\"\n            class=\"img-fluid\"\n          />\n        </picture>\n        <bb-header-ui\n          id=\"payment-success-title-{{ id }}\"\n          headingClasses=\"bb-text-semi-bold h5\"\n          headingType=\"h3\"\n          heading=\"Well done!\"\n          i18n-heading=\"Well Done!|Text for well done@@quick-transfer.complete.well-done\"\n        ></bb-header-ui>\n        <span\n          class=\"bb-text-support bb-subtitle\"\n          *ngIf=\"amount$ | async as amount\"\n          id=\"payment-success-description-{{ id }}\"\n          ><span i18n=\"Success Transfer|Text for success transfer@@quick-transfer.complete.success-message\"\n            >You just transferred\n          </span>\n          <bb-amount-ui\n            [currency]=\"amount.currency\"\n            [amount]=\"amount.amount\"\n            [mapCurrency]=\"config?.uiComponentProps.mapCurrency\"\n            [showPlusSign]=\"false\"\n          ></bb-amount-ui>\n          <span i18n=\"Transfer To|Text for success transfer to@@quick-transfer.complete.success-message-to\"> to </span>\n          <ng-container *ngIf=\"toPayee$ | async as toPayee\"\n            ><span>{{ toPayee.name }}.</span></ng-container\n          >\n        </span>\n      </div>\n      <div class=\"bb-text-align-center bb-block bb-block--sm\">\n        <button\n          bbButton\n          color=\"secondary\"\n          (click)=\"restart()\"\n          i18n=\"Done button|Transfer Done@@quick-transfer.complete.button.transfer-done\"\n          data-role=\"transfer-done\"\n          #done\n        >\n          Done\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #paymentOrderFail>\n  <div role=\"dialog\" attr.aria-describedby=\"payment-error-title-{{ id }} payment-error-description-{{ id }}\">\n    <div class=\"bb-text-align-right bb-block bb-block--xl\">\n      <button\n        bbButton\n        color=\"unstyled\"\n        (click)=\"tryAgain()\"\n        data-role=\"clear-icon-button\"\n        aria-label=\"close transfer\"\n        i18-aria-label=\"Close transfer|Text for close transfer@@quick-transfer.complete.close.button\"\n      >\n        <bb-icon-ui name=\"clear\" size=\"lg\"></bb-icon-ui>\n      </button>\n    </div>\n    <div\n      class=\"bb-text-align-center flex-fill bb-block bb-block--xl\"\n      data-role=\"transfer-fail-message\"\n      *ngIf=\"paymentOrderCallState$ | async as errorState\"\n    >\n      <bb-icon-ui\n        color=\"danger\"\n        class=\"bb-quick-transfer__fail-icon bb-block bb-block--md\"\n        name=\"error-outline\"\n        size=\"xxl\"\n        data-role=\"complete-error-outline\"\n      ></bb-icon-ui>\n\n      <bb-header-ui\n        id=\"payment-error-title-{{ id }}\"\n        headingClasses=\"bb-text-semi-bold h5\"\n        headingType=\"h3\"\n        [heading]=\"errorState.message\"\n      ></bb-header-ui>\n      <span\n        id=\"payment-error-description-{{ id }}\"\n        class=\"bb-text-support bb-subtitle\"\n        i18n=\"Transfer Failed Sub-Message|Extra Text for the failed transfer@@quick-transfer.complete.fail-sub.message\"\n        >Our system was unable to process your transfer at the moment.</span\n      >\n    </div>\n    <div class=\"bb-text-align-center bb-block bb-block--sm\">\n      <button\n        bbButton\n        color=\"secondary\"\n        i18n=\"Try again button|Transfer Fail@@quick-transfer.complete.button.try-again\"\n        data-role=\"transfer-try-again-button\"\n        (click)=\"tryAgain()\"\n        #done\n      >\n        Try again\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i9__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i9__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferCompleteComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-complete-ui',
                        templateUrl: './quick-transfer-complete.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { successImg: [{
                    type: i0.Input
                }], successImgNoMotion: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], doneButton: [{
                    type: i0.ViewChild,
                    args: ['done']
                }] } });
    var templateObject_1$1, templateObject_2$1;

    exports.QuickTransferProductKinds = void 0;
    (function (QuickTransferProductKinds) {
        QuickTransferProductKinds["currentAccount"] = "Current Account";
        QuickTransferProductKinds["savingsAccount"] = "Savings Account";
        QuickTransferProductKinds["creditCard"] = "Credit Card";
        QuickTransferProductKinds["loanAccount"] = "Loan";
        QuickTransferProductKinds["connectedAccounts"] = "Connected Account";
        QuickTransferProductKinds["contacts"] = "Contact";
    })(exports.QuickTransferProductKinds || (exports.QuickTransferProductKinds = {}));

    var getCurrentDate = function () { return new Date().toISOString().slice(0, 10); };
    var mapPaymentData = function (fromAccount, toAccount, amount, paymentTypes) {
        var connectedAccounts = exports.QuickTransferProductKinds.connectedAccounts, contacts = exports.QuickTransferProductKinds.contacts;
        var _fromAccount = fromAccount.productKindName === connectedAccounts ? toAccount : fromAccount;
        var _toAccount = fromAccount.productKindName === connectedAccounts ? fromAccount : toAccount;
        var _role = fromAccount.productKindName === connectedAccounts ? i4$1.InvolvedPartyRole.DEBTOR : i4$1.InvolvedPartyRole.CREDITOR;
        function getPaymentType() {
            switch (_toAccount.productKindName) {
                case connectedAccounts:
                    return paymentTypes.external;
                case contacts:
                    return paymentTypes.contact;
                default:
                    return paymentTypes.internal;
            }
        }
        function getScheme() {
            switch (_toAccount.productKindName) {
                case connectedAccounts:
                    return i4$1.SchemeNames.EXTERNALID;
                case contacts:
                    return i4$1.SchemeNames.BBAN;
                default:
                    return i4$1.SchemeNames.ID;
            }
        }
        var originatorAccount = {
            identification: {
                identification: _fromAccount.uuid,
                schemeName: i4$1.SchemeNames.ID,
            },
        };
        var identification = {
            identification: _toAccount.productKindName === contacts ? _toAccount.number : _toAccount.uuid,
            schemeName: getScheme(),
        };
        var transferTransactionInformation = {
            instructedAmount: {
                amount: amount.amount,
                currencyCode: amount.currency,
            },
            counterparty: {
                name: _toAccount.name,
                role: _role,
            },
            counterpartyAccount: Object.assign({ identification: identification }, (_toAccount.productKindName === contacts && {
                selectedContact: { contactId: _toAccount.uuid, accountId: '' },
            })),
        };
        return {
            originatorAccount: originatorAccount,
            requestedExecutionDate: getCurrentDate(),
            paymentType: getPaymentType(),
            transferTransactionInformation: transferTransactionInformation,
        };
    };

    var QuickTransferConfirmationModalComponent = /** @class */ (function () {
        function QuickTransferConfirmationModalComponent(store) {
            this.store = store;
            /**
             * Stream of toPayee
             */
            this.toPayee$ = this.store.toPayee$;
            /**
             * Stream of fromAccount
             */
            this.fromAccount$ = this.store.fromAccount$;
            /**
             * Stream of transfer amount
             */
            this.amount$ = this.store.amount$;
            /**
             * Stream of isModalOpen
             */
            this.isOpen$ = this.store.isModalOpen$;
            /**
             * Stream of loading
             */
            this.paymentOrderCallState$ = this.store.paymentOrderCallState$;
            /**
             * Enum for loadingstate
             */
            this.loadingstate = LoadingState;
            /**
             * Enum for current View
             */
            this.viewState = exports.ViewState;
        }
        /**
         * close the modal
         */
        QuickTransferConfirmationModalComponent.prototype.closeModal = function () {
            this.store.setModalOpen(false);
        };
        /**
         * close the modal
         */
        QuickTransferConfirmationModalComponent.prototype.handleConfirm = function () {
            var _this = this;
            this.subscriptions$ = rxjs.combineLatest([this.fromAccount$, this.toPayee$, this.amount$])
                .pipe(operators.take(1))
                .subscribe(function (_a) {
                var _b = __read(_a, 3), fromAccount = _b[0], toPayee = _b[1], amount = _b[2];
                if (fromAccount && toPayee && amount) {
                    var postData = mapPaymentData(fromAccount, toPayee, amount, _this.paymentTypes || {});
                    _this.store.sendTranferOrder(postData);
                }
            });
        };
        QuickTransferConfirmationModalComponent.prototype.ngOnDestroy = function () {
            if (this.subscriptions$) {
                this.subscriptions$.unsubscribe();
            }
        };
        return QuickTransferConfirmationModalComponent;
    }());
    /** @nocollapse */ QuickTransferConfirmationModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferConfirmationModalComponent, deps: [{ token: QuickTransferStoreService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferConfirmationModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferConfirmationModalComponent, selector: "bb-quick-transfer-confirmation-modal-ui", inputs: { paymentTypes: "paymentTypes", config: "config" }, ngImport: i0__namespace, template: "<bb-modal-ui\n  class=\"bb-quick-transfer__modal\"\n  [isOpen]=\"isOpen$ | async\"\n  (cancel)=\"closeModal()\"\n  (confirm)=\"handleConfirm()\"\n>\n  <bb-modal-header-ui [title]=\"config?.titles?.[viewState.FORM]\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-block bb-block--md\" *ngIf=\"amount$ | async as amount\" data-role=\"quick-transfer-review-amount\">\n        <label\n          class=\"bb-block bb-block--xs font-weight-normal bb-text-support bb-subtitle\"\n          i18n=\"Amount label|Label for transfer amount@@quick-transfer.confirmation-modal.amount-label\"\n          >Amount</label\n        ><br />\n        <bb-amount-ui\n          data-role=\"confirmation-amount\"\n          class=\"bb-highlight\"\n          [currency]=\"amount.currency\"\n          [amount]=\"amount.amount\"\n          [mapCurrency]=\"true\"\n          [showPlusSign]=\"false\"\n        ></bb-amount-ui>\n      </div>\n      <div class=\"bb-stack\">\n        <div\n          class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--spacing-lg bb-quick-transfer__modal-from bb-stack__item--fill\"\n          *ngIf=\"fromAccount$ | async as fromAccount\"\n        >\n          <div class=\"bb-quick-transfer__modal-wrap\">\n            <label\n              class=\"bb-text-support bb-subtitle font-weight-normal bb-block bb-block--xs\"\n              i18n=\"\n                From account label|Label for account to be transferred\n                from@@quick-transfer.confirmation-modal.from-label\"\n              >From</label\n            >\n            <div>\n              <bb-product-item-basic-account-ui\n                data-role=\"confirmation-from-account\"\n                [title]=\"fromAccount.name\"\n                [productNumber]=\"fromAccount.number\"\n                [amount]=\"fromAccount?.balance\"\n                [currency]=\"fromAccount?.currency\"\n                [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n                [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n                [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n                [active]=\"false\"\n              ></bb-product-item-basic-account-ui>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--spacing-lg\" aria-hidden=\"true\">\n          <bb-icon-ui name=\"arrow-forward\" size=\"md\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--fill\"\n          *ngIf=\"toPayee$ | async as toAccount\"\n        >\n          <div class=\"bb-quick-transfer__modal-wrap\">\n            <label\n              class=\"bb-text-support bb-subtitle font-weight-normal bb-block bb-block--xs\"\n              i18n=\"To account label|Label for account to be transferred to@@quick-transfer.confirmation-modal.to-label\"\n              >To</label\n            >\n            <div>\n              <bb-product-item-basic-account-ui\n                data-role=\"confirmation-to-account\"\n                [title]=\"toAccount.name\"\n                [productNumber]=\"toAccount.number\"\n                [amount]=\"toAccount?.balance\"\n                [currency]=\"toAccount?.currency\"\n                [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n                [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n                [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n                [active]=\"false\"\n              ></bb-product-item-basic-account-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          (click)=\"handleConfirm()\"\n          i18n=\"Confirm button|Button for to confirm transfer@@quick-transfer.confirmation-modal.confirm\"\n          data-role=\"modal-confirm-button\"\n          [isLoading]=\"(paymentOrderCallState$ | async) === loadingstate.LOADING\"\n        >\n          Confirm transfer\n        </bb-load-button-ui>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeModal()\"\n          [disabled]=\"(paymentOrderCallState$ | async) === loadingstate.LOADING\"\n        >\n          <span\n            i18n=\"Cancel button|Button for to cancel transfer confirmation@@quick-transfer.confirmation-modal.cancel\"\n            >Cancel</span\n          >\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i2__namespace$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i2__namespace$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2__namespace$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i4__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1__namespace$1.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i6__namespace.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i2__namespace$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i9__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i9__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferConfirmationModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-confirmation-modal-ui',
                        templateUrl: './quick-transfer-confirmation-modal.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { paymentTypes: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }] } });

    var CustomProductSelectorComponent = /** @class */ (function () {
        function CustomProductSelectorComponent(parentFormControl) {
            this.parentFormControl = parentFormControl;
            this.open = new i0.EventEmitter();
            /**
             * parent touched state
             */
            this.touched = false;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            if (this.parentFormControl) {
                this.parentFormControl.valueAccessor = this;
            }
        }
        CustomProductSelectorComponent.prototype.writeValue = function (model) {
            if (!model) {
                return;
            }
        };
        CustomProductSelectorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CustomProductSelectorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        CustomProductSelectorComponent.prototype.markAsTouched = function () {
            this.onTouched();
        };
        /**
         * Method to open from account selector
         */
        CustomProductSelectorComponent.prototype.openAccountSelectorView = function () {
            this.open.emit(true);
        };
        return CustomProductSelectorComponent;
    }());
    /** @nocollapse */ CustomProductSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomProductSelectorComponent, deps: [{ token: i2__namespace$2.NgControl, optional: true, self: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CustomProductSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CustomProductSelectorComponent, selector: "bb-custom-product-selector", inputs: { emptyLabel: "emptyLabel", account: "account", touched: "touched", ariaDescribedby: ["aria-describedby", "ariaDescribedby"] }, outputs: { open: "open" }, ngImport: i0__namespace, template: "<button\n  bbButton\n  color=\"unstyled\"\n  [class.border-danger]=\"touched && parentFormControl?.invalid\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  class=\"bb-stack form-control bb-quick-transfer-selector-field\"\n  (click)=\"openAccountSelectorView()\"\n>\n  <span\n    class=\"bb-stack__item bb-stack__item--fill bb-text-semi-bold bb-ellipsis--single-line\"\n    *ngIf=\"account; else accountTemplate\"\n    >{{ account.name }}</span\n  >\n  <ng-template #accountTemplate>\n    <span class=\"bb-stack__item bb-stack__item--fill bb-text-support\">{{ emptyLabel }}</span>\n  </ng-template>\n  <bb-icon-ui name=\"angle-right\" cropped class=\"bb-text-support bb-stack__item\"></bb-icon-ui>\n</button>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomProductSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-custom-product-selector',
                        templateUrl: './custom-product-selector.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i2__namespace$2.NgControl, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Self
                        }] }];
        }, propDecorators: { open: [{
                    type: i0.Output
                }], emptyLabel: [{
                    type: i0.Input
                }], account: [{
                    type: i0.Input
                }], touched: [{
                    type: i0.Input
                }], ariaDescribedby: [{
                    type: i0.Input,
                    args: ['aria-describedby']
                }] } });

    var QuickTransferValidationMessageComponent = /** @class */ (function () {
        function QuickTransferValidationMessageComponent() {
        }
        QuickTransferValidationMessageComponent.prototype.ngOnInit = function () {
            this.requiredMessage = this.getValidationMessage('required');
        };
        QuickTransferValidationMessageComponent.prototype.getValidationMessage = function (error) {
            var _this = this;
            var _a;
            var validation = (_a = this.validationMessages) === null || _a === void 0 ? void 0 : _a.find(function (msg) { var _a, _b; return !!((_b = (_a = _this.control) === null || _a === void 0 ? void 0 : _a.errors) === null || _b === void 0 ? void 0 : _b[error || msg.name]); });
            return (validation === null || validation === void 0 ? void 0 : validation.message) || '';
        };
        return QuickTransferValidationMessageComponent;
    }());
    /** @nocollapse */ QuickTransferValidationMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferValidationMessageComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferValidationMessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferValidationMessageComponent, selector: "bb-quick-transfer-validation-message", inputs: { control: "control", validationMessages: "validationMessages", id: "id" }, ngImport: i0__namespace, template: "<bb-input-validation-message-ui\n  data-role=\"input-error\"\n  *ngIf=\"control?.touched && control?.invalid\"\n  [showErrors]=\"control?.touched && control?.invalid\"\n  [@fadeSlideInOut]\n>\n  <ng-container *ngIf=\"control?.errors?.['required']; else invalidError\">\n    <span data-role=\"required-error\" [attr.id]=\"id\" *ngIf=\"requiredMessage\">\n      {{ requiredMessage }}\n    </span>\n  </ng-container>\n\n  <ng-template #invalidError>\n    <span data-role=\"required-error\" [attr.id]=\"id\" *ngIf=\"getValidationMessage() as validationMessage\">\n      {{ validationMessage }}</span\n    >\n  </ng-template>\n</bb-input-validation-message-ui>\n", components: [{ type: i1__namespace$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i9__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [util.fadeSlideAnimation] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferValidationMessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-validation-message',
                        templateUrl: './validation-message.component.html',
                        animations: [util.fadeSlideAnimation],
                    }]
            }], propDecorators: { control: [{
                    type: i0.Input
                }], validationMessages: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }] } });

    var QuickTransferFormComponent = /** @class */ (function () {
        function QuickTransferFormComponent(store, formBuilder, locale) {
            this.store = store;
            this.formBuilder = formBuilder;
            this.locale = locale;
            /**
             * Stream of toPayee
             */
            this.toPayee$ = this.store.toPayee$;
            /**
             * Stream of fromAccount
             */
            this.fromAccount$ = this.store.fromAccount$;
            /**
             * Stream of amount
             */
            this.amount$ = this.store.amount$;
            /**
             * Stream of touchedFields
             */
            this.touchedFields$ = this.store.touchedFields$;
            /**
             * Enum for current View
             */
            this.viewState = exports.ViewState;
            /**
             * unique key used for ids
             */
            this.id = new Date().getTime();
            /**
             * Stream of the current view
             */
            this.currentView$ = this.store.currentView$;
            this.destroy$ = new rxjs.Subject();
            this.decimalSeparator = i9.getLocaleNumberSymbol(this.locale, i9.NumberSymbol.CurrencyDecimal);
            this.format = {
                groupSeparator: '',
                decimalSeparator: this.decimalSeparator,
                groupSize: 3,
            };
        }
        Object.defineProperty(QuickTransferFormComponent.prototype, "amountConfig", {
            /**
             * Stream of the current view
             */
            get: function () {
                var _a;
                return (_a = this.config) === null || _a === void 0 ? void 0 : _a.fields.amount;
            },
            enumerable: false,
            configurable: true
        });
        QuickTransferFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b;
            this.initializeForm();
            (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('amountGroup.amount')) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroy$)).subscribe(function (change) {
                _this.storeAmountValue(change);
            });
            this.touchedFields$.pipe(operators.take(1)).subscribe(function (fields) {
                if (fields === null || fields === void 0 ? void 0 : fields.length) {
                    fields.forEach(function (field) {
                        var _a, _b;
                        (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get(field)) === null || _b === void 0 ? void 0 : _b.markAsTouched();
                    });
                }
            });
            //Set Initial form data from store
            rxjs.combineLatest([
                this.amount$.pipe(operators.take(1)),
                this.toPayee$.pipe(operators.take(1)),
                this.fromAccount$.pipe(operators.distinctUntilChanged()), // To have account preselected by route params
            ])
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (_d) {
                var _e = __read(_d, 3), amount = _e[0], toAccount = _e[1], fromAccount = _e[2];
                var _a, _b;
                var amountVal = amount === null || amount === void 0 ? void 0 : amount.amount;
                (_a = _this.form) === null || _a === void 0 ? void 0 : _a.patchValue({
                    amountGroup: {
                        amount: amountVal ? new BigNumber__default["default"](amountVal).toFormat(_this.format) : '',
                        currency: (amount === null || amount === void 0 ? void 0 : amount.currency) || ((_b = _this.amountConfig) === null || _b === void 0 ? void 0 : _b.initialCurrency),
                    },
                    toAccount: toAccount,
                    fromAccount: fromAccount,
                });
            });
        };
        QuickTransferFormComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.store.focusElement$.pipe(operators.distinctUntilChanged(), operators.filter(Boolean), operators.takeUntil(this.destroy$)).subscribe(function (el) {
                var focusElement = _this.formEl.nativeElement.querySelector(el);
                if (focusElement) {
                    focusElement.focus({ preventScroll: true });
                    _this.store.resetFocus();
                }
            });
            this.amount$
                .pipe(operators.filter(function (amount) { return !amount; }), operators.take(1))
                .subscribe(function () {
                var _a, _b, _c;
                (_b = (_a = _this.form) === null || _a === void 0 ? void 0 : _a.get('amountGroup.amount')) === null || _b === void 0 ? void 0 : _b.patchValue(' ');
                (_c = _this.form) === null || _c === void 0 ? void 0 : _c.reset();
            });
        };
        QuickTransferFormComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        /**
         * Method to open from account selector
         */
        QuickTransferFormComponent.prototype.openFromAccount = function () {
            this.store.setView(exports.ViewState.FROM);
            this.store.setTouchedField('fromAccount');
        };
        /**
         * Method to open to account selector
         */
        QuickTransferFormComponent.prototype.openPayeeAccount = function () {
            this.store.setView(exports.ViewState.PAYEE);
            this.store.setTouchedField('toAccount');
        };
        /**
         * Method to store amount input value
         */
        QuickTransferFormComponent.prototype.storeAmountValue = function (amount) {
            this.store.setAmount({ amount: amount === null || amount === void 0 ? void 0 : amount.replace(this.decimalSeparator, '.') });
        };
        /**
         * Method to handle transfer
         */
        QuickTransferFormComponent.prototype.openConfirmation = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var currentView;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, this.currentView$.pipe(operators.first()).toPromise()];
                        case 1:
                            currentView = _d.sent();
                            if (currentView === exports.ViewState.FORM && ((_a = this.form) === null || _a === void 0 ? void 0 : _a.valid)) {
                                this.storeAmountValue(this.form.value.amountGroup.amount);
                                this.store.setModalOpen(true);
                            }
                            else {
                                this.setTouched('amountGroup.amount');
                                this.setTouched('fromAccount');
                                this.setTouched('toAccount');
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Method to check field Validity
         */
        QuickTransferFormComponent.prototype.isFieldValid = function (fieldName) {
            var _a;
            var control = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(fieldName);
            return control && (control.valid || control.untouched);
        };
        /**
         * Method to set field as touched
         */
        QuickTransferFormComponent.prototype.setTouched = function (fieldName) {
            var _a;
            var control = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(fieldName);
            if (control) {
                control.markAsTouched();
                this.store.setTouchedField(fieldName);
            }
        };
        QuickTransferFormComponent.prototype.initializeForm = function () {
            var _a;
            var _d = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.fields) || {}, fromAccount = _d.fromAccount, toAccount = _d.toAccount, amount = _d.amount;
            this.form = this.formBuilder.group({
                amountGroup: this.formBuilder.group({
                    amount: ['', (amount === null || amount === void 0 ? void 0 : amount.validators) || [], (amount === null || amount === void 0 ? void 0 : amount.asyncValidators) || []],
                    currency: ['', i2$2.Validators.required],
                }),
                fromAccount: ['', (fromAccount === null || fromAccount === void 0 ? void 0 : fromAccount.validators) || [], (fromAccount === null || fromAccount === void 0 ? void 0 : fromAccount.asyncValidators) || []],
                toAccount: ['', (toAccount === null || toAccount === void 0 ? void 0 : toAccount.validators) || [], (toAccount === null || toAccount === void 0 ? void 0 : toAccount.asyncValidators) || []],
            });
        };
        return QuickTransferFormComponent;
    }());
    /** @nocollapse */ QuickTransferFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferFormComponent, deps: [{ token: QuickTransferStoreService }, { token: i2__namespace$2.FormBuilder }, { token: i0.LOCALE_ID }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferFormComponent, selector: "bb-quick-transfer-form-ui", inputs: { config: "config" }, viewQueries: [{ propertyName: "formEl", first: true, predicate: ["formElement"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"bb-quick-transfer__view bb-quick-transfer__view--form\">\n  <div class=\"bb-block bb-quick-transfer__heading\">\n    <div class=\"bb-stack\">\n      <bb-header-ui\n        [heading]=\"config?.titles?.[viewState.FORM]\"\n        data-role=\"quick-transfer-header\"\n        headingType=\"h2\"\n        headingClasses=\"bb-block bb-block--lg\"\n        class=\"bb-stack__item bb-stack__item--fill\"\n      ></bb-header-ui>\n    </div>\n  </div>\n  <form\n    class=\"bb-quick-transfer__form\"\n    [formGroup]=\"form\"\n    data-role=\"quick-transfer-form\"\n    (ngSubmit)=\"openConfirmation()\"\n    #formElement\n  >\n    <fieldset [disabled]=\"(currentView$ | async) !== viewState.FORM\">\n      <legend class=\"sr-only\" i18n=\"Legend|Quick transfer form legend@@quick-transfer.form.legend\">\n        Quick transfer Form\n      </legend>\n      <div class=\"bb-block bb-block--lg\">\n        <label class=\"bb-label\" data-role=\"from-label\">{{ config?.fields?.fromAccount?.label }}</label>\n        <bb-custom-product-selector\n          [touched]=\"!isFieldValid('fromAccount')\"\n          formControlName=\"fromAccount\"\n          (focusout)=\"setTouched('fromAccount')\"\n          [account]=\"fromAccount$ | async\"\n          (open)=\"openFromAccount()\"\n          data-role=\"select-from-button\"\n          emptyLabel=\"Select your account\"\n          aria-describedby=\"{{ 'fromAccount-errors-' + id }}\"\n          i18n-emptyLabel=\"Select Account|Quick transfer input for account@@quick-transfer.form.from\"\n        ></bb-custom-product-selector>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'fromAccount-errors-' + id }}\"\n          [control]=\"form?.get('fromAccount')\"\n          [validationMessages]=\"config?.fields?.fromAccount?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div class=\"bb-block bb-block--lg\">\n        <label\n          class=\"bb-label\"\n          data-role=\"payee-label\"\n          i18n=\"Input label|Quick transfer input label for beneficiary@@quick-transfer.form.to.label\"\n          >{{ config?.fields?.toAccount?.label }}</label\n        >\n        <bb-custom-product-selector\n          [touched]=\"!isFieldValid('toAccount')\"\n          formControlName=\"toAccount\"\n          (focusout)=\"setTouched('toAccount')\"\n          [account]=\"toPayee$ | async\"\n          (open)=\"openPayeeAccount()\"\n          data-role=\"select-payee-button\"\n          emptyLabel=\"Select beneficiary\"\n          aria-describedby=\"{{ 'toAccount-errors-' + id }}\"\n          i18n-emptyLabel=\"Select beneficiary|Quick transfer input for beneficiary@@quick-transfer.form.to\"\n        ></bb-custom-product-selector>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'toAccount-errors-' + id }}\"\n          [control]=\"form?.get('toAccount')\"\n          [validationMessages]=\"config?.fields?.toAccount?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div\n        class=\"bb-block bb-block--xl\"\n        formGroupName=\"amountGroup\"\n        [class.was-validated]=\"!isFieldValid('amountGroup.amount')\"\n      >\n        <label\n          class=\"bb-label\"\n          for=\"{{ 'amount-' + id }}\"\n          i18n=\"Amount of transfer|Quick transfer input for amount@@quick-transfer.form.amount\"\n          >{{ config?.fields?.amount?.label }}</label\n        >\n        <bb-amount-input-ui\n          formControlName=\"amount\"\n          data-role=\"amount-input\"\n          [id]=\"'amount-' + id\"\n          [autoDecimal]=\"amountConfig?.autoDecimal\"\n          (focusout)=\"setTouched('amountGroup.amount')\"\n          [wrapperClasses]=\"amountConfig?.wrapperClasses\"\n          [mapCurrency]=\"config?.uiComponentProps.mapCurrency\"\n          [currency]=\"(fromAccount$ | async)?.currency || amountConfig?.initialCurrency\"\n          [required]=\"amountConfig?.required\"\n          aria-describedby=\"{{ 'amount-errors-' + id }}\"\n          [placeholder]=\"amountConfig?.placeholder\"\n        ></bb-amount-input-ui>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'amount-errors-' + id }}\"\n          [control]=\"form?.get('amountGroup.amount')\"\n          [validationMessages]=\"amountConfig?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div class=\"bb-block bb-block--sm\">\n        <button\n          bbButton\n          color=\"primary\"\n          data-role=\"open-confirmation\"\n          [block]=\"true\"\n          i18n=\"Approve button|Transfer the amount@@quick-transfer.button.transfer-now\"\n          type=\"submit\"\n        >\n          Transfer Now\n        </button>\n      </div>\n    </fieldset>\n  </form>\n</div>\n", components: [{ type: i3__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: CustomProductSelectorComponent, selector: "bb-custom-product-selector", inputs: ["emptyLabel", "account", "touched", "aria-describedby"], outputs: ["open"] }, { type: QuickTransferValidationMessageComponent, selector: "bb-quick-transfer-validation-message", inputs: ["control", "validationMessages", "id"] }, { type: i6__namespace$1.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i2__namespace$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2__namespace$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2__namespace$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2__namespace$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2__namespace$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i9__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-form-ui',
                        templateUrl: './quick-transfer-form.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: QuickTransferStoreService }, { type: i2__namespace$2.FormBuilder }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }];
        }, propDecorators: { config: [{
                    type: i0.Input
                }], formEl: [{
                    type: i0.ViewChild,
                    args: ['formElement']
                }] } });

    var filterByProductKinds = function (arrangements, productKinds) {
        var _arrangements = arrangements || [];
        return _arrangements.filter(function (arrangement) { return productKinds ? productKinds.includes(arrangement.productKindName) : true; });
    };
    /**
     * @deprecated since version 1.1.0, use `mapItems` instead
     */
    var filterByOtherProps = function (arrangements, filters) {
        var _arrangements = arrangements || [];
        return _arrangements.filter(function (arr) { return filters && filters.length
            ? filters.every(function (_a) {
                var key = _a.key, value = _a.value;
                return value.some(function (v) { return arr.defaultRecord && v === arr.defaultRecord[key]; });
            })
            : true; });
    };
    var filterByDisabledCombinations = function (arrangements, counterPartyAccount, disabledCombinations, location) {
        if (!arrangements)
            return [];
        var combinations = disabledCombinations || [];
        // Disable a transfer from connected to connected and connected to contacts account by default
        combinations.push({
            from: exports.QuickTransferProductKinds.connectedAccounts,
            to: exports.QuickTransferProductKinds.connectedAccounts,
        });
        combinations.push({ from: exports.QuickTransferProductKinds.connectedAccounts, to: exports.QuickTransferProductKinds.contacts });
        var disabledProductKinds = combinations
            .filter(function (i) {
            return location === Location.FROM
                ? i.to === (counterPartyAccount === null || counterPartyAccount === void 0 ? void 0 : counterPartyAccount.productKindName)
                : i.from === (counterPartyAccount === null || counterPartyAccount === void 0 ? void 0 : counterPartyAccount.productKindName);
        })
            .map(function (i) { return (location === Location.FROM ? i.from : i.to); });
        return arrangements.filter(function (arr) { return !disabledProductKinds.includes(arr.productKindName); });
    };

    var QuickTransferFromAccountComponent = /** @class */ (function (_super) {
        __extends(QuickTransferFromAccountComponent, _super);
        function QuickTransferFromAccountComponent(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            /**
             * Stream of fromAccount
             */
            _this.fromAccountId$ = _this.store.fromAccount$.pipe(operators.filter(Boolean), operators.pluck('uuid'));
            /**
             * Stream of toPayee
             */
            _this.selectedToPayee$ = _this.store.toPayee$.pipe(operators.take(1));
            /**
             * Selector of the to account button to be focused
             */
            _this.fromAccountSelector = FROM_ACCOUNT;
            /**
             * Enum for current View
             */
            _this.viewState = exports.ViewState;
            return _this;
        }
        QuickTransferFromAccountComponent.prototype.ngAfterViewInit = function () {
            this.backbutton.nativeElement.focus({ preventScroll: true });
        };
        /**
         * Method to handle selecting from account
         *
         * @param id
         */
        QuickTransferFromAccountComponent.prototype.handleSelectFrom = function (id) {
            this.store.selectFromAccount(id);
        };
        /**
         * If not yet called the accounts API call it
         */
        QuickTransferFromAccountComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a = this.config || {}, fields = _a.fields, disabledCombinations = _a.disabledCombinations;
            var productKinds = ((fields === null || fields === void 0 ? void 0 : fields.fromAccount) || {}).productKinds;
            rxjs.combineLatest([this.extAccountsCallState$, this.accountsCallState$])
                .pipe(operators.take(1))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), extAccountsState = _b[0], accountsState = _b[1];
                if (extAccountsState === LoadingState.INIT && (productKinds === null || productKinds === void 0 ? void 0 : productKinds.includes(exports.QuickTransferProductKinds.connectedAccounts))) {
                    _this.getExtAccounts();
                }
                if (accountsState === LoadingState.INIT)
                    _this.getAccounts();
            });
            this.accounts$ = this.store.debitAccounts$.pipe(operators.take(1), operators.withLatestFrom(this.selectedToPayee$.pipe(operators.take(1))), operators.map(function (_a) {
                var _b = __read(_a, 2), accounts = _b[0], toPayee = _b[1];
                return filterByDisabledCombinations(accounts, toPayee, disabledCombinations, Location.FROM);
            }));
            this.extAccounts$ = this.store.extAccounts$.pipe(operators.withLatestFrom(this.selectedToPayee$.pipe(operators.take(1))), operators.map(function (_a) {
                var _b = __read(_a, 2), accounts = _b[0], toPayee = _b[1];
                return filterByDisabledCombinations(accounts, toPayee, disabledCombinations, Location.FROM);
            }));
        };
        return QuickTransferFromAccountComponent;
    }(BaseAccountSelectorComponent));
    /** @nocollapse */ QuickTransferFromAccountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferFromAccountComponent, deps: [{ token: QuickTransferStoreService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferFromAccountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferFromAccountComponent, selector: "bb-quick-transfer-from-account-ui", providers: [QuickTransferStoreService], viewQueries: [{ propertyName: "backbutton", first: true, predicate: ["back"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-quick-transfer__view\">\n  <div class=\"bb-quick-transfer__heading bb-stack bb-quick-transfer__heading--border\" data-role=\"from-account-header\">\n    <button\n      (click)=\"backToForm(fromAccountSelector)\"\n      bbButton\n      aria-label=\"back to form\"\n      i18-aria-label=\"Back button|Quick transfer back button@@quick-transfer.fromaccount.back.button\"\n      color=\"unstyled\"\n      class=\"bb-stack__item btn-unstyled--focusable bb-block bb-block--lg\"\n      #back\n    >\n      <bb-icon-ui name=\"arrow-back\"></bb-icon-ui>\n    </button>\n    <bb-header-ui\n      class=\"bb-stack__item\"\n      headingClasses=\"h3 bb-block bb-block--lg\"\n      [heading]=\"config?.titles?.[viewState.FROM]\"\n      headingType=\"h2\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-quick-transfer__tabs-content scrollable-box-content\" data-role=\"from-account\">\n    <ng-container\n      *ngIf=\"{ internal: accountsCallState$ | async, external: extAccountsCallState$ | async } as callStates\"\n    >\n      <ng-container *ngIf=\"callStates.internal && callStates.external\">\n        <ng-container [ngSwitch]=\"true\">\n          <ng-container\n            *ngSwitchCase=\"callStates.internal === loadingstate.LOADING && callStates.external === loadingstate.LOADING\"\n          >\n            <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"!!callStates.internal['error'] && !!callStates.external['error']\">\n            <ng-container *ngTemplateOutlet=\"errorCase\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngIf=\"callStates.internal !== loadingstate.LOADING; else loadingState\">\n              <ng-container *ngIf=\"callStates.internal === loadingstate.LOADED\">\n                <div *ngIf=\"accounts$ | async as accounts\">\n                  <bb-quick-transfer-accounts-ui\n                    data-role=\"internal-accounts\"\n                    [arrangements]=\"accounts\"\n                    (select)=\"handleSelectFrom($event)\"\n                    [selected]=\"fromAccountId$ | async\"\n                    [selectedCounterPartyAccount]=\"(selectedToPayee$ | async)?.uuid\"\n                    [config]=\"config\"\n                  ></bb-quick-transfer-accounts-ui>\n                </div>\n              </ng-container>\n              <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.internal['error']\">\n                <bb-icon-ui\n                  name=\"error-outline\"\n                  size=\"md\"\n                  class=\"bb-stack__item bb-stack__item--align-top\"\n                ></bb-icon-ui>\n                <div class=\"bb-subtitle\">\n                  <span i18n=\"Fetch accounts error|Fetch accounts error@@quick-transfer.fetch-accounts.error-message\">\n                    We could not retrieve data for your internal accounts.</span\n                  >\n                  <br />\n                  <button\n                    bbButton\n                    color=\"link-text\"\n                    data-role=\"reload-accounts\"\n                    (click)=\"getAccounts()\"\n                    i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                  >\n                    Reload\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n\n            <div *ngIf=\"callStates.external !== loadingstate.LOADED || (extAccounts$ | async) as extAccounts\">\n              <h3\n                class=\"bb-subheader bb-text-support bb-quick-transfer__subheader bb-block bb-block--no-margin bb-inline-stack h4\"\n                *ngIf=\"\n                  (extAccounts.length || callStates.external !== loadingstate.LOADED) &&\n                  config?.fields?.fromAccount?.connectedAccountsSubHeader as subHeader\n                \"\n              >\n                <bb-icon-ui name=\"insert-link\" cropped class=\"bb-inline-stack__item--spacing-sm\"></bb-icon-ui>\n                <span\n                  data-role=\"external-accounts-header\"\n                  i18n=\"\n                    Account type subheader|Quick transfer 'connected accounts' type\n                    subheader@@quick-transfer.from.account-type-subheader\"\n                >\n                  {{ subHeader }}\n                </span>\n              </h3>\n              <ng-container *ngIf=\"callStates.external !== loadingstate.LOADING; else loadingState\">\n                <bb-quick-transfer-accounts-ui\n                  data-role=\"external-accounts\"\n                  *ngIf=\"callStates.external === loadingstate.LOADED\"\n                  [arrangements]=\"extAccounts\"\n                  (select)=\"handleSelectFrom($event)\"\n                  [selected]=\"fromAccountId$ | async\"\n                  [config]=\"config\"\n                ></bb-quick-transfer-accounts-ui>\n                <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.external['error']\">\n                  <bb-icon-ui\n                    name=\"error-outline\"\n                    size=\"md\"\n                    class=\"bb-stack__item bb-stack__item--align-top\"\n                  ></bb-icon-ui>\n                  <div class=\"bb-subtitle\">\n                    <span\n                      i18n=\"\n                        Fetch external accounts error|Fetch external accounts\n                        error@@quick-transfer.fetch-external-accounts.error-message\"\n                    >\n                      We could not retrieve data for your external accounts.</span\n                    >\n                    <br />\n                    <button\n                      bbButton\n                      color=\"link-text\"\n                      data-role=\"reload-accounts\"\n                      (click)=\"getExtAccounts()\"\n                      i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                    >\n                      Reload\n                    </button>\n                  </div>\n                </div>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #loadingState let-size=\"$implicit\">\n  <div class=\"bb-loading-indicator\">\n    <bb-loading-indicator-ui [loaderSize]=\"size || 'sm'\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n<ng-template #errorCase>\n  <div class=\"bb-quick-transfer__heading\">\n    <div class=\"bb-state-container\" data-role=\"double-error-state\">\n      <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n      <bb-empty-state-ui\n        title=\"No data retrieved\"\n        class=\"bb-block bb-block--md\"\n        iconClasses=\"\"\n        iconSize=\"xxl\"\n        message=\"We could not retrieve data for your accounts.\"\n        i18n-message=\"Could not retrieve data|Fetch accounts error@@quick-transfer.fetch-data.error-message\"\n        iconModifier=\"error-outline\"\n      ></bb-empty-state-ui>\n      <button\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        (click)=\"getAccounts(); getExtAccounts()\"\n        data-role=\"reload-accounts\"\n        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n      >\n        Reload\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: ["arrangements", "selected", "selectedCounterPartyAccount", "config"], outputs: ["select"] }, { type: i5__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6__namespace$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i9__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i9__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferFromAccountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-from-account-ui',
                        templateUrl: './quick-transfer-from-account.component.html',
                        providers: [QuickTransferStoreService],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { backbutton: [{
                    type: i0.ViewChild,
                    args: ['back']
                }] } });

    var QuickTransferToAccountComponent = /** @class */ (function (_super) {
        __extends(QuickTransferToAccountComponent, _super);
        function QuickTransferToAccountComponent(store) {
            var _this = _super.call(this, store) || this;
            _this.store = store;
            /**
             * Show My Accounts or Contacts tabs, It is My Accounts by default
             */
            _this.selectedTab = 0;
            /**
             * Stream of contacts
             */
            _this.contacts$ = _this.store.contacts$;
            /**
             * Stream of toPayee
             */
            _this.selectedToPayeeId$ = _this.store.toPayee$.pipe(operators.filter(Boolean), operators.pluck('uuid'));
            /**
             * Stream of fromAccount
             */
            _this.selectedFromAccount$ = _this.store.fromAccount$.pipe(operators.take(1));
            /**
             * Stream of contactsCallState
             */
            _this.contactsCallState$ = _this.store.contactsCallState$;
            /**
             * Stream to indicate if contacts are going to be rendered
             */
            _this.renderContacts$ = _this.selectedFromAccount$.pipe(operators.map(function (account) {
                var _a;
                var toAccount = (((_a = _this.config) === null || _a === void 0 ? void 0 : _a.fields) || {}).toAccount;
                var connectedAccounts = exports.QuickTransferProductKinds.connectedAccounts, contacts = exports.QuickTransferProductKinds.contacts;
                var isCounterPartyConnectedAccount = (account === null || account === void 0 ? void 0 : account.productKindName) === connectedAccounts;
                var isContactsSetInConfig = (toAccount === null || toAccount === void 0 ? void 0 : toAccount.productKinds) ? toAccount === null || toAccount === void 0 ? void 0 : toAccount.productKinds.includes(contacts) : true;
                return !isCounterPartyConnectedAccount && isContactsSetInConfig;
            }));
            /**
             * Selector of the to account button to be focused
             */
            _this.toAccountSelector = TO_ACCOUNT;
            /**
             * Enum for current View
             */
            _this.viewState = exports.ViewState;
            return _this;
        }
        /**
         * If not yet called the contacts, accounts and external accounts API call it
         */
        QuickTransferToAccountComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _b = this.config || {}, fields = _b.fields, disabledCombinations = _b.disabledCombinations;
            var productKinds = ((fields === null || fields === void 0 ? void 0 : fields.toAccount) || {}).productKinds;
            rxjs.combineLatest([this.extAccountsCallState$, this.accountsCallState$])
                .pipe(operators.take(1))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), extAccountsState = _c[0], accountsState = _c[1];
                if (extAccountsState === LoadingState.INIT && (productKinds === null || productKinds === void 0 ? void 0 : productKinds.includes(exports.QuickTransferProductKinds.connectedAccounts))) {
                    _this.getExtAccounts();
                }
                if (accountsState === LoadingState.INIT)
                    _this.getAccounts();
            });
            this.accounts$ = this.store.creditAccounts$.pipe(operators.take(1), operators.withLatestFrom(this.selectedFromAccount$), operators.map(function (_b) {
                var _c = __read(_b, 2), accounts = _c[0], fromAccount = _c[1];
                return filterByDisabledCombinations(accounts, fromAccount, disabledCombinations, Location.TO);
            }));
            this.extAccounts$ = this.store.extAccounts$.pipe(operators.withLatestFrom(this.selectedFromAccount$), operators.map(function (_b) {
                var _c = __read(_b, 2), accounts = _c[0], fromAccount = _c[1];
                return filterByDisabledCombinations(accounts, fromAccount, disabledCombinations, Location.TO);
            }));
        };
        QuickTransferToAccountComponent.prototype.ngAfterViewInit = function () {
            this.backbutton.nativeElement.focus({ preventScroll: true });
        };
        /**
         * Method to switch tabs
         *
         * @param ev
         */
        QuickTransferToAccountComponent.prototype.onTabSelect = function (ev) {
            var _this = this;
            this.selectedTab = ev;
            if (ev === 1) {
                this.contactsCallState$
                    .pipe(operators.take(1), operators.filter(function (s) { return s === LoadingState.INIT; }))
                    .subscribe(function () {
                    _this.getContacts();
                });
            }
        };
        /**
         * Method to set payee
         *
         * @param id
         */
        QuickTransferToAccountComponent.prototype.pickPayee = function (id) {
            this.store.setPayee(id);
        };
        /**
         * Method to dispatch store action for fetching contacts
         */
        QuickTransferToAccountComponent.prototype.getContacts = function () {
            this.store.fetchContacts();
        };
        return QuickTransferToAccountComponent;
    }(BaseAccountSelectorComponent));
    /** @nocollapse */ QuickTransferToAccountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferToAccountComponent, deps: [{ token: QuickTransferStoreService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferToAccountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferToAccountComponent, selector: "bb-quick-transfer-to-account-ui", viewQueries: [{ propertyName: "backbutton", first: true, predicate: ["back"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-quick-transfer__view\">\n  <div\n    class=\"bb-quick-transfer__heading bb-stack\"\n    [class.bb-quick-transfer__heading--border]=\"!(renderContacts$ | async)\"\n    data-role=\"to-account-header\"\n  >\n    <button\n      (click)=\"backToForm(toAccountSelector)\"\n      bbButton\n      aria-label=\"back to form\"\n      i18-aria-label=\"Back button|Quick transfer back button@@quick-transfer.to-account.back.button\"\n      color=\"unstyled\"\n      class=\"bb-stack__item btn-unstyled--focusable bb-block bb-block--xs\"\n      [class.bb-stack__item--align-top]=\"!(renderContacts$ | async)\"\n      #back\n    >\n      <bb-icon-ui name=\"arrow-back\"></bb-icon-ui>\n    </button>\n    <bb-header-ui\n      class=\"bb-stack__item\"\n      headingClasses=\"bb-block bb-block--{{ (renderContacts$ | async) ? 'sm' : 'lg' }} h3\"\n      [heading]=\"config?.titles?.[viewState.PAYEE]\"\n      headingType=\"h2\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-quick-transfer__tabs-container\">\n    <bb-tab-group-ui *ngIf=\"renderContacts$ | async\" [initialSelection]=\"0\" (select)=\"onTabSelect($event)\">\n      <bb-tab-ui\n        data-role=\"account-tab-header\"\n        i18n=\"Tab header for to-accounts|Quick transfer 'my accounts' tab header@@quick-transfer.to.tabs.account-header\"\n        >My Accounts</bb-tab-ui\n      >\n      <bb-tab-ui\n        data-role=\"contacts-tab-header\"\n        i18n=\"Tab header for to-contacts|Quick transfer 'contacts' tab header@@quick-transfer.to.tabs.contact-header\"\n        >Contacts</bb-tab-ui\n      >\n    </bb-tab-group-ui>\n    <div class=\"bb-quick-transfer__tabs-content scrollable-box-content\" [@tabsAnimation]=\"selectedTab\">\n      <div *ngIf=\"selectedTab === 0\" data-role=\"quick-transfer-accounts-tab\">\n        <ng-container\n          *ngIf=\"{ internal: accountsCallState$ | async, external: extAccountsCallState$ | async } as callStates\"\n        >\n          <ng-container *ngIf=\"callStates.internal && callStates.external\">\n            <ng-container [ngSwitch]=\"true\">\n              <ng-container\n                *ngSwitchCase=\"\n                  callStates.internal === loadingstate.LOADING && callStates.external === loadingstate.LOADING\n                \"\n              >\n                <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n              </ng-container>\n              <ng-container *ngSwitchCase=\"!!callStates.internal['error'] && !!callStates.external['error']\">\n                <ng-container *ngTemplateOutlet=\"errorCase\"></ng-container>\n              </ng-container>\n              <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"callStates.internal !== loadingstate.LOADING; else loadingState\">\n                  <ng-container *ngIf=\"callStates.internal === loadingstate.LOADED\">\n                    <div *ngIf=\"accounts$ | async as accounts\">\n                      <bb-quick-transfer-accounts-ui\n                        data-role=\"internal-accounts\"\n                        [arrangements]=\"accounts\"\n                        (select)=\"pickPayee($event)\"\n                        [selected]=\"selectedToPayeeId$ | async\"\n                        [selectedCounterPartyAccount]=\"(selectedFromAccount$ | async)?.uuid\"\n                        [config]=\"config\"\n                      ></bb-quick-transfer-accounts-ui>\n                    </div>\n                  </ng-container>\n                  <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.internal['error']\">\n                    <bb-icon-ui\n                      name=\"error-outline\"\n                      size=\"md\"\n                      class=\"bb-stack__item bb-stack__item--align-top\"\n                    ></bb-icon-ui>\n                    <div class=\"bb-subtitle\">\n                      <span\n                        i18n=\"Fetch accounts error|Fetch accounts error@@quick-transfer.fetch-accounts.error-message\"\n                      >\n                        We could not retrieve data for your internal accounts.</span\n                      >\n                      <br />\n                      <button\n                        bbButton\n                        color=\"link-text\"\n                        data-role=\"reload-accounts\"\n                        (click)=\"getAccounts()\"\n                        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                      >\n                        Reload\n                      </button>\n                    </div>\n                  </div>\n                </ng-container>\n\n                <div *ngIf=\"callStates.external !== loadingstate.LOADED || (extAccounts$ | async) as extAccounts\">\n                  <h3\n                    class=\"bb-subheader bb-text-support bb-quick-transfer__subheader bb-block bb-block--no-margin bb-inline-stack\"\n                    *ngIf=\"\n                      (extAccounts.length || callStates.external !== loadingstate.LOADED) &&\n                      config?.fields?.toAccount?.connectedAccountsSubHeader as subHeader\n                    \"\n                  >\n                    <bb-icon-ui name=\"insert-link\" cropped class=\"bb-inline-stack__item--spacing-sm\"></bb-icon-ui>\n                    <span\n                      data-role=\"external-accounts-header\"\n                      i18n=\"\n                        Account type subheader|Quick transfer 'connected accounts' type\n                        subheader@@quick-transfer.to.account-type-subheader\"\n                    >\n                      {{ subHeader }}\n                    </span>\n                  </h3>\n                  <ng-container *ngIf=\"callStates.external !== loadingstate.LOADING; else loadingState\">\n                    <bb-quick-transfer-accounts-ui\n                      data-role=\"external-accounts\"\n                      *ngIf=\"callStates.external === loadingstate.LOADED\"\n                      [arrangements]=\"extAccounts\"\n                      (select)=\"pickPayee($event)\"\n                      [selected]=\"selectedToPayeeId$ | async\"\n                      [config]=\"config\"\n                    ></bb-quick-transfer-accounts-ui>\n                    <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.external['error']\">\n                      <bb-icon-ui\n                        name=\"error-outline\"\n                        size=\"md\"\n                        class=\"bb-stack__item bb-stack__item--align-top\"\n                      ></bb-icon-ui>\n                      <div class=\"bb-subtitle\">\n                        <span\n                          i18n=\"\n                            Fetch external accounts error|Fetch external accounts\n                            error@@quick-transfer.fetch-external-accounts.error-message\"\n                        >\n                          We could not retrieve data for your external accounts.</span\n                        >\n                        <br />\n                        <button\n                          bbButton\n                          color=\"link-text\"\n                          data-role=\"reload-accounts\"\n                          (click)=\"getExtAccounts()\"\n                          i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                        >\n                          Reload\n                        </button>\n                      </div>\n                    </div>\n                  </ng-container>\n                </div>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div *ngIf=\"selectedTab === 1\" data-role=\"quick-transfer-contacts-tab\">\n        <ng-container *ngIf=\"contactsCallState$ | async as contactsCallState\">\n          <ng-container [ngSwitch]=\"true\">\n            <ng-container *ngSwitchCase=\"contactsCallState === loadingstate.LOADED\">\n              <div *ngIf=\"contacts$ | async as contacts\">\n                <bb-quick-transfer-accounts-ui\n                  [arrangements]=\"contacts\"\n                  (select)=\"pickPayee($event)\"\n                  [selected]=\"selectedToPayeeId$ | async\"\n                  [config]=\"config\"\n                ></bb-quick-transfer-accounts-ui>\n              </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"contactsCallState === loadingstate.LOADING\">\n              <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"!!contactsCallState.error\">\n              <div class=\"bb-quick-transfer__heading\">\n                <div class=\"bb-state-container\" data-role=\"contacts-error-state\">\n                  <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n                  <bb-empty-state-ui\n                    title=\"No data retrieved\"\n                    class=\"bb-block bb-block--md\"\n                    iconClasses=\"\"\n                    iconSize=\"xxl\"\n                    message=\"We could not retrieve data for your contacts.\"\n                    i18n-message=\"\n                      Could not retrieve contacts|Fetch contacts error@@quick-transfer.fetch-contacts.error-message\"\n                    iconModifier=\"error-outline\"\n                  ></bb-empty-state-ui>\n                  <button\n                    bbButton\n                    buttonSize=\"sm\"\n                    color=\"primary\"\n                    (click)=\"getContacts()\"\n                    data-role=\"reload-accounts\"\n                    i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                  >\n                    Reload\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #loadingState let-size=\"$implicit\">\n  <div class=\"bb-loading-indicator\">\n    <bb-loading-indicator-ui [loaderSize]=\"size || 'sm'\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n<ng-template #errorCase>\n  <div class=\"bb-quick-transfer__heading\">\n    <div class=\"bb-state-container\" data-role=\"double-error-state\">\n      <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n      <bb-empty-state-ui\n        title=\"No data retrieved\"\n        class=\"bb-block bb-block--md\"\n        iconClasses=\"\"\n        message=\"We could not retrieve data for your accounts.\"\n        i18n-message=\"Could not retrieve data|Fetch accounts error@@quick-transfer.fetch-data.error-message\"\n        iconModifier=\"error-outline\"\n      ></bb-empty-state-ui>\n      <button\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        (click)=\"getAccounts(); getExtAccounts()\"\n        data-role=\"reload-accounts\"\n        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n      >\n        Reload\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3__namespace$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4__namespace$1.TabGroupComponent, selector: "bb-tab-group-ui", inputs: ["initialSelection"], outputs: ["select"] }, { type: i4__namespace$1.TabComponent, selector: "bb-tab-ui" }, { type: QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: ["arrangements", "selected", "selectedCounterPartyAccount", "config"], outputs: ["select"] }, { type: i6__namespace$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i5__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i9__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i9__namespace.AsyncPipe }, animations: [util.tabsAnim], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferToAccountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-to-account-ui',
                        templateUrl: './quick-transfer-to-account.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        animations: [util.tabsAnim],
                    }]
            }], ctorParameters: function () { return [{ type: QuickTransferStoreService }]; }, propDecorators: { backbutton: [{
                    type: i0.ViewChild,
                    args: ['back']
                }] } });

    var timing = '200ms ease-in';
    var distances = {
        normalX: 'translateX(0%)',
        right: 'translateX(100%)',
        left: 'translateX(-100%)',
        normalY: 'translateY(0%)',
        bottom: 'translateY(100%)',
    };
    var slideAnimation = animations.animation([
        animations.style({
            position: 'absolute',
            height: '100%',
            width: '100%',
            transform: '{{from}}',
            display: 'block',
            top: 0,
        }),
        animations.animate(timing, animations.style({ transform: '{{to}}' })),
    ]);
    function slide2D(from, to) {
        return [
            animations.transition(':enter', [
                animations.useAnimation(slideAnimation, {
                    params: { from: from, to: to },
                }),
            ]),
            animations.transition(':leave', [
                animations.useAnimation(slideAnimation, {
                    params: { from: to, to: from },
                }),
            ]),
        ];
    }
    // used to animate account selector view
    var slideLeftAnimation = animations.trigger('slideLeft', slide2D(distances.right, distances.normalX));
    // used to animate the main view "form view"
    var slideRightAnimation = animations.trigger('slideRight', slide2D(distances.left, distances.normalX));
    // used for transition of the success/fail screen
    var slideUpAnimation = animations.trigger('slideUp', slide2D(distances.bottom, distances.normalY));

    var _a;
    var fromAccount = {
        productKinds: [
            exports.QuickTransferProductKinds.savingsAccount,
            exports.QuickTransferProductKinds.currentAccount,
            exports.QuickTransferProductKinds.creditCard,
            exports.QuickTransferProductKinds.loanAccount,
            exports.QuickTransferProductKinds.connectedAccounts,
        ],
        label: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@quick-transfer.form.label:From"], [":@@quick-transfer.form.label:From"]))),
        mapItems: function (accounts) {
            return accounts.filter(function (account) { return ['EUR', 'AED', 'USD'].includes((account === null || account === void 0 ? void 0 : account.currency) || ''); });
        },
        connectedAccountsSubHeader: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@quick-transfer-initiator-connected-acc-subheader:Connected Accounts"], [":@@quick-transfer-initiator-connected-acc-subheader:Connected Accounts"]))),
        validators: [i2$2.Validators.required],
        validationMessages: [
            {
                name: 'required',
                message: $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@quick-transfer-initiator-validation-required:Account is required"], [":@@quick-transfer-initiator-validation-required:Account is required"]))),
            },
        ],
    };
    var toAccount = {
        productKinds: [
            exports.QuickTransferProductKinds.savingsAccount,
            exports.QuickTransferProductKinds.currentAccount,
            exports.QuickTransferProductKinds.creditCard,
            exports.QuickTransferProductKinds.loanAccount,
            exports.QuickTransferProductKinds.connectedAccounts,
            exports.QuickTransferProductKinds.contacts,
        ],
        label: $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@quick-transfer.to.label:To"], [":@@quick-transfer.to.label:To"]))),
        mapContacts: function (contacts) { return contacts.filter(function (contact) { return !!contact.number; }); },
        connectedAccountsSubHeader: $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@quick-transfer-counterparty-connected-acc-subheader:Connected Accounts"], [":@@quick-transfer-counterparty-connected-acc-subheader:Connected Accounts"]))),
        validators: [i2$2.Validators.required],
        validationMessages: [
            {
                name: 'required',
                message: $localize(templateObject_6 || (templateObject_6 = __makeTemplateObject([":@@quick-transfer-counterparty-validation-required:Beneficiary is required"], [":@@quick-transfer-counterparty-validation-required:Beneficiary is required"]))),
            },
        ],
    };
    var amount = {
        initialCurrency: 'USD',
        autoDecimal: true,
        placeholder: '0.00',
        wrapperClasses: 'bb-amount-input__field--large',
        label: $localize(templateObject_7 || (templateObject_7 = __makeTemplateObject([":@@quick-transfer.amount.label:Amount"], [":@@quick-transfer.amount.label:Amount"]))),
        validationMessages: [
            {
                name: 'nonZero',
                message: $localize(templateObject_8 || (templateObject_8 = __makeTemplateObject([":@@quick-transfer-counterparty-validation-invalid-amount:Transfer amount is required"], [":@@quick-transfer-counterparty-validation-invalid-amount:Transfer amount is required"]))),
            },
        ],
        validators: [nonZeroValidator],
    };
    var configDefaults = {
        fields: { fromAccount: fromAccount, toAccount: toAccount, amount: amount },
        businessFunction: 'A2A Transfer',
        titles: (_a = {},
            _a[exports.ViewState.FORM] = $localize(templateObject_9 || (templateObject_9 = __makeTemplateObject([":@@quick-transfer-journey.title:Quick Transfer"], [":@@quick-transfer-journey.title:Quick Transfer"]))),
            _a[exports.ViewState.FROM] = $localize(templateObject_10 || (templateObject_10 = __makeTemplateObject([":@@quick-transfer-journey.initiator-title:Transfer from"], [":@@quick-transfer-journey.initiator-title:Transfer from"]))),
            _a[exports.ViewState.PAYEE] = $localize(templateObject_11 || (templateObject_11 = __makeTemplateObject([":@@quick-transfer-journey.counterparty-title:Transfer to"], [":@@quick-transfer-journey.counterparty-title:Transfer to"]))),
            _a[exports.ViewState.REVIEW] = $localize(templateObject_12 || (templateObject_12 = __makeTemplateObject([":@@quick-transfer-journey.review-title:Quick Transfer"], [":@@quick-transfer-journey.review-title:Quick Transfer"]))),
            _a),
        paymentTypes: {
            internal: 'INTERNAL_TRANSFER',
            external: 'EXTERNAL_A2A',
            contact: 'INTRABANK_TRANSFER',
        },
        disabledCombinations: [
            { from: exports.QuickTransferProductKinds.loanAccount, to: exports.QuickTransferProductKinds.loanAccount },
            { from: exports.QuickTransferProductKinds.creditCard, to: exports.QuickTransferProductKinds.creditCard },
        ],
        uiComponentProps: {
            mapCurrency: true,
            accountNumberFormat: {
                segments: 0,
                length: 0,
                maskRange: [0, 0],
            },
        },
    };
    var QuickTransferJourneyConfigurationToken = new i0.InjectionToken('QuickTransferJourneyConfigurationToken injection token');
    var QuickTransferJourneyConfigService = /** @class */ (function () {
        function QuickTransferJourneyConfigService(config) {
            this.config = config;
            this._config = Object.assign(Object.assign({}, configDefaults), (this.config || {}));
        }
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "defaults", {
            get: function () {
                return configDefaults;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "fields", {
            get: function () {
                return this._config.fields;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "businessFunction", {
            get: function () {
                return this._config.businessFunction;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "paymentTypes", {
            get: function () {
                return this._config.paymentTypes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "disabledCombinations", {
            get: function () {
                return this._config.disabledCombinations;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "productSummaryQueryParameters", {
            get: function () {
                return this._config.productSummaryQueryParameters;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "uiComponentProps", {
            get: function () {
                return this._config.uiComponentProps;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(QuickTransferJourneyConfigService.prototype, "titles", {
            get: function () {
                return this._config.titles;
            },
            enumerable: false,
            configurable: true
        });
        return QuickTransferJourneyConfigService;
    }());
    /** @nocollapse */ QuickTransferJourneyConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyConfigService, deps: [{ token: QuickTransferJourneyConfigurationToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ QuickTransferJourneyConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [QuickTransferJourneyConfigurationToken]
                        }] }];
        } });
    var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12;

    var QuickTransferJourneyComponent = /** @class */ (function () {
        function QuickTransferJourneyComponent(store, router, activatedRoute, config) {
            this.store = store;
            this.router = router;
            this.activatedRoute = activatedRoute;
            this.config = config;
            this.subscription$ = new rxjs.Subscription();
            /**
             * Enum for current View
             */
            this.viewState = exports.ViewState;
            /**
             * Stream of the current view
             */
            this.currentView$ = this.store.currentView$;
            /**
             * Success image path
             */
            this.successImg = 'assets/bb-quick-transfer-widget-ang/succeed.svg';
            /**
             * Fail image path
             */
            this.successImgNoMotion = 'assets/bb-quick-transfer-widget-ang/no-motion.svg';
        }
        QuickTransferJourneyComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b;
            this.subscription$ = this.router.events
                .pipe(operators.filter(function (event) { return event instanceof i2$3.NavigationEnd; }), operators.startWith(getRouteParams(this.activatedRoute.root)), operators.withLatestFrom(this.store.touchedFields$, this.store.accountsCallState$), operators.map(function (_c) {
                var _d = __read(_c, 3), _ = _d[0], touchedFields = _d[1], callState = _d[2];
                if (callState === LoadingState.INIT)
                    _this.store.fetchAccounts();
                return !(touchedFields === null || touchedFields === void 0 ? void 0 : touchedFields.includes('fromAccount')); // Indicate if there is already selected account by user
            }), operators.filter(Boolean), operators.concatMap(function () { return _this.applyDisabledCombination(getRouteParams(_this.activatedRoute.root).selectedAccount); }))
                .subscribe(function () {
                var selectedAccountId = getRouteParams(_this.activatedRoute.root).selectedAccount;
                _this.store.selectFromAccount(selectedAccountId);
            });
            this.store.updateDefaultCurrency((_b = (_a = this.config.fields) === null || _a === void 0 ? void 0 : _a.amount) === null || _b === void 0 ? void 0 : _b.initialCurrency);
        };
        QuickTransferJourneyComponent.prototype.ngOnDestroy = function () {
            this.store.reset();
            this.subscription$.unsubscribe();
        };
        /**
         * Apply disabled combination filtration for selected product summary item in app level
         */
        QuickTransferJourneyComponent.prototype.applyDisabledCombination = function (id) {
            var disabledCombinations = (this.config || {}).disabledCombinations;
            return this.store.debitAccounts$.pipe(operators.filter(Boolean), operators.take(1), operators.withLatestFrom(this.store.toPayee$), operators.map(function (_c) {
                var _d = __read(_c, 2), acc = _d[0], toPayee = _d[1];
                var _accounts = filterByDisabledCombinations(acc, toPayee, disabledCombinations, Location.FROM);
                return _accounts.some(function (item) { return item.uuid === id; });
            }), operators.filter(Boolean));
        };
        return QuickTransferJourneyComponent;
    }());
    /** @nocollapse */ QuickTransferJourneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyComponent, deps: [{ token: QuickTransferStoreService }, { token: i2__namespace$3.Router }, { token: i2__namespace$3.ActivatedRoute }, { token: QuickTransferJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ QuickTransferJourneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferJourneyComponent, selector: "bb-quick-transfer-journey", providers: [QuickTransferJourneyConfigService, QuickTransferStoreService], ngImport: i0__namespace, template: "<div class=\"bb-quick-transfer\" *ngIf=\"currentView$ | async as currentView\">\n  <bb-quick-transfer-form-ui\n    [config]=\"config\"\n    *ngIf=\"currentView === viewState.FORM || currentView === viewState.COMPLETE as formView\"\n    [@slideRight]\n  ></bb-quick-transfer-form-ui>\n  <bb-quick-transfer-from-account-ui\n    *ngIf=\"currentView === viewState.FROM as fromView\"\n    [config]=\"config\"\n    [@slideLeft]\n  ></bb-quick-transfer-from-account-ui>\n  <bb-quick-transfer-to-account-ui\n    *ngIf=\"currentView === viewState.PAYEE as payeeView\"\n    [config]=\"config\"\n    [@slideLeft]\n  ></bb-quick-transfer-to-account-ui>\n  <div class=\"bb-quick-transfer__success-overlay\" *ngIf=\"currentView === viewState.COMPLETE\" [@fadeIn]></div>\n  <bb-quick-transfer-complete-ui\n    *ngIf=\"currentView === viewState.COMPLETE\"\n    [successImg]=\"successImg\"\n    [successImgNoMotion]=\"successImgNoMotion\"\n    [config]=\"config\"\n    [@slideUp]\n  ></bb-quick-transfer-complete-ui>\n\n  <bb-quick-transfer-confirmation-modal-ui\n    [paymentTypes]=\"config.paymentTypes\"\n    [config]=\"config\"\n  ></bb-quick-transfer-confirmation-modal-ui>\n</div>\n", components: [{ type: QuickTransferFormComponent, selector: "bb-quick-transfer-form-ui", inputs: ["config"] }, { type: QuickTransferFromAccountComponent, selector: "bb-quick-transfer-from-account-ui" }, { type: QuickTransferToAccountComponent, selector: "bb-quick-transfer-to-account-ui" }, { type: QuickTransferCompleteComponent, selector: "bb-quick-transfer-complete-ui", inputs: ["successImg", "successImgNoMotion", "config"] }, { type: QuickTransferConfirmationModalComponent, selector: "bb-quick-transfer-confirmation-modal-ui", inputs: ["paymentTypes", "config"] }], directives: [{ type: i9__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i9__namespace.AsyncPipe }, animations: [slideRightAnimation, slideLeftAnimation, util.fadeInAnimation, util.slideUpAnimation] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-quick-transfer-journey',
                        templateUrl: 'quick-transfer-journey.component.html',
                        providers: [QuickTransferJourneyConfigService, QuickTransferStoreService],
                        animations: [slideRightAnimation, slideLeftAnimation, util.fadeInAnimation, util.slideUpAnimation],
                    }]
            }], ctorParameters: function () { return [{ type: QuickTransferStoreService }, { type: i2__namespace$3.Router }, { type: i2__namespace$3.ActivatedRoute }, { type: QuickTransferJourneyConfigService }]; } });

    var RESOURCE_NAME = 'Payments';
    var PRIVILEGE = 'create';
    var LIST_SIZE = 1000000;
    var EXTERNAL_ID = 'EXTERNAL_ID';
    var FROM_PAGES = 0;
    var PAGE_SIZE = 100;

    /**
     * Method to extract ProductKind array from ProductsummaryGET response
     *
     * @param res
     */
    var responseToProductList = function (res) {
        return res === null || res === void 0 ? void 0 : res.map(function (record) {
            var balance;
            switch (record.productKindName) {
                case 'Term Deposit':
                    balance = record.principalAmount;
                    break;
                case 'Investment Account':
                    balance = record.currentInvestmentValue;
                    break;
                default:
                    balance = record.bookedBalance;
                    break;
            }
            return {
                uuid: record.id,
                balance: balance || 0,
                name: record.displayName,
                currency: record.currency,
                number: record.IBAN || record.BBAN || record.BIC || record.number,
                externalTransferAllowed: record.externalTransferAllowed,
                productKindName: record.productKindName,
                defaultRecord: record,
            };
        });
    };

    var QuickTransferHttpService = /** @class */ (function () {
        function QuickTransferHttpService(productSummaryDataHttpService, contactService, paymentA2AService, paymentOrderService, transactionSigningHelper, configService) {
            this.productSummaryDataHttpService = productSummaryDataHttpService;
            this.contactService = contactService;
            this.paymentA2AService = paymentA2AService;
            this.paymentOrderService = paymentOrderService;
            this.transactionSigningHelper = transactionSigningHelper;
            this.configService = configService;
            this.destroy$ = new rxjs.Subject();
            this.paymentOrderResponse$ = new rxjs.Subject();
            /**
             * Product Summary default parameters
             */
            this.productSummaryParameters = {
                resourceName: RESOURCE_NAME,
                privilege: PRIVILEGE,
                from: FROM_PAGES,
                size: PAGE_SIZE,
                businessFunction: 'A2A Transfer',
            };
            var _b = this.configService || {}, productSummaryQueryParameters = _b.productSummaryQueryParameters, businessFunction = _b.businessFunction;
            this.productSummaryParameters = Object.assign(Object.assign(Object.assign({}, this.productSummaryParameters), productSummaryQueryParameters), (businessFunction ? { businessFunction: businessFunction } : undefined));
        }
        /**
         * Load debit accounts
         */
        QuickTransferHttpService.prototype.getDebitAccounts = function () {
            var fields = (this.configService || {}).fields;
            var _b = (fields === null || fields === void 0 ? void 0 : fields.fromAccount) || {}, productKinds = _b.productKinds, mapItems = _b.mapItems, otherFilters = _b.otherFilters;
            return this.productSummaryDataHttpService
                .getArrangementsByBusinessFunction(Object.assign(Object.assign({}, this.productSummaryParameters), { debitAccount: true }))
                .pipe(operators.map(function (res) { return responseToProductList(res); }), operators.map(function (accounts) { return filterByProductKinds(accounts, productKinds); }), operators.map(function (accounts) { return filterByOtherProps(accounts, otherFilters); }), operators.map(function (accounts) { return (mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length) ? mapItems(accounts) : accounts); }));
        };
        /**
         * Load credit accounts
         */
        QuickTransferHttpService.prototype.getCreditAccounts = function () {
            var fields = (this.configService || {}).fields;
            var _b = (fields === null || fields === void 0 ? void 0 : fields.toAccount) || {}, productKinds = _b.productKinds, mapItems = _b.mapItems, otherFilters = _b.otherFilters;
            return this.productSummaryDataHttpService
                .getArrangementsByBusinessFunction(Object.assign(Object.assign({}, this.productSummaryParameters), { creditAccount: true }))
                .pipe(operators.map(function (res) { return responseToProductList(res); }), operators.map(function (accounts) { return filterByProductKinds(accounts, productKinds); }), operators.map(function (accounts) { return filterByOtherProps(accounts, otherFilters); }), operators.map(function (accounts) { return (mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length) ? mapItems(accounts) : accounts); }));
        };
        /**
         * Load contacts
         */
        QuickTransferHttpService.prototype.getContacts = function () {
            var mapContacts = this.configService.fields.toAccount.mapContacts;
            return this.contactService.getContacts({}).pipe(operators.map(function (contacts) { return contacts === null || contacts === void 0 ? void 0 : contacts.map(function (contact) { return ({
                uuid: contact.id,
                name: contact.name,
                number: contact.accounts[0].accountNumber || contact.accounts[0].IBAN,
                productKindName: exports.QuickTransferProductKinds.contacts,
                defaultRecord: contact,
            }); }); }), operators.map(function (contacts) { return (mapContacts && (contacts === null || contacts === void 0 ? void 0 : contacts.length) ? mapContacts(contacts) : contacts); }));
        };
        /**
         * Get external accounts
         */
        QuickTransferHttpService.prototype.getExternalAccounts = function () {
            return this.paymentA2AService.getAll().pipe(operators.map(function (body) {
                if (body.accounts) {
                    return body.accounts
                        .filter(function (_b) {
                        var status = _b.status;
                        return status === 'Active';
                    })
                        .map(function (_b) {
                        var externalAccountId = _b.externalAccountId, accountNickName = _b.accountNickName, accountNumber = _b.accountNumber, bankName = _b.bankName;
                        return ({
                            uuid: externalAccountId,
                            name: accountNickName || bankName,
                            number: accountNumber,
                            productKindName: exports.QuickTransferProductKinds.connectedAccounts,
                        });
                    });
                }
                return;
            }));
        };
        /**
         * Post method to initiate payment order
         */
        QuickTransferHttpService.prototype.sendPaymentOrder = function (paymentOrdersPost) {
            var _this = this;
            return this.paymentOrderService.postPaymentOrders({ paymentOrdersPost: paymentOrdersPost }).pipe(operators.exhaustMap(function (response) {
                var _a;
                if ((_a = _this.transactionSigningHelper) === null || _a === void 0 ? void 0 : _a.isTransactionSigningResponse(response)) {
                    _this.handleTransactionSigning(response);
                    return _this.paymentOrderResponse$.asObservable();
                }
                else {
                    return rxjs.of(response);
                }
            }));
        };
        QuickTransferHttpService.prototype.getPaymentProgressStatus = function (data) {
            var paymentOrderId = ((data === null || data === void 0 ? void 0 : data['payment-order-id']) || '');
            return this.paymentOrderService
                .getProgressStatusByPaymentOrderId({ paymentOrderId: paymentOrderId }, 'body')
                .pipe(operators.pluck('progressStatus'));
        };
        QuickTransferHttpService.prototype.handleTransactionSigning = function (response) {
            if (!this.transactionSigningHelper)
                return;
            var paymentOrderId = response['payment-order-id'];
            if (paymentOrderId) {
                this.transactionSigningHelper.getTransactionInfo({
                    data: response,
                    asyncPollingOptions: {
                        pollInterval: 1000,
                        maxRetries: 3,
                        pollUntilFn: this.isPaymentConfirmed,
                        complete$: this.destroy$,
                    },
                    fetchFn: this.getPaymentProgressStatus.bind(this),
                    onSuccess: this.onTransactionSigningSuccess.bind(this, paymentOrderId),
                    onRejected: this.onTransactionFail.bind(this, paymentOrderId),
                    onDeclined: this.onTransactionFail.bind(this),
                    onError: this.onTransactionFail.bind(this),
                });
            }
        };
        QuickTransferHttpService.prototype.isPaymentConfirmed = function (status) {
            return !!status && status !== ProgressStatus.CONFIRMATION_PENDING && status !== ProgressStatus.SENDING;
        };
        QuickTransferHttpService.prototype.onTransactionSigningSuccess = function (paymentOrderId) {
            var _this = this;
            this.paymentOrderService
                .getPaymentOrderById({ paymentOrderId: paymentOrderId }, 'body')
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function (response) {
                _this.paymentOrderResponse$.next(response);
            });
        };
        QuickTransferHttpService.prototype.onTransactionFail = function () {
            this.paymentOrderResponse$.next();
        };
        QuickTransferHttpService.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return QuickTransferHttpService;
    }());
    /** @nocollapse */ QuickTransferHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferHttpService, deps: [{ token: i1__namespace$3.ProductSummaryHttpService }, { token: i2__namespace$4.ContactsHttpService }, { token: i3__namespace$2.A2aClientHttpService }, { token: i4__namespace$2.PaymentOrdersHttpService }, { token: i5__namespace$1.TransactionSigningHelperService, optional: true }, { token: QuickTransferJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ QuickTransferHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferHttpService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferHttpService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$3.ProductSummaryHttpService }, { type: i2__namespace$4.ContactsHttpService }, { type: i3__namespace$2.A2aClientHttpService }, { type: i4__namespace$2.PaymentOrdersHttpService }, { type: i5__namespace$1.TransactionSigningHelperService, decorators: [{
                            type: i0.Optional
                        }] }, { type: QuickTransferJourneyConfigService }];
        } });

    var QuickTransferEffects = /** @class */ (function () {
        function QuickTransferEffects(actions$, httpService, communicationService) {
            var _this = this;
            this.actions$ = actions$;
            this.httpService = httpService;
            this.communicationService = communicationService;
            this.fetchAccounts = i1$4.createEffect(function () { return _this.actions$.pipe(i1$4.ofType(accountsFetch), operators.exhaustMap(function () {
                return rxjs.combineLatest([_this.httpService.getCreditAccounts(), _this.httpService.getDebitAccounts()]).pipe(operators.map(function (_a) {
                    var _b = __read(_a, 2), creditAccounts = _b[0], debitAccounts = _b[1];
                    return accountsFetchSuccess({ debitAccounts: debitAccounts, creditAccounts: creditAccounts });
                }), operators.catchError(function (error) { return rxjs.of(accountsFetchError({ error: new http.HttpErrorResponse({ error: error || 'Accounts Fetch Error' }) })); }));
            })); });
            this.fetchContacts = i1$4.createEffect(function () { return _this.actions$.pipe(i1$4.ofType(contactsFetch), operators.exhaustMap(function () {
                return _this.httpService.getContacts().pipe(operators.map(function (contacts) { return contactsFetchSuccess({ contacts: contacts }); }), operators.catchError(function (error) { return rxjs.of(contactsFetchError({ error: new http.HttpErrorResponse({ error: error || 'Contacts Fetch Error' }) })); }));
            })); });
            this.fetchExtAccounts = i1$4.createEffect(function () { return _this.actions$.pipe(i1$4.ofType(externalAccountsFetch), operators.exhaustMap(function () {
                return _this.httpService.getExternalAccounts().pipe(operators.map(function (extAccounts) { return extAccountsFetchSuccess({ extAccounts: extAccounts }); }), operators.catchError(function (error) { return rxjs.of(extAccountsFetchError({
                    error: new http.HttpErrorResponse({ error: error || 'External Accounts Fetch Error' }),
                })); }));
            })); });
            this.sendTransferOrder = i1$4.createEffect(function () { return _this.actions$.pipe(i1$4.ofType(sendTransferOrder), operators.exhaustMap(function (action) {
                return _this.httpService.sendPaymentOrder(action.reqData).pipe(operators.map(function (resp) {
                    if (!!(resp === null || resp === void 0 ? void 0 : resp.id) && resp.status !== ProgressStatus.REJECTED) {
                        if (_this.communicationService) {
                            _this.communicationService.transferSucceeded();
                        }
                        return transferOrderSuccess();
                    }
                    else {
                        return transferOrderError({ error: new http.HttpErrorResponse({ error: 'Transfer Order Post Error' }) });
                    }
                }), operators.catchError(function (error) { return rxjs.of(transferOrderError({ error: error })); }));
            })); });
            this.setPayeeAccount = i1$4.createEffect(function () { return _this.actions$.pipe(i1$4.ofType(setPayeeAccount), operators.map(function () { return openView({ view: exports.ViewState.FORM, focus: TO_ACCOUNT }); })); });
            this.pickFromAccount = i1$4.createEffect(function () { return _this.actions$.pipe(i1$4.ofType(setFromAccount), operators.map(function () { return openView({ view: exports.ViewState.FORM, focus: FROM_ACCOUNT }); })); });
        }
        return QuickTransferEffects;
    }());
    /** @nocollapse */ QuickTransferEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferEffects, deps: [{ token: i1__namespace$4.Actions }, { token: QuickTransferHttpService }, { token: CommunicationService, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ QuickTransferEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferEffects });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$4.Actions }, { type: QuickTransferHttpService }, { type: CommunicationService, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    function onlyUnique(value, index, self) {
        return self.indexOf(value) === index;
    }
    var quickTransferReducer = i1.createReducer(initialState, i1.on(accountsFetch, function (state) { return (Object.assign(Object.assign({}, state), { accountsCallState: LoadingState.LOADING })); }), i1.on(accountsFetchError, function (state, _c) {
        var error = _c.error;
        return (Object.assign(Object.assign({}, state), { accountsCallState: { error: error } }));
    }), i1.on(accountsFetchSuccess, function (state, _c) {
        var debitAccounts = _c.debitAccounts, creditAccounts = _c.creditAccounts;
        return (Object.assign(Object.assign({}, state), { debitAccounts: debitAccounts, creditAccounts: creditAccounts, accountsCallState: LoadingState.LOADED }));
    }), i1.on(contactsFetch, function (state) { return (Object.assign(Object.assign({}, state), { contactsCallState: LoadingState.LOADING })); }), i1.on(contactsFetchError, function (state, _c) {
        var error = _c.error;
        return (Object.assign(Object.assign({}, state), { contactsCallState: { error: error } }));
    }), i1.on(contactsFetchSuccess, function (state, _c) {
        var contacts = _c.contacts;
        return (Object.assign(Object.assign({}, state), { contacts: contacts, contactsCallState: LoadingState.LOADED }));
    }), i1.on(externalAccountsFetch, function (state) { return (Object.assign(Object.assign({}, state), { extAccountsCallState: LoadingState.LOADING })); }), i1.on(extAccountsFetchSuccess, function (state, _c) {
        var extAccounts = _c.extAccounts;
        return (Object.assign(Object.assign({}, state), { extAccounts: extAccounts, extAccountsCallState: LoadingState.LOADED }));
    }), i1.on(extAccountsFetchError, function (state, _c) {
        var error = _c.error;
        return (Object.assign(Object.assign({}, state), { extAccountsCallState: { error: error } }));
    }), i1.on(setFromAccount, function (state, _c) {
        var accountId = _c.accountId;
        var _a, _b;
        var _accounts = __spreadArray(__spreadArray([], __read((state.extAccounts || []))), __read((state.debitAccounts || [])));
        var account = _accounts.find(function (a) { return a.uuid === accountId; }) || {};
        var currency = ((_a = account) === null || _a === void 0 ? void 0 : _a.currency) || state.defaultCurrency;
        return Object.assign(Object.assign({}, state), { fromAccount: account, amount: { amount: ((_b = state.amount) === null || _b === void 0 ? void 0 : _b.amount) || '', currency: currency } });
    }), i1.on(setPayeeAccount, function (state, _c) {
        var id = _c.id;
        var _accounts = __spreadArray(__spreadArray(__spreadArray([], __read((state.extAccounts || []))), __read((state.creditAccounts || []))), __read((state.contacts || [])));
        var account = _accounts.find(function (e) { return e.uuid === id; });
        return Object.assign(Object.assign({}, state), { payeeTo: account });
    }), i1.on(setModalOpen, function (state, _c) {
        var isOpen = _c.isOpen;
        return Object.assign(Object.assign({}, state), { isModalOpen: isOpen });
    }), i1.on(setAmount, function (state, _c) {
        var amount = _c.amount, defaultCurrency = _c.defaultCurrency;
        var _a;
        var newAmount = {
            amount: amount,
            currency: ((_a = state.amount) === null || _a === void 0 ? void 0 : _a.currency) ? state.amount.currency : defaultCurrency,
        };
        return Object.assign(Object.assign({}, state), { amount: newAmount });
    }), i1.on(openView, function (state, _c) {
        var view = _c.view, focus = _c.focus;
        return Object.assign(Object.assign({}, state), { viewState: view, focusElement: focus });
    }), i1.on(resetFocus, function (state) {
        return Object.assign(Object.assign({}, state), { focusElement: undefined });
    }), i1.on(sendTransferOrder, function (state) { return (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.LOADING })); }), i1.on(transferOrderSuccess, function (state) { return (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.LOADED, isModalOpen: false, viewState: exports.ViewState.COMPLETE })); }), i1.on(transferOrderError, function (state, _c) {
        var error = _c.error;
        return (Object.assign(Object.assign({}, state), { transferOrderCallState: { error: error }, isModalOpen: false, viewState: exports.ViewState.COMPLETE }));
    }), i1.on(resetWidget, function (state, _c) {
        var focus = _c.focus;
        return (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.INIT, viewState: exports.ViewState.FORM, payeeTo: undefined, amount: undefined, fromAccount: undefined, touchedFields: [], focusElement: focus || undefined }));
    }), i1.on(setFieldTouched, function (state, _c) {
        var fieldName = _c.fieldName;
        return (Object.assign(Object.assign({}, state), { touchedFields: __spreadArray(__spreadArray([], __read(state.touchedFields)), [fieldName]).filter(onlyUnique) }));
    }), i1.on(setDefaultCurrency, function (state, _c) {
        var currency = _c.currency;
        return (Object.assign(Object.assign({}, state), { defaultCurrency: currency }));
    }));

    var QuickTransferStoreModule = /** @class */ (function () {
        function QuickTransferStoreModule() {
        }
        return QuickTransferStoreModule;
    }());
    /** @nocollapse */ QuickTransferStoreModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferStoreModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ QuickTransferStoreModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferStoreModule, imports: [i1__namespace.StoreFeatureModule, i1__namespace$4.EffectsFeatureModule] });
    /** @nocollapse */ QuickTransferStoreModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferStoreModule, providers: [QuickTransferEffects], imports: [[
                i1.StoreModule.forFeature(FEATURE_STORE_SELECTOR, quickTransferReducer),
                i1$4.EffectsModule.forFeature([QuickTransferEffects]),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferStoreModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [],
                        imports: [
                            i1.StoreModule.forFeature(FEATURE_STORE_SELECTOR, quickTransferReducer),
                            i1$4.EffectsModule.forFeature([QuickTransferEffects]),
                        ],
                        providers: [QuickTransferEffects],
                    }]
            }] });

    var uiModules = [
        i1$2.InputValidationMessageModule,
        i3.ButtonModule,
        i3$1.HeaderModule,
        i2.IconModule,
        currencyInput.CurrencyInputModule,
        tooltipDirective.TooltipModule,
        i1$1.ProductItemBasicAccountModule,
        i4$2.TabModule,
        i5.LoadingIndicatorModule,
        i2$1.ModalModule,
        i6.LoadButtonModule,
        i6$2.EmptyStateModule,
        i4.AmountModule,
        i6$1.AmountInputModule,
    ];
    var components = [
        QuickTransferFormComponent,
        BaseAccountSelectorComponent,
        QuickTransferFromAccountComponent,
        QuickTransferAccountsComponent,
        QuickTransferToAccountComponent,
        QuickTransferConfirmationModalComponent,
        QuickTransferCompleteComponent,
        CustomProductSelectorComponent,
        QuickTransferJourneyComponent,
        QuickTransferValidationMessageComponent,
    ];
    var QuickTransferJourneyModule = /** @class */ (function () {
        function QuickTransferJourneyModule() {
        }
        return QuickTransferJourneyModule;
    }());
    /** @nocollapse */ QuickTransferJourneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ QuickTransferJourneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyModule, declarations: [QuickTransferFormComponent,
            BaseAccountSelectorComponent,
            QuickTransferFromAccountComponent,
            QuickTransferAccountsComponent,
            QuickTransferToAccountComponent,
            QuickTransferConfirmationModalComponent,
            QuickTransferCompleteComponent,
            CustomProductSelectorComponent,
            QuickTransferJourneyComponent,
            QuickTransferValidationMessageComponent], imports: [i9.CommonModule, i2$2.ReactiveFormsModule, QuickTransferStoreModule, i1$2.InputValidationMessageModule,
            i3.ButtonModule,
            i3$1.HeaderModule,
            i2.IconModule,
            currencyInput.CurrencyInputModule,
            tooltipDirective.TooltipModule,
            i1$1.ProductItemBasicAccountModule,
            i4$2.TabModule,
            i5.LoadingIndicatorModule,
            i2$1.ModalModule,
            i6.LoadButtonModule,
            i6$2.EmptyStateModule,
            i4.AmountModule,
            i6$1.AmountInputModule], exports: [QuickTransferFormComponent,
            BaseAccountSelectorComponent,
            QuickTransferFromAccountComponent,
            QuickTransferAccountsComponent,
            QuickTransferToAccountComponent,
            QuickTransferConfirmationModalComponent,
            QuickTransferCompleteComponent,
            CustomProductSelectorComponent,
            QuickTransferJourneyComponent,
            QuickTransferValidationMessageComponent, QuickTransferStoreModule, i1$2.InputValidationMessageModule,
            i3.ButtonModule,
            i3$1.HeaderModule,
            i2.IconModule,
            currencyInput.CurrencyInputModule,
            tooltipDirective.TooltipModule,
            i1$1.ProductItemBasicAccountModule,
            i4$2.TabModule,
            i5.LoadingIndicatorModule,
            i2$1.ModalModule,
            i6.LoadButtonModule,
            i6$2.EmptyStateModule,
            i4.AmountModule,
            i6$1.AmountInputModule] });
    /** @nocollapse */ QuickTransferJourneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyModule, providers: [QuickTransferHttpService, QuickTransferJourneyConfigService], imports: [__spreadArray([i9.CommonModule, i2$2.ReactiveFormsModule, QuickTransferStoreModule], __read(uiModules)), QuickTransferStoreModule, i1$2.InputValidationMessageModule,
            i3.ButtonModule,
            i3$1.HeaderModule,
            i2.IconModule,
            currencyInput.CurrencyInputModule,
            tooltipDirective.TooltipModule,
            i1$1.ProductItemBasicAccountModule,
            i4$2.TabModule,
            i5.LoadingIndicatorModule,
            i2$1.ModalModule,
            i6.LoadButtonModule,
            i6$2.EmptyStateModule,
            i4.AmountModule,
            i6$1.AmountInputModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: QuickTransferJourneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components)),
                        imports: __spreadArray([i9.CommonModule, i2$2.ReactiveFormsModule, QuickTransferStoreModule], __read(uiModules)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), [QuickTransferStoreModule]), __read(uiModules)),
                        providers: [QuickTransferHttpService, QuickTransferJourneyConfigService],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.QuickTransferHttpService = QuickTransferHttpService;
    exports.QuickTransferJourneyCommunicationService = CommunicationService;
    exports.QuickTransferJourneyComponent = QuickTransferJourneyComponent;
    exports.QuickTransferJourneyConfigService = QuickTransferJourneyConfigService;
    exports.QuickTransferJourneyConfigurationToken = QuickTransferJourneyConfigurationToken;
    exports.QuickTransferJourneyModule = QuickTransferJourneyModule;
    exports.QuickTransferStoreModule = QuickTransferStoreModule;
    exports.nonZeroValidator = nonZeroValidator;
    exports["ӨBaseAccountSelectorComponent"] = BaseAccountSelectorComponent;
    exports["ӨCustomProductSelectorComponent"] = CustomProductSelectorComponent;
    exports["ӨQuickTransferAccountsComponent"] = QuickTransferAccountsComponent;
    exports["ӨQuickTransferCompleteComponent"] = QuickTransferCompleteComponent;
    exports["ӨQuickTransferConfirmationModalComponent"] = QuickTransferConfirmationModalComponent;
    exports["ӨQuickTransferFormComponent"] = QuickTransferFormComponent;
    exports["ӨQuickTransferFromAccountComponent"] = QuickTransferFromAccountComponent;
    exports["ӨQuickTransferToAccountComponent"] = QuickTransferToAccountComponent;
    exports["ӨQuickTransferValidationMessageComponent"] = QuickTransferValidationMessageComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-quick-transfer-journey-ang.umd.js.map
