{"version":3,"file":"effects.js","sourceRoot":"","sources":["../../../../../../libs/quick-transfer-journey/src/lib/store/effects.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable, Optional } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { CommunicationService } from '../communication.service';\nimport { FROM_ACCOUNT, TO_ACCOUNT } from '../constants/component-selectors';\nimport { Contact } from '../models/items.model';\nimport { ProgressStatus } from '../models/state.model';\nimport { ViewState } from '../models/view.model';\nimport { QuickTransferHttpService } from '../services/quick-transfer-http.service';\nimport {\n  accountsFetch,\n  accountsFetchError,\n  accountsFetchSuccess,\n  contactsFetch,\n  contactsFetchError,\n  contactsFetchSuccess,\n  extAccountsFetchError,\n  extAccountsFetchSuccess,\n  externalAccountsFetch,\n  openView,\n  sendTransferOrder,\n  setFromAccount,\n  setPayeeAccount,\n  transferOrderError,\n  transferOrderSuccess,\n} from './actions';\n\n@Injectable()\nexport class QuickTransferEffects {\n  constructor(\n    private actions$: Actions,\n    private readonly httpService: QuickTransferHttpService,\n    @Optional() private communicationService: CommunicationService,\n  ) {}\n\n  fetchAccounts = createEffect(\n    (): Observable<Action> =>\n      this.actions$.pipe(\n        ofType(accountsFetch),\n        exhaustMap(() => {\n          return combineLatest([this.httpService.getCreditAccounts(), this.httpService.getDebitAccounts()]).pipe(\n            map(([creditAccounts, debitAccounts]) => accountsFetchSuccess({ debitAccounts, creditAccounts })),\n            catchError(error =>\n              of(accountsFetchError({ error: new HttpErrorResponse({ error: error || 'Accounts Fetch Error' }) })),\n            ),\n          );\n        }),\n      ),\n  );\n\n  fetchContacts = createEffect(\n    (): Observable<Action> =>\n      this.actions$.pipe(\n        ofType(contactsFetch),\n        exhaustMap(() => {\n          return this.httpService.getContacts().pipe(\n            map((contacts: Contact[]) => contactsFetchSuccess({ contacts })),\n            catchError(error =>\n              of(contactsFetchError({ error: new HttpErrorResponse({ error: error || 'Contacts Fetch Error' }) })),\n            ),\n          );\n        }),\n      ),\n  );\n\n  fetchExtAccounts = createEffect(\n    (): Observable<Action> =>\n      this.actions$.pipe(\n        ofType(externalAccountsFetch),\n        exhaustMap(() => {\n          return this.httpService.getExternalAccounts().pipe(\n            map(extAccounts => extAccountsFetchSuccess({ extAccounts })),\n            catchError(error =>\n              of(\n                extAccountsFetchError({\n                  error: new HttpErrorResponse({ error: error || 'External Accounts Fetch Error' }),\n                }),\n              ),\n            ),\n          );\n        }),\n      ),\n  );\n\n  sendTransferOrder = createEffect(\n    (): Observable<Action> =>\n      this.actions$.pipe(\n        ofType(sendTransferOrder),\n        exhaustMap(action => {\n          return this.httpService.sendPaymentOrder(action.reqData).pipe(\n            map(resp => {\n              if (!!resp?.id && resp.status !== ProgressStatus.REJECTED) {\n                if (this.communicationService) {\n                  this.communicationService.transferSucceeded();\n                }\n                return transferOrderSuccess();\n              } else {\n                return transferOrderError({ error: new HttpErrorResponse({ error: 'Transfer Order Post Error' }) });\n              }\n            }),\n            catchError(error => of(transferOrderError({ error }))),\n          );\n        }),\n      ),\n  );\n\n  setPayeeAccount = createEffect(\n    (): Observable<Action> =>\n      this.actions$.pipe(\n        ofType(setPayeeAccount),\n        map(() => openView({ view: ViewState.FORM, focus: TO_ACCOUNT })),\n      ),\n  );\n\n  pickFromAccount = createEffect(\n    (): Observable<Action> =>\n      this.actions$.pipe(\n        ofType(setFromAccount),\n        map(() => openView({ view: ViewState.FORM, focus: FROM_ACCOUNT })),\n      ),\n  );\n}\n"]}