import { HttpErrorResponse } from '@angular/common/http';
import { Injectable, Optional } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { combineLatest, of } from 'rxjs';
import { catchError, exhaustMap, map } from 'rxjs/operators';
import { CommunicationService } from '../communication.service';
import { FROM_ACCOUNT, TO_ACCOUNT } from '../constants/component-selectors';
import { ProgressStatus } from '../models/state.model';
import { ViewState } from '../models/view.model';
import { QuickTransferHttpService } from '../services/quick-transfer-http.service';
import { accountsFetch, accountsFetchError, accountsFetchSuccess, contactsFetch, contactsFetchError, contactsFetchSuccess, extAccountsFetchError, extAccountsFetchSuccess, externalAccountsFetch, openView, sendTransferOrder, setFromAccount, setPayeeAccount, transferOrderError, transferOrderSuccess, } from './actions';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../services/quick-transfer-http.service";
import * as i3 from "../communication.service";
export class QuickTransferEffects {
    constructor(actions$, httpService, communicationService) {
        this.actions$ = actions$;
        this.httpService = httpService;
        this.communicationService = communicationService;
        this.fetchAccounts = createEffect(() => this.actions$.pipe(ofType(accountsFetch), exhaustMap(() => {
            return combineLatest([this.httpService.getCreditAccounts(), this.httpService.getDebitAccounts()]).pipe(map(([creditAccounts, debitAccounts]) => accountsFetchSuccess({ debitAccounts, creditAccounts })), catchError(error => of(accountsFetchError({ error: new HttpErrorResponse({ error: error || 'Accounts Fetch Error' }) }))));
        })));
        this.fetchContacts = createEffect(() => this.actions$.pipe(ofType(contactsFetch), exhaustMap(() => {
            return this.httpService.getContacts().pipe(map((contacts) => contactsFetchSuccess({ contacts })), catchError(error => of(contactsFetchError({ error: new HttpErrorResponse({ error: error || 'Contacts Fetch Error' }) }))));
        })));
        this.fetchExtAccounts = createEffect(() => this.actions$.pipe(ofType(externalAccountsFetch), exhaustMap(() => {
            return this.httpService.getExternalAccounts().pipe(map(extAccounts => extAccountsFetchSuccess({ extAccounts })), catchError(error => of(extAccountsFetchError({
                error: new HttpErrorResponse({ error: error || 'External Accounts Fetch Error' }),
            }))));
        })));
        this.sendTransferOrder = createEffect(() => this.actions$.pipe(ofType(sendTransferOrder), exhaustMap(action => {
            return this.httpService.sendPaymentOrder(action.reqData).pipe(map(resp => {
                if (!!(resp === null || resp === void 0 ? void 0 : resp.id) && resp.status !== ProgressStatus.REJECTED) {
                    if (this.communicationService) {
                        this.communicationService.transferSucceeded();
                    }
                    return transferOrderSuccess();
                }
                else {
                    return transferOrderError({ error: new HttpErrorResponse({ error: 'Transfer Order Post Error' }) });
                }
            }), catchError(error => of(transferOrderError({ error }))));
        })));
        this.setPayeeAccount = createEffect(() => this.actions$.pipe(ofType(setPayeeAccount), map(() => openView({ view: ViewState.FORM, focus: TO_ACCOUNT }))));
        this.pickFromAccount = createEffect(() => this.actions$.pipe(ofType(setFromAccount), map(() => openView({ view: ViewState.FORM, focus: FROM_ACCOUNT }))));
    }
}
/** @nocollapse */ QuickTransferEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferEffects, deps: [{ token: i1.Actions }, { token: i2.QuickTransferHttpService }, { token: i3.CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.QuickTransferHttpService }, { type: i3.CommunicationService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=effects.js.map