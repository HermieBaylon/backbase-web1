import { createReducer, on } from '@ngrx/store';
import { initialState } from '../constants/initital-state';
import { LoadingState } from '../models/state.model';
import { ViewState } from '../models/view.model';
import { accountsFetch, accountsFetchError, accountsFetchSuccess, contactsFetch, contactsFetchError, contactsFetchSuccess, extAccountsFetchError, extAccountsFetchSuccess, externalAccountsFetch, openView, resetFocus, resetWidget, sendTransferOrder, setAmount, setDefaultCurrency, setFieldTouched, setFromAccount, setModalOpen, setPayeeAccount, transferOrderError, transferOrderSuccess, } from './actions';
function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
}
export const quickTransferReducer = createReducer(initialState, on(accountsFetch, state => (Object.assign(Object.assign({}, state), { accountsCallState: LoadingState.LOADING }))), on(accountsFetchError, (state, { error }) => (Object.assign(Object.assign({}, state), { accountsCallState: { error } }))), on(accountsFetchSuccess, (state, { debitAccounts, creditAccounts }) => (Object.assign(Object.assign({}, state), { debitAccounts,
    creditAccounts, accountsCallState: LoadingState.LOADED }))), on(contactsFetch, state => (Object.assign(Object.assign({}, state), { contactsCallState: LoadingState.LOADING }))), on(contactsFetchError, (state, { error }) => (Object.assign(Object.assign({}, state), { contactsCallState: { error } }))), on(contactsFetchSuccess, (state, { contacts }) => (Object.assign(Object.assign({}, state), { contacts, contactsCallState: LoadingState.LOADED }))), on(externalAccountsFetch, state => (Object.assign(Object.assign({}, state), { extAccountsCallState: LoadingState.LOADING }))), on(extAccountsFetchSuccess, (state, { extAccounts }) => (Object.assign(Object.assign({}, state), { extAccounts, extAccountsCallState: LoadingState.LOADED }))), on(extAccountsFetchError, (state, { error }) => (Object.assign(Object.assign({}, state), { extAccountsCallState: { error } }))), on(setFromAccount, (state, { accountId }) => {
    var _a, _b;
    const _accounts = [...(state.extAccounts || []), ...(state.debitAccounts || [])];
    const account = _accounts.find((a) => a.uuid === accountId) || {};
    const currency = ((_a = account) === null || _a === void 0 ? void 0 : _a.currency) || state.defaultCurrency;
    return Object.assign(Object.assign({}, state), { fromAccount: account, amount: { amount: ((_b = state.amount) === null || _b === void 0 ? void 0 : _b.amount) || '', currency } });
}), on(setPayeeAccount, (state, { id }) => {
    const _accounts = [...(state.extAccounts || []), ...(state.creditAccounts || []), ...(state.contacts || [])];
    const account = _accounts.find(e => e.uuid === id);
    return Object.assign(Object.assign({}, state), { payeeTo: account });
}), on(setModalOpen, (state, { isOpen }) => {
    return Object.assign(Object.assign({}, state), { isModalOpen: isOpen });
}), on(setAmount, (state, { amount, defaultCurrency }) => {
    var _a;
    const newAmount = {
        amount,
        currency: ((_a = state.amount) === null || _a === void 0 ? void 0 : _a.currency) ? state.amount.currency : defaultCurrency,
    };
    return Object.assign(Object.assign({}, state), { amount: newAmount });
}), on(openView, (state, { view, focus }) => {
    return Object.assign(Object.assign({}, state), { viewState: view, focusElement: focus });
}), on(resetFocus, state => {
    return Object.assign(Object.assign({}, state), { focusElement: undefined });
}), on(sendTransferOrder, state => (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.LOADING }))), on(transferOrderSuccess, state => (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.LOADED, isModalOpen: false, viewState: ViewState.COMPLETE }))), on(transferOrderError, (state, { error }) => (Object.assign(Object.assign({}, state), { transferOrderCallState: { error }, isModalOpen: false, viewState: ViewState.COMPLETE }))), on(resetWidget, (state, { focus }) => (Object.assign(Object.assign({}, state), { transferOrderCallState: LoadingState.INIT, viewState: ViewState.FORM, payeeTo: undefined, amount: undefined, fromAccount: undefined, touchedFields: [], focusElement: focus || undefined }))), on(setFieldTouched, (state, { fieldName }) => (Object.assign(Object.assign({}, state), { touchedFields: [...state.touchedFields, fieldName].filter(onlyUnique) }))), on(setDefaultCurrency, (state, { currency }) => (Object.assign(Object.assign({}, state), { defaultCurrency: currency }))));
//# sourceMappingURL=reducer.js.map