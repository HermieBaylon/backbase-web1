import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { accountsFetch, contactsFetch, externalAccountsFetch, openView, resetFocus, resetWidget, sendTransferOrder, setAmount, setDefaultCurrency, setFieldTouched, setFromAccount, setModalOpen, setPayeeAccount, } from './actions';
import { selectAccountsCallState, selectAmount, selectContacts, selectContactsCallState, selectCreditAccounts, selectDebitAccounts, selectExtAccounts, selectExtAccountsCallState, selectFocusElement, selectFromAccount, selectIsModalOpen, selectPayeeAccount, selectTouchedFields, selectTransferOrderCallState, selectViewState, } from './selectors';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export class QuickTransferStoreService {
    constructor(store) {
        this.store = store;
        /**
         * Stream of api call state for fetching accounts
         */
        this.accountsCallState$ = this.store.select(selectAccountsCallState);
        /**
         * Stream of api call state for fetching contacts
         */
        this.contactsCallState$ = this.store.select(selectContactsCallState);
        /**
         * Stream of api call state for fetching external accounts
         */
        this.extAccountsCallState$ = this.store.select(selectExtAccountsCallState);
        /**
         * Stream of current view state
         */
        this.currentView$ = this.store.select(selectViewState);
        /**
         * Stream of debit accounts
         */
        this.debitAccounts$ = this.store.select(selectDebitAccounts);
        /**
         * Stream of credit accounts
         */
        this.creditAccounts$ = this.store.select(selectCreditAccounts);
        /**
         * Stream of external accounts
         */
        this.extAccounts$ = this.store.select(selectExtAccounts);
        /**
         * Stream of contacts
         */
        this.contacts$ = this.store.select(selectContacts);
        /**
         * Stream of fromAccount
         */
        this.fromAccount$ = this.store.select(selectFromAccount);
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.select(selectPayeeAccount);
        /**
         * Stream of transfer amount
         */
        this.amount$ = this.store.select(selectAmount);
        /**
         * Boolean flag for the confirmation modal
         */
        this.isModalOpen$ = this.store.select(selectIsModalOpen);
        /**
         * Stream of touched fields.
         */
        this.touchedFields$ = this.store.select(selectTouchedFields);
        /**
         * Stream of Element selector to be focused.
         */
        this.focusElement$ = this.store.select(selectFocusElement);
        /**
         * Boolean flag for transfer order state loading
         */
        this.paymentOrderCallState$ = this.store.select(selectTransferOrderCallState);
    }
    /**
     * Method to set initial accounts after fetching
     */
    fetchAccounts() {
        this.store.dispatch(accountsFetch());
    }
    /**
     * Method to set initial external accounts after fetching
     */
    fetchExtAccounts() {
        this.store.dispatch(externalAccountsFetch());
    }
    /**
     * Method to set initial contacts after fetching
     */
    fetchContacts() {
        this.store.dispatch(contactsFetch());
    }
    /**
     * Method to set initial contacts after fetching
     */
    sendTranferOrder(reqData) {
        this.store.dispatch(sendTransferOrder({ reqData }));
    }
    /**
     * Method to set initial accounts after fetching
     */
    setView(view, focus) {
        this.store.dispatch(openView({ view, focus }));
    }
    /**
     * Method to set toPayee for account
     */
    setPayee(id) {
        this.store.dispatch(setPayeeAccount({ id }));
    }
    /**
     * Method to set initial accounts after fetching
     */
    selectFromAccount(accountId) {
        this.store.dispatch(setFromAccount({ accountId }));
    }
    /**
     * Method to set transfer amount
     */
    setAmount({ amount, defaultCurrency }) {
        this.store.dispatch(setAmount({ amount, defaultCurrency }));
    }
    /**
     * Method to open/close confirmation modal
     */
    setModalOpen(isOpen) {
        this.store.dispatch(setModalOpen({ isOpen }));
    }
    /**
     * Method to set form submitted
     */
    setTouchedField(fieldName) {
        this.store.dispatch(setFieldTouched({ fieldName }));
    }
    /**
     * Method to reset the widget
     */
    reset(focus) {
        this.store.dispatch(resetWidget({ focus }));
    }
    /**
     * Method to set form submitted
     */
    resetFocus() {
        this.store.dispatch(resetFocus());
    }
    /**
     * Method to pass default currency into the store
     */
    updateDefaultCurrency(currency) {
        this.store.dispatch(setDefaultCurrency({ currency }));
    }
}
/** @nocollapse */ QuickTransferStoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreService, deps: [{ token: i1.Store }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferStoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferStoreService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }]; } });
//# sourceMappingURL=store.service.js.map