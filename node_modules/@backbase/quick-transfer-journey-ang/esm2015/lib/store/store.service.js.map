{"version":3,"file":"store.service.js","sourceRoot":"","sources":["../../../../../../libs/quick-transfer-journey/src/lib/store/store.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { PaymentOrdersPost } from '@backbase/data-ang/payment-order';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AccountItem, Arrangement, Contact, ExternalAccount, TransferAmount } from '../models/items.model';\nimport { CallState, QuickTransferState } from '../models/state.model';\nimport { ViewState } from '../models/view.model';\nimport {\n  accountsFetch,\n  contactsFetch,\n  externalAccountsFetch,\n  openView,\n  resetFocus,\n  resetWidget,\n  sendTransferOrder,\n  setAmount,\n  setDefaultCurrency,\n  setFieldTouched,\n  setFromAccount,\n  setModalOpen,\n  setPayeeAccount,\n} from './actions';\nimport {\n  selectAccountsCallState,\n  selectAmount,\n  selectContacts,\n  selectContactsCallState,\n  selectCreditAccounts,\n  selectDebitAccounts,\n  selectExtAccounts,\n  selectExtAccountsCallState,\n  selectFocusElement,\n  selectFromAccount,\n  selectIsModalOpen,\n  selectPayeeAccount,\n  selectTouchedFields,\n  selectTransferOrderCallState,\n  selectViewState,\n} from './selectors';\n\n@Injectable()\nexport class QuickTransferStoreService {\n  /**\n   * Stream of api call state for fetching accounts\n   */\n  readonly accountsCallState$: Observable<CallState> = this.store.select(selectAccountsCallState);\n  /**\n   * Stream of api call state for fetching contacts\n   */\n  readonly contactsCallState$: Observable<CallState> = this.store.select(selectContactsCallState);\n  /**\n   * Stream of api call state for fetching external accounts\n   */\n  readonly extAccountsCallState$: Observable<CallState> = this.store.select(selectExtAccountsCallState);\n  /**\n   * Stream of current view state\n   */\n  readonly currentView$: Observable<ViewState> = this.store.select(selectViewState);\n  /**\n   * Stream of debit accounts\n   */\n  readonly debitAccounts$: Observable<Arrangement[] | undefined> = this.store.select(selectDebitAccounts);\n  /**\n   * Stream of credit accounts\n   */\n  readonly creditAccounts$: Observable<Arrangement[] | undefined> = this.store.select(selectCreditAccounts);\n  /**\n   * Stream of external accounts\n   */\n  readonly extAccounts$: Observable<ExternalAccount[] | undefined> = this.store.select(selectExtAccounts);\n  /**\n   * Stream of contacts\n   */\n  readonly contacts$: Observable<Contact[] | undefined> = this.store.select(selectContacts);\n  /**\n   * Stream of fromAccount\n   */\n  readonly fromAccount$: Observable<AccountItem | undefined> = this.store.select(selectFromAccount);\n  /**\n   * Stream of toPayee\n   */\n  readonly toPayee$: Observable<AccountItem | undefined> = this.store.select(selectPayeeAccount);\n  /**\n   * Stream of transfer amount\n   */\n  readonly amount$: Observable<TransferAmount | undefined> = this.store.select(selectAmount);\n  /**\n   * Boolean flag for the confirmation modal\n   */\n  readonly isModalOpen$: Observable<boolean> = this.store.select(selectIsModalOpen);\n  /**\n   * Stream of touched fields.\n   */\n  readonly touchedFields$: Observable<string[] | undefined> = this.store.select(selectTouchedFields);\n\n  /**\n   * Stream of Element selector to be focused.\n   */\n  readonly focusElement$: Observable<string | undefined> = this.store.select(selectFocusElement);\n  /**\n   * Boolean flag for transfer order state loading\n   */\n  readonly paymentOrderCallState$: Observable<CallState> = this.store.select(selectTransferOrderCallState);\n\n  constructor(private readonly store: Store<QuickTransferState>) {}\n\n  /**\n   * Method to set initial accounts after fetching\n   */\n  fetchAccounts() {\n    this.store.dispatch(accountsFetch());\n  }\n\n  /**\n   * Method to set initial external accounts after fetching\n   */\n  fetchExtAccounts() {\n    this.store.dispatch(externalAccountsFetch());\n  }\n\n  /**\n   * Method to set initial contacts after fetching\n   */\n  fetchContacts() {\n    this.store.dispatch(contactsFetch());\n  }\n\n  /**\n   * Method to set initial contacts after fetching\n   */\n  sendTranferOrder(reqData: PaymentOrdersPost) {\n    this.store.dispatch(sendTransferOrder({ reqData }));\n  }\n\n  /**\n   * Method to set initial accounts after fetching\n   */\n  setView(view: ViewState, focus?: string) {\n    this.store.dispatch(openView({ view, focus }));\n  }\n\n  /**\n   * Method to set toPayee for account\n   */\n  setPayee(id: string) {\n    this.store.dispatch(setPayeeAccount({ id }));\n  }\n\n  /**\n   * Method to set initial accounts after fetching\n   */\n  selectFromAccount(accountId: string) {\n    this.store.dispatch(setFromAccount({ accountId }));\n  }\n  /**\n   * Method to set transfer amount\n   */\n  setAmount({ amount, defaultCurrency }: { amount: string; defaultCurrency?: string }) {\n    this.store.dispatch(setAmount({ amount, defaultCurrency }));\n  }\n  /**\n   * Method to open/close confirmation modal\n   */\n  setModalOpen(isOpen: boolean) {\n    this.store.dispatch(setModalOpen({ isOpen }));\n  }\n  /**\n   * Method to set form submitted\n   */\n  setTouchedField(fieldName: string) {\n    this.store.dispatch(setFieldTouched({ fieldName }));\n  }\n  /**\n   * Method to reset the widget\n   */\n  reset(focus?: string) {\n    this.store.dispatch(resetWidget({ focus }));\n  }\n  /**\n   * Method to set form submitted\n   */\n  resetFocus() {\n    this.store.dispatch(resetFocus());\n  }\n  /**\n   * Method to pass default currency into the store\n   */\n  updateDefaultCurrency(currency: string) {\n    this.store.dispatch(setDefaultCurrency({ currency }));\n  }\n}\n"]}