import { Injectable, Optional } from '@angular/core';
import { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { ContactsHttpService } from '@backbase/data-ang/contact-manager';
import { PaymentOrdersHttpService, } from '@backbase/data-ang/payment-order';
import { A2aClientHttpService, } from '@backbase/data-ang/payment-order-a2a';
import { TransactionSigningHelperService } from '@backbase/identity-auth/transaction-signing';
import { of, Subject } from 'rxjs';
import { exhaustMap, map, pluck, takeUntil } from 'rxjs/operators';
import { FROM_PAGES, PAGE_SIZE, PRIVILEGE, RESOURCE_NAME } from '../constants/accounts-variables';
import { QuickTransferProductKinds as ProductKinds } from '../models/config.model';
import { ProgressStatus } from '../models/state.model';
import { QuickTransferJourneyConfigService } from '../services/config.service';
import { filterByOtherProps, filterByProductKinds } from '../utils/arrangement-filter';
import { responseToProductList } from '../utils/arrangement-mapper';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/arrangements";
import * as i2 from "@backbase/data-ang/contact-manager";
import * as i3 from "@backbase/data-ang/payment-order-a2a";
import * as i4 from "@backbase/data-ang/payment-order";
import * as i5 from "@backbase/identity-auth/transaction-signing";
import * as i6 from "../services/config.service";
export class QuickTransferHttpService {
    constructor(productSummaryDataHttpService, contactService, paymentA2AService, paymentOrderService, transactionSigningHelper, configService) {
        this.productSummaryDataHttpService = productSummaryDataHttpService;
        this.contactService = contactService;
        this.paymentA2AService = paymentA2AService;
        this.paymentOrderService = paymentOrderService;
        this.transactionSigningHelper = transactionSigningHelper;
        this.configService = configService;
        this.destroy$ = new Subject();
        this.paymentOrderResponse$ = new Subject();
        /**
         * Product Summary default parameters
         */
        this.productSummaryParameters = {
            resourceName: RESOURCE_NAME,
            privilege: PRIVILEGE,
            from: FROM_PAGES,
            size: PAGE_SIZE,
            businessFunction: 'A2A Transfer',
        };
        const { productSummaryQueryParameters, businessFunction } = this.configService || {};
        this.productSummaryParameters = Object.assign(Object.assign(Object.assign({}, this.productSummaryParameters), productSummaryQueryParameters), (businessFunction ? { businessFunction } : undefined));
    }
    /**
     * Load debit accounts
     */
    getDebitAccounts() {
        const { fields } = this.configService || {};
        const { productKinds, mapItems, otherFilters } = (fields === null || fields === void 0 ? void 0 : fields.fromAccount) || {};
        return this.productSummaryDataHttpService
            .getArrangementsByBusinessFunction(Object.assign(Object.assign({}, this.productSummaryParameters), { debitAccount: true }))
            .pipe(map((res) => responseToProductList(res)), map(accounts => filterByProductKinds(accounts, productKinds)), map(accounts => filterByOtherProps(accounts, otherFilters)), map(accounts => (mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length) ? mapItems(accounts) : accounts)));
    }
    /**
     * Load credit accounts
     */
    getCreditAccounts() {
        const { fields } = this.configService || {};
        const { productKinds, mapItems, otherFilters } = (fields === null || fields === void 0 ? void 0 : fields.toAccount) || {};
        return this.productSummaryDataHttpService
            .getArrangementsByBusinessFunction(Object.assign(Object.assign({}, this.productSummaryParameters), { creditAccount: true }))
            .pipe(map((res) => responseToProductList(res)), map(accounts => filterByProductKinds(accounts, productKinds)), map(accounts => filterByOtherProps(accounts, otherFilters)), map(accounts => (mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length) ? mapItems(accounts) : accounts)));
    }
    /**
     * Load contacts
     */
    getContacts() {
        const mapContacts = this.configService.fields.toAccount.mapContacts;
        return this.contactService.getContacts({}).pipe(map((contacts) => contacts === null || contacts === void 0 ? void 0 : contacts.map(contact => ({
            uuid: contact.id,
            name: contact.name,
            number: contact.accounts[0].accountNumber || contact.accounts[0].IBAN,
            productKindName: ProductKinds.contacts,
            defaultRecord: contact,
        }))), map(contacts => (mapContacts && (contacts === null || contacts === void 0 ? void 0 : contacts.length) ? mapContacts(contacts) : contacts)));
    }
    /**
     * Get external accounts
     */
    getExternalAccounts() {
        return this.paymentA2AService.getAll().pipe(map((body) => {
            if (body.accounts) {
                return body.accounts
                    .filter(({ status }) => status === 'Active')
                    .map(({ externalAccountId, accountNickName, accountNumber, bankName }) => ({
                    uuid: externalAccountId,
                    name: accountNickName || bankName,
                    number: accountNumber,
                    productKindName: ProductKinds.connectedAccounts,
                }));
            }
            return;
        }));
    }
    /**
     * Post method to initiate payment order
     */
    sendPaymentOrder(paymentOrdersPost) {
        return this.paymentOrderService.postPaymentOrders({ paymentOrdersPost }).pipe(exhaustMap(response => {
            var _a;
            if ((_a = this.transactionSigningHelper) === null || _a === void 0 ? void 0 : _a.isTransactionSigningResponse(response)) {
                this.handleTransactionSigning(response);
                return this.paymentOrderResponse$.asObservable();
            }
            else {
                return of(response);
            }
        }));
    }
    getPaymentProgressStatus(data) {
        const paymentOrderId = ((data === null || data === void 0 ? void 0 : data['payment-order-id']) || '');
        return this.paymentOrderService
            .getProgressStatusByPaymentOrderId({ paymentOrderId }, 'body')
            .pipe(pluck('progressStatus'));
    }
    handleTransactionSigning(response) {
        if (!this.transactionSigningHelper)
            return;
        const paymentOrderId = response['payment-order-id'];
        if (paymentOrderId) {
            this.transactionSigningHelper.getTransactionInfo({
                data: response,
                asyncPollingOptions: {
                    pollInterval: 1000,
                    maxRetries: 3,
                    pollUntilFn: this.isPaymentConfirmed,
                    complete$: this.destroy$,
                },
                fetchFn: this.getPaymentProgressStatus.bind(this),
                onSuccess: this.onTransactionSigningSuccess.bind(this, paymentOrderId),
                onRejected: this.onTransactionFail.bind(this, paymentOrderId),
                onDeclined: this.onTransactionFail.bind(this),
                onError: this.onTransactionFail.bind(this),
            });
        }
    }
    isPaymentConfirmed(status) {
        return !!status && status !== ProgressStatus.CONFIRMATION_PENDING && status !== ProgressStatus.SENDING;
    }
    onTransactionSigningSuccess(paymentOrderId) {
        this.paymentOrderService
            .getPaymentOrderById({ paymentOrderId }, 'body')
            .pipe(takeUntil(this.destroy$))
            .subscribe(response => {
            this.paymentOrderResponse$.next(response);
        });
    }
    onTransactionFail() {
        this.paymentOrderResponse$.next();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
/** @nocollapse */ QuickTransferHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferHttpService, deps: [{ token: i1.ProductSummaryHttpService }, { token: i2.ContactsHttpService }, { token: i3.A2aClientHttpService }, { token: i4.PaymentOrdersHttpService }, { token: i5.TransactionSigningHelperService, optional: true }, { token: i6.QuickTransferJourneyConfigService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }, { type: i2.ContactsHttpService }, { type: i3.A2aClientHttpService }, { type: i4.PaymentOrdersHttpService }, { type: i5.TransactionSigningHelperService, decorators: [{
                    type: Optional
                }] }, { type: i6.QuickTransferJourneyConfigService }]; } });
//# sourceMappingURL=quick-transfer-http.service.js.map