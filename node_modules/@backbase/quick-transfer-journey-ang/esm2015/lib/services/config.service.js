import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Validators } from '@angular/forms';
import { QuickTransferProductKinds as ProductKinds, } from '../models/config.model';
import { ViewState } from '../models/view.model';
import { nonZeroValidator } from '../utils/helpers';
import * as i0 from "@angular/core";
const fromAccount = {
    productKinds: [
        ProductKinds.savingsAccount,
        ProductKinds.currentAccount,
        ProductKinds.creditCard,
        ProductKinds.loanAccount,
        ProductKinds.connectedAccounts,
    ],
    label: $localize `:@@quick-transfer.form.label:From`,
    mapItems: accounts => {
        return accounts.filter((account) => ['EUR', 'AED', 'USD'].includes((account === null || account === void 0 ? void 0 : account.currency) || ''));
    },
    connectedAccountsSubHeader: $localize `:@@quick-transfer-initiator-connected-acc-subheader:Connected Accounts`,
    validators: [Validators.required],
    validationMessages: [
        {
            name: 'required',
            message: $localize `:@@quick-transfer-initiator-validation-required:Account is required`,
        },
    ],
};
const toAccount = {
    productKinds: [
        ProductKinds.savingsAccount,
        ProductKinds.currentAccount,
        ProductKinds.creditCard,
        ProductKinds.loanAccount,
        ProductKinds.connectedAccounts,
        ProductKinds.contacts,
    ],
    label: $localize `:@@quick-transfer.to.label:To`,
    mapContacts: (contacts) => contacts.filter(contact => !!contact.number),
    connectedAccountsSubHeader: $localize `:@@quick-transfer-counterparty-connected-acc-subheader:Connected Accounts`,
    validators: [Validators.required],
    validationMessages: [
        {
            name: 'required',
            message: $localize `:@@quick-transfer-counterparty-validation-required:Beneficiary is required`,
        },
    ],
};
const amount = {
    initialCurrency: 'USD',
    autoDecimal: true,
    placeholder: '0.00',
    wrapperClasses: 'bb-amount-input__field--large',
    label: $localize `:@@quick-transfer.amount.label:Amount`,
    validationMessages: [
        {
            name: 'nonZero',
            message: $localize `:@@quick-transfer-counterparty-validation-invalid-amount:Transfer amount is required`,
        },
    ],
    validators: [nonZeroValidator],
};
const configDefaults = {
    fields: { fromAccount, toAccount, amount },
    businessFunction: 'A2A Transfer',
    titles: {
        [ViewState.FORM]: $localize `:@@quick-transfer-journey.title:Quick Transfer`,
        [ViewState.FROM]: $localize `:@@quick-transfer-journey.initiator-title:Transfer from`,
        [ViewState.PAYEE]: $localize `:@@quick-transfer-journey.counterparty-title:Transfer to`,
        [ViewState.REVIEW]: $localize `:@@quick-transfer-journey.review-title:Quick Transfer`,
    },
    paymentTypes: {
        internal: 'INTERNAL_TRANSFER',
        external: 'EXTERNAL_A2A',
        contact: 'INTRABANK_TRANSFER',
    },
    disabledCombinations: [
        { from: ProductKinds.loanAccount, to: ProductKinds.loanAccount },
        { from: ProductKinds.creditCard, to: ProductKinds.creditCard },
    ],
    uiComponentProps: {
        mapCurrency: true,
        accountNumberFormat: {
            segments: 0,
            length: 0,
            maskRange: [0, 0],
        },
    },
};
export const QuickTransferJourneyConfigurationToken = new InjectionToken('QuickTransferJourneyConfigurationToken injection token');
export class QuickTransferJourneyConfigService {
    constructor(config) {
        this.config = config;
        this._config = Object.assign(Object.assign({}, configDefaults), (this.config || {}));
    }
    get defaults() {
        return configDefaults;
    }
    get fields() {
        return this._config.fields;
    }
    get businessFunction() {
        return this._config.businessFunction;
    }
    get paymentTypes() {
        return this._config.paymentTypes;
    }
    get disabledCombinations() {
        return this._config.disabledCombinations;
    }
    get productSummaryQueryParameters() {
        return this._config.productSummaryQueryParameters;
    }
    get uiComponentProps() {
        return this._config.uiComponentProps;
    }
    get titles() {
        return this._config.titles;
    }
}
/** @nocollapse */ QuickTransferJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyConfigService, deps: [{ token: QuickTransferJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ QuickTransferJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [QuickTransferJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=config.service.js.map