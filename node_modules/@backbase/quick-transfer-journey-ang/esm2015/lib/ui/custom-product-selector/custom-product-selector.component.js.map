{"version":3,"file":"custom-product-selector.component.js","sourceRoot":"","sources":["../../../../../../../libs/quick-transfer-journey/src/lib/ui/custom-product-selector/custom-product-selector.component.ts","../../../../../../../libs/quick-transfer-journey/src/lib/ui/custom-product-selector/custom-product-selector.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAChH,OAAO,EAAwB,SAAS,EAAE,MAAM,gBAAgB,CAAC;;;;;;AAQjE,MAAM,OAAO,8BAA8B;IACzC,YAAuC,iBAA4B;QAA5B,sBAAiB,GAAjB,iBAAiB,CAAW;QAMzD,SAAI,GAAG,IAAI,YAAY,EAAW,CAAC;QAS7C;;WAEG;QACM,YAAO,GAAG,KAAK,CAAC;QAUzB,aAAQ,GAAG,CAAC,CAAM,EAAE,EAAE,GAAE,CAAC,CAAC;QAC1B,cAAS,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;QA5BnB,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,iBAAiB,CAAC,aAAa,GAAG,IAAI,CAAC;SAC7C;IACH,CAAC;IAkBD,UAAU,CAAC,KAAiB;QAC1B,IAAI,CAAC,KAAK,EAAE;YACV,OAAO;SACR;IACH,CAAC;IAKD,gBAAgB,CAAC,EAAc;QAC7B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,iBAAiB,CAAC,EAAc;QAC9B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IACD;;OAEG;IACH,uBAAuB;QACrB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;;+IAhDU,8BAA8B;mIAA9B,8BAA8B,qOCT3C,0sBAkBA;4FDTa,8BAA8B;kBAL1C,SAAS;mBAAC;oBACT,QAAQ,EAAE,4BAA4B;oBACtC,WAAW,EAAE,0CAA0C;oBACvD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;0BAEc,QAAQ;;0BAAI,IAAI;4CAMnB,IAAI;sBAAb,MAAM;gBAEE,UAAU;sBAAlB,KAAK;gBAKG,OAAO;sBAAf,KAAK;gBAKG,OAAO;sBAAf,KAAK;gBAEqB,eAAe;sBAAzC,KAAK;uBAAC,kBAAkB","sourcesContent":["import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output, Self } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { AccountItem } from '../../models/items.model';\n\n@Component({\n  selector: 'bb-custom-product-selector',\n  templateUrl: './custom-product-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CustomProductSelectorComponent implements ControlValueAccessor {\n  constructor(@Optional() @Self() public parentFormControl: NgControl) {\n    if (this.parentFormControl) {\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n\n  @Output() open = new EventEmitter<boolean>();\n\n  @Input() emptyLabel: string | undefined;\n\n  /**\n   * Selected account\n   */\n  @Input() account: AccountItem | undefined;\n\n  /**\n   * parent touched state\n   */\n  @Input() touched = false;\n\n  @Input('aria-describedby') ariaDescribedby: string | undefined;\n\n  writeValue(model: any | null): void {\n    if (!model) {\n      return;\n    }\n  }\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  markAsTouched() {\n    this.onTouched();\n  }\n  /**\n   * Method to open from account selector\n   */\n  openAccountSelectorView(): void {\n    this.open.emit(true);\n  }\n}\n","<button\n  bbButton\n  color=\"unstyled\"\n  [class.border-danger]=\"touched && parentFormControl?.invalid\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  class=\"bb-stack form-control bb-quick-transfer-selector-field\"\n  (click)=\"openAccountSelectorView()\"\n>\n  <span\n    class=\"bb-stack__item bb-stack__item--fill bb-text-semi-bold bb-ellipsis--single-line\"\n    *ngIf=\"account; else accountTemplate\"\n    >{{ account.name }}</span\n  >\n  <ng-template #accountTemplate>\n    <span class=\"bb-stack__item bb-stack__item--fill bb-text-support\">{{ emptyLabel }}</span>\n  </ng-template>\n  <bb-icon-ui name=\"angle-right\" cropped class=\"bb-text-support bb-stack__item\"></bb-icon-ui>\n</button>\n"]}