import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/button";
import * as i4 from "@angular/common";
export class CustomProductSelectorComponent {
    constructor(parentFormControl) {
        this.parentFormControl = parentFormControl;
        this.open = new EventEmitter();
        /**
         * parent touched state
         */
        this.touched = false;
        this.onChange = (_) => { };
        this.onTouched = () => { };
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
    writeValue(model) {
        if (!model) {
            return;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    markAsTouched() {
        this.onTouched();
    }
    /**
     * Method to open from account selector
     */
    openAccountSelectorView() {
        this.open.emit(true);
    }
}
/** @nocollapse */ CustomProductSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomProductSelectorComponent, deps: [{ token: i1.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CustomProductSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CustomProductSelectorComponent, selector: "bb-custom-product-selector", inputs: { emptyLabel: "emptyLabel", account: "account", touched: "touched", ariaDescribedby: ["aria-describedby", "ariaDescribedby"] }, outputs: { open: "open" }, ngImport: i0, template: "<button\n  bbButton\n  color=\"unstyled\"\n  [class.border-danger]=\"touched && parentFormControl?.invalid\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  class=\"bb-stack form-control bb-quick-transfer-selector-field\"\n  (click)=\"openAccountSelectorView()\"\n>\n  <span\n    class=\"bb-stack__item bb-stack__item--fill bb-text-semi-bold bb-ellipsis--single-line\"\n    *ngIf=\"account; else accountTemplate\"\n    >{{ account.name }}</span\n  >\n  <ng-template #accountTemplate>\n    <span class=\"bb-stack__item bb-stack__item--fill bb-text-support\">{{ emptyLabel }}</span>\n  </ng-template>\n  <bb-icon-ui name=\"angle-right\" cropped class=\"bb-text-support bb-stack__item\"></bb-icon-ui>\n</button>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomProductSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-custom-product-selector',
                    templateUrl: './custom-product-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { open: [{
                type: Output
            }], emptyLabel: [{
                type: Input
            }], account: [{
                type: Input
            }], touched: [{
                type: Input
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }] } });
//# sourceMappingURL=custom-product-selector.component.js.map