import { Component } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { fadeInAnimation, slideUpAnimation } from '@backbase/ui-ang/util';
import { Subscription } from 'rxjs';
import { concatMap, filter, map, startWith, take, withLatestFrom } from 'rxjs/operators';
import { slideLeftAnimation, slideRightAnimation } from './animations';
import { LoadingState } from './models/state.model';
import { Location, ViewState } from './models/view.model';
import { QuickTransferJourneyConfigService } from './services/config.service';
import { QuickTransferStoreService } from './store/store.service';
import { filterByDisabledCombinations } from './utils/arrangement-filter';
import { getRouteParams } from './utils/helpers';
import * as i0 from "@angular/core";
import * as i1 from "./store/store.service";
import * as i2 from "@angular/router";
import * as i3 from "./services/config.service";
import * as i4 from "./components/quick-transfer-form/quick-transfer-form.component";
import * as i5 from "./components/quick-transfer-from-account/quick-transfer-from-account.component";
import * as i6 from "./components/quick-transfer-to-account/quick-transfer-to-account.component";
import * as i7 from "./components/quick-transfer-complete/quick-transfer-complete.component";
import * as i8 from "./components/quick-transfer-confirmation-modal/quick-transfer-confirmation-modal.component";
import * as i9 from "@angular/common";
export class QuickTransferJourneyComponent {
    constructor(store, router, activatedRoute, config) {
        this.store = store;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.config = config;
        this.subscription$ = new Subscription();
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
        /**
         * Stream of the current view
         */
        this.currentView$ = this.store.currentView$;
        /**
         * Success image path
         */
        this.successImg = 'assets/bb-quick-transfer-widget-ang/succeed.svg';
        /**
         * Fail image path
         */
        this.successImgNoMotion = 'assets/bb-quick-transfer-widget-ang/no-motion.svg';
    }
    ngOnInit() {
        var _a, _b;
        this.subscription$ = this.router.events
            .pipe(filter(event => event instanceof NavigationEnd), startWith(getRouteParams(this.activatedRoute.root)), withLatestFrom(this.store.touchedFields$, this.store.accountsCallState$), map(([_, touchedFields, callState]) => {
            if (callState === LoadingState.INIT)
                this.store.fetchAccounts();
            return !(touchedFields === null || touchedFields === void 0 ? void 0 : touchedFields.includes('fromAccount')); // Indicate if there is already selected account by user
        }), filter(Boolean), concatMap(() => this.applyDisabledCombination(getRouteParams(this.activatedRoute.root).selectedAccount)))
            .subscribe(() => {
            const selectedAccountId = getRouteParams(this.activatedRoute.root).selectedAccount;
            this.store.selectFromAccount(selectedAccountId);
        });
        this.store.updateDefaultCurrency((_b = (_a = this.config.fields) === null || _a === void 0 ? void 0 : _a.amount) === null || _b === void 0 ? void 0 : _b.initialCurrency);
    }
    ngOnDestroy() {
        this.store.reset();
        this.subscription$.unsubscribe();
    }
    /**
     * Apply disabled combination filtration for selected product summary item in app level
     */
    applyDisabledCombination(id) {
        const { disabledCombinations } = this.config || {};
        return this.store.debitAccounts$.pipe(filter(Boolean), take(1), withLatestFrom(this.store.toPayee$), map(([acc, toPayee]) => {
            const _accounts = filterByDisabledCombinations(acc, toPayee, disabledCombinations, Location.FROM);
            return _accounts.some((item) => item.uuid === id);
        }), filter(Boolean));
    }
}
/** @nocollapse */ QuickTransferJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyComponent, deps: [{ token: i1.QuickTransferStoreService }, { token: i2.Router }, { token: i2.ActivatedRoute }, { token: i3.QuickTransferJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferJourneyComponent, selector: "bb-quick-transfer-journey", providers: [QuickTransferJourneyConfigService, QuickTransferStoreService], ngImport: i0, template: "<div class=\"bb-quick-transfer\" *ngIf=\"currentView$ | async as currentView\">\n  <bb-quick-transfer-form-ui\n    [config]=\"config\"\n    *ngIf=\"currentView === viewState.FORM || currentView === viewState.COMPLETE as formView\"\n    [@slideRight]\n  ></bb-quick-transfer-form-ui>\n  <bb-quick-transfer-from-account-ui\n    *ngIf=\"currentView === viewState.FROM as fromView\"\n    [config]=\"config\"\n    [@slideLeft]\n  ></bb-quick-transfer-from-account-ui>\n  <bb-quick-transfer-to-account-ui\n    *ngIf=\"currentView === viewState.PAYEE as payeeView\"\n    [config]=\"config\"\n    [@slideLeft]\n  ></bb-quick-transfer-to-account-ui>\n  <div class=\"bb-quick-transfer__success-overlay\" *ngIf=\"currentView === viewState.COMPLETE\" [@fadeIn]></div>\n  <bb-quick-transfer-complete-ui\n    *ngIf=\"currentView === viewState.COMPLETE\"\n    [successImg]=\"successImg\"\n    [successImgNoMotion]=\"successImgNoMotion\"\n    [config]=\"config\"\n    [@slideUp]\n  ></bb-quick-transfer-complete-ui>\n\n  <bb-quick-transfer-confirmation-modal-ui\n    [paymentTypes]=\"config.paymentTypes\"\n    [config]=\"config\"\n  ></bb-quick-transfer-confirmation-modal-ui>\n</div>\n", components: [{ type: i4.QuickTransferFormComponent, selector: "bb-quick-transfer-form-ui", inputs: ["config"] }, { type: i5.QuickTransferFromAccountComponent, selector: "bb-quick-transfer-from-account-ui" }, { type: i6.QuickTransferToAccountComponent, selector: "bb-quick-transfer-to-account-ui" }, { type: i7.QuickTransferCompleteComponent, selector: "bb-quick-transfer-complete-ui", inputs: ["successImg", "successImgNoMotion", "config"] }, { type: i8.QuickTransferConfirmationModalComponent, selector: "bb-quick-transfer-confirmation-modal-ui", inputs: ["paymentTypes", "config"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i9.AsyncPipe }, animations: [slideRightAnimation, slideLeftAnimation, fadeInAnimation, slideUpAnimation] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-journey',
                    templateUrl: 'quick-transfer-journey.component.html',
                    providers: [QuickTransferJourneyConfigService, QuickTransferStoreService],
                    animations: [slideRightAnimation, slideLeftAnimation, fadeInAnimation, slideUpAnimation],
                }]
        }], ctorParameters: function () { return [{ type: i1.QuickTransferStoreService }, { type: i2.Router }, { type: i2.ActivatedRoute }, { type: i3.QuickTransferJourneyConfigService }]; } });
//# sourceMappingURL=quick-transfer-journey.component.js.map