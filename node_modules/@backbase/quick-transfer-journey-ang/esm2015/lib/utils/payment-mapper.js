import { InvolvedPartyRole, SchemeNames } from '@backbase/data-ang/payment-order';
import { QuickTransferProductKinds } from '../models/config.model';
export const getCurrentDate = () => new Date().toISOString().slice(0, 10);
export const mapPaymentData = (fromAccount, toAccount, amount, paymentTypes) => {
    const { connectedAccounts, contacts } = QuickTransferProductKinds;
    const _fromAccount = fromAccount.productKindName === connectedAccounts ? toAccount : fromAccount;
    const _toAccount = fromAccount.productKindName === connectedAccounts ? fromAccount : toAccount;
    const _role = fromAccount.productKindName === connectedAccounts ? InvolvedPartyRole.DEBTOR : InvolvedPartyRole.CREDITOR;
    function getPaymentType() {
        switch (_toAccount.productKindName) {
            case connectedAccounts:
                return paymentTypes.external;
            case contacts:
                return paymentTypes.contact;
            default:
                return paymentTypes.internal;
        }
    }
    function getScheme() {
        switch (_toAccount.productKindName) {
            case connectedAccounts:
                return SchemeNames.EXTERNALID;
            case contacts:
                return SchemeNames.BBAN;
            default:
                return SchemeNames.ID;
        }
    }
    const originatorAccount = {
        identification: {
            identification: _fromAccount.uuid,
            schemeName: SchemeNames.ID,
        },
    };
    const identification = {
        identification: _toAccount.productKindName === contacts ? _toAccount.number : _toAccount.uuid,
        schemeName: getScheme(),
    };
    const transferTransactionInformation = {
        instructedAmount: {
            amount: amount.amount,
            currencyCode: amount.currency,
        },
        counterparty: {
            name: _toAccount.name,
            role: _role,
        },
        counterpartyAccount: Object.assign({ identification }, (_toAccount.productKindName === contacts && {
            selectedContact: { contactId: _toAccount.uuid, accountId: '' },
        })),
    };
    return {
        originatorAccount,
        requestedExecutionDate: getCurrentDate(),
        paymentType: getPaymentType(),
        transferTransactionInformation,
    };
};
//# sourceMappingURL=payment-mapper.js.map