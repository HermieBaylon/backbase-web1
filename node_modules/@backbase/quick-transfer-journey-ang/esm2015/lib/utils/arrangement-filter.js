import { QuickTransferProductKinds as ProductKinds, } from '../models/config.model';
import { Location } from '../models/view.model';
export const filterByProductKinds = (arrangements, productKinds) => {
    const _arrangements = arrangements || [];
    return _arrangements.filter((arrangement) => productKinds ? productKinds.includes(arrangement.productKindName) : true);
};
/**
 * @deprecated since version 1.1.0, use `mapItems` instead
 */
export const filterByOtherProps = (arrangements, filters) => {
    const _arrangements = arrangements || [];
    return _arrangements.filter((arr) => filters && filters.length
        ? filters.every(({ key, value }) => {
            return value.some(v => arr.defaultRecord && v === arr.defaultRecord[key]);
        })
        : true);
};
export const filterByDisabledCombinations = (arrangements, counterPartyAccount, disabledCombinations, location) => {
    if (!arrangements)
        return [];
    const combinations = disabledCombinations || [];
    // Disable a transfer from connected to connected and connected to contacts account by default
    combinations.push({
        from: ProductKinds.connectedAccounts,
        to: ProductKinds.connectedAccounts,
    });
    combinations.push({ from: ProductKinds.connectedAccounts, to: ProductKinds.contacts });
    const disabledProductKinds = combinations
        .filter((i) => {
        return location === Location.FROM
            ? i.to === (counterPartyAccount === null || counterPartyAccount === void 0 ? void 0 : counterPartyAccount.productKindName)
            : i.from === (counterPartyAccount === null || counterPartyAccount === void 0 ? void 0 : counterPartyAccount.productKindName);
    })
        .map(i => (location === Location.FROM ? i.from : i.to));
    return arrangements.filter(arr => !disabledProductKinds.includes(arr.productKindName));
};
//# sourceMappingURL=arrangement-filter.js.map