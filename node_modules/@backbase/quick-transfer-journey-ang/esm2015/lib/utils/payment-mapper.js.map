{"version":3,"file":"payment-mapper.js","sourceRoot":"","sources":["../../../../../../libs/quick-transfer-journey/src/lib/utils/payment-mapper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAqB,WAAW,EAAE,MAAM,kCAAkC,CAAC;AACrG,OAAO,EAAgB,yBAAyB,EAAE,MAAM,wBAAwB,CAAC;AAGjF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAE1E,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,WAAwB,EACxB,SAAsB,EACtB,MAAsB,EACtB,YAA0B,EACP,EAAE;IACrB,MAAM,EAAE,iBAAiB,EAAE,QAAQ,EAAE,GAAG,yBAAyB,CAAC;IAClE,MAAM,YAAY,GAAG,WAAW,CAAC,eAAe,KAAK,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC;IACjG,MAAM,UAAU,GAAG,WAAW,CAAC,eAAe,KAAK,iBAAiB,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/F,MAAM,KAAK,GACT,WAAW,CAAC,eAAe,KAAK,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IAE5G,SAAS,cAAc;QACrB,QAAQ,UAAU,CAAC,eAAe,EAAE;YAClC,KAAK,iBAAiB;gBACpB,OAAO,YAAY,CAAC,QAAQ,CAAC;YAC/B,KAAK,QAAQ;gBACX,OAAO,YAAY,CAAC,OAAO,CAAC;YAC9B;gBACE,OAAO,YAAY,CAAC,QAAQ,CAAC;SAChC;IACH,CAAC;IACD,SAAS,SAAS;QAChB,QAAQ,UAAU,CAAC,eAAe,EAAE;YAClC,KAAK,iBAAiB;gBACpB,OAAO,WAAW,CAAC,UAAU,CAAC;YAChC,KAAK,QAAQ;gBACX,OAAO,WAAW,CAAC,IAAI,CAAC;YAC1B;gBACE,OAAO,WAAW,CAAC,EAAE,CAAC;SACzB;IACH,CAAC;IAED,MAAM,iBAAiB,GAAG;QACxB,cAAc,EAAE;YACd,cAAc,EAAE,YAAY,CAAC,IAAI;YACjC,UAAU,EAAE,WAAW,CAAC,EAAE;SAC3B;KACF,CAAC;IAEF,MAAM,cAAc,GAAG;QACrB,cAAc,EAAE,UAAU,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI;QAC7F,UAAU,EAAE,SAAS,EAAE;KACxB,CAAC;IAEF,MAAM,8BAA8B,GAAG;QACrC,gBAAgB,EAAE;YAChB,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,YAAY,EAAE,MAAM,CAAC,QAAQ;SAC9B;QACD,YAAY,EAAE;YACZ,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,IAAI,EAAE,KAAK;SACZ;QACD,mBAAmB,kBACjB,cAAc,IACX,CAAC,UAAU,CAAC,eAAe,KAAK,QAAQ,IAAI;YAC7C,eAAe,EAAE,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;SAC/D,CAAC,CACH;KACF,CAAC;IAEF,OAAO;QACL,iBAAiB;QACjB,sBAAsB,EAAE,cAAc,EAAE;QACxC,WAAW,EAAE,cAAc,EAAE;QAC7B,8BAA8B;KAC/B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { InvolvedPartyRole, PaymentOrdersPost, SchemeNames } from '@backbase/data-ang/payment-order';\nimport { PaymentTypes, QuickTransferProductKinds } from '../models/config.model';\nimport { AccountItem, TransferAmount } from '../models/items.model';\n\nexport const getCurrentDate = () => new Date().toISOString().slice(0, 10);\n\nexport const mapPaymentData = (\n  fromAccount: AccountItem,\n  toAccount: AccountItem,\n  amount: TransferAmount,\n  paymentTypes: PaymentTypes,\n): PaymentOrdersPost => {\n  const { connectedAccounts, contacts } = QuickTransferProductKinds;\n  const _fromAccount = fromAccount.productKindName === connectedAccounts ? toAccount : fromAccount;\n  const _toAccount = fromAccount.productKindName === connectedAccounts ? fromAccount : toAccount;\n  const _role =\n    fromAccount.productKindName === connectedAccounts ? InvolvedPartyRole.DEBTOR : InvolvedPartyRole.CREDITOR;\n\n  function getPaymentType() {\n    switch (_toAccount.productKindName) {\n      case connectedAccounts:\n        return paymentTypes.external;\n      case contacts:\n        return paymentTypes.contact;\n      default:\n        return paymentTypes.internal;\n    }\n  }\n  function getScheme() {\n    switch (_toAccount.productKindName) {\n      case connectedAccounts:\n        return SchemeNames.EXTERNALID;\n      case contacts:\n        return SchemeNames.BBAN;\n      default:\n        return SchemeNames.ID;\n    }\n  }\n\n  const originatorAccount = {\n    identification: {\n      identification: _fromAccount.uuid,\n      schemeName: SchemeNames.ID,\n    },\n  };\n\n  const identification = {\n    identification: _toAccount.productKindName === contacts ? _toAccount.number : _toAccount.uuid,\n    schemeName: getScheme(),\n  };\n\n  const transferTransactionInformation = {\n    instructedAmount: {\n      amount: amount.amount,\n      currencyCode: amount.currency,\n    },\n    counterparty: {\n      name: _toAccount.name,\n      role: _role,\n    },\n    counterpartyAccount: {\n      identification,\n      ...(_toAccount.productKindName === contacts && {\n        selectedContact: { contactId: _toAccount.uuid, accountId: '' },\n      }),\n    },\n  };\n\n  return {\n    originatorAccount,\n    requestedExecutionDate: getCurrentDate(),\n    paymentType: getPaymentType(),\n    transferTransactionInformation,\n  };\n};\n"]}