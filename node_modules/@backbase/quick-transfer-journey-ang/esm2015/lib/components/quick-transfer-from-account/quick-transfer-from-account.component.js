import { ChangeDetectionStrategy, Component, ElementRef, ViewChild } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter, map, pluck, take, withLatestFrom } from 'rxjs/operators';
import { FROM_ACCOUNT } from '../../constants/component-selectors';
import { QuickTransferProductKinds as ProductKinds } from '../../models/config.model';
import { LoadingState } from '../../models/state.model';
import { Location, ViewState } from '../../models/view.model';
import { QuickTransferStoreService } from '../../store/store.service';
import { filterByDisabledCombinations } from '../../utils/arrangement-filter';
import { BaseAccountSelectorComponent } from '../account-selector-base/account-selector-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../store/store.service";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "../quick-transfer-accounts/quick-transfer-accounts.component";
import * as i5 from "@backbase/ui-ang/loading-indicator";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@angular/common";
export class QuickTransferFromAccountComponent extends BaseAccountSelectorComponent {
    constructor(store) {
        super(store);
        this.store = store;
        /**
         * Stream of fromAccount
         */
        this.fromAccountId$ = this.store.fromAccount$.pipe(filter(Boolean), pluck('uuid'));
        /**
         * Stream of toPayee
         */
        this.selectedToPayee$ = this.store.toPayee$.pipe(take(1));
        /**
         * Selector of the to account button to be focused
         */
        this.fromAccountSelector = FROM_ACCOUNT;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
    }
    ngAfterViewInit() {
        this.backbutton.nativeElement.focus({ preventScroll: true });
    }
    /**
     * Method to handle selecting from account
     *
     * @param id
     */
    handleSelectFrom(id) {
        this.store.selectFromAccount(id);
    }
    /**
     * If not yet called the accounts API call it
     */
    ngOnInit() {
        const { fields, disabledCombinations } = this.config || {};
        const { productKinds } = (fields === null || fields === void 0 ? void 0 : fields.fromAccount) || {};
        combineLatest([this.extAccountsCallState$, this.accountsCallState$])
            .pipe(take(1))
            .subscribe(([extAccountsState, accountsState]) => {
            if (extAccountsState === LoadingState.INIT && (productKinds === null || productKinds === void 0 ? void 0 : productKinds.includes(ProductKinds.connectedAccounts))) {
                this.getExtAccounts();
            }
            if (accountsState === LoadingState.INIT)
                this.getAccounts();
        });
        this.accounts$ = this.store.debitAccounts$.pipe(take(1), withLatestFrom(this.selectedToPayee$.pipe(take(1))), map(([accounts, toPayee]) => filterByDisabledCombinations(accounts, toPayee, disabledCombinations, Location.FROM)));
        this.extAccounts$ = this.store.extAccounts$.pipe(withLatestFrom(this.selectedToPayee$.pipe(take(1))), map(([accounts, toPayee]) => filterByDisabledCombinations(accounts, toPayee, disabledCombinations, Location.FROM)));
    }
}
/** @nocollapse */ QuickTransferFromAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFromAccountComponent, deps: [{ token: i1.QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferFromAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferFromAccountComponent, selector: "bb-quick-transfer-from-account-ui", providers: [QuickTransferStoreService], viewQueries: [{ propertyName: "backbutton", first: true, predicate: ["back"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-quick-transfer__view\">\n  <div class=\"bb-quick-transfer__heading bb-stack bb-quick-transfer__heading--border\" data-role=\"from-account-header\">\n    <button\n      (click)=\"backToForm(fromAccountSelector)\"\n      bbButton\n      aria-label=\"back to form\"\n      i18-aria-label=\"Back button|Quick transfer back button@@quick-transfer.fromaccount.back.button\"\n      color=\"unstyled\"\n      class=\"bb-stack__item btn-unstyled--focusable bb-block bb-block--lg\"\n      #back\n    >\n      <bb-icon-ui name=\"arrow-back\"></bb-icon-ui>\n    </button>\n    <bb-header-ui\n      class=\"bb-stack__item\"\n      headingClasses=\"h3 bb-block bb-block--lg\"\n      [heading]=\"config?.titles?.[viewState.FROM]\"\n      headingType=\"h2\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-quick-transfer__tabs-content scrollable-box-content\" data-role=\"from-account\">\n    <ng-container\n      *ngIf=\"{ internal: accountsCallState$ | async, external: extAccountsCallState$ | async } as callStates\"\n    >\n      <ng-container *ngIf=\"callStates.internal && callStates.external\">\n        <ng-container [ngSwitch]=\"true\">\n          <ng-container\n            *ngSwitchCase=\"callStates.internal === loadingstate.LOADING && callStates.external === loadingstate.LOADING\"\n          >\n            <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"!!callStates.internal['error'] && !!callStates.external['error']\">\n            <ng-container *ngTemplateOutlet=\"errorCase\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngIf=\"callStates.internal !== loadingstate.LOADING; else loadingState\">\n              <ng-container *ngIf=\"callStates.internal === loadingstate.LOADED\">\n                <div *ngIf=\"accounts$ | async as accounts\">\n                  <bb-quick-transfer-accounts-ui\n                    data-role=\"internal-accounts\"\n                    [arrangements]=\"accounts\"\n                    (select)=\"handleSelectFrom($event)\"\n                    [selected]=\"fromAccountId$ | async\"\n                    [selectedCounterPartyAccount]=\"(selectedToPayee$ | async)?.uuid\"\n                    [config]=\"config\"\n                  ></bb-quick-transfer-accounts-ui>\n                </div>\n              </ng-container>\n              <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.internal['error']\">\n                <bb-icon-ui\n                  name=\"error-outline\"\n                  size=\"md\"\n                  class=\"bb-stack__item bb-stack__item--align-top\"\n                ></bb-icon-ui>\n                <div class=\"bb-subtitle\">\n                  <span i18n=\"Fetch accounts error|Fetch accounts error@@quick-transfer.fetch-accounts.error-message\">\n                    We could not retrieve data for your internal accounts.</span\n                  >\n                  <br />\n                  <button\n                    bbButton\n                    color=\"link-text\"\n                    data-role=\"reload-accounts\"\n                    (click)=\"getAccounts()\"\n                    i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                  >\n                    Reload\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n\n            <div *ngIf=\"callStates.external !== loadingstate.LOADED || (extAccounts$ | async) as extAccounts\">\n              <h3\n                class=\"bb-subheader bb-text-support bb-quick-transfer__subheader bb-block bb-block--no-margin bb-inline-stack h4\"\n                *ngIf=\"\n                  (extAccounts.length || callStates.external !== loadingstate.LOADED) &&\n                  config?.fields?.fromAccount?.connectedAccountsSubHeader as subHeader\n                \"\n              >\n                <bb-icon-ui name=\"insert-link\" cropped class=\"bb-inline-stack__item--spacing-sm\"></bb-icon-ui>\n                <span\n                  data-role=\"external-accounts-header\"\n                  i18n=\"\n                    Account type subheader|Quick transfer 'connected accounts' type\n                    subheader@@quick-transfer.from.account-type-subheader\"\n                >\n                  {{ subHeader }}\n                </span>\n              </h3>\n              <ng-container *ngIf=\"callStates.external !== loadingstate.LOADING; else loadingState\">\n                <bb-quick-transfer-accounts-ui\n                  data-role=\"external-accounts\"\n                  *ngIf=\"callStates.external === loadingstate.LOADED\"\n                  [arrangements]=\"extAccounts\"\n                  (select)=\"handleSelectFrom($event)\"\n                  [selected]=\"fromAccountId$ | async\"\n                  [config]=\"config\"\n                ></bb-quick-transfer-accounts-ui>\n                <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.external['error']\">\n                  <bb-icon-ui\n                    name=\"error-outline\"\n                    size=\"md\"\n                    class=\"bb-stack__item bb-stack__item--align-top\"\n                  ></bb-icon-ui>\n                  <div class=\"bb-subtitle\">\n                    <span\n                      i18n=\"\n                        Fetch external accounts error|Fetch external accounts\n                        error@@quick-transfer.fetch-external-accounts.error-message\"\n                    >\n                      We could not retrieve data for your external accounts.</span\n                    >\n                    <br />\n                    <button\n                      bbButton\n                      color=\"link-text\"\n                      data-role=\"reload-accounts\"\n                      (click)=\"getExtAccounts()\"\n                      i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                    >\n                      Reload\n                    </button>\n                  </div>\n                </div>\n              </ng-container>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #loadingState let-size=\"$implicit\">\n  <div class=\"bb-loading-indicator\">\n    <bb-loading-indicator-ui [loaderSize]=\"size || 'sm'\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n<ng-template #errorCase>\n  <div class=\"bb-quick-transfer__heading\">\n    <div class=\"bb-state-container\" data-role=\"double-error-state\">\n      <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n      <bb-empty-state-ui\n        title=\"No data retrieved\"\n        class=\"bb-block bb-block--md\"\n        iconClasses=\"\"\n        iconSize=\"xxl\"\n        message=\"We could not retrieve data for your accounts.\"\n        i18n-message=\"Could not retrieve data|Fetch accounts error@@quick-transfer.fetch-data.error-message\"\n        iconModifier=\"error-outline\"\n      ></bb-empty-state-ui>\n      <button\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        (click)=\"getAccounts(); getExtAccounts()\"\n        data-role=\"reload-accounts\"\n        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n      >\n        Reload\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: ["arrangements", "selected", "selectedCounterPartyAccount", "config"], outputs: ["select"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i8.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFromAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-from-account-ui',
                    templateUrl: './quick-transfer-from-account.component.html',
                    providers: [QuickTransferStoreService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.QuickTransferStoreService }]; }, propDecorators: { backbutton: [{
                type: ViewChild,
                args: ['back']
            }] } });
//# sourceMappingURL=quick-transfer-from-account.component.js.map