import { ChangeDetectionStrategy, Component, ElementRef, ViewChild } from '@angular/core';
import { tabsAnim } from '@backbase/ui-ang/util';
import { combineLatest } from 'rxjs';
import { filter, map, pluck, take, withLatestFrom } from 'rxjs/operators';
import { TO_ACCOUNT } from '../../constants/component-selectors';
import { QuickTransferProductKinds as ProductKinds } from '../../models/config.model';
import { LoadingState } from '../../models/state.model';
import { Location, ViewState } from '../../models/view.model';
import { QuickTransferStoreService } from '../../store/store.service';
import { filterByDisabledCombinations } from '../../utils/arrangement-filter';
import { BaseAccountSelectorComponent } from '../account-selector-base/account-selector-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../store/store.service";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "@backbase/ui-ang/tab";
import * as i5 from "../quick-transfer-accounts/quick-transfer-accounts.component";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "@backbase/ui-ang/button";
import * as i9 from "@angular/common";
export class QuickTransferToAccountComponent extends BaseAccountSelectorComponent {
    constructor(store) {
        super(store);
        this.store = store;
        /**
         * Show My Accounts or Contacts tabs, It is My Accounts by default
         */
        this.selectedTab = 0;
        /**
         * Stream of contacts
         */
        this.contacts$ = this.store.contacts$;
        /**
         * Stream of toPayee
         */
        this.selectedToPayeeId$ = this.store.toPayee$.pipe(filter(Boolean), pluck('uuid'));
        /**
         * Stream of fromAccount
         */
        this.selectedFromAccount$ = this.store.fromAccount$.pipe(take(1));
        /**
         * Stream of contactsCallState
         */
        this.contactsCallState$ = this.store.contactsCallState$;
        /**
         * Stream to indicate if contacts are going to be rendered
         */
        this.renderContacts$ = this.selectedFromAccount$.pipe(map(account => {
            var _a;
            const { toAccount } = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.fields) || {};
            const { connectedAccounts, contacts } = ProductKinds;
            const isCounterPartyConnectedAccount = (account === null || account === void 0 ? void 0 : account.productKindName) === connectedAccounts;
            const isContactsSetInConfig = (toAccount === null || toAccount === void 0 ? void 0 : toAccount.productKinds) ? toAccount === null || toAccount === void 0 ? void 0 : toAccount.productKinds.includes(contacts) : true;
            return !isCounterPartyConnectedAccount && isContactsSetInConfig;
        }));
        /**
         * Selector of the to account button to be focused
         */
        this.toAccountSelector = TO_ACCOUNT;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
    }
    /**
     * If not yet called the contacts, accounts and external accounts API call it
     */
    ngOnInit() {
        const { fields, disabledCombinations } = this.config || {};
        const { productKinds } = (fields === null || fields === void 0 ? void 0 : fields.toAccount) || {};
        combineLatest([this.extAccountsCallState$, this.accountsCallState$])
            .pipe(take(1))
            .subscribe(([extAccountsState, accountsState]) => {
            if (extAccountsState === LoadingState.INIT && (productKinds === null || productKinds === void 0 ? void 0 : productKinds.includes(ProductKinds.connectedAccounts))) {
                this.getExtAccounts();
            }
            if (accountsState === LoadingState.INIT)
                this.getAccounts();
        });
        this.accounts$ = this.store.creditAccounts$.pipe(take(1), withLatestFrom(this.selectedFromAccount$), map(([accounts, fromAccount]) => filterByDisabledCombinations(accounts, fromAccount, disabledCombinations, Location.TO)));
        this.extAccounts$ = this.store.extAccounts$.pipe(withLatestFrom(this.selectedFromAccount$), map(([accounts, fromAccount]) => filterByDisabledCombinations(accounts, fromAccount, disabledCombinations, Location.TO)));
    }
    ngAfterViewInit() {
        this.backbutton.nativeElement.focus({ preventScroll: true });
    }
    /**
     * Method to switch tabs
     *
     * @param ev
     */
    onTabSelect(ev) {
        this.selectedTab = ev;
        if (ev === 1) {
            this.contactsCallState$
                .pipe(take(1), filter(s => s === LoadingState.INIT))
                .subscribe(() => {
                this.getContacts();
            });
        }
    }
    /**
     * Method to set payee
     *
     * @param id
     */
    pickPayee(id) {
        this.store.setPayee(id);
    }
    /**
     * Method to dispatch store action for fetching contacts
     */
    getContacts() {
        this.store.fetchContacts();
    }
}
/** @nocollapse */ QuickTransferToAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferToAccountComponent, deps: [{ token: i1.QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferToAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferToAccountComponent, selector: "bb-quick-transfer-to-account-ui", viewQueries: [{ propertyName: "backbutton", first: true, predicate: ["back"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-quick-transfer__view\">\n  <div\n    class=\"bb-quick-transfer__heading bb-stack\"\n    [class.bb-quick-transfer__heading--border]=\"!(renderContacts$ | async)\"\n    data-role=\"to-account-header\"\n  >\n    <button\n      (click)=\"backToForm(toAccountSelector)\"\n      bbButton\n      aria-label=\"back to form\"\n      i18-aria-label=\"Back button|Quick transfer back button@@quick-transfer.to-account.back.button\"\n      color=\"unstyled\"\n      class=\"bb-stack__item btn-unstyled--focusable bb-block bb-block--xs\"\n      [class.bb-stack__item--align-top]=\"!(renderContacts$ | async)\"\n      #back\n    >\n      <bb-icon-ui name=\"arrow-back\"></bb-icon-ui>\n    </button>\n    <bb-header-ui\n      class=\"bb-stack__item\"\n      headingClasses=\"bb-block bb-block--{{ (renderContacts$ | async) ? 'sm' : 'lg' }} h3\"\n      [heading]=\"config?.titles?.[viewState.PAYEE]\"\n      headingType=\"h2\"\n    ></bb-header-ui>\n  </div>\n  <div class=\"bb-quick-transfer__tabs-container\">\n    <bb-tab-group-ui *ngIf=\"renderContacts$ | async\" [initialSelection]=\"0\" (select)=\"onTabSelect($event)\">\n      <bb-tab-ui\n        data-role=\"account-tab-header\"\n        i18n=\"Tab header for to-accounts|Quick transfer 'my accounts' tab header@@quick-transfer.to.tabs.account-header\"\n        >My Accounts</bb-tab-ui\n      >\n      <bb-tab-ui\n        data-role=\"contacts-tab-header\"\n        i18n=\"Tab header for to-contacts|Quick transfer 'contacts' tab header@@quick-transfer.to.tabs.contact-header\"\n        >Contacts</bb-tab-ui\n      >\n    </bb-tab-group-ui>\n    <div class=\"bb-quick-transfer__tabs-content scrollable-box-content\" [@tabsAnimation]=\"selectedTab\">\n      <div *ngIf=\"selectedTab === 0\" data-role=\"quick-transfer-accounts-tab\">\n        <ng-container\n          *ngIf=\"{ internal: accountsCallState$ | async, external: extAccountsCallState$ | async } as callStates\"\n        >\n          <ng-container *ngIf=\"callStates.internal && callStates.external\">\n            <ng-container [ngSwitch]=\"true\">\n              <ng-container\n                *ngSwitchCase=\"\n                  callStates.internal === loadingstate.LOADING && callStates.external === loadingstate.LOADING\n                \"\n              >\n                <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n              </ng-container>\n              <ng-container *ngSwitchCase=\"!!callStates.internal['error'] && !!callStates.external['error']\">\n                <ng-container *ngTemplateOutlet=\"errorCase\"></ng-container>\n              </ng-container>\n              <ng-container *ngSwitchDefault>\n                <ng-container *ngIf=\"callStates.internal !== loadingstate.LOADING; else loadingState\">\n                  <ng-container *ngIf=\"callStates.internal === loadingstate.LOADED\">\n                    <div *ngIf=\"accounts$ | async as accounts\">\n                      <bb-quick-transfer-accounts-ui\n                        data-role=\"internal-accounts\"\n                        [arrangements]=\"accounts\"\n                        (select)=\"pickPayee($event)\"\n                        [selected]=\"selectedToPayeeId$ | async\"\n                        [selectedCounterPartyAccount]=\"(selectedFromAccount$ | async)?.uuid\"\n                        [config]=\"config\"\n                      ></bb-quick-transfer-accounts-ui>\n                    </div>\n                  </ng-container>\n                  <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.internal['error']\">\n                    <bb-icon-ui\n                      name=\"error-outline\"\n                      size=\"md\"\n                      class=\"bb-stack__item bb-stack__item--align-top\"\n                    ></bb-icon-ui>\n                    <div class=\"bb-subtitle\">\n                      <span\n                        i18n=\"Fetch accounts error|Fetch accounts error@@quick-transfer.fetch-accounts.error-message\"\n                      >\n                        We could not retrieve data for your internal accounts.</span\n                      >\n                      <br />\n                      <button\n                        bbButton\n                        color=\"link-text\"\n                        data-role=\"reload-accounts\"\n                        (click)=\"getAccounts()\"\n                        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                      >\n                        Reload\n                      </button>\n                    </div>\n                  </div>\n                </ng-container>\n\n                <div *ngIf=\"callStates.external !== loadingstate.LOADED || (extAccounts$ | async) as extAccounts\">\n                  <h3\n                    class=\"bb-subheader bb-text-support bb-quick-transfer__subheader bb-block bb-block--no-margin bb-inline-stack\"\n                    *ngIf=\"\n                      (extAccounts.length || callStates.external !== loadingstate.LOADED) &&\n                      config?.fields?.toAccount?.connectedAccountsSubHeader as subHeader\n                    \"\n                  >\n                    <bb-icon-ui name=\"insert-link\" cropped class=\"bb-inline-stack__item--spacing-sm\"></bb-icon-ui>\n                    <span\n                      data-role=\"external-accounts-header\"\n                      i18n=\"\n                        Account type subheader|Quick transfer 'connected accounts' type\n                        subheader@@quick-transfer.to.account-type-subheader\"\n                    >\n                      {{ subHeader }}\n                    </span>\n                  </h3>\n                  <ng-container *ngIf=\"callStates.external !== loadingstate.LOADING; else loadingState\">\n                    <bb-quick-transfer-accounts-ui\n                      data-role=\"external-accounts\"\n                      *ngIf=\"callStates.external === loadingstate.LOADED\"\n                      [arrangements]=\"extAccounts\"\n                      (select)=\"pickPayee($event)\"\n                      [selected]=\"selectedToPayeeId$ | async\"\n                      [config]=\"config\"\n                    ></bb-quick-transfer-accounts-ui>\n                    <div class=\"bb-quick-transfer__subheader bb-stack\" *ngIf=\"callStates.external['error']\">\n                      <bb-icon-ui\n                        name=\"error-outline\"\n                        size=\"md\"\n                        class=\"bb-stack__item bb-stack__item--align-top\"\n                      ></bb-icon-ui>\n                      <div class=\"bb-subtitle\">\n                        <span\n                          i18n=\"\n                            Fetch external accounts error|Fetch external accounts\n                            error@@quick-transfer.fetch-external-accounts.error-message\"\n                        >\n                          We could not retrieve data for your external accounts.</span\n                        >\n                        <br />\n                        <button\n                          bbButton\n                          color=\"link-text\"\n                          data-role=\"reload-accounts\"\n                          (click)=\"getExtAccounts()\"\n                          i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                        >\n                          Reload\n                        </button>\n                      </div>\n                    </div>\n                  </ng-container>\n                </div>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div *ngIf=\"selectedTab === 1\" data-role=\"quick-transfer-contacts-tab\">\n        <ng-container *ngIf=\"contactsCallState$ | async as contactsCallState\">\n          <ng-container [ngSwitch]=\"true\">\n            <ng-container *ngSwitchCase=\"contactsCallState === loadingstate.LOADED\">\n              <div *ngIf=\"contacts$ | async as contacts\">\n                <bb-quick-transfer-accounts-ui\n                  [arrangements]=\"contacts\"\n                  (select)=\"pickPayee($event)\"\n                  [selected]=\"selectedToPayeeId$ | async\"\n                  [config]=\"config\"\n                ></bb-quick-transfer-accounts-ui>\n              </div>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"contactsCallState === loadingstate.LOADING\">\n              <ng-container *ngTemplateOutlet=\"loadingState; context: { $implicit: 'md' }\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"!!contactsCallState.error\">\n              <div class=\"bb-quick-transfer__heading\">\n                <div class=\"bb-state-container\" data-role=\"contacts-error-state\">\n                  <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n                  <bb-empty-state-ui\n                    title=\"No data retrieved\"\n                    class=\"bb-block bb-block--md\"\n                    iconClasses=\"\"\n                    iconSize=\"xxl\"\n                    message=\"We could not retrieve data for your contacts.\"\n                    i18n-message=\"\n                      Could not retrieve contacts|Fetch contacts error@@quick-transfer.fetch-contacts.error-message\"\n                    iconModifier=\"error-outline\"\n                  ></bb-empty-state-ui>\n                  <button\n                    bbButton\n                    buttonSize=\"sm\"\n                    color=\"primary\"\n                    (click)=\"getContacts()\"\n                    data-role=\"reload-accounts\"\n                    i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n                  >\n                    Reload\n                  </button>\n                </div>\n              </div>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #loadingState let-size=\"$implicit\">\n  <div class=\"bb-loading-indicator\">\n    <bb-loading-indicator-ui [loaderSize]=\"size || 'sm'\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n<ng-template #errorCase>\n  <div class=\"bb-quick-transfer__heading\">\n    <div class=\"bb-state-container\" data-role=\"double-error-state\">\n      <!-- Use empty string for iconClasses to overwrite its default value 'text-muted' -->\n      <bb-empty-state-ui\n        title=\"No data retrieved\"\n        class=\"bb-block bb-block--md\"\n        iconClasses=\"\"\n        message=\"We could not retrieve data for your accounts.\"\n        i18n-message=\"Could not retrieve data|Fetch accounts error@@quick-transfer.fetch-data.error-message\"\n        iconModifier=\"error-outline\"\n      ></bb-empty-state-ui>\n      <button\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        (click)=\"getAccounts(); getExtAccounts()\"\n        data-role=\"reload-accounts\"\n        i18n=\"Reload button|Reload accounts@@quick-transfer.button.reload-accounts\"\n      >\n        Reload\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.TabGroupComponent, selector: "bb-tab-group-ui", inputs: ["initialSelection"], outputs: ["select"] }, { type: i4.TabComponent, selector: "bb-tab-ui" }, { type: i5.QuickTransferAccountsComponent, selector: "bb-quick-transfer-accounts-ui", inputs: ["arrangements", "selected", "selectedCounterPartyAccount", "config"], outputs: ["select"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i9.AsyncPipe }, animations: [tabsAnim], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferToAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-to-account-ui',
                    templateUrl: './quick-transfer-to-account.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tabsAnim],
                }]
        }], ctorParameters: function () { return [{ type: i1.QuickTransferStoreService }]; }, propDecorators: { backbutton: [{
                type: ViewChild,
                args: ['back']
            }] } });
//# sourceMappingURL=quick-transfer-to-account.component.js.map