import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { combineLatest } from 'rxjs';
import { take } from 'rxjs/operators';
import { LoadingState } from '../../models/state.model';
import { ViewState } from '../../models/view.model';
import { QuickTransferStoreService } from '../../store/store.service';
import { mapPaymentData } from '../../utils/payment-mapper';
import * as i0 from "@angular/core";
import * as i1 from "../../store/store.service";
import * as i2 from "@backbase/ui-ang/modal";
import * as i3 from "@backbase/ui-ang/amount";
import * as i4 from "@backbase/ui-ang/product-item-basic-account";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@backbase/ui-ang/load-button";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
export class QuickTransferConfirmationModalComponent {
    constructor(store) {
        this.store = store;
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.toPayee$;
        /**
         * Stream of fromAccount
         */
        this.fromAccount$ = this.store.fromAccount$;
        /**
         * Stream of transfer amount
         */
        this.amount$ = this.store.amount$;
        /**
         * Stream of isModalOpen
         */
        this.isOpen$ = this.store.isModalOpen$;
        /**
         * Stream of loading
         */
        this.paymentOrderCallState$ = this.store.paymentOrderCallState$;
        /**
         * Enum for loadingstate
         */
        this.loadingstate = LoadingState;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
    }
    /**
     * close the modal
     */
    closeModal() {
        this.store.setModalOpen(false);
    }
    /**
     * close the modal
     */
    handleConfirm() {
        this.subscriptions$ = combineLatest([this.fromAccount$, this.toPayee$, this.amount$])
            .pipe(take(1))
            .subscribe(([fromAccount, toPayee, amount]) => {
            if (fromAccount && toPayee && amount) {
                const postData = mapPaymentData(fromAccount, toPayee, amount, this.paymentTypes || {});
                this.store.sendTranferOrder(postData);
            }
        });
    }
    ngOnDestroy() {
        if (this.subscriptions$) {
            this.subscriptions$.unsubscribe();
        }
    }
}
/** @nocollapse */ QuickTransferConfirmationModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferConfirmationModalComponent, deps: [{ token: i1.QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferConfirmationModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferConfirmationModalComponent, selector: "bb-quick-transfer-confirmation-modal-ui", inputs: { paymentTypes: "paymentTypes", config: "config" }, ngImport: i0, template: "<bb-modal-ui\n  class=\"bb-quick-transfer__modal\"\n  [isOpen]=\"isOpen$ | async\"\n  (cancel)=\"closeModal()\"\n  (confirm)=\"handleConfirm()\"\n>\n  <bb-modal-header-ui [title]=\"config?.titles?.[viewState.FORM]\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div class=\"bb-block bb-block--md\" *ngIf=\"amount$ | async as amount\" data-role=\"quick-transfer-review-amount\">\n        <label\n          class=\"bb-block bb-block--xs font-weight-normal bb-text-support bb-subtitle\"\n          i18n=\"Amount label|Label for transfer amount@@quick-transfer.confirmation-modal.amount-label\"\n          >Amount</label\n        ><br />\n        <bb-amount-ui\n          data-role=\"confirmation-amount\"\n          class=\"bb-highlight\"\n          [currency]=\"amount.currency\"\n          [amount]=\"amount.amount\"\n          [mapCurrency]=\"true\"\n          [showPlusSign]=\"false\"\n        ></bb-amount-ui>\n      </div>\n      <div class=\"bb-stack\">\n        <div\n          class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--spacing-lg bb-quick-transfer__modal-from bb-stack__item--fill\"\n          *ngIf=\"fromAccount$ | async as fromAccount\"\n        >\n          <div class=\"bb-quick-transfer__modal-wrap\">\n            <label\n              class=\"bb-text-support bb-subtitle font-weight-normal bb-block bb-block--xs\"\n              i18n=\"\n                From account label|Label for account to be transferred\n                from@@quick-transfer.confirmation-modal.from-label\"\n              >From</label\n            >\n            <div>\n              <bb-product-item-basic-account-ui\n                data-role=\"confirmation-from-account\"\n                [title]=\"fromAccount.name\"\n                [productNumber]=\"fromAccount.number\"\n                [amount]=\"fromAccount?.balance\"\n                [currency]=\"fromAccount?.currency\"\n                [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n                [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n                [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n                [active]=\"false\"\n              ></bb-product-item-basic-account-ui>\n            </div>\n          </div>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--spacing-lg\" aria-hidden=\"true\">\n          <bb-icon-ui name=\"arrow-forward\" size=\"md\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--fill\"\n          *ngIf=\"toPayee$ | async as toAccount\"\n        >\n          <div class=\"bb-quick-transfer__modal-wrap\">\n            <label\n              class=\"bb-text-support bb-subtitle font-weight-normal bb-block bb-block--xs\"\n              i18n=\"To account label|Label for account to be transferred to@@quick-transfer.confirmation-modal.to-label\"\n              >To</label\n            >\n            <div>\n              <bb-product-item-basic-account-ui\n                data-role=\"confirmation-to-account\"\n                [title]=\"toAccount.name\"\n                [productNumber]=\"toAccount.number\"\n                [amount]=\"toAccount?.balance\"\n                [currency]=\"toAccount?.currency\"\n                [productNumberFormat]=\"config?.uiComponentProps.accountNumberFormat\"\n                [showCurrencySymbol]=\"config?.uiComponentProps.mapCurrency\"\n                [highlight]=\"config?.uiComponentProps.productItemHighlight\"\n                [active]=\"false\"\n              ></bb-product-item-basic-account-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          (click)=\"handleConfirm()\"\n          i18n=\"Confirm button|Button for to confirm transfer@@quick-transfer.confirmation-modal.confirm\"\n          data-role=\"modal-confirm-button\"\n          [isLoading]=\"(paymentOrderCallState$ | async) === loadingstate.LOADING\"\n        >\n          Confirm transfer\n        </bb-load-button-ui>\n        <button\n          bbButton\n          data-role=\"cancel-button\"\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeModal()\"\n          [disabled]=\"(paymentOrderCallState$ | async) === loadingstate.LOADING\"\n        >\n          <span\n            i18n=\"Cancel button|Button for to cancel transfer confirmation@@quick-transfer.confirmation-modal.cancel\"\n            >Cancel</span\n          >\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i2.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i2.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i2.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferConfirmationModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-confirmation-modal-ui',
                    templateUrl: './quick-transfer-confirmation-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.QuickTransferStoreService }]; }, propDecorators: { paymentTypes: [{
                type: Input
            }], config: [{
                type: Input
            }] } });
//# sourceMappingURL=quick-transfer-confirmation-modal.component.js.map