import { __awaiter } from "tslib";
import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';
import { Component, ElementRef, Inject, Input, LOCALE_ID, ViewChild, } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import BigNumber from 'bignumber.js';
import { combineLatest, Subject } from 'rxjs';
import { distinctUntilChanged, filter, first, take, takeUntil } from 'rxjs/operators';
import { ViewState } from '../../models/view.model';
import { QuickTransferStoreService } from '../../store/store.service';
import * as i0 from "@angular/core";
import * as i1 from "../../store/store.service";
import * as i2 from "@angular/forms";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "../../ui/custom-product-selector/custom-product-selector.component";
import * as i5 from "../../ui/validation-message/validation-message.component";
import * as i6 from "@backbase/ui-ang/amount-input";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@angular/common";
export class QuickTransferFormComponent {
    constructor(store, formBuilder, locale) {
        this.store = store;
        this.formBuilder = formBuilder;
        this.locale = locale;
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.toPayee$;
        /**
         * Stream of fromAccount
         */
        this.fromAccount$ = this.store.fromAccount$;
        /**
         * Stream of amount
         */
        this.amount$ = this.store.amount$;
        /**
         * Stream of touchedFields
         */
        this.touchedFields$ = this.store.touchedFields$;
        /**
         * Enum for current View
         */
        this.viewState = ViewState;
        /**
         * unique key used for ids
         */
        this.id = new Date().getTime();
        /**
         * Stream of the current view
         */
        this.currentView$ = this.store.currentView$;
        this.destroy$ = new Subject();
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
        this.format = {
            groupSeparator: '',
            decimalSeparator: this.decimalSeparator,
            groupSize: 3,
        };
    }
    /**
     * Stream of the current view
     */
    get amountConfig() {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.fields.amount;
    }
    ngOnInit() {
        var _a, _b;
        this.initializeForm();
        (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('amountGroup.amount')) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroy$)).subscribe(change => {
            this.storeAmountValue(change);
        });
        this.touchedFields$.pipe(take(1)).subscribe(fields => {
            if (fields === null || fields === void 0 ? void 0 : fields.length) {
                fields.forEach(field => {
                    var _a, _b;
                    (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(field)) === null || _b === void 0 ? void 0 : _b.markAsTouched();
                });
            }
        });
        //Set Initial form data from store
        combineLatest([
            this.amount$.pipe(take(1)),
            this.toPayee$.pipe(take(1)),
            this.fromAccount$.pipe(distinctUntilChanged()), // To have account preselected by route params
        ])
            .pipe(takeUntil(this.destroy$))
            .subscribe(([amount, toAccount, fromAccount]) => {
            var _a, _b;
            const amountVal = amount === null || amount === void 0 ? void 0 : amount.amount;
            (_a = this.form) === null || _a === void 0 ? void 0 : _a.patchValue({
                amountGroup: {
                    amount: amountVal ? new BigNumber(amountVal).toFormat(this.format) : '',
                    currency: (amount === null || amount === void 0 ? void 0 : amount.currency) || ((_b = this.amountConfig) === null || _b === void 0 ? void 0 : _b.initialCurrency),
                },
                toAccount,
                fromAccount,
            });
        });
    }
    ngAfterViewInit() {
        this.store.focusElement$.pipe(distinctUntilChanged(), filter(Boolean), takeUntil(this.destroy$)).subscribe(el => {
            const focusElement = this.formEl.nativeElement.querySelector(el);
            if (focusElement) {
                focusElement.focus({ preventScroll: true });
                this.store.resetFocus();
            }
        });
        this.amount$
            .pipe(filter(amount => !amount), take(1))
            .subscribe(() => {
            var _a, _b, _c;
            (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('amountGroup.amount')) === null || _b === void 0 ? void 0 : _b.patchValue(' ');
            (_c = this.form) === null || _c === void 0 ? void 0 : _c.reset();
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Method to open from account selector
     */
    openFromAccount() {
        this.store.setView(ViewState.FROM);
        this.store.setTouchedField('fromAccount');
    }
    /**
     * Method to open to account selector
     */
    openPayeeAccount() {
        this.store.setView(ViewState.PAYEE);
        this.store.setTouchedField('toAccount');
    }
    /**
     * Method to store amount input value
     */
    storeAmountValue(amount) {
        this.store.setAmount({ amount: amount === null || amount === void 0 ? void 0 : amount.replace(this.decimalSeparator, '.') });
    }
    /**
     * Method to handle transfer
     */
    openConfirmation() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const currentView = yield this.currentView$.pipe(first()).toPromise();
            if (currentView === ViewState.FORM && ((_a = this.form) === null || _a === void 0 ? void 0 : _a.valid)) {
                this.storeAmountValue(this.form.value.amountGroup.amount);
                this.store.setModalOpen(true);
            }
            else {
                this.setTouched('amountGroup.amount');
                this.setTouched('fromAccount');
                this.setTouched('toAccount');
            }
        });
    }
    /**
     * Method to check field Validity
     */
    isFieldValid(fieldName) {
        var _a;
        const control = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        return control && (control.valid || control.untouched);
    }
    /**
     * Method to set field as touched
     */
    setTouched(fieldName) {
        var _a;
        const control = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        if (control) {
            control.markAsTouched();
            this.store.setTouchedField(fieldName);
        }
    }
    initializeForm() {
        var _a;
        const { fromAccount, toAccount, amount } = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.fields) || {};
        this.form = this.formBuilder.group({
            amountGroup: this.formBuilder.group({
                amount: ['', (amount === null || amount === void 0 ? void 0 : amount.validators) || [], (amount === null || amount === void 0 ? void 0 : amount.asyncValidators) || []],
                currency: ['', Validators.required],
            }),
            fromAccount: ['', (fromAccount === null || fromAccount === void 0 ? void 0 : fromAccount.validators) || [], (fromAccount === null || fromAccount === void 0 ? void 0 : fromAccount.asyncValidators) || []],
            toAccount: ['', (toAccount === null || toAccount === void 0 ? void 0 : toAccount.validators) || [], (toAccount === null || toAccount === void 0 ? void 0 : toAccount.asyncValidators) || []],
        });
    }
}
/** @nocollapse */ QuickTransferFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFormComponent, deps: [{ token: i1.QuickTransferStoreService }, { token: i2.FormBuilder }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferFormComponent, selector: "bb-quick-transfer-form-ui", inputs: { config: "config" }, viewQueries: [{ propertyName: "formEl", first: true, predicate: ["formElement"], descendants: true }], ngImport: i0, template: "<div class=\"bb-quick-transfer__view bb-quick-transfer__view--form\">\n  <div class=\"bb-block bb-quick-transfer__heading\">\n    <div class=\"bb-stack\">\n      <bb-header-ui\n        [heading]=\"config?.titles?.[viewState.FORM]\"\n        data-role=\"quick-transfer-header\"\n        headingType=\"h2\"\n        headingClasses=\"bb-block bb-block--lg\"\n        class=\"bb-stack__item bb-stack__item--fill\"\n      ></bb-header-ui>\n    </div>\n  </div>\n  <form\n    class=\"bb-quick-transfer__form\"\n    [formGroup]=\"form\"\n    data-role=\"quick-transfer-form\"\n    (ngSubmit)=\"openConfirmation()\"\n    #formElement\n  >\n    <fieldset [disabled]=\"(currentView$ | async) !== viewState.FORM\">\n      <legend class=\"sr-only\" i18n=\"Legend|Quick transfer form legend@@quick-transfer.form.legend\">\n        Quick transfer Form\n      </legend>\n      <div class=\"bb-block bb-block--lg\">\n        <label class=\"bb-label\" data-role=\"from-label\">{{ config?.fields?.fromAccount?.label }}</label>\n        <bb-custom-product-selector\n          [touched]=\"!isFieldValid('fromAccount')\"\n          formControlName=\"fromAccount\"\n          (focusout)=\"setTouched('fromAccount')\"\n          [account]=\"fromAccount$ | async\"\n          (open)=\"openFromAccount()\"\n          data-role=\"select-from-button\"\n          emptyLabel=\"Select your account\"\n          aria-describedby=\"{{ 'fromAccount-errors-' + id }}\"\n          i18n-emptyLabel=\"Select Account|Quick transfer input for account@@quick-transfer.form.from\"\n        ></bb-custom-product-selector>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'fromAccount-errors-' + id }}\"\n          [control]=\"form?.get('fromAccount')\"\n          [validationMessages]=\"config?.fields?.fromAccount?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div class=\"bb-block bb-block--lg\">\n        <label\n          class=\"bb-label\"\n          data-role=\"payee-label\"\n          i18n=\"Input label|Quick transfer input label for beneficiary@@quick-transfer.form.to.label\"\n          >{{ config?.fields?.toAccount?.label }}</label\n        >\n        <bb-custom-product-selector\n          [touched]=\"!isFieldValid('toAccount')\"\n          formControlName=\"toAccount\"\n          (focusout)=\"setTouched('toAccount')\"\n          [account]=\"toPayee$ | async\"\n          (open)=\"openPayeeAccount()\"\n          data-role=\"select-payee-button\"\n          emptyLabel=\"Select beneficiary\"\n          aria-describedby=\"{{ 'toAccount-errors-' + id }}\"\n          i18n-emptyLabel=\"Select beneficiary|Quick transfer input for beneficiary@@quick-transfer.form.to\"\n        ></bb-custom-product-selector>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'toAccount-errors-' + id }}\"\n          [control]=\"form?.get('toAccount')\"\n          [validationMessages]=\"config?.fields?.toAccount?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div\n        class=\"bb-block bb-block--xl\"\n        formGroupName=\"amountGroup\"\n        [class.was-validated]=\"!isFieldValid('amountGroup.amount')\"\n      >\n        <label\n          class=\"bb-label\"\n          for=\"{{ 'amount-' + id }}\"\n          i18n=\"Amount of transfer|Quick transfer input for amount@@quick-transfer.form.amount\"\n          >{{ config?.fields?.amount?.label }}</label\n        >\n        <bb-amount-input-ui\n          formControlName=\"amount\"\n          data-role=\"amount-input\"\n          [id]=\"'amount-' + id\"\n          [autoDecimal]=\"amountConfig?.autoDecimal\"\n          (focusout)=\"setTouched('amountGroup.amount')\"\n          [wrapperClasses]=\"amountConfig?.wrapperClasses\"\n          [mapCurrency]=\"config?.uiComponentProps.mapCurrency\"\n          [currency]=\"(fromAccount$ | async)?.currency || amountConfig?.initialCurrency\"\n          [required]=\"amountConfig?.required\"\n          aria-describedby=\"{{ 'amount-errors-' + id }}\"\n          [placeholder]=\"amountConfig?.placeholder\"\n        ></bb-amount-input-ui>\n        <bb-quick-transfer-validation-message\n          id=\"{{ 'amount-errors-' + id }}\"\n          [control]=\"form?.get('amountGroup.amount')\"\n          [validationMessages]=\"amountConfig?.validationMessages\"\n        ></bb-quick-transfer-validation-message>\n      </div>\n      <div class=\"bb-block bb-block--sm\">\n        <button\n          bbButton\n          color=\"primary\"\n          data-role=\"open-confirmation\"\n          [block]=\"true\"\n          i18n=\"Approve button|Transfer the amount@@quick-transfer.button.transfer-now\"\n          type=\"submit\"\n        >\n          Transfer Now\n        </button>\n      </div>\n    </fieldset>\n  </form>\n</div>\n", components: [{ type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.CustomProductSelectorComponent, selector: "bb-custom-product-selector", inputs: ["emptyLabel", "account", "touched", "aria-describedby"], outputs: ["open"] }, { type: i5.QuickTransferValidationMessageComponent, selector: "bb-quick-transfer-validation-message", inputs: ["control", "validationMessages", "id"] }, { type: i6.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-form-ui',
                    templateUrl: './quick-transfer-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.QuickTransferStoreService }, { type: i2.FormBuilder }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { config: [{
                type: Input
            }], formEl: [{
                type: ViewChild,
                args: ['formElement']
            }] } });
//# sourceMappingURL=quick-transfer-form.component.js.map