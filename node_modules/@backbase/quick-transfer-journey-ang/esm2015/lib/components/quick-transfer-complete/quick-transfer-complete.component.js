import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { map } from 'rxjs/operators';
import { FROM_ACCOUNT } from '../../constants/component-selectors';
import { LoadingState } from '../../models/state.model';
import { ViewState } from '../../models/view.model';
import { QuickTransferStoreService } from '../../store/store.service';
import { generateId } from '../../utils/helpers';
import * as i0 from "@angular/core";
import * as i1 from "../../store/store.service";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "@backbase/ui-ang/amount";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
export class QuickTransferCompleteComponent {
    constructor(store) {
        this.store = store;
        this.id = generateId();
        /**
         * unique time to reload animated svg everytime
         */
        this.timestamp = new Date().getTime();
        /**
         * Stream of transfer amount
         */
        this.amount$ = this.store.amount$;
        /**
         * Stream of toPayee
         */
        this.toPayee$ = this.store.toPayee$;
        /**
         * Stream of paymentOrderCallState
         */
        this.paymentOrderCallState$ = this.store.paymentOrderCallState$.pipe(map(state => {
            if (state.error) {
                const error = state.error;
                const cancelTransactionSigningMessage = `Your Transfer Has Been Cancelled.`;
                const defaultErrorMessage = `Oops, something went wrong!`;
                const transactionSigningCancelErrorText = 'rejected_by_user';
                const message = error.statusText === transactionSigningCancelErrorText
                    ? $localize `:@@quick-transfer.cancel-transaction-signing.fail-message:${cancelTransactionSigningMessage}`
                    : $localize `:@@quick-transfer.complete.fail-message:${defaultErrorMessage}`;
                return Object.assign(Object.assign({}, error), { message });
            }
            return state;
        }));
        /**
         * Enum for loadingstate
         */
        this.loadingstate = LoadingState;
    }
    ngAfterViewInit() {
        this.doneButton.nativeElement.focus();
    }
    /**
     * Method to call resetWidget
     */
    restart() {
        this.store.reset(FROM_ACCOUNT);
    }
    /**
     * Method to get back to form for trying transfer again
     */
    tryAgain() {
        this.store.setView(ViewState.FORM, FROM_ACCOUNT);
    }
}
/** @nocollapse */ QuickTransferCompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferCompleteComponent, deps: [{ token: i1.QuickTransferStoreService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ QuickTransferCompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: QuickTransferCompleteComponent, selector: "bb-quick-transfer-complete-ui", inputs: { successImg: "successImg", successImgNoMotion: "successImgNoMotion", config: "config" }, viewQueries: [{ propertyName: "doneButton", first: true, predicate: ["done"], descendants: true }], ngImport: i0, template: "<div class=\"bb-quick-transfer__complete\">\n  <ng-container *ngIf=\"(paymentOrderCallState$ | async) === loadingstate.LOADED; else paymentOrderFail\">\n    <div\n      role=\"dialog\"\n      attr.aria-describedby=\"payment-success-img-{{ id }} payment-success-title-{{ id }} payment-success-description-{{\n        id\n      }}\"\n    >\n      <div class=\"bb-text-align-right bb-block\">\n        <button\n          bbButton\n          color=\"unstyled\"\n          class=\"btn-unstyled--focusable\"\n          (click)=\"restart()\"\n          data-role=\"clear-icon-button\"\n          aria-label=\"close transfer\"\n          i18-aria-label=\"Close transfer|Text for close transfer@@quick-transfer.complete.close.button\"\n        >\n          <bb-icon-ui name=\"clear\" size=\"lg\"></bb-icon-ui>\n        </button>\n      </div>\n      <div class=\"bb-text-align-center flex-fill bb-block bb-block--lg\">\n        <picture>\n          <source srcset=\"{{ successImgNoMotion }}\" media=\"(prefers-reduced-motion: reduce)\" />\n          <img\n            id=\"payment-success-img-{{ id }}\"\n            srcset=\"{{ successImg + '?' + timestamp }}\"\n            alt=\"Transfer succeeded!\"\n            i18n-alt=\"Transfer succeeded|Text for transfer succeeded@@quick-transfer.complete.transfer-succeeded\"\n            data-role=\"transfer-success-anim\"\n            class=\"img-fluid\"\n          />\n        </picture>\n        <bb-header-ui\n          id=\"payment-success-title-{{ id }}\"\n          headingClasses=\"bb-text-semi-bold h5\"\n          headingType=\"h3\"\n          heading=\"Well done!\"\n          i18n-heading=\"Well Done!|Text for well done@@quick-transfer.complete.well-done\"\n        ></bb-header-ui>\n        <span\n          class=\"bb-text-support bb-subtitle\"\n          *ngIf=\"amount$ | async as amount\"\n          id=\"payment-success-description-{{ id }}\"\n          ><span i18n=\"Success Transfer|Text for success transfer@@quick-transfer.complete.success-message\"\n            >You just transferred\n          </span>\n          <bb-amount-ui\n            [currency]=\"amount.currency\"\n            [amount]=\"amount.amount\"\n            [mapCurrency]=\"config?.uiComponentProps.mapCurrency\"\n            [showPlusSign]=\"false\"\n          ></bb-amount-ui>\n          <span i18n=\"Transfer To|Text for success transfer to@@quick-transfer.complete.success-message-to\"> to </span>\n          <ng-container *ngIf=\"toPayee$ | async as toPayee\"\n            ><span>{{ toPayee.name }}.</span></ng-container\n          >\n        </span>\n      </div>\n      <div class=\"bb-text-align-center bb-block bb-block--sm\">\n        <button\n          bbButton\n          color=\"secondary\"\n          (click)=\"restart()\"\n          i18n=\"Done button|Transfer Done@@quick-transfer.complete.button.transfer-done\"\n          data-role=\"transfer-done\"\n          #done\n        >\n          Done\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #paymentOrderFail>\n  <div role=\"dialog\" attr.aria-describedby=\"payment-error-title-{{ id }} payment-error-description-{{ id }}\">\n    <div class=\"bb-text-align-right bb-block bb-block--xl\">\n      <button\n        bbButton\n        color=\"unstyled\"\n        (click)=\"tryAgain()\"\n        data-role=\"clear-icon-button\"\n        aria-label=\"close transfer\"\n        i18-aria-label=\"Close transfer|Text for close transfer@@quick-transfer.complete.close.button\"\n      >\n        <bb-icon-ui name=\"clear\" size=\"lg\"></bb-icon-ui>\n      </button>\n    </div>\n    <div\n      class=\"bb-text-align-center flex-fill bb-block bb-block--xl\"\n      data-role=\"transfer-fail-message\"\n      *ngIf=\"paymentOrderCallState$ | async as errorState\"\n    >\n      <bb-icon-ui\n        color=\"danger\"\n        class=\"bb-quick-transfer__fail-icon bb-block bb-block--md\"\n        name=\"error-outline\"\n        size=\"xxl\"\n        data-role=\"complete-error-outline\"\n      ></bb-icon-ui>\n\n      <bb-header-ui\n        id=\"payment-error-title-{{ id }}\"\n        headingClasses=\"bb-text-semi-bold h5\"\n        headingType=\"h3\"\n        [heading]=\"errorState.message\"\n      ></bb-header-ui>\n      <span\n        id=\"payment-error-description-{{ id }}\"\n        class=\"bb-text-support bb-subtitle\"\n        i18n=\"Transfer Failed Sub-Message|Extra Text for the failed transfer@@quick-transfer.complete.fail-sub.message\"\n        >Our system was unable to process your transfer at the moment.</span\n      >\n    </div>\n    <div class=\"bb-text-align-center bb-block bb-block--sm\">\n      <button\n        bbButton\n        color=\"secondary\"\n        i18n=\"Try again button|Transfer Fail@@quick-transfer.complete.button.try-again\"\n        data-role=\"transfer-try-again-button\"\n        (click)=\"tryAgain()\"\n        #done\n      >\n        Try again\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: QuickTransferCompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-quick-transfer-complete-ui',
                    templateUrl: './quick-transfer-complete.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.QuickTransferStoreService }]; }, propDecorators: { successImg: [{
                type: Input
            }], successImgNoMotion: [{
                type: Input
            }], config: [{
                type: Input
            }], doneButton: [{
                type: ViewChild,
                args: ['done']
            }] } });
//# sourceMappingURL=quick-transfer-complete.component.js.map