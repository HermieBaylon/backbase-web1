import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConversationMessageDraftPostRequestBody } from '../model/models';
import { ConversationMessageDraftPutRequestBody } from '../model/models';
import { ConversationThread } from '../model/models';
import { ConversationThreadsDeleteResponseBody } from '../model/models';
import { DeleteDraftsResponseBody } from '../model/models';
import { DeleteResponseBody } from '../model/models';
import { DraftPostResponseBody } from '../model/models';
import { MarkAsReadUnreadPutRequestBody } from '../model/models';
import { MarkAsReadUnreadPutResponseBody } from '../model/models';
import { MessageDraftGetResponseBody } from '../model/models';
import { MessageDraftPutRequestBody } from '../model/models';
import { MessageDraftsGetResponseBody } from '../model/models';
import { MessageDraftsPostRequestBody } from '../model/models';
import { MessageReplyPostRequestBody } from '../model/models';
import { MessageThreadGetResponseBody } from '../model/models';
import { Metadata } from '../model/models';
import { PresentationMessagePostRequestBody } from '../model/models';
import { PresentationMessagePostResponseBody } from '../model/models';
import { TopicsGetResponseBody } from '../model/models';
import { UnreadConversationsGetResponseBody } from '../model/models';
import { MessagesConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteConversationThreadsRequestParams {
    ["ids"]: Array<string>;
    ["xBBSVCRequestId"]?: string;
}
export interface DeleteMessageAttachmentsRequestParams {
    ["ids"]: Array<string>;
}
export interface DeleteMessageDraftsRequestParams {
    ["ids"]: Array<string>;
}
export interface GetConversationThreadsRequestParams {
    ["mailboxType"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
}
export interface GetMessageAttachmentRequestParams {
    ["attachmentId"]: string;
}
export interface GetMessageDraftRequestParams {
    ["draftId"]: string;
}
export interface GetMessageDraftsRequestParams {
    ["from"]?: number;
    ["size"]?: number;
}
export interface GetMessageThreadRequestParams {
    ["messageId"]: string;
}
export interface PostConversationMessageDraftRequestParams {
    ["messageId"]: string;
    ["conversationMessageDraftPostRequestBody"]?: ConversationMessageDraftPostRequestBody;
}
export interface PostMessageAttachmentsRequestParams {
    ["messageId"]?: string;
    ["attachment"]?: Blob;
}
export interface PostMessageDraftsRequestParams {
    ["messageDraftsPostRequestBody"]?: MessageDraftsPostRequestBody;
}
export interface PostMessageReplyRequestParams {
    ["messageId"]: string;
    ["messageReplyPostRequestBody"]?: MessageReplyPostRequestBody;
}
export interface PostMessagesRequestParams {
    ["presentationMessagePostRequestBody"]?: PresentationMessagePostRequestBody;
}
export interface PutConversationMessageDraftRequestParams {
    ["messageId"]: string;
    ["conversationMessageDraftPutRequestBody"]?: ConversationMessageDraftPutRequestBody;
}
export interface PutMarkAsReadUnreadRequestParams {
    ["markAsReadUnreadPutRequestBody"]?: MarkAsReadUnreadPutRequestBody;
}
export interface PutMessageDraftRequestParams {
    ["draftId"]: string;
    ["messageDraftPutRequestBody"]?: MessageDraftPutRequestBody;
}
export declare class MessagecenterHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: MessagesConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: MessagesConfiguration);
    private canConsumeForm;
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteConversationThreads(requestParameters: DeleteConversationThreadsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ConversationThreadsDeleteResponseBody>;
    deleteConversationThreads(requestParameters: DeleteConversationThreadsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ConversationThreadsDeleteResponseBody>>;
    deleteConversationThreads(requestParameters: DeleteConversationThreadsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ConversationThreadsDeleteResponseBody>>;
    deleteConversationThreadsUrl(requestParameters: DeleteConversationThreadsRequestParams): string;
    deleteMessageAttachments(requestParameters: DeleteMessageAttachmentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DeleteResponseBody>;
    deleteMessageAttachments(requestParameters: DeleteMessageAttachmentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DeleteResponseBody>>;
    deleteMessageAttachments(requestParameters: DeleteMessageAttachmentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DeleteResponseBody>>;
    deleteMessageAttachmentsUrl(requestParameters: DeleteMessageAttachmentsRequestParams): string;
    deleteMessageDrafts(requestParameters: DeleteMessageDraftsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DeleteDraftsResponseBody>;
    deleteMessageDrafts(requestParameters: DeleteMessageDraftsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DeleteDraftsResponseBody>>;
    deleteMessageDrafts(requestParameters: DeleteMessageDraftsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DeleteDraftsResponseBody>>;
    deleteMessageDraftsUrl(requestParameters: DeleteMessageDraftsRequestParams): string;
    getConversationThreads(requestParameters: GetConversationThreadsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ConversationThread>>;
    getConversationThreads(requestParameters: GetConversationThreadsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ConversationThread>>>;
    getConversationThreads(requestParameters: GetConversationThreadsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ConversationThread>>>;
    getConversationThreadsUrl(requestParameters: GetConversationThreadsRequestParams): string;
    getMessageAttachment(requestParameters: GetMessageAttachmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/octet-stream';
    }): Observable<Blob>;
    getMessageAttachment(requestParameters: GetMessageAttachmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/octet-stream';
    }): Observable<HttpResponse<Blob>>;
    getMessageAttachment(requestParameters: GetMessageAttachmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/octet-stream';
    }): Observable<HttpEvent<Blob>>;
    getMessageAttachment(requestParameters: GetMessageAttachmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    getMessageAttachment(requestParameters: GetMessageAttachmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    getMessageAttachment(requestParameters: GetMessageAttachmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    getMessageAttachmentUrl(requestParameters: GetMessageAttachmentRequestParams): string;
    getMessageDraft(requestParameters: GetMessageDraftRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MessageDraftGetResponseBody>;
    getMessageDraft(requestParameters: GetMessageDraftRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MessageDraftGetResponseBody>>;
    getMessageDraft(requestParameters: GetMessageDraftRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MessageDraftGetResponseBody>>;
    getMessageDraftUrl(requestParameters: GetMessageDraftRequestParams): string;
    getMessageDrafts(requestParameters: GetMessageDraftsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<MessageDraftsGetResponseBody>>;
    getMessageDrafts(requestParameters: GetMessageDraftsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<MessageDraftsGetResponseBody>>>;
    getMessageDrafts(requestParameters: GetMessageDraftsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<MessageDraftsGetResponseBody>>>;
    getMessageDraftsUrl(requestParameters: GetMessageDraftsRequestParams): string;
    getMessageThread(requestParameters: GetMessageThreadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MessageThreadGetResponseBody>;
    getMessageThread(requestParameters: GetMessageThreadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MessageThreadGetResponseBody>>;
    getMessageThread(requestParameters: GetMessageThreadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MessageThreadGetResponseBody>>;
    getMessageThreadUrl(requestParameters: GetMessageThreadRequestParams): string;
    getTopics(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TopicsGetResponseBody>>;
    getTopics(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TopicsGetResponseBody>>>;
    getTopics(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TopicsGetResponseBody>>>;
    getTopicsUrl(): string;
    getUnreadConversationsCount(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UnreadConversationsGetResponseBody>;
    getUnreadConversationsCount(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UnreadConversationsGetResponseBody>>;
    getUnreadConversationsCount(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UnreadConversationsGetResponseBody>>;
    getUnreadConversationsCountUrl(): string;
    postConversationMessageDraft(requestParameters: PostConversationMessageDraftRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DraftPostResponseBody>;
    postConversationMessageDraft(requestParameters: PostConversationMessageDraftRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DraftPostResponseBody>>;
    postConversationMessageDraft(requestParameters: PostConversationMessageDraftRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DraftPostResponseBody>>;
    postConversationMessageDraftUrl(requestParameters: PostConversationMessageDraftRequestParams): string;
    postMessageAttachments(requestParameters: PostMessageAttachmentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Metadata>;
    postMessageAttachments(requestParameters: PostMessageAttachmentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Metadata>>;
    postMessageAttachments(requestParameters: PostMessageAttachmentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Metadata>>;
    postMessageAttachmentsUrl(requestParameters: PostMessageAttachmentsRequestParams): string;
    postMessageDrafts(requestParameters: PostMessageDraftsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DraftPostResponseBody>;
    postMessageDrafts(requestParameters: PostMessageDraftsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DraftPostResponseBody>>;
    postMessageDrafts(requestParameters: PostMessageDraftsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DraftPostResponseBody>>;
    postMessageDraftsUrl(requestParameters: PostMessageDraftsRequestParams): string;
    postMessageReply(requestParameters: PostMessageReplyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationMessagePostResponseBody>;
    postMessageReply(requestParameters: PostMessageReplyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationMessagePostResponseBody>>;
    postMessageReply(requestParameters: PostMessageReplyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationMessagePostResponseBody>>;
    postMessageReplyUrl(requestParameters: PostMessageReplyRequestParams): string;
    postMessages(requestParameters: PostMessagesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationMessagePostResponseBody>;
    postMessages(requestParameters: PostMessagesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationMessagePostResponseBody>>;
    postMessages(requestParameters: PostMessagesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationMessagePostResponseBody>>;
    postMessagesUrl(requestParameters: PostMessagesRequestParams): string;
    putConversationMessageDraft(requestParameters: PutConversationMessageDraftRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putConversationMessageDraft(requestParameters: PutConversationMessageDraftRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putConversationMessageDraft(requestParameters: PutConversationMessageDraftRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putConversationMessageDraftUrl(requestParameters: PutConversationMessageDraftRequestParams): string;
    putMarkAsReadUnread(requestParameters: PutMarkAsReadUnreadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<MarkAsReadUnreadPutResponseBody>;
    putMarkAsReadUnread(requestParameters: PutMarkAsReadUnreadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<MarkAsReadUnreadPutResponseBody>>;
    putMarkAsReadUnread(requestParameters: PutMarkAsReadUnreadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<MarkAsReadUnreadPutResponseBody>>;
    putMarkAsReadUnreadUrl(requestParameters: PutMarkAsReadUnreadRequestParams): string;
    putMessageDraft(requestParameters: PutMessageDraftRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putMessageDraft(requestParameters: PutMessageDraftRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putMessageDraft(requestParameters: PutMessageDraftRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putMessageDraftUrl(requestParameters: PutMessageDraftRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagecenterHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MessagecenterHttpService>;
}
