import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { MESSAGES_BASE_PATH } from '../variables';
import { MessagesConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class MessagecenterHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new MessagesConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    canConsumeForm(consumes) {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteConversationThreads(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationThreads.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        if (_xBBSVCRequestId !== undefined && _xBBSVCRequestId !== null) {
            headers = headers.set('X-BBSVC-Request-Id', String(_xBBSVCRequestId));
        }
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v4/message-center/messages/conversations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteConversationThreadsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteConversationThreads.');
        }
        const _xBBSVCRequestId = requestParameters["xBBSVCRequestId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/conversations${queryString ? `?${queryString}` : ''}`;
    }
    deleteMessageAttachments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachments.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v4/message-center/attachments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMessageAttachmentsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageAttachments.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v4/message-center/attachments${queryString ? `?${queryString}` : ''}`;
    }
    deleteMessageDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageDrafts.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v4/message-center/messages/drafts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMessageDraftsUrl(requestParameters) {
        const _ids = requestParameters["ids"];
        if (_ids === null || _ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling deleteMessageDrafts.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_ids) {
            _ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'ids');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/drafts${queryString ? `?${queryString}` : ''}`;
    }
    getConversationThreads(requestParameters, observe = 'body', reportProgress = false, options) {
        const _mailboxType = requestParameters["mailboxType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v4/message-center/messages/conversations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationThreadsUrl(requestParameters) {
        const _mailboxType = requestParameters["mailboxType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_mailboxType !== undefined && _mailboxType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _mailboxType, 'mailboxType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/conversations${queryString ? `?${queryString}` : ''}`;
    }
    getMessageAttachment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachment.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/octet-stream',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v4/message-center/attachments/${encodeURIComponent(String(_attachmentId))}`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageAttachmentUrl(requestParameters) {
        const _attachmentId = requestParameters["attachmentId"];
        if (_attachmentId === null || _attachmentId === undefined) {
            throw new Error('Required parameter attachmentId was null or undefined when calling getMessageAttachment.');
        }
        return `${this.configuration.basePath}/client-api/v4/message-center/attachments/${encodeURIComponent(String(_attachmentId))}`;
    }
    getMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling getMessageDraft.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v4/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageDraftUrl(requestParameters) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling getMessageDraft.');
        }
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`;
    }
    getMessageDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v4/message-center/messages/drafts`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageDraftsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/drafts${queryString ? `?${queryString}` : ''}`;
    }
    getMessageThread(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getMessageThread.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessageThreadUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling getMessageThread.');
        }
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation`;
    }
    getTopics(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v4/message-center/topics`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTopicsUrl() {
        return `${this.configuration.basePath}/client-api/v4/message-center/topics`;
    }
    getUnreadConversationsCount(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v4/message-center/messages/unread-conversation-count`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUnreadConversationsCountUrl() {
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/unread-conversation-count`;
    }
    postConversationMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postConversationMessageDraft.');
        }
        const _conversationMessageDraftPostRequestBody = requestParameters["conversationMessageDraftPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`, _conversationMessageDraftPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postConversationMessageDraftUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postConversationMessageDraft.');
        }
        const _conversationMessageDraftPostRequestBody = requestParameters["conversationMessageDraftPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`;
    }
    postMessageAttachments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        const _attachment = requestParameters["attachment"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_messageId !== undefined && _messageId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageId, 'messageId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'multipart/form-data'
        ];
        const canConsumeForm = this.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        let convertFormParamsToString = false;
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new HttpParams({ encoder: this.encoder });
        }
        if (_attachment !== undefined) {
            formParams = formParams.append('attachment', _attachment) || formParams;
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v4/message-center/attachments`, convertFormParamsToString ? formParams.toString() : formParams, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageAttachmentsUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        const _attachment = requestParameters["attachment"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_messageId !== undefined && _messageId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _messageId, 'messageId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v4/message-center/attachments${queryString ? `?${queryString}` : ''}`;
    }
    postMessageDrafts(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageDraftsPostRequestBody = requestParameters["messageDraftsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v4/message-center/messages/drafts`, _messageDraftsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageDraftsUrl(requestParameters) {
        const _messageDraftsPostRequestBody = requestParameters["messageDraftsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/drafts`;
    }
    postMessageReply(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReply.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/reply`, _messageReplyPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessageReplyUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling postMessageReply.');
        }
        const _messageReplyPostRequestBody = requestParameters["messageReplyPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/reply`;
    }
    postMessages(requestParameters, observe = 'body', reportProgress = false, options) {
        const _presentationMessagePostRequestBody = requestParameters["presentationMessagePostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v4/message-center/messages`, _presentationMessagePostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postMessagesUrl(requestParameters) {
        const _presentationMessagePostRequestBody = requestParameters["presentationMessagePostRequestBody"];
        return `${this.configuration.basePath}/client-api/v4/message-center/messages`;
    }
    putConversationMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationMessageDraft.');
        }
        const _conversationMessageDraftPutRequestBody = requestParameters["conversationMessageDraftPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`, _conversationMessageDraftPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putConversationMessageDraftUrl(requestParameters) {
        const _messageId = requestParameters["messageId"];
        if (_messageId === null || _messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling putConversationMessageDraft.');
        }
        const _conversationMessageDraftPutRequestBody = requestParameters["conversationMessageDraftPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/${encodeURIComponent(String(_messageId))}/conversation/drafts`;
    }
    putMarkAsReadUnread(requestParameters, observe = 'body', reportProgress = false, options) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v4/message-center/messages/conversations/read`, _markAsReadUnreadPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMarkAsReadUnreadUrl(requestParameters) {
        const _markAsReadUnreadPutRequestBody = requestParameters["markAsReadUnreadPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/conversations/read`;
    }
    putMessageDraft(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling putMessageDraft.');
        }
        const _messageDraftPutRequestBody = requestParameters["messageDraftPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v4/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`, _messageDraftPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMessageDraftUrl(requestParameters) {
        const _draftId = requestParameters["draftId"];
        if (_draftId === null || _draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling putMessageDraft.');
        }
        const _messageDraftPutRequestBody = requestParameters["messageDraftPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v4/message-center/messages/drafts/${encodeURIComponent(String(_draftId))}`;
    }
}
MessagecenterHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagecenterHttpService, deps: [{ token: i1.HttpClient }, { token: MESSAGES_BASE_PATH, optional: true }, { token: i2.MessagesConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
MessagecenterHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagecenterHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: MessagecenterHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MESSAGES_BASE_PATH]
                }] }, { type: i2.MessagesConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,