import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ArrangementPrivilegesGetResponseBody } from '../model/models';
import { PresentationUserDataItemPermission } from '../model/models';
import { PrivilegesGetResponseBody } from '../model/models';
import { UserPermissionsSummaryGetResponseBody } from '../model/models';
import { UsersByPermission } from '../model/models';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetArrangementUserPermissionCheckRequestParams {
    ["id"]: string;
    ["resource"]: string;
    ["function"]: string;
    ["privilege"]: string;
}
export interface GetArrangementUserPrivilegesRequestParams {
    ["functionName"]: string;
    ["resourceName"]: string;
    ["privilegeName"]?: string;
}
export interface GetCheckUserPermissionRequestParams {
    ["functionName"]: string;
    ["resourceName"]: string;
    ["privileges"]: string;
}
export interface GetDataItemPermissionsContextRequestParams {
    ["functionName"]?: string;
    ["resourceName"]?: string;
    ["privilege"]?: string;
    ["dataGroupType"]?: string;
    ["dataItemId"]?: string;
}
export interface GetUserPrivilegesRequestParams {
    ["functionName"]: string;
    ["resourceName"]: string;
}
export interface GetUsersByPermissionsRequestParams {
    ["functionName"]: string;
    ["serviceAgreementId"]?: string;
    ["privilege"]?: string;
    ["dataGroupType"]?: string;
    ["dataItemId"]?: string;
}
export declare class UsersHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccessControlConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccessControlConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getArrangementUserPermissionCheck(requestParameters: GetArrangementUserPermissionCheckRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    getArrangementUserPermissionCheck(requestParameters: GetArrangementUserPermissionCheckRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    getArrangementUserPermissionCheck(requestParameters: GetArrangementUserPermissionCheckRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    getArrangementUserPermissionCheckUrl(requestParameters: GetArrangementUserPermissionCheckRequestParams): string;
    getArrangementUserPrivileges(requestParameters: GetArrangementUserPrivilegesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ArrangementPrivilegesGetResponseBody>>;
    getArrangementUserPrivileges(requestParameters: GetArrangementUserPrivilegesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ArrangementPrivilegesGetResponseBody>>>;
    getArrangementUserPrivileges(requestParameters: GetArrangementUserPrivilegesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ArrangementPrivilegesGetResponseBody>>>;
    getArrangementUserPrivilegesUrl(requestParameters: GetArrangementUserPrivilegesRequestParams): string;
    getCheckUserPermission(requestParameters: GetCheckUserPermissionRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    getCheckUserPermission(requestParameters: GetCheckUserPermissionRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    getCheckUserPermission(requestParameters: GetCheckUserPermissionRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    getCheckUserPermissionUrl(requestParameters: GetCheckUserPermissionRequestParams): string;
    getDataItemPermissionsContext(requestParameters: GetDataItemPermissionsContextRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PresentationUserDataItemPermission>>;
    getDataItemPermissionsContext(requestParameters: GetDataItemPermissionsContextRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PresentationUserDataItemPermission>>>;
    getDataItemPermissionsContext(requestParameters: GetDataItemPermissionsContextRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PresentationUserDataItemPermission>>>;
    getDataItemPermissionsContextUrl(requestParameters: GetDataItemPermissionsContextRequestParams): string;
    getUserPermissionsSummary(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<UserPermissionsSummaryGetResponseBody>>;
    getUserPermissionsSummary(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<UserPermissionsSummaryGetResponseBody>>>;
    getUserPermissionsSummary(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<UserPermissionsSummaryGetResponseBody>>>;
    getUserPermissionsSummaryUrl(): string;
    getUserPrivileges(requestParameters: GetUserPrivilegesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PrivilegesGetResponseBody>>;
    getUserPrivileges(requestParameters: GetUserPrivilegesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PrivilegesGetResponseBody>>>;
    getUserPrivileges(requestParameters: GetUserPrivilegesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PrivilegesGetResponseBody>>>;
    getUserPrivilegesUrl(requestParameters: GetUserPrivilegesRequestParams): string;
    getUsersByPermissions(requestParameters: GetUsersByPermissionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UsersByPermission>;
    getUsersByPermissions(requestParameters: GetUsersByPermissionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UsersByPermission>>;
    getUsersByPermissions(requestParameters: GetUsersByPermissionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UsersByPermission>>;
    getUsersByPermissionsUrl(requestParameters: GetUsersByPermissionsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<UsersHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UsersHttpService>;
}
