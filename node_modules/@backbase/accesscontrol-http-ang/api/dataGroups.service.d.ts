import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { DataGroupItem } from '../model/models';
import { DataGroupItemBase } from '../model/models';
import { GetDataGroupItem } from '../model/models';
import { IdItem } from '../model/models';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteDataGroupByIdRequestParams {
    ["id"]: string;
}
export interface GetDataGroupByIdRequestParams {
    ["id"]: string;
}
export interface GetDataGroupsRequestParams {
    ["serviceAgreementId"]: string;
    ["type"]?: string;
    ["includeItems"]?: boolean;
}
export interface PostDataGroupsRequestParams {
    ["dataGroupItemBase"]?: DataGroupItemBase;
}
export interface PutDataGroupByIdRequestParams {
    ["id"]: string;
    ["dataGroupItem"]?: DataGroupItem;
}
export declare class DataGroupsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccessControlConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccessControlConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteDataGroupById(requestParameters: DeleteDataGroupByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteDataGroupById(requestParameters: DeleteDataGroupByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteDataGroupById(requestParameters: DeleteDataGroupByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteDataGroupByIdUrl(requestParameters: DeleteDataGroupByIdRequestParams): string;
    getDataGroupById(requestParameters: GetDataGroupByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetDataGroupItem>;
    getDataGroupById(requestParameters: GetDataGroupByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetDataGroupItem>>;
    getDataGroupById(requestParameters: GetDataGroupByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetDataGroupItem>>;
    getDataGroupByIdUrl(requestParameters: GetDataGroupByIdRequestParams): string;
    getDataGroups(requestParameters: GetDataGroupsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<GetDataGroupItem>>;
    getDataGroups(requestParameters: GetDataGroupsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<GetDataGroupItem>>>;
    getDataGroups(requestParameters: GetDataGroupsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<GetDataGroupItem>>>;
    getDataGroupsUrl(requestParameters: GetDataGroupsRequestParams): string;
    postDataGroups(requestParameters: PostDataGroupsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<IdItem>;
    postDataGroups(requestParameters: PostDataGroupsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<IdItem>>;
    postDataGroups(requestParameters: PostDataGroupsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<IdItem>>;
    postDataGroupsUrl(requestParameters: PostDataGroupsRequestParams): string;
    putDataGroupById(requestParameters: PutDataGroupByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putDataGroupById(requestParameters: PutDataGroupByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putDataGroupById(requestParameters: PutDataGroupByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putDataGroupByIdUrl(requestParameters: PutDataGroupByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataGroupsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DataGroupsHttpService>;
}
