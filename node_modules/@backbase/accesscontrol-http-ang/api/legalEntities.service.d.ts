import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetServiceAgreement } from '../model/models';
import { LegalEntityAsParticipantCreateItem } from '../model/models';
import { LegalEntityAsParticipantItemId } from '../model/models';
import { LegalEntityCreateItem } from '../model/models';
import { LegalEntityExternalDataItem } from '../model/models';
import { LegalEntityItem } from '../model/models';
import { LegalEntityItemBase } from '../model/models';
import { LegalEntityItemId } from '../model/models';
import { SearchSubEntitiesParameters } from '../model/models';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetLegalEntitiesRequestParams {
    ["parentEntityId"]?: string;
}
export interface GetLegalEntityByExternalIdRequestParams {
    ["externalId"]: string;
}
export interface GetLegalEntityByIdRequestParams {
    ["legalEntityId"]: string;
}
export interface GetLegalEntityExternalDataRequestParams {
    ["field"]?: string;
    ["term"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface GetMasterServiceAgreementRequestParams {
    ["legalEntityId"]: string;
}
export interface GetSegmentationRequestParams {
    ["businessFunction"]: string;
    ["query"]?: string;
    ["privilege"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface PostLegalEntitiesRequestParams {
    ["legalEntityCreateItem"]?: LegalEntityCreateItem;
}
export interface PostLegalEntitiesAsParticipantRequestParams {
    ["legalEntityAsParticipantCreateItem"]?: LegalEntityAsParticipantCreateItem;
}
export interface PostSubEntitiesRequestParams {
    ["searchSubEntitiesParameters"]?: SearchSubEntitiesParameters;
}
export declare class LegalEntitiesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccessControlConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccessControlConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getLegalEntities(requestParameters: GetLegalEntitiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<LegalEntityItem>>;
    getLegalEntities(requestParameters: GetLegalEntitiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<LegalEntityItem>>>;
    getLegalEntities(requestParameters: GetLegalEntitiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<LegalEntityItem>>>;
    getLegalEntitiesUrl(requestParameters: GetLegalEntitiesRequestParams): string;
    getLegalEntityByExternalId(requestParameters: GetLegalEntityByExternalIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LegalEntityItemBase>;
    getLegalEntityByExternalId(requestParameters: GetLegalEntityByExternalIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LegalEntityItemBase>>;
    getLegalEntityByExternalId(requestParameters: GetLegalEntityByExternalIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LegalEntityItemBase>>;
    getLegalEntityByExternalIdUrl(requestParameters: GetLegalEntityByExternalIdRequestParams): string;
    getLegalEntityById(requestParameters: GetLegalEntityByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LegalEntityItem>;
    getLegalEntityById(requestParameters: GetLegalEntityByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LegalEntityItem>>;
    getLegalEntityById(requestParameters: GetLegalEntityByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LegalEntityItem>>;
    getLegalEntityByIdUrl(requestParameters: GetLegalEntityByIdRequestParams): string;
    getLegalEntityExternalData(requestParameters: GetLegalEntityExternalDataRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<LegalEntityExternalDataItem>>;
    getLegalEntityExternalData(requestParameters: GetLegalEntityExternalDataRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<LegalEntityExternalDataItem>>>;
    getLegalEntityExternalData(requestParameters: GetLegalEntityExternalDataRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<LegalEntityExternalDataItem>>>;
    getLegalEntityExternalDataUrl(requestParameters: GetLegalEntityExternalDataRequestParams): string;
    getLegalEntityForUser(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LegalEntityItem>;
    getLegalEntityForUser(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LegalEntityItem>>;
    getLegalEntityForUser(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LegalEntityItem>>;
    getLegalEntityForUserUrl(): string;
    getMasterServiceAgreement(requestParameters: GetMasterServiceAgreementRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetServiceAgreement>;
    getMasterServiceAgreement(requestParameters: GetMasterServiceAgreementRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetServiceAgreement>>;
    getMasterServiceAgreement(requestParameters: GetMasterServiceAgreementRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetServiceAgreement>>;
    getMasterServiceAgreementUrl(requestParameters: GetMasterServiceAgreementRequestParams): string;
    getSegmentation(requestParameters: GetSegmentationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<LegalEntityItem>>;
    getSegmentation(requestParameters: GetSegmentationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<LegalEntityItem>>>;
    getSegmentation(requestParameters: GetSegmentationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<LegalEntityItem>>>;
    getSegmentationUrl(requestParameters: GetSegmentationRequestParams): string;
    postLegalEntities(requestParameters: PostLegalEntitiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LegalEntityItemId>;
    postLegalEntities(requestParameters: PostLegalEntitiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LegalEntityItemId>>;
    postLegalEntities(requestParameters: PostLegalEntitiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LegalEntityItemId>>;
    postLegalEntitiesUrl(requestParameters: PostLegalEntitiesRequestParams): string;
    postLegalEntitiesAsParticipant(requestParameters: PostLegalEntitiesAsParticipantRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<LegalEntityAsParticipantItemId>;
    postLegalEntitiesAsParticipant(requestParameters: PostLegalEntitiesAsParticipantRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<LegalEntityAsParticipantItemId>>;
    postLegalEntitiesAsParticipant(requestParameters: PostLegalEntitiesAsParticipantRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<LegalEntityAsParticipantItemId>>;
    postLegalEntitiesAsParticipantUrl(requestParameters: PostLegalEntitiesAsParticipantRequestParams): string;
    postSubEntities(requestParameters: PostSubEntitiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<LegalEntityItemBase>>;
    postSubEntities(requestParameters: PostSubEntitiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<LegalEntityItemBase>>>;
    postSubEntities(requestParameters: PostSubEntitiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<LegalEntityItemBase>>>;
    postSubEntitiesUrl(requestParameters: PostSubEntitiesRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<LegalEntitiesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LegalEntitiesHttpService>;
}
