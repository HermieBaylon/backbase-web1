import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FunctionGroupItem } from '../model/models';
import { FunctionGroupItemBase } from '../model/models';
import { FunctionGroupItemPut } from '../model/models';
import { IdItem } from '../model/models';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteFunctionGroupByIdRequestParams {
    ["id"]: string;
}
export interface GetFunctionGroupByIdRequestParams {
    ["id"]: string;
}
export interface GetFunctionGroupsRequestParams {
    ["serviceAgreementId"]: string;
}
export interface PostFunctionGroupsRequestParams {
    ["functionGroupItemBase"]?: FunctionGroupItemBase;
}
export interface PutFunctionGroupByIdRequestParams {
    ["id"]: string;
    ["functionGroupItemPut"]?: FunctionGroupItemPut;
}
export declare class FunctionGroupsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccessControlConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccessControlConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteFunctionGroupById(requestParameters: DeleteFunctionGroupByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteFunctionGroupById(requestParameters: DeleteFunctionGroupByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteFunctionGroupById(requestParameters: DeleteFunctionGroupByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteFunctionGroupByIdUrl(requestParameters: DeleteFunctionGroupByIdRequestParams): string;
    getFunctionGroupById(requestParameters: GetFunctionGroupByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<FunctionGroupItem>;
    getFunctionGroupById(requestParameters: GetFunctionGroupByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<FunctionGroupItem>>;
    getFunctionGroupById(requestParameters: GetFunctionGroupByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<FunctionGroupItem>>;
    getFunctionGroupByIdUrl(requestParameters: GetFunctionGroupByIdRequestParams): string;
    getFunctionGroups(requestParameters: GetFunctionGroupsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<FunctionGroupItem>>;
    getFunctionGroups(requestParameters: GetFunctionGroupsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<FunctionGroupItem>>>;
    getFunctionGroups(requestParameters: GetFunctionGroupsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<FunctionGroupItem>>>;
    getFunctionGroupsUrl(requestParameters: GetFunctionGroupsRequestParams): string;
    postFunctionGroups(requestParameters: PostFunctionGroupsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<IdItem>;
    postFunctionGroups(requestParameters: PostFunctionGroupsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<IdItem>>;
    postFunctionGroups(requestParameters: PostFunctionGroupsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<IdItem>>;
    postFunctionGroupsUrl(requestParameters: PostFunctionGroupsRequestParams): string;
    putFunctionGroupById(requestParameters: PutFunctionGroupByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putFunctionGroupById(requestParameters: PutFunctionGroupByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putFunctionGroupById(requestParameters: PutFunctionGroupByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putFunctionGroupByIdUrl(requestParameters: PutFunctionGroupByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<FunctionGroupsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<FunctionGroupsHttpService>;
}
