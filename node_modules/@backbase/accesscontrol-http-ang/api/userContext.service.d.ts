import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PermissionsDataGroup } from '../model/models';
import { PermissionsRequest } from '../model/models';
import { Serviceagreementpartialitem } from '../model/models';
import { UserContextPOST } from '../model/models';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetUserContextPermissionsRequestParams {
    ["permissionsRequest"]?: PermissionsRequest;
}
export interface GetUserContextServiceAgreementsRequestParams {
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface PostUserContextRequestParams {
    ["userContextPOST"]?: UserContextPOST;
}
export declare class UserContextHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccessControlConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccessControlConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getUserContextPermissions(requestParameters: GetUserContextPermissionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PermissionsDataGroup>;
    getUserContextPermissions(requestParameters: GetUserContextPermissionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PermissionsDataGroup>>;
    getUserContextPermissions(requestParameters: GetUserContextPermissionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PermissionsDataGroup>>;
    getUserContextPermissionsUrl(requestParameters: GetUserContextPermissionsRequestParams): string;
    getUserContextServiceAgreements(requestParameters: GetUserContextServiceAgreementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<Serviceagreementpartialitem>>;
    getUserContextServiceAgreements(requestParameters: GetUserContextServiceAgreementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<Serviceagreementpartialitem>>>;
    getUserContextServiceAgreements(requestParameters: GetUserContextServiceAgreementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<Serviceagreementpartialitem>>>;
    getUserContextServiceAgreementsUrl(requestParameters: GetUserContextServiceAgreementsRequestParams): string;
    postUserContext(requestParameters: PostUserContextRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postUserContext(requestParameters: PostUserContextRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postUserContext(requestParameters: PostUserContextRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postUserContextUrl(requestParameters: PostUserContextRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserContextHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserContextHttpService>;
}
