import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FunctionsGetResponseBody } from '../model/models';
import { ListOfFunctionGroupsWithDataGroups } from '../model/models';
import { PresentationApprovalPermissions } from '../model/models';
import { PresentationApprovalStatus } from '../model/models';
import { PresentationServiceAgreement } from '../model/models';
import { ServiceAgreementParticipantsGetResponseBody } from '../model/models';
import { ServiceAgreementSave } from '../model/models';
import { ServiceAgreementUsersGetResponseBody } from '../model/models';
import { UnexposedUsersGetResponseBody } from '../model/models';
import { UsersForServiceAgreement } from '../model/models';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetAssignUsersPermissionsRequestParams {
    ["id"]: string;
    ["userId"]: string;
}
export interface GetBusinessfunctionsRequestParams {
    ["id"]: string;
}
export interface GetServiceAgreementParticipantsRequestParams {
    ["id"]: string;
}
export interface GetServiceAgreementUsersSARequestParams {
    ["id"]: string;
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface GetServiceAgreementsRequestParams {
    ["creatorId"]?: string;
    ["userId"]?: string;
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface GetUnexposedUsersSARequestParams {
    ["id"]: string;
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface PostUsersAddSARequestParams {
    ["id"]: string;
    ["usersForServiceAgreement"]?: UsersForServiceAgreement;
}
export interface PostUsersRemoveSARequestParams {
    ["id"]: string;
    ["usersForServiceAgreement"]?: UsersForServiceAgreement;
}
export interface PutAssignUsersPermissionsRequestParams {
    ["id"]: string;
    ["userId"]: string;
    ["listOfFunctionGroupsWithDataGroups"]?: ListOfFunctionGroupsWithDataGroups;
}
export interface PutServiceAgreementSaveRequestParams {
    ["id"]: string;
    ["serviceAgreementSave"]?: ServiceAgreementSave;
}
export declare class ServiceAgreementsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccessControlConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccessControlConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getAssignUsersPermissions(requestParameters: GetAssignUsersPermissionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationApprovalPermissions>;
    getAssignUsersPermissions(requestParameters: GetAssignUsersPermissionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationApprovalPermissions>>;
    getAssignUsersPermissions(requestParameters: GetAssignUsersPermissionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationApprovalPermissions>>;
    getAssignUsersPermissionsUrl(requestParameters: GetAssignUsersPermissionsRequestParams): string;
    getBusinessfunctions(requestParameters: GetBusinessfunctionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<FunctionsGetResponseBody>>;
    getBusinessfunctions(requestParameters: GetBusinessfunctionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<FunctionsGetResponseBody>>>;
    getBusinessfunctions(requestParameters: GetBusinessfunctionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<FunctionsGetResponseBody>>>;
    getBusinessfunctionsUrl(requestParameters: GetBusinessfunctionsRequestParams): string;
    getContextServiceAgreementParticipants(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ServiceAgreementParticipantsGetResponseBody>>;
    getContextServiceAgreementParticipants(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ServiceAgreementParticipantsGetResponseBody>>>;
    getContextServiceAgreementParticipants(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ServiceAgreementParticipantsGetResponseBody>>>;
    getContextServiceAgreementParticipantsUrl(): string;
    getServiceAgreementParticipants(requestParameters: GetServiceAgreementParticipantsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ServiceAgreementParticipantsGetResponseBody>>;
    getServiceAgreementParticipants(requestParameters: GetServiceAgreementParticipantsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ServiceAgreementParticipantsGetResponseBody>>>;
    getServiceAgreementParticipants(requestParameters: GetServiceAgreementParticipantsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ServiceAgreementParticipantsGetResponseBody>>>;
    getServiceAgreementParticipantsUrl(requestParameters: GetServiceAgreementParticipantsRequestParams): string;
    getServiceAgreementUsersSA(requestParameters: GetServiceAgreementUsersSARequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ServiceAgreementUsersGetResponseBody>>;
    getServiceAgreementUsersSA(requestParameters: GetServiceAgreementUsersSARequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ServiceAgreementUsersGetResponseBody>>>;
    getServiceAgreementUsersSA(requestParameters: GetServiceAgreementUsersSARequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ServiceAgreementUsersGetResponseBody>>>;
    getServiceAgreementUsersSAUrl(requestParameters: GetServiceAgreementUsersSARequestParams): string;
    getServiceAgreements(requestParameters: GetServiceAgreementsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PresentationServiceAgreement>>;
    getServiceAgreements(requestParameters: GetServiceAgreementsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PresentationServiceAgreement>>>;
    getServiceAgreements(requestParameters: GetServiceAgreementsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PresentationServiceAgreement>>>;
    getServiceAgreementsUrl(requestParameters: GetServiceAgreementsRequestParams): string;
    getUnexposedUsersSA(requestParameters: GetUnexposedUsersSARequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<UnexposedUsersGetResponseBody>>;
    getUnexposedUsersSA(requestParameters: GetUnexposedUsersSARequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<UnexposedUsersGetResponseBody>>>;
    getUnexposedUsersSA(requestParameters: GetUnexposedUsersSARequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<UnexposedUsersGetResponseBody>>>;
    getUnexposedUsersSAUrl(requestParameters: GetUnexposedUsersSARequestParams): string;
    postUsersAddSA(requestParameters: PostUsersAddSARequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postUsersAddSA(requestParameters: PostUsersAddSARequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postUsersAddSA(requestParameters: PostUsersAddSARequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postUsersAddSAUrl(requestParameters: PostUsersAddSARequestParams): string;
    postUsersRemoveSA(requestParameters: PostUsersRemoveSARequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postUsersRemoveSA(requestParameters: PostUsersRemoveSARequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postUsersRemoveSA(requestParameters: PostUsersRemoveSARequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postUsersRemoveSAUrl(requestParameters: PostUsersRemoveSARequestParams): string;
    putAssignUsersPermissions(requestParameters: PutAssignUsersPermissionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationApprovalStatus>;
    putAssignUsersPermissions(requestParameters: PutAssignUsersPermissionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationApprovalStatus>>;
    putAssignUsersPermissions(requestParameters: PutAssignUsersPermissionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationApprovalStatus>>;
    putAssignUsersPermissionsUrl(requestParameters: PutAssignUsersPermissionsRequestParams): string;
    putServiceAgreementSave(requestParameters: PutServiceAgreementSaveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putServiceAgreementSave(requestParameters: PutServiceAgreementSaveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putServiceAgreementSave(requestParameters: PutServiceAgreementSaveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putServiceAgreementSaveUrl(requestParameters: PutServiceAgreementSaveRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ServiceAgreementsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ServiceAgreementsHttpService>;
}
