import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { IdItem } from '../model/models';
import { ServiceAgreementItem } from '../model/models';
import { ServiceAgreementPost } from '../model/models';
import { ServiceAgreementStatePut } from '../model/models';
import { ServiceAgreementUsersGetResponseBody } from '../model/models';
import { UnexposedUsersGetResponseBody } from '../model/models';
import { UpdateAdmins } from '../model/models';
import { UsersForServiceAgreement } from '../model/models';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetServiceAgreementRequestParams {
    ["creatorId"]: string;
    ["cursor"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["query"]?: string;
}
export interface GetServiceAgreementAdminsRequestParams {
    ["serviceAgreementId"]: string;
}
export interface GetServiceAgreementItemRequestParams {
    ["serviceAgreementId"]: string;
}
export interface GetServiceAgreementUsersRequestParams {
    ["from"]?: number;
    ["size"]?: number;
    ["cursor"]?: string;
    ["query"]?: string;
}
export interface GetUnexposedUsersRequestParams {
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface PostServiceAgreementRequestParams {
    ["serviceAgreementPost"]?: ServiceAgreementPost;
}
export interface PostUsersAddRequestParams {
    ["usersForServiceAgreement"]?: UsersForServiceAgreement;
}
export interface PostUsersRemoveRequestParams {
    ["usersForServiceAgreement"]?: UsersForServiceAgreement;
}
export interface PutAdminsRequestParams {
    ["id"]: string;
    ["updateAdmins"]?: UpdateAdmins;
}
export interface PutServiceAgreementStateRequestParams {
    ["serviceAgreementId"]: string;
    ["serviceAgreementStatePut"]?: ServiceAgreementStatePut;
}
export declare class ServiceAgreementHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AccessControlConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AccessControlConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getServiceAgreement(requestParameters: GetServiceAgreementRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ServiceAgreementItem>>;
    getServiceAgreement(requestParameters: GetServiceAgreementRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ServiceAgreementItem>>>;
    getServiceAgreement(requestParameters: GetServiceAgreementRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ServiceAgreementItem>>>;
    getServiceAgreementUrl(requestParameters: GetServiceAgreementRequestParams): string;
    getServiceAgreementAdmins(requestParameters: GetServiceAgreementAdminsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ServiceAgreementUsersGetResponseBody>>;
    getServiceAgreementAdmins(requestParameters: GetServiceAgreementAdminsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ServiceAgreementUsersGetResponseBody>>>;
    getServiceAgreementAdmins(requestParameters: GetServiceAgreementAdminsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ServiceAgreementUsersGetResponseBody>>>;
    getServiceAgreementAdminsUrl(requestParameters: GetServiceAgreementAdminsRequestParams): string;
    getServiceAgreementContext(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ServiceAgreementItem>;
    getServiceAgreementContext(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ServiceAgreementItem>>;
    getServiceAgreementContext(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ServiceAgreementItem>>;
    getServiceAgreementContextUrl(): string;
    getServiceAgreementItem(requestParameters: GetServiceAgreementItemRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ServiceAgreementItem>;
    getServiceAgreementItem(requestParameters: GetServiceAgreementItemRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ServiceAgreementItem>>;
    getServiceAgreementItem(requestParameters: GetServiceAgreementItemRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ServiceAgreementItem>>;
    getServiceAgreementItemUrl(requestParameters: GetServiceAgreementItemRequestParams): string;
    getServiceAgreementUsers(requestParameters: GetServiceAgreementUsersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ServiceAgreementUsersGetResponseBody>>;
    getServiceAgreementUsers(requestParameters: GetServiceAgreementUsersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ServiceAgreementUsersGetResponseBody>>>;
    getServiceAgreementUsers(requestParameters: GetServiceAgreementUsersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ServiceAgreementUsersGetResponseBody>>>;
    getServiceAgreementUsersUrl(requestParameters: GetServiceAgreementUsersRequestParams): string;
    getUnexposedUsers(requestParameters: GetUnexposedUsersRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<UnexposedUsersGetResponseBody>>;
    getUnexposedUsers(requestParameters: GetUnexposedUsersRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<UnexposedUsersGetResponseBody>>>;
    getUnexposedUsers(requestParameters: GetUnexposedUsersRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<UnexposedUsersGetResponseBody>>>;
    getUnexposedUsersUrl(requestParameters: GetUnexposedUsersRequestParams): string;
    postServiceAgreement(requestParameters: PostServiceAgreementRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<IdItem>;
    postServiceAgreement(requestParameters: PostServiceAgreementRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<IdItem>>;
    postServiceAgreement(requestParameters: PostServiceAgreementRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<IdItem>>;
    postServiceAgreementUrl(requestParameters: PostServiceAgreementRequestParams): string;
    postUsersAdd(requestParameters: PostUsersAddRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postUsersAdd(requestParameters: PostUsersAddRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postUsersAdd(requestParameters: PostUsersAddRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postUsersAddUrl(requestParameters: PostUsersAddRequestParams): string;
    postUsersRemove(requestParameters: PostUsersRemoveRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postUsersRemove(requestParameters: PostUsersRemoveRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postUsersRemove(requestParameters: PostUsersRemoveRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postUsersRemoveUrl(requestParameters: PostUsersRemoveRequestParams): string;
    putAdmins(requestParameters: PutAdminsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putAdmins(requestParameters: PutAdminsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putAdmins(requestParameters: PutAdminsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putAdminsUrl(requestParameters: PutAdminsRequestParams): string;
    putServiceAgreementState(requestParameters: PutServiceAgreementStateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putServiceAgreementState(requestParameters: PutServiceAgreementStateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putServiceAgreementState(requestParameters: PutServiceAgreementStateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putServiceAgreementStateUrl(requestParameters: PutServiceAgreementStateRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ServiceAgreementHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ServiceAgreementHttpService>;
}
