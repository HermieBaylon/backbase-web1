(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/accesscontrol-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["accesscontrol-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ApprovalStatus = {
        APPROVED: 'APPROVED',
        PENDING: 'PENDING',
        REJECTED: 'REJECTED'
    };

    var FunctionGroupType = {
        REGULAR: 'REGULAR',
        TEMPLATE: 'TEMPLATE',
        SYSTEM: 'SYSTEM'
    };

    var LegalEntityType = {
        CUSTOMER: 'CUSTOMER',
        BANK: 'BANK'
    };

    var PermissionMatrixAction = {
        ADDED: 'added',
        REMOVED: 'removed',
        CHANGED: 'changed',
        UNCHANGED: 'unchanged'
    };

    var PresentationApprovalAction = {
        CREATE: 'CREATE',
        EDIT: 'EDIT',
        DELETE: 'DELETE'
    };

    var PresentationApprovalCategory = {
        AssignPermissions: 'Assign Permissions',
        AssignPermissionsByWizard: 'Assign Permissions by Wizard',
        ManageDataGroups: 'Manage Data Groups',
        ManageLimits: 'Manage Limits',
        ManageShadowLimits: 'Manage Shadow Limits',
        UnlockUser: 'Unlock User',
        ManageFunctionGroups: 'Manage Function Groups',
        ManageServiceAgreements: 'Manage Service Agreements'
    };

    var Status = {
        ENABLED: 'ENABLED',
        DISABLED: 'DISABLED'
    };

    var ACCESS_CONTROL_BASE_PATH = new i0.InjectionToken('ACCESS_CONTROL_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var AccessControlConfiguration = /** @class */ (function () {
        function AccessControlConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        AccessControlConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        AccessControlConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        AccessControlConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        AccessControlConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return AccessControlConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module AccessControlConfiguration');

    var AccessControlApiModule = /** @class */ (function () {
        function AccessControlApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('AccessControlApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        AccessControlApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: AccessControlApiModule,
                providers: [{ provide: AccessControlConfiguration, useFactory: configurationFactory }]
            };
        };
        return AccessControlApiModule;
    }());
    AccessControlApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessControlApiModule, deps: [{ token: AccessControlApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: AccessControlConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AccessControlApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessControlApiModule });
    AccessControlApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessControlApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessControlApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: AccessControlApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: AccessControlConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var ApprovalsHttpService = /** @class */ (function () {
        function ApprovalsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ApprovalsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ApprovalsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ApprovalsHttpService.prototype.getApprovals = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/approvals", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getApprovalsUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals" + (queryString ? "?" + queryString : '');
        };
        ApprovalsHttpService.prototype.getPresentationDataGroupApprovalDetailsItem = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getPresentationDataGroupApprovalDetailsItem.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/data-group", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getPresentationDataGroupApprovalDetailsItemUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getPresentationDataGroupApprovalDetailsItem.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/data-group";
        };
        ApprovalsHttpService.prototype.getPresentationFunctionGroupApprovalDetailsItem = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getPresentationFunctionGroupApprovalDetailsItem.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/function-group", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getPresentationFunctionGroupApprovalDetailsItemUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getPresentationFunctionGroupApprovalDetailsItem.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/function-group";
        };
        ApprovalsHttpService.prototype.getPresentationPermissionsApprovalDetailsItem = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getPresentationPermissionsApprovalDetailsItem.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/permissions", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getPresentationPermissionsApprovalDetailsItemUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getPresentationPermissionsApprovalDetailsItem.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/permissions";
        };
        ApprovalsHttpService.prototype.getServiceAgreementApprovalDetailsItem = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getServiceAgreementApprovalDetailsItem.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/service-agreement", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getServiceAgreementApprovalDetailsItemUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getServiceAgreementApprovalDetailsItem.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/service-agreement";
        };
        ApprovalsHttpService.prototype.getWizardApprovalDetails = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getWizardApprovalDetails.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/wizard-setup", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getWizardApprovalDetailsUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getWizardApprovalDetails.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/wizard-setup";
        };
        ApprovalsHttpService.prototype.postApproveApprovalRequest = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling postApproveApprovalRequest.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/approve", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.postApproveApprovalRequestUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling postApproveApprovalRequest.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/approve";
        };
        ApprovalsHttpService.prototype.postRejectApprovalRequest = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling postRejectApprovalRequest.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/reject", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.postRejectApprovalRequestUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling postRejectApprovalRequest.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/approvals/" + encodeURIComponent(String(_approvalId)) + "/reject";
        };
        return ApprovalsHttpService;
    }());
    ApprovalsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ApprovalsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ApprovalsHttpServiceGetApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "creatorUserFullName": "User 1",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Assign Permissions",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b6"
                        }, {
                            "creatorUserFullName": "User 2",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Data Groups",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b7"
                        }, {
                            "creatorUserFullName": "User 3",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Unlock User",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b8"
                        }, {
                            "creatorUserFullName": "User 4",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Limits",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b9"
                        }, {
                            "creatorUserFullName": "User 5",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Shadow Limits",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b1"
                        }, {
                            "creatorUserFullName": "User 6",
                            "creatorUserId": "5643e686d31e3567b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Function Groups",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12c4"
                        }]
                },
            ]
        }]);
    var ApprovalsHttpServiceGetPresentationDataGroupApprovalDetailsItemMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/data-group",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "dataGroupId": "0955e686d31e4216b3dd5d66161d536d",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "serviceAgreementName": "Sa name",
                        "type": "ARRANGEMENTS",
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "action": "EDIT",
                        "oldState": {
                            "name": "DG name",
                            "description": "DG desc"
                        },
                        "newState": {
                            "name": "new DG name",
                            "description": "new DG desc"
                        },
                        "addedDataItems": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4612", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4613"],
                        "removedDataItems": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4614"],
                        "unmodifiedDataItems": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4615", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4611"],
                        "legalEntityIds": ["cd0968b3-3520-4280-8699-cd46c4d6df72", "3c684e80-c646-4148-bc20-37718eab4d97"]
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceGetPresentationFunctionGroupApprovalDetailsItemMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/function-group",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "functionGroupId": "0955e686d31e4216b3dd5d66161d536d",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "serviceAgreementName": "saName",
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "action": "EDIT",
                        "oldState": {
                            "name": "FG1",
                            "description": "FG1 description",
                            "approvalTypeId": "approvalTypeIdA",
                            "validFromDate": "2020-01-01",
                            "validFromTime": "00:00:00",
                            "validUntilDate": "2025-01-01",
                            "validUntilTime": "23:59:59"
                        },
                        "newState": {
                            "name": "FG2",
                            "description": "FG2 description",
                            "approvalTypeId": "approvalTypeIdB",
                            "validFromDate": "2020-06-10",
                            "validFromTime": "04:32:24",
                            "validUntilDate": "2023-01-01",
                            "validUntilTime": "23:53:51"
                        },
                        "permissionMatrix": [{
                                "functionId": "1012",
                                "functionCode": "manage.limits",
                                "resource": "Limits",
                                "name": "Manage Limits",
                                "action": "changed",
                                "privileges": {
                                    "view": {
                                        "old": true,
                                        "new": false
                                    },
                                    "create": {
                                        "old": false,
                                        "new": true
                                    },
                                    "edit": {
                                        "old": true,
                                        "new": false
                                    },
                                    "delete": {
                                        "old": false,
                                        "new": false
                                    },
                                    "approve": {
                                        "old": true,
                                        "new": true
                                    },
                                    "cancel": {
                                        "old": false,
                                        "new": true
                                    },
                                    "execute": {
                                        "old": false,
                                        "new": true
                                    }
                                }
                            }, {
                                "functionId": "1009",
                                "functionCode": "assign.permissions",
                                "resource": "Service Agreement",
                                "name": "Assign Permissions",
                                "action": "added",
                                "privileges": {
                                    "view": {
                                        "new": true
                                    },
                                    "create": {
                                        "new": true
                                    },
                                    "edit": {
                                        "new": false
                                    },
                                    "delete": {
                                        "new": true
                                    },
                                    "approve": {
                                        "new": false
                                    },
                                    "cancel": {
                                        "new": true
                                    },
                                    "execute": {
                                        "new": true
                                    }
                                }
                            }, {
                                "functionId": "1046",
                                "functionCode": "ach.debit",
                                "resource": "Payments",
                                "name": "ACH Debit",
                                "action": "removed",
                                "privileges": {
                                    "view": {
                                        "old": true
                                    },
                                    "create": {
                                        "old": true
                                    },
                                    "edit": {
                                        "old": false
                                    },
                                    "delete": {
                                        "old": true
                                    },
                                    "approve": {
                                        "old": false
                                    },
                                    "cancel": {
                                        "old": true
                                    },
                                    "execute": {
                                        "old": true
                                    }
                                }
                            }, {
                                "functionId": "1010",
                                "functionCode": "manage.users",
                                "resource": "User",
                                "name": "Manage Users",
                                "action": "unchanged",
                                "privileges": {
                                    "view": {
                                        "old": true,
                                        "new": true
                                    },
                                    "create": {
                                        "old": true,
                                        "new": true
                                    },
                                    "edit": {
                                        "old": true,
                                        "new": true
                                    },
                                    "delete": {
                                        "old": false,
                                        "new": false
                                    },
                                    "approve": {
                                        "old": true,
                                        "new": true
                                    },
                                    "cancel": {
                                        "old": false,
                                        "new": false
                                    }
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceGetPresentationPermissionsApprovalDetailsItemMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "creatorUserFullName": "John Snow",
                        "creatorUserId": "69ef5b3c-3997-4ee9-9f11-cb14447cf572",
                        "createdAt": "2018-09-28T16:41:41.090Z",
                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "userFullName": "Jack Sparrow",
                        "serviceAgreementId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "serviceAgreementName": "Backbase SA",
                        "serviceAgreementDescription": "Detailed desscription of the SA.",
                        "action": "EDIT",
                        "category": "Assign Permissions",
                        "newFunctionGroups": [{
                                "id": "c18dda63-27fa-4e4f-8882-24b24b0d46df",
                                "name": "FGName",
                                "type": "REGULAR",
                                "description": "Function Group Description",
                                "dataGroups": [{
                                        "id": "c18dda63-27fa-4e4f-8882-24b24b0d46df",
                                        "name": "DGName",
                                        "description": "Function Group Description",
                                        "type": "PAYEES"
                                    }],
                                "selfApprovalPolicies": [{
                                        "businessFunctionCode": "manage.users",
                                        "canSelfApprove": false
                                    }]
                            }],
                        "removedFunctionGroups": [{
                                "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "FGName",
                                "type": "TEMPLATE",
                                "description": "Function Group Description",
                                "dataGroups": [{
                                        "id": "d9b299b0-ca28-4683-a3c1-9a339abfb5e4",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CONTACTS"
                                    }],
                                "selfApprovalPolicies": [{
                                        "businessFunctionCode": "manage.users",
                                        "canSelfApprove": false
                                    }]
                            }],
                        "modifiedFunctionGroups": [{
                                "id": "d9b299b0-ca28-4683-a3c1-9a339abfb5e4",
                                "name": "FGName",
                                "type": "TEMPLATE",
                                "description": "Function Group Description",
                                "newDataGroups": [{
                                        "id": "5690bd25-b9db-493a-9659-3d5e505c7358",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CONTACTS"
                                    }],
                                "removedDataGroups": [{
                                        "id": "5f5c3714-289e-4f0c-bdb0-0b5a749f8beb",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CUSTOMERS"
                                    }],
                                "unmodifiedDataGroups": [{
                                        "id": "10c387f2-4348-483e-ba98-f9b73926df4b",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "ARRANGEMENTS"
                                    }]
                            }],
                        "unmodifiedFunctionGroups": [{
                                "id": "08cb2ed4-2691-4a28-8219-37378917e58d",
                                "name": "FGName",
                                "type": "REGULAR",
                                "description": "Function Group Description",
                                "dataGroups": [{
                                        "id": "619f3d39-9647-46c7-ac70-6218382ebc4d",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CUSTOMERS"
                                    }],
                                "selfApprovalPolicies": [{
                                        "businessFunctionCode": "manage.users",
                                        "canSelfApprove": false
                                    }]
                            }],
                        "requiredApproves": 3,
                        "completedApproves": 1,
                        "approvalLog": [{
                                "approverId": "619f3d39-9647-46c7-ac70-6218382ebc4d",
                                "approverFullName": "Donald Trump",
                                "approvedAt": "2018-10-15T16:41:41.090Z"
                            }]
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceGetServiceAgreementApprovalDetailsItemMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/service-agreement",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "action": "EDIT",
                        "oldState": {
                            "name": "FG1",
                            "description": "FG1 description",
                            "validFromDate": "2020-01-01",
                            "validFromTime": "00:00:00",
                            "validUntilDate": "2025-01-01",
                            "validUntilTime": "23:59:59",
                            "admins": ["0955e686d31e4216b3dd5d76561d536d", "0955e686d31e4216b3dd5d76164d536d", "0955e686d31e4216b3aa5d76161d536d"],
                            "legalEntities": [{
                                    "name": "LEName1",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a1c",
                                    "externalId": "C000001",
                                    "contributeUsers": true,
                                    "contributeAccount": true
                                }, {
                                    "name": "LEName2",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a2c",
                                    "externalId": "C000002",
                                    "contributeUsers": true,
                                    "contributeAccount": false
                                }]
                        },
                        "newState": {
                            "name": "FG1",
                            "description": "FG1 description",
                            "validFromDate": "2020-01-01",
                            "validFromTime": "00:00:00",
                            "validUntilDate": "2025-01-01",
                            "validUntilTime": "23:59:59",
                            "admins": ["0955e686d31e4216b3dd5d76561d536d", "0955e686d31e4216b3dd5d76164d536d", "0955e686d31e4216b3aa5d76161d522d"],
                            "legalEntities": [{
                                    "name": "LEName1",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a1c",
                                    "externalId": "C000001",
                                    "contributeUsers": true,
                                    "contributeAccount": true
                                }, {
                                    "name": "LEName2",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a2c",
                                    "externalId": "C000002",
                                    "contributeUsers": true,
                                    "contributeAccount": false
                                }, {
                                    "name": "LEName3",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a4c",
                                    "externalId": "C000003",
                                    "contributeUsers": false,
                                    "contributeAccount": true
                                }]
                        }
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceGetWizardApprovalDetailsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/wizard-setup",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "test",
                        "action": "CREATE",
                        "category": "Assign Permissions by Wizard",
                        "users": [{
                                "userId": "c7a382786d514262b75ab9531b749a2b",
                                "userFullName": "Paddy Brian"
                            }],
                        "functionGroups": [{
                                "functionGroupId": "f34f7587-5ded-4f51-94c3-3a89d1b645392"
                            }, {
                                "functionGroupId": "f34f7587-5ded-4f51-94c3-3a89d1b6453812"
                            }],
                        "serviceAgreementId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "serviceAgreementName": "AIB",
                        "accounts": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "6c1261e8-7b6b-4c14-9bb4-e976d834c730", "e6659eea893c4da48f9b7fd425de4677", "8eb58b1d048d4112a2f7591d465c3f14", "8a48e7546e11f733016e2249604f4076", "8a48e7546e11f733016e22495b6a4067", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "8a48e7546e11f733016e22496d7e409d", "8a48e7546e11f733016e2249734640af", "8a48e7546e11f733016e22496ba94097", "8a48e7546e11f733016e22494c19403a", "8a48e7546e11f733016e2249715a40a9", "8a48e7546e11f733016e2249693f4091", "8a48e7546e11f733016e2249771240bb", "8a48e7546e11f733016e22496f5f40a3"],
                        "limit": {
                            "currency": "EUR",
                            "periodicLimitsBounds": {
                                "customPeriods": [{
                                        "amount": 100,
                                        "period": "biweekly"
                                    }],
                                "daily": 100,
                                "monthly": 10000,
                                "quarterly": 100000,
                                "weekly": 1000
                            },
                            "transactionalLimitsBounds": {
                                "amount": 1000
                            }
                        },
                        "removeExistingPermissions": false
                    }
                },
            ]
        }]);
    var ApprovalsHttpServicePostApproveApprovalRequestMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/approve",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        }]);
    var ApprovalsHttpServicePostRejectApprovalRequestMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/reject",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "creatorUserFullName": "User 1",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Assign Permissions",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b6"
                        }, {
                            "creatorUserFullName": "User 2",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Data Groups",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b7"
                        }, {
                            "creatorUserFullName": "User 3",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Unlock User",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b8"
                        }, {
                            "creatorUserFullName": "User 4",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Limits",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b9"
                        }, {
                            "creatorUserFullName": "User 5",
                            "creatorUserId": "5643e686d31e4216b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Shadow Limits",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12b1"
                        }, {
                            "creatorUserFullName": "User 6",
                            "creatorUserId": "5643e686d31e3567b3ff5d66161d1234",
                            "createdAt": "2019-01-01T12:00:00Z",
                            "action": "EDIT",
                            "category": "Manage Function Groups",
                            "approvalId": "2df100c6-b12b-4102-8831-db417acf12c4"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/data-group",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "dataGroupId": "0955e686d31e4216b3dd5d66161d536d",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "serviceAgreementName": "Sa name",
                        "type": "ARRANGEMENTS",
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "action": "EDIT",
                        "oldState": {
                            "name": "DG name",
                            "description": "DG desc"
                        },
                        "newState": {
                            "name": "new DG name",
                            "description": "new DG desc"
                        },
                        "addedDataItems": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4612", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4613"],
                        "removedDataItems": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4614"],
                        "unmodifiedDataItems": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4615", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4611"],
                        "legalEntityIds": ["cd0968b3-3520-4280-8699-cd46c4d6df72", "3c684e80-c646-4148-bc20-37718eab4d97"]
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/function-group",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "functionGroupId": "0955e686d31e4216b3dd5d66161d536d",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "serviceAgreementName": "saName",
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "action": "EDIT",
                        "oldState": {
                            "name": "FG1",
                            "description": "FG1 description",
                            "approvalTypeId": "approvalTypeIdA",
                            "validFromDate": "2020-01-01",
                            "validFromTime": "00:00:00",
                            "validUntilDate": "2025-01-01",
                            "validUntilTime": "23:59:59"
                        },
                        "newState": {
                            "name": "FG2",
                            "description": "FG2 description",
                            "approvalTypeId": "approvalTypeIdB",
                            "validFromDate": "2020-06-10",
                            "validFromTime": "04:32:24",
                            "validUntilDate": "2023-01-01",
                            "validUntilTime": "23:53:51"
                        },
                        "permissionMatrix": [{
                                "functionId": "1012",
                                "functionCode": "manage.limits",
                                "resource": "Limits",
                                "name": "Manage Limits",
                                "action": "changed",
                                "privileges": {
                                    "view": {
                                        "old": true,
                                        "new": false
                                    },
                                    "create": {
                                        "old": false,
                                        "new": true
                                    },
                                    "edit": {
                                        "old": true,
                                        "new": false
                                    },
                                    "delete": {
                                        "old": false,
                                        "new": false
                                    },
                                    "approve": {
                                        "old": true,
                                        "new": true
                                    },
                                    "cancel": {
                                        "old": false,
                                        "new": true
                                    },
                                    "execute": {
                                        "old": false,
                                        "new": true
                                    }
                                }
                            }, {
                                "functionId": "1009",
                                "functionCode": "assign.permissions",
                                "resource": "Service Agreement",
                                "name": "Assign Permissions",
                                "action": "added",
                                "privileges": {
                                    "view": {
                                        "new": true
                                    },
                                    "create": {
                                        "new": true
                                    },
                                    "edit": {
                                        "new": false
                                    },
                                    "delete": {
                                        "new": true
                                    },
                                    "approve": {
                                        "new": false
                                    },
                                    "cancel": {
                                        "new": true
                                    },
                                    "execute": {
                                        "new": true
                                    }
                                }
                            }, {
                                "functionId": "1046",
                                "functionCode": "ach.debit",
                                "resource": "Payments",
                                "name": "ACH Debit",
                                "action": "removed",
                                "privileges": {
                                    "view": {
                                        "old": true
                                    },
                                    "create": {
                                        "old": true
                                    },
                                    "edit": {
                                        "old": false
                                    },
                                    "delete": {
                                        "old": true
                                    },
                                    "approve": {
                                        "old": false
                                    },
                                    "cancel": {
                                        "old": true
                                    },
                                    "execute": {
                                        "old": true
                                    }
                                }
                            }, {
                                "functionId": "1010",
                                "functionCode": "manage.users",
                                "resource": "User",
                                "name": "Manage Users",
                                "action": "unchanged",
                                "privileges": {
                                    "view": {
                                        "old": true,
                                        "new": true
                                    },
                                    "create": {
                                        "old": true,
                                        "new": true
                                    },
                                    "edit": {
                                        "old": true,
                                        "new": true
                                    },
                                    "delete": {
                                        "old": false,
                                        "new": false
                                    },
                                    "approve": {
                                        "old": true,
                                        "new": true
                                    },
                                    "cancel": {
                                        "old": false,
                                        "new": false
                                    }
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "creatorUserFullName": "John Snow",
                        "creatorUserId": "69ef5b3c-3997-4ee9-9f11-cb14447cf572",
                        "createdAt": "2018-09-28T16:41:41.090Z",
                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "userFullName": "Jack Sparrow",
                        "serviceAgreementId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "serviceAgreementName": "Backbase SA",
                        "serviceAgreementDescription": "Detailed desscription of the SA.",
                        "action": "EDIT",
                        "category": "Assign Permissions",
                        "newFunctionGroups": [{
                                "id": "c18dda63-27fa-4e4f-8882-24b24b0d46df",
                                "name": "FGName",
                                "type": "REGULAR",
                                "description": "Function Group Description",
                                "dataGroups": [{
                                        "id": "c18dda63-27fa-4e4f-8882-24b24b0d46df",
                                        "name": "DGName",
                                        "description": "Function Group Description",
                                        "type": "PAYEES"
                                    }],
                                "selfApprovalPolicies": [{
                                        "businessFunctionCode": "manage.users",
                                        "canSelfApprove": false
                                    }]
                            }],
                        "removedFunctionGroups": [{
                                "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                                "name": "FGName",
                                "type": "TEMPLATE",
                                "description": "Function Group Description",
                                "dataGroups": [{
                                        "id": "d9b299b0-ca28-4683-a3c1-9a339abfb5e4",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CONTACTS"
                                    }],
                                "selfApprovalPolicies": [{
                                        "businessFunctionCode": "manage.users",
                                        "canSelfApprove": false
                                    }]
                            }],
                        "modifiedFunctionGroups": [{
                                "id": "d9b299b0-ca28-4683-a3c1-9a339abfb5e4",
                                "name": "FGName",
                                "type": "TEMPLATE",
                                "description": "Function Group Description",
                                "newDataGroups": [{
                                        "id": "5690bd25-b9db-493a-9659-3d5e505c7358",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CONTACTS"
                                    }],
                                "removedDataGroups": [{
                                        "id": "5f5c3714-289e-4f0c-bdb0-0b5a749f8beb",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CUSTOMERS"
                                    }],
                                "unmodifiedDataGroups": [{
                                        "id": "10c387f2-4348-483e-ba98-f9b73926df4b",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "ARRANGEMENTS"
                                    }]
                            }],
                        "unmodifiedFunctionGroups": [{
                                "id": "08cb2ed4-2691-4a28-8219-37378917e58d",
                                "name": "FGName",
                                "type": "REGULAR",
                                "description": "Function Group Description",
                                "dataGroups": [{
                                        "id": "619f3d39-9647-46c7-ac70-6218382ebc4d",
                                        "name": "DGName",
                                        "description": "Data Group Description",
                                        "type": "CUSTOMERS"
                                    }],
                                "selfApprovalPolicies": [{
                                        "businessFunctionCode": "manage.users",
                                        "canSelfApprove": false
                                    }]
                            }],
                        "requiredApproves": 3,
                        "completedApproves": 1,
                        "approvalLog": [{
                                "approverId": "619f3d39-9647-46c7-ac70-6218382ebc4d",
                                "approverFullName": "Donald Trump",
                                "approvedAt": "2018-10-15T16:41:41.090Z"
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/service-agreement",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "approvalId": "606d4532-f8d9-4a5f-36kl-887baf88fa24",
                        "action": "EDIT",
                        "oldState": {
                            "name": "FG1",
                            "description": "FG1 description",
                            "validFromDate": "2020-01-01",
                            "validFromTime": "00:00:00",
                            "validUntilDate": "2025-01-01",
                            "validUntilTime": "23:59:59",
                            "admins": ["0955e686d31e4216b3dd5d76561d536d", "0955e686d31e4216b3dd5d76164d536d", "0955e686d31e4216b3aa5d76161d536d"],
                            "legalEntities": [{
                                    "name": "LEName1",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a1c",
                                    "externalId": "C000001",
                                    "contributeUsers": true,
                                    "contributeAccount": true
                                }, {
                                    "name": "LEName2",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a2c",
                                    "externalId": "C000002",
                                    "contributeUsers": true,
                                    "contributeAccount": false
                                }]
                        },
                        "newState": {
                            "name": "FG1",
                            "description": "FG1 description",
                            "validFromDate": "2020-01-01",
                            "validFromTime": "00:00:00",
                            "validUntilDate": "2025-01-01",
                            "validUntilTime": "23:59:59",
                            "admins": ["0955e686d31e4216b3dd5d76561d536d", "0955e686d31e4216b3dd5d76164d536d", "0955e686d31e4216b3aa5d76161d522d"],
                            "legalEntities": [{
                                    "name": "LEName1",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a1c",
                                    "externalId": "C000001",
                                    "contributeUsers": true,
                                    "contributeAccount": true
                                }, {
                                    "name": "LEName2",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a2c",
                                    "externalId": "C000002",
                                    "contributeUsers": true,
                                    "contributeAccount": false
                                }, {
                                    "name": "LEName3",
                                    "id": "f41c4f3fea444cd2bfcf861dd13d2a4c",
                                    "externalId": "C000003",
                                    "contributeUsers": false,
                                    "contributeAccount": true
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/wizard-setup",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalId": "test",
                        "action": "CREATE",
                        "category": "Assign Permissions by Wizard",
                        "users": [{
                                "userId": "c7a382786d514262b75ab9531b749a2b",
                                "userFullName": "Paddy Brian"
                            }],
                        "functionGroups": [{
                                "functionGroupId": "f34f7587-5ded-4f51-94c3-3a89d1b645392"
                            }, {
                                "functionGroupId": "f34f7587-5ded-4f51-94c3-3a89d1b6453812"
                            }],
                        "serviceAgreementId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "serviceAgreementName": "AIB",
                        "accounts": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "6c1261e8-7b6b-4c14-9bb4-e976d834c730", "e6659eea893c4da48f9b7fd425de4677", "8eb58b1d048d4112a2f7591d465c3f14", "8a48e7546e11f733016e2249604f4076", "8a48e7546e11f733016e22495b6a4067", "1cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "8a48e7546e11f733016e22496d7e409d", "8a48e7546e11f733016e2249734640af", "8a48e7546e11f733016e22496ba94097", "8a48e7546e11f733016e22494c19403a", "8a48e7546e11f733016e2249715a40a9", "8a48e7546e11f733016e2249693f4091", "8a48e7546e11f733016e2249771240bb", "8a48e7546e11f733016e22496f5f40a3"],
                        "limit": {
                            "currency": "EUR",
                            "periodicLimitsBounds": {
                                "customPeriods": [{
                                        "amount": 100,
                                        "period": "biweekly"
                                    }],
                                "daily": 100,
                                "monthly": 10000,
                                "quarterly": 100000,
                                "weekly": 1000
                            },
                            "transactionalLimitsBounds": {
                                "amount": 1000
                            }
                        },
                        "removeExistingPermissions": false
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/approve",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/approvals/{approvalId}/reject",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        },
    ]);

    var DataGroupsHttpService = /** @class */ (function () {
        function DataGroupsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        DataGroupsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        DataGroupsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        DataGroupsHttpService.prototype.deleteDataGroupById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteDataGroupById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/accessgroups/data-groups/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DataGroupsHttpService.prototype.deleteDataGroupByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteDataGroupById.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/data-groups/" + encodeURIComponent(String(_id));
        };
        DataGroupsHttpService.prototype.getDataGroupById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getDataGroupById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/data-groups/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DataGroupsHttpService.prototype.getDataGroupByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getDataGroupById.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/data-groups/" + encodeURIComponent(String(_id));
        };
        DataGroupsHttpService.prototype.getDataGroups = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getDataGroups.');
            }
            var _type = requestParameters["type"];
            var _includeItems = requestParameters["includeItems"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_type !== undefined && _type !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _type, 'type');
            }
            if (_includeItems !== undefined && _includeItems !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _includeItems, 'includeItems');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/data-groups", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DataGroupsHttpService.prototype.getDataGroupsUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getDataGroups.');
            }
            var _type = requestParameters["type"];
            var _includeItems = requestParameters["includeItems"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_type !== undefined && _type !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _type, 'type');
            }
            if (_includeItems !== undefined && _includeItems !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _includeItems, 'includeItems');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/data-groups" + (queryString ? "?" + queryString : '');
        };
        DataGroupsHttpService.prototype.postDataGroups = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _dataGroupItemBase = requestParameters["dataGroupItemBase"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/data-groups", _dataGroupItemBase, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DataGroupsHttpService.prototype.postDataGroupsUrl = function (requestParameters) {
            var _dataGroupItemBase = requestParameters["dataGroupItemBase"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/data-groups";
        };
        DataGroupsHttpService.prototype.putDataGroupById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putDataGroupById.');
            }
            var _dataGroupItem = requestParameters["dataGroupItem"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/accessgroups/data-groups/" + encodeURIComponent(String(_id)), _dataGroupItem, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DataGroupsHttpService.prototype.putDataGroupByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putDataGroupById.');
            }
            var _dataGroupItem = requestParameters["dataGroupItem"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/data-groups/" + encodeURIComponent(String(_id));
        };
        return DataGroupsHttpService;
    }());
    DataGroupsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DataGroupsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DataGroupsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DataGroupsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DataGroupsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var DataGroupsHttpServiceDeleteDataGroupByIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var DataGroupsHttpServiceGetDataGroupByIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d",
                        "name": "Data group 1",
                        "description": "Simple data group",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "type": "ARRANGEMENTS",
                        "items": ["e6659eea893c4da48f9b7fd425de4677", "8eb58b1d048d4112a2f7591d465c3f14"]
                    }
                },
            ]
        }]);
    var DataGroupsHttpServiceGetDataGroupsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "138a7683-e9da-4ffa-a257-b78626790cd7",
                            "name": "Salaries",
                            "description": "Contains accounts used for paying salaries",
                            "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                            "type": "ARRANGEMENTS",
                            "items": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"]
                        }, {
                            "id": "109104933dcc42bc89ac5f960a6e1776",
                            "name": "All Accounts",
                            "description": "Contains all accounts",
                            "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b15",
                            "type": "ARRANGEMENTS",
                            "items": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "6c1261e8-7b6b-4c14-9bb4-e976d834c730"],
                            "approvalId": "7a3fe8c4-ea29-4251-9883-f9f3d06305e2"
                        }]
                },
            ]
        }]);
    var DataGroupsHttpServicePostDataGroupsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
            ]
        }]);
    var DataGroupsHttpServicePutDataGroupByIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var DataGroupsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d",
                        "name": "Data group 1",
                        "description": "Simple data group",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "type": "ARRANGEMENTS",
                        "items": ["e6659eea893c4da48f9b7fd425de4677", "8eb58b1d048d4112a2f7591d465c3f14"]
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "138a7683-e9da-4ffa-a257-b78626790cd7",
                            "name": "Salaries",
                            "description": "Contains accounts used for paying salaries",
                            "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                            "type": "ARRANGEMENTS",
                            "items": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"]
                        }, {
                            "id": "109104933dcc42bc89ac5f960a6e1776",
                            "name": "All Accounts",
                            "description": "Contains all accounts",
                            "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b15",
                            "type": "ARRANGEMENTS",
                            "items": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "6c1261e8-7b6b-4c14-9bb4-e976d834c730"],
                            "approvalId": "7a3fe8c4-ea29-4251-9883-f9f3d06305e2"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        },
    ]);

    var FunctionGroupsHttpService = /** @class */ (function () {
        function FunctionGroupsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        FunctionGroupsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        FunctionGroupsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        FunctionGroupsHttpService.prototype.deleteFunctionGroupById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteFunctionGroupById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/accessgroups/function-groups/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        FunctionGroupsHttpService.prototype.deleteFunctionGroupByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteFunctionGroupById.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/function-groups/" + encodeURIComponent(String(_id));
        };
        FunctionGroupsHttpService.prototype.getFunctionGroupById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFunctionGroupById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/function-groups/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        FunctionGroupsHttpService.prototype.getFunctionGroupByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getFunctionGroupById.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/function-groups/" + encodeURIComponent(String(_id));
        };
        FunctionGroupsHttpService.prototype.getFunctionGroups = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getFunctionGroups.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/function-groups", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        FunctionGroupsHttpService.prototype.getFunctionGroupsUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getFunctionGroups.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/function-groups" + (queryString ? "?" + queryString : '');
        };
        FunctionGroupsHttpService.prototype.postFunctionGroups = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _functionGroupItemBase = requestParameters["functionGroupItemBase"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/function-groups", _functionGroupItemBase, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        FunctionGroupsHttpService.prototype.postFunctionGroupsUrl = function (requestParameters) {
            var _functionGroupItemBase = requestParameters["functionGroupItemBase"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/function-groups";
        };
        FunctionGroupsHttpService.prototype.putFunctionGroupById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putFunctionGroupById.');
            }
            var _functionGroupItemPut = requestParameters["functionGroupItemPut"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/accessgroups/function-groups/" + encodeURIComponent(String(_id)), _functionGroupItemPut, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        FunctionGroupsHttpService.prototype.putFunctionGroupByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putFunctionGroupById.');
            }
            var _functionGroupItemPut = requestParameters["functionGroupItemPut"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/function-groups/" + encodeURIComponent(String(_id));
        };
        return FunctionGroupsHttpService;
    }());
    FunctionGroupsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: FunctionGroupsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FunctionGroupsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: FunctionGroupsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: FunctionGroupsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var FunctionGroupsHttpServiceDeleteFunctionGroupByIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var FunctionGroupsHttpServiceGetFunctionGroupByIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                        "name": "Manage Entitlements",
                        "description": "This profile will control managing of entitlements",
                        "serviceAgreementId": "1642b2e1-61c4-4ce3-8bd9-877327587f4b",
                        "permissions": [{
                                "functionId": "1012",
                                "assignedPrivileges": [{
                                        "privilege": "view"
                                    }]
                            }, {
                                "functionId": "1011",
                                "assignedPrivileges": [{
                                        "privilege": "view"
                                    }]
                            }, {
                                "functionId": "1010",
                                "assignedPrivileges": [{
                                        "privilege": "view"
                                    }]
                            }, {
                                "functionId": "1009",
                                "assignedPrivileges": [{
                                        "privilege": "create"
                                    }, {
                                        "privilege": "view"
                                    }, {
                                        "privilege": "edit"
                                    }]
                            }]
                    }
                },
            ]
        }]);
    var FunctionGroupsHttpServiceGetFunctionGroupsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "00779897-253c-4bbb-b0c7-3c47fd0b0b08",
                            "name": "Manage Entitlements",
                            "description": "This profile will control managing of entitlements",
                            "serviceAgreementId": "51c95177-0d29-43f6-978c-be8c0b9126ab",
                            "permissions": [{
                                    "functionId": "1012",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1011",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1010",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1009",
                                    "assignedPrivileges": [{
                                            "privilege": "create"
                                        }, {
                                            "privilege": "view"
                                        }, {
                                            "privilege": "edit"
                                        }]
                                }],
                            "validFromDate": "2019-08-16",
                            "validFromTime": "16:43:52",
                            "validUntilDate": "2019-08-23",
                            "validUntilTime": "16:43:52",
                            "type": "REGULAR"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6eead",
                            "name": "Viewer of Product Summary and Transactions",
                            "description": "This profile will control viewing of Product Summary and Transactions",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1006",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1003",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }],
                            "approvalId": "98f8531d-9bf4-4f3f-a49b-7cf331d6eead",
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "TEMPLATE"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6eeae",
                            "name": "Limits Manager",
                            "description": "This profile will control managing of limits",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1012",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }, {
                                            "privilege": "create"
                                        }, {
                                            "privilege": "edit"
                                        }, {
                                            "privilege": "delete"
                                        }]
                                }, {
                                    "functionId": "1014",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }],
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "TEMPLATE"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6eeaf",
                            "name": "Permissions Approvals Manager",
                            "description": "This profile will control approving of Permissions",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1009",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }, {
                                            "privilege": "delete"
                                        }]
                                }, {
                                    "functionId": "1020",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1019",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }],
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "TEMPLATE"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6feaf",
                            "name": "Salary Manager",
                            "description": "This profile will control paying salaries",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1015",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }, {
                                            "privilege": "create"
                                        }, {
                                            "privilege": "edit"
                                        }, {
                                            "privilege": "delete"
                                        }]
                                }],
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "REGULAR"
                        }]
                },
            ]
        }]);
    var FunctionGroupsHttpServicePostFunctionGroupsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
            ]
        }]);
    var FunctionGroupsHttpServicePutFunctionGroupByIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups/{id}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var FunctionGroupsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                        "name": "Manage Entitlements",
                        "description": "This profile will control managing of entitlements",
                        "serviceAgreementId": "1642b2e1-61c4-4ce3-8bd9-877327587f4b",
                        "permissions": [{
                                "functionId": "1012",
                                "assignedPrivileges": [{
                                        "privilege": "view"
                                    }]
                            }, {
                                "functionId": "1011",
                                "assignedPrivileges": [{
                                        "privilege": "view"
                                    }]
                            }, {
                                "functionId": "1010",
                                "assignedPrivileges": [{
                                        "privilege": "view"
                                    }]
                            }, {
                                "functionId": "1009",
                                "assignedPrivileges": [{
                                        "privilege": "create"
                                    }, {
                                        "privilege": "view"
                                    }, {
                                        "privilege": "edit"
                                    }]
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "00779897-253c-4bbb-b0c7-3c47fd0b0b08",
                            "name": "Manage Entitlements",
                            "description": "This profile will control managing of entitlements",
                            "serviceAgreementId": "51c95177-0d29-43f6-978c-be8c0b9126ab",
                            "permissions": [{
                                    "functionId": "1012",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1011",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1010",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1009",
                                    "assignedPrivileges": [{
                                            "privilege": "create"
                                        }, {
                                            "privilege": "view"
                                        }, {
                                            "privilege": "edit"
                                        }]
                                }],
                            "validFromDate": "2019-08-16",
                            "validFromTime": "16:43:52",
                            "validUntilDate": "2019-08-23",
                            "validUntilTime": "16:43:52",
                            "type": "REGULAR"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6eead",
                            "name": "Viewer of Product Summary and Transactions",
                            "description": "This profile will control viewing of Product Summary and Transactions",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1006",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1003",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }],
                            "approvalId": "98f8531d-9bf4-4f3f-a49b-7cf331d6eead",
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "TEMPLATE"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6eeae",
                            "name": "Limits Manager",
                            "description": "This profile will control managing of limits",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1012",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }, {
                                            "privilege": "create"
                                        }, {
                                            "privilege": "edit"
                                        }, {
                                            "privilege": "delete"
                                        }]
                                }, {
                                    "functionId": "1014",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }],
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "TEMPLATE"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6eeaf",
                            "name": "Permissions Approvals Manager",
                            "description": "This profile will control approving of Permissions",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1009",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }, {
                                            "privilege": "delete"
                                        }]
                                }, {
                                    "functionId": "1020",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }, {
                                    "functionId": "1019",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }]
                                }],
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "TEMPLATE"
                        }, {
                            "id": "98f8531d-9bf4-4f3f-a49b-7cf331d6feaf",
                            "name": "Salary Manager",
                            "description": "This profile will control paying salaries",
                            "legalEntityId": "be2a6940-91f9-4cba-9c35-0b1f55f4071d",
                            "serviceAgreementId": "f34f7587-5ded-4f51-94c3-3a89d1b64539",
                            "permissions": [{
                                    "functionId": "1015",
                                    "assignedPrivileges": [{
                                            "privilege": "view"
                                        }, {
                                            "privilege": "create"
                                        }, {
                                            "privilege": "edit"
                                        }, {
                                            "privilege": "delete"
                                        }]
                                }],
                            "validFromDate": "2019-09-17",
                            "validFromTime": "16:43:57",
                            "validUntilDate": "2019-10-25",
                            "validUntilTime": "16:55:23",
                            "type": "REGULAR"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/function-groups/{id}",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 200,
                    body: {}
                },
            ]
        },
    ]);

    var LegalEntitiesHttpService = /** @class */ (function () {
        function LegalEntitiesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        LegalEntitiesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        LegalEntitiesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        LegalEntitiesHttpService.prototype.getLegalEntities = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _parentEntityId = requestParameters["parentEntityId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_parentEntityId !== undefined && _parentEntityId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _parentEntityId, 'parentEntityId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/legalentities", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.getLegalEntitiesUrl = function (requestParameters) {
            var _parentEntityId = requestParameters["parentEntityId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_parentEntityId !== undefined && _parentEntityId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _parentEntityId, 'parentEntityId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/legalentities" + (queryString ? "?" + queryString : '');
        };
        LegalEntitiesHttpService.prototype.getLegalEntityByExternalId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/legalentities/external/" + encodeURIComponent(String(_externalId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.getLegalEntityByExternalIdUrl = function (requestParameters) {
            var _externalId = requestParameters["externalId"];
            if (_externalId === null || _externalId === undefined) {
                throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
            }
            return this.configuration.basePath + "/client-api/v2/legalentities/external/" + encodeURIComponent(String(_externalId));
        };
        LegalEntitiesHttpService.prototype.getLegalEntityById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _legalEntityId = requestParameters["legalEntityId"];
            if (_legalEntityId === null || _legalEntityId === undefined) {
                throw new Error('Required parameter legalEntityId was null or undefined when calling getLegalEntityById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/legalentities/" + encodeURIComponent(String(_legalEntityId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.getLegalEntityByIdUrl = function (requestParameters) {
            var _legalEntityId = requestParameters["legalEntityId"];
            if (_legalEntityId === null || _legalEntityId === undefined) {
                throw new Error('Required parameter legalEntityId was null or undefined when calling getLegalEntityById.');
            }
            return this.configuration.basePath + "/client-api/v2/legalentities/" + encodeURIComponent(String(_legalEntityId));
        };
        LegalEntitiesHttpService.prototype.getLegalEntityExternalData = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _field = requestParameters["field"];
            var _term = requestParameters["term"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_field !== undefined && _field !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _field, 'field');
            }
            if (_term !== undefined && _term !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _term, 'term');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/legalentities/external-data", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.getLegalEntityExternalDataUrl = function (requestParameters) {
            var _field = requestParameters["field"];
            var _term = requestParameters["term"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_field !== undefined && _field !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _field, 'field');
            }
            if (_term !== undefined && _term !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _term, 'term');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/legalentities/external-data" + (queryString ? "?" + queryString : '');
        };
        LegalEntitiesHttpService.prototype.getLegalEntityForUser = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/legalentities/me", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.getLegalEntityForUserUrl = function () {
            return this.configuration.basePath + "/client-api/v2/legalentities/me";
        };
        LegalEntitiesHttpService.prototype.getMasterServiceAgreement = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _legalEntityId = requestParameters["legalEntityId"];
            if (_legalEntityId === null || _legalEntityId === undefined) {
                throw new Error('Required parameter legalEntityId was null or undefined when calling getMasterServiceAgreement.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/legalentities/" + encodeURIComponent(String(_legalEntityId)) + "/serviceagreements/master", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.getMasterServiceAgreementUrl = function (requestParameters) {
            var _legalEntityId = requestParameters["legalEntityId"];
            if (_legalEntityId === null || _legalEntityId === undefined) {
                throw new Error('Required parameter legalEntityId was null or undefined when calling getMasterServiceAgreement.');
            }
            return this.configuration.basePath + "/client-api/v2/legalentities/" + encodeURIComponent(String(_legalEntityId)) + "/serviceagreements/master";
        };
        LegalEntitiesHttpService.prototype.getSegmentation = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _businessFunction = requestParameters["businessFunction"];
            if (_businessFunction === null || _businessFunction === undefined) {
                throw new Error('Required parameter businessFunction was null or undefined when calling getSegmentation.');
            }
            var _query = requestParameters["query"];
            var _privilege = requestParameters["privilege"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_businessFunction !== undefined && _businessFunction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _businessFunction, 'businessFunction');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/legalentities/segmentation", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.getSegmentationUrl = function (requestParameters) {
            var _businessFunction = requestParameters["businessFunction"];
            if (_businessFunction === null || _businessFunction === undefined) {
                throw new Error('Required parameter businessFunction was null or undefined when calling getSegmentation.');
            }
            var _query = requestParameters["query"];
            var _privilege = requestParameters["privilege"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_businessFunction !== undefined && _businessFunction !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _businessFunction, 'businessFunction');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/legalentities/segmentation" + (queryString ? "?" + queryString : '');
        };
        LegalEntitiesHttpService.prototype.postLegalEntities = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _legalEntityCreateItem = requestParameters["legalEntityCreateItem"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/legalentities", _legalEntityCreateItem, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.postLegalEntitiesUrl = function (requestParameters) {
            var _legalEntityCreateItem = requestParameters["legalEntityCreateItem"];
            return this.configuration.basePath + "/client-api/v2/legalentities";
        };
        LegalEntitiesHttpService.prototype.postLegalEntitiesAsParticipant = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _legalEntityAsParticipantCreateItem = requestParameters["legalEntityAsParticipantCreateItem"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/legalentities/as-participant", _legalEntityAsParticipantCreateItem, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.postLegalEntitiesAsParticipantUrl = function (requestParameters) {
            var _legalEntityAsParticipantCreateItem = requestParameters["legalEntityAsParticipantCreateItem"];
            return this.configuration.basePath + "/client-api/v2/legalentities/as-participant";
        };
        LegalEntitiesHttpService.prototype.postSubEntities = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _searchSubEntitiesParameters = requestParameters["searchSubEntitiesParameters"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/legalentities/sub-entities", _searchSubEntitiesParameters, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        LegalEntitiesHttpService.prototype.postSubEntitiesUrl = function (requestParameters) {
            var _searchSubEntitiesParameters = requestParameters["searchSubEntitiesParameters"];
            return this.configuration.basePath + "/client-api/v2/legalentities/sub-entities";
        };
        return LegalEntitiesHttpService;
    }());
    LegalEntitiesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LegalEntitiesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    LegalEntitiesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LegalEntitiesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: LegalEntitiesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var LegalEntitiesHttpServiceGetLegalEntitiesMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK",
                            "isParent": true
                        }, {
                            "id": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": true
                        }, {
                            "id": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }]
                },
            ]
        }]);
    var LegalEntitiesHttpServiceGetLegalEntityByExternalIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/external/{externalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "1",
                        "externalId": "ext1",
                        "type": "CUSTOMER",
                        "name": "Endava"
                    }
                },
            ]
        }]);
    var LegalEntitiesHttpServiceGetLegalEntityByIdMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/{legalEntityId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "externalId": "ext1",
                        "name": "Endava",
                        "parentId": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "type": "CUSTOMER",
                        "isParent": false
                    }
                },
            ]
        }]);
    var LegalEntitiesHttpServiceGetLegalEntityExternalDataMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/external-data",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK"
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "type": "CUSTOMER"
                        }, {
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam"
                        }, {
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff"
                        }]
                },
            ]
        }]);
    var LegalEntitiesHttpServiceGetLegalEntityForUserMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/me",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "externalId": "ext1",
                        "name": "Endava",
                        "parentId": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "type": "CUSTOMER",
                        "isParent": false
                    }
                },
            ]
        }]);
    var LegalEntitiesHttpServiceGetMasterServiceAgreementMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/{legalEntityId}/serviceagreements/master",
            method: "GET",
            responses: []
        }]);
    var LegalEntitiesHttpServiceGetSegmentationMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/segmentation",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK",
                            "isParent": true
                        }, {
                            "id": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": true
                        }, {
                            "id": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }]
                },
            ]
        }]);
    var LegalEntitiesHttpServicePostLegalEntitiesMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                    }
                },
            ]
        }]);
    var LegalEntitiesHttpServicePostLegalEntitiesAsParticipantMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/as-participant",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "legalEntityId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "serviceAgreementId": "0955e686-d31e-4216-b3dd-5d66161d536d"
                    }
                },
            ]
        }]);
    var LegalEntitiesHttpServicePostSubEntitiesMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/legalentities/sub-entities",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK"
                        }, {
                            "id": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "type": "CUSTOMER"
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "type": "CUSTOMER"
                        }, {
                            "id": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam",
                            "type": "CUSTOMER"
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "type": "CUSTOMER"
                        }]
                },
            ]
        }]);
    var LegalEntitiesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/legalentities",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK",
                            "isParent": true
                        }, {
                            "id": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": true
                        }, {
                            "id": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/external/{externalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "1",
                        "externalId": "ext1",
                        "type": "CUSTOMER",
                        "name": "Endava"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/{legalEntityId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "externalId": "ext1",
                        "name": "Endava",
                        "parentId": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "type": "CUSTOMER",
                        "isParent": false
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/external-data",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK"
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "type": "CUSTOMER"
                        }, {
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam"
                        }, {
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/me",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "externalId": "ext1",
                        "name": "Endava",
                        "parentId": "e1d55a46-656a-491b-b6e0-443ff09bbe52",
                        "type": "CUSTOMER",
                        "isParent": false
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/{legalEntityId}/serviceagreements/master",
            method: "GET",
            responses: []
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/segmentation",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK",
                            "isParent": true
                        }, {
                            "id": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "parentId": "c7a382786d514262b75ab9531b749a2b",
                            "type": "CUSTOMER",
                            "isParent": true
                        }, {
                            "id": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "parentId": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "type": "CUSTOMER",
                            "isParent": false
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/as-participant",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "legalEntityId": "0955e686-d31e-4216-b3dd-5d66161d536d",
                        "serviceAgreementId": "0955e686-d31e-4216-b3dd-5d66161d536d"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/legalentities/sub-entities",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "c7a382786d514262b75ab9531b749a2b",
                            "externalId": "Bank",
                            "name": "Bank",
                            "type": "BANK"
                        }, {
                            "id": "dbc9e566d44f4cd9a1f09ad3f6729f15",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "type": "CUSTOMER"
                        }, {
                            "id": "77f8c4cd11c8436ba77f8ca34e6a173d",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "type": "CUSTOMER"
                        }, {
                            "id": "c9fc30f4e5fb492c97ed0a05f926aecc",
                            "externalId": "Backbase Amsterdam",
                            "name": "Backbase Amsterdam",
                            "type": "CUSTOMER"
                        }, {
                            "id": "0f6d14f40e064deeaee351befd53d3e7",
                            "externalId": "Backbase Cardiff",
                            "name": "Backbase Cardiff",
                            "type": "CUSTOMER"
                        }]
                },
            ]
        },
    ]);

    var ServiceAgreementHttpService = /** @class */ (function () {
        function ServiceAgreementHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ServiceAgreementHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ServiceAgreementHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ServiceAgreementHttpService.prototype.getServiceAgreement = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _creatorId = requestParameters["creatorId"];
            if (_creatorId === null || _creatorId === undefined) {
                throw new Error('Required parameter creatorId was null or undefined when calling getServiceAgreement.');
            }
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_creatorId !== undefined && _creatorId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _creatorId, 'creatorId');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementUrl = function (requestParameters) {
            var _creatorId = requestParameters["creatorId"];
            if (_creatorId === null || _creatorId === undefined) {
                throw new Error('Required parameter creatorId was null or undefined when calling getServiceAgreement.');
            }
            var _cursor = requestParameters["cursor"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _query = requestParameters["query"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_creatorId !== undefined && _creatorId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _creatorId, 'creatorId');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements" + (queryString ? "?" + queryString : '');
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementAdmins = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getServiceAgreementAdmins.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_serviceAgreementId)) + "/admins", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementAdminsUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getServiceAgreementAdmins.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_serviceAgreementId)) + "/admins";
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementContext = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementContextUrl = function () {
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context";
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementItem = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getServiceAgreementItem.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_serviceAgreementId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementItemUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling getServiceAgreementItem.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_serviceAgreementId));
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementUsers = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _cursor = requestParameters["cursor"];
            var _query = requestParameters["query"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.getServiceAgreementUsersUrl = function (requestParameters) {
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _cursor = requestParameters["cursor"];
            var _query = requestParameters["query"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users" + (queryString ? "?" + queryString : '');
        };
        ServiceAgreementHttpService.prototype.getUnexposedUsers = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users/unexposed", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.getUnexposedUsersUrl = function (requestParameters) {
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users/unexposed" + (queryString ? "?" + queryString : '');
        };
        ServiceAgreementHttpService.prototype.postServiceAgreement = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementPost = requestParameters["serviceAgreementPost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements", _serviceAgreementPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.postServiceAgreementUrl = function (requestParameters) {
            var _serviceAgreementPost = requestParameters["serviceAgreementPost"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements";
        };
        ServiceAgreementHttpService.prototype.postUsersAdd = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users/add", _usersForServiceAgreement, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.postUsersAddUrl = function (requestParameters) {
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users/add";
        };
        ServiceAgreementHttpService.prototype.postUsersRemove = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users/remove", _usersForServiceAgreement, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.postUsersRemoveUrl = function (requestParameters) {
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/context/users/remove";
        };
        ServiceAgreementHttpService.prototype.putAdmins = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putAdmins.');
            }
            var _updateAdmins = requestParameters["updateAdmins"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_id)) + "/admins", _updateAdmins, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.putAdminsUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putAdmins.');
            }
            var _updateAdmins = requestParameters["updateAdmins"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_id)) + "/admins";
        };
        ServiceAgreementHttpService.prototype.putServiceAgreementState = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling putServiceAgreementState.');
            }
            var _serviceAgreementStatePut = requestParameters["serviceAgreementStatePut"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_serviceAgreementId)) + "/state", _serviceAgreementStatePut, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementHttpService.prototype.putServiceAgreementStateUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling putServiceAgreementState.');
            }
            var _serviceAgreementStatePut = requestParameters["serviceAgreementStatePut"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/serviceagreements/" + encodeURIComponent(String(_serviceAgreementId)) + "/state";
        };
        return ServiceAgreementHttpService;
    }());
    ServiceAgreementHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ServiceAgreementHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ServiceAgreementHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ServiceAgreementHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ServiceAgreementHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ServiceAgreementHttpServiceGetServiceAgreementMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "951293e6521940e3ae0608f93ff0b215",
                            "externalId": "external-id-1",
                            "name": "Broker deal 1",
                            "description": "Agreement between Backbase and Apple",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96147",
                            "externalId": "external-id-2",
                            "name": "Broker deal 2",
                            "description": "Agreement between Backbase and HP",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae0a1e42bbe96147",
                            "externalId": "external-id-3",
                            "name": "Tyler Boyd Associates",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae1a1e42bbe96147",
                            "externalId": "external-id-4",
                            "name": "Tyler Boyd Associates UAE",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae2a1e42bbe96147",
                            "externalId": "external-id-5",
                            "name": "Tyler Boyd Associates US",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae3a1e42bbe96147",
                            "externalId": "external-id-6",
                            "name": "Tyler Boyd Associates US Salary Services",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae4a1e42bbe96147",
                            "externalId": "external-id-7",
                            "name": "Tyler Boyd Associates US Training",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae5a1e42bbe96147",
                            "externalId": "external-id-8",
                            "name": "Tyler Boyd Associates UK",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae6a1e42bbe96147",
                            "externalId": "external-id-9",
                            "name": "Tyler Boyd Associates UK Sales",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae7a1e42bbe96147",
                            "externalId": "external-id-10",
                            "name": "Tyler Boyd Associates UK Marketing",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae9a1e42bbe96147",
                            "externalId": "external-id-11",
                            "name": "Broker deal 11",
                            "description": "Agreement between Backbase and Microsoft",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a0e42bbe96147",
                            "externalId": "external-id-12",
                            "name": "Broker deal 12",
                            "description": "Agreement between Backbase and Packard-Bell",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a2e42bbe96147",
                            "externalId": "external-id-13",
                            "name": "Tyler Boyd Associates ROI",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a3e42bbe96147",
                            "externalId": "external-id-14",
                            "name": "Tyler Boyd Associates ROI Services",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a4e42bbe96147",
                            "externalId": "external-id-15",
                            "name": "Tyler Boyd Associates ROI Finance",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a5e42bbe96147",
                            "externalId": "external-id-16",
                            "name": "Tyler Boyd Associates ROI HR",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a6e42bbe96147",
                            "externalId": "external-id-17",
                            "name": "Tyler Boyd Associates EU",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a7e42bbe96147",
                            "externalId": "external-id-18",
                            "name": "Tyler Boyd Associates EU North",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a8e42bbe96147",
                            "externalId": "external-id-19",
                            "name": "Tyler Boyd Associates EU East",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a9e02bbe96147",
                            "externalId": "external-id-20",
                            "name": "Tyler Boyd Associates EU South",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e12bbe96147",
                            "externalId": "external-id-21",
                            "name": "Broker deal 21",
                            "description": "Agreement between Backbase and Google",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e22bbe96147",
                            "externalId": "external-id-22",
                            "name": "Broker deal 22",
                            "description": "Agreement between Backbase and Dell",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e32bbe96147",
                            "externalId": "external-id-23",
                            "name": "Tyler Boyd Associates EU West",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e52bbe96147",
                            "externalId": "external-id-24",
                            "name": "Tyler Boyd Associates EU Central",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e62bbe96147",
                            "externalId": "external-id-25",
                            "name": "Tyler Boyd Associates CAN",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e72bbe96147",
                            "externalId": "external-id-26",
                            "name": "Tyler Boyd Associates CAN Finance",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e82bbe96147",
                            "externalId": "external-id-27",
                            "name": "Tyler Boyd Associates BRA",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e92bbe96147",
                            "externalId": "external-id-28",
                            "name": "Tyler Boyd Associates URU",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e41bbe96147",
                            "externalId": "external-id-29",
                            "name": "Tyler Boyd Associates ARG",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e43bbe96147",
                            "externalId": "external-id-30",
                            "name": "Tyler Boyd Associates AUS",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }]
                },
            ]
        }]);
    var ServiceAgreementHttpServiceGetServiceAgreementAdminsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{serviceAgreementId}/admins",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "David",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "Paul",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "fullName": "Wayne",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        }]);
    var ServiceAgreementHttpServiceGetServiceAgreementContextMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                        "externalId": "external-id-1",
                        "name": "Broker deal 1",
                        "description": "Agreement between Backbase and Apple",
                        "creatorLegalEntity": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "isMaster": true,
                        "status": "ENABLED",
                        "validFromDate": "2017-03-31",
                        "validFromTime": "08:30:00",
                        "validUntilDate": "2019-03-31",
                        "validUntilTime": "17:30:00"
                    }
                },
            ]
        }]);
    var ServiceAgreementHttpServiceGetServiceAgreementItemMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{serviceAgreementId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                        "externalId": "external-id-1",
                        "name": "Broker deal 1",
                        "description": "Agreement between Backbase and Apple",
                        "creatorLegalEntity": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "isMaster": true,
                        "status": "ENABLED",
                        "validFromDate": "2017-03-31",
                        "validFromTime": "08:30:00",
                        "validUntilDate": "2019-03-31",
                        "validUntilTime": "17:30:00"
                    }
                },
            ]
        }]);
    var ServiceAgreementHttpServiceGetServiceAgreementUsersMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "David",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "Paul",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "fullName": "Wayne",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        }]);
    var ServiceAgreementHttpServiceGetUnexposedUsersMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users/unexposed",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "fullName": "David",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "fullName": "Paul",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "fullName": "Wayne",
                            "legalEntityId": "951293e6521940e3ae0608f93ff0b215",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        }]);
    var ServiceAgreementHttpServicePostServiceAgreementMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
            ]
        }]);
    var ServiceAgreementHttpServicePostUsersAddMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users/add",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var ServiceAgreementHttpServicePostUsersRemoveMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users/remove",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var ServiceAgreementHttpServicePutAdminsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{id}/admins",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var ServiceAgreementHttpServicePutServiceAgreementStateMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{serviceAgreementId}/state",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var ServiceAgreementHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "951293e6521940e3ae0608f93ff0b215",
                            "externalId": "external-id-1",
                            "name": "Broker deal 1",
                            "description": "Agreement between Backbase and Apple",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96147",
                            "externalId": "external-id-2",
                            "name": "Broker deal 2",
                            "description": "Agreement between Backbase and HP",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae0a1e42bbe96147",
                            "externalId": "external-id-3",
                            "name": "Tyler Boyd Associates",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae1a1e42bbe96147",
                            "externalId": "external-id-4",
                            "name": "Tyler Boyd Associates UAE",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae2a1e42bbe96147",
                            "externalId": "external-id-5",
                            "name": "Tyler Boyd Associates US",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae3a1e42bbe96147",
                            "externalId": "external-id-6",
                            "name": "Tyler Boyd Associates US Salary Services",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae4a1e42bbe96147",
                            "externalId": "external-id-7",
                            "name": "Tyler Boyd Associates US Training",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae5a1e42bbe96147",
                            "externalId": "external-id-8",
                            "name": "Tyler Boyd Associates UK",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae6a1e42bbe96147",
                            "externalId": "external-id-9",
                            "name": "Tyler Boyd Associates UK Sales",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae7a1e42bbe96147",
                            "externalId": "external-id-10",
                            "name": "Tyler Boyd Associates UK Marketing",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae9a1e42bbe96147",
                            "externalId": "external-id-11",
                            "name": "Broker deal 11",
                            "description": "Agreement between Backbase and Microsoft",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a0e42bbe96147",
                            "externalId": "external-id-12",
                            "name": "Broker deal 12",
                            "description": "Agreement between Backbase and Packard-Bell",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a2e42bbe96147",
                            "externalId": "external-id-13",
                            "name": "Tyler Boyd Associates ROI",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a3e42bbe96147",
                            "externalId": "external-id-14",
                            "name": "Tyler Boyd Associates ROI Services",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a4e42bbe96147",
                            "externalId": "external-id-15",
                            "name": "Tyler Boyd Associates ROI Finance",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a5e42bbe96147",
                            "externalId": "external-id-16",
                            "name": "Tyler Boyd Associates ROI HR",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a6e42bbe96147",
                            "externalId": "external-id-17",
                            "name": "Tyler Boyd Associates EU",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a7e42bbe96147",
                            "externalId": "external-id-18",
                            "name": "Tyler Boyd Associates EU North",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a8e42bbe96147",
                            "externalId": "external-id-19",
                            "name": "Tyler Boyd Associates EU East",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a9e02bbe96147",
                            "externalId": "external-id-20",
                            "name": "Tyler Boyd Associates EU South",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e12bbe96147",
                            "externalId": "external-id-21",
                            "name": "Broker deal 21",
                            "description": "Agreement between Backbase and Google",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e22bbe96147",
                            "externalId": "external-id-22",
                            "name": "Broker deal 22",
                            "description": "Agreement between Backbase and Dell",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e32bbe96147",
                            "externalId": "external-id-23",
                            "name": "Tyler Boyd Associates EU West",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e52bbe96147",
                            "externalId": "external-id-24",
                            "name": "Tyler Boyd Associates EU Central",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e62bbe96147",
                            "externalId": "external-id-25",
                            "name": "Tyler Boyd Associates CAN",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e72bbe96147",
                            "externalId": "external-id-26",
                            "name": "Tyler Boyd Associates CAN Finance",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e82bbe96147",
                            "externalId": "external-id-27",
                            "name": "Tyler Boyd Associates BRA",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e92bbe96147",
                            "externalId": "external-id-28",
                            "name": "Tyler Boyd Associates URU",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e41bbe96147",
                            "externalId": "external-id-29",
                            "name": "Tyler Boyd Associates ARG",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e43bbe96147",
                            "externalId": "external-id-30",
                            "name": "Tyler Boyd Associates AUS",
                            "description": "Description of service agreement",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{serviceAgreementId}/admins",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "David",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "Paul",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "fullName": "Wayne",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                        "externalId": "external-id-1",
                        "name": "Broker deal 1",
                        "description": "Agreement between Backbase and Apple",
                        "creatorLegalEntity": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "isMaster": true,
                        "status": "ENABLED",
                        "validFromDate": "2017-03-31",
                        "validFromTime": "08:30:00",
                        "validUntilDate": "2019-03-31",
                        "validUntilTime": "17:30:00"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{serviceAgreementId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                        "externalId": "external-id-1",
                        "name": "Broker deal 1",
                        "description": "Agreement between Backbase and Apple",
                        "creatorLegalEntity": "6e83bf0d-0d77-4320-b854-4a704e1d50c3",
                        "isMaster": true,
                        "status": "ENABLED",
                        "validFromDate": "2017-03-31",
                        "validFromTime": "08:30:00",
                        "validUntilDate": "2019-03-31",
                        "validUntilTime": "17:30:00"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "David",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "Paul",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "fullName": "Wayne",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users/unexposed",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "fullName": "David",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "fullName": "Paul",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "fullName": "Wayne",
                            "legalEntityId": "951293e6521940e3ae0608f93ff0b215",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
                {
                    status: 201,
                    body: {
                        "id": "0955e686d31e4216b3dd5d66161d536d"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users/add",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/context/users/remove",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{id}/admins",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/serviceagreements/{serviceAgreementId}/state",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
    ]);

    var ServiceAgreementsHttpService = /** @class */ (function () {
        function ServiceAgreementsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ServiceAgreementsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ServiceAgreementsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ServiceAgreementsHttpService.prototype.getAssignUsersPermissions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAssignUsersPermissions.');
            }
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getAssignUsersPermissions.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/" + encodeURIComponent(String(_userId)) + "/permissions", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.getAssignUsersPermissionsUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAssignUsersPermissions.');
            }
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getAssignUsersPermissions.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/" + encodeURIComponent(String(_userId)) + "/permissions";
        };
        ServiceAgreementsHttpService.prototype.getBusinessfunctions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getBusinessfunctions.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/business-functions", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.getBusinessfunctionsUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getBusinessfunctions.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/business-functions";
        };
        ServiceAgreementsHttpService.prototype.getContextServiceAgreementParticipants = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/usercontext/participants", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.getContextServiceAgreementParticipantsUrl = function () {
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/usercontext/participants";
        };
        ServiceAgreementsHttpService.prototype.getServiceAgreementParticipants = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getServiceAgreementParticipants.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/participants", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.getServiceAgreementParticipantsUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getServiceAgreementParticipants.');
            }
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/participants";
        };
        ServiceAgreementsHttpService.prototype.getServiceAgreementUsersSA = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getServiceAgreementUsersSA.');
            }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.getServiceAgreementUsersSAUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getServiceAgreementUsersSA.');
            }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users" + (queryString ? "?" + queryString : '');
        };
        ServiceAgreementsHttpService.prototype.getServiceAgreements = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _creatorId = requestParameters["creatorId"];
            var _userId = requestParameters["userId"];
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_creatorId !== undefined && _creatorId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _creatorId, 'creatorId');
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/hierarchy", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.getServiceAgreementsUrl = function (requestParameters) {
            var _creatorId = requestParameters["creatorId"];
            var _userId = requestParameters["userId"];
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_creatorId !== undefined && _creatorId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _creatorId, 'creatorId');
            }
            if (_userId !== undefined && _userId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
            }
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/hierarchy" + (queryString ? "?" + queryString : '');
        };
        ServiceAgreementsHttpService.prototype.getUnexposedUsersSA = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getUnexposedUsersSA.');
            }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/unexposed", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.getUnexposedUsersSAUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getUnexposedUsersSA.');
            }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/unexposed" + (queryString ? "?" + queryString : '');
        };
        ServiceAgreementsHttpService.prototype.postUsersAddSA = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postUsersAddSA.');
            }
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/add", _usersForServiceAgreement, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.postUsersAddSAUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postUsersAddSA.');
            }
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/add";
        };
        ServiceAgreementsHttpService.prototype.postUsersRemoveSA = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postUsersRemoveSA.');
            }
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/remove", _usersForServiceAgreement, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.postUsersRemoveSAUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postUsersRemoveSA.');
            }
            var _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/remove";
        };
        ServiceAgreementsHttpService.prototype.putAssignUsersPermissions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putAssignUsersPermissions.');
            }
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling putAssignUsersPermissions.');
            }
            var _listOfFunctionGroupsWithDataGroups = requestParameters["listOfFunctionGroupsWithDataGroups"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/" + encodeURIComponent(String(_userId)) + "/permissions", _listOfFunctionGroupsWithDataGroups, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.putAssignUsersPermissionsUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putAssignUsersPermissions.');
            }
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling putAssignUsersPermissions.');
            }
            var _listOfFunctionGroupsWithDataGroups = requestParameters["listOfFunctionGroupsWithDataGroups"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)) + "/users/" + encodeURIComponent(String(_userId)) + "/permissions";
        };
        ServiceAgreementsHttpService.prototype.putServiceAgreementSave = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putServiceAgreementSave.');
            }
            var _serviceAgreementSave = requestParameters["serviceAgreementSave"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id)), _serviceAgreementSave, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ServiceAgreementsHttpService.prototype.putServiceAgreementSaveUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putServiceAgreementSave.');
            }
            var _serviceAgreementSave = requestParameters["serviceAgreementSave"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/service-agreements/" + encodeURIComponent(String(_id));
        };
        return ServiceAgreementsHttpService;
    }());
    ServiceAgreementsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ServiceAgreementsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ServiceAgreementsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ServiceAgreementsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ServiceAgreementsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ServiceAgreementsHttpServiceGetAssignUsersPermissionsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/{userId}/permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "items": [{
                                "functionGroupId": "98f8531d-9bf4-4f3f-a49b-7cf331d6eead",
                                "dataGroupIds": [{
                                        "id": "138a7683-e9da-4ffa-a257-b78626790cd7"
                                    }]
                            }, {
                                "functionGroupId": "00779897-253c-4bbb-b0c7-3c47fd0b0b08",
                                "dataGroupIds": []
                            }]
                    }
                },
            ]
        }]);
    var ServiceAgreementsHttpServiceGetBusinessfunctionsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/business-functions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "functionId": "1026",
                            "functionCode": "us.billpay.enrolment",
                            "resource": "Billpay",
                            "name": "US Billpay Enrolment",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1006",
                            "functionCode": "product.summary",
                            "resource": "Product Summary",
                            "name": "Product Summary",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1046",
                            "functionCode": "ach.debit",
                            "resource": "Payments",
                            "name": "ACH Debit",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1013",
                            "functionCode": "audit",
                            "resource": "Audit",
                            "name": "Audit",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1043",
                            "functionCode": "sepa.credit.transfer.intc",
                            "resource": "Payments",
                            "name": "SEPA CT - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1021",
                            "functionCode": "us.billpay.payments",
                            "resource": "Payments",
                            "name": "US Billpay Payments",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1011",
                            "functionCode": "manage.legalentities",
                            "resource": "Legal Entity",
                            "name": "Manage Legal Entities",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1032",
                            "functionCode": "assign.approval.policies",
                            "resource": "Approvals",
                            "name": "Assign Approval Policies",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1050",
                            "functionCode": "unlock.user",
                            "resource": "Identities",
                            "name": "Unlock User",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1049",
                            "functionCode": "lock.user",
                            "resource": "Identities",
                            "name": "Lock User",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1014",
                            "functionCode": "manage.shadow.limits",
                            "resource": "Limits",
                            "name": "Manage Shadow Limits",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1009",
                            "functionCode": "assign.permissions",
                            "resource": "Service Agreement",
                            "name": "Assign Permissions",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1037",
                            "functionCode": "batch.sepa",
                            "resource": "Batch",
                            "name": "Batch - SEPA CT",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1017",
                            "functionCode": "us.domestic.wire",
                            "resource": "Payments",
                            "name": "US Domestic Wire",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1010",
                            "functionCode": "manage.users",
                            "resource": "User",
                            "name": "Manage Users",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1022",
                            "functionCode": "us.billpay.payees",
                            "resource": "Contacts",
                            "name": "US Billpay Payees",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1019",
                            "functionCode": "manage.data.groups",
                            "resource": "Entitlements",
                            "name": "Manage Data Groups",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1015",
                            "functionCode": "intra.company.payments",
                            "resource": "Payments",
                            "name": "Intra Company Payments",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1044",
                            "functionCode": "us.domestic.wire.intc",
                            "resource": "Payments",
                            "name": "US Domestic Wire - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1028",
                            "functionCode": "manage.service.agreements",
                            "resource": "Service Agreement",
                            "name": "Manage Service Agreements",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1025",
                            "functionCode": "us.billpay.payees.summary",
                            "resource": "Contacts",
                            "name": "US Billpay Payees-Summary",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1038",
                            "functionCode": "manage.messages",
                            "resource": "Message Center",
                            "name": "Manage Messages",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1045",
                            "functionCode": "us.foreign.wire.intc",
                            "resource": "Payments",
                            "name": "US Foreign Wire - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1040",
                            "functionCode": "manage.default.limits",
                            "resource": "Limits",
                            "name": "Manage Default Limits",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1031",
                            "functionCode": "manage.topics",
                            "resource": "Message Center",
                            "name": "Manage Topics",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1042",
                            "functionCode": "ach.credit.intc",
                            "resource": "Payments",
                            "name": "ACH Credit - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1034",
                            "functionCode": "manage.identities",
                            "resource": "Identities",
                            "name": "Manage Identities",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1002",
                            "functionCode": "payments.sepa",
                            "resource": "Payments",
                            "name": "SEPA CT",
                            "privileges": [{
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1023",
                            "functionCode": "us.billpay.accounts",
                            "resource": "Arrangements",
                            "name": "US Billpay Accounts",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1047",
                            "functionCode": "manage.budgets",
                            "resource": "Personal Finance Management",
                            "name": "Manage Budgets",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1033",
                            "functionCode": "manage.approval.policy.level",
                            "resource": "Approvals",
                            "name": "Manage Approval Policy and Level",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1035",
                            "functionCode": "manage.user.profiles",
                            "resource": "User Profiles",
                            "name": "Manage User Profiles",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1003",
                            "functionCode": "transactions",
                            "resource": "Transactions",
                            "name": "Transactions",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1039",
                            "functionCode": "supervise.messages",
                            "resource": "Message Center",
                            "name": "Supervise Messages",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1005",
                            "functionCode": "contacts",
                            "resource": "Contacts",
                            "name": "Contacts",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1012",
                            "functionCode": "manage.limits",
                            "resource": "Limits",
                            "name": "Manage Limits",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1041",
                            "functionCode": "ach.credit.transfer",
                            "resource": "Payments",
                            "name": "ACH Credit Transfer",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1029",
                            "functionCode": "manage.actions.recipes",
                            "resource": "Actions",
                            "name": "Manage Action Recipes",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1027",
                            "functionCode": "access.actions.history",
                            "resource": "Actions",
                            "name": "Access Actions History",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1016",
                            "functionCode": "manage.statements",
                            "resource": "Account Statements",
                            "name": "Manage Statements",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1048",
                            "functionCode": "manage.saving.goals",
                            "resource": "Personal Finance Management",
                            "name": "Manage Saving Goals",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1030",
                            "functionCode": "manage.notifications",
                            "resource": "Notifications",
                            "name": "Manage Notifications",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1020",
                            "functionCode": "manage.function.groups",
                            "resource": "Entitlements",
                            "name": "Manage Function Groups",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1007",
                            "functionCode": "assign.users",
                            "resource": "Service Agreement",
                            "name": "Assign Users",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1018",
                            "functionCode": "us.foreign.wire",
                            "resource": "Payments",
                            "name": "US Foreign Wire",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1036",
                            "functionCode": "support.access.payments",
                            "resource": "Support Access",
                            "name": "Support Access for Payments",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1024",
                            "functionCode": "us.billpay.payees.search",
                            "resource": "Contacts",
                            "name": "US Billpay Payees-Search",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1051",
                            "functionCode": "manage.devices",
                            "resource": "Device",
                            "name": "Manage Devices",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1052",
                            "functionCode": "sepa.credit.transfer.closed",
                            "resource": "Payments",
                            "name": "SEPA CT - closed",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1053",
                            "functionCode": "a2a.transfer",
                            "resource": "Payments",
                            "name": "A2A Transfer",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }]
                },
            ]
        }]);
    var ServiceAgreementsHttpServiceGetContextServiceAgreementParticipantsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/usercontext/participants",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "sharingUsers": true,
                            "sharingAccounts": false
                        }, {
                            "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "sharingUsers": false,
                            "sharingAccounts": true
                        }]
                },
            ]
        }]);
    var ServiceAgreementsHttpServiceGetServiceAgreementParticipantsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/participants",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "sharingUsers": true,
                            "sharingAccounts": false
                        }, {
                            "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "sharingUsers": false,
                            "sharingAccounts": true
                        }]
                },
            ]
        }]);
    var ServiceAgreementsHttpServiceGetServiceAgreementUsersSAMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "David",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "Paul",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "fullName": "Wayne",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        }]);
    var ServiceAgreementsHttpServiceGetServiceAgreementsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/hierarchy",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "951293e6521940e3ae0608f93ff0b215",
                            "externalId": "external-id-1",
                            "name": "Broker deal 1",
                            "description": "Agreement between Backbase and Apple",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3,
                            "validFromDate": "2017-03-31",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-03-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96147",
                            "externalId": "external-id-2",
                            "name": "Broker deal 2",
                            "description": "Agreement between Backbase and HP",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4,
                            "validFromDate": "2018-03-31",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-03-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96148",
                            "externalId": "external-id-3",
                            "name": "Broker deal 3",
                            "description": "Agreement between Backbase and Tyler Boyd Associates",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1,
                            "validFromDate": "2018-10-31",
                            "validFromTime": "09:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96149",
                            "externalId": "external-id-4",
                            "name": "Broker deal 4",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UAE",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3,
                            "validUntilDate": "2020-06-29",
                            "validUntilTime": "20:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96150",
                            "externalId": "external-id-5",
                            "name": "Broker deal 5",
                            "description": "Agreement between Backbase and Tyler Boyd Associates US",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4,
                            "validFromDate": "2015-01-01",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-12-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96151",
                            "externalId": "external-id-6",
                            "name": "Broker deal 6",
                            "description": "Agreement between Backbase and Tyler Boyd Associates US Salary Services",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96152",
                            "externalId": "external-id-7",
                            "name": "Broker deal 7",
                            "description": "Agreement between Backbase and Tyler Boyd Associates US Training",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96153",
                            "externalId": "external-id-8",
                            "name": "Broker deal 8",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UK",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96154",
                            "externalId": "external-id-9",
                            "name": "Broker deal 9",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UK Sales",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96155",
                            "externalId": "external-id-10",
                            "name": "Broker deal 10",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UK Marketing",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96156",
                            "externalId": "external-id-11",
                            "name": "Broker deal 11",
                            "description": "Agreement between Backbase and Microsoft",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3,
                            "validFromDate": "2017-03-01",
                            "validFromTime": "10:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96157",
                            "externalId": "external-id-12",
                            "name": "Broker deal 12",
                            "description": "Agreement between Backbase and Packard-Bell",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96158",
                            "externalId": "external-id-13",
                            "name": "Broker deal 13",
                            "description": "Agreement between Backbase and Packard-Bell US",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96159",
                            "externalId": "external-id-14",
                            "name": "Broker deal 14",
                            "description": "Agreement between Backbase and Packard-Bell UAE",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96160",
                            "externalId": "external-id-15",
                            "name": "Broker deal 15",
                            "description": "Agreement between Backbase and Packard-Bell US Foreign Exchange",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4,
                            "validFromDate": "2017-03-31",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-03-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96161",
                            "externalId": "external-id-16",
                            "name": "Broker deal 16",
                            "description": "Agreement between Backbase and Packard-Bell US Salary Services",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96162",
                            "externalId": "external-id-17",
                            "name": "Broker deal 17",
                            "description": "Agreement between Backbase and Packard-Bell US Training",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96163",
                            "externalId": "external-id-18",
                            "name": "Broker deal 18",
                            "description": "Agreement between Backbase and Packard-Bell UK",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96164",
                            "externalId": "external-id-19",
                            "name": "Broker deal 19",
                            "description": "Agreement between Backbase and Packard-Bell UK Sales",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96165",
                            "externalId": "external-id-20",
                            "name": "Broker deal 20",
                            "description": "Agreement between Backbase and Packard-Bell UK Marketing",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96166",
                            "externalId": "external-id-21",
                            "name": "Broker deal 21",
                            "description": "Agreement between Backbase and Jenkins",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96167",
                            "externalId": "external-id-22",
                            "name": "Broker deal 22",
                            "description": "Agreement between Backbase and Blue Ocean",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96168",
                            "externalId": "external-id-23",
                            "name": "Broker deal 23",
                            "description": "Agreement between Backbase and Dell US",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96169",
                            "externalId": "external-id-24",
                            "name": "Broker deal 24",
                            "description": "Agreement between Backbase and Dell UAE",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96170",
                            "externalId": "external-id-25",
                            "name": "Broker deal 25",
                            "description": "Agreement between Backbase and Dell AUS",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96171",
                            "externalId": "external-id-26",
                            "name": "Broker deal 26",
                            "description": "Agreement between Backbase and Dell US Salary Services",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96172",
                            "externalId": "external-id-27",
                            "name": "Broker deal 27",
                            "description": "Agreement between Backbase and Dell US Training",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96173",
                            "externalId": "external-id-28",
                            "name": "Broker deal 28",
                            "description": "Agreement between Backbase and Dell UK",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96174",
                            "externalId": "external-id-29",
                            "name": "Broker deal 29",
                            "description": "Agreement between Backbase and Dell UK Sales",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96175",
                            "externalId": "external-id-30",
                            "name": "Broker deal 30",
                            "description": "Agreement between Backbase and Dell UK Marketing",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }]
                },
            ]
        }]);
    var ServiceAgreementsHttpServiceGetUnexposedUsersSAMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/unexposed",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "fullName": "David",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "fullName": "Paul",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "fullName": "Wayne",
                            "legalEntityId": "951293e6521940e3ae0608f93ff0b215",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        }]);
    var ServiceAgreementsHttpServicePostUsersAddSAMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/add",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var ServiceAgreementsHttpServicePostUsersRemoveSAMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/remove",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var ServiceAgreementsHttpServicePutAssignUsersPermissionsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/{userId}/permissions",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        }]);
    var ServiceAgreementsHttpServicePutServiceAgreementSaveMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var ServiceAgreementsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/{userId}/permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "items": [{
                                "functionGroupId": "98f8531d-9bf4-4f3f-a49b-7cf331d6eead",
                                "dataGroupIds": [{
                                        "id": "138a7683-e9da-4ffa-a257-b78626790cd7"
                                    }]
                            }, {
                                "functionGroupId": "00779897-253c-4bbb-b0c7-3c47fd0b0b08",
                                "dataGroupIds": []
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/business-functions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "functionId": "1026",
                            "functionCode": "us.billpay.enrolment",
                            "resource": "Billpay",
                            "name": "US Billpay Enrolment",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1006",
                            "functionCode": "product.summary",
                            "resource": "Product Summary",
                            "name": "Product Summary",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1046",
                            "functionCode": "ach.debit",
                            "resource": "Payments",
                            "name": "ACH Debit",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1013",
                            "functionCode": "audit",
                            "resource": "Audit",
                            "name": "Audit",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1043",
                            "functionCode": "sepa.credit.transfer.intc",
                            "resource": "Payments",
                            "name": "SEPA CT - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1021",
                            "functionCode": "us.billpay.payments",
                            "resource": "Payments",
                            "name": "US Billpay Payments",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1011",
                            "functionCode": "manage.legalentities",
                            "resource": "Legal Entity",
                            "name": "Manage Legal Entities",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1032",
                            "functionCode": "assign.approval.policies",
                            "resource": "Approvals",
                            "name": "Assign Approval Policies",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1050",
                            "functionCode": "unlock.user",
                            "resource": "Identities",
                            "name": "Unlock User",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1049",
                            "functionCode": "lock.user",
                            "resource": "Identities",
                            "name": "Lock User",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1014",
                            "functionCode": "manage.shadow.limits",
                            "resource": "Limits",
                            "name": "Manage Shadow Limits",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1009",
                            "functionCode": "assign.permissions",
                            "resource": "Service Agreement",
                            "name": "Assign Permissions",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1037",
                            "functionCode": "batch.sepa",
                            "resource": "Batch",
                            "name": "Batch - SEPA CT",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1017",
                            "functionCode": "us.domestic.wire",
                            "resource": "Payments",
                            "name": "US Domestic Wire",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1010",
                            "functionCode": "manage.users",
                            "resource": "User",
                            "name": "Manage Users",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1022",
                            "functionCode": "us.billpay.payees",
                            "resource": "Contacts",
                            "name": "US Billpay Payees",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1019",
                            "functionCode": "manage.data.groups",
                            "resource": "Entitlements",
                            "name": "Manage Data Groups",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1015",
                            "functionCode": "intra.company.payments",
                            "resource": "Payments",
                            "name": "Intra Company Payments",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1044",
                            "functionCode": "us.domestic.wire.intc",
                            "resource": "Payments",
                            "name": "US Domestic Wire - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1028",
                            "functionCode": "manage.service.agreements",
                            "resource": "Service Agreement",
                            "name": "Manage Service Agreements",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1025",
                            "functionCode": "us.billpay.payees.summary",
                            "resource": "Contacts",
                            "name": "US Billpay Payees-Summary",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1038",
                            "functionCode": "manage.messages",
                            "resource": "Message Center",
                            "name": "Manage Messages",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1045",
                            "functionCode": "us.foreign.wire.intc",
                            "resource": "Payments",
                            "name": "US Foreign Wire - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1040",
                            "functionCode": "manage.default.limits",
                            "resource": "Limits",
                            "name": "Manage Default Limits",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1031",
                            "functionCode": "manage.topics",
                            "resource": "Message Center",
                            "name": "Manage Topics",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1042",
                            "functionCode": "ach.credit.intc",
                            "resource": "Payments",
                            "name": "ACH Credit - Intracompany",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1034",
                            "functionCode": "manage.identities",
                            "resource": "Identities",
                            "name": "Manage Identities",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1002",
                            "functionCode": "payments.sepa",
                            "resource": "Payments",
                            "name": "SEPA CT",
                            "privileges": [{
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1023",
                            "functionCode": "us.billpay.accounts",
                            "resource": "Arrangements",
                            "name": "US Billpay Accounts",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1047",
                            "functionCode": "manage.budgets",
                            "resource": "Personal Finance Management",
                            "name": "Manage Budgets",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1033",
                            "functionCode": "manage.approval.policy.level",
                            "resource": "Approvals",
                            "name": "Manage Approval Policy and Level",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1035",
                            "functionCode": "manage.user.profiles",
                            "resource": "User Profiles",
                            "name": "Manage User Profiles",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1003",
                            "functionCode": "transactions",
                            "resource": "Transactions",
                            "name": "Transactions",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1039",
                            "functionCode": "supervise.messages",
                            "resource": "Message Center",
                            "name": "Supervise Messages",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1005",
                            "functionCode": "contacts",
                            "resource": "Contacts",
                            "name": "Contacts",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1012",
                            "functionCode": "manage.limits",
                            "resource": "Limits",
                            "name": "Manage Limits",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1041",
                            "functionCode": "ach.credit.transfer",
                            "resource": "Payments",
                            "name": "ACH Credit Transfer",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1029",
                            "functionCode": "manage.actions.recipes",
                            "resource": "Actions",
                            "name": "Manage Action Recipes",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1027",
                            "functionCode": "access.actions.history",
                            "resource": "Actions",
                            "name": "Access Actions History",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1016",
                            "functionCode": "manage.statements",
                            "resource": "Account Statements",
                            "name": "Manage Statements",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1048",
                            "functionCode": "manage.saving.goals",
                            "resource": "Personal Finance Management",
                            "name": "Manage Saving Goals",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1030",
                            "functionCode": "manage.notifications",
                            "resource": "Notifications",
                            "name": "Manage Notifications",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1020",
                            "functionCode": "manage.function.groups",
                            "resource": "Entitlements",
                            "name": "Manage Function Groups",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1007",
                            "functionCode": "assign.users",
                            "resource": "Service Agreement",
                            "name": "Assign Users",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1018",
                            "functionCode": "us.foreign.wire",
                            "resource": "Payments",
                            "name": "US Foreign Wire",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1036",
                            "functionCode": "support.access.payments",
                            "resource": "Support Access",
                            "name": "Support Access for Payments",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1024",
                            "functionCode": "us.billpay.payees.search",
                            "resource": "Contacts",
                            "name": "US Billpay Payees-Search",
                            "privileges": [{
                                    "privilege": "execute",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1051",
                            "functionCode": "manage.devices",
                            "resource": "Device",
                            "name": "Manage Devices",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": false
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": false
                                }]
                        }, {
                            "functionId": "1052",
                            "functionCode": "sepa.credit.transfer.closed",
                            "resource": "Payments",
                            "name": "SEPA CT - closed",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }, {
                            "functionId": "1053",
                            "functionCode": "a2a.transfer",
                            "resource": "Payments",
                            "name": "A2A Transfer",
                            "privileges": [{
                                    "privilege": "view",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "create",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "edit",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "delete",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "approve",
                                    "supportsLimit": true
                                }, {
                                    "privilege": "cancel",
                                    "supportsLimit": true
                                }]
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/usercontext/participants",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "sharingUsers": true,
                            "sharingAccounts": false
                        }, {
                            "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "sharingUsers": false,
                            "sharingAccounts": true
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/participants",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "externalId": "KPMG",
                            "name": "KPMG",
                            "sharingUsers": true,
                            "sharingAccounts": false
                        }, {
                            "id": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "externalId": "Backbase",
                            "name": "Backbase",
                            "sharingUsers": false,
                            "sharingAccounts": true
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "David",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db958963",
                            "fullName": "Paul",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "legalEntityId": "a1198a20-5a40-4eb7-b47f-a553db920429",
                            "fullName": "Wayne",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/hierarchy",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "951293e6521940e3ae0608f93ff0b215",
                            "externalId": "external-id-1",
                            "name": "Broker deal 1",
                            "description": "Agreement between Backbase and Apple",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3,
                            "validFromDate": "2017-03-31",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-03-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96147",
                            "externalId": "external-id-2",
                            "name": "Broker deal 2",
                            "description": "Agreement between Backbase and HP",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4,
                            "validFromDate": "2018-03-31",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-03-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96148",
                            "externalId": "external-id-3",
                            "name": "Broker deal 3",
                            "description": "Agreement between Backbase and Tyler Boyd Associates",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1,
                            "validFromDate": "2018-10-31",
                            "validFromTime": "09:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96149",
                            "externalId": "external-id-4",
                            "name": "Broker deal 4",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UAE",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3,
                            "validUntilDate": "2020-06-29",
                            "validUntilTime": "20:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96150",
                            "externalId": "external-id-5",
                            "name": "Broker deal 5",
                            "description": "Agreement between Backbase and Tyler Boyd Associates US",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4,
                            "validFromDate": "2015-01-01",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-12-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96151",
                            "externalId": "external-id-6",
                            "name": "Broker deal 6",
                            "description": "Agreement between Backbase and Tyler Boyd Associates US Salary Services",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96152",
                            "externalId": "external-id-7",
                            "name": "Broker deal 7",
                            "description": "Agreement between Backbase and Tyler Boyd Associates US Training",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96153",
                            "externalId": "external-id-8",
                            "name": "Broker deal 8",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UK",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96154",
                            "externalId": "external-id-9",
                            "name": "Broker deal 9",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UK Sales",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96155",
                            "externalId": "external-id-10",
                            "name": "Broker deal 10",
                            "description": "Agreement between Backbase and Tyler Boyd Associates UK Marketing",
                            "creatorLegalEntity": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96156",
                            "externalId": "external-id-11",
                            "name": "Broker deal 11",
                            "description": "Agreement between Backbase and Microsoft",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3,
                            "validFromDate": "2017-03-01",
                            "validFromTime": "10:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96157",
                            "externalId": "external-id-12",
                            "name": "Broker deal 12",
                            "description": "Agreement between Backbase and Packard-Bell",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96158",
                            "externalId": "external-id-13",
                            "name": "Broker deal 13",
                            "description": "Agreement between Backbase and Packard-Bell US",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96159",
                            "externalId": "external-id-14",
                            "name": "Broker deal 14",
                            "description": "Agreement between Backbase and Packard-Bell UAE",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96160",
                            "externalId": "external-id-15",
                            "name": "Broker deal 15",
                            "description": "Agreement between Backbase and Packard-Bell US Foreign Exchange",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4,
                            "validFromDate": "2017-03-31",
                            "validFromTime": "08:00:00",
                            "validUntilDate": "2019-03-31",
                            "validUntilTime": "08:00:00"
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96161",
                            "externalId": "external-id-16",
                            "name": "Broker deal 16",
                            "description": "Agreement between Backbase and Packard-Bell US Salary Services",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96162",
                            "externalId": "external-id-17",
                            "name": "Broker deal 17",
                            "description": "Agreement between Backbase and Packard-Bell US Training",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96163",
                            "externalId": "external-id-18",
                            "name": "Broker deal 18",
                            "description": "Agreement between Backbase and Packard-Bell UK",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96164",
                            "externalId": "external-id-19",
                            "name": "Broker deal 19",
                            "description": "Agreement between Backbase and Packard-Bell UK Sales",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96165",
                            "externalId": "external-id-20",
                            "name": "Broker deal 20",
                            "description": "Agreement between Backbase and Packard-Bell UK Marketing",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96166",
                            "externalId": "external-id-21",
                            "name": "Broker deal 21",
                            "description": "Agreement between Backbase and Jenkins",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96167",
                            "externalId": "external-id-22",
                            "name": "Broker deal 22",
                            "description": "Agreement between Backbase and Blue Ocean",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96168",
                            "externalId": "external-id-23",
                            "name": "Broker deal 23",
                            "description": "Agreement between Backbase and Dell US",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96169",
                            "externalId": "external-id-24",
                            "name": "Broker deal 24",
                            "description": "Agreement between Backbase and Dell UAE",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96170",
                            "externalId": "external-id-25",
                            "name": "Broker deal 25",
                            "description": "Agreement between Backbase and Dell AUS",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96171",
                            "externalId": "external-id-26",
                            "name": "Broker deal 26",
                            "description": "Agreement between Backbase and Dell US Salary Services",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96172",
                            "externalId": "external-id-27",
                            "name": "Broker deal 27",
                            "description": "Agreement between Backbase and Dell US Training",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96173",
                            "externalId": "external-id-28",
                            "name": "Broker deal 28",
                            "description": "Agreement between Backbase and Dell UK",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName",
                            "numberOfParticipants": 4
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96174",
                            "externalId": "external-id-29",
                            "name": "Broker deal 29",
                            "description": "Agreement between Backbase and Dell UK Sales",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": true,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName4",
                            "numberOfParticipants": 1
                        }, {
                            "id": "9e4fb91794574b98ae8a1e42bbe96175",
                            "externalId": "external-id-30",
                            "name": "Broker deal 30",
                            "description": "Agreement between Backbase and Dell UK Marketing",
                            "creatorLegalEntity": "9371efe0-e295-47f7-822f-934532646b98",
                            "isMaster": false,
                            "status": "ENABLED",
                            "creatorLegalEntityName": "someName1",
                            "numberOfParticipants": 3
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/unexposed",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "01d70d09997b41cb83ea0e1db84626b3",
                            "externalId": "U0000011",
                            "fullName": "David",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bbf6a23536fa49029abf9c03f97a82fa",
                            "externalId": "U0000012",
                            "fullName": "Paul",
                            "legalEntityId": "f63f3fc550794eed84bf848dbbba9bbd",
                            "legalEntityName": "LE-1"
                        }, {
                            "id": "bc4ce9091eb04754a5a9b9422099f0fa",
                            "externalId": "U0000013",
                            "fullName": "Wayne",
                            "legalEntityId": "951293e6521940e3ae0608f93ff0b215",
                            "legalEntityName": "LE-2"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/add",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/remove",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}/users/{userId}/permissions",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/service-agreements/{id}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
    ]);

    var UserContextHttpService = /** @class */ (function () {
        function UserContextHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        UserContextHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        UserContextHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        UserContextHttpService.prototype.getUserContextPermissions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _permissionsRequest = requestParameters["permissionsRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/usercontext/data-group-permissions", _permissionsRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserContextHttpService.prototype.getUserContextPermissionsUrl = function (requestParameters) {
            var _permissionsRequest = requestParameters["permissionsRequest"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/usercontext/data-group-permissions";
        };
        UserContextHttpService.prototype.getUserContextServiceAgreements = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/usercontext/serviceagreements", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserContextHttpService.prototype.getUserContextServiceAgreementsUrl = function (requestParameters) {
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/usercontext/serviceagreements" + (queryString ? "?" + queryString : '');
        };
        UserContextHttpService.prototype.postUserContext = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _userContextPOST = requestParameters["userContextPOST"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/accessgroups/usercontext", _userContextPOST, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UserContextHttpService.prototype.postUserContextUrl = function (requestParameters) {
            var _userContextPOST = requestParameters["userContextPOST"];
            return this.configuration.basePath + "/client-api/v2/accessgroups/usercontext";
        };
        return UserContextHttpService;
    }());
    UserContextHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserContextHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UserContextHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserContextHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UserContextHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var UserContextHttpServiceGetUserContextPermissionsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/usercontext/data-group-permissions",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "permissionsData": [{
                                "permissions": [{
                                        "resourceName": "Payments",
                                        "functionName": "SEPA CT",
                                        "privileges": ["view"]
                                    }, {
                                        "resourceName": "Payments",
                                        "functionName": "Domestic Payments",
                                        "privileges": ["view", "create"]
                                    }],
                                "dataGroups": [[{
                                            "dataGroupType": "ARRANGAMENTS",
                                            "dataGroupIds": ["a9393b23-62f5-4f07-ae8f-ba0dbea86c36"]
                                        }, {
                                            "dataGroupType": "PAYEES",
                                            "dataGroupIds": ["a29c3cf2-9bda-41ee-8998-031f594a66b4"]
                                        }], [{
                                            "dataGroupType": "ARRANGEMENTS",
                                            "dataGroupIds": ["f6677897-7a75-4bd5-8fc4-25695ca5b4de"]
                                        }]]
                            }, {
                                "permissions": [{
                                        "resourceName": "Payments",
                                        "functionName": "Domestic Payments",
                                        "privileges": ["create"]
                                    }],
                                "dataGroups": [[{
                                            "dataGroupType": "ARRANGEMENTS",
                                            "dataGroupIds": ["f6677897-7a75-4bd5-8fc4-25695ca5b4de"]
                                        }]]
                            }],
                        "dataGroupsData": [{
                                "dataGroupId": "a9393b23-62f5-4f07-ae8f-ba0dbea86c36",
                                "dataItemIds": ["d308ae19-d170-4967-b185-dceb8d356cfa"]
                            }, {
                                "dataGroupId": "a29c3cf2-9bda-41ee-8998-031f594a66b4",
                                "dataItemIds": ["66893fed-bbbb-42d6-a5c3-320b6d4a781f"]
                            }, {
                                "dataGroupId": "f6677897-7a75-4bd5-8fc4-25695ca5b4de",
                                "dataItemIds": ["d0c8dd02-99be-46e9-8ff0-8021a71552a7"]
                            }]
                    }
                },
            ]
        }]);
    var UserContextHttpServiceGetUserContextServiceAgreementsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/usercontext/serviceagreements",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "a1198a205a404eb7b47fa553db920429",
                            "name": "Online Banking Service Agreement",
                            "description": "Service Agreement between Online Banking and Backbase",
                            "isMaster": false
                        }, {
                            "id": "37115f7b556a4e11ba0bfd07e2567b1d",
                            "name": "Doe Corporation Service Agreement",
                            "description": "Service Agreement for Doe Corp.",
                            "isMaster": true
                        }]
                },
            ]
        }]);
    var UserContextHttpServicePostUserContextMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/usercontext",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        }]);
    var UserContextHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/usercontext/data-group-permissions",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "permissionsData": [{
                                "permissions": [{
                                        "resourceName": "Payments",
                                        "functionName": "SEPA CT",
                                        "privileges": ["view"]
                                    }, {
                                        "resourceName": "Payments",
                                        "functionName": "Domestic Payments",
                                        "privileges": ["view", "create"]
                                    }],
                                "dataGroups": [[{
                                            "dataGroupType": "ARRANGAMENTS",
                                            "dataGroupIds": ["a9393b23-62f5-4f07-ae8f-ba0dbea86c36"]
                                        }, {
                                            "dataGroupType": "PAYEES",
                                            "dataGroupIds": ["a29c3cf2-9bda-41ee-8998-031f594a66b4"]
                                        }], [{
                                            "dataGroupType": "ARRANGEMENTS",
                                            "dataGroupIds": ["f6677897-7a75-4bd5-8fc4-25695ca5b4de"]
                                        }]]
                            }, {
                                "permissions": [{
                                        "resourceName": "Payments",
                                        "functionName": "Domestic Payments",
                                        "privileges": ["create"]
                                    }],
                                "dataGroups": [[{
                                            "dataGroupType": "ARRANGEMENTS",
                                            "dataGroupIds": ["f6677897-7a75-4bd5-8fc4-25695ca5b4de"]
                                        }]]
                            }],
                        "dataGroupsData": [{
                                "dataGroupId": "a9393b23-62f5-4f07-ae8f-ba0dbea86c36",
                                "dataItemIds": ["d308ae19-d170-4967-b185-dceb8d356cfa"]
                            }, {
                                "dataGroupId": "a29c3cf2-9bda-41ee-8998-031f594a66b4",
                                "dataItemIds": ["66893fed-bbbb-42d6-a5c3-320b6d4a781f"]
                            }, {
                                "dataGroupId": "f6677897-7a75-4bd5-8fc4-25695ca5b4de",
                                "dataItemIds": ["d0c8dd02-99be-46e9-8ff0-8021a71552a7"]
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/usercontext/serviceagreements",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "a1198a205a404eb7b47fa553db920429",
                            "name": "Online Banking Service Agreement",
                            "description": "Service Agreement between Online Banking and Backbase",
                            "isMaster": false
                        }, {
                            "id": "37115f7b556a4e11ba0bfd07e2567b1d",
                            "name": "Doe Corporation Service Agreement",
                            "description": "Service Agreement for Doe Corp.",
                            "isMaster": true
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/usercontext",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
            ]
        },
    ]);

    var UsersHttpService = /** @class */ (function () {
        function UsersHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        UsersHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        UsersHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        UsersHttpService.prototype.getArrangementUserPermissionCheck = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var _resource = requestParameters["resource"];
            if (_resource === null || _resource === undefined) {
                throw new Error('Required parameter resource was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var _function = requestParameters["function"];
            if (_function === null || _function === undefined) {
                throw new Error('Required parameter function was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var _privilege = requestParameters["privilege"];
            if (_privilege === null || _privilege === undefined) {
                throw new Error('Required parameter privilege was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_resource !== undefined && _resource !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
            }
            if (_function !== undefined && _function !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/users/user-privileges/arrangements/" + encodeURIComponent(String(_id)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UsersHttpService.prototype.getArrangementUserPermissionCheckUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var _resource = requestParameters["resource"];
            if (_resource === null || _resource === undefined) {
                throw new Error('Required parameter resource was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var _function = requestParameters["function"];
            if (_function === null || _function === undefined) {
                throw new Error('Required parameter function was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var _privilege = requestParameters["privilege"];
            if (_privilege === null || _privilege === undefined) {
                throw new Error('Required parameter privilege was null or undefined when calling getArrangementUserPermissionCheck.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_resource !== undefined && _resource !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
            }
            if (_function !== undefined && _function !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/users/user-privileges/arrangements/" + encodeURIComponent(String(_id)) + (queryString ? "?" + queryString : '');
        };
        UsersHttpService.prototype.getArrangementUserPrivileges = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getArrangementUserPrivileges.');
            }
            var _resourceName = requestParameters["resourceName"];
            if (_resourceName === null || _resourceName === undefined) {
                throw new Error('Required parameter resourceName was null or undefined when calling getArrangementUserPrivileges.');
            }
            var _privilegeName = requestParameters["privilegeName"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            if (_privilegeName !== undefined && _privilegeName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilegeName, 'privilegeName');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/users/user-privileges/arrangements", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UsersHttpService.prototype.getArrangementUserPrivilegesUrl = function (requestParameters) {
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getArrangementUserPrivileges.');
            }
            var _resourceName = requestParameters["resourceName"];
            if (_resourceName === null || _resourceName === undefined) {
                throw new Error('Required parameter resourceName was null or undefined when calling getArrangementUserPrivileges.');
            }
            var _privilegeName = requestParameters["privilegeName"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            if (_privilegeName !== undefined && _privilegeName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilegeName, 'privilegeName');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/users/user-privileges/arrangements" + (queryString ? "?" + queryString : '');
        };
        UsersHttpService.prototype.getCheckUserPermission = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getCheckUserPermission.');
            }
            var _resourceName = requestParameters["resourceName"];
            if (_resourceName === null || _resourceName === undefined) {
                throw new Error('Required parameter resourceName was null or undefined when calling getCheckUserPermission.');
            }
            var _privileges = requestParameters["privileges"];
            if (_privileges === null || _privileges === undefined) {
                throw new Error('Required parameter privileges was null or undefined when calling getCheckUserPermission.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            if (_privileges !== undefined && _privileges !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privileges, 'privileges');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/users/user-permissions", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UsersHttpService.prototype.getCheckUserPermissionUrl = function (requestParameters) {
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getCheckUserPermission.');
            }
            var _resourceName = requestParameters["resourceName"];
            if (_resourceName === null || _resourceName === undefined) {
                throw new Error('Required parameter resourceName was null or undefined when calling getCheckUserPermission.');
            }
            var _privileges = requestParameters["privileges"];
            if (_privileges === null || _privileges === undefined) {
                throw new Error('Required parameter privileges was null or undefined when calling getCheckUserPermission.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            if (_privileges !== undefined && _privileges !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privileges, 'privileges');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/users/user-permissions" + (queryString ? "?" + queryString : '');
        };
        UsersHttpService.prototype.getDataItemPermissionsContext = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _functionName = requestParameters["functionName"];
            var _resourceName = requestParameters["resourceName"];
            var _privilege = requestParameters["privilege"];
            var _dataGroupType = requestParameters["dataGroupType"];
            var _dataItemId = requestParameters["dataItemId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            if (_dataGroupType !== undefined && _dataGroupType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
            }
            if (_dataItemId !== undefined && _dataItemId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/users/data-item-permissions", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UsersHttpService.prototype.getDataItemPermissionsContextUrl = function (requestParameters) {
            var _functionName = requestParameters["functionName"];
            var _resourceName = requestParameters["resourceName"];
            var _privilege = requestParameters["privilege"];
            var _dataGroupType = requestParameters["dataGroupType"];
            var _dataItemId = requestParameters["dataItemId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            if (_dataGroupType !== undefined && _dataGroupType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
            }
            if (_dataItemId !== undefined && _dataItemId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/users/data-item-permissions" + (queryString ? "?" + queryString : '');
        };
        UsersHttpService.prototype.getUserPermissionsSummary = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/users/permissions/summary", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UsersHttpService.prototype.getUserPermissionsSummaryUrl = function () {
            return this.configuration.basePath + "/client-api/v2/accessgroups/users/permissions/summary";
        };
        UsersHttpService.prototype.getUserPrivileges = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getUserPrivileges.');
            }
            var _resourceName = requestParameters["resourceName"];
            if (_resourceName === null || _resourceName === undefined) {
                throw new Error('Required parameter resourceName was null or undefined when calling getUserPrivileges.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/users/user-privileges", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UsersHttpService.prototype.getUserPrivilegesUrl = function (requestParameters) {
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getUserPrivileges.');
            }
            var _resourceName = requestParameters["resourceName"];
            if (_resourceName === null || _resourceName === undefined) {
                throw new Error('Required parameter resourceName was null or undefined when calling getUserPrivileges.');
            }
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_resourceName !== undefined && _resourceName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/users/user-privileges" + (queryString ? "?" + queryString : '');
        };
        UsersHttpService.prototype.getUsersByPermissions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getUsersByPermissions.');
            }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _privilege = requestParameters["privilege"];
            var _dataGroupType = requestParameters["dataGroupType"];
            var _dataItemId = requestParameters["dataItemId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            if (_dataGroupType !== undefined && _dataGroupType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
            }
            if (_dataItemId !== undefined && _dataItemId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/accessgroups/users/by-permissions", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        UsersHttpService.prototype.getUsersByPermissionsUrl = function (requestParameters) {
            var _functionName = requestParameters["functionName"];
            if (_functionName === null || _functionName === undefined) {
                throw new Error('Required parameter functionName was null or undefined when calling getUsersByPermissions.');
            }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _privilege = requestParameters["privilege"];
            var _dataGroupType = requestParameters["dataGroupType"];
            var _dataItemId = requestParameters["dataItemId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_functionName !== undefined && _functionName !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
            }
            if (_privilege !== undefined && _privilege !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
            }
            if (_dataGroupType !== undefined && _dataGroupType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
            }
            if (_dataItemId !== undefined && _dataItemId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/accessgroups/users/by-permissions" + (queryString ? "?" + queryString : '');
        };
        return UsersHttpService;
    }());
    UsersHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UsersHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    UsersHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UsersHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: UsersHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var UsersHttpServiceGetArrangementUserPermissionCheckMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-privileges/arrangements/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var UsersHttpServiceGetArrangementUserPrivilegesMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-privileges/arrangements",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "arrangementId": "9fa0961eb3d04dd3a5e48748d27e7275",
                            "privileges": [{
                                    "privilege": "view"
                                }]
                        }, {
                            "arrangementId": "149f7e8d26904fc38bd0fdfc83394116",
                            "privileges": [{
                                    "privilege": "view"
                                }]
                        }]
                },
            ]
        }]);
    var UsersHttpServiceGetCheckUserPermissionMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        }]);
    var UsersHttpServiceGetDataItemPermissionsContextMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/users/data-item-permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "dataItem": {
                                "id": "9fa0961eb3d04dd3a5e48748d27e7275",
                                "dataType": "ARRANGEMENTS"
                            },
                            "permissions": [{
                                    "resource": "Payments",
                                    "businessFunction": "SEPA CT",
                                    "privileges": ["view"]
                                }, {
                                    "resource": "Payments",
                                    "businessFunction": "Domestic Payments",
                                    "privileges": ["view", "create"]
                                }]
                        }, {
                            "dataItem": {
                                "id": "9fa0961eb3d046d3a5e48748d27e7275",
                                "dataType": "ARRANGEMENTS"
                            },
                            "permissions": [{
                                    "resource": "Payments",
                                    "businessFunction": "Domestic Payments",
                                    "privileges": ["approve"]
                                }]
                        }]
                },
            ]
        }]);
    var UsersHttpServiceGetUserPermissionsSummaryMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/users/permissions/summary",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "resource": "Contacts",
                            "function": "Contacts",
                            "permissions": {
                                "view": true,
                                "edit": true
                            }
                        }, {
                            "resource": "Payments",
                            "function": "US Domestic Wire",
                            "permissions": {
                                "create": true,
                                "view": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Payments",
                            "function": "US Foreign Wire",
                            "permissions": {
                                "create": true,
                                "view": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "permissions": {
                                "create": true,
                                "view": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Entitlements",
                            "function": "Manage Data Groups",
                            "permissions": {
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Entitlements",
                            "function": "Manage Function Groups",
                            "permissions": {
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Limits",
                            "function": "Manage Limits",
                            "permissions": {
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Actions",
                            "function": "Manage Action Recipes",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "User",
                            "function": "Manage Users",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Service Agreement",
                            "function": "Assign Users",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Service Agreement",
                            "function": "Assign Permissions",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Service Agreement",
                            "function": "Manage Service Agreements",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Legal Entity",
                            "function": "Manage Legal Entities",
                            "permissions": {
                                "view": true
                            }
                        }, {
                            "resource": "Approvals",
                            "function": "Assign Approval Policies",
                            "permissions": {
                                "create": true,
                                "delete": true,
                                "edit": true,
                                "view": true
                            }
                        }]
                },
            ]
        }]);
    var UsersHttpServiceGetUserPrivilegesMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-privileges",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "privilege": "execute"
                        }, {
                            "privilege": "read"
                        }]
                },
            ]
        }]);
    var UsersHttpServiceGetUsersByPermissionsMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/accessgroups/users/by-permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "userIds": ["4e4def6f-d7dc-40ef-9031-3a62938a859c", "f7552b61-5f17-45d4-bdbe-fa3a12217bdd"]
                    }
                },
            ]
        }]);
    var UsersHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-privileges/arrangements/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-privileges/arrangements",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "arrangementId": "9fa0961eb3d04dd3a5e48748d27e7275",
                            "privileges": [{
                                    "privilege": "view"
                                }]
                        }, {
                            "arrangementId": "149f7e8d26904fc38bd0fdfc83394116",
                            "privileges": [{
                                    "privilege": "view"
                                }]
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {}
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/users/data-item-permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "dataItem": {
                                "id": "9fa0961eb3d04dd3a5e48748d27e7275",
                                "dataType": "ARRANGEMENTS"
                            },
                            "permissions": [{
                                    "resource": "Payments",
                                    "businessFunction": "SEPA CT",
                                    "privileges": ["view"]
                                }, {
                                    "resource": "Payments",
                                    "businessFunction": "Domestic Payments",
                                    "privileges": ["view", "create"]
                                }]
                        }, {
                            "dataItem": {
                                "id": "9fa0961eb3d046d3a5e48748d27e7275",
                                "dataType": "ARRANGEMENTS"
                            },
                            "permissions": [{
                                    "resource": "Payments",
                                    "businessFunction": "Domestic Payments",
                                    "privileges": ["approve"]
                                }]
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/users/permissions/summary",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "resource": "Contacts",
                            "function": "Contacts",
                            "permissions": {
                                "view": true,
                                "edit": true
                            }
                        }, {
                            "resource": "Payments",
                            "function": "US Domestic Wire",
                            "permissions": {
                                "create": true,
                                "view": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Payments",
                            "function": "US Foreign Wire",
                            "permissions": {
                                "create": true,
                                "view": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "permissions": {
                                "create": true,
                                "view": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Entitlements",
                            "function": "Manage Data Groups",
                            "permissions": {
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Entitlements",
                            "function": "Manage Function Groups",
                            "permissions": {
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Limits",
                            "function": "Manage Limits",
                            "permissions": {
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Actions",
                            "function": "Manage Action Recipes",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "User",
                            "function": "Manage Users",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Service Agreement",
                            "function": "Assign Users",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Service Agreement",
                            "function": "Assign Permissions",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true,
                                "approve": true
                            }
                        }, {
                            "resource": "Service Agreement",
                            "function": "Manage Service Agreements",
                            "permissions": {
                                "execute": true,
                                "view": true,
                                "edit": true,
                                "create": true,
                                "delete": true
                            }
                        }, {
                            "resource": "Legal Entity",
                            "function": "Manage Legal Entities",
                            "permissions": {
                                "view": true
                            }
                        }, {
                            "resource": "Approvals",
                            "function": "Assign Approval Policies",
                            "permissions": {
                                "create": true,
                                "delete": true,
                                "edit": true,
                                "view": true
                            }
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/users/user-privileges",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "privilege": "execute"
                        }, {
                            "privilege": "read"
                        }]
                },
            ]
        },
        {
            urlPattern: "/access-control/client-api/v2/accessgroups/users/by-permissions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "userIds": ["4e4def6f-d7dc-40ef-9031-3a62938a859c", "f7552b61-5f17-45d4-bdbe-fa3a12217bdd"]
                    }
                },
            ]
        },
    ]);

    var WizardHttpService = /** @class */ (function () {
        function WizardHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/access-control';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new AccessControlConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        WizardHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        WizardHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        WizardHttpService.prototype.postWizardSetup = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling postWizardSetup.');
            }
            var _wizardUsersPermissionsSetup = requestParameters["wizardUsersPermissionsSetup"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/wizard/service-agreements/" + encodeURIComponent(String(_serviceAgreementId)) + "/setup", _wizardUsersPermissionsSetup, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        WizardHttpService.prototype.postWizardSetupUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
                throw new Error('Required parameter serviceAgreementId was null or undefined when calling postWizardSetup.');
            }
            var _wizardUsersPermissionsSetup = requestParameters["wizardUsersPermissionsSetup"];
            return this.configuration.basePath + "/client-api/v2/wizard/service-agreements/" + encodeURIComponent(String(_serviceAgreementId)) + "/setup";
        };
        return WizardHttpService;
    }());
    WizardHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: WizardHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: AccessControlConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    WizardHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: WizardHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: WizardHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCESS_CONTROL_BASE_PATH]
                        }] }, { type: AccessControlConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var WizardHttpServicePostWizardSetupMocksProvider = i2.createMocks([{
            urlPattern: "/access-control/client-api/v2/wizard/service-agreements/{serviceAgreementId}/setup",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        }]);
    var WizardHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/access-control/client-api/v2/wizard/service-agreements/{serviceAgreementId}/setup",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalStatus": "PENDING"
                    }
                },
            ]
        },
    ]);

    exports.ACCESS_CONTROL_BASE_PATH = ACCESS_CONTROL_BASE_PATH;
    exports.AccessControlApiModule = AccessControlApiModule;
    exports.AccessControlConfiguration = AccessControlConfiguration;
    exports.ApprovalStatus = ApprovalStatus;
    exports.ApprovalsHttpService = ApprovalsHttpService;
    exports.ApprovalsHttpServiceGetApprovalsMocksProvider = ApprovalsHttpServiceGetApprovalsMocksProvider;
    exports.ApprovalsHttpServiceGetPresentationDataGroupApprovalDetailsItemMocksProvider = ApprovalsHttpServiceGetPresentationDataGroupApprovalDetailsItemMocksProvider;
    exports.ApprovalsHttpServiceGetPresentationFunctionGroupApprovalDetailsItemMocksProvider = ApprovalsHttpServiceGetPresentationFunctionGroupApprovalDetailsItemMocksProvider;
    exports.ApprovalsHttpServiceGetPresentationPermissionsApprovalDetailsItemMocksProvider = ApprovalsHttpServiceGetPresentationPermissionsApprovalDetailsItemMocksProvider;
    exports.ApprovalsHttpServiceGetServiceAgreementApprovalDetailsItemMocksProvider = ApprovalsHttpServiceGetServiceAgreementApprovalDetailsItemMocksProvider;
    exports.ApprovalsHttpServiceGetWizardApprovalDetailsMocksProvider = ApprovalsHttpServiceGetWizardApprovalDetailsMocksProvider;
    exports.ApprovalsHttpServiceMocksProvider = ApprovalsHttpServiceMocksProvider;
    exports.ApprovalsHttpServicePostApproveApprovalRequestMocksProvider = ApprovalsHttpServicePostApproveApprovalRequestMocksProvider;
    exports.ApprovalsHttpServicePostRejectApprovalRequestMocksProvider = ApprovalsHttpServicePostRejectApprovalRequestMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.DataGroupsHttpService = DataGroupsHttpService;
    exports.DataGroupsHttpServiceDeleteDataGroupByIdMocksProvider = DataGroupsHttpServiceDeleteDataGroupByIdMocksProvider;
    exports.DataGroupsHttpServiceGetDataGroupByIdMocksProvider = DataGroupsHttpServiceGetDataGroupByIdMocksProvider;
    exports.DataGroupsHttpServiceGetDataGroupsMocksProvider = DataGroupsHttpServiceGetDataGroupsMocksProvider;
    exports.DataGroupsHttpServiceMocksProvider = DataGroupsHttpServiceMocksProvider;
    exports.DataGroupsHttpServicePostDataGroupsMocksProvider = DataGroupsHttpServicePostDataGroupsMocksProvider;
    exports.DataGroupsHttpServicePutDataGroupByIdMocksProvider = DataGroupsHttpServicePutDataGroupByIdMocksProvider;
    exports.FunctionGroupType = FunctionGroupType;
    exports.FunctionGroupsHttpService = FunctionGroupsHttpService;
    exports.FunctionGroupsHttpServiceDeleteFunctionGroupByIdMocksProvider = FunctionGroupsHttpServiceDeleteFunctionGroupByIdMocksProvider;
    exports.FunctionGroupsHttpServiceGetFunctionGroupByIdMocksProvider = FunctionGroupsHttpServiceGetFunctionGroupByIdMocksProvider;
    exports.FunctionGroupsHttpServiceGetFunctionGroupsMocksProvider = FunctionGroupsHttpServiceGetFunctionGroupsMocksProvider;
    exports.FunctionGroupsHttpServiceMocksProvider = FunctionGroupsHttpServiceMocksProvider;
    exports.FunctionGroupsHttpServicePostFunctionGroupsMocksProvider = FunctionGroupsHttpServicePostFunctionGroupsMocksProvider;
    exports.FunctionGroupsHttpServicePutFunctionGroupByIdMocksProvider = FunctionGroupsHttpServicePutFunctionGroupByIdMocksProvider;
    exports.LegalEntitiesHttpService = LegalEntitiesHttpService;
    exports.LegalEntitiesHttpServiceGetLegalEntitiesMocksProvider = LegalEntitiesHttpServiceGetLegalEntitiesMocksProvider;
    exports.LegalEntitiesHttpServiceGetLegalEntityByExternalIdMocksProvider = LegalEntitiesHttpServiceGetLegalEntityByExternalIdMocksProvider;
    exports.LegalEntitiesHttpServiceGetLegalEntityByIdMocksProvider = LegalEntitiesHttpServiceGetLegalEntityByIdMocksProvider;
    exports.LegalEntitiesHttpServiceGetLegalEntityExternalDataMocksProvider = LegalEntitiesHttpServiceGetLegalEntityExternalDataMocksProvider;
    exports.LegalEntitiesHttpServiceGetLegalEntityForUserMocksProvider = LegalEntitiesHttpServiceGetLegalEntityForUserMocksProvider;
    exports.LegalEntitiesHttpServiceGetMasterServiceAgreementMocksProvider = LegalEntitiesHttpServiceGetMasterServiceAgreementMocksProvider;
    exports.LegalEntitiesHttpServiceGetSegmentationMocksProvider = LegalEntitiesHttpServiceGetSegmentationMocksProvider;
    exports.LegalEntitiesHttpServiceMocksProvider = LegalEntitiesHttpServiceMocksProvider;
    exports.LegalEntitiesHttpServicePostLegalEntitiesAsParticipantMocksProvider = LegalEntitiesHttpServicePostLegalEntitiesAsParticipantMocksProvider;
    exports.LegalEntitiesHttpServicePostLegalEntitiesMocksProvider = LegalEntitiesHttpServicePostLegalEntitiesMocksProvider;
    exports.LegalEntitiesHttpServicePostSubEntitiesMocksProvider = LegalEntitiesHttpServicePostSubEntitiesMocksProvider;
    exports.LegalEntityType = LegalEntityType;
    exports.PermissionMatrixAction = PermissionMatrixAction;
    exports.PresentationApprovalAction = PresentationApprovalAction;
    exports.PresentationApprovalCategory = PresentationApprovalCategory;
    exports.ServiceAgreementHttpService = ServiceAgreementHttpService;
    exports.ServiceAgreementHttpServiceGetServiceAgreementAdminsMocksProvider = ServiceAgreementHttpServiceGetServiceAgreementAdminsMocksProvider;
    exports.ServiceAgreementHttpServiceGetServiceAgreementContextMocksProvider = ServiceAgreementHttpServiceGetServiceAgreementContextMocksProvider;
    exports.ServiceAgreementHttpServiceGetServiceAgreementItemMocksProvider = ServiceAgreementHttpServiceGetServiceAgreementItemMocksProvider;
    exports.ServiceAgreementHttpServiceGetServiceAgreementMocksProvider = ServiceAgreementHttpServiceGetServiceAgreementMocksProvider;
    exports.ServiceAgreementHttpServiceGetServiceAgreementUsersMocksProvider = ServiceAgreementHttpServiceGetServiceAgreementUsersMocksProvider;
    exports.ServiceAgreementHttpServiceGetUnexposedUsersMocksProvider = ServiceAgreementHttpServiceGetUnexposedUsersMocksProvider;
    exports.ServiceAgreementHttpServiceMocksProvider = ServiceAgreementHttpServiceMocksProvider;
    exports.ServiceAgreementHttpServicePostServiceAgreementMocksProvider = ServiceAgreementHttpServicePostServiceAgreementMocksProvider;
    exports.ServiceAgreementHttpServicePostUsersAddMocksProvider = ServiceAgreementHttpServicePostUsersAddMocksProvider;
    exports.ServiceAgreementHttpServicePostUsersRemoveMocksProvider = ServiceAgreementHttpServicePostUsersRemoveMocksProvider;
    exports.ServiceAgreementHttpServicePutAdminsMocksProvider = ServiceAgreementHttpServicePutAdminsMocksProvider;
    exports.ServiceAgreementHttpServicePutServiceAgreementStateMocksProvider = ServiceAgreementHttpServicePutServiceAgreementStateMocksProvider;
    exports.ServiceAgreementsHttpService = ServiceAgreementsHttpService;
    exports.ServiceAgreementsHttpServiceGetAssignUsersPermissionsMocksProvider = ServiceAgreementsHttpServiceGetAssignUsersPermissionsMocksProvider;
    exports.ServiceAgreementsHttpServiceGetBusinessfunctionsMocksProvider = ServiceAgreementsHttpServiceGetBusinessfunctionsMocksProvider;
    exports.ServiceAgreementsHttpServiceGetContextServiceAgreementParticipantsMocksProvider = ServiceAgreementsHttpServiceGetContextServiceAgreementParticipantsMocksProvider;
    exports.ServiceAgreementsHttpServiceGetServiceAgreementParticipantsMocksProvider = ServiceAgreementsHttpServiceGetServiceAgreementParticipantsMocksProvider;
    exports.ServiceAgreementsHttpServiceGetServiceAgreementUsersSAMocksProvider = ServiceAgreementsHttpServiceGetServiceAgreementUsersSAMocksProvider;
    exports.ServiceAgreementsHttpServiceGetServiceAgreementsMocksProvider = ServiceAgreementsHttpServiceGetServiceAgreementsMocksProvider;
    exports.ServiceAgreementsHttpServiceGetUnexposedUsersSAMocksProvider = ServiceAgreementsHttpServiceGetUnexposedUsersSAMocksProvider;
    exports.ServiceAgreementsHttpServiceMocksProvider = ServiceAgreementsHttpServiceMocksProvider;
    exports.ServiceAgreementsHttpServicePostUsersAddSAMocksProvider = ServiceAgreementsHttpServicePostUsersAddSAMocksProvider;
    exports.ServiceAgreementsHttpServicePostUsersRemoveSAMocksProvider = ServiceAgreementsHttpServicePostUsersRemoveSAMocksProvider;
    exports.ServiceAgreementsHttpServicePutAssignUsersPermissionsMocksProvider = ServiceAgreementsHttpServicePutAssignUsersPermissionsMocksProvider;
    exports.ServiceAgreementsHttpServicePutServiceAgreementSaveMocksProvider = ServiceAgreementsHttpServicePutServiceAgreementSaveMocksProvider;
    exports.Status = Status;
    exports.UserContextHttpService = UserContextHttpService;
    exports.UserContextHttpServiceGetUserContextPermissionsMocksProvider = UserContextHttpServiceGetUserContextPermissionsMocksProvider;
    exports.UserContextHttpServiceGetUserContextServiceAgreementsMocksProvider = UserContextHttpServiceGetUserContextServiceAgreementsMocksProvider;
    exports.UserContextHttpServiceMocksProvider = UserContextHttpServiceMocksProvider;
    exports.UserContextHttpServicePostUserContextMocksProvider = UserContextHttpServicePostUserContextMocksProvider;
    exports.UsersHttpService = UsersHttpService;
    exports.UsersHttpServiceGetArrangementUserPermissionCheckMocksProvider = UsersHttpServiceGetArrangementUserPermissionCheckMocksProvider;
    exports.UsersHttpServiceGetArrangementUserPrivilegesMocksProvider = UsersHttpServiceGetArrangementUserPrivilegesMocksProvider;
    exports.UsersHttpServiceGetCheckUserPermissionMocksProvider = UsersHttpServiceGetCheckUserPermissionMocksProvider;
    exports.UsersHttpServiceGetDataItemPermissionsContextMocksProvider = UsersHttpServiceGetDataItemPermissionsContextMocksProvider;
    exports.UsersHttpServiceGetUserPermissionsSummaryMocksProvider = UsersHttpServiceGetUserPermissionsSummaryMocksProvider;
    exports.UsersHttpServiceGetUserPrivilegesMocksProvider = UsersHttpServiceGetUserPrivilegesMocksProvider;
    exports.UsersHttpServiceGetUsersByPermissionsMocksProvider = UsersHttpServiceGetUsersByPermissionsMocksProvider;
    exports.UsersHttpServiceMocksProvider = UsersHttpServiceMocksProvider;
    exports.WizardHttpService = WizardHttpService;
    exports.WizardHttpServiceMocksProvider = WizardHttpServiceMocksProvider;
    exports.WizardHttpServicePostWizardSetupMocksProvider = WizardHttpServicePostWizardSetupMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-accesscontrol-http-ang.umd.js.map
