import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ACCESS_CONTROL_BASE_PATH } from '../variables';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class FunctionGroupsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/access-control';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AccessControlConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteFunctionGroupById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteFunctionGroupById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/accessgroups/function-groups/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteFunctionGroupByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteFunctionGroupById.');
        }
        return `${this.configuration.basePath}/client-api/v2/accessgroups/function-groups/${encodeURIComponent(String(_id))}`;
    }
    getFunctionGroupById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFunctionGroupById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/function-groups/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getFunctionGroupByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getFunctionGroupById.');
        }
        return `${this.configuration.basePath}/client-api/v2/accessgroups/function-groups/${encodeURIComponent(String(_id))}`;
    }
    getFunctionGroups(requestParameters, observe = 'body', reportProgress = false, options) {
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
            throw new Error('Required parameter serviceAgreementId was null or undefined when calling getFunctionGroups.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/function-groups`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getFunctionGroupsUrl(requestParameters) {
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        if (_serviceAgreementId === null || _serviceAgreementId === undefined) {
            throw new Error('Required parameter serviceAgreementId was null or undefined when calling getFunctionGroups.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/function-groups${queryString ? `?${queryString}` : ''}`;
    }
    postFunctionGroups(requestParameters, observe = 'body', reportProgress = false, options) {
        const _functionGroupItemBase = requestParameters["functionGroupItemBase"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/accessgroups/function-groups`, _functionGroupItemBase, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postFunctionGroupsUrl(requestParameters) {
        const _functionGroupItemBase = requestParameters["functionGroupItemBase"];
        return `${this.configuration.basePath}/client-api/v2/accessgroups/function-groups`;
    }
    putFunctionGroupById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putFunctionGroupById.');
        }
        const _functionGroupItemPut = requestParameters["functionGroupItemPut"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/accessgroups/function-groups/${encodeURIComponent(String(_id))}`, _functionGroupItemPut, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putFunctionGroupByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putFunctionGroupById.');
        }
        const _functionGroupItemPut = requestParameters["functionGroupItemPut"];
        return `${this.configuration.basePath}/client-api/v2/accessgroups/function-groups/${encodeURIComponent(String(_id))}`;
    }
}
FunctionGroupsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FunctionGroupsHttpService, deps: [{ token: i1.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: i2.AccessControlConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
FunctionGroupsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FunctionGroupsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: FunctionGroupsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCESS_CONTROL_BASE_PATH]
                }] }, { type: i2.AccessControlConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25Hcm91cHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwaS9mdW5jdGlvbkdyb3Vwcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUEyQixlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFjLFdBQVcsRUFBRSxVQUFVLEVBQ1UsTUFBWSxzQkFBc0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBK0IsWUFBWSxDQUFDO0FBVy9FLE9BQU8sRUFBRSx3QkFBd0IsRUFBc0IsTUFBMEIsY0FBYyxDQUFDO0FBQ2hHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUEwQyxrQkFBa0IsQ0FBQzs7OztBQWtDbEcsTUFBTSxPQUFPLHlCQUF5QjtJQU9sQyxZQUFzQixVQUFzQixFQUFnRCxRQUFnQixFQUFjLGFBQXlDO1FBQTdJLGVBQVUsR0FBVixVQUFVLENBQVk7UUFMbEMsYUFBUSxHQUFHLGlCQUFpQixDQUFDO1FBQ2hDLG1CQUFjLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNuQyxrQkFBYSxHQUFHLElBQUksMEJBQTBCLEVBQUUsQ0FBQztRQUlwRCxJQUFJLGFBQWEsRUFBRTtZQUNmLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNqRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtnQkFDOUIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDNUI7WUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDMUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFJLElBQUksd0JBQXdC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QUM7U0FDckc7UUFDRCxNQUFNLHFCQUFxQixHQUFHLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDeEUsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSwrQ0FBK0Msa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxSCxDQUFDOzt1SEFoZFEseUJBQXlCLDRDQU9nQyx3QkFBd0I7MkhBUGpGLHlCQUF5QixjQUZ4QixNQUFNOzRGQUVQLHlCQUF5QjtrQkFIckMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQVFrRCxRQUFROzswQkFBSSxNQUFNOzJCQUFDLHdCQUF3Qjs7MEJBQXFCLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFjY2VzcyBDb250cm9sIGNsaWVudCBBUElcbiAqIE1hbmFnZSB1c2VyIHBlcm1pc3Npb25zLCBkYXRhIGdyb3VwcywgZnVuY3Rpb24gZ3JvdXBzIGFuZCBzZXJ2aWNlIGFncmVlbWVudHMgZnJvbSBjbGllbnQgc2lkZVxuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAyLjEwLjBcbiAqIFxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vZ2l0aHViLmNvbS9CYWNrYmFzZS9iYWNrYmFzZS1vcGVuYXBpLXRvb2xzKS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9CYWNrYmFzZS9iYWNrYmFzZS1vcGVuYXBpLXRvb2xzXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlIG1lbWJlci1vcmRlcmluZyAqL1xuXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gICAgICAgICAgICAgICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyxcbiAgICAgICAgIEh0dHBSZXNwb25zZSwgSHR0cEV2ZW50LCBIdHRwUGFyYW1ldGVyQ29kZWMgfSAgICAgICBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDdXN0b21IdHRwUGFyYW1ldGVyQ29kZWMgfSAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vZW5jb2Rlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEJhZFJlcXVlc3RFcnJvciB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBGb3JiaWRkZW5FcnJvciB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBGdW5jdGlvbkdyb3VwSXRlbSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBGdW5jdGlvbkdyb3VwSXRlbUJhc2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgRnVuY3Rpb25Hcm91cEl0ZW1QdXQgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgSWRJdGVtIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IE5vdEZvdW5kRXJyb3IgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuXG5pbXBvcnQgeyBBQ0NFU1NfQ09OVFJPTF9CQVNFX1BBVEgsIENPTExFQ1RJT05fRk9STUFUUyB9ICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vdmFyaWFibGVzJztcbmltcG9ydCB7IEFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vY29uZmlndXJhdGlvbic7XG5cblxuZXhwb3J0IGludGVyZmFjZSBEZWxldGVGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBleHRlcm5hbCBJRCAqL1xuICAgIFtcImlkXCJdOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0RnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogZXh0ZXJuYWwgSUQgKi9cbiAgICBbXCJpZFwiXTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldEZ1bmN0aW9uR3JvdXBzUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIFNlcnZpY2UgQWdyZWVtZW50IElkICovXG4gICAgW1wic2VydmljZUFncmVlbWVudElkXCJdOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdEZ1bmN0aW9uR3JvdXBzUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqICMgQ3JlYXRlIEZ1bmN0aW9uIEdyb3VwIC0gJiN4NjA7UE9TVCYjeDYwOyAgICBDcmVhdGVzIGEgbmV3IGZ1bmN0aW9uIGdyb3VwLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5hY2Nlc3Nncm91cHMucm91dGVzLmZ1bmN0aW9uZ3JvdXAuQWRkRnVuY3Rpb25Hcm91cFJvdXRlICAqIFJvdXRlIElkOiBBZGRGdW5jdGlvbkdyb3VwUm91dGUgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MuQWRkRnVuY3Rpb25Hcm91cHMgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDphZGRGdW5jdGlvbkdyb3VwUmVxdWVzdGVkSW50ZXJuYWwgKi9cbiAgICBbXCJmdW5jdGlvbkdyb3VwSXRlbUJhc2VcIl0/OiBGdW5jdGlvbkdyb3VwSXRlbUJhc2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHV0RnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogZXh0ZXJuYWwgSUQgKi9cbiAgICBbXCJpZFwiXTogc3RyaW5nO1xuICAgIC8qKiAjIFVwZGF0ZSBGdW5jdGlvbiBHcm91cCBkZXRhaWxzIC0gJiN4NjA7UFVUJiN4NjA7ICAgIFVwZGF0ZXMgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBmdW5jdGlvbiBncm91cC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLlVwZGF0ZUZ1bmN0aW9uR3JvdXBCeUlkUm91dGUgICogUm91dGUgSWQ6IFVwZGF0ZUZ1bmN0aW9uR3JvdXBCeUlkUm91dGUgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MuVXBkYXRlRnVuY3Rpb25Hcm91cEJ5SWQgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDp1cGRhdGVGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RlZEludGVybmFsICovXG4gICAgW1wiZnVuY3Rpb25Hcm91cEl0ZW1QdXRcIl0/OiBGdW5jdGlvbkdyb3VwSXRlbVB1dDtcbn1cblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGdW5jdGlvbkdyb3Vwc0h0dHBTZXJ2aWNlIHtcblxuICAgIHByb3RlY3RlZCBiYXNlUGF0aCA9ICcvYWNjZXNzLWNvbnRyb2wnO1xuICAgIHB1YmxpYyBkZWZhdWx0SGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xuICAgIHB1YmxpYyBjb25maWd1cmF0aW9uID0gbmV3IEFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uKCk7XG4gICAgcHVibGljIGVuY29kZXI6IEh0dHBQYXJhbWV0ZXJDb2RlYztcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBAT3B0aW9uYWwoKSBASW5qZWN0KEFDQ0VTU19DT05UUk9MX0JBU0VfUEFUSCkgYmFzZVBhdGg6IHN0cmluZywgQE9wdGlvbmFsKCkgY29uZmlndXJhdGlvbjogQWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJhc2VQYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGJhc2VQYXRoID0gdGhpcy5iYXNlUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5jb2RlciA9IHRoaXMuY29uZmlndXJhdGlvbi5lbmNvZGVyIHx8IG5ldyBDdXN0b21IdHRwUGFyYW1ldGVyQ29kZWMoKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgYWRkVG9IdHRwUGFyYW1zKGh0dHBQYXJhbXM6IEh0dHBQYXJhbXMsIHZhbHVlOiBhbnksIGtleT86IHN0cmluZyk6IEh0dHBQYXJhbXMge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGh0dHBQYXJhbXMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShodHRwUGFyYW1zLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBodHRwUGFyYW1zID0gdGhpcy5hZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoaHR0cFBhcmFtcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoaHR0cFBhcmFtczogSHR0cFBhcmFtcywgdmFsdWU/OiBhbnksIGtleT86IHN0cmluZyk6IEh0dHBQYXJhbXMge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAodmFsdWUgYXMgYW55W10pLmZvckVhY2goIGVsZW0gPT4gaHR0cFBhcmFtcyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlKGh0dHBQYXJhbXMsIGVsZW0sIGtleSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaHR0cFBhcmFtcyA9IGh0dHBQYXJhbXMuYXBwZW5kKGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZSBhcyBEYXRlKS50b0lTT1N0cmluZygpLnN1YnN0cigwLCAxMCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJrZXkgbWF5IG5vdCBiZSBudWxsIGlmIHZhbHVlIGlzIERhdGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaCggayA9PiBodHRwUGFyYW1zID0gdGhpcy5hZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoXG4gICAgICAgICAgICAgICAgICAgIGh0dHBQYXJhbXMsIHZhbHVlW2tdLCBrZXkgIT0gbnVsbCA/IGAke2tleX0uJHtrfWAgOiBrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGh0dHBQYXJhbXMgPSBodHRwUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwia2V5IG1heSBub3QgYmUgbnVsbCBpZiB2YWx1ZSBpcyBub3Qgb2JqZWN0IG9yIGFycmF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodHRwUGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBGdW5jdGlvbiBHcm91cCAtICYjeDYwO0RFTEVURSYjeDYwOy5cbiAgICAgKiAjIERlbGV0ZSBGdW5jdGlvbiBHcm91cCAtICYjeDYwO0RFTEVURSYjeDYwOyAgICBEZWxldGVzIHRoZSBzcGVjaWZpYyBmdW5jdGlvbiBncm91cC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLkRlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkUm91dGUgICogUm91dGUgSWQ6IERlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkUm91dGUgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MuRGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWQgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpkZWxldGVGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RlZEludGVybmFsXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGRlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBEZWxldGVGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgRnVuY3Rpb24gR3JvdXAgLSAmI3g2MDtERUxFVEUmI3g2MDsuXG4gICAgICogIyBEZWxldGUgRnVuY3Rpb24gR3JvdXAgLSAmI3g2MDtERUxFVEUmI3g2MDsgICAgRGVsZXRlcyB0aGUgc3BlY2lmaWMgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5EZWxldGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIElkOiBEZWxldGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLkRlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6ZGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVGdW5jdGlvbkdyb3VwQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogRGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgLyoqXG4gICAgICogRGVsZXRlIEZ1bmN0aW9uIEdyb3VwIC0gJiN4NjA7REVMRVRFJiN4NjA7LlxuICAgICAqICMgRGVsZXRlIEZ1bmN0aW9uIEdyb3VwIC0gJiN4NjA7REVMRVRFJiN4NjA7ICAgIERlbGV0ZXMgdGhlIHNwZWNpZmljIGZ1bmN0aW9uIGdyb3VwLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5hY2Nlc3Nncm91cHMucm91dGVzLmZ1bmN0aW9uZ3JvdXAuRGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWRSb3V0ZSAgKiBSb3V0ZSBJZDogRGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWRSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5EZWxldGVGdW5jdGlvbkdyb3VwQnlJZCAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmRlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkUmVxdWVzdGVkSW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IERlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICAvKipcbiAgICAgKiBEZWxldGUgRnVuY3Rpb24gR3JvdXAgLSAmI3g2MDtERUxFVEUmI3g2MDsuXG4gICAgICogIyBEZWxldGUgRnVuY3Rpb24gR3JvdXAgLSAmI3g2MDtERUxFVEUmI3g2MDsgICAgRGVsZXRlcyB0aGUgc3BlY2lmaWMgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5EZWxldGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIElkOiBEZWxldGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLkRlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6ZGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZWxldGVGdW5jdGlvbkdyb3VwQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogRGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfaWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImlkXCJdO1xuICAgICAgICBpZiAoX2lkID09PSBudWxsIHx8IF9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGRlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmRlbGV0ZTxhbnk+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi9hY2Nlc3Nncm91cHMvZnVuY3Rpb24tZ3JvdXBzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfaWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWRVcmwocmVxdWVzdFBhcmFtZXRlcnM6IERlbGV0ZUZ1bmN0aW9uR3JvdXBCeUlkUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9pZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiaWRcIl07XG4gICAgICAgIGlmIChfaWQgPT09IG51bGwgfHwgX2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZGVsZXRlRnVuY3Rpb25Hcm91cEJ5SWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi9hY2Nlc3Nncm91cHMvZnVuY3Rpb24tZ3JvdXBzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfaWQpKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIEZ1bmN0aW9uIEdyb3VwIGRldGFpbHMgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBSZXRyaWV2ZSBGdW5jdGlvbiBHcm91cCBkZXRhaWxzIC0gJiN4NjA7R0VUJiN4NjA7ICAgIFJldHJpZXZlcyBkZXRhaWxzIGZvciBhIHNwZWNpZmljIGZ1bmN0aW9uIGdyb3VwLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5hY2Nlc3Nncm91cHMucm91dGVzLmZ1bmN0aW9uZ3JvdXAuR2V0RnVuY3Rpb25Hcm91cEJ5SWRSb3V0ZSAgKiBSb3V0ZSBJZDogR2V0RnVuY3Rpb25Hcm91cFJvdXRlICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLkdldEZ1bmN0aW9uR3JvdXAgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpnZXRGdW5jdGlvbkdyb3VwUmVxdWVzdGVkSW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RnVuY3Rpb25Hcm91cEJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldEZ1bmN0aW9uR3JvdXBCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxGdW5jdGlvbkdyb3VwSXRlbT47XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgRnVuY3Rpb24gR3JvdXAgZGV0YWlscyAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIFJldHJpZXZlIEZ1bmN0aW9uIEdyb3VwIGRldGFpbHMgLSAmI3g2MDtHRVQmI3g2MDsgICAgUmV0cmlldmVzIGRldGFpbHMgZm9yIGEgc3BlY2lmaWMgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5HZXRGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIElkOiBHZXRGdW5jdGlvbkdyb3VwUm91dGUgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MuR2V0RnVuY3Rpb25Hcm91cCAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmdldEZ1bmN0aW9uR3JvdXBSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGdW5jdGlvbkdyb3VwQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0RnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8RnVuY3Rpb25Hcm91cEl0ZW0+PjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBGdW5jdGlvbiBHcm91cCBkZXRhaWxzIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgUmV0cmlldmUgRnVuY3Rpb24gR3JvdXAgZGV0YWlscyAtICYjeDYwO0dFVCYjeDYwOyAgICBSZXRyaWV2ZXMgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBmdW5jdGlvbiBncm91cC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLkdldEZ1bmN0aW9uR3JvdXBCeUlkUm91dGUgICogUm91dGUgSWQ6IEdldEZ1bmN0aW9uR3JvdXBSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5HZXRGdW5jdGlvbkdyb3VwICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6Z2V0RnVuY3Rpb25Hcm91cFJlcXVlc3RlZEludGVybmFsXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEZ1bmN0aW9uR3JvdXBCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8RnVuY3Rpb25Hcm91cEl0ZW0+PjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBGdW5jdGlvbiBHcm91cCBkZXRhaWxzIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgUmV0cmlldmUgRnVuY3Rpb24gR3JvdXAgZGV0YWlscyAtICYjeDYwO0dFVCYjeDYwOyAgICBSZXRyaWV2ZXMgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBmdW5jdGlvbiBncm91cC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLkdldEZ1bmN0aW9uR3JvdXBCeUlkUm91dGUgICogUm91dGUgSWQ6IEdldEZ1bmN0aW9uR3JvdXBSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5HZXRGdW5jdGlvbkdyb3VwICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6Z2V0RnVuY3Rpb25Hcm91cFJlcXVlc3RlZEludGVybmFsXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEZ1bmN0aW9uR3JvdXBCeUlkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9pZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiaWRcIl07XG4gICAgICAgIGlmIChfaWQgPT09IG51bGwgfHwgX2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0RnVuY3Rpb25Hcm91cEJ5SWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEZ1bmN0aW9uR3JvdXBJdGVtPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvYWNjZXNzZ3JvdXBzL2Z1bmN0aW9uLWdyb3Vwcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2lkKSl9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZ1bmN0aW9uR3JvdXBCeUlkVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfaWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImlkXCJdO1xuICAgICAgICBpZiAoX2lkID09PSBudWxsIHx8IF9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEZ1bmN0aW9uR3JvdXBCeUlkLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvYWNjZXNzZ3JvdXBzL2Z1bmN0aW9uLWdyb3Vwcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2lkKSl9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IEZ1bmN0aW9uIEdyb3VwcyAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExpc3QgRnVuY3Rpb24gR3JvdXBzIC0gJiN4NjA7R0VUJiN4NjA7ICAgIFByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgZnVuY3Rpb24gZ3JvdXBzIGZvciBnaXZlbiBTZXJ2aWNlIEFncmVlbWVudCBJRC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLkxpc3RGdW5jdGlvbkdyb3Vwc1JvdXRlICAqIFJvdXRlIElkOiBMaXN0RnVuY3Rpb25Hcm91cHNSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5MaXN0RnVuY3Rpb25Hcm91cHMgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpsaXN0RnVuY3Rpb25Hcm91cFJlcXVlc3RlZEludGVybmFsXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEZ1bmN0aW9uR3JvdXBzKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRGdW5jdGlvbkdyb3Vwc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8QXJyYXk8RnVuY3Rpb25Hcm91cEl0ZW0+PjtcbiAgICAvKipcbiAgICAgKiBMaXN0IEZ1bmN0aW9uIEdyb3VwcyAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExpc3QgRnVuY3Rpb24gR3JvdXBzIC0gJiN4NjA7R0VUJiN4NjA7ICAgIFByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgZnVuY3Rpb24gZ3JvdXBzIGZvciBnaXZlbiBTZXJ2aWNlIEFncmVlbWVudCBJRC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLkxpc3RGdW5jdGlvbkdyb3Vwc1JvdXRlICAqIFJvdXRlIElkOiBMaXN0RnVuY3Rpb25Hcm91cHNSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5MaXN0RnVuY3Rpb25Hcm91cHMgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpsaXN0RnVuY3Rpb25Hcm91cFJlcXVlc3RlZEludGVybmFsXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEZ1bmN0aW9uR3JvdXBzKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRGdW5jdGlvbkdyb3Vwc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxBcnJheTxGdW5jdGlvbkdyb3VwSXRlbT4+PjtcbiAgICAvKipcbiAgICAgKiBMaXN0IEZ1bmN0aW9uIEdyb3VwcyAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExpc3QgRnVuY3Rpb24gR3JvdXBzIC0gJiN4NjA7R0VUJiN4NjA7ICAgIFByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgZnVuY3Rpb24gZ3JvdXBzIGZvciBnaXZlbiBTZXJ2aWNlIEFncmVlbWVudCBJRC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLkxpc3RGdW5jdGlvbkdyb3Vwc1JvdXRlICAqIFJvdXRlIElkOiBMaXN0RnVuY3Rpb25Hcm91cHNSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5MaXN0RnVuY3Rpb25Hcm91cHMgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpsaXN0RnVuY3Rpb25Hcm91cFJlcXVlc3RlZEludGVybmFsXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldEZ1bmN0aW9uR3JvdXBzKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRGdW5jdGlvbkdyb3Vwc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QXJyYXk8RnVuY3Rpb25Hcm91cEl0ZW0+Pj47XG4gICAgLyoqXG4gICAgICogTGlzdCBGdW5jdGlvbiBHcm91cHMgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMaXN0IEZ1bmN0aW9uIEdyb3VwcyAtICYjeDYwO0dFVCYjeDYwOyAgICBQcm92aWRlcyBhIGxpc3Qgb2YgYWxsIGZ1bmN0aW9uIGdyb3VwcyBmb3IgZ2l2ZW4gU2VydmljZSBBZ3JlZW1lbnQgSUQuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5MaXN0RnVuY3Rpb25Hcm91cHNSb3V0ZSAgKiBSb3V0ZSBJZDogTGlzdEZ1bmN0aW9uR3JvdXBzUm91dGUgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MuTGlzdEZ1bmN0aW9uR3JvdXBzICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6bGlzdEZ1bmN0aW9uR3JvdXBSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGdW5jdGlvbkdyb3VwcyhyZXF1ZXN0UGFyYW1ldGVyczogR2V0RnVuY3Rpb25Hcm91cHNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfc2VydmljZUFncmVlbWVudElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJzZXJ2aWNlQWdyZWVtZW50SWRcIl07XG4gICAgICAgIGlmIChfc2VydmljZUFncmVlbWVudElkID09PSBudWxsIHx8IF9zZXJ2aWNlQWdyZWVtZW50SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgc2VydmljZUFncmVlbWVudElkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0RnVuY3Rpb25Hcm91cHMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoX3NlcnZpY2VBZ3JlZW1lbnRJZCAhPT0gdW5kZWZpbmVkICYmIF9zZXJ2aWNlQWdyZWVtZW50SWQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9zZXJ2aWNlQWdyZWVtZW50SWQsICdzZXJ2aWNlQWdyZWVtZW50SWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8QXJyYXk8RnVuY3Rpb25Hcm91cEl0ZW0+PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvYWNjZXNzZ3JvdXBzL2Z1bmN0aW9uLWdyb3Vwc2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiBxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRGdW5jdGlvbkdyb3Vwc1VybChyZXF1ZXN0UGFyYW1ldGVyczogR2V0RnVuY3Rpb25Hcm91cHNSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX3NlcnZpY2VBZ3JlZW1lbnRJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wic2VydmljZUFncmVlbWVudElkXCJdO1xuICAgICAgICBpZiAoX3NlcnZpY2VBZ3JlZW1lbnRJZCA9PT0gbnVsbCB8fCBfc2VydmljZUFncmVlbWVudElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIHNlcnZpY2VBZ3JlZW1lbnRJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldEZ1bmN0aW9uR3JvdXBzLicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChfc2VydmljZUFncmVlbWVudElkICE9PSB1bmRlZmluZWQgJiYgX3NlcnZpY2VBZ3JlZW1lbnRJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3NlcnZpY2VBZ3JlZW1lbnRJZCwgJ3NlcnZpY2VBZ3JlZW1lbnRJZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlQYXJhbWV0ZXJzLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvYWNjZXNzZ3JvdXBzL2Z1bmN0aW9uLWdyb3VwcyR7cXVlcnlTdHJpbmcgPyBgPyR7cXVlcnlTdHJpbmd9YCA6ICcnfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIEZ1bmN0aW9uIEdyb3VwIC0gJiN4NjA7UE9TVCYjeDYwOy5cbiAgICAgKiAjIENyZWF0ZSBGdW5jdGlvbiBHcm91cCAtICYjeDYwO1BPU1QmI3g2MDsgICAgQ3JlYXRlcyBhIG5ldyBmdW5jdGlvbiBncm91cC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLnJvdXRlcy5mdW5jdGlvbmdyb3VwLkFkZEZ1bmN0aW9uR3JvdXBSb3V0ZSAgKiBSb3V0ZSBJZDogQWRkRnVuY3Rpb25Hcm91cFJvdXRlICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLkFkZEZ1bmN0aW9uR3JvdXBzICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6YWRkRnVuY3Rpb25Hcm91cFJlcXVlc3RlZEludGVybmFsXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RGdW5jdGlvbkdyb3VwcyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdEZ1bmN0aW9uR3JvdXBzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxJZEl0ZW0+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBGdW5jdGlvbiBHcm91cCAtICYjeDYwO1BPU1QmI3g2MDsuXG4gICAgICogIyBDcmVhdGUgRnVuY3Rpb24gR3JvdXAgLSAmI3g2MDtQT1NUJiN4NjA7ICAgIENyZWF0ZXMgYSBuZXcgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5BZGRGdW5jdGlvbkdyb3VwUm91dGUgICogUm91dGUgSWQ6IEFkZEZ1bmN0aW9uR3JvdXBSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5BZGRGdW5jdGlvbkdyb3VwcyAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmFkZEZ1bmN0aW9uR3JvdXBSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0RnVuY3Rpb25Hcm91cHMocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RGdW5jdGlvbkdyb3Vwc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxJZEl0ZW0+PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgRnVuY3Rpb24gR3JvdXAgLSAmI3g2MDtQT1NUJiN4NjA7LlxuICAgICAqICMgQ3JlYXRlIEZ1bmN0aW9uIEdyb3VwIC0gJiN4NjA7UE9TVCYjeDYwOyAgICBDcmVhdGVzIGEgbmV3IGZ1bmN0aW9uIGdyb3VwLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5hY2Nlc3Nncm91cHMucm91dGVzLmZ1bmN0aW9uZ3JvdXAuQWRkRnVuY3Rpb25Hcm91cFJvdXRlICAqIFJvdXRlIElkOiBBZGRGdW5jdGlvbkdyb3VwUm91dGUgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MuQWRkRnVuY3Rpb25Hcm91cHMgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDphZGRGdW5jdGlvbkdyb3VwUmVxdWVzdGVkSW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zdEZ1bmN0aW9uR3JvdXBzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0RnVuY3Rpb25Hcm91cHNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PElkSXRlbT4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBGdW5jdGlvbiBHcm91cCAtICYjeDYwO1BPU1QmI3g2MDsuXG4gICAgICogIyBDcmVhdGUgRnVuY3Rpb24gR3JvdXAgLSAmI3g2MDtQT1NUJiN4NjA7ICAgIENyZWF0ZXMgYSBuZXcgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5BZGRGdW5jdGlvbkdyb3VwUm91dGUgICogUm91dGUgSWQ6IEFkZEZ1bmN0aW9uR3JvdXBSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5BZGRGdW5jdGlvbkdyb3VwcyAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmFkZEZ1bmN0aW9uR3JvdXBSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0RnVuY3Rpb25Hcm91cHMocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RGdW5jdGlvbkdyb3Vwc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9mdW5jdGlvbkdyb3VwSXRlbUJhc2UgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImZ1bmN0aW9uR3JvdXBJdGVtQmFzZVwiXTtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxJZEl0ZW0+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi9hY2Nlc3Nncm91cHMvZnVuY3Rpb24tZ3JvdXBzYCxcbiAgICAgICAgICAgIF9mdW5jdGlvbkdyb3VwSXRlbUJhc2UsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBwb3N0RnVuY3Rpb25Hcm91cHNVcmwocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RGdW5jdGlvbkdyb3Vwc1JlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfZnVuY3Rpb25Hcm91cEl0ZW1CYXNlID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJmdW5jdGlvbkdyb3VwSXRlbUJhc2VcIl07XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvYWNjZXNzZ3JvdXBzL2Z1bmN0aW9uLWdyb3Vwc2A7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIEZ1bmN0aW9uIEdyb3VwIGRldGFpbHMgLSAmI3g2MDtQVVQmI3g2MDsuXG4gICAgICogIyBVcGRhdGUgRnVuY3Rpb24gR3JvdXAgZGV0YWlscyAtICYjeDYwO1BVVCYjeDYwOyAgICBVcGRhdGVzIGRldGFpbHMgZm9yIGEgc3BlY2lmaWMgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5VcGRhdGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIElkOiBVcGRhdGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLlVwZGF0ZUZ1bmN0aW9uR3JvdXBCeUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6dXBkYXRlRnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXRGdW5jdGlvbkdyb3VwQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogUHV0RnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogVXBkYXRlIEZ1bmN0aW9uIEdyb3VwIGRldGFpbHMgLSAmI3g2MDtQVVQmI3g2MDsuXG4gICAgICogIyBVcGRhdGUgRnVuY3Rpb24gR3JvdXAgZGV0YWlscyAtICYjeDYwO1BVVCYjeDYwOyAgICBVcGRhdGVzIGRldGFpbHMgZm9yIGEgc3BlY2lmaWMgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5VcGRhdGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIElkOiBVcGRhdGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLlVwZGF0ZUZ1bmN0aW9uR3JvdXBCeUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6dXBkYXRlRnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXRGdW5jdGlvbkdyb3VwQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogUHV0RnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8YW55Pj47XG4gICAgLyoqXG4gICAgICogVXBkYXRlIEZ1bmN0aW9uIEdyb3VwIGRldGFpbHMgLSAmI3g2MDtQVVQmI3g2MDsuXG4gICAgICogIyBVcGRhdGUgRnVuY3Rpb24gR3JvdXAgZGV0YWlscyAtICYjeDYwO1BVVCYjeDYwOyAgICBVcGRhdGVzIGRldGFpbHMgZm9yIGEgc3BlY2lmaWMgZnVuY3Rpb24gZ3JvdXAuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5yb3V0ZXMuZnVuY3Rpb25ncm91cC5VcGRhdGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIElkOiBVcGRhdGVGdW5jdGlvbkdyb3VwQnlJZFJvdXRlICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLlVwZGF0ZUZ1bmN0aW9uR3JvdXBCeUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6dXBkYXRlRnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwdXRGdW5jdGlvbkdyb3VwQnlJZChyZXF1ZXN0UGFyYW1ldGVyczogUHV0RnVuY3Rpb25Hcm91cEJ5SWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBGdW5jdGlvbiBHcm91cCBkZXRhaWxzIC0gJiN4NjA7UFVUJiN4NjA7LlxuICAgICAqICMgVXBkYXRlIEZ1bmN0aW9uIEdyb3VwIGRldGFpbHMgLSAmI3g2MDtQVVQmI3g2MDsgICAgVXBkYXRlcyBkZXRhaWxzIGZvciBhIHNwZWNpZmljIGZ1bmN0aW9uIGdyb3VwLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5hY2Nlc3Nncm91cHMucm91dGVzLmZ1bmN0aW9uZ3JvdXAuVXBkYXRlRnVuY3Rpb25Hcm91cEJ5SWRSb3V0ZSAgKiBSb3V0ZSBJZDogVXBkYXRlRnVuY3Rpb25Hcm91cEJ5SWRSb3V0ZSAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5VcGRhdGVGdW5jdGlvbkdyb3VwQnlJZCAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OnVwZGF0ZUZ1bmN0aW9uR3JvdXBCeUlkUmVxdWVzdGVkSW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHV0RnVuY3Rpb25Hcm91cEJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IFB1dEZ1bmN0aW9uR3JvdXBCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2lkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJpZFwiXTtcbiAgICAgICAgaWYgKF9pZCA9PT0gbnVsbCB8fCBfaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgaWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBwdXRGdW5jdGlvbkdyb3VwQnlJZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfZnVuY3Rpb25Hcm91cEl0ZW1QdXQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImZ1bmN0aW9uR3JvdXBJdGVtUHV0XCJdO1xuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyXG4gICAgICAgIGNvbnN0IGNvbnN1bWVzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCBodHRwQ29udGVudFR5cGVTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckNvbnRlbnRUeXBlKGNvbnN1bWVzKTtcbiAgICAgICAgaWYgKGh0dHBDb250ZW50VHlwZVNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQ29udGVudC1UeXBlJywgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5wdXQ8YW55PihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvYWNjZXNzZ3JvdXBzL2Z1bmN0aW9uLWdyb3Vwcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2lkKSl9YCxcbiAgICAgICAgICAgIF9mdW5jdGlvbkdyb3VwSXRlbVB1dCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHB1dEZ1bmN0aW9uR3JvdXBCeUlkVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBQdXRGdW5jdGlvbkdyb3VwQnlJZFJlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfaWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImlkXCJdO1xuICAgICAgICBpZiAoX2lkID09PSBudWxsIHx8IF9pZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBpZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIHB1dEZ1bmN0aW9uR3JvdXBCeUlkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9mdW5jdGlvbkdyb3VwSXRlbVB1dCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZnVuY3Rpb25Hcm91cEl0ZW1QdXRcIl07XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvYWNjZXNzZ3JvdXBzL2Z1bmN0aW9uLWdyb3Vwcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2lkKSl9YDtcbiAgICB9XG5cbn1cbiJdfQ==