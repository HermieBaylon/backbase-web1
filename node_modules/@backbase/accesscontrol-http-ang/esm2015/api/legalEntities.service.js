import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ACCESS_CONTROL_BASE_PATH } from '../variables';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class LegalEntitiesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/access-control';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AccessControlConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getLegalEntities(requestParameters, observe = 'body', reportProgress = false, options) {
        const _parentEntityId = requestParameters["parentEntityId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_parentEntityId !== undefined && _parentEntityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _parentEntityId, 'parentEntityId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/legalentities`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntitiesUrl(requestParameters) {
        const _parentEntityId = requestParameters["parentEntityId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_parentEntityId !== undefined && _parentEntityId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _parentEntityId, 'parentEntityId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/legalentities${queryString ? `?${queryString}` : ''}`;
    }
    getLegalEntityByExternalId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/legalentities/external/${encodeURIComponent(String(_externalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntityByExternalIdUrl(requestParameters) {
        const _externalId = requestParameters["externalId"];
        if (_externalId === null || _externalId === undefined) {
            throw new Error('Required parameter externalId was null or undefined when calling getLegalEntityByExternalId.');
        }
        return `${this.configuration.basePath}/client-api/v2/legalentities/external/${encodeURIComponent(String(_externalId))}`;
    }
    getLegalEntityById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _legalEntityId = requestParameters["legalEntityId"];
        if (_legalEntityId === null || _legalEntityId === undefined) {
            throw new Error('Required parameter legalEntityId was null or undefined when calling getLegalEntityById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/legalentities/${encodeURIComponent(String(_legalEntityId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntityByIdUrl(requestParameters) {
        const _legalEntityId = requestParameters["legalEntityId"];
        if (_legalEntityId === null || _legalEntityId === undefined) {
            throw new Error('Required parameter legalEntityId was null or undefined when calling getLegalEntityById.');
        }
        return `${this.configuration.basePath}/client-api/v2/legalentities/${encodeURIComponent(String(_legalEntityId))}`;
    }
    getLegalEntityExternalData(requestParameters, observe = 'body', reportProgress = false, options) {
        const _field = requestParameters["field"];
        const _term = requestParameters["term"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_field !== undefined && _field !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _field, 'field');
        }
        if (_term !== undefined && _term !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _term, 'term');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/legalentities/external-data`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntityExternalDataUrl(requestParameters) {
        const _field = requestParameters["field"];
        const _term = requestParameters["term"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_field !== undefined && _field !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _field, 'field');
        }
        if (_term !== undefined && _term !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _term, 'term');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/legalentities/external-data${queryString ? `?${queryString}` : ''}`;
    }
    getLegalEntityForUser(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/legalentities/me`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getLegalEntityForUserUrl() {
        return `${this.configuration.basePath}/client-api/v2/legalentities/me`;
    }
    getMasterServiceAgreement(requestParameters, observe = 'body', reportProgress = false, options) {
        const _legalEntityId = requestParameters["legalEntityId"];
        if (_legalEntityId === null || _legalEntityId === undefined) {
            throw new Error('Required parameter legalEntityId was null or undefined when calling getMasterServiceAgreement.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/legalentities/${encodeURIComponent(String(_legalEntityId))}/serviceagreements/master`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMasterServiceAgreementUrl(requestParameters) {
        const _legalEntityId = requestParameters["legalEntityId"];
        if (_legalEntityId === null || _legalEntityId === undefined) {
            throw new Error('Required parameter legalEntityId was null or undefined when calling getMasterServiceAgreement.');
        }
        return `${this.configuration.basePath}/client-api/v2/legalentities/${encodeURIComponent(String(_legalEntityId))}/serviceagreements/master`;
    }
    getSegmentation(requestParameters, observe = 'body', reportProgress = false, options) {
        const _businessFunction = requestParameters["businessFunction"];
        if (_businessFunction === null || _businessFunction === undefined) {
            throw new Error('Required parameter businessFunction was null or undefined when calling getSegmentation.');
        }
        const _query = requestParameters["query"];
        const _privilege = requestParameters["privilege"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_businessFunction !== undefined && _businessFunction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _businessFunction, 'businessFunction');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/legalentities/segmentation`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSegmentationUrl(requestParameters) {
        const _businessFunction = requestParameters["businessFunction"];
        if (_businessFunction === null || _businessFunction === undefined) {
            throw new Error('Required parameter businessFunction was null or undefined when calling getSegmentation.');
        }
        const _query = requestParameters["query"];
        const _privilege = requestParameters["privilege"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_businessFunction !== undefined && _businessFunction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _businessFunction, 'businessFunction');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/legalentities/segmentation${queryString ? `?${queryString}` : ''}`;
    }
    postLegalEntities(requestParameters, observe = 'body', reportProgress = false, options) {
        const _legalEntityCreateItem = requestParameters["legalEntityCreateItem"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/legalentities`, _legalEntityCreateItem, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postLegalEntitiesUrl(requestParameters) {
        const _legalEntityCreateItem = requestParameters["legalEntityCreateItem"];
        return `${this.configuration.basePath}/client-api/v2/legalentities`;
    }
    postLegalEntitiesAsParticipant(requestParameters, observe = 'body', reportProgress = false, options) {
        const _legalEntityAsParticipantCreateItem = requestParameters["legalEntityAsParticipantCreateItem"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/legalentities/as-participant`, _legalEntityAsParticipantCreateItem, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postLegalEntitiesAsParticipantUrl(requestParameters) {
        const _legalEntityAsParticipantCreateItem = requestParameters["legalEntityAsParticipantCreateItem"];
        return `${this.configuration.basePath}/client-api/v2/legalentities/as-participant`;
    }
    postSubEntities(requestParameters, observe = 'body', reportProgress = false, options) {
        const _searchSubEntitiesParameters = requestParameters["searchSubEntitiesParameters"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/legalentities/sub-entities`, _searchSubEntitiesParameters, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postSubEntitiesUrl(requestParameters) {
        const _searchSubEntitiesParameters = requestParameters["searchSubEntitiesParameters"];
        return `${this.configuration.basePath}/client-api/v2/legalentities/sub-entities`;
    }
}
LegalEntitiesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LegalEntitiesHttpService, deps: [{ token: i1.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: i2.AccessControlConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
LegalEntitiesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LegalEntitiesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: LegalEntitiesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCESS_CONTROL_BASE_PATH]
                }] }, { type: i2.AccessControlConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWxFbnRpdGllcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXBpL2xlZ2FsRW50aXRpZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFjQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBMkIsZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBYyxXQUFXLEVBQUUsVUFBVSxFQUNVLE1BQVksc0JBQXNCLENBQUM7QUFDekYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQStCLFlBQVksQ0FBQztBQWdCL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFzQixNQUEwQixjQUFjLENBQUM7QUFDaEcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQTBDLGtCQUFrQixDQUFDOzs7O0FBc0VsRyxNQUFNLE9BQU8sd0JBQXdCO0lBT2pDLFlBQXNCLFVBQXNCLEVBQWdELFFBQWdCLEVBQWMsYUFBeUM7UUFBN0ksZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUxsQyxhQUFRLEdBQUcsaUJBQWlCLENBQUM7UUFDaEMsbUJBQWMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ25DLGtCQUFhLEdBQUcsSUFBSSwwQkFBMEIsRUFBRSxDQUFDO1FBSXBELElBQUksYUFBYSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7U0FDdEM7UUFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2pELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO2dCQUM5QixRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUM1QjtZQUNELElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMxQztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLElBQUksSUFBSSx3QkFBd0Is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LElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZTtZQUNuRCxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsT0FBTztZQUNoQixjQUFjLEVBQUUsY0FBYztTQUNqQyxDQUNKLENBQUM7SUFDTixDQUFDO0lBRU0sa0JBQWtCLENBQUMsaUJBQStDO1FBQ3JFLE1BQU0sNEJBQTRCLEdBQUcsaUJBQWlCLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUN0RixPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLDJDQUEyQyxDQUFDO0lBQ3JGLENBQUM7O3NIQXA2QlEsd0JBQXdCLDRDQU9pQyx3QkFBd0I7MEhBUGpGLHdCQUF3QixjQUZ2QixNQUFNOzRGQUVQLHdCQUF3QjtrQkFIcEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQVFrRCxRQUFROzswQkFBSSxNQUFNOzJCQUFDLHdCQUF3Qjs7MEJBQXFCLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFjY2VzcyBDb250cm9sIGNsaWVudCBBUElcbiAqIE1hbmFnZSB1c2VyIHBlcm1pc3Npb25zLCBkYXRhIGdyb3VwcywgZnVuY3Rpb24gZ3JvdXBzIGFuZCBzZXJ2aWNlIGFncmVlbWVudHMgZnJvbSBjbGllbnQgc2lkZVxuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAyLjEwLjBcbiAqIFxuICpcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vZ2l0aHViLmNvbS9CYWNrYmFzZS9iYWNrYmFzZS1vcGVuYXBpLXRvb2xzKS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9CYWNrYmFzZS9iYWNrYmFzZS1vcGVuYXBpLXRvb2xzXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlIG1lbWJlci1vcmRlcmluZyAqL1xuXG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gICAgICAgICAgICAgICAgICAgICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyxcbiAgICAgICAgIEh0dHBSZXNwb25zZSwgSHR0cEV2ZW50LCBIdHRwUGFyYW1ldGVyQ29kZWMgfSAgICAgICBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDdXN0b21IdHRwUGFyYW1ldGVyQ29kZWMgfSAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vZW5jb2Rlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEJhZFJlcXVlc3RFcnJvciB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBGb3JiaWRkZW5FcnJvciB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBHZXRTZXJ2aWNlQWdyZWVtZW50IH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IExlZ2FsRW50aXR5QXNQYXJ0aWNpcGFudENyZWF0ZUl0ZW0gfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgTGVnYWxFbnRpdHlBc1BhcnRpY2lwYW50SXRlbUlkIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IExlZ2FsRW50aXR5Q3JlYXRlSXRlbSB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBMZWdhbEVudGl0eUV4dGVybmFsRGF0YUl0ZW0gfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgTGVnYWxFbnRpdHlJdGVtIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWxzJztcbmltcG9ydCB7IExlZ2FsRW50aXR5SXRlbUJhc2UgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgTGVnYWxFbnRpdHlJdGVtSWQgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuaW1wb3J0IHsgTm90Rm91bmRFcnJvciB9IGZyb20gJy4uL21vZGVsL21vZGVscyc7XG5pbXBvcnQgeyBTZWFyY2hTdWJFbnRpdGllc1BhcmFtZXRlcnMgfSBmcm9tICcuLi9tb2RlbC9tb2RlbHMnO1xuXG5pbXBvcnQgeyBBQ0NFU1NfQ09OVFJPTF9CQVNFX1BBVEgsIENPTExFQ1RJT05fRk9STUFUUyB9ICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vdmFyaWFibGVzJztcbmltcG9ydCB7IEFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vY29uZmlndXJhdGlvbic7XG5cblxuZXhwb3J0IGludGVyZmFjZSBHZXRMZWdhbEVudGl0aWVzUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIElkIG9mIHRoZSBMZWdhbCBFbnRpdHlcXCYjMzk7cyBwYXJlbnQgKi9cbiAgICBbXCJwYXJlbnRFbnRpdHlJZFwiXT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBMZWdhbCBFbnRpdHkgZXh0ZXJuYWwgSUQgKi9cbiAgICBbXCJleHRlcm5hbElkXCJdOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TGVnYWxFbnRpdHlCeUlkUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqIExlZ2FsIEVudGl0eSBpbnRlcm5hbCBJZCAqL1xuICAgIFtcImxlZ2FsRW50aXR5SWRcIl06IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXRMZWdhbEVudGl0eUV4dGVybmFsRGF0YVJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBUaGUgZGF0YSBmaWVsZCB1c2VkIGZvciBzZWFyY2ggKi9cbiAgICBbXCJmaWVsZFwiXT86IHN0cmluZztcbiAgICAvKiogVGhlIHN0cmluZyB0ZXJtIHVzZWQgZm9yIHNlYXJjaCAqL1xuICAgIFtcInRlcm1cIl0/OiBzdHJpbmc7XG4gICAgLyoqIFBhZ2UgTnVtYmVyLiBTa2lwIG92ZXIgcGFnZXMgb2YgZWxlbWVudHMgYnkgc3BlY2lmeWluZyBhIHN0YXJ0IHZhbHVlIGZvciB0aGUgcXVlcnkgKi9cbiAgICBbXCJmcm9tXCJdPzogbnVtYmVyO1xuICAgIC8qKiBSZWNvcmQgVVVJRC4gQXMgYW4gYWx0ZXJuYXRpdmUgZm9yIHNwZWNpZnlpbmcgXFwmIzM5O2Zyb21cXCYjMzk7IHRoaXMgYWxsb3dzIHRvIHBvaW50IHRvIHRoZSByZWNvcmQgdG8gc3RhcnQgdGhlIHNlbGVjdGlvbiBmcm9tLiAgKi9cbiAgICBbXCJjdXJzb3JcIl0/OiBzdHJpbmc7XG4gICAgLyoqIExpbWl0IHRoZSBudW1iZXIgb2YgZWxlbWVudHMgb24gdGhlIHJlc3BvbnNlLiBXaGVuIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBjdXJzb3IsIHRoZSB2YWx1ZSBpcyBhbGxvd2VkIHRvIGJlIGEgbmVnYXRpdmUgbnVtYmVyIHRvIGluZGljYXRlIHJlcXVlc3RpbmcgcmVjb3JkcyB1cHdhcmRzIGZyb20gdGhlIHN0YXJ0aW5nIHBvaW50IGluZGljYXRlZCBieSB0aGUgY3Vyc29yLiAgKi9cbiAgICBbXCJzaXplXCJdPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnRSZXF1ZXN0UGFyYW1zIHtcbiAgICAvKiogTGVnYWwgRW50aXR5IGludGVybmFsIElEICovXG4gICAgW1wibGVnYWxFbnRpdHlJZFwiXTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFNlZ21lbnRhdGlvblJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiBOYW1lIG9mIHRoZSBidXNpbmVzcyBmdW5jdGlvbiAqL1xuICAgIFtcImJ1c2luZXNzRnVuY3Rpb25cIl06IHN0cmluZztcbiAgICAvKiogU2VhcmNoIGJ5IG5hbWUgb3IgZXh0ZXJuYWwgSUQ6IHBhcnRpYWwgdGVybSBmb3IgbmFtZSBhbmQgd2hvbGUgdGVybSBmb3IgZXh0ZXJuYWwgSUQgKi9cbiAgICBbXCJxdWVyeVwiXT86IHN0cmluZztcbiAgICAvKiogTmFtZSBvZiB0aGUgcHJpdmlsZWdlICovXG4gICAgW1wicHJpdmlsZWdlXCJdPzogc3RyaW5nO1xuICAgIC8qKiBQYWdlIE51bWJlci4gU2tpcCBvdmVyIHBhZ2VzIG9mIGVsZW1lbnRzIGJ5IHNwZWNpZnlpbmcgYSBzdGFydCB2YWx1ZSBmb3IgdGhlIHF1ZXJ5ICovXG4gICAgW1wiZnJvbVwiXT86IG51bWJlcjtcbiAgICAvKiogUmVjb3JkIFVVSUQuIEFzIGFuIGFsdGVybmF0aXZlIGZvciBzcGVjaWZ5aW5nIFxcJiMzOTtmcm9tXFwmIzM5OyB0aGlzIGFsbG93cyB0byBwb2ludCB0byB0aGUgcmVjb3JkIHRvIHN0YXJ0IHRoZSBzZWxlY3Rpb24gZnJvbS4gICovXG4gICAgW1wiY3Vyc29yXCJdPzogc3RyaW5nO1xuICAgIC8qKiBMaW1pdCB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIG9uIHRoZSByZXNwb25zZS4gV2hlbiB1c2VkIGluIGNvbWJpbmF0aW9uIHdpdGggY3Vyc29yLCB0aGUgdmFsdWUgaXMgYWxsb3dlZCB0byBiZSBhIG5lZ2F0aXZlIG51bWJlciB0byBpbmRpY2F0ZSByZXF1ZXN0aW5nIHJlY29yZHMgdXB3YXJkcyBmcm9tIHRoZSBzdGFydGluZyBwb2ludCBpbmRpY2F0ZWQgYnkgdGhlIGN1cnNvci4gICovXG4gICAgW1wic2l6ZVwiXT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQb3N0TGVnYWxFbnRpdGllc1JlcXVlc3RQYXJhbXMge1xuICAgIC8qKiAjIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IC0gJiN4NjA7UE9TVCYjeDYwOyAgICBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkNyZWF0ZUxlZ2FsRW50aXR5RmxvdyAgICovXG4gICAgW1wibGVnYWxFbnRpdHlDcmVhdGVJdGVtXCJdPzogTGVnYWxFbnRpdHlDcmVhdGVJdGVtO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvc3RMZWdhbEVudGl0aWVzQXNQYXJ0aWNpcGFudFJlcXVlc3RQYXJhbXMge1xuICAgIC8qKiAjIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IGFuZCBhc3NpZ24gdG8gc2VydmljZSBhZ3JlZW1lbnQgLSAmI3g2MDtQT1NUJiN4NjA7ICAgIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IGFuZCBhc3NpZ24gdGhlIGxlZ2FsIGVudGl0eSB0byBlaXRoZXIgYW4gZXhpc3Rpbmcgb3IgbmV3IHNlcnZpY2UgYWdyZWVtZW50LiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuQ3JlYXRlTGVnYWxBc1BhcnRpY2lwYW50RW50aXR5RmxvdyAgICovXG4gICAgW1wibGVnYWxFbnRpdHlBc1BhcnRpY2lwYW50Q3JlYXRlSXRlbVwiXT86IExlZ2FsRW50aXR5QXNQYXJ0aWNpcGFudENyZWF0ZUl0ZW07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdFN1YkVudGl0aWVzUmVxdWVzdFBhcmFtcyB7XG4gICAgLyoqICMgU3ViIExlZ2FsIEVudGl0aWVzIGxpc3QgLSAmI3g2MDtQT1NUJiN4NjA7ICAgIEluaXRpYWwgY2FsbCB0byByZXRyaWV2ZSB0aGUgbGlzdCBvZiBzdWIgbGVnYWwgZW50aXRpZXMgKGN1c3RvbWVycykgZnJvbSB0aGUgYmFja2Jhc2UgcGxhdGZvcm0gYnkgZXhjbHVkaW5nIGlkcyBwYXNzZWQgaW4gdGhlIGJvZHkgb2YgdGhlIHJlcXVlc3QuICBJZiBubyBwYXJlbnRFbnRpdHlJZCBwYXNzZWQgYXMgcXVlcnkgcGFyYW1ldGVyIHRoZW4gd2lsbCByZXR1cm4gc3ViIGxlZ2FsIGVudGl0aWVzIGZyb20gdGhlIGNvbnRleHQgdXNlci4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkdldFN1YkxlZ2FsRW50aXRsZXNGbG93ICAgKi9cbiAgICBbXCJzZWFyY2hTdWJFbnRpdGllc1BhcmFtZXRlcnNcIl0/OiBTZWFyY2hTdWJFbnRpdGllc1BhcmFtZXRlcnM7XG59XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTGVnYWxFbnRpdGllc0h0dHBTZXJ2aWNlIHtcblxuICAgIHByb3RlY3RlZCBiYXNlUGF0aCA9ICcvYWNjZXNzLWNvbnRyb2wnO1xuICAgIHB1YmxpYyBkZWZhdWx0SGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xuICAgIHB1YmxpYyBjb25maWd1cmF0aW9uID0gbmV3IEFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uKCk7XG4gICAgcHVibGljIGVuY29kZXI6IEh0dHBQYXJhbWV0ZXJDb2RlYztcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBAT3B0aW9uYWwoKSBASW5qZWN0KEFDQ0VTU19DT05UUk9MX0JBU0VfUEFUSCkgYmFzZVBhdGg6IHN0cmluZywgQE9wdGlvbmFsKCkgY29uZmlndXJhdGlvbjogQWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJhc2VQYXRoICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGJhc2VQYXRoID0gdGhpcy5iYXNlUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5jb2RlciA9IHRoaXMuY29uZmlndXJhdGlvbi5lbmNvZGVyIHx8IG5ldyBDdXN0b21IdHRwUGFyYW1ldGVyQ29kZWMoKTtcbiAgICB9XG5cblxuICAgIHByaXZhdGUgYWRkVG9IdHRwUGFyYW1zKGh0dHBQYXJhbXM6IEh0dHBQYXJhbXMsIHZhbHVlOiBhbnksIGtleT86IHN0cmluZyk6IEh0dHBQYXJhbXMge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGh0dHBQYXJhbXMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtc1JlY3Vyc2l2ZShodHRwUGFyYW1zLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBodHRwUGFyYW1zID0gdGhpcy5hZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoaHR0cFBhcmFtcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoaHR0cFBhcmFtczogSHR0cFBhcmFtcywgdmFsdWU/OiBhbnksIGtleT86IHN0cmluZyk6IEh0dHBQYXJhbXMge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGh0dHBQYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAodmFsdWUgYXMgYW55W10pLmZvckVhY2goIGVsZW0gPT4gaHR0cFBhcmFtcyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zUmVjdXJzaXZlKGh0dHBQYXJhbXMsIGVsZW0sIGtleSkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaHR0cFBhcmFtcyA9IGh0dHBQYXJhbXMuYXBwZW5kKGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZSBhcyBEYXRlKS50b0lTT1N0cmluZygpLnN1YnN0cigwLCAxMCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJrZXkgbWF5IG5vdCBiZSBudWxsIGlmIHZhbHVlIGlzIERhdGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaCggayA9PiBodHRwUGFyYW1zID0gdGhpcy5hZGRUb0h0dHBQYXJhbXNSZWN1cnNpdmUoXG4gICAgICAgICAgICAgICAgICAgIGh0dHBQYXJhbXMsIHZhbHVlW2tdLCBrZXkgIT0gbnVsbCA/IGAke2tleX0uJHtrfWAgOiBrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGh0dHBQYXJhbXMgPSBodHRwUGFyYW1zLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwia2V5IG1heSBub3QgYmUgbnVsbCBpZiB2YWx1ZSBpcyBub3Qgb2JqZWN0IG9yIGFycmF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodHRwUGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0aWVzIGxpc3QgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdGllcyBsaXN0IC0gJiN4NjA7R0VUJiN4NjA7ICAgIEluaXRpYWwgY2FsbCB0byByZXRyaWV2ZSB0aGUgbGlzdCBvZiBsZWdhbCBlbnRpdGllcyAoY3VzdG9tZXJzKSBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkucm91dGVzLkxpc3RMZWdhbEVudGl0aWVzUm91dGUgICogUm91dGUgSWQ6IExpc3RMZWdhbEVudGl0aWVzICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLmxlZ2FsRW50aXRpZXMuTGlzdExlZ2FsRW50aXRpZXMgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpsaXN0TGVnYWxFbnRpdGllc1JlcXVlc3RlZEludGVybmFsICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdGllcyhyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdGllc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8QXJyYXk8TGVnYWxFbnRpdHlJdGVtPj47XG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXRpZXMgbGlzdCAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExlZ2FsIEVudGl0aWVzIGxpc3QgLSAmI3g2MDtHRVQmI3g2MDsgICAgSW5pdGlhbCBjYWxsIHRvIHJldHJpZXZlIHRoZSBsaXN0IG9mIGxlZ2FsIGVudGl0aWVzIChjdXN0b21lcnMpIGZyb20gdGhlIGJhY2tiYXNlIHBsYXRmb3JtLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5yb3V0ZXMuTGlzdExlZ2FsRW50aXRpZXNSb3V0ZSAgKiBSb3V0ZSBJZDogTGlzdExlZ2FsRW50aXRpZXMgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MubGVnYWxFbnRpdGllcy5MaXN0TGVnYWxFbnRpdGllcyAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0Omxpc3RMZWdhbEVudGl0aWVzUmVxdWVzdGVkSW50ZXJuYWwgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0aWVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRMZWdhbEVudGl0aWVzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPEFycmF5PExlZ2FsRW50aXR5SXRlbT4+PjtcbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdGllcyBsaXN0IC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXRpZXMgbGlzdCAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgdGhlIGxpc3Qgb2YgbGVnYWwgZW50aXRpZXMgKGN1c3RvbWVycykgZnJvbSB0aGUgYmFja2Jhc2UgcGxhdGZvcm0uICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LnJvdXRlcy5MaXN0TGVnYWxFbnRpdGllc1JvdXRlICAqIFJvdXRlIElkOiBMaXN0TGVnYWxFbnRpdGllcyAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5sZWdhbEVudGl0aWVzLkxpc3RMZWdhbEVudGl0aWVzICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6bGlzdExlZ2FsRW50aXRpZXNSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXRpZXMocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXRpZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEFycmF5PExlZ2FsRW50aXR5SXRlbT4+PjtcbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdGllcyBsaXN0IC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXRpZXMgbGlzdCAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgdGhlIGxpc3Qgb2YgbGVnYWwgZW50aXRpZXMgKGN1c3RvbWVycykgZnJvbSB0aGUgYmFja2Jhc2UgcGxhdGZvcm0uICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LnJvdXRlcy5MaXN0TGVnYWxFbnRpdGllc1JvdXRlICAqIFJvdXRlIElkOiBMaXN0TGVnYWxFbnRpdGllcyAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5sZWdhbEVudGl0aWVzLkxpc3RMZWdhbEVudGl0aWVzICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6bGlzdExlZ2FsRW50aXRpZXNSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXRpZXMocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXRpZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfcGFyZW50RW50aXR5SWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInBhcmVudEVudGl0eUlkXCJdO1xuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChfcGFyZW50RW50aXR5SWQgIT09IHVuZGVmaW5lZCAmJiBfcGFyZW50RW50aXR5SWQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9wYXJlbnRFbnRpdHlJZCwgJ3BhcmVudEVudGl0eUlkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEFycmF5PExlZ2FsRW50aXR5SXRlbT4+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi9sZWdhbGVudGl0aWVzYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldExlZ2FsRW50aXRpZXNVcmwocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXRpZXNSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX3BhcmVudEVudGl0eUlkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJwYXJlbnRFbnRpdHlJZFwiXTtcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9wYXJlbnRFbnRpdHlJZCAhPT0gdW5kZWZpbmVkICYmIF9wYXJlbnRFbnRpdHlJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3BhcmVudEVudGl0eUlkLCAncGFyZW50RW50aXR5SWQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5UGFyYW1ldGVycy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL2xlZ2FsZW50aXRpZXMke3F1ZXJ5U3RyaW5nID8gYD8ke3F1ZXJ5U3RyaW5nfWAgOiAnJ31gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0eSBieSBleHRlcm5hbCBpZCAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExlZ2FsIEVudGl0eSBieSBleHRlcm5hbCBpZCAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgYSBMZWdhbCBFbnRpdHkgZnJvbSB0aGUgYmFja2Jhc2UgcGxhdGZvcm0gd2l0aCB0aGUgZ2l2ZW4gTGVnYWwgRW50aXR5IGV4dGVybmFsIHJlZmVyZW5jZS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkucm91dGVzLkdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkUm91dGUgICogUm91dGUgSWQ6IEdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLmxlZ2FsZW50aXRpZXMuR2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWQgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpnZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJlcXVlc3RlZEludGVybmFsICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxMZWdhbEVudGl0eUl0ZW1CYXNlPjtcbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdHkgYnkgZXh0ZXJuYWwgaWQgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdHkgYnkgZXh0ZXJuYWwgaWQgLSAmI3g2MDtHRVQmI3g2MDsgICAgSW5pdGlhbCBjYWxsIHRvIHJldHJpZXZlIGEgTGVnYWwgRW50aXR5IGZyb20gdGhlIGJhY2tiYXNlIHBsYXRmb3JtIHdpdGggdGhlIGdpdmVuIExlZ2FsIEVudGl0eSBleHRlcm5hbCByZWZlcmVuY2UuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LnJvdXRlcy5HZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZCAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5sZWdhbGVudGl0aWVzLkdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6Z2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxMZWdhbEVudGl0eUl0ZW1CYXNlPj47XG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXR5IGJ5IGV4dGVybmFsIGlkIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXR5IGJ5IGV4dGVybmFsIGlkIC0gJiN4NjA7R0VUJiN4NjA7ICAgIEluaXRpYWwgY2FsbCB0byByZXRyaWV2ZSBhIExlZ2FsIEVudGl0eSBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybSB3aXRoIHRoZSBnaXZlbiBMZWdhbCBFbnRpdHkgZXh0ZXJuYWwgcmVmZXJlbmNlLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5yb3V0ZXMuR2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRSb3V0ZSAgKiBSb3V0ZSBJZDogR2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWQgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MubGVnYWxlbnRpdGllcy5HZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZCAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkUmVxdWVzdGVkSW50ZXJuYWwgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PExlZ2FsRW50aXR5SXRlbUJhc2U+PjtcbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdHkgYnkgZXh0ZXJuYWwgaWQgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdHkgYnkgZXh0ZXJuYWwgaWQgLSAmI3g2MDtHRVQmI3g2MDsgICAgSW5pdGlhbCBjYWxsIHRvIHJldHJpZXZlIGEgTGVnYWwgRW50aXR5IGZyb20gdGhlIGJhY2tiYXNlIHBsYXRmb3JtIHdpdGggdGhlIGdpdmVuIExlZ2FsIEVudGl0eSBleHRlcm5hbCByZWZlcmVuY2UuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LnJvdXRlcy5HZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZCAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5sZWdhbGVudGl0aWVzLkdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6Z2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRMZWdhbEVudGl0eUJ5RXh0ZXJuYWxJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9leHRlcm5hbElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJleHRlcm5hbElkXCJdO1xuICAgICAgICBpZiAoX2V4dGVybmFsSWQgPT09IG51bGwgfHwgX2V4dGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZXh0ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxMZWdhbEVudGl0eUl0ZW1CYXNlPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy9leHRlcm5hbC8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2V4dGVybmFsSWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlCeUV4dGVybmFsSWRVcmwocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9leHRlcm5hbElkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJleHRlcm5hbElkXCJdO1xuICAgICAgICBpZiAoX2V4dGVybmFsSWQgPT09IG51bGwgfHwgX2V4dGVybmFsSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgZXh0ZXJuYWxJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldExlZ2FsRW50aXR5QnlFeHRlcm5hbElkLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy9leHRlcm5hbC8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2V4dGVybmFsSWQpKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0eSBieSBJRCAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExlZ2FsIEVudGl0eSBieSBJRCAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgYSBMZWdhbCBFbnRpdHkgKGN1c3RvbWVyKSBieSBJRCBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkucm91dGVzLkdldExlZ2FsRW50aXR5QnlJZFJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUJ5SWQgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MubGVnYWxlbnRpdGllcy5HZXRMZWdhbEVudGl0eUJ5SWQgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpnZXRMZWdhbEVudGl0eUJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5QnlJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxMZWdhbEVudGl0eUl0ZW0+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0eSBieSBJRCAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExlZ2FsIEVudGl0eSBieSBJRCAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgYSBMZWdhbCBFbnRpdHkgKGN1c3RvbWVyKSBieSBJRCBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkucm91dGVzLkdldExlZ2FsRW50aXR5QnlJZFJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUJ5SWQgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MubGVnYWxlbnRpdGllcy5HZXRMZWdhbEVudGl0eUJ5SWQgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpnZXRMZWdhbEVudGl0eUJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5QnlJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdyZXNwb25zZScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cFJlc3BvbnNlPExlZ2FsRW50aXR5SXRlbT4+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0eSBieSBJRCAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExlZ2FsIEVudGl0eSBieSBJRCAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgYSBMZWdhbCBFbnRpdHkgKGN1c3RvbWVyKSBieSBJRCBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkucm91dGVzLkdldExlZ2FsRW50aXR5QnlJZFJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUJ5SWQgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MubGVnYWxlbnRpdGllcy5HZXRMZWdhbEVudGl0eUJ5SWQgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpnZXRMZWdhbEVudGl0eUJ5SWRSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5QnlJZChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlCeUlkUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxMZWdhbEVudGl0eUl0ZW0+PjtcbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdHkgYnkgSUQgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdHkgYnkgSUQgLSAmI3g2MDtHRVQmI3g2MDsgICAgSW5pdGlhbCBjYWxsIHRvIHJldHJpZXZlIGEgTGVnYWwgRW50aXR5IChjdXN0b21lcikgYnkgSUQgZnJvbSB0aGUgYmFja2Jhc2UgcGxhdGZvcm0uICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LnJvdXRlcy5HZXRMZWdhbEVudGl0eUJ5SWRSb3V0ZSAgKiBSb3V0ZSBJZDogR2V0TGVnYWxFbnRpdHlCeUlkICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLmxlZ2FsZW50aXRpZXMuR2V0TGVnYWxFbnRpdHlCeUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6Z2V0TGVnYWxFbnRpdHlCeUlkUmVxdWVzdGVkSW50ZXJuYWwgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUJ5SWQocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXR5QnlJZFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9sZWdhbEVudGl0eUlkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJsZWdhbEVudGl0eUlkXCJdO1xuICAgICAgICBpZiAoX2xlZ2FsRW50aXR5SWQgPT09IG51bGwgfHwgX2xlZ2FsRW50aXR5SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgbGVnYWxFbnRpdHlJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldExlZ2FsRW50aXR5QnlJZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8TGVnYWxFbnRpdHlJdGVtPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2xlZ2FsRW50aXR5SWQpKX1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlCeUlkVXJsKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRMZWdhbEVudGl0eUJ5SWRSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX2xlZ2FsRW50aXR5SWQgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImxlZ2FsRW50aXR5SWRcIl07XG4gICAgICAgIGlmIChfbGVnYWxFbnRpdHlJZCA9PT0gbnVsbCB8fCBfbGVnYWxFbnRpdHlJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBsZWdhbEVudGl0eUlkIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0TGVnYWxFbnRpdHlCeUlkLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2xlZ2FsRW50aXR5SWQpKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0aWVzIGxpc3Qgd2l0aCBleHRlcm5hbCBkYXRhIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXRpZXMgbGlzdCB3aXRoIGV4dGVybmFsIGRhdGEgLSAmI3g2MDtHRVQmI3g2MDsgICAgR2V0IGxlZ2FsIGVudGl0aWVzIHdpdGggZXh0ZXJuYWwgZGF0YSAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuRXh0ZXJuYWxMZWdhbEVudGl0eVNlYXJjaEZsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUV4dGVybmFsRGF0YShyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlFeHRlcm5hbERhdGFSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEFycmF5PExlZ2FsRW50aXR5RXh0ZXJuYWxEYXRhSXRlbT4+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0aWVzIGxpc3Qgd2l0aCBleHRlcm5hbCBkYXRhIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXRpZXMgbGlzdCB3aXRoIGV4dGVybmFsIGRhdGEgLSAmI3g2MDtHRVQmI3g2MDsgICAgR2V0IGxlZ2FsIGVudGl0aWVzIHdpdGggZXh0ZXJuYWwgZGF0YSAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuRXh0ZXJuYWxMZWdhbEVudGl0eVNlYXJjaEZsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUV4dGVybmFsRGF0YShyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlFeHRlcm5hbERhdGFSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXJyYXk8TGVnYWxFbnRpdHlFeHRlcm5hbERhdGFJdGVtPj4+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0aWVzIGxpc3Qgd2l0aCBleHRlcm5hbCBkYXRhIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXRpZXMgbGlzdCB3aXRoIGV4dGVybmFsIGRhdGEgLSAmI3g2MDtHRVQmI3g2MDsgICAgR2V0IGxlZ2FsIGVudGl0aWVzIHdpdGggZXh0ZXJuYWwgZGF0YSAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuRXh0ZXJuYWxMZWdhbEVudGl0eVNlYXJjaEZsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUV4dGVybmFsRGF0YShyZXF1ZXN0UGFyYW1ldGVyczogR2V0TGVnYWxFbnRpdHlFeHRlcm5hbERhdGFSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PEFycmF5PExlZ2FsRW50aXR5RXh0ZXJuYWxEYXRhSXRlbT4+PjtcbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdGllcyBsaXN0IHdpdGggZXh0ZXJuYWwgZGF0YSAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExlZ2FsIEVudGl0aWVzIGxpc3Qgd2l0aCBleHRlcm5hbCBkYXRhIC0gJiN4NjA7R0VUJiN4NjA7ICAgIEdldCBsZWdhbCBlbnRpdGllcyB3aXRoIGV4dGVybmFsIGRhdGEgICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkV4dGVybmFsTGVnYWxFbnRpdHlTZWFyY2hGbG93ICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlFeHRlcm5hbERhdGEocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXR5RXh0ZXJuYWxEYXRhUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2ZpZWxkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJmaWVsZFwiXTtcbiAgICAgICAgY29uc3QgX3Rlcm0gPSByZXF1ZXN0UGFyYW1ldGVyc1tcInRlcm1cIl07XG4gICAgICAgIGNvbnN0IF9mcm9tID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJmcm9tXCJdO1xuICAgICAgICBjb25zdCBfY3Vyc29yID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJjdXJzb3JcIl07XG4gICAgICAgIGNvbnN0IF9zaXplID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJzaXplXCJdO1xuXG4gICAgICAgIGxldCBxdWVyeVBhcmFtZXRlcnMgPSBuZXcgSHR0cFBhcmFtcyh7ZW5jb2RlcjogdGhpcy5lbmNvZGVyfSk7XG4gICAgICAgIGlmIChfZmllbGQgIT09IHVuZGVmaW5lZCAmJiBfZmllbGQgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9maWVsZCwgJ2ZpZWxkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF90ZXJtICE9PSB1bmRlZmluZWQgJiYgX3Rlcm0gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl90ZXJtLCAndGVybScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfZnJvbSAhPT0gdW5kZWZpbmVkICYmIF9mcm9tICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fZnJvbSwgJ2Zyb20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2N1cnNvciAhPT0gdW5kZWZpbmVkICYmIF9jdXJzb3IgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9jdXJzb3IsICdjdXJzb3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3NpemUgIT09IHVuZGVmaW5lZCAmJiBfc2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3NpemUsICdzaXplJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEFycmF5PExlZ2FsRW50aXR5RXh0ZXJuYWxEYXRhSXRlbT4+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi9sZWdhbGVudGl0aWVzL2V4dGVybmFsLWRhdGFgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhcmFtczogcXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlFeHRlcm5hbERhdGFVcmwocmVxdWVzdFBhcmFtZXRlcnM6IEdldExlZ2FsRW50aXR5RXh0ZXJuYWxEYXRhUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9maWVsZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZmllbGRcIl07XG4gICAgICAgIGNvbnN0IF90ZXJtID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJ0ZXJtXCJdO1xuICAgICAgICBjb25zdCBfZnJvbSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiZnJvbVwiXTtcbiAgICAgICAgY29uc3QgX2N1cnNvciA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wiY3Vyc29yXCJdO1xuICAgICAgICBjb25zdCBfc2l6ZSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wic2l6ZVwiXTtcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9maWVsZCAhPT0gdW5kZWZpbmVkICYmIF9maWVsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2ZpZWxkLCAnZmllbGQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3Rlcm0gIT09IHVuZGVmaW5lZCAmJiBfdGVybSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3Rlcm0sICd0ZXJtJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9mcm9tICE9PSB1bmRlZmluZWQgJiYgX2Zyb20gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9mcm9tLCAnZnJvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfY3Vyc29yICE9PSB1bmRlZmluZWQgJiYgX2N1cnNvciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2N1cnNvciwgJ2N1cnNvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc2l6ZSAhPT0gdW5kZWZpbmVkICYmIF9zaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fc2l6ZSwgJ3NpemUnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHF1ZXJ5UGFyYW1ldGVycy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL2xlZ2FsZW50aXRpZXMvZXh0ZXJuYWwtZGF0YSR7cXVlcnlTdHJpbmcgPyBgPyR7cXVlcnlTdHJpbmd9YCA6ICcnfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXR5IGZvciBjdXJyZW50IHVzZXIgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdHkgZm9yIGN1cnJlbnQgdXNlciAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgYSBMZWdhbCBFbnRpdHkgKGN1c3RvbWVyKSBmb3IgY3VycmVudCB1c2VyIGZyb20gdGhlIGJhY2tiYXNlIHBsYXRmb3JtLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5yb3V0ZXMuR2V0TGVnYWxFbnRpdHlGb3JDdXJyZW50VXNlclJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUZvckN1cnJlbnRVc2VyICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLmxlZ2FsZW50aXRpZXMuR2V0TGVnYWxFbnRpdHlGb3JDdXJyZW50VXNlciAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmdldExlZ2FsRW50aXR5Rm9yQ3VycmVudFVzZXJSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5Rm9yVXNlcihvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPExlZ2FsRW50aXR5SXRlbT47XG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXR5IGZvciBjdXJyZW50IHVzZXIgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdHkgZm9yIGN1cnJlbnQgdXNlciAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgYSBMZWdhbCBFbnRpdHkgKGN1c3RvbWVyKSBmb3IgY3VycmVudCB1c2VyIGZyb20gdGhlIGJhY2tiYXNlIHBsYXRmb3JtLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5yb3V0ZXMuR2V0TGVnYWxFbnRpdHlGb3JDdXJyZW50VXNlclJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUZvckN1cnJlbnRVc2VyICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLmxlZ2FsZW50aXRpZXMuR2V0TGVnYWxFbnRpdHlGb3JDdXJyZW50VXNlciAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmdldExlZ2FsRW50aXR5Rm9yQ3VycmVudFVzZXJSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5Rm9yVXNlcihvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8TGVnYWxFbnRpdHlJdGVtPj47XG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXR5IGZvciBjdXJyZW50IHVzZXIgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdHkgZm9yIGN1cnJlbnQgdXNlciAtICYjeDYwO0dFVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgYSBMZWdhbCBFbnRpdHkgKGN1c3RvbWVyKSBmb3IgY3VycmVudCB1c2VyIGZyb20gdGhlIGJhY2tiYXNlIHBsYXRmb3JtLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5yb3V0ZXMuR2V0TGVnYWxFbnRpdHlGb3JDdXJyZW50VXNlclJvdXRlICAqIFJvdXRlIElkOiBHZXRMZWdhbEVudGl0eUZvckN1cnJlbnRVc2VyICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLmxlZ2FsZW50aXRpZXMuR2V0TGVnYWxFbnRpdHlGb3JDdXJyZW50VXNlciAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmdldExlZ2FsRW50aXR5Rm9yQ3VycmVudFVzZXJSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldExlZ2FsRW50aXR5Rm9yVXNlcihvYnNlcnZlPzogJ2V2ZW50cycsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PExlZ2FsRW50aXR5SXRlbT4+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0eSBmb3IgY3VycmVudCB1c2VyIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXR5IGZvciBjdXJyZW50IHVzZXIgLSAmI3g2MDtHRVQmI3g2MDsgICAgSW5pdGlhbCBjYWxsIHRvIHJldHJpZXZlIGEgTGVnYWwgRW50aXR5IChjdXN0b21lcikgZm9yIGN1cnJlbnQgdXNlciBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkucm91dGVzLkdldExlZ2FsRW50aXR5Rm9yQ3VycmVudFVzZXJSb3V0ZSAgKiBSb3V0ZSBJZDogR2V0TGVnYWxFbnRpdHlGb3JDdXJyZW50VXNlciAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5sZWdhbGVudGl0aWVzLkdldExlZ2FsRW50aXR5Rm9yQ3VycmVudFVzZXIgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpnZXRMZWdhbEVudGl0eUZvckN1cnJlbnRVc2VyUmVxdWVzdGVkSW50ZXJuYWwgIFxuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRMZWdhbEVudGl0eUZvclVzZXIob2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PExlZ2FsRW50aXR5SXRlbT4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL2xlZ2FsZW50aXRpZXMvbWVgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlGb3JVc2VyVXJsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy9tZWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFzdGVyIHNlcnZpY2UgYWdyZWVtZW50IGZvciBMZWdhbCBFbnRpdHkgLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBNYXN0ZXIgc2VydmljZSBhZ3JlZW1lbnQgZm9yIExlZ2FsIEVudGl0eSAtICYjeDYwO0dFVCYjeDYwOyAgICBSZXRyaWV2ZSBtYXN0ZXIgc2VydmljZSBhZ3JlZW1lbnQgZm9yIExlZ2FsIEVudGl0eS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBBcGFjaGUgQ2FtZWw6ICAgICogUm91dGUgQ2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkucm91dGVzLkdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnRCeUxlZ2FsRW50aXR5SWRSb3V0ZSAgKiBSb3V0ZSBJZDogR2V0TWFzdGVyU2VydmljZUFncmVlbWVudEJ5TGVnYWxFbnRpdHlJZCAgKiBSb3V0ZSBzb3VyY2UgZW5kcG9pbnQ6IGRpcmVjdDpidXNpbmVzcy5sZWdhbGVudGl0aWVzLkdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnRCeUxlZ2FsRW50aXR5SWQgICogUm91dGUgZGVzdGluYXRpb24gZW5kcG9pbnQ6IGRpcmVjdDpnZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50QnlMZWdhbEVudGl0eUlkUmVxdWVzdGVkSW50ZXJuYWwgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50KHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50UmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxHZXRTZXJ2aWNlQWdyZWVtZW50PjtcbiAgICAvKipcbiAgICAgKiBNYXN0ZXIgc2VydmljZSBhZ3JlZW1lbnQgZm9yIExlZ2FsIEVudGl0eSAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIE1hc3RlciBzZXJ2aWNlIGFncmVlbWVudCBmb3IgTGVnYWwgRW50aXR5IC0gJiN4NjA7R0VUJiN4NjA7ICAgIFJldHJpZXZlIG1hc3RlciBzZXJ2aWNlIGFncmVlbWVudCBmb3IgTGVnYWwgRW50aXR5LiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIEFwYWNoZSBDYW1lbDogICAgKiBSb3V0ZSBDbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5yb3V0ZXMuR2V0TWFzdGVyU2VydmljZUFncmVlbWVudEJ5TGVnYWxFbnRpdHlJZFJvdXRlICAqIFJvdXRlIElkOiBHZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50QnlMZWdhbEVudGl0eUlkICAqIFJvdXRlIHNvdXJjZSBlbmRwb2ludDogZGlyZWN0OmJ1c2luZXNzLmxlZ2FsZW50aXRpZXMuR2V0TWFzdGVyU2VydmljZUFncmVlbWVudEJ5TGVnYWxFbnRpdHlJZCAgKiBSb3V0ZSBkZXN0aW5hdGlvbiBlbmRwb2ludDogZGlyZWN0OmdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnRCeUxlZ2FsRW50aXR5SWRSZXF1ZXN0ZWRJbnRlcm5hbCAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnQocmVxdWVzdFBhcmFtZXRlcnM6IEdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8R2V0U2VydmljZUFncmVlbWVudD4+O1xuICAgIC8qKlxuICAgICAqIE1hc3RlciBzZXJ2aWNlIGFncmVlbWVudCBmb3IgTGVnYWwgRW50aXR5IC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTWFzdGVyIHNlcnZpY2UgYWdyZWVtZW50IGZvciBMZWdhbCBFbnRpdHkgLSAmI3g2MDtHRVQmI3g2MDsgICAgUmV0cmlldmUgbWFzdGVyIHNlcnZpY2UgYWdyZWVtZW50IGZvciBMZWdhbCBFbnRpdHkuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LnJvdXRlcy5HZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50QnlMZWdhbEVudGl0eUlkUm91dGUgICogUm91dGUgSWQ6IEdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnRCeUxlZ2FsRW50aXR5SWQgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MubGVnYWxlbnRpdGllcy5HZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50QnlMZWdhbEVudGl0eUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6Z2V0TWFzdGVyU2VydmljZUFncmVlbWVudEJ5TGVnYWxFbnRpdHlJZFJlcXVlc3RlZEludGVybmFsICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWFzdGVyU2VydmljZUFncmVlbWVudChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TWFzdGVyU2VydmljZUFncmVlbWVudFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8R2V0U2VydmljZUFncmVlbWVudD4+O1xuICAgIC8qKlxuICAgICAqIE1hc3RlciBzZXJ2aWNlIGFncmVlbWVudCBmb3IgTGVnYWwgRW50aXR5IC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTWFzdGVyIHNlcnZpY2UgYWdyZWVtZW50IGZvciBMZWdhbCBFbnRpdHkgLSAmI3g2MDtHRVQmI3g2MDsgICAgUmV0cmlldmUgbWFzdGVyIHNlcnZpY2UgYWdyZWVtZW50IGZvciBMZWdhbCBFbnRpdHkuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgQXBhY2hlIENhbWVsOiAgICAqIFJvdXRlIENsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LnJvdXRlcy5HZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50QnlMZWdhbEVudGl0eUlkUm91dGUgICogUm91dGUgSWQ6IEdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnRCeUxlZ2FsRW50aXR5SWQgICogUm91dGUgc291cmNlIGVuZHBvaW50OiBkaXJlY3Q6YnVzaW5lc3MubGVnYWxlbnRpdGllcy5HZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50QnlMZWdhbEVudGl0eUlkICAqIFJvdXRlIGRlc3RpbmF0aW9uIGVuZHBvaW50OiBkaXJlY3Q6Z2V0TWFzdGVyU2VydmljZUFncmVlbWVudEJ5TGVnYWxFbnRpdHlJZFJlcXVlc3RlZEludGVybmFsICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWFzdGVyU2VydmljZUFncmVlbWVudChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TWFzdGVyU2VydmljZUFncmVlbWVudFJlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9sZWdhbEVudGl0eUlkID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJsZWdhbEVudGl0eUlkXCJdO1xuICAgICAgICBpZiAoX2xlZ2FsRW50aXR5SWQgPT09IG51bGwgfHwgX2xlZ2FsRW50aXR5SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgbGVnYWxFbnRpdHlJZCB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldE1hc3RlclNlcnZpY2VBZ3JlZW1lbnQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PEdldFNlcnZpY2VBZ3JlZW1lbnQ+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi9sZWdhbGVudGl0aWVzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhfbGVnYWxFbnRpdHlJZCkpfS9zZXJ2aWNlYWdyZWVtZW50cy9tYXN0ZXJgLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogPGFueT5yZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgd2l0aENyZWRlbnRpYWxzOiB0aGlzLmNvbmZpZ3VyYXRpb24ud2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZTogb2JzZXJ2ZSxcbiAgICAgICAgICAgICAgICByZXBvcnRQcm9ncmVzczogcmVwb3J0UHJvZ3Jlc3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWFzdGVyU2VydmljZUFncmVlbWVudFVybChyZXF1ZXN0UGFyYW1ldGVyczogR2V0TWFzdGVyU2VydmljZUFncmVlbWVudFJlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfbGVnYWxFbnRpdHlJZCA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wibGVnYWxFbnRpdHlJZFwiXTtcbiAgICAgICAgaWYgKF9sZWdhbEVudGl0eUlkID09PSBudWxsIHx8IF9sZWdhbEVudGl0eUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgcGFyYW1ldGVyIGxlZ2FsRW50aXR5SWQgd2FzIG51bGwgb3IgdW5kZWZpbmVkIHdoZW4gY2FsbGluZyBnZXRNYXN0ZXJTZXJ2aWNlQWdyZWVtZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy8ke2VuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoX2xlZ2FsRW50aXR5SWQpKX0vc2VydmljZWFncmVlbWVudHMvbWFzdGVyYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMZWdhbCBFbnRpdGllcyBTZWdtZW50YXRpb24gLSAmI3g2MDtHRVQmI3g2MDsuXG4gICAgICogIyBMZWdhbCBFbnRpdGllcyBTZWdtZW50YXRpb24gLSAmI3g2MDtHRVQmI3g2MDsgICAgTGlzdCBjdXN0b21lcnMgdGhhdCB1c2VyIGhhcyBhY2Nlc3MgdG8uICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgUkVTVCBlbmRwb2ludCBoYW5kbGVyOiAgICAgKiBFeHRlbmRpbmcgaGFuZGxlciBjbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5hY2Nlc3Nncm91cHMuYnVzaW5lc3MuZmxvd3MuU2VnbWVudGF0aW9uTGVnYWxFbnRpdHlTZWFyY2hGbG93ICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U2VnbWVudGF0aW9uKHJlcXVlc3RQYXJhbWV0ZXJzOiBHZXRTZWdtZW50YXRpb25SZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEFycmF5PExlZ2FsRW50aXR5SXRlbT4+O1xuICAgIC8qKlxuICAgICAqIExlZ2FsIEVudGl0aWVzIFNlZ21lbnRhdGlvbiAtICYjeDYwO0dFVCYjeDYwOy5cbiAgICAgKiAjIExlZ2FsIEVudGl0aWVzIFNlZ21lbnRhdGlvbiAtICYjeDYwO0dFVCYjeDYwOyAgICBMaXN0IGN1c3RvbWVycyB0aGF0IHVzZXIgaGFzIGFjY2VzcyB0by4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmFjY2Vzc2dyb3Vwcy5idXNpbmVzcy5mbG93cy5TZWdtZW50YXRpb25MZWdhbEVudGl0eVNlYXJjaEZsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRTZWdtZW50YXRpb24ocmVxdWVzdFBhcmFtZXRlcnM6IEdldFNlZ21lbnRhdGlvblJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxBcnJheTxMZWdhbEVudGl0eUl0ZW0+Pj47XG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXRpZXMgU2VnbWVudGF0aW9uIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXRpZXMgU2VnbWVudGF0aW9uIC0gJiN4NjA7R0VUJiN4NjA7ICAgIExpc3QgY3VzdG9tZXJzIHRoYXQgdXNlciBoYXMgYWNjZXNzIHRvLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLmJ1c2luZXNzLmZsb3dzLlNlZ21lbnRhdGlvbkxlZ2FsRW50aXR5U2VhcmNoRmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFNlZ21lbnRhdGlvbihyZXF1ZXN0UGFyYW1ldGVyczogR2V0U2VnbWVudGF0aW9uUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxBcnJheTxMZWdhbEVudGl0eUl0ZW0+Pj47XG4gICAgLyoqXG4gICAgICogTGVnYWwgRW50aXRpZXMgU2VnbWVudGF0aW9uIC0gJiN4NjA7R0VUJiN4NjA7LlxuICAgICAqICMgTGVnYWwgRW50aXRpZXMgU2VnbWVudGF0aW9uIC0gJiN4NjA7R0VUJiN4NjA7ICAgIExpc3QgY3VzdG9tZXJzIHRoYXQgdXNlciBoYXMgYWNjZXNzIHRvLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMuYWNjZXNzZ3JvdXBzLmJ1c2luZXNzLmZsb3dzLlNlZ21lbnRhdGlvbkxlZ2FsRW50aXR5U2VhcmNoRmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIGdldFNlZ21lbnRhdGlvbihyZXF1ZXN0UGFyYW1ldGVyczogR2V0U2VnbWVudGF0aW9uUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2J1c2luZXNzRnVuY3Rpb24gPSByZXF1ZXN0UGFyYW1ldGVyc1tcImJ1c2luZXNzRnVuY3Rpb25cIl07XG4gICAgICAgIGlmIChfYnVzaW5lc3NGdW5jdGlvbiA9PT0gbnVsbCB8fCBfYnVzaW5lc3NGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlciBidXNpbmVzc0Z1bmN0aW9uIHdhcyBudWxsIG9yIHVuZGVmaW5lZCB3aGVuIGNhbGxpbmcgZ2V0U2VnbWVudGF0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9xdWVyeSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wicXVlcnlcIl07XG4gICAgICAgIGNvbnN0IF9wcml2aWxlZ2UgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInByaXZpbGVnZVwiXTtcbiAgICAgICAgY29uc3QgX2Zyb20gPSByZXF1ZXN0UGFyYW1ldGVyc1tcImZyb21cIl07XG4gICAgICAgIGNvbnN0IF9jdXJzb3IgPSByZXF1ZXN0UGFyYW1ldGVyc1tcImN1cnNvclwiXTtcbiAgICAgICAgY29uc3QgX3NpemUgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInNpemVcIl07XG5cbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1ldGVycyA9IG5ldyBIdHRwUGFyYW1zKHtlbmNvZGVyOiB0aGlzLmVuY29kZXJ9KTtcbiAgICAgICAgaWYgKF9xdWVyeSAhPT0gdW5kZWZpbmVkICYmIF9xdWVyeSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X3F1ZXJ5LCAncXVlcnknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2J1c2luZXNzRnVuY3Rpb24gIT09IHVuZGVmaW5lZCAmJiBfYnVzaW5lc3NGdW5jdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2J1c2luZXNzRnVuY3Rpb24sICdidXNpbmVzc0Z1bmN0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9wcml2aWxlZ2UgIT09IHVuZGVmaW5lZCAmJiBfcHJpdmlsZWdlICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fcHJpdmlsZWdlLCAncHJpdmlsZWdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9mcm9tICE9PSB1bmRlZmluZWQgJiYgX2Zyb20gIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9mcm9tLCAnZnJvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfY3Vyc29yICE9PSB1bmRlZmluZWQgJiYgX2N1cnNvciAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2N1cnNvciwgJ2N1cnNvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc2l6ZSAhPT0gdW5kZWZpbmVkICYmIF9zaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fc2l6ZSwgJ3NpemUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5kZWZhdWx0SGVhZGVycztcblxuICAgICAgICBsZXQgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSBvcHRpb25zICYmIG9wdGlvbnMuaHR0cEhlYWRlckFjY2VwdDtcbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIEFjY2VwdCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBIZWFkZXJBY2NlcHRzOiBzdHJpbmdbXSA9IFtcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQWNjZXB0KGh0dHBIZWFkZXJBY2NlcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldCgnQWNjZXB0JywgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbGV0IHJlc3BvbnNlVHlwZTogJ3RleHQnIHwgJ2pzb24nID0gJ2pzb24nO1xuICAgICAgICBpZihodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgJiYgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkLnN0YXJ0c1dpdGgoJ3RleHQnKSkge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8QXJyYXk8TGVnYWxFbnRpdHlJdGVtPj4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL2xlZ2FsZW50aXRpZXMvc2VnbWVudGF0aW9uYCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlZ21lbnRhdGlvblVybChyZXF1ZXN0UGFyYW1ldGVyczogR2V0U2VnbWVudGF0aW9uUmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9idXNpbmVzc0Z1bmN0aW9uID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJidXNpbmVzc0Z1bmN0aW9uXCJdO1xuICAgICAgICBpZiAoX2J1c2luZXNzRnVuY3Rpb24gPT09IG51bGwgfHwgX2J1c2luZXNzRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbWV0ZXIgYnVzaW5lc3NGdW5jdGlvbiB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nIGdldFNlZ21lbnRhdGlvbi4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBfcXVlcnkgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInF1ZXJ5XCJdO1xuICAgICAgICBjb25zdCBfcHJpdmlsZWdlID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJwcml2aWxlZ2VcIl07XG4gICAgICAgIGNvbnN0IF9mcm9tID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJmcm9tXCJdO1xuICAgICAgICBjb25zdCBfY3Vyc29yID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJjdXJzb3JcIl07XG4gICAgICAgIGNvbnN0IF9zaXplID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJzaXplXCJdO1xuICAgICAgICBsZXQgcXVlcnlQYXJhbWV0ZXJzID0gbmV3IEh0dHBQYXJhbXMoe2VuY29kZXI6IHRoaXMuZW5jb2Rlcn0pO1xuICAgICAgICBpZiAoX3F1ZXJ5ICE9PSB1bmRlZmluZWQgJiYgX3F1ZXJ5ICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fcXVlcnksICdxdWVyeScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfYnVzaW5lc3NGdW5jdGlvbiAhPT0gdW5kZWZpbmVkICYmIF9idXNpbmVzc0Z1bmN0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fYnVzaW5lc3NGdW5jdGlvbiwgJ2J1c2luZXNzRnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX3ByaXZpbGVnZSAhPT0gdW5kZWZpbmVkICYmIF9wcml2aWxlZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9wcml2aWxlZ2UsICdwcml2aWxlZ2UnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2Zyb20gIT09IHVuZGVmaW5lZCAmJiBfZnJvbSAhPT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycyA9IHRoaXMuYWRkVG9IdHRwUGFyYW1zKHF1ZXJ5UGFyYW1ldGVycyxcbiAgICAgICAgICAgIDxhbnk+X2Zyb20sICdmcm9tJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9jdXJzb3IgIT09IHVuZGVmaW5lZCAmJiBfY3Vyc29yICE9PSBudWxsKSB7XG4gICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzID0gdGhpcy5hZGRUb0h0dHBQYXJhbXMocXVlcnlQYXJhbWV0ZXJzLFxuICAgICAgICAgICAgPGFueT5fY3Vyc29yLCAnY3Vyc29yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9zaXplICE9PSB1bmRlZmluZWQgJiYgX3NpemUgIT09IG51bGwpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtZXRlcnMgPSB0aGlzLmFkZFRvSHR0cFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMsXG4gICAgICAgICAgICA8YW55Pl9zaXplLCAnc2l6ZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcXVlcnlQYXJhbWV0ZXJzLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy9zZWdtZW50YXRpb24ke3F1ZXJ5U3RyaW5nID8gYD8ke3F1ZXJ5U3RyaW5nfWAgOiAnJ31gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IC0gJiN4NjA7UE9TVCYjeDYwOy5cbiAgICAgKiAjIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IC0gJiN4NjA7UE9TVCYjeDYwOyAgICBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkNyZWF0ZUxlZ2FsRW50aXR5RmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RMZWdhbEVudGl0aWVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0TGVnYWxFbnRpdGllc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnYm9keScsIHJlcG9ydFByb2dyZXNzPzogYm9vbGVhbiwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8TGVnYWxFbnRpdHlJdGVtSWQ+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IC0gJiN4NjA7UE9TVCYjeDYwOy5cbiAgICAgKiAjIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IC0gJiN4NjA7UE9TVCYjeDYwOyAgICBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkNyZWF0ZUxlZ2FsRW50aXR5RmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RMZWdhbEVudGl0aWVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0TGVnYWxFbnRpdGllc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxMZWdhbEVudGl0eUl0ZW1JZD4+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IC0gJiN4NjA7UE9TVCYjeDYwOy5cbiAgICAgKiAjIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IC0gJiN4NjA7UE9TVCYjeDYwOyAgICBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eS4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkNyZWF0ZUxlZ2FsRW50aXR5RmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RMZWdhbEVudGl0aWVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0TGVnYWxFbnRpdGllc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8TGVnYWxFbnRpdHlJdGVtSWQ+PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eSAtICYjeDYwO1BPU1QmI3g2MDsuXG4gICAgICogIyBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eSAtICYjeDYwO1BPU1QmI3g2MDsgICAgQ3JlYXRlIG5ldyBsZWdhbCBlbnRpdHkuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgUkVTVCBlbmRwb2ludCBoYW5kbGVyOiAgICAgKiBFeHRlbmRpbmcgaGFuZGxlciBjbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5idXNpbmVzcy5mbG93cy5DcmVhdGVMZWdhbEVudGl0eUZsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0TGVnYWxFbnRpdGllcyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdExlZ2FsRW50aXRpZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlOiBhbnkgPSAnYm9keScsIHJlcG9ydFByb2dyZXNzOiBib29sZWFuID0gZmFsc2UsIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBjb25zdCBfbGVnYWxFbnRpdHlDcmVhdGVJdGVtID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJsZWdhbEVudGl0eUNyZWF0ZUl0ZW1cIl07XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8TGVnYWxFbnRpdHlJdGVtSWQ+KGAke3RoaXMuY29uZmlndXJhdGlvbi5iYXNlUGF0aH0vY2xpZW50LWFwaS92Mi9sZWdhbGVudGl0aWVzYCxcbiAgICAgICAgICAgIF9sZWdhbEVudGl0eUNyZWF0ZUl0ZW0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBwb3N0TGVnYWxFbnRpdGllc1VybChyZXF1ZXN0UGFyYW1ldGVyczogUG9zdExlZ2FsRW50aXRpZXNSZXF1ZXN0UGFyYW1zKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgX2xlZ2FsRW50aXR5Q3JlYXRlSXRlbSA9IHJlcXVlc3RQYXJhbWV0ZXJzW1wibGVnYWxFbnRpdHlDcmVhdGVJdGVtXCJdO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL2xlZ2FsZW50aXRpZXNgO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IGFuZCBhc3NpZ24gdG8gc2VydmljZSBhZ3JlZW1lbnQgLSAmI3g2MDtQT1NUJiN4NjA7LlxuICAgICAqICMgQ3JlYXRlIG5ldyBsZWdhbCBlbnRpdHkgYW5kIGFzc2lnbiB0byBzZXJ2aWNlIGFncmVlbWVudCAtICYjeDYwO1BPU1QmI3g2MDsgICAgQ3JlYXRlIG5ldyBsZWdhbCBlbnRpdHkgYW5kIGFzc2lnbiB0aGUgbGVnYWwgZW50aXR5IHRvIGVpdGhlciBhbiBleGlzdGluZyBvciBuZXcgc2VydmljZSBhZ3JlZW1lbnQuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgUkVTVCBlbmRwb2ludCBoYW5kbGVyOiAgICAgKiBFeHRlbmRpbmcgaGFuZGxlciBjbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5idXNpbmVzcy5mbG93cy5DcmVhdGVMZWdhbEVudGl0eUFzUGFydGljaXBhbnRGbG93ICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zdExlZ2FsRW50aXRpZXNBc1BhcnRpY2lwYW50KHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0TGVnYWxFbnRpdGllc0FzUGFydGljaXBhbnRSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ2JvZHknLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPExlZ2FsRW50aXR5QXNQYXJ0aWNpcGFudEl0ZW1JZD47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIG5ldyBsZWdhbCBlbnRpdHkgYW5kIGFzc2lnbiB0byBzZXJ2aWNlIGFncmVlbWVudCAtICYjeDYwO1BPU1QmI3g2MDsuXG4gICAgICogIyBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eSBhbmQgYXNzaWduIHRvIHNlcnZpY2UgYWdyZWVtZW50IC0gJiN4NjA7UE9TVCYjeDYwOyAgICBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eSBhbmQgYXNzaWduIHRoZSBsZWdhbCBlbnRpdHkgdG8gZWl0aGVyIGFuIGV4aXN0aW5nIG9yIG5ldyBzZXJ2aWNlIGFncmVlbWVudC4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkNyZWF0ZUxlZ2FsRW50aXR5QXNQYXJ0aWNpcGFudEZsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0TGVnYWxFbnRpdGllc0FzUGFydGljaXBhbnQocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RMZWdhbEVudGl0aWVzQXNQYXJ0aWNpcGFudFJlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAncmVzcG9uc2UnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxMZWdhbEVudGl0eUFzUGFydGljaXBhbnRJdGVtSWQ+PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eSBhbmQgYXNzaWduIHRvIHNlcnZpY2UgYWdyZWVtZW50IC0gJiN4NjA7UE9TVCYjeDYwOy5cbiAgICAgKiAjIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IGFuZCBhc3NpZ24gdG8gc2VydmljZSBhZ3JlZW1lbnQgLSAmI3g2MDtQT1NUJiN4NjA7ICAgIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IGFuZCBhc3NpZ24gdGhlIGxlZ2FsIGVudGl0eSB0byBlaXRoZXIgYW4gZXhpc3Rpbmcgb3IgbmV3IHNlcnZpY2UgYWdyZWVtZW50LiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuQ3JlYXRlTGVnYWxFbnRpdHlBc1BhcnRpY2lwYW50RmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RMZWdhbEVudGl0aWVzQXNQYXJ0aWNpcGFudChyZXF1ZXN0UGFyYW1ldGVyczogUG9zdExlZ2FsRW50aXRpZXNBc1BhcnRpY2lwYW50UmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdldmVudHMnLCByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW4sIG9wdGlvbnM/OiB7aHR0cEhlYWRlckFjY2VwdD86ICdhcHBsaWNhdGlvbi9qc29uJ30pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxMZWdhbEVudGl0eUFzUGFydGljaXBhbnRJdGVtSWQ+PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgbmV3IGxlZ2FsIGVudGl0eSBhbmQgYXNzaWduIHRvIHNlcnZpY2UgYWdyZWVtZW50IC0gJiN4NjA7UE9TVCYjeDYwOy5cbiAgICAgKiAjIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IGFuZCBhc3NpZ24gdG8gc2VydmljZSBhZ3JlZW1lbnQgLSAmI3g2MDtQT1NUJiN4NjA7ICAgIENyZWF0ZSBuZXcgbGVnYWwgZW50aXR5IGFuZCBhc3NpZ24gdGhlIGxlZ2FsIGVudGl0eSB0byBlaXRoZXIgYW4gZXhpc3Rpbmcgb3IgbmV3IHNlcnZpY2UgYWdyZWVtZW50LiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuQ3JlYXRlTGVnYWxFbnRpdHlBc1BhcnRpY2lwYW50RmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RMZWdhbEVudGl0aWVzQXNQYXJ0aWNpcGFudChyZXF1ZXN0UGFyYW1ldGVyczogUG9zdExlZ2FsRW50aXRpZXNBc1BhcnRpY2lwYW50UmVxdWVzdFBhcmFtcywgb2JzZXJ2ZTogYW55ID0gJ2JvZHknLCByZXBvcnRQcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgY29uc3QgX2xlZ2FsRW50aXR5QXNQYXJ0aWNpcGFudENyZWF0ZUl0ZW0gPSByZXF1ZXN0UGFyYW1ldGVyc1tcImxlZ2FsRW50aXR5QXNQYXJ0aWNpcGFudENyZWF0ZUl0ZW1cIl07XG5cbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzO1xuXG4gICAgICAgIGxldCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5odHRwSGVhZGVyQWNjZXB0O1xuICAgICAgICBpZiAoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQWNjZXB0IGhlYWRlclxuICAgICAgICAgICAgY29uc3QgaHR0cEhlYWRlckFjY2VwdHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJBY2NlcHQoaHR0cEhlYWRlckFjY2VwdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdBY2NlcHQnLCBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgdGhlIENvbnRlbnQtVHlwZSBoZWFkZXJcbiAgICAgICAgY29uc3QgY29uc3VtZXM6IHN0cmluZ1tdID0gW1xuICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGh0dHBDb250ZW50VHlwZVNlbGVjdGVkOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNvbmZpZ3VyYXRpb24uc2VsZWN0SGVhZGVyQ29udGVudFR5cGUoY29uc3VtZXMpO1xuICAgICAgICBpZiAoaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCBodHRwQ29udGVudFR5cGVTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VUeXBlOiAndGV4dCcgfCAnanNvbicgPSAnanNvbic7XG4gICAgICAgIGlmKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAmJiBodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQuc3RhcnRzV2l0aCgndGV4dCcpKSB7XG4gICAgICAgICAgICByZXNwb25zZVR5cGUgPSAndGV4dCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LnBvc3Q8TGVnYWxFbnRpdHlBc1BhcnRpY2lwYW50SXRlbUlkPihgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy9hcy1wYXJ0aWNpcGFudGAsXG4gICAgICAgICAgICBfbGVnYWxFbnRpdHlBc1BhcnRpY2lwYW50Q3JlYXRlSXRlbSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IDxhbnk+cmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdGhpcy5jb25maWd1cmF0aW9uLndpdGhDcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIG9ic2VydmU6IG9ic2VydmUsXG4gICAgICAgICAgICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHJlcG9ydFByb2dyZXNzXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHBvc3RMZWdhbEVudGl0aWVzQXNQYXJ0aWNpcGFudFVybChyZXF1ZXN0UGFyYW1ldGVyczogUG9zdExlZ2FsRW50aXRpZXNBc1BhcnRpY2lwYW50UmVxdWVzdFBhcmFtcyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IF9sZWdhbEVudGl0eUFzUGFydGljaXBhbnRDcmVhdGVJdGVtID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJsZWdhbEVudGl0eUFzUGFydGljaXBhbnRDcmVhdGVJdGVtXCJdO1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL2xlZ2FsZW50aXRpZXMvYXMtcGFydGljaXBhbnRgO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YiBMZWdhbCBFbnRpdGllcyBsaXN0IC0gJiN4NjA7UE9TVCYjeDYwOy5cbiAgICAgKiAjIFN1YiBMZWdhbCBFbnRpdGllcyBsaXN0IC0gJiN4NjA7UE9TVCYjeDYwOyAgICBJbml0aWFsIGNhbGwgdG8gcmV0cmlldmUgdGhlIGxpc3Qgb2Ygc3ViIGxlZ2FsIGVudGl0aWVzIChjdXN0b21lcnMpIGZyb20gdGhlIGJhY2tiYXNlIHBsYXRmb3JtIGJ5IGV4Y2x1ZGluZyBpZHMgcGFzc2VkIGluIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0LiAgSWYgbm8gcGFyZW50RW50aXR5SWQgcGFzc2VkIGFzIHF1ZXJ5IHBhcmFtZXRlciB0aGVuIHdpbGwgcmV0dXJuIHN1YiBsZWdhbCBlbnRpdGllcyBmcm9tIHRoZSBjb250ZXh0IHVzZXIuICAgICMjIyBFeHRlbmRhYmlsaXR5ICAgIEV4dGVuZGFibGUgdXNpbmcgUkVTVCBlbmRwb2ludCBoYW5kbGVyOiAgICAgKiBFeHRlbmRpbmcgaGFuZGxlciBjbGFzczogY29tLmJhY2tiYXNlLnByZXNlbnRhdGlvbi5zZXJ2aWNlcy5sZWdhbGVudGl0eS5idXNpbmVzcy5mbG93cy5HZXRTdWJMZWdhbEVudGl0bGVzRmxvdyAgXG4gICAgICogQHBhcmFtIHJlcXVlc3RQYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIG9ic2VydmUgc2V0IHdoZXRoZXIgb3Igbm90IHRvIHJldHVybiB0aGUgZGF0YSBPYnNlcnZhYmxlIGFzIHRoZSBib2R5LCByZXNwb25zZSBvciBldmVudHMuIGRlZmF1bHRzIHRvIHJldHVybmluZyB0aGUgYm9keS5cbiAgICAgKiBAcGFyYW0gcmVwb3J0UHJvZ3Jlc3MgZmxhZyB0byByZXBvcnQgcmVxdWVzdCBhbmQgcmVzcG9uc2UgcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgcHVibGljIHBvc3RTdWJFbnRpdGllcyhyZXF1ZXN0UGFyYW1ldGVyczogUG9zdFN1YkVudGl0aWVzUmVxdWVzdFBhcmFtcywgb2JzZXJ2ZT86ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxBcnJheTxMZWdhbEVudGl0eUl0ZW1CYXNlPj47XG4gICAgLyoqXG4gICAgICogU3ViIExlZ2FsIEVudGl0aWVzIGxpc3QgLSAmI3g2MDtQT1NUJiN4NjA7LlxuICAgICAqICMgU3ViIExlZ2FsIEVudGl0aWVzIGxpc3QgLSAmI3g2MDtQT1NUJiN4NjA7ICAgIEluaXRpYWwgY2FsbCB0byByZXRyaWV2ZSB0aGUgbGlzdCBvZiBzdWIgbGVnYWwgZW50aXRpZXMgKGN1c3RvbWVycykgZnJvbSB0aGUgYmFja2Jhc2UgcGxhdGZvcm0gYnkgZXhjbHVkaW5nIGlkcyBwYXNzZWQgaW4gdGhlIGJvZHkgb2YgdGhlIHJlcXVlc3QuICBJZiBubyBwYXJlbnRFbnRpdHlJZCBwYXNzZWQgYXMgcXVlcnkgcGFyYW1ldGVyIHRoZW4gd2lsbCByZXR1cm4gc3ViIGxlZ2FsIGVudGl0aWVzIGZyb20gdGhlIGNvbnRleHQgdXNlci4gICAgIyMjIEV4dGVuZGFiaWxpdHkgICAgRXh0ZW5kYWJsZSB1c2luZyBSRVNUIGVuZHBvaW50IGhhbmRsZXI6ICAgICAqIEV4dGVuZGluZyBoYW5kbGVyIGNsYXNzOiBjb20uYmFja2Jhc2UucHJlc2VudGF0aW9uLnNlcnZpY2VzLmxlZ2FsZW50aXR5LmJ1c2luZXNzLmZsb3dzLkdldFN1YkxlZ2FsRW50aXRsZXNGbG93ICBcbiAgICAgKiBAcGFyYW0gcmVxdWVzdFBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZSBzZXQgd2hldGhlciBvciBub3QgdG8gcmV0dXJuIHRoZSBkYXRhIE9ic2VydmFibGUgYXMgdGhlIGJvZHksIHJlc3BvbnNlIG9yIGV2ZW50cy4gZGVmYXVsdHMgdG8gcmV0dXJuaW5nIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSByZXBvcnRQcm9ncmVzcyBmbGFnIHRvIHJlcG9ydCByZXF1ZXN0IGFuZCByZXNwb25zZSBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zdFN1YkVudGl0aWVzKHJlcXVlc3RQYXJhbWV0ZXJzOiBQb3N0U3ViRW50aXRpZXNSZXF1ZXN0UGFyYW1zLCBvYnNlcnZlPzogJ3Jlc3BvbnNlJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwUmVzcG9uc2U8QXJyYXk8TGVnYWxFbnRpdHlJdGVtQmFzZT4+PjtcbiAgICAvKipcbiAgICAgKiBTdWIgTGVnYWwgRW50aXRpZXMgbGlzdCAtICYjeDYwO1BPU1QmI3g2MDsuXG4gICAgICogIyBTdWIgTGVnYWwgRW50aXRpZXMgbGlzdCAtICYjeDYwO1BPU1QmI3g2MDsgICAgSW5pdGlhbCBjYWxsIHRvIHJldHJpZXZlIHRoZSBsaXN0IG9mIHN1YiBsZWdhbCBlbnRpdGllcyAoY3VzdG9tZXJzKSBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybSBieSBleGNsdWRpbmcgaWRzIHBhc3NlZCBpbiB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdC4gIElmIG5vIHBhcmVudEVudGl0eUlkIHBhc3NlZCBhcyBxdWVyeSBwYXJhbWV0ZXIgdGhlbiB3aWxsIHJldHVybiBzdWIgbGVnYWwgZW50aXRpZXMgZnJvbSB0aGUgY29udGV4dCB1c2VyLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuR2V0U3ViTGVnYWxFbnRpdGxlc0Zsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0U3ViRW50aXRpZXMocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RTdWJFbnRpdGllc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU/OiAnZXZlbnRzJywgcmVwb3J0UHJvZ3Jlc3M/OiBib29sZWFuLCBvcHRpb25zPzoge2h0dHBIZWFkZXJBY2NlcHQ/OiAnYXBwbGljYXRpb24vanNvbid9KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8QXJyYXk8TGVnYWxFbnRpdHlJdGVtQmFzZT4+PjtcbiAgICAvKipcbiAgICAgKiBTdWIgTGVnYWwgRW50aXRpZXMgbGlzdCAtICYjeDYwO1BPU1QmI3g2MDsuXG4gICAgICogIyBTdWIgTGVnYWwgRW50aXRpZXMgbGlzdCAtICYjeDYwO1BPU1QmI3g2MDsgICAgSW5pdGlhbCBjYWxsIHRvIHJldHJpZXZlIHRoZSBsaXN0IG9mIHN1YiBsZWdhbCBlbnRpdGllcyAoY3VzdG9tZXJzKSBmcm9tIHRoZSBiYWNrYmFzZSBwbGF0Zm9ybSBieSBleGNsdWRpbmcgaWRzIHBhc3NlZCBpbiB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdC4gIElmIG5vIHBhcmVudEVudGl0eUlkIHBhc3NlZCBhcyBxdWVyeSBwYXJhbWV0ZXIgdGhlbiB3aWxsIHJldHVybiBzdWIgbGVnYWwgZW50aXRpZXMgZnJvbSB0aGUgY29udGV4dCB1c2VyLiAgICAjIyMgRXh0ZW5kYWJpbGl0eSAgICBFeHRlbmRhYmxlIHVzaW5nIFJFU1QgZW5kcG9pbnQgaGFuZGxlcjogICAgICogRXh0ZW5kaW5nIGhhbmRsZXIgY2xhc3M6IGNvbS5iYWNrYmFzZS5wcmVzZW50YXRpb24uc2VydmljZXMubGVnYWxlbnRpdHkuYnVzaW5lc3MuZmxvd3MuR2V0U3ViTGVnYWxFbnRpdGxlc0Zsb3cgIFxuICAgICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBvYnNlcnZlIHNldCB3aGV0aGVyIG9yIG5vdCB0byByZXR1cm4gdGhlIGRhdGEgT2JzZXJ2YWJsZSBhcyB0aGUgYm9keSwgcmVzcG9uc2Ugb3IgZXZlbnRzLiBkZWZhdWx0cyB0byByZXR1cm5pbmcgdGhlIGJvZHkuXG4gICAgICogQHBhcmFtIHJlcG9ydFByb2dyZXNzIGZsYWcgdG8gcmVwb3J0IHJlcXVlc3QgYW5kIHJlc3BvbnNlIHByb2dyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBwb3N0U3ViRW50aXRpZXMocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RTdWJFbnRpdGllc1JlcXVlc3RQYXJhbXMsIG9ic2VydmU6IGFueSA9ICdib2R5JywgcmVwb3J0UHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZSwgb3B0aW9ucz86IHtodHRwSGVhZGVyQWNjZXB0PzogJ2FwcGxpY2F0aW9uL2pzb24nfSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGNvbnN0IF9zZWFyY2hTdWJFbnRpdGllc1BhcmFtZXRlcnMgPSByZXF1ZXN0UGFyYW1ldGVyc1tcInNlYXJjaFN1YkVudGl0aWVzUGFyYW1ldGVyc1wiXTtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IHRoaXMuZGVmYXVsdEhlYWRlcnM7XG5cbiAgICAgICAgbGV0IGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gb3B0aW9ucyAmJiBvcHRpb25zLmh0dHBIZWFkZXJBY2NlcHQ7XG4gICAgICAgIGlmIChodHRwSGVhZGVyQWNjZXB0U2VsZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHRoZSBBY2NlcHQgaGVhZGVyXG4gICAgICAgICAgICBjb25zdCBodHRwSGVhZGVyQWNjZXB0czogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkID0gdGhpcy5jb25maWd1cmF0aW9uLnNlbGVjdEhlYWRlckFjY2VwdChodHRwSGVhZGVyQWNjZXB0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0FjY2VwdCcsIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB0aGUgQ29udGVudC1UeXBlIGhlYWRlclxuICAgICAgICBjb25zdCBjb25zdW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICAgICAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgaHR0cENvbnRlbnRUeXBlU2VsZWN0ZWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHRoaXMuY29uZmlndXJhdGlvbi5zZWxlY3RIZWFkZXJDb250ZW50VHlwZShjb25zdW1lcyk7XG4gICAgICAgIGlmIChodHRwQ29udGVudFR5cGVTZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsIGh0dHBDb250ZW50VHlwZVNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNwb25zZVR5cGU6ICd0ZXh0JyB8ICdqc29uJyA9ICdqc29uJztcbiAgICAgICAgaWYoaHR0cEhlYWRlckFjY2VwdFNlbGVjdGVkICYmIGh0dHBIZWFkZXJBY2NlcHRTZWxlY3RlZC5zdGFydHNXaXRoKCd0ZXh0JykpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9ICd0ZXh0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQucG9zdDxBcnJheTxMZWdhbEVudGl0eUl0ZW1CYXNlPj4oYCR7dGhpcy5jb25maWd1cmF0aW9uLmJhc2VQYXRofS9jbGllbnQtYXBpL3YyL2xlZ2FsZW50aXRpZXMvc3ViLWVudGl0aWVzYCxcbiAgICAgICAgICAgIF9zZWFyY2hTdWJFbnRpdGllc1BhcmFtZXRlcnMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiA8YW55PnJlc3BvbnNlVHlwZSxcbiAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlndXJhdGlvbi53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgICAgICAgICAgICBvYnNlcnZlOiBvYnNlcnZlLFxuICAgICAgICAgICAgICAgIHJlcG9ydFByb2dyZXNzOiByZXBvcnRQcm9ncmVzc1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBwb3N0U3ViRW50aXRpZXNVcmwocmVxdWVzdFBhcmFtZXRlcnM6IFBvc3RTdWJFbnRpdGllc1JlcXVlc3RQYXJhbXMpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBfc2VhcmNoU3ViRW50aXRpZXNQYXJhbWV0ZXJzID0gcmVxdWVzdFBhcmFtZXRlcnNbXCJzZWFyY2hTdWJFbnRpdGllc1BhcmFtZXRlcnNcIl07XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbmZpZ3VyYXRpb24uYmFzZVBhdGh9L2NsaWVudC1hcGkvdjIvbGVnYWxlbnRpdGllcy9zdWItZW50aXRpZXNgO1xuICAgIH1cblxufVxuIl19