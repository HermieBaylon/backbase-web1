import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ACCESS_CONTROL_BASE_PATH } from '../variables';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class ServiceAgreementsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/access-control';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AccessControlConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAssignUsersPermissions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAssignUsersPermissions.');
        }
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getAssignUsersPermissions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/${encodeURIComponent(String(_userId))}/permissions`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAssignUsersPermissionsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAssignUsersPermissions.');
        }
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getAssignUsersPermissions.');
        }
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/${encodeURIComponent(String(_userId))}/permissions`;
    }
    getBusinessfunctions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBusinessfunctions.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/business-functions`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBusinessfunctionsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBusinessfunctions.');
        }
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/business-functions`;
    }
    getContextServiceAgreementParticipants(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/usercontext/participants`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getContextServiceAgreementParticipantsUrl() {
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/usercontext/participants`;
    }
    getServiceAgreementParticipants(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getServiceAgreementParticipants.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/participants`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getServiceAgreementParticipantsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getServiceAgreementParticipants.');
        }
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/participants`;
    }
    getServiceAgreementUsersSA(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getServiceAgreementUsersSA.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getServiceAgreementUsersSAUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getServiceAgreementUsersSA.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users${queryString ? `?${queryString}` : ''}`;
    }
    getServiceAgreements(requestParameters, observe = 'body', reportProgress = false, options) {
        const _creatorId = requestParameters["creatorId"];
        const _userId = requestParameters["userId"];
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_creatorId !== undefined && _creatorId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creatorId, 'creatorId');
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/hierarchy`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getServiceAgreementsUrl(requestParameters) {
        const _creatorId = requestParameters["creatorId"];
        const _userId = requestParameters["userId"];
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_creatorId !== undefined && _creatorId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creatorId, 'creatorId');
        }
        if (_userId !== undefined && _userId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _userId, 'userId');
        }
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/hierarchy${queryString ? `?${queryString}` : ''}`;
    }
    getUnexposedUsersSA(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUnexposedUsersSA.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/unexposed`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUnexposedUsersSAUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUnexposedUsersSA.');
        }
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/unexposed${queryString ? `?${queryString}` : ''}`;
    }
    postUsersAddSA(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postUsersAddSA.');
        }
        const _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/add`, _usersForServiceAgreement, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postUsersAddSAUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postUsersAddSA.');
        }
        const _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/add`;
    }
    postUsersRemoveSA(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postUsersRemoveSA.');
        }
        const _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/remove`, _usersForServiceAgreement, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postUsersRemoveSAUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postUsersRemoveSA.');
        }
        const _usersForServiceAgreement = requestParameters["usersForServiceAgreement"];
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/remove`;
    }
    putAssignUsersPermissions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putAssignUsersPermissions.');
        }
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling putAssignUsersPermissions.');
        }
        const _listOfFunctionGroupsWithDataGroups = requestParameters["listOfFunctionGroupsWithDataGroups"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/${encodeURIComponent(String(_userId))}/permissions`, _listOfFunctionGroupsWithDataGroups, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putAssignUsersPermissionsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putAssignUsersPermissions.');
        }
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling putAssignUsersPermissions.');
        }
        const _listOfFunctionGroupsWithDataGroups = requestParameters["listOfFunctionGroupsWithDataGroups"];
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}/users/${encodeURIComponent(String(_userId))}/permissions`;
    }
    putServiceAgreementSave(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putServiceAgreementSave.');
        }
        const _serviceAgreementSave = requestParameters["serviceAgreementSave"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}`, _serviceAgreementSave, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putServiceAgreementSaveUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putServiceAgreementSave.');
        }
        const _serviceAgreementSave = requestParameters["serviceAgreementSave"];
        return `${this.configuration.basePath}/client-api/v2/accessgroups/service-agreements/${encodeURIComponent(String(_id))}`;
    }
}
ServiceAgreementsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ServiceAgreementsHttpService, deps: [{ token: i1.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: i2.AccessControlConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ServiceAgreementsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ServiceAgreementsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ServiceAgreementsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCESS_CONTROL_BASE_PATH]
                }] }, { type: i2.AccessControlConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,