import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { ACCESS_CONTROL_BASE_PATH } from '../variables';
import { AccessControlConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class UsersHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/access-control';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AccessControlConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getArrangementUserPermissionCheck(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        const _resource = requestParameters["resource"];
        if (_resource === null || _resource === undefined) {
            throw new Error('Required parameter resource was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        const _function = requestParameters["function"];
        if (_function === null || _function === undefined) {
            throw new Error('Required parameter function was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        const _privilege = requestParameters["privilege"];
        if (_privilege === null || _privilege === undefined) {
            throw new Error('Required parameter privilege was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_resource !== undefined && _resource !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
        }
        if (_function !== undefined && _function !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/users/user-privileges/arrangements/${encodeURIComponent(String(_id))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getArrangementUserPermissionCheckUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        const _resource = requestParameters["resource"];
        if (_resource === null || _resource === undefined) {
            throw new Error('Required parameter resource was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        const _function = requestParameters["function"];
        if (_function === null || _function === undefined) {
            throw new Error('Required parameter function was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        const _privilege = requestParameters["privilege"];
        if (_privilege === null || _privilege === undefined) {
            throw new Error('Required parameter privilege was null or undefined when calling getArrangementUserPermissionCheck.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_resource !== undefined && _resource !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
        }
        if (_function !== undefined && _function !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/users/user-privileges/arrangements/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;
    }
    getArrangementUserPrivileges(requestParameters, observe = 'body', reportProgress = false, options) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getArrangementUserPrivileges.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getArrangementUserPrivileges.');
        }
        const _privilegeName = requestParameters["privilegeName"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privilegeName !== undefined && _privilegeName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilegeName, 'privilegeName');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/users/user-privileges/arrangements`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getArrangementUserPrivilegesUrl(requestParameters) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getArrangementUserPrivileges.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getArrangementUserPrivileges.');
        }
        const _privilegeName = requestParameters["privilegeName"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privilegeName !== undefined && _privilegeName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilegeName, 'privilegeName');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/users/user-privileges/arrangements${queryString ? `?${queryString}` : ''}`;
    }
    getCheckUserPermission(requestParameters, observe = 'body', reportProgress = false, options) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getCheckUserPermission.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getCheckUserPermission.');
        }
        const _privileges = requestParameters["privileges"];
        if (_privileges === null || _privileges === undefined) {
            throw new Error('Required parameter privileges was null or undefined when calling getCheckUserPermission.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privileges !== undefined && _privileges !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privileges, 'privileges');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/users/user-permissions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCheckUserPermissionUrl(requestParameters) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getCheckUserPermission.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getCheckUserPermission.');
        }
        const _privileges = requestParameters["privileges"];
        if (_privileges === null || _privileges === undefined) {
            throw new Error('Required parameter privileges was null or undefined when calling getCheckUserPermission.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privileges !== undefined && _privileges !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privileges, 'privileges');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/users/user-permissions${queryString ? `?${queryString}` : ''}`;
    }
    getDataItemPermissionsContext(requestParameters, observe = 'body', reportProgress = false, options) {
        const _functionName = requestParameters["functionName"];
        const _resourceName = requestParameters["resourceName"];
        const _privilege = requestParameters["privilege"];
        const _dataGroupType = requestParameters["dataGroupType"];
        const _dataItemId = requestParameters["dataItemId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_dataGroupType !== undefined && _dataGroupType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
        }
        if (_dataItemId !== undefined && _dataItemId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/users/data-item-permissions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDataItemPermissionsContextUrl(requestParameters) {
        const _functionName = requestParameters["functionName"];
        const _resourceName = requestParameters["resourceName"];
        const _privilege = requestParameters["privilege"];
        const _dataGroupType = requestParameters["dataGroupType"];
        const _dataItemId = requestParameters["dataItemId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_dataGroupType !== undefined && _dataGroupType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
        }
        if (_dataItemId !== undefined && _dataItemId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/users/data-item-permissions${queryString ? `?${queryString}` : ''}`;
    }
    getUserPermissionsSummary(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/users/permissions/summary`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserPermissionsSummaryUrl() {
        return `${this.configuration.basePath}/client-api/v2/accessgroups/users/permissions/summary`;
    }
    getUserPrivileges(requestParameters, observe = 'body', reportProgress = false, options) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getUserPrivileges.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getUserPrivileges.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/users/user-privileges`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserPrivilegesUrl(requestParameters) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getUserPrivileges.');
        }
        const _resourceName = requestParameters["resourceName"];
        if (_resourceName === null || _resourceName === undefined) {
            throw new Error('Required parameter resourceName was null or undefined when calling getUserPrivileges.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_resourceName !== undefined && _resourceName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resourceName, 'resourceName');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/users/user-privileges${queryString ? `?${queryString}` : ''}`;
    }
    getUsersByPermissions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getUsersByPermissions.');
        }
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _privilege = requestParameters["privilege"];
        const _dataGroupType = requestParameters["dataGroupType"];
        const _dataItemId = requestParameters["dataItemId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_dataGroupType !== undefined && _dataGroupType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
        }
        if (_dataItemId !== undefined && _dataItemId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/accessgroups/users/by-permissions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUsersByPermissionsUrl(requestParameters) {
        const _functionName = requestParameters["functionName"];
        if (_functionName === null || _functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling getUsersByPermissions.');
        }
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _privilege = requestParameters["privilege"];
        const _dataGroupType = requestParameters["dataGroupType"];
        const _dataItemId = requestParameters["dataItemId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_functionName !== undefined && _functionName !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _functionName, 'functionName');
        }
        if (_privilege !== undefined && _privilege !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _privilege, 'privilege');
        }
        if (_dataGroupType !== undefined && _dataGroupType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataGroupType, 'dataGroupType');
        }
        if (_dataItemId !== undefined && _dataItemId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dataItemId, 'dataItemId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/accessgroups/users/by-permissions${queryString ? `?${queryString}` : ''}`;
    }
}
UsersHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UsersHttpService, deps: [{ token: i1.HttpClient }, { token: ACCESS_CONTROL_BASE_PATH, optional: true }, { token: i2.AccessControlConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UsersHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UsersHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UsersHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCESS_CONTROL_BASE_PATH]
                }] }, { type: i2.AccessControlConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,