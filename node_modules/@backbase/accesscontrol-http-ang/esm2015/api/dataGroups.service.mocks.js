import { createMocks } from '@backbase/foundation-ang/data-http';
export const DataGroupsHttpServiceDeleteDataGroupByIdMocksProvider = createMocks([{
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
        method: "DELETE",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 200,
                body: {}
            },
        ]
    }]);
export const DataGroupsHttpServiceGetDataGroupByIdMocksProvider = createMocks([{
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686d31e4216b3dd5d66161d536d",
                    "name": "Data group 1",
                    "description": "Simple data group",
                    "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                    "type": "ARRANGEMENTS",
                    "items": ["e6659eea893c4da48f9b7fd425de4677", "8eb58b1d048d4112a2f7591d465c3f14"]
                }
            },
        ]
    }]);
export const DataGroupsHttpServiceGetDataGroupsMocksProvider = createMocks([{
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "138a7683-e9da-4ffa-a257-b78626790cd7",
                        "name": "Salaries",
                        "description": "Contains accounts used for paying salaries",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "type": "ARRANGEMENTS",
                        "items": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"]
                    }, {
                        "id": "109104933dcc42bc89ac5f960a6e1776",
                        "name": "All Accounts",
                        "description": "Contains all accounts",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b15",
                        "type": "ARRANGEMENTS",
                        "items": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "6c1261e8-7b6b-4c14-9bb4-e976d834c730"],
                        "approvalId": "7a3fe8c4-ea29-4251-9883-f9f3d06305e2"
                    }]
            },
        ]
    }]);
export const DataGroupsHttpServicePostDataGroupsMocksProvider = createMocks([{
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "0955e686d31e4216b3dd5d66161d536d"
                }
            },
            {
                status: 201,
                body: {
                    "id": "0955e686d31e4216b3dd5d66161d536d"
                }
            },
        ]
    }]);
export const DataGroupsHttpServicePutDataGroupByIdMocksProvider = createMocks([{
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 200,
                body: {}
            },
        ]
    }]);
export const DataGroupsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
        method: "DELETE",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 200,
                body: {}
            },
        ]
    },
    {
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686d31e4216b3dd5d66161d536d",
                    "name": "Data group 1",
                    "description": "Simple data group",
                    "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                    "type": "ARRANGEMENTS",
                    "items": ["e6659eea893c4da48f9b7fd425de4677", "8eb58b1d048d4112a2f7591d465c3f14"]
                }
            },
        ]
    },
    {
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "138a7683-e9da-4ffa-a257-b78626790cd7",
                        "name": "Salaries",
                        "description": "Contains accounts used for paying salaries",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b14",
                        "type": "ARRANGEMENTS",
                        "items": ["1cdb2224-8926-4b4d-a99f-1c9dfbbb4699"]
                    }, {
                        "id": "109104933dcc42bc89ac5f960a6e1776",
                        "name": "All Accounts",
                        "description": "Contains all accounts",
                        "serviceAgreementId": "0889e686d31e4216b3dd5d66163d2b15",
                        "type": "ARRANGEMENTS",
                        "items": ["3cdb2224-8926-4b4d-a99f-1c9dfbbb4699", "6c1261e8-7b6b-4c14-9bb4-e976d834c730"],
                        "approvalId": "7a3fe8c4-ea29-4251-9883-f9f3d06305e2"
                    }]
            },
        ]
    },
    {
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {
                    "id": "0955e686d31e4216b3dd5d66161d536d"
                }
            },
            {
                status: 201,
                body: {
                    "id": "0955e686d31e4216b3dd5d66161d536d"
                }
            },
        ]
    },
    {
        urlPattern: "/access-control/client-api/v2/accessgroups/data-groups/{id}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 200,
                body: {}
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,