import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ApprovalRecordStatus = {
    INITIATED: 'INITIATED',
    PROCESSING: 'PROCESSING',
    SUCCESS: 'SUCCESS',
    FAILED: 'FAILED'
};

const ApprovalStatus = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED'
};

const LogicalOperator = {
    OR: 'OR'
};

const PolicyAssignmentStatus = {
    ACTIVE: 'ACTIVE',
    PENDING: 'PENDING',
    REJECTED: 'REJECTED',
    PENDINGDELETE: 'PENDING_DELETE',
    DELETED: 'DELETED'
};

const RecordStatus = {
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED'
};

const APPROVAL_BASE_PATH = new InjectionToken('APPROVAL_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class ApprovalConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module ApprovalConfiguration');

class ApprovalApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('ApprovalApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: ApprovalApiModule,
            providers: [{ provide: ApprovalConfiguration, useFactory: configurationFactory }]
        };
    }
}
ApprovalApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalApiModule, deps: [{ token: ApprovalApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: ApprovalConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
ApprovalApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalApiModule });
ApprovalApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: ApprovalApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: ApprovalConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class ApprovalTypeAssignmentsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ApprovalConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteApprovalTypeAssignmentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteApprovalTypeAssignmentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/approval-type-assignments/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteApprovalTypeAssignmentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteApprovalTypeAssignmentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/approval-type-assignments/${encodeURIComponent(String(_id))}`;
    }
    getAssignedApprovalTypeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAssignedApprovalTypeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approval-type-assignments/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAssignedApprovalTypeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAssignedApprovalTypeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/approval-type-assignments/${encodeURIComponent(String(_id))}`;
    }
    postAssignApprovalType(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postApprovalTypeAssignmentRequest = requestParameters["postApprovalTypeAssignmentRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/approval-type-assignments`, _postApprovalTypeAssignmentRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postAssignApprovalTypeUrl(requestParameters) {
        const _postApprovalTypeAssignmentRequest = requestParameters["postApprovalTypeAssignmentRequest"];
        return `${this.configuration.basePath}/client-api/v2/approval-type-assignments`;
    }
    putUpdateApprovalTypeAssignmentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putUpdateApprovalTypeAssignmentById.');
        }
        const _presentationPutApprovalTypeAssignmentRequest = requestParameters["presentationPutApprovalTypeAssignmentRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/approval-type-assignments/${encodeURIComponent(String(_id))}`, _presentationPutApprovalTypeAssignmentRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putUpdateApprovalTypeAssignmentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putUpdateApprovalTypeAssignmentById.');
        }
        const _presentationPutApprovalTypeAssignmentRequest = requestParameters["presentationPutApprovalTypeAssignmentRequest"];
        return `${this.configuration.basePath}/client-api/v2/approval-type-assignments/${encodeURIComponent(String(_id))}`;
    }
}
ApprovalTypeAssignmentsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalTypeAssignmentsHttpService, deps: [{ token: i1.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ApprovalTypeAssignmentsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalTypeAssignmentsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalTypeAssignmentsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APPROVAL_BASE_PATH]
                }] }, { type: ApprovalConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ApprovalTypeAssignmentsHttpServiceDeleteApprovalTypeAssignmentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const ApprovalTypeAssignmentsHttpServiceGetAssignedApprovalTypeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalType": {
                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                        "name": "A",
                        "description": "1st approval",
                        "rank": 100
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ApprovalTypeAssignmentsHttpServicePostAssignApprovalTypeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Job profile is already assigned to an approval type",
                            "key": "approval.api.ApprovalTypeAssignmentConflict",
                            "context": {
                                "conflictingJobProfileId": "0f5cfbb507054d589d149e921838dc80"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const ApprovalTypeAssignmentsHttpServicePutUpdateApprovalTypeAssignmentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied."
                }
            },
            {
                status: 404,
                body: {
                    "message": "Not found",
                    "errors": [{
                            "message": "Assigned approval type not found",
                            "key": "approval.api.AssignedApprovalTypeNotFound",
                            "context": {
                                "jobProfileId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
        ]
    }]);
const ApprovalTypeAssignmentsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalType": {
                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                        "name": "A",
                        "description": "1st approval",
                        "rank": 100
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approval-type-assignments",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Job profile is already assigned to an approval type",
                            "key": "approval.api.ApprovalTypeAssignmentConflict",
                            "context": {
                                "conflictingJobProfileId": "0f5cfbb507054d589d149e921838dc80"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied."
                }
            },
            {
                status: 404,
                body: {
                    "message": "Not found",
                    "errors": [{
                            "message": "Assigned approval type not found",
                            "key": "approval.api.AssignedApprovalTypeNotFound",
                            "context": {
                                "jobProfileId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
        ]
    },
]);

class ApprovalTypesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ApprovalConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAvailableApprovalTypes(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approval-types`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAvailableApprovalTypesUrl() {
        return `${this.configuration.basePath}/client-api/v2/approval-types`;
    }
}
ApprovalTypesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalTypesHttpService, deps: [{ token: i1.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ApprovalTypesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalTypesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalTypesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APPROVAL_BASE_PATH]
                }] }, { type: ApprovalConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ApprovalTypesHttpServiceGetAvailableApprovalTypesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-types",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalTypes": [{
                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                            "name": "A",
                            "description": "1st approval",
                            "rank": 100
                        }, {
                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                            "name": "B",
                            "description": "2nd approval",
                            "rank": 101
                        }, {
                            "id": "7b9459a3-03be-4b80-97da-53005bad9fb7",
                            "name": "C",
                            "description": "3rd approval",
                            "rank": 300
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const ApprovalTypesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approval-types",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalTypes": [{
                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                            "name": "A",
                            "description": "1st approval",
                            "rank": 100
                        }, {
                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                            "name": "B",
                            "description": "2nd approval",
                            "rank": 101
                        }, {
                            "id": "7b9459a3-03be-4b80-97da-53005bad9fb7",
                            "name": "C",
                            "description": "3rd approval",
                            "rank": 300
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);

class ApprovalsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ApprovalConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getApprovalByApprovalId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovalByApprovalId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_approvalId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalByApprovalIdUrl(requestParameters) {
        const _approvalId = requestParameters["approvalId"];
        if (_approvalId === null || _approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling getApprovalByApprovalId.');
        }
        return `${this.configuration.basePath}/client-api/v2/approvals/${encodeURIComponent(String(_approvalId))}`;
    }
    getApprovals(requestParameters, observe = 'body', reportProgress = false, options) {
        const _businessFunctions = requestParameters["businessFunctions"];
        if (_businessFunctions === null || _businessFunctions === undefined) {
            throw new Error('Required parameter businessFunctions was null or undefined when calling getApprovals.');
        }
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_businessFunctions) {
            _businessFunctions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');
            });
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approvals`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovalsUrl(requestParameters) {
        const _businessFunctions = requestParameters["businessFunctions"];
        if (_businessFunctions === null || _businessFunctions === undefined) {
            throw new Error('Required parameter businessFunctions was null or undefined when calling getApprovals.');
        }
        const _cursor = requestParameters["cursor"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_businessFunctions) {
            _businessFunctions.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'businessFunctions');
            });
        }
        if (_cursor !== undefined && _cursor !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/approvals${queryString ? `?${queryString}` : ''}`;
    }
    getProgressStatusByApprovalRecordId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _approvalRecordId = requestParameters["approvalRecordId"];
        if (_approvalRecordId === null || _approvalRecordId === undefined) {
            throw new Error('Required parameter approvalRecordId was null or undefined when calling getProgressStatusByApprovalRecordId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/approval-records/${encodeURIComponent(String(_approvalRecordId))}/progress-status`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getProgressStatusByApprovalRecordIdUrl(requestParameters) {
        const _approvalRecordId = requestParameters["approvalRecordId"];
        if (_approvalRecordId === null || _approvalRecordId === undefined) {
            throw new Error('Required parameter approvalRecordId was null or undefined when calling getProgressStatusByApprovalRecordId.');
        }
        return `${this.configuration.basePath}/client-api/v2/approval-records/${encodeURIComponent(String(_approvalRecordId))}/progress-status`;
    }
}
ApprovalsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, deps: [{ token: i1.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ApprovalsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ApprovalsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APPROVAL_BASE_PATH]
                }] }, { type: ApprovalConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ApprovalsHttpServiceGetApprovalByApprovalIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals/{approvalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalDetails": {
                        "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "userFullName": "Paddy Brian",
                        "externalUserId": "paddy-brian",
                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                        "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                        "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                        "resource": "Payments",
                        "function": "SEPA_CT",
                        "status": "PENDING",
                        "createdAt": "2018-07-22T13:44:02Z",
                        "records": [{
                                "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "externalUserId": "robin-green",
                                "userFullName": "Robin Green",
                                "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                "status": "APPROVED",
                                "createdAt": "2018-01-22T13:44:02Z"
                            }],
                        "approvalTypes": [{
                                "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                "name": "A",
                                "description": "1st approval",
                                "rank": 100
                            }, {
                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                "name": "B",
                                "description": "2nd approval",
                                "rank": 101
                            }],
                        "policy": {
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                            "name": "Default policy",
                            "description": "A default policy that requires two approvals of different types: A + B",
                            "items": [{
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "approvalType": {
                                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    },
                                    "numberOfApprovals": 1
                                }, {
                                    "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "approvalType": {
                                        "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 101
                                    },
                                    "numberOfApprovals": 1
                                }]
                        },
                        "canApprove": false,
                        "canReject": false,
                        "finalApprover": false
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const ApprovalsHttpServiceGetApprovalsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvals": [{
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                            "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                            "resource": "Payments",
                            "function": "SEPA_CT",
                            "status": "PENDING",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "fc546710-cb4d-40a2-9a5c-52f6772a907b",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "finalApprover": true,
                            "createdAt": "2018-01-22T13:44:02Z"
                        }, {
                            "id": "21339aac-9e00-4dd5-9dd9-c9b1727471cf",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "4af6d50e-cde5-401d-95c9-2a78f51672c9",
                            "dataAccessItemId": "4f727cdf-426f-42aa-bbf1-6a4548d1d4a9",
                            "resource": "Payments",
                            "function": "US_DOMESTIC",
                            "status": "PENDING",
                            "records": [],
                            "finalApprover": false,
                            "createdAt": "2018-01-22T13:44:02Z"
                        }],
                    "cursor": "3aa95dcf-fba8-41b8-a97b-bfae602e1a7d"
                }
            },
        ]
    }]);
const ApprovalsHttpServiceGetProgressStatusByApprovalRecordIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-records/{approvalRecordId}/progress-status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "INITIATED",
                    "statusCode": "CONFIRMATION_PENDING"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ApprovalsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approvals/{approvalId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalDetails": {
                        "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                        "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                        "userFullName": "Paddy Brian",
                        "externalUserId": "paddy-brian",
                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                        "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                        "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                        "resource": "Payments",
                        "function": "SEPA_CT",
                        "status": "PENDING",
                        "createdAt": "2018-07-22T13:44:02Z",
                        "records": [{
                                "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "externalUserId": "robin-green",
                                "userFullName": "Robin Green",
                                "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                "status": "APPROVED",
                                "createdAt": "2018-01-22T13:44:02Z"
                            }],
                        "approvalTypes": [{
                                "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                "name": "A",
                                "description": "1st approval",
                                "rank": 100
                            }, {
                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                "name": "B",
                                "description": "2nd approval",
                                "rank": 101
                            }],
                        "policy": {
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                            "name": "Default policy",
                            "description": "A default policy that requires two approvals of different types: A + B",
                            "items": [{
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "approvalType": {
                                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    },
                                    "numberOfApprovals": 1
                                }, {
                                    "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "approvalType": {
                                        "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 101
                                    },
                                    "numberOfApprovals": 1
                                }]
                        },
                        "canApprove": false,
                        "canReject": false,
                        "finalApprover": false
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvals": [{
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                            "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                            "resource": "Payments",
                            "function": "SEPA_CT",
                            "status": "PENDING",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "fc546710-cb4d-40a2-9a5c-52f6772a907b",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "finalApprover": true,
                            "createdAt": "2018-01-22T13:44:02Z"
                        }, {
                            "id": "21339aac-9e00-4dd5-9dd9-c9b1727471cf",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "4af6d50e-cde5-401d-95c9-2a78f51672c9",
                            "dataAccessItemId": "4f727cdf-426f-42aa-bbf1-6a4548d1d4a9",
                            "resource": "Payments",
                            "function": "US_DOMESTIC",
                            "status": "PENDING",
                            "records": [],
                            "finalApprover": false,
                            "createdAt": "2018-01-22T13:44:02Z"
                        }],
                    "cursor": "3aa95dcf-fba8-41b8-a97b-bfae602e1a7d"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approval-records/{approvalRecordId}/progress-status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "status": "INITIATED",
                    "statusCode": "CONFIRMATION_PENDING"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class PoliciesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ApprovalConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getAvailablePolicies(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/policies`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAvailablePoliciesUrl() {
        return `${this.configuration.basePath}/client-api/v2/policies`;
    }
}
PoliciesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PoliciesHttpService, deps: [{ token: i1.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PoliciesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PoliciesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PoliciesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APPROVAL_BASE_PATH]
                }] }, { type: ApprovalConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PoliciesHttpServiceGetAvailablePoliciesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policies",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "policies": [{
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                            "name": "Simple policy",
                            "description": "A basic policy, requires one approval of type 'A' and one of type 'B'.",
                            "items": [{
                                    "approvalType": {
                                        "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    },
                                    "numberOfApprovals": 1
                                }, {
                                    "approvalType": {
                                        "id": "9c666d9e-92d4-4d8f-9366-a4d3ee336c0c",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 200
                                    },
                                    "numberOfApprovals": 1
                                }]
                        }, {
                            "id": "5a2d069a-d4c8-43aa-ba93-9069c65458ec",
                            "name": "Secondary policy",
                            "description": "A secondary policy that requires two approvals of the same type: A + A",
                            "items": [{
                                    "approvalType": {
                                        "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    },
                                    "numberOfApprovals": 2
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PoliciesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/policies",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "policies": [{
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                            "name": "Simple policy",
                            "description": "A basic policy, requires one approval of type 'A' and one of type 'B'.",
                            "items": [{
                                    "approvalType": {
                                        "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    },
                                    "numberOfApprovals": 1
                                }, {
                                    "approvalType": {
                                        "id": "9c666d9e-92d4-4d8f-9366-a4d3ee336c0c",
                                        "name": "B",
                                        "description": "2nd approval",
                                        "rank": 200
                                    },
                                    "numberOfApprovals": 1
                                }]
                        }, {
                            "id": "5a2d069a-d4c8-43aa-ba93-9069c65458ec",
                            "name": "Secondary policy",
                            "description": "A secondary policy that requires two approvals of the same type: A + A",
                            "items": [{
                                    "approvalType": {
                                        "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                        "name": "A",
                                        "description": "1st approval",
                                        "rank": 100
                                    },
                                    "numberOfApprovals": 2
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);

class PolicyAssignmentsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ApprovalConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deletePolicyAssignments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _resource = requestParameters["resource"];
        const _function = requestParameters["function"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_resource !== undefined && _resource !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
        }
        if (_function !== undefined && _function !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/policy-assignments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePolicyAssignmentsUrl(requestParameters) {
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        const _resource = requestParameters["resource"];
        const _function = requestParameters["function"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        if (_resource !== undefined && _resource !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
        }
        if (_function !== undefined && _function !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/policy-assignments${queryString ? `?${queryString}` : ''}`;
    }
    getApprovableBusinessFunctions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/policy-assignments/approvable-business-functions`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovableBusinessFunctionsUrl(requestParameters) {
        const _serviceAgreementId = requestParameters["serviceAgreementId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/policy-assignments/approvable-business-functions${queryString ? `?${queryString}` : ''}`;
    }
    postPolicyAssignments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _presentationPolicyAssignmentCollectionRequest = requestParameters["presentationPolicyAssignmentCollectionRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/policy-assignments`, _presentationPolicyAssignmentCollectionRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postPolicyAssignmentsUrl(requestParameters) {
        const _presentationPolicyAssignmentCollectionRequest = requestParameters["presentationPolicyAssignmentCollectionRequest"];
        return `${this.configuration.basePath}/client-api/v2/policy-assignments`;
    }
    putApprovalsByPolicyAssignmentId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putApprovalsByPolicyAssignmentId.');
        }
        const _presentationPolicyAssignmentApprovalRequest = requestParameters["presentationPolicyAssignmentApprovalRequest"];
        if (_presentationPolicyAssignmentApprovalRequest === null || _presentationPolicyAssignmentApprovalRequest === undefined) {
            throw new Error('Required parameter presentationPolicyAssignmentApprovalRequest was null or undefined when calling putApprovalsByPolicyAssignmentId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/policy-assignments/${encodeURIComponent(String(_id))}/approvals`, _presentationPolicyAssignmentApprovalRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putApprovalsByPolicyAssignmentIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putApprovalsByPolicyAssignmentId.');
        }
        const _presentationPolicyAssignmentApprovalRequest = requestParameters["presentationPolicyAssignmentApprovalRequest"];
        if (_presentationPolicyAssignmentApprovalRequest === null || _presentationPolicyAssignmentApprovalRequest === undefined) {
            throw new Error('Required parameter presentationPolicyAssignmentApprovalRequest was null or undefined when calling putApprovalsByPolicyAssignmentId.');
        }
        return `${this.configuration.basePath}/client-api/v2/policy-assignments/${encodeURIComponent(String(_id))}/approvals`;
    }
    retrievePolicyAssignmentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrievePolicyAssignmentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/policy-assignments/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    retrievePolicyAssignmentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrievePolicyAssignmentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/policy-assignments/${encodeURIComponent(String(_id))}`;
    }
}
PolicyAssignmentsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PolicyAssignmentsHttpService, deps: [{ token: i1.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PolicyAssignmentsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PolicyAssignmentsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PolicyAssignmentsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [APPROVAL_BASE_PATH]
                }] }, { type: ApprovalConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PolicyAssignmentsHttpServiceDeletePolicyAssignmentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 202,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PolicyAssignmentsHttpServiceGetApprovableBusinessFunctionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments/approvable-business-functions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvableBusinessFunctions": [{
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "status": "ACTIVE",
                            "assignedPolicies": [{
                                    "id": "4a12d988-bac2-42b7-980c-f09686e3d7db",
                                    "policyId": "ac007558-970f-45fc-9939-48f78d8622fa",
                                    "name": "No-op policy",
                                    "description": "A policy that does not require any approval"
                                }],
                            "dataGroupSpecificPolicies": [{
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Salary Accounts",
                                            "deleted": false
                                        }, {
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Tax Accounts",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A",
                                            "upperBound": {
                                                "amount": "100.00",
                                                "currencyCode": "EUR"
                                            }
                                        }, {
                                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                            "name": "Default policy",
                                            "description": "A default policy that requires two approvals of different types: A + B",
                                            "upperBound": {
                                                "amount": "200.00",
                                                "currencyCode": "EUR"
                                            }
                                        }]
                                }, {
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130034",
                                            "name": "Marketing US",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A"
                                        }]
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PolicyAssignmentsHttpServicePostPolicyAssignmentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Policy not found",
                    "errors": [{
                            "message": "Policy not found",
                            "key": "approval.api.PolicyNotFound",
                            "context": {
                                "policy id": "7d466fef-de4d-48f2-8e72-c31ca5774b5a"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment already exists",
                    "errors": [{
                            "message": "Policy assignment already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyExists",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment with no bounds already exists",
                    "errors": [{
                            "message": "Policy assignment with no bounds already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyUnbounded",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment has invalid bounds",
                    "errors": [{
                            "message": "Policy assignment has invalid bounds",
                            "key": "approval.api.PolicyAssignmentInvalidBound",
                            "context": {
                                "amount": "-10"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PolicyAssignmentsHttpServicePutApprovalsByPolicyAssignmentIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments/{id}/approvals",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const PolicyAssignmentsHttpServiceRetrievePolicyAssignmentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "serviceAgreementId": "92058e99-88f7-45d9-bb99-s4s4s4s4s4s4",
                    "serviceAgreementName": "Service agreement name",
                    "serviceAgreementDescription": "Service agreement description",
                    "function": "Sepa CT",
                    "resource": "Payments",
                    "status": "ACTIVE",
                    "assignedPolicies": [{
                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                            "name": "Simple policy",
                            "description": "A simple policy that requires one approval of type A",
                            "upperBound": {
                                "amount": "100.00",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                            "name": "Default policy",
                            "description": "A default policy that requires two approvals of different types: A + B",
                            "upperBound": {
                                "amount": "200.00",
                                "currencyCode": "EUR"
                            }
                        }],
                    "dataGroupSpecificPolicies": [{
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Salary Accounts",
                                    "deleted": false
                                }, {
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Tax Accounts",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A",
                                    "upperBound": {
                                        "amount": "100.00",
                                        "currencyCode": "EUR"
                                    }
                                }, {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                    "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "upperBound": {
                                        "amount": "200.00",
                                        "currencyCode": "EUR"
                                    }
                                }]
                        }, {
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130034",
                                    "name": "Marketing US",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const PolicyAssignmentsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/policy-assignments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 202,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments/approvable-business-functions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvableBusinessFunctions": [{
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "status": "ACTIVE",
                            "assignedPolicies": [{
                                    "id": "4a12d988-bac2-42b7-980c-f09686e3d7db",
                                    "policyId": "ac007558-970f-45fc-9939-48f78d8622fa",
                                    "name": "No-op policy",
                                    "description": "A policy that does not require any approval"
                                }],
                            "dataGroupSpecificPolicies": [{
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Salary Accounts",
                                            "deleted": false
                                        }, {
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Tax Accounts",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A",
                                            "upperBound": {
                                                "amount": "100.00",
                                                "currencyCode": "EUR"
                                            }
                                        }, {
                                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                            "name": "Default policy",
                                            "description": "A default policy that requires two approvals of different types: A + B",
                                            "upperBound": {
                                                "amount": "200.00",
                                                "currencyCode": "EUR"
                                            }
                                        }]
                                }, {
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130034",
                                            "name": "Marketing US",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A"
                                        }]
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Policy not found",
                    "errors": [{
                            "message": "Policy not found",
                            "key": "approval.api.PolicyNotFound",
                            "context": {
                                "policy id": "7d466fef-de4d-48f2-8e72-c31ca5774b5a"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment already exists",
                    "errors": [{
                            "message": "Policy assignment already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyExists",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment with no bounds already exists",
                    "errors": [{
                            "message": "Policy assignment with no bounds already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyUnbounded",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment has invalid bounds",
                    "errors": [{
                            "message": "Policy assignment has invalid bounds",
                            "key": "approval.api.PolicyAssignmentInvalidBound",
                            "context": {
                                "amount": "-10"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments/{id}/approvals",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "serviceAgreementId": "92058e99-88f7-45d9-bb99-s4s4s4s4s4s4",
                    "serviceAgreementName": "Service agreement name",
                    "serviceAgreementDescription": "Service agreement description",
                    "function": "Sepa CT",
                    "resource": "Payments",
                    "status": "ACTIVE",
                    "assignedPolicies": [{
                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                            "name": "Simple policy",
                            "description": "A simple policy that requires one approval of type A",
                            "upperBound": {
                                "amount": "100.00",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                            "name": "Default policy",
                            "description": "A default policy that requires two approvals of different types: A + B",
                            "upperBound": {
                                "amount": "200.00",
                                "currencyCode": "EUR"
                            }
                        }],
                    "dataGroupSpecificPolicies": [{
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Salary Accounts",
                                    "deleted": false
                                }, {
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Tax Accounts",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A",
                                    "upperBound": {
                                        "amount": "100.00",
                                        "currencyCode": "EUR"
                                    }
                                }, {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                    "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "upperBound": {
                                        "amount": "200.00",
                                        "currencyCode": "EUR"
                                    }
                                }]
                        }, {
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130034",
                                    "name": "Marketing US",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { APPROVAL_BASE_PATH, ApprovalApiModule, ApprovalConfiguration, ApprovalRecordStatus, ApprovalStatus, ApprovalTypeAssignmentsHttpService, ApprovalTypeAssignmentsHttpServiceDeleteApprovalTypeAssignmentByIdMocksProvider, ApprovalTypeAssignmentsHttpServiceGetAssignedApprovalTypeByIdMocksProvider, ApprovalTypeAssignmentsHttpServiceMocksProvider, ApprovalTypeAssignmentsHttpServicePostAssignApprovalTypeMocksProvider, ApprovalTypeAssignmentsHttpServicePutUpdateApprovalTypeAssignmentByIdMocksProvider, ApprovalTypesHttpService, ApprovalTypesHttpServiceGetAvailableApprovalTypesMocksProvider, ApprovalTypesHttpServiceMocksProvider, ApprovalsHttpService, ApprovalsHttpServiceGetApprovalByApprovalIdMocksProvider, ApprovalsHttpServiceGetApprovalsMocksProvider, ApprovalsHttpServiceGetProgressStatusByApprovalRecordIdMocksProvider, ApprovalsHttpServiceMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, LogicalOperator, PoliciesHttpService, PoliciesHttpServiceGetAvailablePoliciesMocksProvider, PoliciesHttpServiceMocksProvider, PolicyAssignmentStatus, PolicyAssignmentsHttpService, PolicyAssignmentsHttpServiceDeletePolicyAssignmentsMocksProvider, PolicyAssignmentsHttpServiceGetApprovableBusinessFunctionsMocksProvider, PolicyAssignmentsHttpServiceMocksProvider, PolicyAssignmentsHttpServicePostPolicyAssignmentsMocksProvider, PolicyAssignmentsHttpServicePutApprovalsByPolicyAssignmentIdMocksProvider, PolicyAssignmentsHttpServiceRetrievePolicyAssignmentByIdMocksProvider, RecordStatus };
//# sourceMappingURL=backbase-approval-http-ang.js.map
