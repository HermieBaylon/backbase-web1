import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PresentationDeletePolicyAssignmentResponse } from '../model/models';
import { PresentationGetApprovableBusinessFunctionsResponse } from '../model/models';
import { PresentationGetPolicyAssignmentsResponse } from '../model/models';
import { PresentationPolicyAssignmentApprovalRequest } from '../model/models';
import { PresentationPolicyAssignmentCollectionRequest } from '../model/models';
import { ApprovalConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeletePolicyAssignmentsRequestParams {
    ["serviceAgreementId"]?: string;
    ["resource"]?: string;
    ["function"]?: string;
}
export interface GetApprovableBusinessFunctionsRequestParams {
    ["serviceAgreementId"]?: string;
}
export interface PostPolicyAssignmentsRequestParams {
    ["presentationPolicyAssignmentCollectionRequest"]?: PresentationPolicyAssignmentCollectionRequest;
}
export interface PutApprovalsByPolicyAssignmentIdRequestParams {
    ["id"]: string;
    ["presentationPolicyAssignmentApprovalRequest"]: PresentationPolicyAssignmentApprovalRequest;
}
export interface RetrievePolicyAssignmentByIdRequestParams {
    ["id"]: string;
}
export declare class PolicyAssignmentsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ApprovalConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ApprovalConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deletePolicyAssignments(requestParameters: DeletePolicyAssignmentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationDeletePolicyAssignmentResponse>;
    deletePolicyAssignments(requestParameters: DeletePolicyAssignmentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationDeletePolicyAssignmentResponse>>;
    deletePolicyAssignments(requestParameters: DeletePolicyAssignmentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationDeletePolicyAssignmentResponse>>;
    deletePolicyAssignmentsUrl(requestParameters: DeletePolicyAssignmentsRequestParams): string;
    getApprovableBusinessFunctions(requestParameters: GetApprovableBusinessFunctionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationGetApprovableBusinessFunctionsResponse>;
    getApprovableBusinessFunctions(requestParameters: GetApprovableBusinessFunctionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationGetApprovableBusinessFunctionsResponse>>;
    getApprovableBusinessFunctions(requestParameters: GetApprovableBusinessFunctionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationGetApprovableBusinessFunctionsResponse>>;
    getApprovableBusinessFunctionsUrl(requestParameters: GetApprovableBusinessFunctionsRequestParams): string;
    postPolicyAssignments(requestParameters: PostPolicyAssignmentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postPolicyAssignments(requestParameters: PostPolicyAssignmentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postPolicyAssignments(requestParameters: PostPolicyAssignmentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postPolicyAssignmentsUrl(requestParameters: PostPolicyAssignmentsRequestParams): string;
    putApprovalsByPolicyAssignmentId(requestParameters: PutApprovalsByPolicyAssignmentIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putApprovalsByPolicyAssignmentId(requestParameters: PutApprovalsByPolicyAssignmentIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putApprovalsByPolicyAssignmentId(requestParameters: PutApprovalsByPolicyAssignmentIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putApprovalsByPolicyAssignmentIdUrl(requestParameters: PutApprovalsByPolicyAssignmentIdRequestParams): string;
    retrievePolicyAssignmentById(requestParameters: RetrievePolicyAssignmentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PresentationGetPolicyAssignmentsResponse>;
    retrievePolicyAssignmentById(requestParameters: RetrievePolicyAssignmentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PresentationGetPolicyAssignmentsResponse>>;
    retrievePolicyAssignmentById(requestParameters: RetrievePolicyAssignmentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PresentationGetPolicyAssignmentsResponse>>;
    retrievePolicyAssignmentByIdUrl(requestParameters: RetrievePolicyAssignmentByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PolicyAssignmentsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PolicyAssignmentsHttpService>;
}
