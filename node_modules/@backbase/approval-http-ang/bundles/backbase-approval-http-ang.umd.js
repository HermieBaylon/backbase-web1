(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/approval-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["approval-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ApprovalRecordStatus = {
        INITIATED: 'INITIATED',
        PROCESSING: 'PROCESSING',
        SUCCESS: 'SUCCESS',
        FAILED: 'FAILED'
    };

    var ApprovalStatus = {
        PENDING: 'PENDING',
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED'
    };

    var LogicalOperator = {
        OR: 'OR'
    };

    var PolicyAssignmentStatus = {
        ACTIVE: 'ACTIVE',
        PENDING: 'PENDING',
        REJECTED: 'REJECTED',
        PENDINGDELETE: 'PENDING_DELETE',
        DELETED: 'DELETED'
    };

    var RecordStatus = {
        APPROVED: 'APPROVED',
        REJECTED: 'REJECTED'
    };

    var APPROVAL_BASE_PATH = new i0.InjectionToken('APPROVAL_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var ApprovalConfiguration = /** @class */ (function () {
        function ApprovalConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        ApprovalConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        ApprovalConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        ApprovalConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        ApprovalConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return ApprovalConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module ApprovalConfiguration');

    var ApprovalApiModule = /** @class */ (function () {
        function ApprovalApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('ApprovalApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        ApprovalApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: ApprovalApiModule,
                providers: [{ provide: ApprovalConfiguration, useFactory: configurationFactory }]
            };
        };
        return ApprovalApiModule;
    }());
    ApprovalApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalApiModule, deps: [{ token: ApprovalApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: ApprovalConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ApprovalApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalApiModule });
    ApprovalApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: ApprovalApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: ApprovalConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var ApprovalTypeAssignmentsHttpService = /** @class */ (function () {
        function ApprovalTypeAssignmentsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ApprovalConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ApprovalTypeAssignmentsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ApprovalTypeAssignmentsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ApprovalTypeAssignmentsHttpService.prototype.deleteApprovalTypeAssignmentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteApprovalTypeAssignmentById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/approval-type-assignments/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalTypeAssignmentsHttpService.prototype.deleteApprovalTypeAssignmentByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deleteApprovalTypeAssignmentById.');
            }
            return this.configuration.basePath + "/client-api/v2/approval-type-assignments/" + encodeURIComponent(String(_id));
        };
        ApprovalTypeAssignmentsHttpService.prototype.getAssignedApprovalTypeById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAssignedApprovalTypeById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approval-type-assignments/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalTypeAssignmentsHttpService.prototype.getAssignedApprovalTypeByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAssignedApprovalTypeById.');
            }
            return this.configuration.basePath + "/client-api/v2/approval-type-assignments/" + encodeURIComponent(String(_id));
        };
        ApprovalTypeAssignmentsHttpService.prototype.postAssignApprovalType = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _postApprovalTypeAssignmentRequest = requestParameters["postApprovalTypeAssignmentRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/approval-type-assignments", _postApprovalTypeAssignmentRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalTypeAssignmentsHttpService.prototype.postAssignApprovalTypeUrl = function (requestParameters) {
            var _postApprovalTypeAssignmentRequest = requestParameters["postApprovalTypeAssignmentRequest"];
            return this.configuration.basePath + "/client-api/v2/approval-type-assignments";
        };
        ApprovalTypeAssignmentsHttpService.prototype.putUpdateApprovalTypeAssignmentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putUpdateApprovalTypeAssignmentById.');
            }
            var _presentationPutApprovalTypeAssignmentRequest = requestParameters["presentationPutApprovalTypeAssignmentRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/approval-type-assignments/" + encodeURIComponent(String(_id)), _presentationPutApprovalTypeAssignmentRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalTypeAssignmentsHttpService.prototype.putUpdateApprovalTypeAssignmentByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putUpdateApprovalTypeAssignmentById.');
            }
            var _presentationPutApprovalTypeAssignmentRequest = requestParameters["presentationPutApprovalTypeAssignmentRequest"];
            return this.configuration.basePath + "/client-api/v2/approval-type-assignments/" + encodeURIComponent(String(_id));
        };
        return ApprovalTypeAssignmentsHttpService;
    }());
    ApprovalTypeAssignmentsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalTypeAssignmentsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ApprovalTypeAssignmentsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalTypeAssignmentsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalTypeAssignmentsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [APPROVAL_BASE_PATH]
                        }] }, { type: ApprovalConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ApprovalTypeAssignmentsHttpServiceDeleteApprovalTypeAssignmentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approval-type-assignments/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalTypeAssignmentsHttpServiceGetAssignedApprovalTypeByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approval-type-assignments/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalType": {
                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                            "name": "A",
                            "description": "1st approval",
                            "rank": 100
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalTypeAssignmentsHttpServicePostAssignApprovalTypeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approval-type-assignments",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Job profile is already assigned to an approval type",
                                "key": "approval.api.ApprovalTypeAssignmentConflict",
                                "context": {
                                    "conflictingJobProfileId": "0f5cfbb507054d589d149e921838dc80"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Approval type not found",
                                "key": "approval.api.ApprovalTypeNotFound",
                                "context": {
                                    "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalTypeAssignmentsHttpServicePutUpdateApprovalTypeAssignmentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approval-type-assignments/{id}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Approval type not found",
                                "key": "approval.api.ApprovalTypeNotFound",
                                "context": {
                                    "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied."
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Not found",
                        "errors": [{
                                "message": "Assigned approval type not found",
                                "key": "approval.api.AssignedApprovalTypeNotFound",
                                "context": {
                                    "jobProfileId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalTypeAssignmentsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approval-type-assignments/{id}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approval-type-assignments/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalType": {
                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                            "name": "A",
                            "description": "1st approval",
                            "rank": 100
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approval-type-assignments",
            method: "POST",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Job profile is already assigned to an approval type",
                                "key": "approval.api.ApprovalTypeAssignmentConflict",
                                "context": {
                                    "conflictingJobProfileId": "0f5cfbb507054d589d149e921838dc80"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Approval type not found",
                                "key": "approval.api.ApprovalTypeNotFound",
                                "context": {
                                    "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approval-type-assignments/{id}",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad request",
                        "errors": [{
                                "message": "Approval type not found",
                                "key": "approval.api.ApprovalTypeNotFound",
                                "context": {
                                    "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied."
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Not found",
                        "errors": [{
                                "message": "Assigned approval type not found",
                                "key": "approval.api.AssignedApprovalTypeNotFound",
                                "context": {
                                    "jobProfileId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var ApprovalTypesHttpService = /** @class */ (function () {
        function ApprovalTypesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ApprovalConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ApprovalTypesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ApprovalTypesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ApprovalTypesHttpService.prototype.getAvailableApprovalTypes = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approval-types", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalTypesHttpService.prototype.getAvailableApprovalTypesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/approval-types";
        };
        return ApprovalTypesHttpService;
    }());
    ApprovalTypesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalTypesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ApprovalTypesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalTypesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalTypesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [APPROVAL_BASE_PATH]
                        }] }, { type: ApprovalConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ApprovalTypesHttpServiceGetAvailableApprovalTypesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approval-types",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalTypes": [{
                                "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                "name": "A",
                                "description": "1st approval",
                                "rank": 100
                            }, {
                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                "name": "B",
                                "description": "2nd approval",
                                "rank": 101
                            }, {
                                "id": "7b9459a3-03be-4b80-97da-53005bad9fb7",
                                "name": "C",
                                "description": "3rd approval",
                                "rank": 300
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalTypesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approval-types",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalTypes": [{
                                "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                "name": "A",
                                "description": "1st approval",
                                "rank": 100
                            }, {
                                "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                "name": "B",
                                "description": "2nd approval",
                                "rank": 101
                            }, {
                                "id": "7b9459a3-03be-4b80-97da-53005bad9fb7",
                                "name": "C",
                                "description": "3rd approval",
                                "rank": 300
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var ApprovalsHttpService = /** @class */ (function () {
        function ApprovalsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ApprovalConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ApprovalsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ApprovalsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ApprovalsHttpService.prototype.getApprovalByApprovalId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getApprovalByApprovalId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_approvalId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getApprovalByApprovalIdUrl = function (requestParameters) {
            var _approvalId = requestParameters["approvalId"];
            if (_approvalId === null || _approvalId === undefined) {
                throw new Error('Required parameter approvalId was null or undefined when calling getApprovalByApprovalId.');
            }
            return this.configuration.basePath + "/client-api/v2/approvals/" + encodeURIComponent(String(_approvalId));
        };
        ApprovalsHttpService.prototype.getApprovals = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _businessFunctions = requestParameters["businessFunctions"];
            if (_businessFunctions === null || _businessFunctions === undefined) {
                throw new Error('Required parameter businessFunctions was null or undefined when calling getApprovals.');
            }
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_businessFunctions) {
                _businessFunctions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'businessFunctions');
                });
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approvals", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getApprovalsUrl = function (requestParameters) {
            var _this = this;
            var _businessFunctions = requestParameters["businessFunctions"];
            if (_businessFunctions === null || _businessFunctions === undefined) {
                throw new Error('Required parameter businessFunctions was null or undefined when calling getApprovals.');
            }
            var _cursor = requestParameters["cursor"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_businessFunctions) {
                _businessFunctions.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'businessFunctions');
                });
            }
            if (_cursor !== undefined && _cursor !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _cursor, 'cursor');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/approvals" + (queryString ? "?" + queryString : '');
        };
        ApprovalsHttpService.prototype.getProgressStatusByApprovalRecordId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _approvalRecordId = requestParameters["approvalRecordId"];
            if (_approvalRecordId === null || _approvalRecordId === undefined) {
                throw new Error('Required parameter approvalRecordId was null or undefined when calling getProgressStatusByApprovalRecordId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/approval-records/" + encodeURIComponent(String(_approvalRecordId)) + "/progress-status", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ApprovalsHttpService.prototype.getProgressStatusByApprovalRecordIdUrl = function (requestParameters) {
            var _approvalRecordId = requestParameters["approvalRecordId"];
            if (_approvalRecordId === null || _approvalRecordId === undefined) {
                throw new Error('Required parameter approvalRecordId was null or undefined when calling getProgressStatusByApprovalRecordId.');
            }
            return this.configuration.basePath + "/client-api/v2/approval-records/" + encodeURIComponent(String(_approvalRecordId)) + "/progress-status";
        };
        return ApprovalsHttpService;
    }());
    ApprovalsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ApprovalsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ApprovalsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [APPROVAL_BASE_PATH]
                        }] }, { type: ApprovalConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ApprovalsHttpServiceGetApprovalByApprovalIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals/{approvalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalDetails": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "userFullName": "Paddy Brian",
                            "externalUserId": "paddy-brian",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                            "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                            "resource": "Payments",
                            "function": "SEPA_CT",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "externalUserId": "robin-green",
                                    "userFullName": "Robin Green",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "approvalType": {
                                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "approvalType": {
                                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 101
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceGetApprovalsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvals": [{
                                "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                                "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                                "resource": "Payments",
                                "function": "SEPA_CT",
                                "status": "PENDING",
                                "records": [{
                                        "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                        "userId": "fc546710-cb4d-40a2-9a5c-52f6772a907b",
                                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                        "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "status": "APPROVED",
                                        "createdAt": "2018-01-22T13:44:02Z"
                                    }],
                                "finalApprover": true,
                                "createdAt": "2018-01-22T13:44:02Z"
                            }, {
                                "id": "21339aac-9e00-4dd5-9dd9-c9b1727471cf",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "itemId": "4af6d50e-cde5-401d-95c9-2a78f51672c9",
                                "dataAccessItemId": "4f727cdf-426f-42aa-bbf1-6a4548d1d4a9",
                                "resource": "Payments",
                                "function": "US_DOMESTIC",
                                "status": "PENDING",
                                "records": [],
                                "finalApprover": false,
                                "createdAt": "2018-01-22T13:44:02Z"
                            }],
                        "cursor": "3aa95dcf-fba8-41b8-a97b-bfae602e1a7d"
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceGetProgressStatusByApprovalRecordIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/approval-records/{approvalRecordId}/progress-status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "status": "INITIATED",
                        "statusCode": "CONFIRMATION_PENDING"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ApprovalsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/approvals/{approvalId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvalDetails": {
                            "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                            "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                            "userFullName": "Paddy Brian",
                            "externalUserId": "paddy-brian",
                            "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                            "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                            "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                            "resource": "Payments",
                            "function": "SEPA_CT",
                            "status": "PENDING",
                            "createdAt": "2018-07-22T13:44:02Z",
                            "records": [{
                                    "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                    "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                    "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                    "externalUserId": "robin-green",
                                    "userFullName": "Robin Green",
                                    "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "status": "APPROVED",
                                    "createdAt": "2018-01-22T13:44:02Z"
                                }],
                            "approvalTypes": [{
                                    "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                    "name": "A",
                                    "description": "1st approval",
                                    "rank": 100
                                }, {
                                    "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                    "name": "B",
                                    "description": "2nd approval",
                                    "rank": 101
                                }],
                            "policy": {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "items": [{
                                        "approvalTypeId": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                        "approvalType": {
                                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalTypeId": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                        "approvalType": {
                                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 101
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            },
                            "canApprove": false,
                            "canReject": false,
                            "finalApprover": false
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approvals",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvals": [{
                                "id": "b3e4692d-6772-4fb2-9446-b8f4607f49b1",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "itemId": "4cf9a1da-2f48-4f9b-8a97-204c8cd43aa0",
                                "dataAccessItemId": "975809ca-008c-4732-9ae0-a2531d4800bc",
                                "resource": "Payments",
                                "function": "SEPA_CT",
                                "status": "PENDING",
                                "records": [{
                                        "id": "59f23015-9007-4391-a604-1d17e85ab3c0",
                                        "userId": "fc546710-cb4d-40a2-9a5c-52f6772a907b",
                                        "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                        "approvalTypeId": "8b4cf4ba-1b6d-43fe-bb44-3c762e0ba5c1",
                                        "status": "APPROVED",
                                        "createdAt": "2018-01-22T13:44:02Z"
                                    }],
                                "finalApprover": true,
                                "createdAt": "2018-01-22T13:44:02Z"
                            }, {
                                "id": "21339aac-9e00-4dd5-9dd9-c9b1727471cf",
                                "userId": "606d4532-f8d9-4a5f-840a-887baf88fa24",
                                "serviceAgreementId": "c3f62ff9-2894-47d9-a34a-2c8b54e6e9be",
                                "itemId": "4af6d50e-cde5-401d-95c9-2a78f51672c9",
                                "dataAccessItemId": "4f727cdf-426f-42aa-bbf1-6a4548d1d4a9",
                                "resource": "Payments",
                                "function": "US_DOMESTIC",
                                "status": "PENDING",
                                "records": [],
                                "finalApprover": false,
                                "createdAt": "2018-01-22T13:44:02Z"
                            }],
                        "cursor": "3aa95dcf-fba8-41b8-a97b-bfae602e1a7d"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/approval-records/{approvalRecordId}/progress-status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "status": "INITIATED",
                        "statusCode": "CONFIRMATION_PENDING"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var PoliciesHttpService = /** @class */ (function () {
        function PoliciesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ApprovalConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PoliciesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PoliciesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PoliciesHttpService.prototype.getAvailablePolicies = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/policies", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PoliciesHttpService.prototype.getAvailablePoliciesUrl = function () {
            return this.configuration.basePath + "/client-api/v2/policies";
        };
        return PoliciesHttpService;
    }());
    PoliciesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PoliciesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PoliciesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PoliciesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PoliciesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [APPROVAL_BASE_PATH]
                        }] }, { type: ApprovalConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PoliciesHttpServiceGetAvailablePoliciesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/policies",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "policies": [{
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Simple policy",
                                "description": "A basic policy, requires one approval of type 'A' and one of type 'B'.",
                                "items": [{
                                        "approvalType": {
                                            "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalType": {
                                            "id": "9c666d9e-92d4-4d8f-9366-a4d3ee336c0c",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 200
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            }, {
                                "id": "5a2d069a-d4c8-43aa-ba93-9069c65458ec",
                                "name": "Secondary policy",
                                "description": "A secondary policy that requires two approvals of the same type: A + A",
                                "items": [{
                                        "approvalType": {
                                            "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 2
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PoliciesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/policies",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "policies": [{
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6915",
                                "name": "Simple policy",
                                "description": "A basic policy, requires one approval of type 'A' and one of type 'B'.",
                                "items": [{
                                        "approvalType": {
                                            "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 1
                                    }, {
                                        "approvalType": {
                                            "id": "9c666d9e-92d4-4d8f-9366-a4d3ee336c0c",
                                            "name": "B",
                                            "description": "2nd approval",
                                            "rank": 200
                                        },
                                        "numberOfApprovals": 1
                                    }]
                            }, {
                                "id": "5a2d069a-d4c8-43aa-ba93-9069c65458ec",
                                "name": "Secondary policy",
                                "description": "A secondary policy that requires two approvals of the same type: A + A",
                                "items": [{
                                        "approvalType": {
                                            "id": "748fef85-2a7a-47fa-b016-7cae583a0b79",
                                            "name": "A",
                                            "description": "1st approval",
                                            "rank": 100
                                        },
                                        "numberOfApprovals": 2
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var PolicyAssignmentsHttpService = /** @class */ (function () {
        function PolicyAssignmentsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ApprovalConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PolicyAssignmentsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PolicyAssignmentsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PolicyAssignmentsHttpService.prototype.deletePolicyAssignments = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _resource = requestParameters["resource"];
            var _function = requestParameters["function"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_resource !== undefined && _resource !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
            }
            if (_function !== undefined && _function !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v2/policy-assignments", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PolicyAssignmentsHttpService.prototype.deletePolicyAssignmentsUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var _resource = requestParameters["resource"];
            var _function = requestParameters["function"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            if (_resource !== undefined && _resource !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _resource, 'resource');
            }
            if (_function !== undefined && _function !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _function, 'function');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/policy-assignments" + (queryString ? "?" + queryString : '');
        };
        PolicyAssignmentsHttpService.prototype.getApprovableBusinessFunctions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/policy-assignments/approvable-business-functions", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PolicyAssignmentsHttpService.prototype.getApprovableBusinessFunctionsUrl = function (requestParameters) {
            var _serviceAgreementId = requestParameters["serviceAgreementId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_serviceAgreementId !== undefined && _serviceAgreementId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _serviceAgreementId, 'serviceAgreementId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/policy-assignments/approvable-business-functions" + (queryString ? "?" + queryString : '');
        };
        PolicyAssignmentsHttpService.prototype.postPolicyAssignments = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _presentationPolicyAssignmentCollectionRequest = requestParameters["presentationPolicyAssignmentCollectionRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/policy-assignments", _presentationPolicyAssignmentCollectionRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PolicyAssignmentsHttpService.prototype.postPolicyAssignmentsUrl = function (requestParameters) {
            var _presentationPolicyAssignmentCollectionRequest = requestParameters["presentationPolicyAssignmentCollectionRequest"];
            return this.configuration.basePath + "/client-api/v2/policy-assignments";
        };
        PolicyAssignmentsHttpService.prototype.putApprovalsByPolicyAssignmentId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putApprovalsByPolicyAssignmentId.');
            }
            var _presentationPolicyAssignmentApprovalRequest = requestParameters["presentationPolicyAssignmentApprovalRequest"];
            if (_presentationPolicyAssignmentApprovalRequest === null || _presentationPolicyAssignmentApprovalRequest === undefined) {
                throw new Error('Required parameter presentationPolicyAssignmentApprovalRequest was null or undefined when calling putApprovalsByPolicyAssignmentId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v2/policy-assignments/" + encodeURIComponent(String(_id)) + "/approvals", _presentationPolicyAssignmentApprovalRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PolicyAssignmentsHttpService.prototype.putApprovalsByPolicyAssignmentIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling putApprovalsByPolicyAssignmentId.');
            }
            var _presentationPolicyAssignmentApprovalRequest = requestParameters["presentationPolicyAssignmentApprovalRequest"];
            if (_presentationPolicyAssignmentApprovalRequest === null || _presentationPolicyAssignmentApprovalRequest === undefined) {
                throw new Error('Required parameter presentationPolicyAssignmentApprovalRequest was null or undefined when calling putApprovalsByPolicyAssignmentId.');
            }
            return this.configuration.basePath + "/client-api/v2/policy-assignments/" + encodeURIComponent(String(_id)) + "/approvals";
        };
        PolicyAssignmentsHttpService.prototype.retrievePolicyAssignmentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling retrievePolicyAssignmentById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/policy-assignments/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PolicyAssignmentsHttpService.prototype.retrievePolicyAssignmentByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling retrievePolicyAssignmentById.');
            }
            return this.configuration.basePath + "/client-api/v2/policy-assignments/" + encodeURIComponent(String(_id));
        };
        return PolicyAssignmentsHttpService;
    }());
    PolicyAssignmentsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PolicyAssignmentsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: APPROVAL_BASE_PATH, optional: true }, { token: ApprovalConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PolicyAssignmentsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PolicyAssignmentsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PolicyAssignmentsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [APPROVAL_BASE_PATH]
                        }] }, { type: ApprovalConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PolicyAssignmentsHttpServiceDeletePolicyAssignmentsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/policy-assignments",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "numberOfRowsAffected": 2
                    }
                },
                {
                    status: 202,
                    body: {
                        "numberOfRowsAffected": 2
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PolicyAssignmentsHttpServiceGetApprovableBusinessFunctionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/policy-assignments/approvable-business-functions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvableBusinessFunctions": [{
                                "resource": "Payments",
                                "function": "SEPA CT",
                                "status": "ACTIVE",
                                "assignedPolicies": [{
                                        "id": "4a12d988-bac2-42b7-980c-f09686e3d7db",
                                        "policyId": "ac007558-970f-45fc-9939-48f78d8622fa",
                                        "name": "No-op policy",
                                        "description": "A policy that does not require any approval"
                                    }],
                                "dataGroupSpecificPolicies": [{
                                        "dataGroups": [{
                                                "id": "8a49404e7750618601775066a0130006",
                                                "name": "Salary Accounts",
                                                "deleted": false
                                            }, {
                                                "id": "8a49404e7750618601775066a0130006",
                                                "name": "Tax Accounts",
                                                "deleted": false
                                            }],
                                        "assignedPolicies": [{
                                                "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                                "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                                "name": "Simple policy",
                                                "description": "A simple policy that requires one approval of type A",
                                                "upperBound": {
                                                    "amount": "100.00",
                                                    "currencyCode": "EUR"
                                                }
                                            }, {
                                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                                "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                                "name": "Default policy",
                                                "description": "A default policy that requires two approvals of different types: A + B",
                                                "upperBound": {
                                                    "amount": "200.00",
                                                    "currencyCode": "EUR"
                                                }
                                            }]
                                    }, {
                                        "dataGroups": [{
                                                "id": "8a49404e7750618601775066a0130034",
                                                "name": "Marketing US",
                                                "deleted": false
                                            }],
                                        "assignedPolicies": [{
                                                "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                                "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                                "name": "Simple policy",
                                                "description": "A simple policy that requires one approval of type A"
                                            }]
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PolicyAssignmentsHttpServicePostPolicyAssignmentsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/policy-assignments",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy not found",
                        "errors": [{
                                "message": "Policy not found",
                                "key": "approval.api.PolicyNotFound",
                                "context": {
                                    "policy id": "7d466fef-de4d-48f2-8e72-c31ca5774b5a"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy assignment already exists",
                        "errors": [{
                                "message": "Policy assignment already exists",
                                "key": "approval.api.PolicyAssignmentAlreadyExists",
                                "context": {
                                    "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                    "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                    "business function": "SEPA CT"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy assignment with no bounds already exists",
                        "errors": [{
                                "message": "Policy assignment with no bounds already exists",
                                "key": "approval.api.PolicyAssignmentAlreadyUnbounded",
                                "context": {
                                    "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                    "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                    "business function": "SEPA CT"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy assignment has invalid bounds",
                        "errors": [{
                                "message": "Policy assignment has invalid bounds",
                                "key": "approval.api.PolicyAssignmentInvalidBound",
                                "context": {
                                    "amount": "-10"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PolicyAssignmentsHttpServicePutApprovalsByPolicyAssignmentIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/policy-assignments/{id}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PolicyAssignmentsHttpServiceRetrievePolicyAssignmentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/policy-assignments/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "serviceAgreementId": "92058e99-88f7-45d9-bb99-s4s4s4s4s4s4",
                        "serviceAgreementName": "Service agreement name",
                        "serviceAgreementDescription": "Service agreement description",
                        "function": "Sepa CT",
                        "resource": "Payments",
                        "status": "ACTIVE",
                        "assignedPolicies": [{
                                "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                "name": "Simple policy",
                                "description": "A simple policy that requires one approval of type A",
                                "upperBound": {
                                    "amount": "100.00",
                                    "currencyCode": "EUR"
                                }
                            }, {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "upperBound": {
                                    "amount": "200.00",
                                    "currencyCode": "EUR"
                                }
                            }],
                        "dataGroupSpecificPolicies": [{
                                "dataGroups": [{
                                        "id": "8a49404e7750618601775066a0130006",
                                        "name": "Salary Accounts",
                                        "deleted": false
                                    }, {
                                        "id": "8a49404e7750618601775066a0130006",
                                        "name": "Tax Accounts",
                                        "deleted": false
                                    }],
                                "assignedPolicies": [{
                                        "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                        "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                        "name": "Simple policy",
                                        "description": "A simple policy that requires one approval of type A",
                                        "upperBound": {
                                            "amount": "100.00",
                                            "currencyCode": "EUR"
                                        }
                                    }, {
                                        "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                        "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                        "name": "Default policy",
                                        "description": "A default policy that requires two approvals of different types: A + B",
                                        "upperBound": {
                                            "amount": "200.00",
                                            "currencyCode": "EUR"
                                        }
                                    }]
                            }, {
                                "dataGroups": [{
                                        "id": "8a49404e7750618601775066a0130034",
                                        "name": "Marketing US",
                                        "deleted": false
                                    }],
                                "assignedPolicies": [{
                                        "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                        "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                        "name": "Simple policy",
                                        "description": "A simple policy that requires one approval of type A"
                                    }]
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PolicyAssignmentsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/policy-assignments",
            method: "DELETE",
            responses: [
                {
                    status: 200,
                    body: {
                        "numberOfRowsAffected": 2
                    }
                },
                {
                    status: 202,
                    body: {
                        "numberOfRowsAffected": 2
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/policy-assignments/approvable-business-functions",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "approvableBusinessFunctions": [{
                                "resource": "Payments",
                                "function": "SEPA CT",
                                "status": "ACTIVE",
                                "assignedPolicies": [{
                                        "id": "4a12d988-bac2-42b7-980c-f09686e3d7db",
                                        "policyId": "ac007558-970f-45fc-9939-48f78d8622fa",
                                        "name": "No-op policy",
                                        "description": "A policy that does not require any approval"
                                    }],
                                "dataGroupSpecificPolicies": [{
                                        "dataGroups": [{
                                                "id": "8a49404e7750618601775066a0130006",
                                                "name": "Salary Accounts",
                                                "deleted": false
                                            }, {
                                                "id": "8a49404e7750618601775066a0130006",
                                                "name": "Tax Accounts",
                                                "deleted": false
                                            }],
                                        "assignedPolicies": [{
                                                "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                                "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                                "name": "Simple policy",
                                                "description": "A simple policy that requires one approval of type A",
                                                "upperBound": {
                                                    "amount": "100.00",
                                                    "currencyCode": "EUR"
                                                }
                                            }, {
                                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                                "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                                "name": "Default policy",
                                                "description": "A default policy that requires two approvals of different types: A + B",
                                                "upperBound": {
                                                    "amount": "200.00",
                                                    "currencyCode": "EUR"
                                                }
                                            }]
                                    }, {
                                        "dataGroups": [{
                                                "id": "8a49404e7750618601775066a0130034",
                                                "name": "Marketing US",
                                                "deleted": false
                                            }],
                                        "assignedPolicies": [{
                                                "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                                "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                                "name": "Simple policy",
                                                "description": "A simple policy that requires one approval of type A"
                                            }]
                                    }]
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/policy-assignments",
            method: "POST",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy not found",
                        "errors": [{
                                "message": "Policy not found",
                                "key": "approval.api.PolicyNotFound",
                                "context": {
                                    "policy id": "7d466fef-de4d-48f2-8e72-c31ca5774b5a"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy assignment already exists",
                        "errors": [{
                                "message": "Policy assignment already exists",
                                "key": "approval.api.PolicyAssignmentAlreadyExists",
                                "context": {
                                    "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                    "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                    "business function": "SEPA CT"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy assignment with no bounds already exists",
                        "errors": [{
                                "message": "Policy assignment with no bounds already exists",
                                "key": "approval.api.PolicyAssignmentAlreadyUnbounded",
                                "context": {
                                    "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                    "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                    "business function": "SEPA CT"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Policy assignment has invalid bounds",
                        "errors": [{
                                "message": "Policy assignment has invalid bounds",
                                "key": "approval.api.PolicyAssignmentInvalidBound",
                                "context": {
                                    "amount": "-10"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/policy-assignments/{id}/approvals",
            method: "PUT",
            responses: [
                {
                    status: 202,
                    body: {}
                },
                {
                    status: 204,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/policy-assignments/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "serviceAgreementId": "92058e99-88f7-45d9-bb99-s4s4s4s4s4s4",
                        "serviceAgreementName": "Service agreement name",
                        "serviceAgreementDescription": "Service agreement description",
                        "function": "Sepa CT",
                        "resource": "Payments",
                        "status": "ACTIVE",
                        "assignedPolicies": [{
                                "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                "name": "Simple policy",
                                "description": "A simple policy that requires one approval of type A",
                                "upperBound": {
                                    "amount": "100.00",
                                    "currencyCode": "EUR"
                                }
                            }, {
                                "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                "name": "Default policy",
                                "description": "A default policy that requires two approvals of different types: A + B",
                                "upperBound": {
                                    "amount": "200.00",
                                    "currencyCode": "EUR"
                                }
                            }],
                        "dataGroupSpecificPolicies": [{
                                "dataGroups": [{
                                        "id": "8a49404e7750618601775066a0130006",
                                        "name": "Salary Accounts",
                                        "deleted": false
                                    }, {
                                        "id": "8a49404e7750618601775066a0130006",
                                        "name": "Tax Accounts",
                                        "deleted": false
                                    }],
                                "assignedPolicies": [{
                                        "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                        "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                        "name": "Simple policy",
                                        "description": "A simple policy that requires one approval of type A",
                                        "upperBound": {
                                            "amount": "100.00",
                                            "currencyCode": "EUR"
                                        }
                                    }, {
                                        "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                        "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                        "name": "Default policy",
                                        "description": "A default policy that requires two approvals of different types: A + B",
                                        "upperBound": {
                                            "amount": "200.00",
                                            "currencyCode": "EUR"
                                        }
                                    }]
                            }, {
                                "dataGroups": [{
                                        "id": "8a49404e7750618601775066a0130034",
                                        "name": "Marketing US",
                                        "deleted": false
                                    }],
                                "assignedPolicies": [{
                                        "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                        "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                        "name": "Simple policy",
                                        "description": "A simple policy that requires one approval of type A"
                                    }]
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.APPROVAL_BASE_PATH = APPROVAL_BASE_PATH;
    exports.ApprovalApiModule = ApprovalApiModule;
    exports.ApprovalConfiguration = ApprovalConfiguration;
    exports.ApprovalRecordStatus = ApprovalRecordStatus;
    exports.ApprovalStatus = ApprovalStatus;
    exports.ApprovalTypeAssignmentsHttpService = ApprovalTypeAssignmentsHttpService;
    exports.ApprovalTypeAssignmentsHttpServiceDeleteApprovalTypeAssignmentByIdMocksProvider = ApprovalTypeAssignmentsHttpServiceDeleteApprovalTypeAssignmentByIdMocksProvider;
    exports.ApprovalTypeAssignmentsHttpServiceGetAssignedApprovalTypeByIdMocksProvider = ApprovalTypeAssignmentsHttpServiceGetAssignedApprovalTypeByIdMocksProvider;
    exports.ApprovalTypeAssignmentsHttpServiceMocksProvider = ApprovalTypeAssignmentsHttpServiceMocksProvider;
    exports.ApprovalTypeAssignmentsHttpServicePostAssignApprovalTypeMocksProvider = ApprovalTypeAssignmentsHttpServicePostAssignApprovalTypeMocksProvider;
    exports.ApprovalTypeAssignmentsHttpServicePutUpdateApprovalTypeAssignmentByIdMocksProvider = ApprovalTypeAssignmentsHttpServicePutUpdateApprovalTypeAssignmentByIdMocksProvider;
    exports.ApprovalTypesHttpService = ApprovalTypesHttpService;
    exports.ApprovalTypesHttpServiceGetAvailableApprovalTypesMocksProvider = ApprovalTypesHttpServiceGetAvailableApprovalTypesMocksProvider;
    exports.ApprovalTypesHttpServiceMocksProvider = ApprovalTypesHttpServiceMocksProvider;
    exports.ApprovalsHttpService = ApprovalsHttpService;
    exports.ApprovalsHttpServiceGetApprovalByApprovalIdMocksProvider = ApprovalsHttpServiceGetApprovalByApprovalIdMocksProvider;
    exports.ApprovalsHttpServiceGetApprovalsMocksProvider = ApprovalsHttpServiceGetApprovalsMocksProvider;
    exports.ApprovalsHttpServiceGetProgressStatusByApprovalRecordIdMocksProvider = ApprovalsHttpServiceGetProgressStatusByApprovalRecordIdMocksProvider;
    exports.ApprovalsHttpServiceMocksProvider = ApprovalsHttpServiceMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.LogicalOperator = LogicalOperator;
    exports.PoliciesHttpService = PoliciesHttpService;
    exports.PoliciesHttpServiceGetAvailablePoliciesMocksProvider = PoliciesHttpServiceGetAvailablePoliciesMocksProvider;
    exports.PoliciesHttpServiceMocksProvider = PoliciesHttpServiceMocksProvider;
    exports.PolicyAssignmentStatus = PolicyAssignmentStatus;
    exports.PolicyAssignmentsHttpService = PolicyAssignmentsHttpService;
    exports.PolicyAssignmentsHttpServiceDeletePolicyAssignmentsMocksProvider = PolicyAssignmentsHttpServiceDeletePolicyAssignmentsMocksProvider;
    exports.PolicyAssignmentsHttpServiceGetApprovableBusinessFunctionsMocksProvider = PolicyAssignmentsHttpServiceGetApprovableBusinessFunctionsMocksProvider;
    exports.PolicyAssignmentsHttpServiceMocksProvider = PolicyAssignmentsHttpServiceMocksProvider;
    exports.PolicyAssignmentsHttpServicePostPolicyAssignmentsMocksProvider = PolicyAssignmentsHttpServicePostPolicyAssignmentsMocksProvider;
    exports.PolicyAssignmentsHttpServicePutApprovalsByPolicyAssignmentIdMocksProvider = PolicyAssignmentsHttpServicePutApprovalsByPolicyAssignmentIdMocksProvider;
    exports.PolicyAssignmentsHttpServiceRetrievePolicyAssignmentByIdMocksProvider = PolicyAssignmentsHttpServiceRetrievePolicyAssignmentByIdMocksProvider;
    exports.RecordStatus = RecordStatus;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-approval-http-ang.umd.js.map
