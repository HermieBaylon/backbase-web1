import { createMocks } from '@backbase/foundation-ang/data-http';
export const ApprovalTypesHttpServiceGetAvailableApprovalTypesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-types",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalTypes": [{
                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                            "name": "A",
                            "description": "1st approval",
                            "rank": 100
                        }, {
                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                            "name": "B",
                            "description": "2nd approval",
                            "rank": 101
                        }, {
                            "id": "7b9459a3-03be-4b80-97da-53005bad9fb7",
                            "name": "C",
                            "description": "3rd approval",
                            "rank": 300
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const ApprovalTypesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approval-types",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalTypes": [{
                            "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                            "name": "A",
                            "description": "1st approval",
                            "rank": 100
                        }, {
                            "id": "5fa97eb5-277f-4b2c-b05d-f13d630e05c8",
                            "name": "B",
                            "description": "2nd approval",
                            "rank": 101
                        }, {
                            "id": "7b9459a3-03be-4b80-97da-53005bad9fb7",
                            "name": "C",
                            "description": "3rd approval",
                            "rank": 300
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwcm92YWxUeXBlcy5zZXJ2aWNlLm1vY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vYXBpL2FwcHJvdmFsVHlwZXMuc2VydmljZS5tb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFNakUsTUFBTSxDQUFDLE1BQU0sOERBQThELEdBQWEsV0FBVyxDQUFDLENBQUM7UUFDN0YsVUFBVSxFQUFFLCtCQUErQjtRQUMzQyxNQUFNLEVBQUUsS0FBSztRQUNiLFNBQVMsRUFBRTtZQUNIO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDeEIsZUFBZSxFQUFHLENBQUU7NEJBQ2xCLElBQUksRUFBRyxzQ0FBc0M7NEJBQzdDLE1BQU0sRUFBRyxHQUFHOzRCQUNaLGFBQWEsRUFBRyxjQUFjOzRCQUM5QixNQUFNLEVBQUcsR0FBRzt5QkFDYixFQUFFOzRCQUNELElBQUksRUFBRyxzQ0FBc0M7NEJBQzdDLE1BQU0sRUFBRyxHQUFHOzRCQUNaLGFBQWEsRUFBRyxjQUFjOzRCQUM5QixNQUFNLEVBQUcsR0FBRzt5QkFDYixFQUFFOzRCQUNELElBQUksRUFBRyxzQ0FBc0M7NEJBQzdDLE1BQU0sRUFBRyxHQUFHOzRCQUNaLGFBQWEsRUFBRyxjQUFjOzRCQUM5QixNQUFNLEVBQUcsR0FBRzt5QkFDYixDQUFFO2lCQUNKO2FBQ2dCO1lBQ0Q7Z0JBQ0ksTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFO29CQUN4QixTQUFTLEVBQUcsc0NBQXNDO29CQUNsRCxRQUFRLEVBQUcsQ0FBRTs0QkFDWCxTQUFTLEVBQUcsc0VBQXNFOzRCQUNsRixLQUFLLEVBQUcsa0JBQWtCOzRCQUMxQixTQUFTLEVBQUc7Z0NBQ1YsT0FBTyxFQUFHLFdBQVc7NkJBQ3RCO3lCQUNGLENBQUU7aUJBQ0o7YUFDZ0I7U0FDWjtLQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0scUNBQXFDLEdBQWEsV0FBVyxDQUN0RTtJQUNBO1FBQ0ksVUFBVSxFQUFFLCtCQUErQjtRQUMzQyxNQUFNLEVBQUUsS0FBSztRQUNiLFNBQVMsRUFBRTtZQUVQO2dCQUNJLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRTtvQkFDcEIsZUFBZSxFQUFHLENBQUU7NEJBQ2xCLElBQUksRUFBRyxzQ0FBc0M7NEJBQzdDLE1BQU0sRUFBRyxHQUFHOzRCQUNaLGFBQWEsRUFBRyxjQUFjOzRCQUM5QixNQUFNLEVBQUcsR0FBRzt5QkFDYixFQUFFOzRCQUNELElBQUksRUFBRyxzQ0FBc0M7NEJBQzdDLE1BQU0sRUFBRyxHQUFHOzRCQUNaLGFBQWEsRUFBRyxjQUFjOzRCQUM5QixNQUFNLEVBQUcsR0FBRzt5QkFDYixFQUFFOzRCQUNELElBQUksRUFBRyxzQ0FBc0M7NEJBQzdDLE1BQU0sRUFBRyxHQUFHOzRCQUNaLGFBQWEsRUFBRyxjQUFjOzRCQUM5QixNQUFNLEVBQUcsR0FBRzt5QkFDYixDQUFFO2lCQUNKO2FBQ1k7WUFFRDtnQkFDSSxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUU7b0JBQ3BCLFNBQVMsRUFBRyxzQ0FBc0M7b0JBQ2xELFFBQVEsRUFBRyxDQUFFOzRCQUNYLFNBQVMsRUFBRyxzRUFBc0U7NEJBQ2xGLEtBQUssRUFBRyxrQkFBa0I7NEJBQzFCLFNBQVMsRUFBRztnQ0FDVixPQUFPLEVBQUcsV0FBVzs2QkFDdEI7eUJBQ0YsQ0FBRTtpQkFDSjthQUNZO1NBQ1I7S0FDSjtDQUNBLENBQ0EsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZU1vY2tzIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2RhdGEtaHR0cCc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiogTW9ja3MgcHJvdmlkZXIgZm9yIC9jbGllbnQtYXBpL3YyL2FwcHJvdmFsLXR5cGVzIFVSTCBwYXR0ZXJuXG4qL1xuZXhwb3J0IGNvbnN0IEFwcHJvdmFsVHlwZXNIdHRwU2VydmljZUdldEF2YWlsYWJsZUFwcHJvdmFsVHlwZXNNb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFt7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2NsaWVudC1hcGkvdjIvYXBwcm92YWwtdHlwZXNcIixcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICByZXNwb25zZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XG4gIFwiYXBwcm92YWxUeXBlc1wiIDogWyB7XG4gICAgXCJpZFwiIDogXCJlZDQ3YTVkNy0xNjI2LTRlOGMtODE5Yy04YzE4NTFjYjAzNTdcIixcbiAgICBcIm5hbWVcIiA6IFwiQVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIiA6IFwiMXN0IGFwcHJvdmFsXCIsXG4gICAgXCJyYW5rXCIgOiAxMDBcbiAgfSwge1xuICAgIFwiaWRcIiA6IFwiNWZhOTdlYjUtMjc3Zi00YjJjLWIwNWQtZjEzZDYzMGUwNWM4XCIsXG4gICAgXCJuYW1lXCIgOiBcIkJcIixcbiAgICBcImRlc2NyaXB0aW9uXCIgOiBcIjJuZCBhcHByb3ZhbFwiLFxuICAgIFwicmFua1wiIDogMTAxXG4gIH0sIHtcbiAgICBcImlkXCIgOiBcIjdiOTQ1OWEzLTAzYmUtNGI4MC05N2RhLTUzMDA1YmFkOWZiN1wiLFxuICAgIFwibmFtZVwiIDogXCJDXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiIDogXCIzcmQgYXBwcm92YWxcIixcbiAgICBcInJhbmtcIiA6IDMwMFxuICB9IF1cbn1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiA0MDMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIkFjY2VzcyB0byByZXF1ZXN0ZWQgcmVzb3VyY2UgZGVuaWVkLlwiLFxuICBcImVycm9yc1wiIDogWyB7XG4gICAgXCJtZXNzYWdlXCIgOiBcIlJlc291cmNlIGFjY2VzcyBkZW5pZWQgZHVlIHRvIGFuIGluc3VmZmljaWVudCB1c2VyIHF1b3RhIG9mIHtxdW90YX0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5xdW90YVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJxdW90YVwiIDogXCJzb21lUXVvdGFcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICAgICAgfSxcbiAgICBdXG59XSk7XG5cbmV4cG9ydCBjb25zdCBBcHByb3ZhbFR5cGVzSHR0cFNlcnZpY2VNb2Nrc1Byb3ZpZGVyOiBQcm92aWRlciA9IGNyZWF0ZU1vY2tzKFxuICAgIFtcbiAgICB7XG4gICAgICAgIHVybFBhdHRlcm46IFwiL2NsaWVudC1hcGkvdjIvYXBwcm92YWwtdHlwZXNcIixcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICByZXNwb25zZXM6IFtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJhcHByb3ZhbFR5cGVzXCIgOiBbIHtcbiAgICBcImlkXCIgOiBcImVkNDdhNWQ3LTE2MjYtNGU4Yy04MTljLThjMTg1MWNiMDM1N1wiLFxuICAgIFwibmFtZVwiIDogXCJBXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiIDogXCIxc3QgYXBwcm92YWxcIixcbiAgICBcInJhbmtcIiA6IDEwMFxuICB9LCB7XG4gICAgXCJpZFwiIDogXCI1ZmE5N2ViNS0yNzdmLTRiMmMtYjA1ZC1mMTNkNjMwZTA1YzhcIixcbiAgICBcIm5hbWVcIiA6IFwiQlwiLFxuICAgIFwiZGVzY3JpcHRpb25cIiA6IFwiMm5kIGFwcHJvdmFsXCIsXG4gICAgXCJyYW5rXCIgOiAxMDFcbiAgfSwge1xuICAgIFwiaWRcIiA6IFwiN2I5NDU5YTMtMDNiZS00YjgwLTk3ZGEtNTMwMDViYWQ5ZmI3XCIsXG4gICAgXCJuYW1lXCIgOiBcIkNcIixcbiAgICBcImRlc2NyaXB0aW9uXCIgOiBcIjNyZCBhcHByb3ZhbFwiLFxuICAgIFwicmFua1wiIDogMzAwXG4gIH0gXVxufVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXR1czogNDAzLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgXCJtZXNzYWdlXCIgOiBcIkFjY2VzcyB0byByZXF1ZXN0ZWQgcmVzb3VyY2UgZGVuaWVkLlwiLFxuICBcImVycm9yc1wiIDogWyB7XG4gICAgXCJtZXNzYWdlXCIgOiBcIlJlc291cmNlIGFjY2VzcyBkZW5pZWQgZHVlIHRvIGFuIGluc3VmZmljaWVudCB1c2VyIHF1b3RhIG9mIHtxdW90YX0uXCIsXG4gICAgXCJrZXlcIiA6IFwiY29tbW9uLmFwaS5xdW90YVwiLFxuICAgIFwiY29udGV4dFwiIDoge1xuICAgICAgXCJxdW90YVwiIDogXCJzb21lUXVvdGFcIlxuICAgIH1cbiAgfSBdXG59XG4gICAgICAgICAgICB9LFxuICAgIF1cbn0sXG5dXG4pO1xuXG5cbiJdfQ==