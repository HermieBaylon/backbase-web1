import { createMocks } from '@backbase/foundation-ang/data-http';
export const ApprovalTypeAssignmentsHttpServiceDeleteApprovalTypeAssignmentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const ApprovalTypeAssignmentsHttpServiceGetAssignedApprovalTypeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalType": {
                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                        "name": "A",
                        "description": "1st approval",
                        "rank": 100
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const ApprovalTypeAssignmentsHttpServicePostAssignApprovalTypeMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Job profile is already assigned to an approval type",
                            "key": "approval.api.ApprovalTypeAssignmentConflict",
                            "context": {
                                "conflictingJobProfileId": "0f5cfbb507054d589d149e921838dc80"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const ApprovalTypeAssignmentsHttpServicePutUpdateApprovalTypeAssignmentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied."
                }
            },
            {
                status: 404,
                body: {
                    "message": "Not found",
                    "errors": [{
                            "message": "Assigned approval type not found",
                            "key": "approval.api.AssignedApprovalTypeNotFound",
                            "context": {
                                "jobProfileId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
        ]
    }]);
export const ApprovalTypeAssignmentsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvalType": {
                        "id": "ed47a5d7-1626-4e8c-819c-8c1851cb0357",
                        "name": "A",
                        "description": "1st approval",
                        "rank": 100
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approval-type-assignments",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Job profile is already assigned to an approval type",
                            "key": "approval.api.ApprovalTypeAssignmentConflict",
                            "context": {
                                "conflictingJobProfileId": "0f5cfbb507054d589d149e921838dc80"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/approval-type-assignments/{id}",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad request",
                    "errors": [{
                            "message": "Approval type not found",
                            "key": "approval.api.ApprovalTypeNotFound",
                            "context": {
                                "invalidApprovalTypeId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied."
                }
            },
            {
                status: 404,
                body: {
                    "message": "Not found",
                    "errors": [{
                            "message": "Assigned approval type not found",
                            "key": "approval.api.AssignedApprovalTypeNotFound",
                            "context": {
                                "jobProfileId": "7c59fed4-b737-11e8-96f8-529269fb1459"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,