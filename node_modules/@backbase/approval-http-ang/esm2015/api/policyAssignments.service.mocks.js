import { createMocks } from '@backbase/foundation-ang/data-http';
export const PolicyAssignmentsHttpServiceDeletePolicyAssignmentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 202,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const PolicyAssignmentsHttpServiceGetApprovableBusinessFunctionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments/approvable-business-functions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvableBusinessFunctions": [{
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "status": "ACTIVE",
                            "assignedPolicies": [{
                                    "id": "4a12d988-bac2-42b7-980c-f09686e3d7db",
                                    "policyId": "ac007558-970f-45fc-9939-48f78d8622fa",
                                    "name": "No-op policy",
                                    "description": "A policy that does not require any approval"
                                }],
                            "dataGroupSpecificPolicies": [{
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Salary Accounts",
                                            "deleted": false
                                        }, {
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Tax Accounts",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A",
                                            "upperBound": {
                                                "amount": "100.00",
                                                "currencyCode": "EUR"
                                            }
                                        }, {
                                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                            "name": "Default policy",
                                            "description": "A default policy that requires two approvals of different types: A + B",
                                            "upperBound": {
                                                "amount": "200.00",
                                                "currencyCode": "EUR"
                                            }
                                        }]
                                }, {
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130034",
                                            "name": "Marketing US",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A"
                                        }]
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const PolicyAssignmentsHttpServicePostPolicyAssignmentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Policy not found",
                    "errors": [{
                            "message": "Policy not found",
                            "key": "approval.api.PolicyNotFound",
                            "context": {
                                "policy id": "7d466fef-de4d-48f2-8e72-c31ca5774b5a"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment already exists",
                    "errors": [{
                            "message": "Policy assignment already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyExists",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment with no bounds already exists",
                    "errors": [{
                            "message": "Policy assignment with no bounds already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyUnbounded",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment has invalid bounds",
                    "errors": [{
                            "message": "Policy assignment has invalid bounds",
                            "key": "approval.api.PolicyAssignmentInvalidBound",
                            "context": {
                                "amount": "-10"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
export const PolicyAssignmentsHttpServicePutApprovalsByPolicyAssignmentIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments/{id}/approvals",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const PolicyAssignmentsHttpServiceRetrievePolicyAssignmentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/policy-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "serviceAgreementId": "92058e99-88f7-45d9-bb99-s4s4s4s4s4s4",
                    "serviceAgreementName": "Service agreement name",
                    "serviceAgreementDescription": "Service agreement description",
                    "function": "Sepa CT",
                    "resource": "Payments",
                    "status": "ACTIVE",
                    "assignedPolicies": [{
                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                            "name": "Simple policy",
                            "description": "A simple policy that requires one approval of type A",
                            "upperBound": {
                                "amount": "100.00",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                            "name": "Default policy",
                            "description": "A default policy that requires two approvals of different types: A + B",
                            "upperBound": {
                                "amount": "200.00",
                                "currencyCode": "EUR"
                            }
                        }],
                    "dataGroupSpecificPolicies": [{
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Salary Accounts",
                                    "deleted": false
                                }, {
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Tax Accounts",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A",
                                    "upperBound": {
                                        "amount": "100.00",
                                        "currencyCode": "EUR"
                                    }
                                }, {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                    "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "upperBound": {
                                        "amount": "200.00",
                                        "currencyCode": "EUR"
                                    }
                                }]
                        }, {
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130034",
                                    "name": "Marketing US",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const PolicyAssignmentsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/policy-assignments",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 202,
                body: {
                    "numberOfRowsAffected": 2
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments/approvable-business-functions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "approvableBusinessFunctions": [{
                            "resource": "Payments",
                            "function": "SEPA CT",
                            "status": "ACTIVE",
                            "assignedPolicies": [{
                                    "id": "4a12d988-bac2-42b7-980c-f09686e3d7db",
                                    "policyId": "ac007558-970f-45fc-9939-48f78d8622fa",
                                    "name": "No-op policy",
                                    "description": "A policy that does not require any approval"
                                }],
                            "dataGroupSpecificPolicies": [{
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Salary Accounts",
                                            "deleted": false
                                        }, {
                                            "id": "8a49404e7750618601775066a0130006",
                                            "name": "Tax Accounts",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A",
                                            "upperBound": {
                                                "amount": "100.00",
                                                "currencyCode": "EUR"
                                            }
                                        }, {
                                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                            "name": "Default policy",
                                            "description": "A default policy that requires two approvals of different types: A + B",
                                            "upperBound": {
                                                "amount": "200.00",
                                                "currencyCode": "EUR"
                                            }
                                        }]
                                }, {
                                    "dataGroups": [{
                                            "id": "8a49404e7750618601775066a0130034",
                                            "name": "Marketing US",
                                            "deleted": false
                                        }],
                                    "assignedPolicies": [{
                                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                            "name": "Simple policy",
                                            "description": "A simple policy that requires one approval of type A"
                                        }]
                                }]
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments",
        method: "POST",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Policy not found",
                    "errors": [{
                            "message": "Policy not found",
                            "key": "approval.api.PolicyNotFound",
                            "context": {
                                "policy id": "7d466fef-de4d-48f2-8e72-c31ca5774b5a"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment already exists",
                    "errors": [{
                            "message": "Policy assignment already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyExists",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment with no bounds already exists",
                    "errors": [{
                            "message": "Policy assignment with no bounds already exists",
                            "key": "approval.api.PolicyAssignmentAlreadyUnbounded",
                            "context": {
                                "policy id": "b212069e-b6e3-4b40-add3-80f1b12d67a6",
                                "service agreement id": "8a48e61a69918d12016994f9d9160001",
                                "business function": "SEPA CT"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Policy assignment has invalid bounds",
                    "errors": [{
                            "message": "Policy assignment has invalid bounds",
                            "key": "approval.api.PolicyAssignmentInvalidBound",
                            "context": {
                                "amount": "-10"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments/{id}/approvals",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {}
            },
            {
                status: 204,
                body: {}
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/policy-assignments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "serviceAgreementId": "92058e99-88f7-45d9-bb99-s4s4s4s4s4s4",
                    "serviceAgreementName": "Service agreement name",
                    "serviceAgreementDescription": "Service agreement description",
                    "function": "Sepa CT",
                    "resource": "Payments",
                    "status": "ACTIVE",
                    "assignedPolicies": [{
                            "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                            "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                            "name": "Simple policy",
                            "description": "A simple policy that requires one approval of type A",
                            "upperBound": {
                                "amount": "100.00",
                                "currencyCode": "EUR"
                            }
                        }, {
                            "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                            "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                            "name": "Default policy",
                            "description": "A default policy that requires two approvals of different types: A + B",
                            "upperBound": {
                                "amount": "200.00",
                                "currencyCode": "EUR"
                            }
                        }],
                    "dataGroupSpecificPolicies": [{
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Salary Accounts",
                                    "deleted": false
                                }, {
                                    "id": "8a49404e7750618601775066a0130006",
                                    "name": "Tax Accounts",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A",
                                    "upperBound": {
                                        "amount": "100.00",
                                        "currencyCode": "EUR"
                                    }
                                }, {
                                    "id": "6546c424-d3b1-4848-bbda-31cd44ab6916",
                                    "policyId": "75419243-3d83-40ce-98b2-d2313bf3cf13",
                                    "name": "Default policy",
                                    "description": "A default policy that requires two approvals of different types: A + B",
                                    "upperBound": {
                                        "amount": "200.00",
                                        "currencyCode": "EUR"
                                    }
                                }]
                        }, {
                            "dataGroups": [{
                                    "id": "8a49404e7750618601775066a0130034",
                                    "name": "Marketing US",
                                    "deleted": false
                                }],
                            "assignedPolicies": [{
                                    "id": "03de4365-43c1-4e1d-aa6f-dc687dcdffec",
                                    "policyId": "38e4c392-de63-4b1a-b15b-9ea6b56b9e1b",
                                    "name": "Simple policy",
                                    "description": "A simple policy that requires one approval of type A"
                                }]
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,