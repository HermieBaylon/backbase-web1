(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/payment-order-a2a-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payment-order-a2a-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var AccountStatus = {
        Active: 'Active',
        InProcess: 'InProcess',
        PendingActivation: 'PendingActivation',
        FailedVerification: 'FailedVerification',
        RejectedByExternalBank: 'RejectedByExternalBank',
        DisabledForExcessiveReturns: 'DisabledForExcessiveReturns',
        DisabledForFraud: 'DisabledForFraud'
    };

    var AccountType = {
        Checking: 'Checking',
        Savings: 'Savings'
    };

    var PAYMENT_ORDER_A2A_BASE_PATH = new i0.InjectionToken('PAYMENT_ORDER_A2A_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PaymentOrderA2aConfiguration = /** @class */ (function () {
        function PaymentOrderA2aConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PaymentOrderA2aConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PaymentOrderA2aConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PaymentOrderA2aConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PaymentOrderA2aConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PaymentOrderA2aConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PaymentOrderA2aConfiguration');

    var PaymentOrderA2aApiModule = /** @class */ (function () {
        function PaymentOrderA2aApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PaymentOrderA2aApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PaymentOrderA2aApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PaymentOrderA2aApiModule,
                providers: [{ provide: PaymentOrderA2aConfiguration, useFactory: configurationFactory }]
            };
        };
        return PaymentOrderA2aApiModule;
    }());
    PaymentOrderA2aApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderA2aApiModule, deps: [{ token: PaymentOrderA2aApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PaymentOrderA2aConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentOrderA2aApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderA2aApiModule });
    PaymentOrderA2aApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderA2aApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderA2aApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PaymentOrderA2aApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PaymentOrderA2aConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var A2aClientHttpService = /** @class */ (function () {
        function A2aClientHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentOrderA2aConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        A2aClientHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        A2aClientHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        A2aClientHttpService.prototype._delete = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        A2aClientHttpService.prototype._deleteUrl = function (requestParameters) {
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');
            }
            return this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId));
        };
        A2aClientHttpService.prototype.create = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalAccountPostRequest = requestParameters["externalAccountPostRequest"];
            if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {
                throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/external-accounts", _externalAccountPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        A2aClientHttpService.prototype.createUrl = function (requestParameters) {
            var _externalAccountPostRequest = requestParameters["externalAccountPostRequest"];
            if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {
                throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');
            }
            return this.configuration.basePath + "/client-api/v1/external-accounts";
        };
        A2aClientHttpService.prototype.getAll = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/external-accounts", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        A2aClientHttpService.prototype.getAllUrl = function () {
            return this.configuration.basePath + "/client-api/v1/external-accounts";
        };
        A2aClientHttpService.prototype.getById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        A2aClientHttpService.prototype.getByIdUrl = function (requestParameters) {
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');
            }
            return this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId));
        };
        A2aClientHttpService.prototype.update = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling update.');
            }
            var _externalAccountPutRequest = requestParameters["externalAccountPutRequest"];
            if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {
                throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId)), _externalAccountPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        A2aClientHttpService.prototype.updateUrl = function (requestParameters) {
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling update.');
            }
            var _externalAccountPutRequest = requestParameters["externalAccountPutRequest"];
            if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {
                throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');
            }
            return this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId));
        };
        A2aClientHttpService.prototype.verify = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');
            }
            var _externalAccountVerificationPutRequest = requestParameters["externalAccountVerificationPutRequest"];
            if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {
                throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId)) + "/account-verification", _externalAccountVerificationPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        A2aClientHttpService.prototype.verifyUrl = function (requestParameters) {
            var _externalAccountId = requestParameters["externalAccountId"];
            if (_externalAccountId === null || _externalAccountId === undefined) {
                throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');
            }
            var _externalAccountVerificationPutRequest = requestParameters["externalAccountVerificationPutRequest"];
            if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {
                throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');
            }
            return this.configuration.basePath + "/client-api/v1/external-accounts/" + encodeURIComponent(String(_externalAccountId)) + "/account-verification";
        };
        return A2aClientHttpService;
    }());
    A2aClientHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: A2aClientHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_ORDER_A2A_BASE_PATH, optional: true }, { token: PaymentOrderA2aConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    A2aClientHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: A2aClientHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: A2aClientHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_ORDER_A2A_BASE_PATH]
                        }] }, { type: PaymentOrderA2aConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var A2aClientHttpService_deleteMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var A2aClientHttpServiceCreateMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/external-accounts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var A2aClientHttpServiceGetAllMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/external-accounts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "accounts": [{
                                "externalAccountId": "31361591",
                                "routingNumber": "091000021",
                                "accountNumber": "12351",
                                "accountType": "Checking",
                                "accountNickName": "NickName1",
                                "bankName": "US BANK NA",
                                "maskedAccountNumber": "2351",
                                "status": "Active"
                            }, {
                                "externalAccountId": "31361592",
                                "routingNumber": "091000022",
                                "accountNumber": "12352",
                                "accountType": "Savings",
                                "accountNickName": "NickName2",
                                "bankName": "US BANK NA",
                                "maskedAccountNumber": "2352",
                                "status": "PendingActivation"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var A2aClientHttpServiceGetByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 200,
                    body: {
                        "routingNumber": "routingNumber",
                        "externalAccountId": "externalAccountId",
                        "accountNickName": "accountNickName",
                        "bankName": "bankName",
                        "accountNumber": "accountNumber",
                        "maskedAccountNumber": "maskedAccountNumber"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var A2aClientHttpServiceUpdateMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 200,
                    body: {
                        "routingNumber": "routingNumber",
                        "externalAccountId": "externalAccountId",
                        "accountNickName": "accountNickName",
                        "bankName": "bankName",
                        "accountNumber": "accountNumber",
                        "maskedAccountNumber": "maskedAccountNumber"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var A2aClientHttpServiceVerifyMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}/account-verification",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 200,
                    body: {
                        "routingNumber": "routingNumber",
                        "externalAccountId": "externalAccountId",
                        "accountNickName": "accountNickName",
                        "bankName": "bankName",
                        "accountNumber": "accountNumber",
                        "maskedAccountNumber": "maskedAccountNumber"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var A2aClientHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/external-accounts",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/external-accounts",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "accounts": [{
                                "externalAccountId": "31361591",
                                "routingNumber": "091000021",
                                "accountNumber": "12351",
                                "accountType": "Checking",
                                "accountNickName": "NickName1",
                                "bankName": "US BANK NA",
                                "maskedAccountNumber": "2351",
                                "status": "Active"
                            }, {
                                "externalAccountId": "31361592",
                                "routingNumber": "091000022",
                                "accountNumber": "12352",
                                "accountType": "Savings",
                                "accountNickName": "NickName2",
                                "bankName": "US BANK NA",
                                "maskedAccountNumber": "2352",
                                "status": "PendingActivation"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 200,
                    body: {
                        "routingNumber": "routingNumber",
                        "externalAccountId": "externalAccountId",
                        "accountNickName": "accountNickName",
                        "bankName": "bankName",
                        "accountNumber": "accountNumber",
                        "maskedAccountNumber": "maskedAccountNumber"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 200,
                    body: {
                        "routingNumber": "routingNumber",
                        "externalAccountId": "externalAccountId",
                        "accountNickName": "accountNickName",
                        "bankName": "bankName",
                        "accountNumber": "accountNumber",
                        "maskedAccountNumber": "maskedAccountNumber"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/external-accounts/{externalAccountId}/account-verification",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "externalAccountId": "31361592",
                        "routingNumber": "091000022",
                        "accountNumber": "12351",
                        "accountType": "Checking",
                        "accountNickName": "NickName",
                        "bankName": "US BANK NA",
                        "accountMask": "2351",
                        "status": "Active"
                    }
                },
                {
                    status: 200,
                    body: {
                        "routingNumber": "routingNumber",
                        "externalAccountId": "externalAccountId",
                        "accountNickName": "accountNickName",
                        "bankName": "bankName",
                        "accountNumber": "accountNumber",
                        "maskedAccountNumber": "maskedAccountNumber"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.A2aClientHttpService = A2aClientHttpService;
    exports.A2aClientHttpServiceCreateMocksProvider = A2aClientHttpServiceCreateMocksProvider;
    exports.A2aClientHttpServiceGetAllMocksProvider = A2aClientHttpServiceGetAllMocksProvider;
    exports.A2aClientHttpServiceGetByIdMocksProvider = A2aClientHttpServiceGetByIdMocksProvider;
    exports.A2aClientHttpServiceMocksProvider = A2aClientHttpServiceMocksProvider;
    exports.A2aClientHttpServiceUpdateMocksProvider = A2aClientHttpServiceUpdateMocksProvider;
    exports.A2aClientHttpServiceVerifyMocksProvider = A2aClientHttpServiceVerifyMocksProvider;
    exports.A2aClientHttpService_deleteMocksProvider = A2aClientHttpService_deleteMocksProvider;
    exports.AccountStatus = AccountStatus;
    exports.AccountType = AccountType;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.PAYMENT_ORDER_A2A_BASE_PATH = PAYMENT_ORDER_A2A_BASE_PATH;
    exports.PaymentOrderA2aApiModule = PaymentOrderA2aApiModule;
    exports.PaymentOrderA2aConfiguration = PaymentOrderA2aConfiguration;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payment-order-a2a-http-ang.umd.js.map
