import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const AccountStatus = {
    Active: 'Active',
    InProcess: 'InProcess',
    PendingActivation: 'PendingActivation',
    FailedVerification: 'FailedVerification',
    RejectedByExternalBank: 'RejectedByExternalBank',
    DisabledForExcessiveReturns: 'DisabledForExcessiveReturns',
    DisabledForFraud: 'DisabledForFraud'
};

const AccountType = {
    Checking: 'Checking',
    Savings: 'Savings'
};

const PAYMENT_ORDER_A2A_BASE_PATH = new InjectionToken('PAYMENT_ORDER_A2A_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PaymentOrderA2aConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentOrderA2aConfiguration');

class PaymentOrderA2aApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PaymentOrderA2aApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PaymentOrderA2aApiModule,
            providers: [{ provide: PaymentOrderA2aConfiguration, useFactory: configurationFactory }]
        };
    }
}
PaymentOrderA2aApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderA2aApiModule, deps: [{ token: PaymentOrderA2aApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentOrderA2aConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PaymentOrderA2aApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderA2aApiModule });
PaymentOrderA2aApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderA2aApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderA2aApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PaymentOrderA2aApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PaymentOrderA2aConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class A2aClientHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentOrderA2aConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    _delete(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    _deleteUrl(requestParameters) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling _delete.');
        }
        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;
    }
    create(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalAccountPostRequest = requestParameters["externalAccountPostRequest"];
        if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {
            throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/external-accounts`, _externalAccountPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createUrl(requestParameters) {
        const _externalAccountPostRequest = requestParameters["externalAccountPostRequest"];
        if (_externalAccountPostRequest === null || _externalAccountPostRequest === undefined) {
            throw new Error('Required parameter externalAccountPostRequest was null or undefined when calling create.');
        }
        return `${this.configuration.basePath}/client-api/v1/external-accounts`;
    }
    getAll(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/external-accounts`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAllUrl() {
        return `${this.configuration.basePath}/client-api/v1/external-accounts`;
    }
    getById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getByIdUrl(requestParameters) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling getById.');
        }
        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;
    }
    update(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling update.');
        }
        const _externalAccountPutRequest = requestParameters["externalAccountPutRequest"];
        if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {
            throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`, _externalAccountPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateUrl(requestParameters) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling update.');
        }
        const _externalAccountPutRequest = requestParameters["externalAccountPutRequest"];
        if (_externalAccountPutRequest === null || _externalAccountPutRequest === undefined) {
            throw new Error('Required parameter externalAccountPutRequest was null or undefined when calling update.');
        }
        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}`;
    }
    verify(requestParameters, observe = 'body', reportProgress = false, options) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');
        }
        const _externalAccountVerificationPutRequest = requestParameters["externalAccountVerificationPutRequest"];
        if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {
            throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}/account-verification`, _externalAccountVerificationPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    verifyUrl(requestParameters) {
        const _externalAccountId = requestParameters["externalAccountId"];
        if (_externalAccountId === null || _externalAccountId === undefined) {
            throw new Error('Required parameter externalAccountId was null or undefined when calling verify.');
        }
        const _externalAccountVerificationPutRequest = requestParameters["externalAccountVerificationPutRequest"];
        if (_externalAccountVerificationPutRequest === null || _externalAccountVerificationPutRequest === undefined) {
            throw new Error('Required parameter externalAccountVerificationPutRequest was null or undefined when calling verify.');
        }
        return `${this.configuration.basePath}/client-api/v1/external-accounts/${encodeURIComponent(String(_externalAccountId))}/account-verification`;
    }
}
A2aClientHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: A2aClientHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_A2A_BASE_PATH, optional: true }, { token: PaymentOrderA2aConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
A2aClientHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: A2aClientHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: A2aClientHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_ORDER_A2A_BASE_PATH]
                }] }, { type: PaymentOrderA2aConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const A2aClientHttpService_deleteMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const A2aClientHttpServiceCreateMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/external-accounts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const A2aClientHttpServiceGetAllMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/external-accounts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "accounts": [{
                            "externalAccountId": "31361591",
                            "routingNumber": "091000021",
                            "accountNumber": "12351",
                            "accountType": "Checking",
                            "accountNickName": "NickName1",
                            "bankName": "US BANK NA",
                            "maskedAccountNumber": "2351",
                            "status": "Active"
                        }, {
                            "externalAccountId": "31361592",
                            "routingNumber": "091000022",
                            "accountNumber": "12352",
                            "accountType": "Savings",
                            "accountNickName": "NickName2",
                            "bankName": "US BANK NA",
                            "maskedAccountNumber": "2352",
                            "status": "PendingActivation"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const A2aClientHttpServiceGetByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 200,
                body: {
                    "routingNumber": "routingNumber",
                    "externalAccountId": "externalAccountId",
                    "accountNickName": "accountNickName",
                    "bankName": "bankName",
                    "accountNumber": "accountNumber",
                    "maskedAccountNumber": "maskedAccountNumber"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const A2aClientHttpServiceUpdateMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 200,
                body: {
                    "routingNumber": "routingNumber",
                    "externalAccountId": "externalAccountId",
                    "accountNickName": "accountNickName",
                    "bankName": "bankName",
                    "accountNumber": "accountNumber",
                    "maskedAccountNumber": "maskedAccountNumber"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const A2aClientHttpServiceVerifyMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}/account-verification",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 200,
                body: {
                    "routingNumber": "routingNumber",
                    "externalAccountId": "externalAccountId",
                    "accountNickName": "accountNickName",
                    "bankName": "bankName",
                    "accountNumber": "accountNumber",
                    "maskedAccountNumber": "maskedAccountNumber"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const A2aClientHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/external-accounts",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/external-accounts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "accounts": [{
                            "externalAccountId": "31361591",
                            "routingNumber": "091000021",
                            "accountNumber": "12351",
                            "accountType": "Checking",
                            "accountNickName": "NickName1",
                            "bankName": "US BANK NA",
                            "maskedAccountNumber": "2351",
                            "status": "Active"
                        }, {
                            "externalAccountId": "31361592",
                            "routingNumber": "091000022",
                            "accountNumber": "12352",
                            "accountType": "Savings",
                            "accountNickName": "NickName2",
                            "bankName": "US BANK NA",
                            "maskedAccountNumber": "2352",
                            "status": "PendingActivation"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 200,
                body: {
                    "routingNumber": "routingNumber",
                    "externalAccountId": "externalAccountId",
                    "accountNickName": "accountNickName",
                    "bankName": "bankName",
                    "accountNumber": "accountNumber",
                    "maskedAccountNumber": "maskedAccountNumber"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 200,
                body: {
                    "routingNumber": "routingNumber",
                    "externalAccountId": "externalAccountId",
                    "accountNickName": "accountNickName",
                    "bankName": "bankName",
                    "accountNumber": "accountNumber",
                    "maskedAccountNumber": "maskedAccountNumber"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/external-accounts/{externalAccountId}/account-verification",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "externalAccountId": "31361592",
                    "routingNumber": "091000022",
                    "accountNumber": "12351",
                    "accountType": "Checking",
                    "accountNickName": "NickName",
                    "bankName": "US BANK NA",
                    "accountMask": "2351",
                    "status": "Active"
                }
            },
            {
                status: 200,
                body: {
                    "routingNumber": "routingNumber",
                    "externalAccountId": "externalAccountId",
                    "accountNickName": "accountNickName",
                    "bankName": "bankName",
                    "accountNumber": "accountNumber",
                    "maskedAccountNumber": "maskedAccountNumber"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
]);

export { A2aClientHttpService, A2aClientHttpServiceCreateMocksProvider, A2aClientHttpServiceGetAllMocksProvider, A2aClientHttpServiceGetByIdMocksProvider, A2aClientHttpServiceMocksProvider, A2aClientHttpServiceUpdateMocksProvider, A2aClientHttpServiceVerifyMocksProvider, A2aClientHttpService_deleteMocksProvider, AccountStatus, AccountType, COLLECTION_FORMATS, CONFIG_TOKEN, PAYMENT_ORDER_A2A_BASE_PATH, PaymentOrderA2aApiModule, PaymentOrderA2aConfiguration };
//# sourceMappingURL=backbase-payment-order-a2a-http-ang.js.map
