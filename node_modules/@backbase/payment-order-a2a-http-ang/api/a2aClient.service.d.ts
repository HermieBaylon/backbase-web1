import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ExternalAccountGetPostPutResponse } from '../model/models';
import { ExternalAccountGetResponse } from '../model/models';
import { ExternalAccountPostRequest } from '../model/models';
import { ExternalAccountPutRequest } from '../model/models';
import { ExternalAccountVerificationPutRequest } from '../model/models';
import { PaymentOrderA2aConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteRequestParams {
    ["externalAccountId"]: string;
}
export interface CreateRequestParams {
    ["externalAccountPostRequest"]: ExternalAccountPostRequest;
}
export interface GetByIdRequestParams {
    ["externalAccountId"]: string;
}
export interface UpdateRequestParams {
    ["externalAccountId"]: string;
    ["externalAccountPutRequest"]: ExternalAccountPutRequest;
}
export interface VerifyRequestParams {
    ["externalAccountId"]: string;
    ["externalAccountVerificationPutRequest"]: ExternalAccountVerificationPutRequest;
}
export declare class A2aClientHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentOrderA2aConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentOrderA2aConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    _delete(requestParameters: DeleteRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    _delete(requestParameters: DeleteRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    _delete(requestParameters: DeleteRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    _deleteUrl(requestParameters: DeleteRequestParams): string;
    create(requestParameters: CreateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExternalAccountGetPostPutResponse>;
    create(requestParameters: CreateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExternalAccountGetPostPutResponse>>;
    create(requestParameters: CreateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExternalAccountGetPostPutResponse>>;
    createUrl(requestParameters: CreateRequestParams): string;
    getAll(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExternalAccountGetResponse>;
    getAll(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExternalAccountGetResponse>>;
    getAll(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExternalAccountGetResponse>>;
    getAllUrl(): string;
    getById(requestParameters: GetByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExternalAccountGetPostPutResponse>;
    getById(requestParameters: GetByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExternalAccountGetPostPutResponse>>;
    getById(requestParameters: GetByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExternalAccountGetPostPutResponse>>;
    getByIdUrl(requestParameters: GetByIdRequestParams): string;
    update(requestParameters: UpdateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExternalAccountGetPostPutResponse>;
    update(requestParameters: UpdateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExternalAccountGetPostPutResponse>>;
    update(requestParameters: UpdateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExternalAccountGetPostPutResponse>>;
    updateUrl(requestParameters: UpdateRequestParams): string;
    verify(requestParameters: VerifyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ExternalAccountGetPostPutResponse>;
    verify(requestParameters: VerifyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ExternalAccountGetPostPutResponse>>;
    verify(requestParameters: VerifyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ExternalAccountGetPostPutResponse>>;
    verifyUrl(requestParameters: VerifyRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<A2aClientHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<A2aClientHttpService>;
}
