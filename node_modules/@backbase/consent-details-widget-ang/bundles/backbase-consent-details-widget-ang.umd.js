(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/foundation-ang/core'), require('@backbase/consent-ui'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/phone-number-format-pipe'), require('@backbase/ui-ang/product-item-basic-account'), require('@backbase/ui-ang/date-pipe'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/notification'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/consent'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/consent-details-widget-ang', ['exports', '@angular/core', '@angular/common', '@backbase/foundation-ang/core', '@backbase/consent-ui', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/phone-number-format-pipe', '@backbase/ui-ang/product-item-basic-account', '@backbase/ui-ang/date-pipe', '@backbase/ui-ang/icon', '@backbase/ui-ang/modal', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/badge', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/button', '@backbase/ui-ang/notification', 'rxjs', 'rxjs/operators', '@backbase/data-ang/consent', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["consent-details-widget-ang"] = {}), global.ng.core, global.ng.common, global.i1$3, global.i1$2, global.i7, global.i2$3, global.i1$4, global.i5, global.i8, global.i9, global.i10, global.i2$2, global.i1$1, global.i4, global.i2, global.rxjs, global.rxjs.operators, global.i1, global.ng.router));
})(this, (function (exports, i0, i2$1, i1$3, i1$2, i7, i2$3, i1$4, i5, i8, i9, i10, i2$2, i1$1, i4, i2, rxjs, operators, i1, i2$4) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ConsentDetailsAccessDenied = /** @class */ (function () {
        function ConsentDetailsAccessDenied(error) {
            this.error = error;
            this.kind = 'ConsentDetailsAccessDenied';
        }
        return ConsentDetailsAccessDenied;
    }());
    var ConsentDetailsNotFound = /** @class */ (function () {
        function ConsentDetailsNotFound(error) {
            this.error = error;
            this.kind = 'ConsentDetailsNotFound';
        }
        return ConsentDetailsNotFound;
    }());
    var ConsentDetailsBadRequest = /** @class */ (function () {
        function ConsentDetailsBadRequest(error) {
            this.error = error;
            this.kind = 'ConsentDetailsBadRequest';
        }
        return ConsentDetailsBadRequest;
    }());
    var ConsentDetailsUnknownError = /** @class */ (function () {
        function ConsentDetailsUnknownError(error) {
            this.error = error;
            this.kind = 'ConsentDetailsUnknownError';
        }
        return ConsentDetailsUnknownError;
    }());
    var ConsentDetailsConnectivityError = /** @class */ (function () {
        function ConsentDetailsConnectivityError(error) {
            this.error = error;
            this.kind = 'ConsentDetailsConnectivityError';
        }
        return ConsentDetailsConnectivityError;
    }());
    var parseError = function (error) {
        if (error.error instanceof ErrorEvent) {
            return new ConsentDetailsUnknownError(error);
        }
        else {
            switch (error.status) {
                case 0:
                    return new ConsentDetailsConnectivityError(error);
                case 400:
                    return new ConsentDetailsBadRequest(error);
                case 401:
                    return new ConsentDetailsAccessDenied(error);
                case 403:
                    return new ConsentDetailsAccessDenied(error);
                case 404:
                    return new ConsentDetailsNotFound(error);
                default:
                    return new ConsentDetailsUnknownError(error);
            }
        }
    };

    var ConsentDetailsService = /** @class */ (function () {
        function ConsentDetailsService(consentDataService, notification) {
            var _this = this;
            this.consentDataService = consentDataService;
            this.notification = notification;
            this.consentId = new rxjs.ReplaySubject(1);
            this.revokingComplete = new rxjs.BehaviorSubject(true);
            this.loading = new rxjs.BehaviorSubject(true);
            this.error = new rxjs.BehaviorSubject(undefined);
            this.consentDetails = rxjs.combineLatest([this.consentId, this.revokingComplete]).pipe(operators.filter(function (_a) {
                var _b = __read(_a, 1), id = _b[0];
                return !!id;
            }), operators.distinctUntilChanged(), operators.tap(function () { return _this.loading.next(true); }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), id = _b[0];
                return _this.getConsentDetailsById(id);
            }), operators.tap(function () { return _this.error.next(undefined); }), operators.catchError(function (error) {
                _this.error.next(error);
                return rxjs.of(undefined);
            }), operators.tap(function () { return _this.loading.next(false); }));
        }
        ConsentDetailsService.prototype.getConsentFrom = function (consentId) {
            consentId.subscribe(this.consentId);
        };
        ConsentDetailsService.prototype.requestRevoke = function (errorTemplateRef, successTemplateRef) {
            var _this = this;
            return this.consentId.pipe(operators.take(1), operators.filter(function (id) { return !!id; }), operators.switchMap(function (id) { return _this.revokeConsentById(id); }), operators.tap(function () {
                _this.revokingComplete.next(true);
                _this.showNotification(successTemplateRef, 'success');
            }), operators.catchError(function () {
                _this.showNotification(errorTemplateRef, 'error');
                return rxjs.of(undefined);
            }));
        };
        ConsentDetailsService.prototype.getConsentDetailsById = function (id) {
            return this.consentDataService.getIdByIdgetId({ id: id }, 'response').pipe(operators.pluck('body'), operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        ConsentDetailsService.prototype.revokeConsentById = function (id) {
            return this.consentDataService.postRevokeById({ id: id }, 'response').pipe(operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        ConsentDetailsService.prototype.showNotification = function (templateRef, modifier) {
            this.notification.showNotification({
                header: templateRef,
                message: '',
                modifier: modifier,
            });
        };
        return ConsentDetailsService;
    }());
    ConsentDetailsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsService, deps: [{ token: i1__namespace.ConsentsHttpService }, { token: i2__namespace.NotificationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsentDetailsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.ConsentsHttpService }, { type: i2__namespace.NotificationService }]; } });

    var ConsentDetailsErrorComponent = /** @class */ (function () {
        function ConsentDetailsErrorComponent() {
        }
        return ConsentDetailsErrorComponent;
    }());
    ConsentDetailsErrorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsErrorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentDetailsErrorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsErrorComponent, selector: "bb-consent-details-error", inputs: { consentId: "consentId", errorKind: "errorKind" }, ngImport: i0__namespace, template: "<bb-empty-state-ui\n  *ngIf=\"!consentId\"\n  title=\"Consent Details Not Found\"\n  i18n-title=\"\n    Consent Details Not Found|Empty state label when there is no consent\n    id@@consent-details.error.noConsentRequest.title\"\n  subtitle=\"Consent Details Not Found.\"\n  i18n-subtitle=\"\n    Consent Details Not Found subtitle|Empty state subtitle label when there is no consent\n    id@@consent-details.error.noConsentRequest.subtitle\"\n  iconModifier=\"error\"></bb-empty-state-ui>\n\n<ng-container *ngIf=\"consentId && errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentDetailsAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      details@@consent-details.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to see the consent's details.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      details@@consent-details.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentDetailsConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@consent-details.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-details.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentDetailsNotFound'\"\n    title=\"Consent Details Not Found\"\n    i18n-title=\"\n      Consent Details Not Found|Empty state label when the id is invalid@@consent-details.error.notFound.title\"\n    subtitle=\"Consent Details Not Found.\"\n    i18n-subtitle=\"\n      notFound Error subtitle|Empty state subtitle label when there is notFound\n      error@@consent-details.error.notFound.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentDetailsUnknownError | ConsentDetailsBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-details.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-details.error.unexpected.subtitle\"\n    iconModifier=\"user\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1__namespace$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsErrorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-details-error',
                        templateUrl: './consent-details-error.component.html',
                    }]
            }], propDecorators: { consentId: [{
                    type: i0.Input
                }], errorKind: [{
                    type: i0.Input
                }] } });

    exports.Status = void 0;
    (function (Status) {
        Status["ACTIVE"] = "ACTIVE";
        Status["REVOKED"] = "REVOKED";
        Status["EXPIRED"] = "EXPIRED";
    })(exports.Status || (exports.Status = {}));
    var Permission = {
        ReadAccountsDetail: 'ReadAccountsDetail',
        ReadBalances: 'ReadBalances',
        ReadTransactionsDetail: 'ReadTransactionsDetail',
        ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',
        ReadDirectDebits: 'ReadDirectDebits',
        ReadProducts: 'ReadProducts',
        ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',
        ReadTransactionsCredits: 'ReadTransactionsCredits',
        ReadTransactionsDebits: 'ReadTransactionsDebits',
    };

    var ConsentDetailsHeaderComponent = /** @class */ (function () {
        function ConsentDetailsHeaderComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Status of the Consent
             */
            this.status = '';
            /**
             * Expiry date of the Consent
             */
            this.expiryDate = '';
            /**
             * Emitter that fires when you revoke consent
             */
            this.revokeConsent = new i0.EventEmitter();
            /**
             * Consent status enumeration
             */
            this.Status = exports.Status;
        }
        /**
         * Revoke consent button click event handler.
         * Emit revoke consent event
         */
        ConsentDetailsHeaderComponent.prototype.onRevokeConsent = function () {
            this.revokeConsent.emit();
        };
        return ConsentDetailsHeaderComponent;
    }());
    ConsentDetailsHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsHeaderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentDetailsHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsHeaderComponent, selector: "bb-consent-details-header", inputs: { tpp: "tpp", status: "status", expiryDate: "expiryDate" }, outputs: { revokeConsent: "revokeConsent" }, ngImport: i0__namespace, template: "<ng-container\n  bbConsentDetailsHeaderCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    tpp: tpp,\n    status: status,\n    expiryDate: expiryDate\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentDetailsHeaderCustomizable\n  let-hostRef\n  let-tpp=\"context.tpp\"\n  let-status=\"context.status\"\n  let-expiryDate=\"context.expiryDate\">\n  <div class=\"bb-consent-details-header bb-stack\">\n    <div class=\"bb-stack__item\">\n      <bb-third-party-provider-ui\n        [name]=\"tpp?.name\"\n        [url]=\"tpp?.website\"\n        [image]=\"tpp?.imageUrl\"\n        [verified]=\"tpp?.isTrusted\"\n        [condensed]=\"true\">\n      </bb-third-party-provider-ui>\n    </div>\n\n    <!-- Large Viewports -->\n    <div data-role=\"status-badge-large\" class=\"bb-stack__item\">\n      <bb-badge-ui\n        data-role=\"status-badge-active\"\n        i18n-text=\"Active|Consent status active@@consent-details.header.badge.active\"\n        *ngIf=\"status === hostRef.Status.ACTIVE\"\n        color=\"success\"\n        text=\"Active\">\n      </bb-badge-ui>\n      <bb-badge-ui\n        data-role=\"status-badge-expired\"\n        i18n-text=\"Expired|Consent status expired@@consent-details.header.badge.expired\"\n        *ngIf=\"status === hostRef.Status.EXPIRED\"\n        color=\"secondary\"\n        text=\"Expired\">\n      </bb-badge-ui>\n      <bb-badge-ui\n        data-role=\"status-badge-revoked\"\n        i18n-text=\"Revoked|Consent status revoked@@consent-details.header.badge.revoked\"\n        *ngIf=\"status === hostRef.Status.REVOKED\"\n        color=\"danger\"\n        text=\"Revoked\">\n      </bb-badge-ui>\n    </div>\n\n    <div class=\"bb-consent-details-header__status-wrapper bb-stack__item bb-stack__item--push-right\">\n      <div class=\"bb-consent-details-header__status bb-text-align-right\">\n        <div\n          i18n=\"Expired on|Consent is expired@@consent-details.header.heading.expiredOn\"\n          class=\"bb-text-bold\"\n          *ngIf=\"status === hostRef.Status.EXPIRED\">\n          Expired on\n        </div>\n        <div\n          data-role=\"token-expiry-label-active\"\n          i18n=\"Expiry Date|Expiry Date of Consent@@consent-details.header.heading.expiryDate\"\n          class=\"bb-text-bold\"\n          *ngIf=\"status !== hostRef.Status.EXPIRED\">\n          Expiry date\n        </div>\n        <div data-role=\"expiry-date\">\n          {{ expiryDate | bbDate: 'bbShort' }}\n        </div>\n      </div>\n      <button\n        bbButton\n        *ngIf=\"status === hostRef.Status.ACTIVE\"\n        (click)=\"hostRef.onRevokeConsent()\"\n        color=\"danger\"\n        data-role=\"revoke-consent-button\"\n        type=\"submit\">\n        <span i18n=\"Revoke Consent|Revoke consent button@@consent-details.header.button.revoke-consent\">\n          Revoke Consent\n        </span>\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentDetailsHeaderCustomizableDirective; }), selector: "[bbConsentDetailsHeaderCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "bbDate": i0__namespace.forwardRef(function () { return i5__namespace.BbDatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-details-header',
                        templateUrl: './consent-details-header.component.html',
                    }]
            }], propDecorators: { tpp: [{
                    type: i0.Input
                }], status: [{
                    type: i0.Input
                }], expiryDate: [{
                    type: i0.Input
                }], revokeConsent: [{
                    type: i0.Output
                }] } });
    var ConsentDetailsHeaderCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentDetailsHeaderCustomizableDirective, _super);
        function ConsentDetailsHeaderCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentDetailsHeaderCustomizableDirective;
    }(i1$3.BbTemplate));
    ConsentDetailsHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentDetailsHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsHeaderCustomizableDirective, selector: "[bbConsentDetailsHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsHeaderCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentDetailsHeaderCustomizable]',
                    }]
            }] });

    var ConsentDetailsTppDetailsComponent = /** @class */ (function () {
        function ConsentDetailsTppDetailsComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
        }
        return ConsentDetailsTppDetailsComponent;
    }());
    ConsentDetailsTppDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsTppDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentDetailsTppDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsTppDetailsComponent, selector: "bb-consent-third-party-details", inputs: { tpp: "tpp" }, ngImport: i0__namespace, template: "<ng-container bbConsentDetailsTppDetailsCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"tpp\"> </ng-container>\n\n<ng-template bbConsentDetailsTppDetailsCustomizable let-hostRef let-tpp=\"context\">\n  <div class=\"bb-consent-details-tpp\">\n    <div class=\"bb-consent-details-tpp__info-label\">\n      <span i18n=\"Third Party Information|TPP Info@@consent-details.tpp-details.heading.tppDetails\" class=\"bb-text-bold\"\n        >Third Party Information</span\n      >\n    </div>\n    <div *ngIf=\"tpp.externalId\" class=\"bb-block bb-block--md\">\n      <div\n        i18n=\"Third Party ID|TPPID Heading@@consent-details.tpp-details.heading.TPPID\"\n        data-role=\"third-party-id-label\"\n        class=\"bb-text-bold\">\n        Third party ID\n      </div>\n      <div class=\"bb-subtitle\" data-role=\"third-party-id-value\">\n        {{ tpp.externalId }}\n      </div>\n    </div>\n    <div *ngIf=\"tpp.mail || tpp.phonenumber\" class=\"bb-block bb-block--md\" data-role=\"contact-information-value\">\n      <div\n        i18n=\"Contact Information|Contact Information heading@@consent-details.tpp-details.heading.contact-information\"\n        data-role=\"contact-information-label\"\n        class=\"bb-text-bold\">\n        Contact information\n      </div>\n      <div *ngIf=\"tpp.mail\" data-role=\"third-party-email-value\" class=\"bb-subtitle\">\n        {{ tpp.mail }}\n      </div>\n      <div *ngIf=\"tpp.phonenumber && tpp.country\" data-role=\"third-party-phone-value\" class=\"bb-subtitle\">\n        {{ tpp.phonenumber | phoneNumber: tpp.country }}\n      </div>\n    </div>\n    <div *ngIf=\"tpp.address\" class=\"bb-block bb-block--md\">\n      <div\n        i18n=\"Legal Address|Legal Address Heading@@consent-details.tpp-details.heading.legal-address\"\n        data-role=\"legal-address-label\"\n        class=\"bb-text-bold\">\n        Legal address\n      </div>\n      <div class=\"bb-subtitle\" data-role=\"legal-address-value\">\n        {{ tpp.address }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n", directives: [{ type: i0__namespace.forwardRef(function () { return ConsentDetailsTppDetailsCustomizableDirective; }), selector: "[bbConsentDetailsTppDetailsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "phoneNumber": i0__namespace.forwardRef(function () { return i2__namespace$3.PhoneNumberPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsTppDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-third-party-details',
                        templateUrl: './consent-details-tpp-details.component.html',
                    }]
            }], propDecorators: { tpp: [{
                    type: i0.Input
                }] } });
    var ConsentDetailsTppDetailsCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentDetailsTppDetailsCustomizableDirective, _super);
        function ConsentDetailsTppDetailsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentDetailsTppDetailsCustomizableDirective;
    }(i1$3.BbTemplate));
    ConsentDetailsTppDetailsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsTppDetailsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentDetailsTppDetailsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsTppDetailsCustomizableDirective, selector: "[bbConsentDetailsTppDetailsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsTppDetailsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentDetailsTppDetailsCustomizable]',
                    }]
            }] });

    var ConsentDetailsAccountsListComponent = /** @class */ (function () {
        function ConsentDetailsAccountsListComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * List of accounts
             */
            this.accounts = [];
        }
        return ConsentDetailsAccountsListComponent;
    }());
    ConsentDetailsAccountsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsAccountsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentDetailsAccountsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsAccountsListComponent, selector: "bb-consent-details-accounts-list", inputs: { accounts: "accounts" }, ngImport: i0__namespace, template: "<ng-container bbConsentDetailsAccountsListCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"accounts\">\n</ng-container>\n\n<ng-template bbConsentDetailsAccountsListCustomizable let-hostRef let-accounts=\"context\">\n  <div class=\"bb-block bb-block--lg\">\n    <div\n      i18n=\"Accounts Exposed|Accounts Exposed Heading@@consent-details.accounts-list.heading.accounts-exposed\"\n      class=\"bb-text-bold bb-block bb-block--sm\"\n      data-role=\"account-exposed-details-label\">\n      Accounts Exposed\n    </div>\n    <div data-role=\"accounts-exposed\" class=\"bb-consent-details-accounts-item card\">\n      <div class=\"card-section\" *ngFor=\"let account of accounts\">\n        <bb-product-item-basic-account-ui\n          [title]=\"account.name\"\n          [productNumber]=\"account.number\"\n          [amount]=\"account.balance\"\n          [currency]=\"account.currency\"\n          [highlight]=\"false\"\n          [active]=\"false\"></bb-product-item-basic-account-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$3.ProductItemBasicAccountComponent; }), selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentDetailsAccountsListCustomizableDirective; }), selector: "[bbConsentDetailsAccountsListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsAccountsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-details-accounts-list',
                        templateUrl: './consent-details-accounts-list.component.html',
                    }]
            }], propDecorators: { accounts: [{
                    type: i0.Input
                }] } });
    var ConsentDetailsAccountsListCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentDetailsAccountsListCustomizableDirective, _super);
        function ConsentDetailsAccountsListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentDetailsAccountsListCustomizableDirective;
    }(i1$3.BbTemplate));
    ConsentDetailsAccountsListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsAccountsListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentDetailsAccountsListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsAccountsListCustomizableDirective, selector: "[bbConsentDetailsAccountsListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsAccountsListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentDetailsAccountsListCustomizable]',
                    }]
            }] });

    var ConsentDetailsPermissionsListComponent = /** @class */ (function () {
        function ConsentDetailsPermissionsListComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * List of permissions
             */
            this.permissions = [];
            /**
             * Permission mapper
             */
            this.Permission = Permission;
        }
        /**
         * Check if permission contains provided permission
         * @param permission
         */
        ConsentDetailsPermissionsListComponent.prototype.hasPermission = function (permission) {
            return this.permissions.includes(permission);
        };
        return ConsentDetailsPermissionsListComponent;
    }());
    ConsentDetailsPermissionsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsPermissionsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentDetailsPermissionsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsPermissionsListComponent, selector: "bb-consent-details-permissions-list", inputs: { permissions: "permissions" }, ngImport: i0__namespace, template: "<ng-container bbConsentDetailsPermissionsListCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"permissions\">\n</ng-container>\n\n<ng-template bbConsentDetailsPermissionsListCustomizable let-hostRef let-permissions=\"context\">\n  <div\n    i18n=\"Permissions granted|Permissions granted heading@@consent-details.permissions.heading.permissions-granted\"\n    data-role=\"permissions-granted-label\"\n    class=\"bb-text-bold bb-block bb-block--sm\">\n    Permissions granted\n  </div>\n  <div class=\"bb-consent-details-permissions card\">\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadAccountsDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        data-role=\"account-information-label\"\n        i18n=\"\n          Account Information|Account Information Permission\n          title@@consent-details.label.permission.ReadAccountsDetail.title\">\n        Account information\n      </div>\n      <div\n        class=\"bb-consent-details-permissions__details\"\n        i18n=\"\n          Account Information details|Account Information Permission\n          subtitle@@consent-details.label.permission.ReadAccountsDetail.subtitle\">\n        Name, number\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBalances)\">\n      <div\n        class=\"bb-text-bold\"\n        data-role=\"account-balance-label\"\n        i18n=\"Account Balance|Account Balance Permission title@@consent-details.label.permission.ReadBalances.title\">\n        Account balance\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        data-role=\"transactions-label\"\n        i18n=\"\n          Transactions|Transaction Details Permission\n          title@@consent-details.label.permission.ReadTransactionsDetail.title\">\n        Transactions\n      </div>\n      <div\n        class=\"bb-consent-details-permissions__details\"\n        i18n=\"\n          Transactions details |Transaction Details Permission\n          subtitle@@consent-details.label.permission.ReadTransactionsDetail.subtitle\">\n        Category, amount, date, time, beneficiary details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBeneficiariesDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"Beneficiaries|Beneficiaries title@@consent-details.label.permission.ReadBeneficiariesDetail.title\">\n        Beneficiaries details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadDirectDebits)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"Direct Debits|Direct Debits Permission title@@consent-details.label.permission.ReadDirectDebits.title\">\n        Direct Debits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadProducts)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"Products|Products Permission title@@consent-details.label.permission.ReadProducts.title\">\n        Products\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadStandingOrdersDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"\n          Standing Orders|Standing Orders Permission\n          title@@consent-details.label.permission.ReadStandingOrdersDetail.title\">\n        Standing Orders\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsCredits)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"\n          Transactions Credits|Transactions Credits Permission\n          title@@consent-details.label.permission.ReadTransactionsCredits.title\">\n        Transactions Credits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDebits)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"\n          Transactions Debits|Transactions Debits Permission\n          title@@consent-details.label.permission.ReadTransactionsDebits.title\">\n        Transactions Debits\n      </div>\n    </div>\n  </div>\n</ng-template>\n", directives: [{ type: i0__namespace.forwardRef(function () { return ConsentDetailsPermissionsListCustomizableDirective; }), selector: "[bbConsentDetailsPermissionsListCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsPermissionsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-details-permissions-list',
                        templateUrl: './consent-details-permissions-list.component.html',
                    }]
            }], propDecorators: { permissions: [{
                    type: i0.Input
                }] } });
    var ConsentDetailsPermissionsListCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentDetailsPermissionsListCustomizableDirective, _super);
        function ConsentDetailsPermissionsListCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentDetailsPermissionsListCustomizableDirective;
    }(i1$3.BbTemplate));
    ConsentDetailsPermissionsListCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsPermissionsListCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentDetailsPermissionsListCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsPermissionsListCustomizableDirective, selector: "[bbConsentDetailsPermissionsListCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsPermissionsListCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentDetailsPermissionsListCustomizable]',
                    }]
            }] });

    var ConsentDetailsContainerComponent = /** @class */ (function () {
        function ConsentDetailsContainerComponent(detailsService, route) {
            this.detailsService = detailsService;
            this.route = route;
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Notification error template reference
             */
            this.notificationErrorTemplate = '';
            /**
             * Notification success template reference
             */
            this.notificationSuccessTemplate = '';
            /**
             * Stream of loading spinner visibility flag
             */
            this.loading = this.detailsService.loading;
            /**
             * Stream of consent details request errors
             */
            this.error = this.detailsService.error;
            /**
             * Stream of consent ID
             */
            this.consentId = this.getRouteParam(this.route, 'consentId').pipe(operators.map(function (consentId) { return consentId || ''; }));
            /**
             * Stream of consent details
             */
            this.consentDetails = this.detailsService.consentDetails;
            /**
             * Consent reject modal visibility flag
             */
            this.isModalOpen = false;
            /**
             * Consent status enumeration
             */
            this.Status = exports.Status;
        }
        ConsentDetailsContainerComponent.prototype.ngOnInit = function () {
            this.detailsService.getConsentFrom(this.consentId);
        };
        /**
         * Open consent reject modal
         */
        ConsentDetailsContainerComponent.prototype.openRejectConsentModal = function () {
            this.isModalOpen = true;
        };
        /**
         * Close consent reject modal
         */
        ConsentDetailsContainerComponent.prototype.dismissRejectConsentModal = function () {
            this.isModalOpen = false;
        };
        /**
         * Revoke consent
         */
        ConsentDetailsContainerComponent.prototype.revokeConsent = function () {
            this.detailsService.requestRevoke(this.notificationErrorTemplate, this.notificationSuccessTemplate).subscribe();
            this.dismissRejectConsentModal();
        };
        ConsentDetailsContainerComponent.prototype.getRouteParam = function (route, param) {
            var paramValue = route.paramMap.pipe(operators.pluck('params', param));
            if (!route.parent) {
                return paramValue;
            }
            return rxjs.combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(operators.map(function (params) { return params[0] || params[1]; }));
        };
        return ConsentDetailsContainerComponent;
    }());
    ConsentDetailsContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsContainerComponent, deps: [{ token: ConsentDetailsService }, { token: i2__namespace$4.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentDetailsContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsContainerComponent, selector: "bb-consent-details-container", viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }, { propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ng-container\n  bbConsentDetailsContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    consentDetails: consentDetails | async,\n    loading: loading | async,\n    error: error | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentDetailsContainerCustomizable\n  let-hostRef\n  let-consentDetails=\"context.consentDetails\"\n  let-error=\"context.error\"\n  let-loading=\"context.loading\">\n  <ng-container *ngIf=\"hostRef.consentId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!error; else errorTemplate\">\n        <bb-consent-details-header\n          [expiryDate]=\"consentDetails?.expiryDate\"\n          [status]=\"consentDetails?.status\"\n          [tpp]=\"consentDetails?.tpp\"\n          (revokeConsent)=\"hostRef.openRejectConsentModal()\">\n        </bb-consent-details-header>\n\n        <div class=\"bb-consent-details\">\n          <!-- Large Viewports -->\n          <div class=\"bb-consent-details__lg\">\n            <bb-consent-third-party-details [tpp]=\"consentDetails?.tpp\"> </bb-consent-third-party-details>\n            <div class=\"bb-consent-details__lg-wrapper\">\n              <div class=\"bb-consent-details__lg-wrapper-item\">\n                <bb-consent-details-accounts-list [accounts]=\"consentDetails?.accounts\">\n                </bb-consent-details-accounts-list>\n              </div>\n              <bb-consent-details-permissions-list [permissions]=\"consentDetails?.permissions\">\n              </bb-consent-details-permissions-list>\n            </div>\n          </div>\n\n          <!-- Mobile Viewports -->\n          <div class=\"bb-consent-details__sm\">\n            <div class=\"bb-block bb-block--lg\">\n              <div class=\"bb-block bb-block--md\">\n                <div\n                  i18n=\"Expired on|Consent is expired@@consent-details.container.heading.expiredOn\"\n                  class=\"bb-text-bold\"\n                  *ngIf=\"consentDetails?.status === hostRef.Status.EXPIRED\">\n                  Expired on\n                </div>\n                <div\n                  i18n=\"Expiry Date|Expiry Date of Consent@@consent-details.container.heading.expiryDate\"\n                  class=\"bb-text-bold\"\n                  *ngIf=\"consentDetails?.status !== hostRef.Status.EXPIRED\">\n                  Expiry date\n                </div>\n                <div>\n                  {{ consentDetails.expiryDate | bbDate: 'bbShort' }}\n                </div>\n              </div>\n              <div class=\"bb-block bb-block--md\">\n                <bb-consent-details-accounts-list [accounts]=\"consentDetails?.accounts\">\n                </bb-consent-details-accounts-list>\n              </div>\n              <bb-consent-details-permissions-list [permissions]=\"consentDetails?.permissions\">\n              </bb-consent-details-permissions-list>\n            </div>\n            <bb-collapsible-ui>\n              <ng-template bbCollapsibleHeader let-toggle=\"toggle\">\n                <div class=\"bb-block bb-block--md\">\n                  <div (click)=\"toggle()\" class=\"bb-consent-details__sm-collapsible\">\n                    <span\n                      class=\"bb-text-bold\"\n                      i18n=\"See other details|Third party details@@consent-details.container.label.seeDetails\">\n                      See other details\n                    </span>\n                    <bb-icon-ui name=\"toggle-down\" size=\"sm\"> </bb-icon-ui>\n                  </div>\n                </div>\n              </ng-template>\n              <ng-template bbCollapsibleBody>\n                <bb-consent-third-party-details [tpp]=\"consentDetails?.tpp\"> </bb-consent-third-party-details>\n              </ng-template>\n            </bb-collapsible-ui>\n\n            <!-- Small Viewport Revoke Button -->\n            <div\n              *ngIf=\"consentDetails?.status === hostRef.Status.ACTIVE\"\n              class=\"bb-consent-details__button bb-button-bar\">\n              <button\n                bbButton\n                class=\"bb-button-bar__button\"\n                (click)=\"hostRef.openRejectConsentModal()\"\n                color=\"danger\"\n                i18n=\"Revoke Consent|Revoke consent button@@consent-details.header.button.revoke-consent\">\n                Revoke Consent\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <bb-modal-ui [isOpen]=\"hostRef.isModalOpen\">\n          <bb-modal-header-ui>\n            <ng-template bbCustomModalHeader>\n              <span\n                class=\"bb-text-bold\"\n                data-role=\"dialog-title\"\n                i18n=\"Revoke Consent?|Revoke consent heading@@consent-details.container.heading.revoke-consent\"\n                bbConfirmTitle>\n                Revoke Consent?\n              </span>\n            </ng-template>\n          </bb-modal-header-ui>\n          <bb-modal-body-ui>\n            <ng-template bbCustomModalBody>\n              <div\n                data-role=\"dialog-question\"\n                i18n=\"\n                  Are you sure you want to permanently revoke consent? This action can't be undone.| Revoke Consent\n                  body@@consent-details.container.body.revoke-consent\"\n                bbConfirmBody>\n                Are you sure you want to permanently revoke consent for {{ consentDetails?.tpp.name }}? This action\n                can't be undone.\n              </div>\n            </ng-template>\n          </bb-modal-body-ui>\n          <bb-modal-footer-ui>\n            <ng-template bbCustomModalFooter>\n              <button\n                bbButton\n                data-role=\"cancel-button\"\n                color=\"secondary\"\n                (click)=\"hostRef.dismissRejectConsentModal()\"\n                i18n=\"Cancel|Cancel and close modal@@consent-details.container.button.label.cancel\">\n                Cancel\n              </button>\n              <button\n                bbButton\n                color=\"danger\"\n                data-role=\"revoke-button\"\n                (click)=\"hostRef.revokeConsent()\"\n                i18n=\"Revoke|Approve revoking of consent@@consent-details.container.button.label.revoke\">\n                Revoke\n              </button>\n            </ng-template>\n          </bb-modal-footer-ui>\n        </bb-modal-ui>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui loadersize=\"lg\"></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-details-error [consentId]=\"hostRef.consentId | async\" [errorKind]=\"error?.kind\">\n      </bb-consent-details-error>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationError>\n  <span i18n=\"Failed to revoke consent|Error notification message@@consent-details.container.notification.error\">\n    Failed to revoke consent\n  </span>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span\n    i18n=\"Successfully revoked consent |Success notification message@@consent-details.container.notification.success\">\n    Consent was revoked\n  </span>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return ConsentDetailsHeaderComponent; }), selector: "bb-consent-details-header", inputs: ["tpp", "status", "expiryDate"], outputs: ["revokeConsent"] }, { type: i0__namespace.forwardRef(function () { return ConsentDetailsTppDetailsComponent; }), selector: "bb-consent-third-party-details", inputs: ["tpp"] }, { type: i0__namespace.forwardRef(function () { return ConsentDetailsAccountsListComponent; }), selector: "bb-consent-details-accounts-list", inputs: ["accounts"] }, { type: i0__namespace.forwardRef(function () { return ConsentDetailsPermissionsListComponent; }), selector: "bb-consent-details-permissions-list", inputs: ["permissions"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return ConsentDetailsErrorComponent; }), selector: "bb-consent-details-error", inputs: ["consentId", "errorKind"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentDetailsContainerCustomizableDirective; }), selector: "[bbConsentDetailsContainerCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace$1.AsyncPipe; }), "bbDate": i0__namespace.forwardRef(function () { return i5__namespace.BbDatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-details-container',
                        templateUrl: './consent-details-container.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ConsentDetailsService }, { type: i2__namespace$4.ActivatedRoute }]; }, propDecorators: { notificationErrorTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationError', { static: true }]
                }], notificationSuccessTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationSuccess', { static: true }]
                }] } });
    var ConsentDetailsContainerCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentDetailsContainerCustomizableDirective, _super);
        function ConsentDetailsContainerCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentDetailsContainerCustomizableDirective;
    }(i1$3.BbTemplate));
    ConsentDetailsContainerCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsContainerCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentDetailsContainerCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsContainerCustomizableDirective, selector: "[bbConsentDetailsContainerCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsContainerCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentDetailsContainerCustomizable]',
                    }]
            }] });

    var ConsentDetailsWidgetComponent = /** @class */ (function () {
        function ConsentDetailsWidgetComponent() {
        }
        return ConsentDetailsWidgetComponent;
    }());
    ConsentDetailsWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsWidgetComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentDetailsWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsWidgetComponent, selector: "bb-consent-details-widget", ngImport: i0__namespace, template: " <bb-consent-details-container></bb-consent-details-container> ", isInline: true, components: [{ type: ConsentDetailsContainerComponent, selector: "bb-consent-details-container" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-details-widget',
                        template: " <bb-consent-details-container></bb-consent-details-container> ",
                    }]
            }] });

    var components = [
        ConsentDetailsWidgetComponent,
        ConsentDetailsTppDetailsComponent,
        ConsentDetailsAccountsListComponent,
        ConsentDetailsPermissionsListComponent,
        ConsentDetailsContainerComponent,
        ConsentDetailsHeaderComponent,
        ConsentDetailsErrorComponent,
    ];
    var directives = [
        ConsentDetailsContainerCustomizableDirective,
        ConsentDetailsHeaderCustomizableDirective,
        ConsentDetailsTppDetailsCustomizableDirective,
        ConsentDetailsPermissionsListCustomizableDirective,
        ConsentDetailsAccountsListCustomizableDirective,
    ];
    var uiModules = [
        i1$2.ConsentUiModule,
        i7.CollapsibleModule,
        i2$3.PhoneNumberModule,
        i1$4.ProductItemBasicAccountModule,
        i5.BbDatePipeModule,
        i8.IconModule,
        i9.ModalModule,
        i10.LoadingIndicatorModule,
        i2$2.BadgeModule,
        i1$1.EmptyStateModule,
        i4.ButtonModule,
        i2.NotificationModule,
    ];
    var ConsentDetailsWidgetModule = /** @class */ (function () {
        function ConsentDetailsWidgetModule() {
        }
        return ConsentDetailsWidgetModule;
    }());
    ConsentDetailsWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsentDetailsWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsWidgetModule, declarations: [ConsentDetailsWidgetComponent,
            ConsentDetailsTppDetailsComponent,
            ConsentDetailsAccountsListComponent,
            ConsentDetailsPermissionsListComponent,
            ConsentDetailsContainerComponent,
            ConsentDetailsHeaderComponent,
            ConsentDetailsErrorComponent, ConsentDetailsContainerCustomizableDirective,
            ConsentDetailsHeaderCustomizableDirective,
            ConsentDetailsTppDetailsCustomizableDirective,
            ConsentDetailsPermissionsListCustomizableDirective,
            ConsentDetailsAccountsListCustomizableDirective], imports: [i2$1.CommonModule, i1__namespace$4.BackbaseCoreModule, i1$2.ConsentUiModule,
            i7.CollapsibleModule,
            i2$3.PhoneNumberModule,
            i1$4.ProductItemBasicAccountModule,
            i5.BbDatePipeModule,
            i8.IconModule,
            i9.ModalModule,
            i10.LoadingIndicatorModule,
            i2$2.BadgeModule,
            i1$1.EmptyStateModule,
            i4.ButtonModule,
            i2.NotificationModule], exports: [ConsentDetailsWidgetComponent,
            ConsentDetailsTppDetailsComponent,
            ConsentDetailsAccountsListComponent,
            ConsentDetailsPermissionsListComponent,
            ConsentDetailsContainerComponent,
            ConsentDetailsHeaderComponent,
            ConsentDetailsErrorComponent, ConsentDetailsContainerCustomizableDirective,
            ConsentDetailsHeaderCustomizableDirective,
            ConsentDetailsTppDetailsCustomizableDirective,
            ConsentDetailsPermissionsListCustomizableDirective,
            ConsentDetailsAccountsListCustomizableDirective, i1$2.ConsentUiModule,
            i7.CollapsibleModule,
            i2$3.PhoneNumberModule,
            i1$4.ProductItemBasicAccountModule,
            i5.BbDatePipeModule,
            i8.IconModule,
            i9.ModalModule,
            i10.LoadingIndicatorModule,
            i2$2.BadgeModule,
            i1$1.EmptyStateModule,
            i4.ButtonModule,
            i2.NotificationModule] });
    ConsentDetailsWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsWidgetModule, providers: [ConsentDetailsService], imports: [__spreadArray([
                i2$1.CommonModule,
                i1$3.BackbaseCoreModule.withConfig({
                    classMap: { ConsentDetailsWidgetComponent: ConsentDetailsWidgetComponent },
                })
            ], __read(uiModules)), i1$2.ConsentUiModule,
            i7.CollapsibleModule,
            i2$3.PhoneNumberModule,
            i1$4.ProductItemBasicAccountModule,
            i5.BbDatePipeModule,
            i8.IconModule,
            i9.ModalModule,
            i10.LoadingIndicatorModule,
            i2$2.BadgeModule,
            i1$1.EmptyStateModule,
            i4.ButtonModule,
            i2.NotificationModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentDetailsWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([
                            i2$1.CommonModule,
                            i1$3.BackbaseCoreModule.withConfig({
                                classMap: { ConsentDetailsWidgetComponent: ConsentDetailsWidgetComponent },
                            })
                        ], __read(uiModules)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(uiModules)),
                        providers: [ConsentDetailsService],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ConsentDetailsHeaderCustomizableDirective = ConsentDetailsHeaderCustomizableDirective;
    exports.ConsentDetailsWidgetComponent = ConsentDetailsWidgetComponent;
    exports.ConsentDetailsWidgetModule = ConsentDetailsWidgetModule;
    exports.Permission = Permission;
    exports["ӨConsentDetailsAccountsListComponent"] = ConsentDetailsAccountsListComponent;
    exports["ӨConsentDetailsAccountsListCustomizableDirective"] = ConsentDetailsAccountsListCustomizableDirective;
    exports["ӨConsentDetailsContainerComponent"] = ConsentDetailsContainerComponent;
    exports["ӨConsentDetailsContainerCustomizableDirective"] = ConsentDetailsContainerCustomizableDirective;
    exports["ӨConsentDetailsErrorComponent"] = ConsentDetailsErrorComponent;
    exports["ӨConsentDetailsHeaderComponent"] = ConsentDetailsHeaderComponent;
    exports["ӨConsentDetailsPermissionsListComponent"] = ConsentDetailsPermissionsListComponent;
    exports["ӨConsentDetailsPermissionsListCustomizableDirective"] = ConsentDetailsPermissionsListCustomizableDirective;
    exports["ӨConsentDetailsTppDetailsComponent"] = ConsentDetailsTppDetailsComponent;
    exports["ӨConsentDetailsTppDetailsCustomizableDirective"] = ConsentDetailsTppDetailsCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-consent-details-widget-ang.umd.js.map
