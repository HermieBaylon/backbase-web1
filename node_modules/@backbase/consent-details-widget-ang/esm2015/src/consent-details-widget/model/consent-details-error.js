export class ConsentDetailsAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsAccessDenied';
    }
}
export class ConsentDetailsNotFound {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsNotFound';
    }
}
export class ConsentDetailsBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsBadRequest';
    }
}
export class ConsentDetailsUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsUnknownError';
    }
}
export class ConsentDetailsConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsConnectivityError';
    }
}
export const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ConsentDetailsUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ConsentDetailsConnectivityError(error);
            case 400:
                return new ConsentDetailsBadRequest(error);
            case 401:
                return new ConsentDetailsAccessDenied(error);
            case 403:
                return new ConsentDetailsAccessDenied(error);
            case 404:
                return new ConsentDetailsNotFound(error);
            default:
                return new ConsentDetailsUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1kZXRhaWxzLWVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb25zZW50LWRldGFpbHMtd2lkZ2V0LWFuZy9zcmMvY29uc2VudC1kZXRhaWxzLXdpZGdldC9tb2RlbC9jb25zZW50LWRldGFpbHMtZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLDBCQUEwQjtJQUVyQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQWlDLDRCQUE0QixDQUFDO0lBQ2xCLENBQUM7Q0FDbEQ7QUFFRCxNQUFNLE9BQU8sc0JBQXNCO0lBRWpDLFlBQXFCLEtBQXdCO1FBQXhCLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBRDdDLFNBQUksR0FBNkIsd0JBQXdCLENBQUM7SUFDVixDQUFDO0NBQ2xEO0FBRUQsTUFBTSxPQUFPLHdCQUF3QjtJQUVuQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQStCLDBCQUEwQixDQUFDO0lBQ2QsQ0FBQztDQUNsRDtBQUVELE1BQU0sT0FBTywwQkFBMEI7SUFFckMsWUFBcUIsS0FBd0I7UUFBeEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFEN0MsU0FBSSxHQUFpQyw0QkFBNEIsQ0FBQztJQUNsQixDQUFDO0NBQ2xEO0FBRUQsTUFBTSxPQUFPLCtCQUErQjtJQUUxQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQXNDLGlDQUFpQyxDQUFDO0lBQzVCLENBQUM7Q0FDbEQ7QUFTRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUF3QixFQUF1QixFQUFFO0lBQzFFLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7UUFDckMsT0FBTyxJQUFJLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlDO1NBQU07UUFDTCxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDcEIsS0FBSyxDQUFDO2dCQUNKLE9BQU8sSUFBSSwrQkFBK0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdDLEtBQUssR0FBRztnQkFDTixPQUFPLElBQUksMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNDO2dCQUNFLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRDtLQUNGO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50RGV0YWlsc0FjY2Vzc0RlbmllZCB7XG4gIGtpbmQ6ICdDb25zZW50RGV0YWlsc0FjY2Vzc0RlbmllZCcgPSAnQ29uc2VudERldGFpbHNBY2Nlc3NEZW5pZWQnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50RGV0YWlsc05vdEZvdW5kIHtcbiAga2luZDogJ0NvbnNlbnREZXRhaWxzTm90Rm91bmQnID0gJ0NvbnNlbnREZXRhaWxzTm90Rm91bmQnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50RGV0YWlsc0JhZFJlcXVlc3Qge1xuICBraW5kOiAnQ29uc2VudERldGFpbHNCYWRSZXF1ZXN0JyA9ICdDb25zZW50RGV0YWlsc0JhZFJlcXVlc3QnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50RGV0YWlsc1Vua25vd25FcnJvciB7XG4gIGtpbmQ6ICdDb25zZW50RGV0YWlsc1Vua25vd25FcnJvcicgPSAnQ29uc2VudERldGFpbHNVbmtub3duRXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50RGV0YWlsc0Nvbm5lY3Rpdml0eUVycm9yIHtcbiAga2luZDogJ0NvbnNlbnREZXRhaWxzQ29ubmVjdGl2aXR5RXJyb3InID0gJ0NvbnNlbnREZXRhaWxzQ29ubmVjdGl2aXR5RXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCB0eXBlIENvbnNlbnREZXRhaWxzRXJyb3IgPVxuICB8IENvbnNlbnREZXRhaWxzQWNjZXNzRGVuaWVkXG4gIHwgQ29uc2VudERldGFpbHNOb3RGb3VuZFxuICB8IENvbnNlbnREZXRhaWxzQmFkUmVxdWVzdFxuICB8IENvbnNlbnREZXRhaWxzVW5rbm93bkVycm9yXG4gIHwgQ29uc2VudERldGFpbHNDb25uZWN0aXZpdHlFcnJvcjtcblxuZXhwb3J0IGNvbnN0IHBhcnNlRXJyb3IgPSAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogQ29uc2VudERldGFpbHNFcnJvciA9PiB7XG4gIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcbiAgICByZXR1cm4gbmV3IENvbnNlbnREZXRhaWxzVW5rbm93bkVycm9yKGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGVycm9yLnN0YXR1cykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnREZXRhaWxzQ29ubmVjdGl2aXR5RXJyb3IoZXJyb3IpO1xuICAgICAgY2FzZSA0MDA6XG4gICAgICAgIHJldHVybiBuZXcgQ29uc2VudERldGFpbHNCYWRSZXF1ZXN0KGVycm9yKTtcbiAgICAgIGNhc2UgNDAxOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnREZXRhaWxzQWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnREZXRhaWxzQWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDA0OlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnREZXRhaWxzTm90Rm91bmQoZXJyb3IpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zZW50RGV0YWlsc1Vua25vd25FcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG59O1xuIl19