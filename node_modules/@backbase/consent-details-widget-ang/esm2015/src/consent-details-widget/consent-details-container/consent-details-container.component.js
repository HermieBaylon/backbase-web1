import { Component, Directive, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { combineLatest } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import { Status } from '../model/constants';
import * as i0 from "@angular/core";
import * as i1 from "../consent-details.service";
import * as i2 from "@angular/router";
import * as i3 from "../consent-details-header/consent-details-header.component";
import * as i4 from "../consent-details-tpp-details/consent-details-tpp-details.component";
import * as i5 from "../consent-details-accounts-list/consent-details-accounts-list.component";
import * as i6 from "../consent-details-permissions-list/consent-details-permissions-list.component";
import * as i7 from "@backbase/ui-ang/collapsible";
import * as i8 from "@backbase/ui-ang/icon";
import * as i9 from "@backbase/ui-ang/modal";
import * as i10 from "@backbase/ui-ang/loading-indicator";
import * as i11 from "../consent-details-error/consent-details-error.component";
import * as i12 from "@angular/common";
import * as i13 from "@backbase/ui-ang/button";
import * as i14 from "@backbase/ui-ang/date-pipe";
export class ConsentDetailsContainerComponent {
    constructor(detailsService, route) {
        this.detailsService = detailsService;
        this.route = route;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Notification error template reference
         */
        this.notificationErrorTemplate = '';
        /**
         * Notification success template reference
         */
        this.notificationSuccessTemplate = '';
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.detailsService.loading;
        /**
         * Stream of consent details request errors
         */
        this.error = this.detailsService.error;
        /**
         * Stream of consent ID
         */
        this.consentId = this.getRouteParam(this.route, 'consentId').pipe(map((consentId) => consentId || ''));
        /**
         * Stream of consent details
         */
        this.consentDetails = this.detailsService.consentDetails;
        /**
         * Consent reject modal visibility flag
         */
        this.isModalOpen = false;
        /**
         * Consent status enumeration
         */
        this.Status = Status;
    }
    ngOnInit() {
        this.detailsService.getConsentFrom(this.consentId);
    }
    /**
     * Open consent reject modal
     */
    openRejectConsentModal() {
        this.isModalOpen = true;
    }
    /**
     * Close consent reject modal
     */
    dismissRejectConsentModal() {
        this.isModalOpen = false;
    }
    /**
     * Revoke consent
     */
    revokeConsent() {
        this.detailsService.requestRevoke(this.notificationErrorTemplate, this.notificationSuccessTemplate).subscribe();
        this.dismissRejectConsentModal();
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
ConsentDetailsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerComponent, deps: [{ token: i1.ConsentDetailsService }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsContainerComponent, selector: "bb-consent-details-container", viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }, { propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }], ngImport: i0, template: "<ng-container\n  bbConsentDetailsContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    consentDetails: consentDetails | async,\n    loading: loading | async,\n    error: error | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentDetailsContainerCustomizable\n  let-hostRef\n  let-consentDetails=\"context.consentDetails\"\n  let-error=\"context.error\"\n  let-loading=\"context.loading\">\n  <ng-container *ngIf=\"hostRef.consentId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!error; else errorTemplate\">\n        <bb-consent-details-header\n          [expiryDate]=\"consentDetails?.expiryDate\"\n          [status]=\"consentDetails?.status\"\n          [tpp]=\"consentDetails?.tpp\"\n          (revokeConsent)=\"hostRef.openRejectConsentModal()\">\n        </bb-consent-details-header>\n\n        <div class=\"bb-consent-details\">\n          <!-- Large Viewports -->\n          <div class=\"bb-consent-details__lg\">\n            <bb-consent-third-party-details [tpp]=\"consentDetails?.tpp\"> </bb-consent-third-party-details>\n            <div class=\"bb-consent-details__lg-wrapper\">\n              <div class=\"bb-consent-details__lg-wrapper-item\">\n                <bb-consent-details-accounts-list [accounts]=\"consentDetails?.accounts\">\n                </bb-consent-details-accounts-list>\n              </div>\n              <bb-consent-details-permissions-list [permissions]=\"consentDetails?.permissions\">\n              </bb-consent-details-permissions-list>\n            </div>\n          </div>\n\n          <!-- Mobile Viewports -->\n          <div class=\"bb-consent-details__sm\">\n            <div class=\"bb-block bb-block--lg\">\n              <div class=\"bb-block bb-block--md\">\n                <div\n                  i18n=\"Expired on|Consent is expired@@consent-details.container.heading.expiredOn\"\n                  class=\"bb-text-bold\"\n                  *ngIf=\"consentDetails?.status === hostRef.Status.EXPIRED\">\n                  Expired on\n                </div>\n                <div\n                  i18n=\"Expiry Date|Expiry Date of Consent@@consent-details.container.heading.expiryDate\"\n                  class=\"bb-text-bold\"\n                  *ngIf=\"consentDetails?.status !== hostRef.Status.EXPIRED\">\n                  Expiry date\n                </div>\n                <div>\n                  {{ consentDetails.expiryDate | bbDate: 'bbShort' }}\n                </div>\n              </div>\n              <div class=\"bb-block bb-block--md\">\n                <bb-consent-details-accounts-list [accounts]=\"consentDetails?.accounts\">\n                </bb-consent-details-accounts-list>\n              </div>\n              <bb-consent-details-permissions-list [permissions]=\"consentDetails?.permissions\">\n              </bb-consent-details-permissions-list>\n            </div>\n            <bb-collapsible-ui>\n              <ng-template bbCollapsibleHeader let-toggle=\"toggle\">\n                <div class=\"bb-block bb-block--md\">\n                  <div (click)=\"toggle()\" class=\"bb-consent-details__sm-collapsible\">\n                    <span\n                      class=\"bb-text-bold\"\n                      i18n=\"See other details|Third party details@@consent-details.container.label.seeDetails\">\n                      See other details\n                    </span>\n                    <bb-icon-ui name=\"toggle-down\" size=\"sm\"> </bb-icon-ui>\n                  </div>\n                </div>\n              </ng-template>\n              <ng-template bbCollapsibleBody>\n                <bb-consent-third-party-details [tpp]=\"consentDetails?.tpp\"> </bb-consent-third-party-details>\n              </ng-template>\n            </bb-collapsible-ui>\n\n            <!-- Small Viewport Revoke Button -->\n            <div\n              *ngIf=\"consentDetails?.status === hostRef.Status.ACTIVE\"\n              class=\"bb-consent-details__button bb-button-bar\">\n              <button\n                bbButton\n                class=\"bb-button-bar__button\"\n                (click)=\"hostRef.openRejectConsentModal()\"\n                color=\"danger\"\n                i18n=\"Revoke Consent|Revoke consent button@@consent-details.header.button.revoke-consent\">\n                Revoke Consent\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <bb-modal-ui [isOpen]=\"hostRef.isModalOpen\">\n          <bb-modal-header-ui>\n            <ng-template bbCustomModalHeader>\n              <span\n                class=\"bb-text-bold\"\n                data-role=\"dialog-title\"\n                i18n=\"Revoke Consent?|Revoke consent heading@@consent-details.container.heading.revoke-consent\"\n                bbConfirmTitle>\n                Revoke Consent?\n              </span>\n            </ng-template>\n          </bb-modal-header-ui>\n          <bb-modal-body-ui>\n            <ng-template bbCustomModalBody>\n              <div\n                data-role=\"dialog-question\"\n                i18n=\"\n                  Are you sure you want to permanently revoke consent? This action can't be undone.| Revoke Consent\n                  body@@consent-details.container.body.revoke-consent\"\n                bbConfirmBody>\n                Are you sure you want to permanently revoke consent for {{ consentDetails?.tpp.name }}? This action\n                can't be undone.\n              </div>\n            </ng-template>\n          </bb-modal-body-ui>\n          <bb-modal-footer-ui>\n            <ng-template bbCustomModalFooter>\n              <button\n                bbButton\n                data-role=\"cancel-button\"\n                color=\"secondary\"\n                (click)=\"hostRef.dismissRejectConsentModal()\"\n                i18n=\"Cancel|Cancel and close modal@@consent-details.container.button.label.cancel\">\n                Cancel\n              </button>\n              <button\n                bbButton\n                color=\"danger\"\n                data-role=\"revoke-button\"\n                (click)=\"hostRef.revokeConsent()\"\n                i18n=\"Revoke|Approve revoking of consent@@consent-details.container.button.label.revoke\">\n                Revoke\n              </button>\n            </ng-template>\n          </bb-modal-footer-ui>\n        </bb-modal-ui>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui loadersize=\"lg\"></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-details-error [consentId]=\"hostRef.consentId | async\" [errorKind]=\"error?.kind\">\n      </bb-consent-details-error>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationError>\n  <span i18n=\"Failed to revoke consent|Error notification message@@consent-details.container.notification.error\">\n    Failed to revoke consent\n  </span>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span\n    i18n=\"Successfully revoked consent |Success notification message@@consent-details.container.notification.success\">\n    Consent was revoked\n  </span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.ConsentDetailsHeaderComponent; }), selector: "bb-consent-details-header", inputs: ["tpp", "status", "expiryDate"], outputs: ["revokeConsent"] }, { type: i0.forwardRef(function () { return i4.ConsentDetailsTppDetailsComponent; }), selector: "bb-consent-third-party-details", inputs: ["tpp"] }, { type: i0.forwardRef(function () { return i5.ConsentDetailsAccountsListComponent; }), selector: "bb-consent-details-accounts-list", inputs: ["accounts"] }, { type: i0.forwardRef(function () { return i6.ConsentDetailsPermissionsListComponent; }), selector: "bb-consent-details-permissions-list", inputs: ["permissions"] }, { type: i0.forwardRef(function () { return i7.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0.forwardRef(function () { return i8.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i9.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i9.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i9.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i9.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i10.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i11.ConsentDetailsErrorComponent; }), selector: "bb-consent-details-error", inputs: ["consentId", "errorKind"] }], directives: [{ type: i0.forwardRef(function () { return ConsentDetailsContainerCustomizableDirective; }), selector: "[bbConsentDetailsContainerCustomizable]" }, { type: i0.forwardRef(function () { return i12.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0.forwardRef(function () { return i7.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0.forwardRef(function () { return i13.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i9.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i9.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i9.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0.forwardRef(function () { return i12.AsyncPipe; }), "bbDate": i0.forwardRef(function () { return i14.BbDatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-details-container',
                    templateUrl: './consent-details-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConsentDetailsService }, { type: i2.ActivatedRoute }]; }, propDecorators: { notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError', { static: true }]
            }], notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess', { static: true }]
            }] } });
export class ConsentDetailsContainerCustomizableDirective extends BbTemplate {
}
ConsentDetailsContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentDetailsContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsContainerCustomizableDirective, selector: "[bbConsentDetailsContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentDetailsContainerCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1kZXRhaWxzLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtZGV0YWlscy13aWRnZXQtYW5nL3NyYy9jb25zZW50LWRldGFpbHMtd2lkZ2V0L2NvbnNlbnQtZGV0YWlscy1jb250YWluZXIvY29uc2VudC1kZXRhaWxzLWNvbnRhaW5lci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtZGV0YWlscy13aWRnZXQtYW5nL3NyYy9jb25zZW50LWRldGFpbHMtd2lkZ2V0L2NvbnNlbnQtZGV0YWlscy1jb250YWluZXIvY29uc2VudC1kZXRhaWxzLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBZSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFckYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzNELE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUk1QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPNUMsTUFBTSxPQUFPLGdDQUFnQztJQWdGM0MsWUFBNkIsY0FBcUMsRUFBbUIsS0FBcUI7UUFBN0UsbUJBQWMsR0FBZCxjQUFjLENBQXVCO1FBQW1CLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBL0UxRzs7V0FFRztRQUNNLFlBQU8sR0FBcUMsSUFBSSxDQUFDO1FBQzFEOztXQUVHO1FBRUgsOEJBQXlCLEdBQThCLEVBQUUsQ0FBQztRQUMxRDs7V0FFRztRQUVILGdDQUEyQixHQUE4QixFQUFFLENBQUM7UUFDNUQ7O1dBRUc7UUFDTSxZQUFPLEdBQXdCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDO1FBQ3BFOztXQUVHO1FBQ00sVUFBSyxHQUFnRCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztRQUN4Rjs7V0FFRztRQUNNLGNBQVMsR0FBdUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDdkYsR0FBRyxDQUFDLENBQUMsU0FBd0IsRUFBRSxFQUFFLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUNuRCxDQUFDO1FBQ0Y7O1dBRUc7UUFDTSxtQkFBYyxHQUEyQyxJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQztRQUNyRzs7V0FFRztRQUNILGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3BCOztXQUVHO1FBQ00sV0FBTSxHQUFHLE1BQU0sQ0FBQztJQXdDb0YsQ0FBQztJQXRDOUcsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxzQkFBc0I7UUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gseUJBQXlCO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0lBQzNCLENBQUM7SUFFRDs7T0FFRztJQUNILGFBQWE7UUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEgsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVPLGFBQWEsQ0FBQyxLQUFxQixFQUFFLEtBQWE7UUFDeEQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUEwQixRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNqQixPQUFPLFVBQVUsQ0FBQztTQUNuQjtRQUVELE9BQU8sYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM5RSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDOzs4SEE5RVUsZ0NBQWdDO2tIQUFoQyxnQ0FBZ0MscVZDZjdDLGt2T0FnTEEsb2pFRDNFYSw0Q0FBNEM7NEZBdEY1QyxnQ0FBZ0M7a0JBSjVDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsV0FBVyxFQUFFLDRDQUE0QztpQkFDMUQ7eUlBVUMseUJBQXlCO3NCQUR4QixTQUFTO3VCQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFNaEQsMkJBQTJCO3NCQUQxQixTQUFTO3VCQUFDLHFCQUFxQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7QUF5RXBELE1BQU0sT0FBTyw0Q0FBNkMsU0FBUSxVQUdqRTs7MElBSFksNENBQTRDOzhIQUE1Qyw0Q0FBNEM7NEZBQTVDLDRDQUE0QztrQkFIeEQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUNBQXlDO2lCQUNwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBQYXJhbU1hcCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBCYlRlbXBsYXRlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBwbHVjayB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgQ29uc2VudERldGFpbHNTZXJ2aWNlIH0gZnJvbSAnLi4vY29uc2VudC1kZXRhaWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29uc2VudERldGFpbHMsIENvbnNlbnREZXRhaWxzQ29udGFpbmVyQ3VzdG9taXphYmxlQ29udGV4dCB9IGZyb20gJy4uL21vZGVsL3R5cGVzJztcbmltcG9ydCB7IFN0YXR1cyB9IGZyb20gJy4uL21vZGVsL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDb25zZW50RGV0YWlsc0Vycm9yIH0gZnJvbSAnLi4vbW9kZWwvY29uc2VudC1kZXRhaWxzLWVycm9yJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItY29uc2VudC1kZXRhaWxzLWNvbnRhaW5lcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb25zZW50LWRldGFpbHMtY29udGFpbmVyLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQ29uc2VudERldGFpbHNDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKipcbiAgICogQ29tcG9uZW50IGNvbnRleHRcbiAgICovXG4gIHJlYWRvbmx5IGhvc3RSZWY6IENvbnNlbnREZXRhaWxzQ29udGFpbmVyQ29tcG9uZW50ID0gdGhpcztcbiAgLyoqXG4gICAqIE5vdGlmaWNhdGlvbiBlcnJvciB0ZW1wbGF0ZSByZWZlcmVuY2VcbiAgICovXG4gIEBWaWV3Q2hpbGQoJ25vdGlmaWNhdGlvbkVycm9yJywgeyBzdGF0aWM6IHRydWUgfSlcbiAgbm90aWZpY2F0aW9uRXJyb3JUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiB8IHN0cmluZyA9ICcnO1xuICAvKipcbiAgICogTm90aWZpY2F0aW9uIHN1Y2Nlc3MgdGVtcGxhdGUgcmVmZXJlbmNlXG4gICAqL1xuICBAVmlld0NoaWxkKCdub3RpZmljYXRpb25TdWNjZXNzJywgeyBzdGF0aWM6IHRydWUgfSlcbiAgbm90aWZpY2F0aW9uU3VjY2Vzc1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgc3RyaW5nID0gJyc7XG4gIC8qKlxuICAgKiBTdHJlYW0gb2YgbG9hZGluZyBzcGlubmVyIHZpc2liaWxpdHkgZmxhZ1xuICAgKi9cbiAgcmVhZG9ubHkgbG9hZGluZzogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuZGV0YWlsc1NlcnZpY2UubG9hZGluZztcbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBjb25zZW50IGRldGFpbHMgcmVxdWVzdCBlcnJvcnNcbiAgICovXG4gIHJlYWRvbmx5IGVycm9yOiBPYnNlcnZhYmxlPENvbnNlbnREZXRhaWxzRXJyb3IgfCB1bmRlZmluZWQ+ID0gdGhpcy5kZXRhaWxzU2VydmljZS5lcnJvcjtcbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBjb25zZW50IElEXG4gICAqL1xuICByZWFkb25seSBjb25zZW50SWQ6IE9ic2VydmFibGU8c3RyaW5nPiA9IHRoaXMuZ2V0Um91dGVQYXJhbSh0aGlzLnJvdXRlLCAnY29uc2VudElkJykucGlwZShcbiAgICBtYXAoKGNvbnNlbnRJZDogc3RyaW5nIHwgbnVsbCkgPT4gY29uc2VudElkIHx8ICcnKSxcbiAgKTtcbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBjb25zZW50IGRldGFpbHNcbiAgICovXG4gIHJlYWRvbmx5IGNvbnNlbnREZXRhaWxzOiBPYnNlcnZhYmxlPENvbnNlbnREZXRhaWxzIHwgdW5kZWZpbmVkPiA9IHRoaXMuZGV0YWlsc1NlcnZpY2UuY29uc2VudERldGFpbHM7XG4gIC8qKlxuICAgKiBDb25zZW50IHJlamVjdCBtb2RhbCB2aXNpYmlsaXR5IGZsYWdcbiAgICovXG4gIGlzTW9kYWxPcGVuID0gZmFsc2U7XG4gIC8qKlxuICAgKiBDb25zZW50IHN0YXR1cyBlbnVtZXJhdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgU3RhdHVzID0gU3RhdHVzO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZGV0YWlsc1NlcnZpY2UuZ2V0Q29uc2VudEZyb20odGhpcy5jb25zZW50SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW4gY29uc2VudCByZWplY3QgbW9kYWxcbiAgICovXG4gIG9wZW5SZWplY3RDb25zZW50TW9kYWwoKTogdm9pZCB7XG4gICAgdGhpcy5pc01vZGFsT3BlbiA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2UgY29uc2VudCByZWplY3QgbW9kYWxcbiAgICovXG4gIGRpc21pc3NSZWplY3RDb25zZW50TW9kYWwoKTogdm9pZCB7XG4gICAgdGhpcy5pc01vZGFsT3BlbiA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldm9rZSBjb25zZW50XG4gICAqL1xuICByZXZva2VDb25zZW50KCk6IHZvaWQge1xuICAgIHRoaXMuZGV0YWlsc1NlcnZpY2UucmVxdWVzdFJldm9rZSh0aGlzLm5vdGlmaWNhdGlvbkVycm9yVGVtcGxhdGUsIHRoaXMubm90aWZpY2F0aW9uU3VjY2Vzc1RlbXBsYXRlKS5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLmRpc21pc3NSZWplY3RDb25zZW50TW9kYWwoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Um91dGVQYXJhbShyb3V0ZTogQWN0aXZhdGVkUm91dGUsIHBhcmFtOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcbiAgICBjb25zdCBwYXJhbVZhbHVlID0gcm91dGUucGFyYW1NYXAucGlwZShwbHVjazxQYXJhbU1hcCwgc3RyaW5nIHwgbnVsbD4oJ3BhcmFtcycsIHBhcmFtKSk7XG5cbiAgICBpZiAoIXJvdXRlLnBhcmVudCkge1xuICAgICAgcmV0dXJuIHBhcmFtVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW3BhcmFtVmFsdWUsIHRoaXMuZ2V0Um91dGVQYXJhbShyb3V0ZS5wYXJlbnQsIHBhcmFtKV0pLnBpcGUoXG4gICAgICBtYXAocGFyYW1zID0+IHBhcmFtc1swXSB8fCBwYXJhbXNbMV0pLFxuICAgICk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRldGFpbHNTZXJ2aWNlOiBDb25zZW50RGV0YWlsc1NlcnZpY2UsIHByaXZhdGUgcmVhZG9ubHkgcm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7fVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJDb25zZW50RGV0YWlsc0NvbnRhaW5lckN1c3RvbWl6YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBDb25zZW50RGV0YWlsc0NvbnRhaW5lckN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIENvbnNlbnREZXRhaWxzQ29udGFpbmVyQ29tcG9uZW50LFxuICBDb25zZW50RGV0YWlsc0NvbnRhaW5lckN1c3RvbWl6YWJsZUNvbnRleHRcbj4ge31cbiIsIjxuZy1jb250YWluZXJcbiAgYmJDb25zZW50RGV0YWlsc0NvbnRhaW5lckN1c3RvbWl6YWJsZVxuICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgIGNvbnNlbnREZXRhaWxzOiBjb25zZW50RGV0YWlscyB8IGFzeW5jLFxuICAgIGxvYWRpbmc6IGxvYWRpbmcgfCBhc3luYyxcbiAgICBlcnJvcjogZXJyb3IgfCBhc3luY1xuICB9XCI+XG48L25nLWNvbnRhaW5lcj5cblxuPG5nLXRlbXBsYXRlXG4gIGJiQ29uc2VudERldGFpbHNDb250YWluZXJDdXN0b21pemFibGVcbiAgbGV0LWhvc3RSZWZcbiAgbGV0LWNvbnNlbnREZXRhaWxzPVwiY29udGV4dC5jb25zZW50RGV0YWlsc1wiXG4gIGxldC1lcnJvcj1cImNvbnRleHQuZXJyb3JcIlxuICBsZXQtbG9hZGluZz1cImNvbnRleHQubG9hZGluZ1wiPlxuICA8bmctY29udGFpbmVyICpuZ0lmPVwiaG9zdFJlZi5jb25zZW50SWQgfCBhc3luYzsgZWxzZSBlcnJvclRlbXBsYXRlXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFsb2FkaW5nOyBlbHNlIGxvYWRpbmdUZW1wbGF0ZVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFlcnJvcjsgZWxzZSBlcnJvclRlbXBsYXRlXCI+XG4gICAgICAgIDxiYi1jb25zZW50LWRldGFpbHMtaGVhZGVyXG4gICAgICAgICAgW2V4cGlyeURhdGVdPVwiY29uc2VudERldGFpbHM/LmV4cGlyeURhdGVcIlxuICAgICAgICAgIFtzdGF0dXNdPVwiY29uc2VudERldGFpbHM/LnN0YXR1c1wiXG4gICAgICAgICAgW3RwcF09XCJjb25zZW50RGV0YWlscz8udHBwXCJcbiAgICAgICAgICAocmV2b2tlQ29uc2VudCk9XCJob3N0UmVmLm9wZW5SZWplY3RDb25zZW50TW9kYWwoKVwiPlxuICAgICAgICA8L2JiLWNvbnNlbnQtZGV0YWlscy1oZWFkZXI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJiLWNvbnNlbnQtZGV0YWlsc1wiPlxuICAgICAgICAgIDwhLS0gTGFyZ2UgVmlld3BvcnRzIC0tPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYi1jb25zZW50LWRldGFpbHNfX2xnXCI+XG4gICAgICAgICAgICA8YmItY29uc2VudC10aGlyZC1wYXJ0eS1kZXRhaWxzIFt0cHBdPVwiY29uc2VudERldGFpbHM/LnRwcFwiPiA8L2JiLWNvbnNlbnQtdGhpcmQtcGFydHktZGV0YWlscz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYi1jb25zZW50LWRldGFpbHNfX2xnLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJiLWNvbnNlbnQtZGV0YWlsc19fbGctd3JhcHBlci1pdGVtXCI+XG4gICAgICAgICAgICAgICAgPGJiLWNvbnNlbnQtZGV0YWlscy1hY2NvdW50cy1saXN0IFthY2NvdW50c109XCJjb25zZW50RGV0YWlscz8uYWNjb3VudHNcIj5cbiAgICAgICAgICAgICAgICA8L2JiLWNvbnNlbnQtZGV0YWlscy1hY2NvdW50cy1saXN0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJiLWNvbnNlbnQtZGV0YWlscy1wZXJtaXNzaW9ucy1saXN0IFtwZXJtaXNzaW9uc109XCJjb25zZW50RGV0YWlscz8ucGVybWlzc2lvbnNcIj5cbiAgICAgICAgICAgICAgPC9iYi1jb25zZW50LWRldGFpbHMtcGVybWlzc2lvbnMtbGlzdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPCEtLSBNb2JpbGUgVmlld3BvcnRzIC0tPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYi1jb25zZW50LWRldGFpbHNfX3NtXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLWxnXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tbWRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBpMThuPVwiRXhwaXJlZCBvbnxDb25zZW50IGlzIGV4cGlyZWRAQGNvbnNlbnQtZGV0YWlscy5jb250YWluZXIuaGVhZGluZy5leHBpcmVkT25cIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJiYi10ZXh0LWJvbGRcIlxuICAgICAgICAgICAgICAgICAgKm5nSWY9XCJjb25zZW50RGV0YWlscz8uc3RhdHVzID09PSBob3N0UmVmLlN0YXR1cy5FWFBJUkVEXCI+XG4gICAgICAgICAgICAgICAgICBFeHBpcmVkIG9uXG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgaTE4bj1cIkV4cGlyeSBEYXRlfEV4cGlyeSBEYXRlIG9mIENvbnNlbnRAQGNvbnNlbnQtZGV0YWlscy5jb250YWluZXIuaGVhZGluZy5leHBpcnlEYXRlXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYmItdGV4dC1ib2xkXCJcbiAgICAgICAgICAgICAgICAgICpuZ0lmPVwiY29uc2VudERldGFpbHM/LnN0YXR1cyAhPT0gaG9zdFJlZi5TdGF0dXMuRVhQSVJFRFwiPlxuICAgICAgICAgICAgICAgICAgRXhwaXJ5IGRhdGVcbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAge3sgY29uc2VudERldGFpbHMuZXhwaXJ5RGF0ZSB8IGJiRGF0ZTogJ2JiU2hvcnQnIH19XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLW1kXCI+XG4gICAgICAgICAgICAgICAgPGJiLWNvbnNlbnQtZGV0YWlscy1hY2NvdW50cy1saXN0IFthY2NvdW50c109XCJjb25zZW50RGV0YWlscz8uYWNjb3VudHNcIj5cbiAgICAgICAgICAgICAgICA8L2JiLWNvbnNlbnQtZGV0YWlscy1hY2NvdW50cy1saXN0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJiLWNvbnNlbnQtZGV0YWlscy1wZXJtaXNzaW9ucy1saXN0IFtwZXJtaXNzaW9uc109XCJjb25zZW50RGV0YWlscz8ucGVybWlzc2lvbnNcIj5cbiAgICAgICAgICAgICAgPC9iYi1jb25zZW50LWRldGFpbHMtcGVybWlzc2lvbnMtbGlzdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGJiLWNvbGxhcHNpYmxlLXVpPlxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgYmJDb2xsYXBzaWJsZUhlYWRlciBsZXQtdG9nZ2xlPVwidG9nZ2xlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1tZFwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiAoY2xpY2spPVwidG9nZ2xlKClcIiBjbGFzcz1cImJiLWNvbnNlbnQtZGV0YWlsc19fc20tY29sbGFwc2libGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJiLXRleHQtYm9sZFwiXG4gICAgICAgICAgICAgICAgICAgICAgaTE4bj1cIlNlZSBvdGhlciBkZXRhaWxzfFRoaXJkIHBhcnR5IGRldGFpbHNAQGNvbnNlbnQtZGV0YWlscy5jb250YWluZXIubGFiZWwuc2VlRGV0YWlsc1wiPlxuICAgICAgICAgICAgICAgICAgICAgIFNlZSBvdGhlciBkZXRhaWxzXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGJiLWljb24tdWkgbmFtZT1cInRvZ2dsZS1kb3duXCIgc2l6ZT1cInNtXCI+IDwvYmItaWNvbi11aT5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgYmJDb2xsYXBzaWJsZUJvZHk+XG4gICAgICAgICAgICAgICAgPGJiLWNvbnNlbnQtdGhpcmQtcGFydHktZGV0YWlscyBbdHBwXT1cImNvbnNlbnREZXRhaWxzPy50cHBcIj4gPC9iYi1jb25zZW50LXRoaXJkLXBhcnR5LWRldGFpbHM+XG4gICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2JiLWNvbGxhcHNpYmxlLXVpPlxuXG4gICAgICAgICAgICA8IS0tIFNtYWxsIFZpZXdwb3J0IFJldm9rZSBCdXR0b24gLS0+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICpuZ0lmPVwiY29uc2VudERldGFpbHM/LnN0YXR1cyA9PT0gaG9zdFJlZi5TdGF0dXMuQUNUSVZFXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJiYi1jb25zZW50LWRldGFpbHNfX2J1dHRvbiBiYi1idXR0b24tYmFyXCI+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBiYkJ1dHRvblxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYmItYnV0dG9uLWJhcl9fYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwiaG9zdFJlZi5vcGVuUmVqZWN0Q29uc2VudE1vZGFsKClcIlxuICAgICAgICAgICAgICAgIGNvbG9yPVwiZGFuZ2VyXCJcbiAgICAgICAgICAgICAgICBpMThuPVwiUmV2b2tlIENvbnNlbnR8UmV2b2tlIGNvbnNlbnQgYnV0dG9uQEBjb25zZW50LWRldGFpbHMuaGVhZGVyLmJ1dHRvbi5yZXZva2UtY29uc2VudFwiPlxuICAgICAgICAgICAgICAgIFJldm9rZSBDb25zZW50XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxiYi1tb2RhbC11aSBbaXNPcGVuXT1cImhvc3RSZWYuaXNNb2RhbE9wZW5cIj5cbiAgICAgICAgICA8YmItbW9kYWwtaGVhZGVyLXVpPlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlIGJiQ3VzdG9tTW9kYWxIZWFkZXI+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJiYi10ZXh0LWJvbGRcIlxuICAgICAgICAgICAgICAgIGRhdGEtcm9sZT1cImRpYWxvZy10aXRsZVwiXG4gICAgICAgICAgICAgICAgaTE4bj1cIlJldm9rZSBDb25zZW50P3xSZXZva2UgY29uc2VudCBoZWFkaW5nQEBjb25zZW50LWRldGFpbHMuY29udGFpbmVyLmhlYWRpbmcucmV2b2tlLWNvbnNlbnRcIlxuICAgICAgICAgICAgICAgIGJiQ29uZmlybVRpdGxlPlxuICAgICAgICAgICAgICAgIFJldm9rZSBDb25zZW50P1xuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgIDwvYmItbW9kYWwtaGVhZGVyLXVpPlxuICAgICAgICAgIDxiYi1tb2RhbC1ib2R5LXVpPlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlIGJiQ3VzdG9tTW9kYWxCb2R5PlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgZGF0YS1yb2xlPVwiZGlhbG9nLXF1ZXN0aW9uXCJcbiAgICAgICAgICAgICAgICBpMThuPVwiXG4gICAgICAgICAgICAgICAgICBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcGVybWFuZW50bHkgcmV2b2tlIGNvbnNlbnQ/IFRoaXMgYWN0aW9uIGNhbid0IGJlIHVuZG9uZS58IFJldm9rZSBDb25zZW50XG4gICAgICAgICAgICAgICAgICBib2R5QEBjb25zZW50LWRldGFpbHMuY29udGFpbmVyLmJvZHkucmV2b2tlLWNvbnNlbnRcIlxuICAgICAgICAgICAgICAgIGJiQ29uZmlybUJvZHk+XG4gICAgICAgICAgICAgICAgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHBlcm1hbmVudGx5IHJldm9rZSBjb25zZW50IGZvciB7eyBjb25zZW50RGV0YWlscz8udHBwLm5hbWUgfX0/IFRoaXMgYWN0aW9uXG4gICAgICAgICAgICAgICAgY2FuJ3QgYmUgdW5kb25lLlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgPC9iYi1tb2RhbC1ib2R5LXVpPlxuICAgICAgICAgIDxiYi1tb2RhbC1mb290ZXItdWk+XG4gICAgICAgICAgICA8bmctdGVtcGxhdGUgYmJDdXN0b21Nb2RhbEZvb3Rlcj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGJiQnV0dG9uXG4gICAgICAgICAgICAgICAgZGF0YS1yb2xlPVwiY2FuY2VsLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgIChjbGljayk9XCJob3N0UmVmLmRpc21pc3NSZWplY3RDb25zZW50TW9kYWwoKVwiXG4gICAgICAgICAgICAgICAgaTE4bj1cIkNhbmNlbHxDYW5jZWwgYW5kIGNsb3NlIG1vZGFsQEBjb25zZW50LWRldGFpbHMuY29udGFpbmVyLmJ1dHRvbi5sYWJlbC5jYW5jZWxcIj5cbiAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBiYkJ1dHRvblxuICAgICAgICAgICAgICAgIGNvbG9yPVwiZGFuZ2VyXCJcbiAgICAgICAgICAgICAgICBkYXRhLXJvbGU9XCJyZXZva2UtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwiaG9zdFJlZi5yZXZva2VDb25zZW50KClcIlxuICAgICAgICAgICAgICAgIGkxOG49XCJSZXZva2V8QXBwcm92ZSByZXZva2luZyBvZiBjb25zZW50QEBjb25zZW50LWRldGFpbHMuY29udGFpbmVyLmJ1dHRvbi5sYWJlbC5yZXZva2VcIj5cbiAgICAgICAgICAgICAgICBSZXZva2VcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgIDwvYmItbW9kYWwtZm9vdGVyLXVpPlxuICAgICAgICA8L2JiLW1vZGFsLXVpPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG5cbiAgICA8bmctdGVtcGxhdGUgI2xvYWRpbmdUZW1wbGF0ZT5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1zdGF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgPGJiLWxvYWRpbmctaW5kaWNhdG9yLXVpIGxvYWRlcnNpemU9XCJsZ1wiPjwvYmItbG9hZGluZy1pbmRpY2F0b3ItdWk+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLXRlbXBsYXRlPlxuICA8L25nLWNvbnRhaW5lcj5cbiAgPG5nLXRlbXBsYXRlICNlcnJvclRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJiYi1zdGF0ZS1jb250YWluZXJcIj5cbiAgICAgIDxiYi1jb25zZW50LWRldGFpbHMtZXJyb3IgW2NvbnNlbnRJZF09XCJob3N0UmVmLmNvbnNlbnRJZCB8IGFzeW5jXCIgW2Vycm9yS2luZF09XCJlcnJvcj8ua2luZFwiPlxuICAgICAgPC9iYi1jb25zZW50LWRldGFpbHMtZXJyb3I+XG4gICAgPC9kaXY+XG4gIDwvbmctdGVtcGxhdGU+XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI25vdGlmaWNhdGlvbkVycm9yPlxuICA8c3BhbiBpMThuPVwiRmFpbGVkIHRvIHJldm9rZSBjb25zZW50fEVycm9yIG5vdGlmaWNhdGlvbiBtZXNzYWdlQEBjb25zZW50LWRldGFpbHMuY29udGFpbmVyLm5vdGlmaWNhdGlvbi5lcnJvclwiPlxuICAgIEZhaWxlZCB0byByZXZva2UgY29uc2VudFxuICA8L3NwYW4+XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI25vdGlmaWNhdGlvblN1Y2Nlc3M+XG4gIDxzcGFuXG4gICAgaTE4bj1cIlN1Y2Nlc3NmdWxseSByZXZva2VkIGNvbnNlbnQgfFN1Y2Nlc3Mgbm90aWZpY2F0aW9uIG1lc3NhZ2VAQGNvbnNlbnQtZGV0YWlscy5jb250YWluZXIubm90aWZpY2F0aW9uLnN1Y2Nlc3NcIj5cbiAgICBDb25zZW50IHdhcyByZXZva2VkXG4gIDwvc3Bhbj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=