import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, of, ReplaySubject } from 'rxjs';
import { catchError, distinctUntilChanged, filter, pluck, switchMap, take, tap } from 'rxjs/operators';
import { parseError } from './model/consent-details-error';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/consent";
import * as i2 from "@backbase/ui-ang/notification";
export class ConsentDetailsService {
    constructor(consentDataService, notification) {
        this.consentDataService = consentDataService;
        this.notification = notification;
        this.consentId = new ReplaySubject(1);
        this.revokingComplete = new BehaviorSubject(true);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.consentDetails = combineLatest([this.consentId, this.revokingComplete]).pipe(filter(([id]) => !!id), distinctUntilChanged(), tap(() => this.loading.next(true)), switchMap(([id]) => this.getConsentDetailsById(id)), tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)));
    }
    getConsentFrom(consentId) {
        consentId.subscribe(this.consentId);
    }
    requestRevoke(errorTemplateRef, successTemplateRef) {
        return this.consentId.pipe(take(1), filter((id) => !!id), switchMap((id) => this.revokeConsentById(id)), tap(() => {
            this.revokingComplete.next(true);
            this.showNotification(successTemplateRef, 'success');
        }), catchError(() => {
            this.showNotification(errorTemplateRef, 'error');
            return of(undefined);
        }));
    }
    getConsentDetailsById(id) {
        return this.consentDataService.getIdByIdgetId({ id }, 'response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
    revokeConsentById(id) {
        return this.consentDataService.postRevokeById({ id }, 'response').pipe(catchError((error) => {
            throw parseError(error);
        }));
    }
    showNotification(templateRef, modifier) {
        this.notification.showNotification({
            header: templateRef,
            message: '',
            modifier,
        });
    }
}
ConsentDetailsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsService, deps: [{ token: i1.ConsentsHttpService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentDetailsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConsentsHttpService }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1kZXRhaWxzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtZGV0YWlscy13aWRnZXQtYW5nL3NyYy9jb25zZW50LWRldGFpbHMtd2lkZ2V0L2NvbnNlbnQtZGV0YWlscy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFHeEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxhQUFhLEVBQWMsRUFBRSxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyRixPQUFPLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUl2RyxPQUFPLEVBQXVCLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7O0FBR2hGLE1BQU0sT0FBTyxxQkFBcUI7SUFvQmhDLFlBQ21CLGtCQUF1QyxFQUN2QyxZQUFpQztRQURqQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXFCO1FBQ3ZDLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQXJCbkMsY0FBUyxHQUFHLElBQUksYUFBYSxDQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFVLElBQUksQ0FBQyxDQUFDO1FBRTlELFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsQ0FBQztRQUM3QyxVQUFLLEdBQUcsSUFBSSxlQUFlLENBQWtDLFNBQVMsQ0FBQyxDQUFDO1FBRXhFLG1CQUFjLEdBQUcsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDbkYsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFB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QUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDb25zZW50c0h0dHBTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2NvbnNlbnQnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZiwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgcGx1Y2ssIHN3aXRjaE1hcCwgdGFrZSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9ub3RpZmljYXRpb24nO1xuaW1wb3J0IHsgQ29uc2VudERldGFpbHMgfSBmcm9tICcuL21vZGVsL3R5cGVzJztcbmltcG9ydCB7IENvbnNlbnREZXRhaWxzRXJyb3IsIHBhcnNlRXJyb3IgfSBmcm9tICcuL21vZGVsL2NvbnNlbnQtZGV0YWlscy1lcnJvcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25zZW50RGV0YWlsc1NlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbnNlbnRJZCA9IG5ldyBSZXBsYXlTdWJqZWN0PHN0cmluZz4oMSk7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmV2b2tpbmdDb21wbGV0ZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG5cbiAgcmVhZG9ubHkgbG9hZGluZyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG4gIHJlYWRvbmx5IGVycm9yID0gbmV3IEJlaGF2aW9yU3ViamVjdDxDb25zZW50RGV0YWlsc0Vycm9yIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4gIHJlYWRvbmx5IGNvbnNlbnREZXRhaWxzID0gY29tYmluZUxhdGVzdChbdGhpcy5jb25zZW50SWQsIHRoaXMucmV2b2tpbmdDb21wbGV0ZV0pLnBpcGUoXG4gICAgZmlsdGVyKChbaWRdKSA9PiAhIWlkKSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgIHRhcCgoKSA9PiB0aGlzLmxvYWRpbmcubmV4dCh0cnVlKSksXG4gICAgc3dpdGNoTWFwKChbaWRdKSA9PiB0aGlzLmdldENvbnNlbnREZXRhaWxzQnlJZChpZCkpLFxuICAgIHRhcCgoKSA9PiB0aGlzLmVycm9yLm5leHQodW5kZWZpbmVkKSksXG4gICAgY2F0Y2hFcnJvcigoZXJyb3I6IENvbnNlbnREZXRhaWxzRXJyb3IpID0+IHtcbiAgICAgIHRoaXMuZXJyb3IubmV4dChlcnJvcik7XG4gICAgICByZXR1cm4gb2YodW5kZWZpbmVkKTtcbiAgICB9KSxcbiAgICB0YXAoKCkgPT4gdGhpcy5sb2FkaW5nLm5leHQoZmFsc2UpKSxcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnNlbnREYXRhU2VydmljZTogQ29uc2VudHNIdHRwU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uU2VydmljZSxcbiAgKSB7fVxuXG4gIGdldENvbnNlbnRGcm9tKGNvbnNlbnRJZDogT2JzZXJ2YWJsZTxzdHJpbmc+KSB7XG4gICAgY29uc2VudElkLnN1YnNjcmliZSh0aGlzLmNvbnNlbnRJZCk7XG4gIH1cblxuICByZXF1ZXN0UmV2b2tlKFxuICAgIGVycm9yVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4gfCBzdHJpbmcsXG4gICAgc3VjY2Vzc1RlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+IHwgc3RyaW5nLFxuICApOiBPYnNlcnZhYmxlPGFueSB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmNvbnNlbnRJZC5waXBlKFxuICAgICAgdGFrZSgxKSxcbiAgICAgIGZpbHRlcigoaWQ6IHN0cmluZykgPT4gISFpZCksXG4gICAgICBzd2l0Y2hNYXAoKGlkOiBzdHJpbmcpID0+IHRoaXMucmV2b2tlQ29uc2VudEJ5SWQoaWQpKSxcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIHRoaXMucmV2b2tpbmdDb21wbGV0ZS5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLnNob3dOb3RpZmljYXRpb24oc3VjY2Vzc1RlbXBsYXRlUmVmLCAnc3VjY2VzcycpO1xuICAgICAgfSksXG4gICAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgdGhpcy5zaG93Tm90aWZpY2F0aW9uKGVycm9yVGVtcGxhdGVSZWYsICdlcnJvcicpO1xuICAgICAgICByZXR1cm4gb2YodW5kZWZpbmVkKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldENvbnNlbnREZXRhaWxzQnlJZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxDb25zZW50RGV0YWlscz4ge1xuICAgIHJldHVybiB0aGlzLmNvbnNlbnREYXRhU2VydmljZS5nZXRJZEJ5SWRnZXRJZCh7IGlkIH0sICdyZXNwb25zZScpLnBpcGUoXG4gICAgICBwbHVjazxIdHRwUmVzcG9uc2U8Q29uc2VudERldGFpbHM+LCBDb25zZW50RGV0YWlscz4oJ2JvZHknKSxcbiAgICAgIGNhdGNoRXJyb3I8Q29uc2VudERldGFpbHMsIG5ldmVyPigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRocm93IHBhcnNlRXJyb3IoZXJyb3IpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmV2b2tlQ29uc2VudEJ5SWQoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuY29uc2VudERhdGFTZXJ2aWNlLnBvc3RSZXZva2VCeUlkKHsgaWQgfSwgJ3Jlc3BvbnNlJykucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICB0aHJvdyBwYXJzZUVycm9yKGVycm9yKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHNob3dOb3RpZmljYXRpb24odGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4gfCBzdHJpbmcsIG1vZGlmaWVyOiAnc3VjY2VzcycgfCAnZXJyb3InKSB7XG4gICAgdGhpcy5ub3RpZmljYXRpb24uc2hvd05vdGlmaWNhdGlvbih7XG4gICAgICBoZWFkZXI6IHRlbXBsYXRlUmVmLFxuICAgICAgbWVzc2FnZTogJycsXG4gICAgICBtb2RpZmllcixcbiAgICB9KTtcbiAgfVxufVxuIl19