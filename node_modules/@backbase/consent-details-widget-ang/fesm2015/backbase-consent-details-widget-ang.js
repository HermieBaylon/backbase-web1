import * as i0 from '@angular/core';
import { Injectable, Component, Input, EventEmitter, Output, Directive, ViewChild, NgModule } from '@angular/core';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$4 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$2 from '@backbase/consent-ui';
import { ConsentUiModule } from '@backbase/consent-ui';
import * as i7 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i2$3 from '@backbase/ui-ang/phone-number-format-pipe';
import { PhoneNumberModule } from '@backbase/ui-ang/phone-number-format-pipe';
import * as i1$3 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i5 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i8 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i9 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i10 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$2 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i1$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i4 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i2 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import { ReplaySubject, BehaviorSubject, combineLatest, of } from 'rxjs';
import { filter, distinctUntilChanged, tap, switchMap, catchError, take, pluck, map } from 'rxjs/operators';
import * as i1 from '@backbase/data-ang/consent';
import * as i2$4 from '@angular/router';

class ConsentDetailsAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsAccessDenied';
    }
}
class ConsentDetailsNotFound {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsNotFound';
    }
}
class ConsentDetailsBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsBadRequest';
    }
}
class ConsentDetailsUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsUnknownError';
    }
}
class ConsentDetailsConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentDetailsConnectivityError';
    }
}
const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ConsentDetailsUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ConsentDetailsConnectivityError(error);
            case 400:
                return new ConsentDetailsBadRequest(error);
            case 401:
                return new ConsentDetailsAccessDenied(error);
            case 403:
                return new ConsentDetailsAccessDenied(error);
            case 404:
                return new ConsentDetailsNotFound(error);
            default:
                return new ConsentDetailsUnknownError(error);
        }
    }
};

class ConsentDetailsService {
    constructor(consentDataService, notification) {
        this.consentDataService = consentDataService;
        this.notification = notification;
        this.consentId = new ReplaySubject(1);
        this.revokingComplete = new BehaviorSubject(true);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.consentDetails = combineLatest([this.consentId, this.revokingComplete]).pipe(filter(([id]) => !!id), distinctUntilChanged(), tap(() => this.loading.next(true)), switchMap(([id]) => this.getConsentDetailsById(id)), tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)));
    }
    getConsentFrom(consentId) {
        consentId.subscribe(this.consentId);
    }
    requestRevoke(errorTemplateRef, successTemplateRef) {
        return this.consentId.pipe(take(1), filter((id) => !!id), switchMap((id) => this.revokeConsentById(id)), tap(() => {
            this.revokingComplete.next(true);
            this.showNotification(successTemplateRef, 'success');
        }), catchError(() => {
            this.showNotification(errorTemplateRef, 'error');
            return of(undefined);
        }));
    }
    getConsentDetailsById(id) {
        return this.consentDataService.getIdByIdgetId({ id }, 'response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
    revokeConsentById(id) {
        return this.consentDataService.postRevokeById({ id }, 'response').pipe(catchError((error) => {
            throw parseError(error);
        }));
    }
    showNotification(templateRef, modifier) {
        this.notification.showNotification({
            header: templateRef,
            message: '',
            modifier,
        });
    }
}
ConsentDetailsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsService, deps: [{ token: i1.ConsentsHttpService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentDetailsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConsentsHttpService }, { type: i2.NotificationService }]; } });

class ConsentDetailsErrorComponent {
}
ConsentDetailsErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsErrorComponent, selector: "bb-consent-details-error", inputs: { consentId: "consentId", errorKind: "errorKind" }, ngImport: i0, template: "<bb-empty-state-ui\n  *ngIf=\"!consentId\"\n  title=\"Consent Details Not Found\"\n  i18n-title=\"\n    Consent Details Not Found|Empty state label when there is no consent\n    id@@consent-details.error.noConsentRequest.title\"\n  subtitle=\"Consent Details Not Found.\"\n  i18n-subtitle=\"\n    Consent Details Not Found subtitle|Empty state subtitle label when there is no consent\n    id@@consent-details.error.noConsentRequest.subtitle\"\n  iconModifier=\"error\"></bb-empty-state-ui>\n\n<ng-container *ngIf=\"consentId && errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentDetailsAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      details@@consent-details.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to see the consent's details.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      details@@consent-details.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentDetailsConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@consent-details.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-details.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentDetailsNotFound'\"\n    title=\"Consent Details Not Found\"\n    i18n-title=\"\n      Consent Details Not Found|Empty state label when the id is invalid@@consent-details.error.notFound.title\"\n    subtitle=\"Consent Details Not Found.\"\n    i18n-subtitle=\"\n      notFound Error subtitle|Empty state subtitle label when there is notFound\n      error@@consent-details.error.notFound.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentDetailsUnknownError | ConsentDetailsBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-details.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-details.error.unexpected.subtitle\"\n    iconModifier=\"user\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-details-error',
                    templateUrl: './consent-details-error.component.html',
                }]
        }], propDecorators: { consentId: [{
                type: Input
            }], errorKind: [{
                type: Input
            }] } });

var Status;
(function (Status) {
    Status["ACTIVE"] = "ACTIVE";
    Status["REVOKED"] = "REVOKED";
    Status["EXPIRED"] = "EXPIRED";
})(Status || (Status = {}));
const Permission = {
    ReadAccountsDetail: 'ReadAccountsDetail',
    ReadBalances: 'ReadBalances',
    ReadTransactionsDetail: 'ReadTransactionsDetail',
    ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',
    ReadDirectDebits: 'ReadDirectDebits',
    ReadProducts: 'ReadProducts',
    ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',
    ReadTransactionsCredits: 'ReadTransactionsCredits',
    ReadTransactionsDebits: 'ReadTransactionsDebits',
};

class ConsentDetailsHeaderComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Status of the Consent
         */
        this.status = '';
        /**
         * Expiry date of the Consent
         */
        this.expiryDate = '';
        /**
         * Emitter that fires when you revoke consent
         */
        this.revokeConsent = new EventEmitter();
        /**
         * Consent status enumeration
         */
        this.Status = Status;
    }
    /**
     * Revoke consent button click event handler.
     * Emit revoke consent event
     */
    onRevokeConsent() {
        this.revokeConsent.emit();
    }
}
ConsentDetailsHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsHeaderComponent, selector: "bb-consent-details-header", inputs: { tpp: "tpp", status: "status", expiryDate: "expiryDate" }, outputs: { revokeConsent: "revokeConsent" }, ngImport: i0, template: "<ng-container\n  bbConsentDetailsHeaderCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    tpp: tpp,\n    status: status,\n    expiryDate: expiryDate\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentDetailsHeaderCustomizable\n  let-hostRef\n  let-tpp=\"context.tpp\"\n  let-status=\"context.status\"\n  let-expiryDate=\"context.expiryDate\">\n  <div class=\"bb-consent-details-header bb-stack\">\n    <div class=\"bb-stack__item\">\n      <bb-third-party-provider-ui\n        [name]=\"tpp?.name\"\n        [url]=\"tpp?.website\"\n        [image]=\"tpp?.imageUrl\"\n        [verified]=\"tpp?.isTrusted\"\n        [condensed]=\"true\">\n      </bb-third-party-provider-ui>\n    </div>\n\n    <!-- Large Viewports -->\n    <div data-role=\"status-badge-large\" class=\"bb-stack__item\">\n      <bb-badge-ui\n        data-role=\"status-badge-active\"\n        i18n-text=\"Active|Consent status active@@consent-details.header.badge.active\"\n        *ngIf=\"status === hostRef.Status.ACTIVE\"\n        color=\"success\"\n        text=\"Active\">\n      </bb-badge-ui>\n      <bb-badge-ui\n        data-role=\"status-badge-expired\"\n        i18n-text=\"Expired|Consent status expired@@consent-details.header.badge.expired\"\n        *ngIf=\"status === hostRef.Status.EXPIRED\"\n        color=\"secondary\"\n        text=\"Expired\">\n      </bb-badge-ui>\n      <bb-badge-ui\n        data-role=\"status-badge-revoked\"\n        i18n-text=\"Revoked|Consent status revoked@@consent-details.header.badge.revoked\"\n        *ngIf=\"status === hostRef.Status.REVOKED\"\n        color=\"danger\"\n        text=\"Revoked\">\n      </bb-badge-ui>\n    </div>\n\n    <div class=\"bb-consent-details-header__status-wrapper bb-stack__item bb-stack__item--push-right\">\n      <div class=\"bb-consent-details-header__status bb-text-align-right\">\n        <div\n          i18n=\"Expired on|Consent is expired@@consent-details.header.heading.expiredOn\"\n          class=\"bb-text-bold\"\n          *ngIf=\"status === hostRef.Status.EXPIRED\">\n          Expired on\n        </div>\n        <div\n          data-role=\"token-expiry-label-active\"\n          i18n=\"Expiry Date|Expiry Date of Consent@@consent-details.header.heading.expiryDate\"\n          class=\"bb-text-bold\"\n          *ngIf=\"status !== hostRef.Status.EXPIRED\">\n          Expiry date\n        </div>\n        <div data-role=\"expiry-date\">\n          {{ expiryDate | bbDate: 'bbShort' }}\n        </div>\n      </div>\n      <button\n        bbButton\n        *ngIf=\"status === hostRef.Status.ACTIVE\"\n        (click)=\"hostRef.onRevokeConsent()\"\n        color=\"danger\"\n        data-role=\"revoke-consent-button\"\n        type=\"submit\">\n        <span i18n=\"Revoke Consent|Revoke consent button@@consent-details.header.button.revoke-consent\">\n          Revoke Consent\n        </span>\n      </button>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }, { type: i0.forwardRef(function () { return i2$2.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i0.forwardRef(function () { return ConsentDetailsHeaderCustomizableDirective; }), selector: "[bbConsentDetailsHeaderCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "bbDate": i0.forwardRef(function () { return i5.BbDatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-details-header',
                    templateUrl: './consent-details-header.component.html',
                }]
        }], propDecorators: { tpp: [{
                type: Input
            }], status: [{
                type: Input
            }], expiryDate: [{
                type: Input
            }], revokeConsent: [{
                type: Output
            }] } });
class ConsentDetailsHeaderCustomizableDirective extends BbTemplate {
}
ConsentDetailsHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentDetailsHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsHeaderCustomizableDirective, selector: "[bbConsentDetailsHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentDetailsHeaderCustomizable]',
                }]
        }] });

class ConsentDetailsTppDetailsComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
    }
}
ConsentDetailsTppDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsTppDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsTppDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsTppDetailsComponent, selector: "bb-consent-third-party-details", inputs: { tpp: "tpp" }, ngImport: i0, template: "<ng-container bbConsentDetailsTppDetailsCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"tpp\"> </ng-container>\n\n<ng-template bbConsentDetailsTppDetailsCustomizable let-hostRef let-tpp=\"context\">\n  <div class=\"bb-consent-details-tpp\">\n    <div class=\"bb-consent-details-tpp__info-label\">\n      <span i18n=\"Third Party Information|TPP Info@@consent-details.tpp-details.heading.tppDetails\" class=\"bb-text-bold\"\n        >Third Party Information</span\n      >\n    </div>\n    <div *ngIf=\"tpp.externalId\" class=\"bb-block bb-block--md\">\n      <div\n        i18n=\"Third Party ID|TPPID Heading@@consent-details.tpp-details.heading.TPPID\"\n        data-role=\"third-party-id-label\"\n        class=\"bb-text-bold\">\n        Third party ID\n      </div>\n      <div class=\"bb-subtitle\" data-role=\"third-party-id-value\">\n        {{ tpp.externalId }}\n      </div>\n    </div>\n    <div *ngIf=\"tpp.mail || tpp.phonenumber\" class=\"bb-block bb-block--md\" data-role=\"contact-information-value\">\n      <div\n        i18n=\"Contact Information|Contact Information heading@@consent-details.tpp-details.heading.contact-information\"\n        data-role=\"contact-information-label\"\n        class=\"bb-text-bold\">\n        Contact information\n      </div>\n      <div *ngIf=\"tpp.mail\" data-role=\"third-party-email-value\" class=\"bb-subtitle\">\n        {{ tpp.mail }}\n      </div>\n      <div *ngIf=\"tpp.phonenumber && tpp.country\" data-role=\"third-party-phone-value\" class=\"bb-subtitle\">\n        {{ tpp.phonenumber | phoneNumber: tpp.country }}\n      </div>\n    </div>\n    <div *ngIf=\"tpp.address\" class=\"bb-block bb-block--md\">\n      <div\n        i18n=\"Legal Address|Legal Address Heading@@consent-details.tpp-details.heading.legal-address\"\n        data-role=\"legal-address-label\"\n        class=\"bb-text-bold\">\n        Legal address\n      </div>\n      <div class=\"bb-subtitle\" data-role=\"legal-address-value\">\n        {{ tpp.address }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return ConsentDetailsTppDetailsCustomizableDirective; }), selector: "[bbConsentDetailsTppDetailsCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "phoneNumber": i0.forwardRef(function () { return i2$3.PhoneNumberPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsTppDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-third-party-details',
                    templateUrl: './consent-details-tpp-details.component.html',
                }]
        }], propDecorators: { tpp: [{
                type: Input
            }] } });
class ConsentDetailsTppDetailsCustomizableDirective extends BbTemplate {
}
ConsentDetailsTppDetailsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsTppDetailsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentDetailsTppDetailsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsTppDetailsCustomizableDirective, selector: "[bbConsentDetailsTppDetailsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsTppDetailsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentDetailsTppDetailsCustomizable]',
                }]
        }] });

class ConsentDetailsAccountsListComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * List of accounts
         */
        this.accounts = [];
    }
}
ConsentDetailsAccountsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsAccountsListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsAccountsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsAccountsListComponent, selector: "bb-consent-details-accounts-list", inputs: { accounts: "accounts" }, ngImport: i0, template: "<ng-container bbConsentDetailsAccountsListCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"accounts\">\n</ng-container>\n\n<ng-template bbConsentDetailsAccountsListCustomizable let-hostRef let-accounts=\"context\">\n  <div class=\"bb-block bb-block--lg\">\n    <div\n      i18n=\"Accounts Exposed|Accounts Exposed Heading@@consent-details.accounts-list.heading.accounts-exposed\"\n      class=\"bb-text-bold bb-block bb-block--sm\"\n      data-role=\"account-exposed-details-label\">\n      Accounts Exposed\n    </div>\n    <div data-role=\"accounts-exposed\" class=\"bb-consent-details-accounts-item card\">\n      <div class=\"card-section\" *ngFor=\"let account of accounts\">\n        <bb-product-item-basic-account-ui\n          [title]=\"account.name\"\n          [productNumber]=\"account.number\"\n          [amount]=\"account.balance\"\n          [currency]=\"account.currency\"\n          [highlight]=\"false\"\n          [active]=\"false\"></bb-product-item-basic-account-ui>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$3.ProductItemBasicAccountComponent; }), selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }], directives: [{ type: i0.forwardRef(function () { return ConsentDetailsAccountsListCustomizableDirective; }), selector: "[bbConsentDetailsAccountsListCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsAccountsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-details-accounts-list',
                    templateUrl: './consent-details-accounts-list.component.html',
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }] } });
class ConsentDetailsAccountsListCustomizableDirective extends BbTemplate {
}
ConsentDetailsAccountsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsAccountsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentDetailsAccountsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsAccountsListCustomizableDirective, selector: "[bbConsentDetailsAccountsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsAccountsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentDetailsAccountsListCustomizable]',
                }]
        }] });

class ConsentDetailsPermissionsListComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * List of permissions
         */
        this.permissions = [];
        /**
         * Permission mapper
         */
        this.Permission = Permission;
    }
    /**
     * Check if permission contains provided permission
     * @param permission
     */
    hasPermission(permission) {
        return this.permissions.includes(permission);
    }
}
ConsentDetailsPermissionsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsPermissionsListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsPermissionsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsPermissionsListComponent, selector: "bb-consent-details-permissions-list", inputs: { permissions: "permissions" }, ngImport: i0, template: "<ng-container bbConsentDetailsPermissionsListCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"permissions\">\n</ng-container>\n\n<ng-template bbConsentDetailsPermissionsListCustomizable let-hostRef let-permissions=\"context\">\n  <div\n    i18n=\"Permissions granted|Permissions granted heading@@consent-details.permissions.heading.permissions-granted\"\n    data-role=\"permissions-granted-label\"\n    class=\"bb-text-bold bb-block bb-block--sm\">\n    Permissions granted\n  </div>\n  <div class=\"bb-consent-details-permissions card\">\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadAccountsDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        data-role=\"account-information-label\"\n        i18n=\"\n          Account Information|Account Information Permission\n          title@@consent-details.label.permission.ReadAccountsDetail.title\">\n        Account information\n      </div>\n      <div\n        class=\"bb-consent-details-permissions__details\"\n        i18n=\"\n          Account Information details|Account Information Permission\n          subtitle@@consent-details.label.permission.ReadAccountsDetail.subtitle\">\n        Name, number\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBalances)\">\n      <div\n        class=\"bb-text-bold\"\n        data-role=\"account-balance-label\"\n        i18n=\"Account Balance|Account Balance Permission title@@consent-details.label.permission.ReadBalances.title\">\n        Account balance\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        data-role=\"transactions-label\"\n        i18n=\"\n          Transactions|Transaction Details Permission\n          title@@consent-details.label.permission.ReadTransactionsDetail.title\">\n        Transactions\n      </div>\n      <div\n        class=\"bb-consent-details-permissions__details\"\n        i18n=\"\n          Transactions details |Transaction Details Permission\n          subtitle@@consent-details.label.permission.ReadTransactionsDetail.subtitle\">\n        Category, amount, date, time, beneficiary details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBeneficiariesDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"Beneficiaries|Beneficiaries title@@consent-details.label.permission.ReadBeneficiariesDetail.title\">\n        Beneficiaries details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadDirectDebits)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"Direct Debits|Direct Debits Permission title@@consent-details.label.permission.ReadDirectDebits.title\">\n        Direct Debits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadProducts)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"Products|Products Permission title@@consent-details.label.permission.ReadProducts.title\">\n        Products\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadStandingOrdersDetail)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"\n          Standing Orders|Standing Orders Permission\n          title@@consent-details.label.permission.ReadStandingOrdersDetail.title\">\n        Standing Orders\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsCredits)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"\n          Transactions Credits|Transactions Credits Permission\n          title@@consent-details.label.permission.ReadTransactionsCredits.title\">\n        Transactions Credits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDebits)\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"\n          Transactions Debits|Transactions Debits Permission\n          title@@consent-details.label.permission.ReadTransactionsDebits.title\">\n        Transactions Debits\n      </div>\n    </div>\n  </div>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return ConsentDetailsPermissionsListCustomizableDirective; }), selector: "[bbConsentDetailsPermissionsListCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsPermissionsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-details-permissions-list',
                    templateUrl: './consent-details-permissions-list.component.html',
                }]
        }], propDecorators: { permissions: [{
                type: Input
            }] } });
class ConsentDetailsPermissionsListCustomizableDirective extends BbTemplate {
}
ConsentDetailsPermissionsListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsPermissionsListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentDetailsPermissionsListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsPermissionsListCustomizableDirective, selector: "[bbConsentDetailsPermissionsListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsPermissionsListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentDetailsPermissionsListCustomizable]',
                }]
        }] });

class ConsentDetailsContainerComponent {
    constructor(detailsService, route) {
        this.detailsService = detailsService;
        this.route = route;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Notification error template reference
         */
        this.notificationErrorTemplate = '';
        /**
         * Notification success template reference
         */
        this.notificationSuccessTemplate = '';
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.detailsService.loading;
        /**
         * Stream of consent details request errors
         */
        this.error = this.detailsService.error;
        /**
         * Stream of consent ID
         */
        this.consentId = this.getRouteParam(this.route, 'consentId').pipe(map((consentId) => consentId || ''));
        /**
         * Stream of consent details
         */
        this.consentDetails = this.detailsService.consentDetails;
        /**
         * Consent reject modal visibility flag
         */
        this.isModalOpen = false;
        /**
         * Consent status enumeration
         */
        this.Status = Status;
    }
    ngOnInit() {
        this.detailsService.getConsentFrom(this.consentId);
    }
    /**
     * Open consent reject modal
     */
    openRejectConsentModal() {
        this.isModalOpen = true;
    }
    /**
     * Close consent reject modal
     */
    dismissRejectConsentModal() {
        this.isModalOpen = false;
    }
    /**
     * Revoke consent
     */
    revokeConsent() {
        this.detailsService.requestRevoke(this.notificationErrorTemplate, this.notificationSuccessTemplate).subscribe();
        this.dismissRejectConsentModal();
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
ConsentDetailsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerComponent, deps: [{ token: ConsentDetailsService }, { token: i2$4.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsContainerComponent, selector: "bb-consent-details-container", viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }, { propertyName: "notificationSuccessTemplate", first: true, predicate: ["notificationSuccess"], descendants: true, static: true }], ngImport: i0, template: "<ng-container\n  bbConsentDetailsContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    consentDetails: consentDetails | async,\n    loading: loading | async,\n    error: error | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentDetailsContainerCustomizable\n  let-hostRef\n  let-consentDetails=\"context.consentDetails\"\n  let-error=\"context.error\"\n  let-loading=\"context.loading\">\n  <ng-container *ngIf=\"hostRef.consentId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!error; else errorTemplate\">\n        <bb-consent-details-header\n          [expiryDate]=\"consentDetails?.expiryDate\"\n          [status]=\"consentDetails?.status\"\n          [tpp]=\"consentDetails?.tpp\"\n          (revokeConsent)=\"hostRef.openRejectConsentModal()\">\n        </bb-consent-details-header>\n\n        <div class=\"bb-consent-details\">\n          <!-- Large Viewports -->\n          <div class=\"bb-consent-details__lg\">\n            <bb-consent-third-party-details [tpp]=\"consentDetails?.tpp\"> </bb-consent-third-party-details>\n            <div class=\"bb-consent-details__lg-wrapper\">\n              <div class=\"bb-consent-details__lg-wrapper-item\">\n                <bb-consent-details-accounts-list [accounts]=\"consentDetails?.accounts\">\n                </bb-consent-details-accounts-list>\n              </div>\n              <bb-consent-details-permissions-list [permissions]=\"consentDetails?.permissions\">\n              </bb-consent-details-permissions-list>\n            </div>\n          </div>\n\n          <!-- Mobile Viewports -->\n          <div class=\"bb-consent-details__sm\">\n            <div class=\"bb-block bb-block--lg\">\n              <div class=\"bb-block bb-block--md\">\n                <div\n                  i18n=\"Expired on|Consent is expired@@consent-details.container.heading.expiredOn\"\n                  class=\"bb-text-bold\"\n                  *ngIf=\"consentDetails?.status === hostRef.Status.EXPIRED\">\n                  Expired on\n                </div>\n                <div\n                  i18n=\"Expiry Date|Expiry Date of Consent@@consent-details.container.heading.expiryDate\"\n                  class=\"bb-text-bold\"\n                  *ngIf=\"consentDetails?.status !== hostRef.Status.EXPIRED\">\n                  Expiry date\n                </div>\n                <div>\n                  {{ consentDetails.expiryDate | bbDate: 'bbShort' }}\n                </div>\n              </div>\n              <div class=\"bb-block bb-block--md\">\n                <bb-consent-details-accounts-list [accounts]=\"consentDetails?.accounts\">\n                </bb-consent-details-accounts-list>\n              </div>\n              <bb-consent-details-permissions-list [permissions]=\"consentDetails?.permissions\">\n              </bb-consent-details-permissions-list>\n            </div>\n            <bb-collapsible-ui>\n              <ng-template bbCollapsibleHeader let-toggle=\"toggle\">\n                <div class=\"bb-block bb-block--md\">\n                  <div (click)=\"toggle()\" class=\"bb-consent-details__sm-collapsible\">\n                    <span\n                      class=\"bb-text-bold\"\n                      i18n=\"See other details|Third party details@@consent-details.container.label.seeDetails\">\n                      See other details\n                    </span>\n                    <bb-icon-ui name=\"toggle-down\" size=\"sm\"> </bb-icon-ui>\n                  </div>\n                </div>\n              </ng-template>\n              <ng-template bbCollapsibleBody>\n                <bb-consent-third-party-details [tpp]=\"consentDetails?.tpp\"> </bb-consent-third-party-details>\n              </ng-template>\n            </bb-collapsible-ui>\n\n            <!-- Small Viewport Revoke Button -->\n            <div\n              *ngIf=\"consentDetails?.status === hostRef.Status.ACTIVE\"\n              class=\"bb-consent-details__button bb-button-bar\">\n              <button\n                bbButton\n                class=\"bb-button-bar__button\"\n                (click)=\"hostRef.openRejectConsentModal()\"\n                color=\"danger\"\n                i18n=\"Revoke Consent|Revoke consent button@@consent-details.header.button.revoke-consent\">\n                Revoke Consent\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <bb-modal-ui [isOpen]=\"hostRef.isModalOpen\">\n          <bb-modal-header-ui>\n            <ng-template bbCustomModalHeader>\n              <span\n                class=\"bb-text-bold\"\n                data-role=\"dialog-title\"\n                i18n=\"Revoke Consent?|Revoke consent heading@@consent-details.container.heading.revoke-consent\"\n                bbConfirmTitle>\n                Revoke Consent?\n              </span>\n            </ng-template>\n          </bb-modal-header-ui>\n          <bb-modal-body-ui>\n            <ng-template bbCustomModalBody>\n              <div\n                data-role=\"dialog-question\"\n                i18n=\"\n                  Are you sure you want to permanently revoke consent? This action can't be undone.| Revoke Consent\n                  body@@consent-details.container.body.revoke-consent\"\n                bbConfirmBody>\n                Are you sure you want to permanently revoke consent for {{ consentDetails?.tpp.name }}? This action\n                can't be undone.\n              </div>\n            </ng-template>\n          </bb-modal-body-ui>\n          <bb-modal-footer-ui>\n            <ng-template bbCustomModalFooter>\n              <button\n                bbButton\n                data-role=\"cancel-button\"\n                color=\"secondary\"\n                (click)=\"hostRef.dismissRejectConsentModal()\"\n                i18n=\"Cancel|Cancel and close modal@@consent-details.container.button.label.cancel\">\n                Cancel\n              </button>\n              <button\n                bbButton\n                color=\"danger\"\n                data-role=\"revoke-button\"\n                (click)=\"hostRef.revokeConsent()\"\n                i18n=\"Revoke|Approve revoking of consent@@consent-details.container.button.label.revoke\">\n                Revoke\n              </button>\n            </ng-template>\n          </bb-modal-footer-ui>\n        </bb-modal-ui>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui loadersize=\"lg\"></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-details-error [consentId]=\"hostRef.consentId | async\" [errorKind]=\"error?.kind\">\n      </bb-consent-details-error>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationError>\n  <span i18n=\"Failed to revoke consent|Error notification message@@consent-details.container.notification.error\">\n    Failed to revoke consent\n  </span>\n</ng-template>\n\n<ng-template #notificationSuccess>\n  <span\n    i18n=\"Successfully revoked consent |Success notification message@@consent-details.container.notification.success\">\n    Consent was revoked\n  </span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ConsentDetailsHeaderComponent; }), selector: "bb-consent-details-header", inputs: ["tpp", "status", "expiryDate"], outputs: ["revokeConsent"] }, { type: i0.forwardRef(function () { return ConsentDetailsTppDetailsComponent; }), selector: "bb-consent-third-party-details", inputs: ["tpp"] }, { type: i0.forwardRef(function () { return ConsentDetailsAccountsListComponent; }), selector: "bb-consent-details-accounts-list", inputs: ["accounts"] }, { type: i0.forwardRef(function () { return ConsentDetailsPermissionsListComponent; }), selector: "bb-consent-details-permissions-list", inputs: ["permissions"] }, { type: i0.forwardRef(function () { return i7.CollapsibleComponent; }), selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i0.forwardRef(function () { return i8.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i9.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i9.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i9.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i9.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i10.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return ConsentDetailsErrorComponent; }), selector: "bb-consent-details-error", inputs: ["consentId", "errorKind"] }], directives: [{ type: i0.forwardRef(function () { return ConsentDetailsContainerCustomizableDirective; }), selector: "[bbConsentDetailsContainerCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.CollapsibleHeaderDirective; }), selector: "ng-template[bbCollapsibleHeader]" }, { type: i0.forwardRef(function () { return i7.CollapsibleBodyDirective; }), selector: "ng-template[bbCollapsibleBody]" }, { type: i0.forwardRef(function () { return i4.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i9.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i9.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i9.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0.forwardRef(function () { return i2$1.AsyncPipe; }), "bbDate": i0.forwardRef(function () { return i5.BbDatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-details-container',
                    templateUrl: './consent-details-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ConsentDetailsService }, { type: i2$4.ActivatedRoute }]; }, propDecorators: { notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError', { static: true }]
            }], notificationSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationSuccess', { static: true }]
            }] } });
class ConsentDetailsContainerCustomizableDirective extends BbTemplate {
}
ConsentDetailsContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentDetailsContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsContainerCustomizableDirective, selector: "[bbConsentDetailsContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentDetailsContainerCustomizable]',
                }]
        }] });

class ConsentDetailsWidgetComponent {
}
ConsentDetailsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsWidgetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentDetailsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentDetailsWidgetComponent, selector: "bb-consent-details-widget", ngImport: i0, template: ` <bb-consent-details-container></bb-consent-details-container> `, isInline: true, components: [{ type: ConsentDetailsContainerComponent, selector: "bb-consent-details-container" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-details-widget',
                    template: ` <bb-consent-details-container></bb-consent-details-container> `,
                }]
        }] });

const components = [
    ConsentDetailsWidgetComponent,
    ConsentDetailsTppDetailsComponent,
    ConsentDetailsAccountsListComponent,
    ConsentDetailsPermissionsListComponent,
    ConsentDetailsContainerComponent,
    ConsentDetailsHeaderComponent,
    ConsentDetailsErrorComponent,
];
const directives = [
    ConsentDetailsContainerCustomizableDirective,
    ConsentDetailsHeaderCustomizableDirective,
    ConsentDetailsTppDetailsCustomizableDirective,
    ConsentDetailsPermissionsListCustomizableDirective,
    ConsentDetailsAccountsListCustomizableDirective,
];
const uiModules = [
    ConsentUiModule,
    CollapsibleModule,
    PhoneNumberModule,
    ProductItemBasicAccountModule,
    BbDatePipeModule,
    IconModule,
    ModalModule,
    LoadingIndicatorModule,
    BadgeModule,
    EmptyStateModule,
    ButtonModule,
    NotificationModule,
];
class ConsentDetailsWidgetModule {
}
ConsentDetailsWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ConsentDetailsWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsWidgetModule, declarations: [ConsentDetailsWidgetComponent,
        ConsentDetailsTppDetailsComponent,
        ConsentDetailsAccountsListComponent,
        ConsentDetailsPermissionsListComponent,
        ConsentDetailsContainerComponent,
        ConsentDetailsHeaderComponent,
        ConsentDetailsErrorComponent, ConsentDetailsContainerCustomizableDirective,
        ConsentDetailsHeaderCustomizableDirective,
        ConsentDetailsTppDetailsCustomizableDirective,
        ConsentDetailsPermissionsListCustomizableDirective,
        ConsentDetailsAccountsListCustomizableDirective], imports: [CommonModule, i1$4.BackbaseCoreModule, ConsentUiModule,
        CollapsibleModule,
        PhoneNumberModule,
        ProductItemBasicAccountModule,
        BbDatePipeModule,
        IconModule,
        ModalModule,
        LoadingIndicatorModule,
        BadgeModule,
        EmptyStateModule,
        ButtonModule,
        NotificationModule], exports: [ConsentDetailsWidgetComponent,
        ConsentDetailsTppDetailsComponent,
        ConsentDetailsAccountsListComponent,
        ConsentDetailsPermissionsListComponent,
        ConsentDetailsContainerComponent,
        ConsentDetailsHeaderComponent,
        ConsentDetailsErrorComponent, ConsentDetailsContainerCustomizableDirective,
        ConsentDetailsHeaderCustomizableDirective,
        ConsentDetailsTppDetailsCustomizableDirective,
        ConsentDetailsPermissionsListCustomizableDirective,
        ConsentDetailsAccountsListCustomizableDirective, ConsentUiModule,
        CollapsibleModule,
        PhoneNumberModule,
        ProductItemBasicAccountModule,
        BbDatePipeModule,
        IconModule,
        ModalModule,
        LoadingIndicatorModule,
        BadgeModule,
        EmptyStateModule,
        ButtonModule,
        NotificationModule] });
ConsentDetailsWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsWidgetModule, providers: [ConsentDetailsService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { ConsentDetailsWidgetComponent },
            }),
            ...uiModules,
        ], ConsentUiModule,
        CollapsibleModule,
        PhoneNumberModule,
        ProductItemBasicAccountModule,
        BbDatePipeModule,
        IconModule,
        ModalModule,
        LoadingIndicatorModule,
        BadgeModule,
        EmptyStateModule,
        ButtonModule,
        NotificationModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentDetailsWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ConsentDetailsWidgetComponent },
                        }),
                        ...uiModules,
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules],
                    providers: [ConsentDetailsService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ConsentDetailsHeaderCustomizableDirective, ConsentDetailsWidgetComponent, ConsentDetailsWidgetModule, Permission, Status, ConsentDetailsAccountsListComponent as ӨConsentDetailsAccountsListComponent, ConsentDetailsAccountsListCustomizableDirective as ӨConsentDetailsAccountsListCustomizableDirective, ConsentDetailsContainerComponent as ӨConsentDetailsContainerComponent, ConsentDetailsContainerCustomizableDirective as ӨConsentDetailsContainerCustomizableDirective, ConsentDetailsErrorComponent as ӨConsentDetailsErrorComponent, ConsentDetailsHeaderComponent as ӨConsentDetailsHeaderComponent, ConsentDetailsPermissionsListComponent as ӨConsentDetailsPermissionsListComponent, ConsentDetailsPermissionsListCustomizableDirective as ӨConsentDetailsPermissionsListCustomizableDirective, ConsentDetailsTppDetailsComponent as ӨConsentDetailsTppDetailsComponent, ConsentDetailsTppDetailsCustomizableDirective as ӨConsentDetailsTppDetailsCustomizableDirective };
//# sourceMappingURL=backbase-consent-details-widget-ang.js.map
