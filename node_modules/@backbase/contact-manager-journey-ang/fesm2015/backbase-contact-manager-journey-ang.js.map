{"version":3,"file":"backbase-contact-manager-journey-ang.js","sources":["../../../../libs/contact-manager-journey-ang/src/lib/services/contact-manager-journey-config.service.ts","../../../../libs/contact-manager-journey-ang/src/lib/services/contact-manager-journey-navigation.service.ts","../../../../libs/contact-manager-journey-ang/src/lib/services/contact-manager-journey-preferences.service.ts","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.component.html","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-detail/contact-manager-detail.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-detail/contact-manager-detail.component.html","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-form/contact-manager-form.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-form/contact-manager-form.component.html","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-type-list/contact-manager-type-list.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-type-list/contact-manager-type-list.component.html","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.routes.ts","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.module.ts","../../../../libs/contact-manager-journey-ang/src/backbase-contact-manager-journey-ang.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { LoadMoreMethod } from '@backbase/contact-common-ang';\n\nexport interface ContactManagerJourneyConfig {\n  /**\n   * Enable the creation of new contacts\n   */\n  newContact: boolean;\n  /**\n   * Number of contacts per page\n   */\n  pageSize: number;\n  /**\n   * Max. number of navigation pages\n   */\n  maxNavPages: number;\n  /**\n   * Type of pagination\n   */\n  paginationType: LoadMoreMethod;\n  /**\n   * Milliseconds to dismiss any notification message\n   */\n  notificationDismissTime: number;\n  /**\n   * Allow to create Contact with email\n   */\n  createContactEmail: boolean;\n  /**\n   *  Allow to create Contact with IBAN\n   */\n  createContactIBAN: boolean;\n  /**\n   * Allow to create Contact with Account Number\n   */\n  createContactAccount: boolean;\n  /**\n   * Allow to create Contact with Phone Number\n   */\n  createContactPhone: boolean;\n}\n\nexport const ContactManagerJourneyConfigurationToken = new InjectionToken<Partial<ContactManagerJourneyConfig>>(\n  'ContactManagerJourneyConfig injection token',\n);\n\nexport const defaultConfiguration: ContactManagerJourneyConfig = {\n  newContact: true,\n  pageSize: 5,\n  maxNavPages: 3,\n  paginationType: LoadMoreMethod.PAGINATION,\n  notificationDismissTime: 5000,\n  createContactEmail: false,\n  createContactIBAN: true,\n  createContactAccount: false,\n  createContactPhone: false,\n};\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * `\n */\n@Injectable()\nexport class ContactManagerJourneyConfigurationService {\n  private configuration: ContactManagerJourneyConfig;\n  constructor(@Optional() @Inject(ContactManagerJourneyConfigurationToken) config: ContactManagerJourneyConfig) {\n    const configFromProviders: Partial<ContactManagerJourneyConfig> = config ? config : {};\n    this.configuration = { ...defaultConfiguration, ...configFromProviders };\n  }\n\n  get newContact(): boolean {\n    return this.configuration.newContact;\n  }\n\n  get pageSize(): number {\n    return this.configuration.pageSize;\n  }\n\n  get maxNavPages(): number {\n    return this.configuration.maxNavPages;\n  }\n\n  get paginationType(): LoadMoreMethod {\n    return this.configuration.paginationType;\n  }\n\n  get notificationDismissTime(): number {\n    return this.configuration.notificationDismissTime;\n  }\n\n  get createContactEmail(): boolean {\n    return this.configuration.createContactEmail;\n  }\n\n  get createContactIBAN(): boolean {\n    return this.configuration.createContactIBAN;\n  }\n\n  get createContactAccount(): boolean {\n    return this.configuration.createContactAccount;\n  }\n\n  get createContactPhone(): boolean {\n    return this.configuration.createContactPhone;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCreateType } from '@backbase/contact-manager-widget-ang';\n\nexport interface NavigationParams {\n  page?: number;\n  query?: string;\n}\n\nexport enum View {\n  List = 'LIST',\n  Detail = 'DETAIL',\n  Edit = 'EDIT',\n  Select = 'SELECT',\n}\n/**\n * Service helps the journey navigation\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyNavigationService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\n@Injectable()\nexport class ContactManagerJourneyNavigationService {\n  private _currentView = View.List;\n\n  get currentView(): View {\n    return this._currentView;\n  }\n\n  set currentView(view: View) {\n    this._currentView = view;\n  }\n\n  constructor(private readonly routerService: Router, private readonly route: ActivatedRoute) {}\n\n  list(page?: number, query?: string, queryParamsHandling: 'merge' | 'preserve' | '' = 'merge'): Promise<boolean> {\n    const queryParam: NavigationParams = {};\n    if (page || page === 0) queryParam.page = page;\n    if (query || query === '') queryParam.query = query;\n\n    return this.routerService.navigate(['./'], {\n      queryParams: { ...queryParam },\n      queryParamsHandling: queryParamsHandling,\n      relativeTo: this.route,\n    });\n  }\n\n  select(id: string): Promise<boolean> {\n    this.currentView = View.Detail;\n\n    return this.routerService.navigate(['./', id], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n\n  edit(id: string, type: string = AccountCreateType.IBAN): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['./edit', id, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n\n  newContact(): Promise<boolean> {\n    this.currentView = View.Select;\n\n    return this.routerService.navigate(['./select'], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n  /**\n   *\n   * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type\n   * @returns {Promise<boolean>} resolves to true when form is ready\n   */\n  newContactForm(type: AccountCreateType): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['./edit', 0, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ContactManagerJourneyConfigurationService } from './contact-manager-journey-config.service';\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\n@Injectable()\nexport class ContactManagerJourneyPreferencesService {\n  private readonly newContactSubject$ = new BehaviorSubject<boolean>(this.config.newContact);\n  private readonly pageSizeSubject$ = new BehaviorSubject<number>(this.config.pageSize);\n  private readonly maxNavPagesSubject$ = new BehaviorSubject<number>(this.config.maxNavPages);\n  private readonly paginationTypeSubject$ = new BehaviorSubject<string>(this.config.paginationType);\n  private readonly createContactEmailSubject$ = new BehaviorSubject<boolean>(this.config.createContactEmail);\n  private readonly createContactIBANSubject$ = new BehaviorSubject<boolean>(this.config.createContactIBAN);\n  private readonly createContactAccountSubject$ = new BehaviorSubject<boolean>(this.config.createContactAccount);\n  private readonly createContactPhoneSubject$ = new BehaviorSubject<boolean>(this.config.createContactPhone);\n  private readonly notificationDismissTimeSubject$ = new BehaviorSubject<number>(this.config.notificationDismissTime);\n\n  readonly newContact$ = this.newContactSubject$.asObservable();\n  readonly pageSize$ = this.pageSizeSubject$.asObservable();\n  readonly maxNavPages$ = this.maxNavPagesSubject$.asObservable();\n  readonly paginationType$ = this.paginationTypeSubject$.asObservable();\n  readonly createContactEmail$ = this.createContactEmailSubject$.asObservable();\n  readonly createContactIBAN$ = this.createContactIBANSubject$.asObservable();\n  readonly createContactAccount$ = this.createContactAccountSubject$.asObservable();\n  readonly createContactPhone$ = this.createContactPhoneSubject$.asObservable();\n  readonly notificationDismissTime$ = this.notificationDismissTimeSubject$.asObservable();\n\n  setNewContact(value: boolean) {\n    this.newContactSubject$.next(value);\n  }\n\n  setPageSize(value: number) {\n    this.pageSizeSubject$.next(value);\n  }\n\n  setMaxNavPages(value: number) {\n    this.maxNavPagesSubject$.next(value);\n  }\n\n  setPaginationType(value: string) {\n    this.paginationTypeSubject$.next(value);\n  }\n\n  setNotificationDismissTime(value: number) {\n    this.notificationDismissTimeSubject$.next(value);\n  }\n\n  setCreateContactEmail(value: boolean) {\n    this.createContactEmailSubject$.next(value);\n  }\n\n  setCreateContactIBAN(value: boolean) {\n    this.createContactIBANSubject$.next(value);\n  }\n\n  setCreateContactAccount(value: boolean) {\n    this.createContactAccountSubject$.next(value);\n  }\n\n  setCreateContactPhone(value: boolean) {\n    this.createContactPhoneSubject$.next(value);\n  }\n\n  constructor(private readonly config: ContactManagerJourneyConfigurationService) {}\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ContactManagerPreferencesService, ContactsNavigationService } from '@backbase/contact-manager-widget-ang';\nimport { ContactManagerJourneyConfigurationService } from './services/contact-manager-journey-config.service';\nimport { ContactManagerJourneyNavigationService } from './services/contact-manager-journey-navigation.service';\nimport { ContactManagerJourneyPreferencesService } from './services/contact-manager-journey-preferences.service';\n/**\n * The component combines all the functionality of contacts in journey.\n *\n *\n *  ### Include this journey (standalone model)\n *\n * ```ts\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ route })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n *\n * ### Insert this BundleModule Laziliy.\n *\n * ```ts\n * @NgModule({\n *  BackbaseCoreModule.forRoot({\n *     lazyModules:[ {\n *   module: 'ContactManagerJourneyBundleModule',\n *   components: ['ContactManagerJourneyComponent'],\n *   loadChildren: () => import('./lazy-modules/lazy-bundle.module').then(m => m.ContactManagerJourneyBundleModule),\n * },]\n *  })\n * })\n * ```\n *\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-journey',\n  templateUrl: './contact-manager-journey.component.html',\n  providers: [\n    {\n      provide: ContactManagerPreferencesService,\n      useClass: ContactManagerJourneyPreferencesService,\n    },\n    {\n      provide: ContactsNavigationService,\n      useClass: ContactManagerJourneyNavigationService,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerJourneyComponent {\n  constructor(public readonly config: ContactManagerJourneyConfigurationService) {}\n}\n","<bb-header-ui\n  heading=\"Manage Contacts\"\n  i18n-heading=\"Contact manager journey heading@@ccontact-manager-journey.heading.text\"\n  headingType=\"h1\"\n></bb-header-ui>\n<bb-contacts-list-container>\n  <router-outlet></router-outlet>\n</bb-contacts-list-container>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n/**\n * The wrappper component will show detail of selected contact\n *\n * @usageNotes\n *\n * ### Display contact detail\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-detail-view',\n  templateUrl: './contact-manager-detail.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerDetailViewComponent {}\n","<bb-contacts-detail-container></bb-contacts-detail-container>\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { ContactsFormContainerComponent } from '@backbase/contact-manager-widget-ang';\nimport { isObservable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n/**\n * The wrappper component will show contact form\n *\n * @usageNotes\n *\n * ### Display contact form based on type\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-form-view',\n  templateUrl: './contact-manager-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerFormViewComponent {\n  @ViewChild(ContactsFormContainerComponent)\n  contactsFormContainerComponent?: ContactsFormContainerComponent;\n\n  /**\n   * Event handler for navigation change guard\n   *\n   * @returns {Promise<boolean> | boolean} - resolves to true if navigation can change\n   */\n  canDeactivate(): Promise<boolean> | boolean {\n    const canDeactivate = this.contactsFormContainerComponent?.canDeactivate();\n    if (isObservable(canDeactivate)) {\n      return canDeactivate.pipe(take(1)).toPromise();\n    }\n\n    return canDeactivate ?? true;\n  }\n}\n","<bb-contacts-form-container></bb-contacts-form-container>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n/**\n * The wrappper component will show all contacts in a list\n *\n * @usageNotes\n *\n * ### Display all contacts in a list .\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-type-list-view',\n  templateUrl: './contact-manager-type-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerTypeListViewComponent {}\n","<bb-contacts-type-list-container></bb-contacts-type-list-container>\n","import { Routes } from '@angular/router';\nimport { CanDeactivateGuard } from '@backbase/contact-manager-widget-ang';\nimport { ContactManagerJourneyComponent } from './contact-manager-journey.component';\nimport { ContactManagerDetailViewComponent } from './views/contact-manager-detail/contact-manager-detail.component';\nimport { ContactManagerFormViewComponent } from './views/contact-manager-form/contact-manager-form.component';\nimport { ContactManagerTypeListViewComponent } from './views/contact-manager-type-list/contact-manager-type-list.component';\n\nexport const contactManagerRoutes: Routes = [\n  {\n    path: '',\n    component: ContactManagerJourneyComponent,\n    children: [\n      {\n        path: '',\n        component: ContactManagerDetailViewComponent,\n      },\n      {\n        path: 'select',\n        component: ContactManagerTypeListViewComponent,\n      },\n      {\n        path: ':id',\n        component: ContactManagerDetailViewComponent,\n      },\n\n      {\n        path: 'edit/:id/:type',\n        canDeactivate: [CanDeactivateGuard],\n        component: ContactManagerFormViewComponent,\n      },\n    ],\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { provideRoutes, RouterModule, Routes } from '@angular/router';\nimport { ContactManagerJourneyConfigurationService } from './services/contact-manager-journey-config.service';\nimport { contactManagerRoutes } from './contact-manager-journey.routes';\nimport { ContactManagerWidgetModule } from '@backbase/contact-manager-widget-ang';\nimport { ContactManagerJourneyComponent } from './contact-manager-journey.component';\nimport { ContactManagerDetailViewComponent } from './views/contact-manager-detail/contact-manager-detail.component';\nimport { ContactManagerTypeListViewComponent } from './views/contact-manager-type-list/contact-manager-type-list.component';\nimport { ContactManagerFormViewComponent } from './views/contact-manager-form/contact-manager-form.component';\nimport { HeaderModule } from '@backbase/ui-ang/header';\n\n/**\n * Journey for contacts in retails apps\n *\n * @usageNotes\n *\n * ### Include the exported widgets in your `AppModule`:\n *\n * ```typescript\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n * imports: [ContactManagerJourneyModule.forRoot({ route })],\n *  providers: [ {\n *   provide: ContactManagerJourneyConfigurationToken,\n *   useValue: {\n *     createContactEmail: true,\n *     createContactIBAN: true,\n *     createContactAccount: true,\n *     createContactPhone: true,\n *   } as Partial<ContactManagerJourneyConfig>,\n * },],\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: [\n    ContactManagerJourneyComponent,\n    ContactManagerDetailViewComponent,\n    ContactManagerTypeListViewComponent,\n    ContactManagerFormViewComponent,\n  ],\n  imports: [CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)],\n  providers: [ContactManagerJourneyConfigurationService],\n})\nexport class ContactManagerJourneyModule {\n  static forRoot(\n    data: { routes: Routes; [key: string]: any } = { routes: contactManagerRoutes },\n  ): ModuleWithProviders<ContactManagerJourneyModule> {\n    return {\n      ngModule: ContactManagerJourneyModule,\n      providers: [provideRoutes(data.routes)],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}