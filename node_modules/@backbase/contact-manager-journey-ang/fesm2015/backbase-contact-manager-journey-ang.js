import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i1 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import { LoadMoreMethod } from '@backbase/contact-common-ang';
import * as i1$1 from '@backbase/contact-manager-widget-ang';
import { AccountCreateType, ContactManagerPreferencesService, ContactsNavigationService, ContactsFormContainerComponent, CanDeactivateGuard, ContactManagerWidgetModule } from '@backbase/contact-manager-widget-ang';
import { BehaviorSubject, isObservable } from 'rxjs';
import * as i2 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import { take } from 'rxjs/operators';

const ContactManagerJourneyConfigurationToken = new InjectionToken('ContactManagerJourneyConfig injection token');
const defaultConfiguration = {
    newContact: true,
    pageSize: 5,
    maxNavPages: 3,
    paginationType: LoadMoreMethod.PAGINATION,
    notificationDismissTime: 5000,
    createContactEmail: false,
    createContactIBAN: true,
    createContactAccount: false,
    createContactPhone: false,
};
/**
 * Service provides the journey configuration
 *
 * @usageNotes
 *
 * ### Ensure the ContactManagerJourneyModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerJourneyModule,
 *   ],
 * })
 * export class ContactJourneyBundleModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactManagerJourneyPreferencesService],
 * })
 *  export class ContactManagerJourneyModule {
 * `
 */
class ContactManagerJourneyConfigurationService {
    constructor(config) {
        const configFromProviders = config ? config : {};
        this.configuration = Object.assign(Object.assign({}, defaultConfiguration), configFromProviders);
    }
    get newContact() {
        return this.configuration.newContact;
    }
    get pageSize() {
        return this.configuration.pageSize;
    }
    get maxNavPages() {
        return this.configuration.maxNavPages;
    }
    get paginationType() {
        return this.configuration.paginationType;
    }
    get notificationDismissTime() {
        return this.configuration.notificationDismissTime;
    }
    get createContactEmail() {
        return this.configuration.createContactEmail;
    }
    get createContactIBAN() {
        return this.configuration.createContactIBAN;
    }
    get createContactAccount() {
        return this.configuration.createContactAccount;
    }
    get createContactPhone() {
        return this.configuration.createContactPhone;
    }
}
/** @nocollapse */ ContactManagerJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyConfigurationService, deps: [{ token: ContactManagerJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactManagerJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ContactManagerJourneyConfigurationToken]
                }] }]; } });

var View;
(function (View) {
    View["List"] = "LIST";
    View["Detail"] = "DETAIL";
    View["Edit"] = "EDIT";
    View["Select"] = "SELECT";
})(View || (View = {}));
/**
 * Service helps the journey navigation
 *
 * @usageNotes
 *
 * ### Ensure the ContactManagerJourneyModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerJourneyModule,
 *   ],
 * })
 * export class ContactJourneyBundleModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactManagerJourneyNavigationService],
 * })
 *  export class ContactManagerJourneyModule {
 * ```
 */
class ContactManagerJourneyNavigationService {
    constructor(routerService, route) {
        this.routerService = routerService;
        this.route = route;
        this._currentView = View.List;
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(view) {
        this._currentView = view;
    }
    list(page, query, queryParamsHandling = 'merge') {
        const queryParam = {};
        if (page || page === 0)
            queryParam.page = page;
        if (query || query === '')
            queryParam.query = query;
        return this.routerService.navigate(['./'], {
            queryParams: Object.assign({}, queryParam),
            queryParamsHandling: queryParamsHandling,
            relativeTo: this.route,
        });
    }
    select(id) {
        this.currentView = View.Detail;
        return this.routerService.navigate(['./', id], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
    edit(id, type = AccountCreateType.IBAN) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['./edit', id, type], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
    newContact() {
        this.currentView = View.Select;
        return this.routerService.navigate(['./select'], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
    /**
     *
     * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type
     * @returns {Promise<boolean>} resolves to true when form is ready
     */
    newContactForm(type) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['./edit', 0, type], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
}
/** @nocollapse */ ContactManagerJourneyNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactManagerJourneyNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }]; } });

/**
 * Service provides the journey configuration
 *
 * @usageNotes
 *
 * ### Ensure the ContactManagerJourneyModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerJourneyModule,
 *   ],
 * })
 * export class ContactJourneyBundleModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactManagerJourneyPreferencesService],
 * })
 *  export class ContactManagerJourneyModule {
 * ```
 */
class ContactManagerJourneyPreferencesService {
    constructor(config) {
        this.config = config;
        this.newContactSubject$ = new BehaviorSubject(this.config.newContact);
        this.pageSizeSubject$ = new BehaviorSubject(this.config.pageSize);
        this.maxNavPagesSubject$ = new BehaviorSubject(this.config.maxNavPages);
        this.paginationTypeSubject$ = new BehaviorSubject(this.config.paginationType);
        this.createContactEmailSubject$ = new BehaviorSubject(this.config.createContactEmail);
        this.createContactIBANSubject$ = new BehaviorSubject(this.config.createContactIBAN);
        this.createContactAccountSubject$ = new BehaviorSubject(this.config.createContactAccount);
        this.createContactPhoneSubject$ = new BehaviorSubject(this.config.createContactPhone);
        this.notificationDismissTimeSubject$ = new BehaviorSubject(this.config.notificationDismissTime);
        this.newContact$ = this.newContactSubject$.asObservable();
        this.pageSize$ = this.pageSizeSubject$.asObservable();
        this.maxNavPages$ = this.maxNavPagesSubject$.asObservable();
        this.paginationType$ = this.paginationTypeSubject$.asObservable();
        this.createContactEmail$ = this.createContactEmailSubject$.asObservable();
        this.createContactIBAN$ = this.createContactIBANSubject$.asObservable();
        this.createContactAccount$ = this.createContactAccountSubject$.asObservable();
        this.createContactPhone$ = this.createContactPhoneSubject$.asObservable();
        this.notificationDismissTime$ = this.notificationDismissTimeSubject$.asObservable();
    }
    setNewContact(value) {
        this.newContactSubject$.next(value);
    }
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    setMaxNavPages(value) {
        this.maxNavPagesSubject$.next(value);
    }
    setPaginationType(value) {
        this.paginationTypeSubject$.next(value);
    }
    setNotificationDismissTime(value) {
        this.notificationDismissTimeSubject$.next(value);
    }
    setCreateContactEmail(value) {
        this.createContactEmailSubject$.next(value);
    }
    setCreateContactIBAN(value) {
        this.createContactIBANSubject$.next(value);
    }
    setCreateContactAccount(value) {
        this.createContactAccountSubject$.next(value);
    }
    setCreateContactPhone(value) {
        this.createContactPhoneSubject$.next(value);
    }
}
/** @nocollapse */ ContactManagerJourneyPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyPreferencesService, deps: [{ token: ContactManagerJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactManagerJourneyPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyPreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyPreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: ContactManagerJourneyConfigurationService }]; } });

/**
 * The component combines all the functionality of contacts in journey.
 *
 *
 *  ### Include this journey (standalone model)
 *
 * ```ts
 * export const routes: Routes = [
 *   {
 *     path: '',
 *     component: ContactManagerJourneyComponent,
 *     children: [
 *       {
 *         path: '',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'select',
 *         component: ContactManagerTypeListViewComponent,
 *       },
 *       {
 *         path: ':id',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'edit/:id/:type',
 *         canDeactivate: [CanDeactivateGuard],
 *         component: ContactManagerFormViewComponent,
 *       },
 *     ],
 *   },
 * ];
 * };
 * @NgModule({
 *   imports: [ContactManagerJourneyModule.forRoot({ route })],
 * })
 * export class ContactManagerJourneyBundleModule {}
 * ```
 *
 * ### Insert this BundleModule Laziliy.
 *
 * ```ts
 * @NgModule({
 *  BackbaseCoreModule.forRoot({
 *     lazyModules:[ {
 *   module: 'ContactManagerJourneyBundleModule',
 *   components: ['ContactManagerJourneyComponent'],
 *   loadChildren: () => import('./lazy-modules/lazy-bundle.module').then(m => m.ContactManagerJourneyBundleModule),
 * },]
 *  })
 * })
 * ```
 *
 * @ngModule ContactManagerJourneyModule
 */
class ContactManagerJourneyComponent {
    constructor(config) {
        this.config = config;
    }
}
/** @nocollapse */ ContactManagerJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyComponent, deps: [{ token: ContactManagerJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerJourneyComponent, selector: "bb-contact-manager-journey", providers: [
        {
            provide: ContactManagerPreferencesService,
            useClass: ContactManagerJourneyPreferencesService,
        },
        {
            provide: ContactsNavigationService,
            useClass: ContactManagerJourneyNavigationService,
        },
    ], ngImport: i0, template: "<bb-header-ui\n  heading=\"Manage Contacts\"\n  i18n-heading=\"Contact manager journey heading@@ccontact-manager-journey.heading.text\"\n  headingType=\"h1\"\n></bb-header-ui>\n<bb-contacts-list-container>\n  <router-outlet></router-outlet>\n</bb-contacts-list-container>\n", components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$1.ContactsListContainerComponent, selector: "bb-contacts-list-container" }], directives: [{ type: i1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-manager-journey',
                    templateUrl: './contact-manager-journey.component.html',
                    providers: [
                        {
                            provide: ContactManagerPreferencesService,
                            useClass: ContactManagerJourneyPreferencesService,
                        },
                        {
                            provide: ContactsNavigationService,
                            useClass: ContactManagerJourneyNavigationService,
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: ContactManagerJourneyConfigurationService }]; } });

/**
 * The wrappper component will show detail of selected contact
 *
 * @usageNotes
 *
 * ### Display contact detail
 *
 * ```route
 * export const routes: Routes = [
 *   {
 *     path: '',
 *     component: ContactManagerJourneyComponent,
 *     children: [
 *       {
 *         path: '',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'select',
 *         component: ContactManagerTypeListViewComponent,
 *       },
 *       {
 *         path: ':id',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'edit/:id/:type',
 *         canDeactivate: [CanDeactivateGuard],
 *         component: ContactManagerFormViewComponent,
 *       },
 *     ],
 *   },
 * ];
 * };
 * @NgModule({
 *   imports: [ContactManagerJourneyModule.forRoot({ routes })],
 * })
 * export class ContactManagerJourneyBundleModule {}
 * ```
 * @ngModule ContactManagerJourneyModule
 */
class ContactManagerDetailViewComponent {
}
/** @nocollapse */ ContactManagerDetailViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerDetailViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerDetailViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerDetailViewComponent, selector: "bb-contact-manager-detail-view", ngImport: i0, template: "<bb-contacts-detail-container></bb-contacts-detail-container>\n", components: [{ type: i1$1.ContactsDetailContainerComponent, selector: "bb-contacts-detail-container" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerDetailViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-manager-detail-view',
                    templateUrl: './contact-manager-detail.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

/**
 * The wrappper component will show contact form
 *
 * @usageNotes
 *
 * ### Display contact form based on type
 *
 * ```route
 * export const routes: Routes = [
 *   {
 *     path: '',
 *     component: ContactManagerJourneyComponent,
 *     children: [
 *       {
 *         path: '',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'select',
 *         component: ContactManagerTypeListViewComponent,
 *       },
 *       {
 *         path: ':id',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'edit/:id/:type',
 *         canDeactivate: [CanDeactivateGuard],
 *         component: ContactManagerFormViewComponent,
 *       },
 *     ],
 *   },
 * ];
 * };
 * @NgModule({
 *   imports: [ContactManagerJourneyModule.forRoot({ routes })],
 * })
 * export class ContactManagerJourneyBundleModule {}
 * ```
 * @ngModule ContactManagerJourneyModule
 */
class ContactManagerFormViewComponent {
    /**
     * Event handler for navigation change guard
     *
     * @returns {Promise<boolean> | boolean} - resolves to true if navigation can change
     */
    canDeactivate() {
        var _a;
        const canDeactivate = (_a = this.contactsFormContainerComponent) === null || _a === void 0 ? void 0 : _a.canDeactivate();
        if (isObservable(canDeactivate)) {
            return canDeactivate.pipe(take(1)).toPromise();
        }
        return canDeactivate !== null && canDeactivate !== void 0 ? canDeactivate : true;
    }
}
/** @nocollapse */ ContactManagerFormViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerFormViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerFormViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerFormViewComponent, selector: "bb-contact-manager-form-view", viewQueries: [{ propertyName: "contactsFormContainerComponent", first: true, predicate: ContactsFormContainerComponent, descendants: true }], ngImport: i0, template: "<bb-contacts-form-container></bb-contacts-form-container>\n", components: [{ type: i1$1.ContactsFormContainerComponent, selector: "bb-contacts-form-container" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerFormViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-manager-form-view',
                    templateUrl: './contact-manager-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { contactsFormContainerComponent: [{
                type: ViewChild,
                args: [ContactsFormContainerComponent]
            }] } });

/**
 * The wrappper component will show all contacts in a list
 *
 * @usageNotes
 *
 * ### Display all contacts in a list .
 *
 * ```route
 * export const routes: Routes = [
 *   {
 *     path: '',
 *     component: ContactManagerJourneyComponent,
 *     children: [
 *       {
 *         path: '',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'select',
 *         component: ContactManagerTypeListViewComponent,
 *       },
 *       {
 *         path: ':id',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'edit/:id/:type',
 *         canDeactivate: [CanDeactivateGuard],
 *         component: ContactManagerFormViewComponent,
 *       },
 *     ],
 *   },
 * ];
 * };
 * @NgModule({
 *   imports: [ContactManagerJourneyModule.forRoot({ routes })],
 * })
 * export class ContactManagerJourneyBundleModule {}
 * ```
 * @ngModule ContactManagerJourneyModule
 */
class ContactManagerTypeListViewComponent {
}
/** @nocollapse */ ContactManagerTypeListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerTypeListViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerTypeListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerTypeListViewComponent, selector: "bb-contact-manager-type-list-view", ngImport: i0, template: "<bb-contacts-type-list-container></bb-contacts-type-list-container>\n", components: [{ type: i1$1.ContactsTypeListContainerComponent, selector: "bb-contacts-type-list-container" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerTypeListViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-manager-type-list-view',
                    templateUrl: './contact-manager-type-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

const contactManagerRoutes = [
    {
        path: '',
        component: ContactManagerJourneyComponent,
        children: [
            {
                path: '',
                component: ContactManagerDetailViewComponent,
            },
            {
                path: 'select',
                component: ContactManagerTypeListViewComponent,
            },
            {
                path: ':id',
                component: ContactManagerDetailViewComponent,
            },
            {
                path: 'edit/:id/:type',
                canDeactivate: [CanDeactivateGuard],
                component: ContactManagerFormViewComponent,
            },
        ],
    },
];

/**
 * Journey for contacts in retails apps
 *
 * @usageNotes
 *
 * ### Include the exported widgets in your `AppModule`:
 *
 * ```typescript
 * export const routes: Routes = [
 *   {
 *     path: '',
 *     component: ContactManagerJourneyComponent,
 *     children: [
 *       {
 *         path: '',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'select',
 *         component: ContactManagerTypeListViewComponent,
 *       },
 *       {
 *         path: ':id',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'edit/:id/:type',
 *         canDeactivate: [CanDeactivateGuard],
 *         component: ContactManagerFormViewComponent,
 *       },
 *     ],
 *   },
 * ];
 * };
 * @NgModule({
 * imports: [ContactManagerJourneyModule.forRoot({ route })],
 *  providers: [ {
 *   provide: ContactManagerJourneyConfigurationToken,
 *   useValue: {
 *     createContactEmail: true,
 *     createContactIBAN: true,
 *     createContactAccount: true,
 *     createContactPhone: true,
 *   } as Partial<ContactManagerJourneyConfig>,
 * },],
 * })
 * export class AppModule {}
 * ```
 */
class ContactManagerJourneyModule {
    static forRoot(data = { routes: contactManagerRoutes }) {
        return {
            ngModule: ContactManagerJourneyModule,
            providers: [provideRoutes(data.routes)],
        };
    }
}
/** @nocollapse */ ContactManagerJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ContactManagerJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyModule, declarations: [ContactManagerJourneyComponent,
        ContactManagerDetailViewComponent,
        ContactManagerTypeListViewComponent,
        ContactManagerFormViewComponent], imports: [CommonModule, ContactManagerWidgetModule, HeaderModule, i1.RouterModule] });
/** @nocollapse */ ContactManagerJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyModule, providers: [ContactManagerJourneyConfigurationService], imports: [[CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        ContactManagerJourneyComponent,
                        ContactManagerDetailViewComponent,
                        ContactManagerTypeListViewComponent,
                        ContactManagerFormViewComponent,
                    ],
                    imports: [CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)],
                    providers: [ContactManagerJourneyConfigurationService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ContactManagerJourneyConfigurationToken, ContactManagerJourneyModule, contactManagerRoutes };
//# sourceMappingURL=backbase-contact-manager-journey-ang.js.map
