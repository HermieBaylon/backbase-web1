import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ContactManagerPreferencesService, ContactsNavigationService } from '@backbase/contact-manager-widget-ang';
import { ContactManagerJourneyConfigurationService } from './services/contact-manager-journey-config.service';
import { ContactManagerJourneyNavigationService } from './services/contact-manager-journey-navigation.service';
import { ContactManagerJourneyPreferencesService } from './services/contact-manager-journey-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/contact-manager-journey-config.service";
import * as i2 from "@backbase/ui-ang/header";
import * as i3 from "@backbase/contact-manager-widget-ang";
import * as i4 from "@angular/router";
/**
 * The component combines all the functionality of contacts in journey.
 *
 *
 *  ### Include this journey (standalone model)
 *
 * ```ts
 * export const routes: Routes = [
 *   {
 *     path: '',
 *     component: ContactManagerJourneyComponent,
 *     children: [
 *       {
 *         path: '',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'select',
 *         component: ContactManagerTypeListViewComponent,
 *       },
 *       {
 *         path: ':id',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'edit/:id/:type',
 *         canDeactivate: [CanDeactivateGuard],
 *         component: ContactManagerFormViewComponent,
 *       },
 *     ],
 *   },
 * ];
 * };
 * @NgModule({
 *   imports: [ContactManagerJourneyModule.forRoot({ route })],
 * })
 * export class ContactManagerJourneyBundleModule {}
 * ```
 *
 * ### Insert this BundleModule Laziliy.
 *
 * ```ts
 * @NgModule({
 *  BackbaseCoreModule.forRoot({
 *     lazyModules:[ {
 *   module: 'ContactManagerJourneyBundleModule',
 *   components: ['ContactManagerJourneyComponent'],
 *   loadChildren: () => import('./lazy-modules/lazy-bundle.module').then(m => m.ContactManagerJourneyBundleModule),
 * },]
 *  })
 * })
 * ```
 *
 * @ngModule ContactManagerJourneyModule
 */
export class ContactManagerJourneyComponent {
    constructor(config) {
        this.config = config;
    }
}
/** @nocollapse */ ContactManagerJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyComponent, deps: [{ token: i1.ContactManagerJourneyConfigurationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerJourneyComponent, selector: "bb-contact-manager-journey", providers: [
        {
            provide: ContactManagerPreferencesService,
            useClass: ContactManagerJourneyPreferencesService,
        },
        {
            provide: ContactsNavigationService,
            useClass: ContactManagerJourneyNavigationService,
        },
    ], ngImport: i0, template: "<bb-header-ui\n  heading=\"Manage Contacts\"\n  i18n-heading=\"Contact manager journey heading@@ccontact-manager-journey.heading.text\"\n  headingType=\"h1\"\n></bb-header-ui>\n<bb-contacts-list-container>\n  <router-outlet></router-outlet>\n</bb-contacts-list-container>\n", components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i3.ContactsListContainerComponent, selector: "bb-contacts-list-container" }], directives: [{ type: i4.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-manager-journey',
                    templateUrl: './contact-manager-journey.component.html',
                    providers: [
                        {
                            provide: ContactManagerPreferencesService,
                            useClass: ContactManagerJourneyPreferencesService,
                        },
                        {
                            provide: ContactsNavigationService,
                            useClass: ContactManagerJourneyNavigationService,
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ContactManagerJourneyConfigurationService }]; } });
//# sourceMappingURL=contact-manager-journey.component.js.map