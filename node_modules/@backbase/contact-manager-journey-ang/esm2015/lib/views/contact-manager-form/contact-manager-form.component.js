import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';
import { ContactsFormContainerComponent } from '@backbase/contact-manager-widget-ang';
import { isObservable } from 'rxjs';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/contact-manager-widget-ang";
/**
 * The wrappper component will show contact form
 *
 * @usageNotes
 *
 * ### Display contact form based on type
 *
 * ```route
 * export const routes: Routes = [
 *   {
 *     path: '',
 *     component: ContactManagerJourneyComponent,
 *     children: [
 *       {
 *         path: '',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'select',
 *         component: ContactManagerTypeListViewComponent,
 *       },
 *       {
 *         path: ':id',
 *         component: ContactManagerDetailViewComponent,
 *       },
 *       {
 *         path: 'edit/:id/:type',
 *         canDeactivate: [CanDeactivateGuard],
 *         component: ContactManagerFormViewComponent,
 *       },
 *     ],
 *   },
 * ];
 * };
 * @NgModule({
 *   imports: [ContactManagerJourneyModule.forRoot({ routes })],
 * })
 * export class ContactManagerJourneyBundleModule {}
 * ```
 * @ngModule ContactManagerJourneyModule
 */
export class ContactManagerFormViewComponent {
    /**
     * Event handler for navigation change guard
     *
     * @returns {Promise<boolean> | boolean} - resolves to true if navigation can change
     */
    canDeactivate() {
        var _a;
        const canDeactivate = (_a = this.contactsFormContainerComponent) === null || _a === void 0 ? void 0 : _a.canDeactivate();
        if (isObservable(canDeactivate)) {
            return canDeactivate.pipe(take(1)).toPromise();
        }
        return canDeactivate !== null && canDeactivate !== void 0 ? canDeactivate : true;
    }
}
/** @nocollapse */ ContactManagerFormViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerFormViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerFormViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerFormViewComponent, selector: "bb-contact-manager-form-view", viewQueries: [{ propertyName: "contactsFormContainerComponent", first: true, predicate: ContactsFormContainerComponent, descendants: true }], ngImport: i0, template: "<bb-contacts-form-container></bb-contacts-form-container>\n", components: [{ type: i1.ContactsFormContainerComponent, selector: "bb-contacts-form-container" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerFormViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-manager-form-view',
                    templateUrl: './contact-manager-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { contactsFormContainerComponent: [{
                type: ViewChild,
                args: [ContactsFormContainerComponent]
            }] } });
//# sourceMappingURL=contact-manager-form.component.js.map