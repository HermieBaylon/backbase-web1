import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AccountCreateType } from '@backbase/contact-manager-widget-ang';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export var View;
(function (View) {
    View["List"] = "LIST";
    View["Detail"] = "DETAIL";
    View["Edit"] = "EDIT";
    View["Select"] = "SELECT";
})(View || (View = {}));
/**
 * Service helps the journey navigation
 *
 * @usageNotes
 *
 * ### Ensure the ContactManagerJourneyModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerJourneyModule,
 *   ],
 * })
 * export class ContactJourneyBundleModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactManagerJourneyNavigationService],
 * })
 *  export class ContactManagerJourneyModule {
 * ```
 */
export class ContactManagerJourneyNavigationService {
    constructor(routerService, route) {
        this.routerService = routerService;
        this.route = route;
        this._currentView = View.List;
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(view) {
        this._currentView = view;
    }
    list(page, query, queryParamsHandling = 'merge') {
        const queryParam = {};
        if (page || page === 0)
            queryParam.page = page;
        if (query || query === '')
            queryParam.query = query;
        return this.routerService.navigate(['./'], {
            queryParams: Object.assign({}, queryParam),
            queryParamsHandling: queryParamsHandling,
            relativeTo: this.route,
        });
    }
    select(id) {
        this.currentView = View.Detail;
        return this.routerService.navigate(['./', id], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
    edit(id, type = AccountCreateType.IBAN) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['./edit', id, type], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
    newContact() {
        this.currentView = View.Select;
        return this.routerService.navigate(['./select'], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
    /**
     *
     * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type
     * @returns {Promise<boolean>} resolves to true when form is ready
     */
    newContactForm(type) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['./edit', 0, type], { queryParamsHandling: 'merge', relativeTo: this.route });
    }
}
/** @nocollapse */ ContactManagerJourneyNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactManagerJourneyNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }]; } });
//# sourceMappingURL=contact-manager-journey-navigation.service.js.map