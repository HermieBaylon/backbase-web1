import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { LoadMoreMethod } from '@backbase/contact-common-ang';
import * as i0 from "@angular/core";
export const ContactManagerJourneyConfigurationToken = new InjectionToken('ContactManagerJourneyConfig injection token');
export const defaultConfiguration = {
    newContact: true,
    pageSize: 5,
    maxNavPages: 3,
    paginationType: LoadMoreMethod.PAGINATION,
    notificationDismissTime: 5000,
    createContactEmail: false,
    createContactIBAN: true,
    createContactAccount: false,
    createContactPhone: false,
};
/**
 * Service provides the journey configuration
 *
 * @usageNotes
 *
 * ### Ensure the ContactManagerJourneyModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerJourneyModule,
 *   ],
 * })
 * export class ContactJourneyBundleModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactManagerJourneyPreferencesService],
 * })
 *  export class ContactManagerJourneyModule {
 * `
 */
export class ContactManagerJourneyConfigurationService {
    constructor(config) {
        const configFromProviders = config ? config : {};
        this.configuration = Object.assign(Object.assign({}, defaultConfiguration), configFromProviders);
    }
    get newContact() {
        return this.configuration.newContact;
    }
    get pageSize() {
        return this.configuration.pageSize;
    }
    get maxNavPages() {
        return this.configuration.maxNavPages;
    }
    get paginationType() {
        return this.configuration.paginationType;
    }
    get notificationDismissTime() {
        return this.configuration.notificationDismissTime;
    }
    get createContactEmail() {
        return this.configuration.createContactEmail;
    }
    get createContactIBAN() {
        return this.configuration.createContactIBAN;
    }
    get createContactAccount() {
        return this.configuration.createContactAccount;
    }
    get createContactPhone() {
        return this.configuration.createContactPhone;
    }
}
/** @nocollapse */ ContactManagerJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyConfigurationService, deps: [{ token: ContactManagerJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactManagerJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerJourneyConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ContactManagerJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=contact-manager-journey-config.service.js.map