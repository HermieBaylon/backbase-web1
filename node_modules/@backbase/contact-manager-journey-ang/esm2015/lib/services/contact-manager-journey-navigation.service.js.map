{"version":3,"file":"contact-manager-journey-navigation.service.js","sourceRoot":"","sources":["../../../../../../libs/contact-manager-journey-ang/src/lib/services/contact-manager-journey-navigation.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,sCAAsC,CAAC;;;AAOzE,MAAM,CAAN,IAAY,IAKX;AALD,WAAY,IAAI;IACd,qBAAa,CAAA;IACb,yBAAiB,CAAA;IACjB,qBAAa,CAAA;IACb,yBAAiB,CAAA;AACnB,CAAC,EALW,IAAI,KAAJ,IAAI,QAKf;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AAEH,MAAM,OAAO,sCAAsC;IAWjD,YAA6B,aAAqB,EAAmB,KAAqB;QAA7D,kBAAa,GAAb,aAAa,CAAQ;QAAmB,UAAK,GAAL,KAAK,CAAgB;QAVlF,iBAAY,GAAG,IAAI,CAAC,IAAI,CAAC;IAU4D,CAAC;IAR9F,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,IAAI,WAAW,CAAC,IAAU;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAID,IAAI,CAAC,IAAa,EAAE,KAAc,EAAE,sBAAiD,OAAO;QAC1F,MAAM,UAAU,GAAqB,EAAE,CAAC;QACxC,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC;YAAE,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;QAC/C,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE;YAAE,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QAEpD,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE;YACzC,WAAW,oBAAO,UAAU,CAAE;YAC9B,mBAAmB,EAAE,mBAAmB;YACxC,UAAU,EAAE,IAAI,CAAC,KAAK;SACvB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC3G,CAAC;IAED,IAAI,CAAC,EAAU,EAAE,OAAe,iBAAiB,CAAC,IAAI;QACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACrH,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC7G,CAAC;IACD;;;;OAIG;IACH,cAAc,CAAC,IAAuB;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACpH,CAAC;;uJAnDU,sCAAsC;2JAAtC,sCAAsC;4FAAtC,sCAAsC;kBADlD,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCreateType } from '@backbase/contact-manager-widget-ang';\n\nexport interface NavigationParams {\n  page?: number;\n  query?: string;\n}\n\nexport enum View {\n  List = 'LIST',\n  Detail = 'DETAIL',\n  Edit = 'EDIT',\n  Select = 'SELECT',\n}\n/**\n * Service helps the journey navigation\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyNavigationService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\n@Injectable()\nexport class ContactManagerJourneyNavigationService {\n  private _currentView = View.List;\n\n  get currentView(): View {\n    return this._currentView;\n  }\n\n  set currentView(view: View) {\n    this._currentView = view;\n  }\n\n  constructor(private readonly routerService: Router, private readonly route: ActivatedRoute) {}\n\n  list(page?: number, query?: string, queryParamsHandling: 'merge' | 'preserve' | '' = 'merge'): Promise<boolean> {\n    const queryParam: NavigationParams = {};\n    if (page || page === 0) queryParam.page = page;\n    if (query || query === '') queryParam.query = query;\n\n    return this.routerService.navigate(['./'], {\n      queryParams: { ...queryParam },\n      queryParamsHandling: queryParamsHandling,\n      relativeTo: this.route,\n    });\n  }\n\n  select(id: string): Promise<boolean> {\n    this.currentView = View.Detail;\n\n    return this.routerService.navigate(['./', id], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n\n  edit(id: string, type: string = AccountCreateType.IBAN): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['./edit', id, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n\n  newContact(): Promise<boolean> {\n    this.currentView = View.Select;\n\n    return this.routerService.navigate(['./select'], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n  /**\n   *\n   * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type\n   * @returns {Promise<boolean>} resolves to true when form is ready\n   */\n  newContactForm(type: AccountCreateType): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['./edit', 0, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n}\n"]}