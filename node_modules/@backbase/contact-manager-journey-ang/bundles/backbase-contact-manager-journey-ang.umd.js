(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('@backbase/contact-common-ang'), require('@backbase/contact-manager-widget-ang'), require('rxjs'), require('@backbase/ui-ang/header'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@backbase/contact-manager-journey-ang', ['exports', '@angular/core', '@angular/common', '@angular/router', '@backbase/contact-common-ang', '@backbase/contact-manager-widget-ang', 'rxjs', '@backbase/ui-ang/header', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["contact-manager-journey-ang"] = {}), global.ng.core, global.ng.common, global.ng.router, global.contactCommonAng, global.i1, global.rxjs, global.i2, global.rxjs.operators));
})(this, (function (exports, i0, common, i1$1, contactCommonAng, i1, rxjs, i2, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ContactManagerJourneyConfigurationToken = new i0.InjectionToken('ContactManagerJourneyConfig injection token');
    var defaultConfiguration = {
        newContact: true,
        pageSize: 5,
        maxNavPages: 3,
        paginationType: contactCommonAng.LoadMoreMethod.PAGINATION,
        notificationDismissTime: 5000,
        createContactEmail: false,
        createContactIBAN: true,
        createContactAccount: false,
        createContactPhone: false,
    };
    /**
     * Service provides the journey configuration
     *
     * @usageNotes
     *
     * ### Ensure the ContactManagerJourneyModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ContactManagerJourneyModule,
     *   ],
     * })
     * export class ContactJourneyBundleModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ContactManagerJourneyPreferencesService],
     * })
     *  export class ContactManagerJourneyModule {
     * `
     */
    var ContactManagerJourneyConfigurationService = /** @class */ (function () {
        function ContactManagerJourneyConfigurationService(config) {
            var configFromProviders = config ? config : {};
            this.configuration = Object.assign(Object.assign({}, defaultConfiguration), configFromProviders);
        }
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "newContact", {
            get: function () {
                return this.configuration.newContact;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "pageSize", {
            get: function () {
                return this.configuration.pageSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "maxNavPages", {
            get: function () {
                return this.configuration.maxNavPages;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "paginationType", {
            get: function () {
                return this.configuration.paginationType;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "notificationDismissTime", {
            get: function () {
                return this.configuration.notificationDismissTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "createContactEmail", {
            get: function () {
                return this.configuration.createContactEmail;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "createContactIBAN", {
            get: function () {
                return this.configuration.createContactIBAN;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "createContactAccount", {
            get: function () {
                return this.configuration.createContactAccount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactManagerJourneyConfigurationService.prototype, "createContactPhone", {
            get: function () {
                return this.configuration.createContactPhone;
            },
            enumerable: false,
            configurable: true
        });
        return ContactManagerJourneyConfigurationService;
    }());
    /** @nocollapse */ ContactManagerJourneyConfigurationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyConfigurationService, deps: [{ token: ContactManagerJourneyConfigurationToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactManagerJourneyConfigurationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyConfigurationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyConfigurationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ContactManagerJourneyConfigurationToken]
                        }] }];
        } });

    var View;
    (function (View) {
        View["List"] = "LIST";
        View["Detail"] = "DETAIL";
        View["Edit"] = "EDIT";
        View["Select"] = "SELECT";
    })(View || (View = {}));
    /**
     * Service helps the journey navigation
     *
     * @usageNotes
     *
     * ### Ensure the ContactManagerJourneyModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ContactManagerJourneyModule,
     *   ],
     * })
     * export class ContactJourneyBundleModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ContactManagerJourneyNavigationService],
     * })
     *  export class ContactManagerJourneyModule {
     * ```
     */
    var ContactManagerJourneyNavigationService = /** @class */ (function () {
        function ContactManagerJourneyNavigationService(routerService, route) {
            this.routerService = routerService;
            this.route = route;
            this._currentView = View.List;
        }
        Object.defineProperty(ContactManagerJourneyNavigationService.prototype, "currentView", {
            get: function () {
                return this._currentView;
            },
            set: function (view) {
                this._currentView = view;
            },
            enumerable: false,
            configurable: true
        });
        ContactManagerJourneyNavigationService.prototype.list = function (page, query, queryParamsHandling) {
            if (queryParamsHandling === void 0) { queryParamsHandling = 'merge'; }
            var queryParam = {};
            if (page || page === 0)
                queryParam.page = page;
            if (query || query === '')
                queryParam.query = query;
            return this.routerService.navigate(['./'], {
                queryParams: Object.assign({}, queryParam),
                queryParamsHandling: queryParamsHandling,
                relativeTo: this.route,
            });
        };
        ContactManagerJourneyNavigationService.prototype.select = function (id) {
            this.currentView = View.Detail;
            return this.routerService.navigate(['./', id], { queryParamsHandling: 'merge', relativeTo: this.route });
        };
        ContactManagerJourneyNavigationService.prototype.edit = function (id, type) {
            if (type === void 0) { type = i1.AccountCreateType.IBAN; }
            this.currentView = View.Edit;
            return this.routerService.navigate(['./edit', id, type], { queryParamsHandling: 'merge', relativeTo: this.route });
        };
        ContactManagerJourneyNavigationService.prototype.newContact = function () {
            this.currentView = View.Select;
            return this.routerService.navigate(['./select'], { queryParamsHandling: 'merge', relativeTo: this.route });
        };
        /**
         *
         * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type
         * @returns {Promise<boolean>} resolves to true when form is ready
         */
        ContactManagerJourneyNavigationService.prototype.newContactForm = function (type) {
            this.currentView = View.Edit;
            return this.routerService.navigate(['./edit', 0, type], { queryParamsHandling: 'merge', relativeTo: this.route });
        };
        return ContactManagerJourneyNavigationService;
    }());
    /** @nocollapse */ ContactManagerJourneyNavigationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyNavigationService, deps: [{ token: i1__namespace.Router }, { token: i1__namespace.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactManagerJourneyNavigationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyNavigationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyNavigationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.Router }, { type: i1__namespace.ActivatedRoute }]; } });

    /**
     * Service provides the journey configuration
     *
     * @usageNotes
     *
     * ### Ensure the ContactManagerJourneyModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ContactManagerJourneyModule,
     *   ],
     * })
     * export class ContactJourneyBundleModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ContactManagerJourneyPreferencesService],
     * })
     *  export class ContactManagerJourneyModule {
     * ```
     */
    var ContactManagerJourneyPreferencesService = /** @class */ (function () {
        function ContactManagerJourneyPreferencesService(config) {
            this.config = config;
            this.newContactSubject$ = new rxjs.BehaviorSubject(this.config.newContact);
            this.pageSizeSubject$ = new rxjs.BehaviorSubject(this.config.pageSize);
            this.maxNavPagesSubject$ = new rxjs.BehaviorSubject(this.config.maxNavPages);
            this.paginationTypeSubject$ = new rxjs.BehaviorSubject(this.config.paginationType);
            this.createContactEmailSubject$ = new rxjs.BehaviorSubject(this.config.createContactEmail);
            this.createContactIBANSubject$ = new rxjs.BehaviorSubject(this.config.createContactIBAN);
            this.createContactAccountSubject$ = new rxjs.BehaviorSubject(this.config.createContactAccount);
            this.createContactPhoneSubject$ = new rxjs.BehaviorSubject(this.config.createContactPhone);
            this.notificationDismissTimeSubject$ = new rxjs.BehaviorSubject(this.config.notificationDismissTime);
            this.newContact$ = this.newContactSubject$.asObservable();
            this.pageSize$ = this.pageSizeSubject$.asObservable();
            this.maxNavPages$ = this.maxNavPagesSubject$.asObservable();
            this.paginationType$ = this.paginationTypeSubject$.asObservable();
            this.createContactEmail$ = this.createContactEmailSubject$.asObservable();
            this.createContactIBAN$ = this.createContactIBANSubject$.asObservable();
            this.createContactAccount$ = this.createContactAccountSubject$.asObservable();
            this.createContactPhone$ = this.createContactPhoneSubject$.asObservable();
            this.notificationDismissTime$ = this.notificationDismissTimeSubject$.asObservable();
        }
        ContactManagerJourneyPreferencesService.prototype.setNewContact = function (value) {
            this.newContactSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setPageSize = function (value) {
            this.pageSizeSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setMaxNavPages = function (value) {
            this.maxNavPagesSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setPaginationType = function (value) {
            this.paginationTypeSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setNotificationDismissTime = function (value) {
            this.notificationDismissTimeSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setCreateContactEmail = function (value) {
            this.createContactEmailSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setCreateContactIBAN = function (value) {
            this.createContactIBANSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setCreateContactAccount = function (value) {
            this.createContactAccountSubject$.next(value);
        };
        ContactManagerJourneyPreferencesService.prototype.setCreateContactPhone = function (value) {
            this.createContactPhoneSubject$.next(value);
        };
        return ContactManagerJourneyPreferencesService;
    }());
    /** @nocollapse */ ContactManagerJourneyPreferencesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyPreferencesService, deps: [{ token: ContactManagerJourneyConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactManagerJourneyPreferencesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyPreferencesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyPreferencesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: ContactManagerJourneyConfigurationService }]; } });

    /**
     * The component combines all the functionality of contacts in journey.
     *
     *
     *  ### Include this journey (standalone model)
     *
     * ```ts
     * export const routes: Routes = [
     *   {
     *     path: '',
     *     component: ContactManagerJourneyComponent,
     *     children: [
     *       {
     *         path: '',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'select',
     *         component: ContactManagerTypeListViewComponent,
     *       },
     *       {
     *         path: ':id',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'edit/:id/:type',
     *         canDeactivate: [CanDeactivateGuard],
     *         component: ContactManagerFormViewComponent,
     *       },
     *     ],
     *   },
     * ];
     * };
     * @NgModule({
     *   imports: [ContactManagerJourneyModule.forRoot({ route })],
     * })
     * export class ContactManagerJourneyBundleModule {}
     * ```
     *
     * ### Insert this BundleModule Laziliy.
     *
     * ```ts
     * @NgModule({
     *  BackbaseCoreModule.forRoot({
     *     lazyModules:[ {
     *   module: 'ContactManagerJourneyBundleModule',
     *   components: ['ContactManagerJourneyComponent'],
     *   loadChildren: () => import('./lazy-modules/lazy-bundle.module').then(m => m.ContactManagerJourneyBundleModule),
     * },]
     *  })
     * })
     * ```
     *
     * @ngModule ContactManagerJourneyModule
     */
    var ContactManagerJourneyComponent = /** @class */ (function () {
        function ContactManagerJourneyComponent(config) {
            this.config = config;
        }
        return ContactManagerJourneyComponent;
    }());
    /** @nocollapse */ ContactManagerJourneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyComponent, deps: [{ token: ContactManagerJourneyConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactManagerJourneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerJourneyComponent, selector: "bb-contact-manager-journey", providers: [
            {
                provide: i1.ContactManagerPreferencesService,
                useClass: ContactManagerJourneyPreferencesService,
            },
            {
                provide: i1.ContactsNavigationService,
                useClass: ContactManagerJourneyNavigationService,
            },
        ], ngImport: i0__namespace, template: "<bb-header-ui\n  heading=\"Manage Contacts\"\n  i18n-heading=\"Contact manager journey heading@@ccontact-manager-journey.heading.text\"\n  headingType=\"h1\"\n></bb-header-ui>\n<bb-contacts-list-container>\n  <router-outlet></router-outlet>\n</bb-contacts-list-container>\n", components: [{ type: i2__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1__namespace$1.ContactsListContainerComponent, selector: "bb-contacts-list-container" }], directives: [{ type: i1__namespace.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-manager-journey',
                        templateUrl: './contact-manager-journey.component.html',
                        providers: [
                            {
                                provide: i1.ContactManagerPreferencesService,
                                useClass: ContactManagerJourneyPreferencesService,
                            },
                            {
                                provide: i1.ContactsNavigationService,
                                useClass: ContactManagerJourneyNavigationService,
                            },
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ContactManagerJourneyConfigurationService }]; } });

    /**
     * The wrappper component will show detail of selected contact
     *
     * @usageNotes
     *
     * ### Display contact detail
     *
     * ```route
     * export const routes: Routes = [
     *   {
     *     path: '',
     *     component: ContactManagerJourneyComponent,
     *     children: [
     *       {
     *         path: '',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'select',
     *         component: ContactManagerTypeListViewComponent,
     *       },
     *       {
     *         path: ':id',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'edit/:id/:type',
     *         canDeactivate: [CanDeactivateGuard],
     *         component: ContactManagerFormViewComponent,
     *       },
     *     ],
     *   },
     * ];
     * };
     * @NgModule({
     *   imports: [ContactManagerJourneyModule.forRoot({ routes })],
     * })
     * export class ContactManagerJourneyBundleModule {}
     * ```
     * @ngModule ContactManagerJourneyModule
     */
    var ContactManagerDetailViewComponent = /** @class */ (function () {
        function ContactManagerDetailViewComponent() {
        }
        return ContactManagerDetailViewComponent;
    }());
    /** @nocollapse */ ContactManagerDetailViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerDetailViewComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactManagerDetailViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerDetailViewComponent, selector: "bb-contact-manager-detail-view", ngImport: i0__namespace, template: "<bb-contacts-detail-container></bb-contacts-detail-container>\n", components: [{ type: i1__namespace$1.ContactsDetailContainerComponent, selector: "bb-contacts-detail-container" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerDetailViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-manager-detail-view',
                        templateUrl: './contact-manager-detail.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    /**
     * The wrappper component will show contact form
     *
     * @usageNotes
     *
     * ### Display contact form based on type
     *
     * ```route
     * export const routes: Routes = [
     *   {
     *     path: '',
     *     component: ContactManagerJourneyComponent,
     *     children: [
     *       {
     *         path: '',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'select',
     *         component: ContactManagerTypeListViewComponent,
     *       },
     *       {
     *         path: ':id',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'edit/:id/:type',
     *         canDeactivate: [CanDeactivateGuard],
     *         component: ContactManagerFormViewComponent,
     *       },
     *     ],
     *   },
     * ];
     * };
     * @NgModule({
     *   imports: [ContactManagerJourneyModule.forRoot({ routes })],
     * })
     * export class ContactManagerJourneyBundleModule {}
     * ```
     * @ngModule ContactManagerJourneyModule
     */
    var ContactManagerFormViewComponent = /** @class */ (function () {
        function ContactManagerFormViewComponent() {
        }
        /**
         * Event handler for navigation change guard
         *
         * @returns {Promise<boolean> | boolean} - resolves to true if navigation can change
         */
        ContactManagerFormViewComponent.prototype.canDeactivate = function () {
            var _a;
            var canDeactivate = (_a = this.contactsFormContainerComponent) === null || _a === void 0 ? void 0 : _a.canDeactivate();
            if (rxjs.isObservable(canDeactivate)) {
                return canDeactivate.pipe(operators.take(1)).toPromise();
            }
            return canDeactivate !== null && canDeactivate !== void 0 ? canDeactivate : true;
        };
        return ContactManagerFormViewComponent;
    }());
    /** @nocollapse */ ContactManagerFormViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerFormViewComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactManagerFormViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerFormViewComponent, selector: "bb-contact-manager-form-view", viewQueries: [{ propertyName: "contactsFormContainerComponent", first: true, predicate: i1.ContactsFormContainerComponent, descendants: true }], ngImport: i0__namespace, template: "<bb-contacts-form-container></bb-contacts-form-container>\n", components: [{ type: i1__namespace$1.ContactsFormContainerComponent, selector: "bb-contacts-form-container" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerFormViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-manager-form-view',
                        templateUrl: './contact-manager-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { contactsFormContainerComponent: [{
                    type: i0.ViewChild,
                    args: [i1.ContactsFormContainerComponent]
                }] } });

    /**
     * The wrappper component will show all contacts in a list
     *
     * @usageNotes
     *
     * ### Display all contacts in a list .
     *
     * ```route
     * export const routes: Routes = [
     *   {
     *     path: '',
     *     component: ContactManagerJourneyComponent,
     *     children: [
     *       {
     *         path: '',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'select',
     *         component: ContactManagerTypeListViewComponent,
     *       },
     *       {
     *         path: ':id',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'edit/:id/:type',
     *         canDeactivate: [CanDeactivateGuard],
     *         component: ContactManagerFormViewComponent,
     *       },
     *     ],
     *   },
     * ];
     * };
     * @NgModule({
     *   imports: [ContactManagerJourneyModule.forRoot({ routes })],
     * })
     * export class ContactManagerJourneyBundleModule {}
     * ```
     * @ngModule ContactManagerJourneyModule
     */
    var ContactManagerTypeListViewComponent = /** @class */ (function () {
        function ContactManagerTypeListViewComponent() {
        }
        return ContactManagerTypeListViewComponent;
    }());
    /** @nocollapse */ ContactManagerTypeListViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerTypeListViewComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactManagerTypeListViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerTypeListViewComponent, selector: "bb-contact-manager-type-list-view", ngImport: i0__namespace, template: "<bb-contacts-type-list-container></bb-contacts-type-list-container>\n", components: [{ type: i1__namespace$1.ContactsTypeListContainerComponent, selector: "bb-contacts-type-list-container" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerTypeListViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-manager-type-list-view',
                        templateUrl: './contact-manager-type-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var contactManagerRoutes = [
        {
            path: '',
            component: ContactManagerJourneyComponent,
            children: [
                {
                    path: '',
                    component: ContactManagerDetailViewComponent,
                },
                {
                    path: 'select',
                    component: ContactManagerTypeListViewComponent,
                },
                {
                    path: ':id',
                    component: ContactManagerDetailViewComponent,
                },
                {
                    path: 'edit/:id/:type',
                    canDeactivate: [i1.CanDeactivateGuard],
                    component: ContactManagerFormViewComponent,
                },
            ],
        },
    ];

    /**
     * Journey for contacts in retails apps
     *
     * @usageNotes
     *
     * ### Include the exported widgets in your `AppModule`:
     *
     * ```typescript
     * export const routes: Routes = [
     *   {
     *     path: '',
     *     component: ContactManagerJourneyComponent,
     *     children: [
     *       {
     *         path: '',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'select',
     *         component: ContactManagerTypeListViewComponent,
     *       },
     *       {
     *         path: ':id',
     *         component: ContactManagerDetailViewComponent,
     *       },
     *       {
     *         path: 'edit/:id/:type',
     *         canDeactivate: [CanDeactivateGuard],
     *         component: ContactManagerFormViewComponent,
     *       },
     *     ],
     *   },
     * ];
     * };
     * @NgModule({
     * imports: [ContactManagerJourneyModule.forRoot({ route })],
     *  providers: [ {
     *   provide: ContactManagerJourneyConfigurationToken,
     *   useValue: {
     *     createContactEmail: true,
     *     createContactIBAN: true,
     *     createContactAccount: true,
     *     createContactPhone: true,
     *   } as Partial<ContactManagerJourneyConfig>,
     * },],
     * })
     * export class AppModule {}
     * ```
     */
    var ContactManagerJourneyModule = /** @class */ (function () {
        function ContactManagerJourneyModule() {
        }
        ContactManagerJourneyModule.forRoot = function (data) {
            if (data === void 0) { data = { routes: contactManagerRoutes }; }
            return {
                ngModule: ContactManagerJourneyModule,
                providers: [i1$1.provideRoutes(data.routes)],
            };
        };
        return ContactManagerJourneyModule;
    }());
    /** @nocollapse */ ContactManagerJourneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContactManagerJourneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyModule, declarations: [ContactManagerJourneyComponent,
            ContactManagerDetailViewComponent,
            ContactManagerTypeListViewComponent,
            ContactManagerFormViewComponent], imports: [common.CommonModule, i1.ContactManagerWidgetModule, i2.HeaderModule, i1__namespace.RouterModule] });
    /** @nocollapse */ ContactManagerJourneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyModule, providers: [ContactManagerJourneyConfigurationService], imports: [[common.CommonModule, i1.ContactManagerWidgetModule, i2.HeaderModule, i1$1.RouterModule.forChild(contactManagerRoutes)]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactManagerJourneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ContactManagerJourneyComponent,
                            ContactManagerDetailViewComponent,
                            ContactManagerTypeListViewComponent,
                            ContactManagerFormViewComponent,
                        ],
                        imports: [common.CommonModule, i1.ContactManagerWidgetModule, i2.HeaderModule, i1$1.RouterModule.forChild(contactManagerRoutes)],
                        providers: [ContactManagerJourneyConfigurationService],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ContactManagerJourneyConfigurationToken = ContactManagerJourneyConfigurationToken;
    exports.ContactManagerJourneyModule = ContactManagerJourneyModule;
    exports.contactManagerRoutes = contactManagerRoutes;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-contact-manager-journey-ang.umd.js.map
