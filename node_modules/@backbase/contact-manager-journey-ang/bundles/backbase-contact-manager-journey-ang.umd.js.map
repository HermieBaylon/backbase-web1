{"version":3,"file":"backbase-contact-manager-journey-ang.umd.js","sources":["../../../../libs/contact-manager-journey-ang/src/lib/services/contact-manager-journey-config.service.ts","../../../../libs/contact-manager-journey-ang/src/lib/services/contact-manager-journey-navigation.service.ts","../../../../libs/contact-manager-journey-ang/src/lib/services/contact-manager-journey-preferences.service.ts","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.component.html","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-detail/contact-manager-detail.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-detail/contact-manager-detail.component.html","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-form/contact-manager-form.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-form/contact-manager-form.component.html","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-type-list/contact-manager-type-list.component.ts","../../../../libs/contact-manager-journey-ang/src/lib/views/contact-manager-type-list/contact-manager-type-list.component.html","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.routes.ts","../../../../libs/contact-manager-journey-ang/src/lib/contact-manager-journey.module.ts","../../../../libs/contact-manager-journey-ang/src/backbase-contact-manager-journey-ang.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { LoadMoreMethod } from '@backbase/contact-common-ang';\n\nexport interface ContactManagerJourneyConfig {\n  /**\n   * Enable the creation of new contacts\n   */\n  newContact: boolean;\n  /**\n   * Number of contacts per page\n   */\n  pageSize: number;\n  /**\n   * Max. number of navigation pages\n   */\n  maxNavPages: number;\n  /**\n   * Type of pagination\n   */\n  paginationType: LoadMoreMethod;\n  /**\n   * Milliseconds to dismiss any notification message\n   */\n  notificationDismissTime: number;\n  /**\n   * Allow to create Contact with email\n   */\n  createContactEmail: boolean;\n  /**\n   *  Allow to create Contact with IBAN\n   */\n  createContactIBAN: boolean;\n  /**\n   * Allow to create Contact with Account Number\n   */\n  createContactAccount: boolean;\n  /**\n   * Allow to create Contact with Phone Number\n   */\n  createContactPhone: boolean;\n}\n\nexport const ContactManagerJourneyConfigurationToken = new InjectionToken<Partial<ContactManagerJourneyConfig>>(\n  'ContactManagerJourneyConfig injection token',\n);\n\nexport const defaultConfiguration: ContactManagerJourneyConfig = {\n  newContact: true,\n  pageSize: 5,\n  maxNavPages: 3,\n  paginationType: LoadMoreMethod.PAGINATION,\n  notificationDismissTime: 5000,\n  createContactEmail: false,\n  createContactIBAN: true,\n  createContactAccount: false,\n  createContactPhone: false,\n};\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * `\n */\n@Injectable()\nexport class ContactManagerJourneyConfigurationService {\n  private configuration: ContactManagerJourneyConfig;\n  constructor(@Optional() @Inject(ContactManagerJourneyConfigurationToken) config: ContactManagerJourneyConfig) {\n    const configFromProviders: Partial<ContactManagerJourneyConfig> = config ? config : {};\n    this.configuration = { ...defaultConfiguration, ...configFromProviders };\n  }\n\n  get newContact(): boolean {\n    return this.configuration.newContact;\n  }\n\n  get pageSize(): number {\n    return this.configuration.pageSize;\n  }\n\n  get maxNavPages(): number {\n    return this.configuration.maxNavPages;\n  }\n\n  get paginationType(): LoadMoreMethod {\n    return this.configuration.paginationType;\n  }\n\n  get notificationDismissTime(): number {\n    return this.configuration.notificationDismissTime;\n  }\n\n  get createContactEmail(): boolean {\n    return this.configuration.createContactEmail;\n  }\n\n  get createContactIBAN(): boolean {\n    return this.configuration.createContactIBAN;\n  }\n\n  get createContactAccount(): boolean {\n    return this.configuration.createContactAccount;\n  }\n\n  get createContactPhone(): boolean {\n    return this.configuration.createContactPhone;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AccountCreateType } from '@backbase/contact-manager-widget-ang';\n\nexport interface NavigationParams {\n  page?: number;\n  query?: string;\n}\n\nexport enum View {\n  List = 'LIST',\n  Detail = 'DETAIL',\n  Edit = 'EDIT',\n  Select = 'SELECT',\n}\n/**\n * Service helps the journey navigation\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyNavigationService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\n@Injectable()\nexport class ContactManagerJourneyNavigationService {\n  private _currentView = View.List;\n\n  get currentView(): View {\n    return this._currentView;\n  }\n\n  set currentView(view: View) {\n    this._currentView = view;\n  }\n\n  constructor(private readonly routerService: Router, private readonly route: ActivatedRoute) {}\n\n  list(page?: number, query?: string, queryParamsHandling: 'merge' | 'preserve' | '' = 'merge'): Promise<boolean> {\n    const queryParam: NavigationParams = {};\n    if (page || page === 0) queryParam.page = page;\n    if (query || query === '') queryParam.query = query;\n\n    return this.routerService.navigate(['./'], {\n      queryParams: { ...queryParam },\n      queryParamsHandling: queryParamsHandling,\n      relativeTo: this.route,\n    });\n  }\n\n  select(id: string): Promise<boolean> {\n    this.currentView = View.Detail;\n\n    return this.routerService.navigate(['./', id], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n\n  edit(id: string, type: string = AccountCreateType.IBAN): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['./edit', id, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n\n  newContact(): Promise<boolean> {\n    this.currentView = View.Select;\n\n    return this.routerService.navigate(['./select'], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n  /**\n   *\n   * @param {AccountCreateType} type - if the new contact is of IBAN/Phone/Email/Account type\n   * @returns {Promise<boolean>} resolves to true when form is ready\n   */\n  newContactForm(type: AccountCreateType): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['./edit', 0, type], { queryParamsHandling: 'merge', relativeTo: this.route });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ContactManagerJourneyConfigurationService } from './contact-manager-journey-config.service';\n/**\n * Service provides the journey configuration\n *\n * @usageNotes\n *\n * ### Ensure the ContactManagerJourneyModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerJourneyModule,\n *   ],\n * })\n * export class ContactJourneyBundleModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactManagerJourneyPreferencesService],\n * })\n *  export class ContactManagerJourneyModule {\n * ```\n */\n@Injectable()\nexport class ContactManagerJourneyPreferencesService {\n  private readonly newContactSubject$ = new BehaviorSubject<boolean>(this.config.newContact);\n  private readonly pageSizeSubject$ = new BehaviorSubject<number>(this.config.pageSize);\n  private readonly maxNavPagesSubject$ = new BehaviorSubject<number>(this.config.maxNavPages);\n  private readonly paginationTypeSubject$ = new BehaviorSubject<string>(this.config.paginationType);\n  private readonly createContactEmailSubject$ = new BehaviorSubject<boolean>(this.config.createContactEmail);\n  private readonly createContactIBANSubject$ = new BehaviorSubject<boolean>(this.config.createContactIBAN);\n  private readonly createContactAccountSubject$ = new BehaviorSubject<boolean>(this.config.createContactAccount);\n  private readonly createContactPhoneSubject$ = new BehaviorSubject<boolean>(this.config.createContactPhone);\n  private readonly notificationDismissTimeSubject$ = new BehaviorSubject<number>(this.config.notificationDismissTime);\n\n  readonly newContact$ = this.newContactSubject$.asObservable();\n  readonly pageSize$ = this.pageSizeSubject$.asObservable();\n  readonly maxNavPages$ = this.maxNavPagesSubject$.asObservable();\n  readonly paginationType$ = this.paginationTypeSubject$.asObservable();\n  readonly createContactEmail$ = this.createContactEmailSubject$.asObservable();\n  readonly createContactIBAN$ = this.createContactIBANSubject$.asObservable();\n  readonly createContactAccount$ = this.createContactAccountSubject$.asObservable();\n  readonly createContactPhone$ = this.createContactPhoneSubject$.asObservable();\n  readonly notificationDismissTime$ = this.notificationDismissTimeSubject$.asObservable();\n\n  setNewContact(value: boolean) {\n    this.newContactSubject$.next(value);\n  }\n\n  setPageSize(value: number) {\n    this.pageSizeSubject$.next(value);\n  }\n\n  setMaxNavPages(value: number) {\n    this.maxNavPagesSubject$.next(value);\n  }\n\n  setPaginationType(value: string) {\n    this.paginationTypeSubject$.next(value);\n  }\n\n  setNotificationDismissTime(value: number) {\n    this.notificationDismissTimeSubject$.next(value);\n  }\n\n  setCreateContactEmail(value: boolean) {\n    this.createContactEmailSubject$.next(value);\n  }\n\n  setCreateContactIBAN(value: boolean) {\n    this.createContactIBANSubject$.next(value);\n  }\n\n  setCreateContactAccount(value: boolean) {\n    this.createContactAccountSubject$.next(value);\n  }\n\n  setCreateContactPhone(value: boolean) {\n    this.createContactPhoneSubject$.next(value);\n  }\n\n  constructor(private readonly config: ContactManagerJourneyConfigurationService) {}\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ContactManagerPreferencesService, ContactsNavigationService } from '@backbase/contact-manager-widget-ang';\nimport { ContactManagerJourneyConfigurationService } from './services/contact-manager-journey-config.service';\nimport { ContactManagerJourneyNavigationService } from './services/contact-manager-journey-navigation.service';\nimport { ContactManagerJourneyPreferencesService } from './services/contact-manager-journey-preferences.service';\n/**\n * The component combines all the functionality of contacts in journey.\n *\n *\n *  ### Include this journey (standalone model)\n *\n * ```ts\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ route })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n *\n * ### Insert this BundleModule Laziliy.\n *\n * ```ts\n * @NgModule({\n *  BackbaseCoreModule.forRoot({\n *     lazyModules:[ {\n *   module: 'ContactManagerJourneyBundleModule',\n *   components: ['ContactManagerJourneyComponent'],\n *   loadChildren: () => import('./lazy-modules/lazy-bundle.module').then(m => m.ContactManagerJourneyBundleModule),\n * },]\n *  })\n * })\n * ```\n *\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-journey',\n  templateUrl: './contact-manager-journey.component.html',\n  providers: [\n    {\n      provide: ContactManagerPreferencesService,\n      useClass: ContactManagerJourneyPreferencesService,\n    },\n    {\n      provide: ContactsNavigationService,\n      useClass: ContactManagerJourneyNavigationService,\n    },\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerJourneyComponent {\n  constructor(public readonly config: ContactManagerJourneyConfigurationService) {}\n}\n","<bb-header-ui\n  heading=\"Manage Contacts\"\n  i18n-heading=\"Contact manager journey heading@@ccontact-manager-journey.heading.text\"\n  headingType=\"h1\"\n></bb-header-ui>\n<bb-contacts-list-container>\n  <router-outlet></router-outlet>\n</bb-contacts-list-container>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n/**\n * The wrappper component will show detail of selected contact\n *\n * @usageNotes\n *\n * ### Display contact detail\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-detail-view',\n  templateUrl: './contact-manager-detail.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerDetailViewComponent {}\n","<bb-contacts-detail-container></bb-contacts-detail-container>\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { ContactsFormContainerComponent } from '@backbase/contact-manager-widget-ang';\nimport { isObservable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n/**\n * The wrappper component will show contact form\n *\n * @usageNotes\n *\n * ### Display contact form based on type\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-form-view',\n  templateUrl: './contact-manager-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerFormViewComponent {\n  @ViewChild(ContactsFormContainerComponent)\n  contactsFormContainerComponent?: ContactsFormContainerComponent;\n\n  /**\n   * Event handler for navigation change guard\n   *\n   * @returns {Promise<boolean> | boolean} - resolves to true if navigation can change\n   */\n  canDeactivate(): Promise<boolean> | boolean {\n    const canDeactivate = this.contactsFormContainerComponent?.canDeactivate();\n    if (isObservable(canDeactivate)) {\n      return canDeactivate.pipe(take(1)).toPromise();\n    }\n\n    return canDeactivate ?? true;\n  }\n}\n","<bb-contacts-form-container></bb-contacts-form-container>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n/**\n * The wrappper component will show all contacts in a list\n *\n * @usageNotes\n *\n * ### Display all contacts in a list .\n *\n * ```route\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n *   imports: [ContactManagerJourneyModule.forRoot({ routes })],\n * })\n * export class ContactManagerJourneyBundleModule {}\n * ```\n * @ngModule ContactManagerJourneyModule\n */\n@Component({\n  selector: 'bb-contact-manager-type-list-view',\n  templateUrl: './contact-manager-type-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactManagerTypeListViewComponent {}\n","<bb-contacts-type-list-container></bb-contacts-type-list-container>\n","import { Routes } from '@angular/router';\nimport { CanDeactivateGuard } from '@backbase/contact-manager-widget-ang';\nimport { ContactManagerJourneyComponent } from './contact-manager-journey.component';\nimport { ContactManagerDetailViewComponent } from './views/contact-manager-detail/contact-manager-detail.component';\nimport { ContactManagerFormViewComponent } from './views/contact-manager-form/contact-manager-form.component';\nimport { ContactManagerTypeListViewComponent } from './views/contact-manager-type-list/contact-manager-type-list.component';\n\nexport const contactManagerRoutes: Routes = [\n  {\n    path: '',\n    component: ContactManagerJourneyComponent,\n    children: [\n      {\n        path: '',\n        component: ContactManagerDetailViewComponent,\n      },\n      {\n        path: 'select',\n        component: ContactManagerTypeListViewComponent,\n      },\n      {\n        path: ':id',\n        component: ContactManagerDetailViewComponent,\n      },\n\n      {\n        path: 'edit/:id/:type',\n        canDeactivate: [CanDeactivateGuard],\n        component: ContactManagerFormViewComponent,\n      },\n    ],\n  },\n];\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { provideRoutes, RouterModule, Routes } from '@angular/router';\nimport { ContactManagerJourneyConfigurationService } from './services/contact-manager-journey-config.service';\nimport { contactManagerRoutes } from './contact-manager-journey.routes';\nimport { ContactManagerWidgetModule } from '@backbase/contact-manager-widget-ang';\nimport { ContactManagerJourneyComponent } from './contact-manager-journey.component';\nimport { ContactManagerDetailViewComponent } from './views/contact-manager-detail/contact-manager-detail.component';\nimport { ContactManagerTypeListViewComponent } from './views/contact-manager-type-list/contact-manager-type-list.component';\nimport { ContactManagerFormViewComponent } from './views/contact-manager-form/contact-manager-form.component';\nimport { HeaderModule } from '@backbase/ui-ang/header';\n\n/**\n * Journey for contacts in retails apps\n *\n * @usageNotes\n *\n * ### Include the exported widgets in your `AppModule`:\n *\n * ```typescript\n * export const routes: Routes = [\n *   {\n *     path: '',\n *     component: ContactManagerJourneyComponent,\n *     children: [\n *       {\n *         path: '',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'select',\n *         component: ContactManagerTypeListViewComponent,\n *       },\n *       {\n *         path: ':id',\n *         component: ContactManagerDetailViewComponent,\n *       },\n *       {\n *         path: 'edit/:id/:type',\n *         canDeactivate: [CanDeactivateGuard],\n *         component: ContactManagerFormViewComponent,\n *       },\n *     ],\n *   },\n * ];\n * };\n * @NgModule({\n * imports: [ContactManagerJourneyModule.forRoot({ route })],\n *  providers: [ {\n *   provide: ContactManagerJourneyConfigurationToken,\n *   useValue: {\n *     createContactEmail: true,\n *     createContactIBAN: true,\n *     createContactAccount: true,\n *     createContactPhone: true,\n *   } as Partial<ContactManagerJourneyConfig>,\n * },],\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  declarations: [\n    ContactManagerJourneyComponent,\n    ContactManagerDetailViewComponent,\n    ContactManagerTypeListViewComponent,\n    ContactManagerFormViewComponent,\n  ],\n  imports: [CommonModule, ContactManagerWidgetModule, HeaderModule, RouterModule.forChild(contactManagerRoutes)],\n  providers: [ContactManagerJourneyConfigurationService],\n})\nexport class ContactManagerJourneyModule {\n  static forRoot(\n    data: { routes: Routes; [key: string]: any } = { routes: contactManagerRoutes },\n  ): ModuleWithProviders<ContactManagerJourneyModule> {\n    return {\n      ngModule: ContactManagerJourneyModule,\n      providers: [provideRoutes(data.routes)],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["InjectionToken","LoadMoreMethod","Injectable","Optional","Inject","AccountCreateType","BehaviorSubject","ContactManagerPreferencesService","ContactsNavigationService","Component","ChangeDetectionStrategy","isObservable","take","ContactsFormContainerComponent","ViewChild","CanDeactivateGuard","provideRoutes","CommonModule","ContactManagerWidgetModule","HeaderModule","RouterModule","NgModule"],"mappings":"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"}