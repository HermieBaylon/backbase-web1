{"version":3,"file":"backbase-actions-store-ang.js","sources":["../../../../libs/actions-store-ang/src/action-recipes/actions.ts","../../../../libs/actions-store-ang/src/action-recipes/selectors.ts","../../../../libs/actions-store-ang/src/action-recipes/effects.ts","../../../../libs/actions-store-ang/src/specifications/actions.ts","../../../../libs/actions-store-ang/src/specifications/effects.ts","../../../../libs/actions-store-ang/src/action-recipes/initial-state.ts","../../../../libs/actions-store-ang/src/action-recipes/reducers.ts","../../../../libs/actions-store-ang/src/specifications/initial-state.ts","../../../../libs/actions-store-ang/src/initial-state.ts","../../../../libs/actions-store-ang/src/specifications/reducers.ts","../../../../libs/actions-store-ang/src/actions-store.module.ts","../../../../libs/actions-store-ang/src/specifications/selectors.ts","../../../../libs/actions-store-ang/src/selectors.ts","../../../../libs/actions-store-ang/src/actions-store-model.service.ts","../../../../libs/actions-store-ang/backbase-actions-store-ang.ts"],"sourcesContent":["import { ActionRecipeGetResponseBody } from '@backbase/data-ang/actions';\nimport { createAction, props } from '@ngrx/store';\nimport { ActionRecipeItem, Notification } from '@backbase/actions-common-ang';\nimport { LoadActionRecipesPayload, SaveActionRecipePayload } from '../model/action-recipes-actions.model';\n\nexport const loadActionRecipes = createAction(\n  '[ACT Action Recipes] Load Action Recipes',\n  props<LoadActionRecipesPayload>(),\n);\n\nexport const loadActionRecipesSuccess = createAction(\n  '[ACT Action Recipes] Load Action Recipes Success',\n  props<{\n    actionRecipes: ActionRecipeGetResponseBody[];\n    specificationIds?: Set<string>;\n  }>(),\n);\n\nexport const loadActionRecipesFailed = createAction(\n  '[ACT Action Recipes] Load Action Recipes Failed',\n  props<{ error?: Error }>(),\n);\n\nexport const saveActionRecipe = createAction(\n  '[ACT Action Recipes] Save Action Recipe',\n  props<SaveActionRecipePayload>(),\n);\n\nexport const saveActionRecipeSuccess = createAction(\n  '[ACT Action Recipes] Save Action Recipe Success',\n  props<{\n    actionRecipe: ActionRecipeGetResponseBody;\n    notification?: Notification;\n  }>(),\n);\n\nexport const saveActionRecipeFailure = createAction(\n  '[ACT Action Recipes] Save Action Recipe Failure',\n  props<{\n    actionRecipe: ActionRecipeItem;\n    notification?: Notification;\n  }>(),\n);\n","import { ActionRecipeItem } from '@backbase/actions-common-ang';\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ActionRecipesState, ActionsState } from '../model/actions-store-state.model';\n\nexport const selectActionRecipesState = createFeatureSelector<ActionsState, ActionRecipesState>('actionRecipes');\n\nexport const actionRecipes = createSelector(selectActionRecipesState, (state): ActionRecipeItem[] => state.data);\n\nexport const actionRecipesLoading = createSelector(selectActionRecipesState, state => state.loading);\n\nexport const actionRecipesError = createSelector(selectActionRecipesState, state => state.error);\n\nexport const actionRecipesSpecificationIds = createSelector(selectActionRecipesState, state => state.specificationIds);\n","import { Injectable } from '@angular/core';\nimport { NotificationService } from '@backbase/ui-ang/notification';\nimport { Store } from '@ngrx/store';\nimport { merge, of, throwError } from 'rxjs';\nimport { catchError, first, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';\nimport {\n  EMPTY_RESPONSE_ERROR,\n  parseActionRecipeFormItem,\n  getMappedRecurrenceResponse,\n  NotificationsPreferencesBaseDataService,\n} from '@backbase/actions-common-ang';\nimport {\n  loadActionRecipes,\n  loadActionRecipesFailed,\n  loadActionRecipesSuccess,\n  saveActionRecipe,\n  saveActionRecipeFailure,\n  saveActionRecipeSuccess,\n} from './actions';\nimport { actionRecipesSpecificationIds } from './selectors';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ActionsState } from '../model/actions-store-state.model';\n\n@Injectable()\nexport class ActionsRecipesEffects {\n  constructor(\n    private readonly actions$: Actions,\n    private readonly store: Store<ActionsState>,\n    private readonly dataService: NotificationsPreferencesBaseDataService,\n    private readonly notificationService: NotificationService,\n  ) {}\n\n  actionRecipes$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadActionRecipes),\n      switchMap(({ specificationIds, arrangementId }) =>\n        this.dataService.getActionRecipes(arrangementId).pipe(\n          map(data => (specificationIds ? data.filter(({ specificationId: id }) => specificationIds.has(id)) : data)),\n          map(data =>\n            arrangementId ? data.filter(item => !item.arrangementId || item.arrangementId === arrangementId) : data,\n          ),\n          map(data =>\n            loadActionRecipesSuccess({\n              actionRecipes: data || [],\n              specificationIds,\n            }),\n          ),\n          catchError(error => of(loadActionRecipesFailed({ error }))),\n        ),\n      ),\n    ),\n  );\n\n  saveActionRecipe$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(saveActionRecipe),\n      groupBy(({ actionRecipe }) => actionRecipe.specificationId),\n      mergeMap(group =>\n        group.pipe(\n          switchMap(({ actionRecipe, arrangementId, warningNotification, successNotification }) =>\n            this.dataService.saveActionRecipe(actionRecipe, arrangementId).pipe(\n              switchMap(({ actionRecipes }) => {\n                if (!actionRecipes || !actionRecipes.length) return throwError(EMPTY_RESPONSE_ERROR);\n\n                return of(\n                  saveActionRecipeSuccess({\n                    actionRecipe: {\n                      ...actionRecipes[0],\n                      ...(actionRecipes[0].recurrence && {\n                        recurrence: getMappedRecurrenceResponse(actionRecipes[0].recurrence, actionRecipe),\n                      }),\n                    },\n                    ...(successNotification && { notification: successNotification }),\n                  }),\n                );\n              }),\n              catchError(err => {\n                if (err.status === 409) {\n                  return this.store.select(actionRecipesSpecificationIds).pipe(\n                    first(),\n                    map(specificationIds =>\n                      loadActionRecipes({\n                        arrangementId,\n                        specificationIds,\n                      }),\n                    ),\n                  );\n                }\n\n                return of(\n                  saveActionRecipeFailure({\n                    actionRecipe: parseActionRecipeFormItem(actionRecipe),\n                    ...(warningNotification && { notification: warningNotification }),\n                  }),\n                );\n              }),\n            ),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  showNotification$ = createEffect(\n    () =>\n      merge(\n        this.actions$.pipe(ofType(saveActionRecipeSuccess)),\n        this.actions$.pipe(ofType(saveActionRecipeFailure)),\n      ).pipe(\n        map(({ notification }) => {\n          if (notification) {\n            this.notificationService.showNotification(notification);\n          }\n        }),\n      ),\n    { dispatch: false },\n  );\n}\n","import { ActionRecipeSpecification } from '@backbase/data-ang/actions';\nimport { createAction, props } from '@ngrx/store';\nimport { LoadSpecificationsPayload } from '../model/action-recipes-actions.model';\n\nexport const loadSpecifications = createAction(\n  '[ACT Specifications] Load Specifications',\n  props<LoadSpecificationsPayload>(),\n);\n\nexport const loadSpecificationsSuccess = createAction(\n  '[ACT Specifications] Load Specifications Success',\n  props<{ specifications: ActionRecipeSpecification[] }>(),\n);\n\nexport const loadSpecificationsFailed = createAction(\n  '[ACT Specifications] Load Specifications Failed',\n  props<{ error: boolean }>(),\n);\n","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { loadSpecifications, loadSpecificationsFailed, loadSpecificationsSuccess } from './actions';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { NotificationsPreferencesBaseDataService } from '@backbase/actions-common-ang';\n\n@Injectable()\nexport class ActionsSpecificationsEffects {\n  constructor(\n    private readonly actions$: Actions,\n    private readonly dataService: NotificationsPreferencesBaseDataService,\n  ) {}\n\n  specifications$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadSpecifications),\n      switchMap(({ specificationIds }) =>\n        this.dataService.getSpecifications().pipe(\n          map(data => (specificationIds ? data.filter(({ id }) => !!id && specificationIds.has(id)) : data)),\n          map(data => loadSpecificationsSuccess({ specifications: data || [] })),\n          catchError(() => of(loadSpecificationsFailed({ error: true }))),\n        ),\n      ),\n    ),\n  );\n}\n","import { ActionRecipesState } from '../model/actions-store-state.model';\n\nexport const actionRecipeInitialState: ActionRecipesState = {\n  data: [],\n  loading: false,\n  error: undefined,\n  specificationIds: undefined,\n};\n","import { Action, createReducer, on } from '@ngrx/store';\nimport {\n  loadActionRecipes,\n  loadActionRecipesFailed,\n  loadActionRecipesSuccess,\n  saveActionRecipeFailure,\n  saveActionRecipeSuccess,\n} from './actions';\nimport { ActionRecipeItem } from '@backbase/actions-common-ang';\nimport { actionRecipeInitialState } from './initial-state';\nimport { ActionRecipesState } from '../model/actions-store-state.model';\n\nconst _actionRecipesReducer = createReducer(\n  actionRecipeInitialState,\n  on(loadActionRecipes, state => ({\n    ...state,\n    loading: true,\n    error: undefined,\n    specificationIds: undefined,\n  })),\n  on(loadActionRecipesSuccess, (state, action) => ({\n    ...state,\n    data: action.actionRecipes,\n    loading: false,\n    specificationIds: action.specificationIds,\n  })),\n  on(loadActionRecipesFailed, (state, action) => ({\n    ...state,\n    error: action.error,\n    loading: false,\n  })),\n  on(saveActionRecipeSuccess, (state, action) => {\n    const { actionRecipe: recipe } = action;\n    const { data } = state;\n    const targetIndex = data.findIndex(({ specificationId }) => specificationId === recipe.specificationId);\n    const isAppend = targetIndex === -1;\n\n    return {\n      ...state,\n      data: isAppend ? [...data, recipe] : insertActionRecipe(data, recipe, targetIndex),\n    };\n  }),\n  on(saveActionRecipeFailure, (state, action) => {\n    const { actionRecipe: recipe } = action;\n    const { data } = state;\n    const targetIndex = data.findIndex(({ specificationId }) => specificationId === recipe.specificationId);\n    const isAppend = targetIndex === -1;\n\n    return {\n      ...state,\n      data: isAppend\n        ? [...data, { ...recipe, active: false }]\n        : insertActionRecipe(data, { ...data[targetIndex] }, targetIndex),\n    };\n  }),\n);\n\nexport function actionRecipesReducer(state: ActionRecipesState | undefined, action: Action): ActionRecipesState {\n  return _actionRecipesReducer(state, action);\n}\n\nconst insertActionRecipe = (data: ActionRecipeItem[], actionRecipe: ActionRecipeItem, index: number) => [\n  ...data.slice(0, index),\n  actionRecipe,\n  ...data.slice(index + 1),\n];\n","import { SpecificationsState } from '../model/actions-store-state.model';\n\nexport const specificationsInitialState: SpecificationsState = {\n  data: [],\n  loading: false,\n  error: false,\n};\n","import { actionRecipeInitialState } from './action-recipes/initial-state';\nimport { ActionsState } from './model/actions-store-state.model';\nimport { specificationsInitialState } from './specifications/initial-state';\n\nexport const initialState: ActionsState = {\n  specifications: specificationsInitialState,\n  actionRecipes: actionRecipeInitialState,\n};\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { loadSpecifications, loadSpecificationsFailed, loadSpecificationsSuccess } from './actions';\nimport { initialState } from '../initial-state';\nimport { SpecificationsState } from '../model/actions-store-state.model';\n\nexport const _specificationsReducer = createReducer(\n  initialState.specifications,\n  on(loadSpecifications, state => ({\n    ...state,\n    loading: true,\n    error: false,\n  })),\n  on(loadSpecificationsSuccess, (state, action) => ({\n    ...state,\n    data: action.specifications,\n    loading: false,\n  })),\n  on(loadSpecificationsFailed, (state, action) => ({\n    ...state,\n    error: action.error,\n    loading: false,\n  })),\n);\n\nexport function specificationsReducer(state: SpecificationsState | undefined, action: Action): SpecificationsState {\n  return _specificationsReducer(state, action);\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { ActionsRecipesEffects } from './action-recipes/effects';\nimport { ActionsCommonModule } from '@backbase/actions-common-ang';\nimport { ActionsSpecificationsEffects } from './specifications/effects';\nimport { actionRecipesReducer } from './action-recipes/reducers';\nimport { specificationsReducer } from './specifications/reducers';\n\n@NgModule({\n  providers: [ActionsRecipesEffects, ActionsSpecificationsEffects],\n  imports: [\n    CommonModule,\n    ActionsCommonModule,\n    StoreModule.forFeature('actionRecipes', actionRecipesReducer),\n    StoreModule.forFeature('specifications', specificationsReducer),\n    EffectsModule.forFeature([ActionsRecipesEffects, ActionsSpecificationsEffects]),\n  ],\n})\nexport class ActionsStoreModule {}\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ActionsState, SpecificationsState } from '../model/actions-store-state.model';\n\nexport const selectSpecificationsState = createFeatureSelector<ActionsState, SpecificationsState>('specifications');\n\nexport const specifications = createSelector(selectSpecificationsState, state => state.data);\n\nexport const specificationsLoading = createSelector(selectSpecificationsState, state => state.loading);\n\nexport const specificationsError = createSelector(selectSpecificationsState, state => state.error);\n","import { createSelector } from '@ngrx/store';\nimport { mergeSpecificationsWithActionRecipes, SpecificationsWithAction } from '@backbase/actions-common-ang';\nimport { actionRecipes } from './action-recipes/selectors';\nimport { specifications } from './specifications/selectors';\n\nexport const specificationsWithActionRecipe = createSelector(\n  specifications,\n  actionRecipes,\n  (specs, recipes): SpecificationsWithAction => mergeSpecificationsWithActionRecipes(specs, recipes),\n);\n","import { Injectable } from '@angular/core';\nimport { ActionRecipeItem, SpecificationsWithAction } from '@backbase/actions-common-ang';\nimport { Store } from '@ngrx/store';\nimport { loadActionRecipes, saveActionRecipe } from './action-recipes/actions';\nimport { loadSpecifications } from './specifications/actions';\nimport { specificationsError, specificationsLoading, specifications } from './specifications/selectors';\nimport { actionRecipes, actionRecipesError, actionRecipesLoading } from './action-recipes/selectors';\nimport { specificationsWithActionRecipe } from './selectors';\nimport {\n  LoadActionRecipesPayload,\n  LoadSpecificationsPayload,\n  SaveActionRecipePayload,\n} from './model/action-recipes-actions.model';\nimport { ActionsState } from './model/actions-store-state.model';\nimport { Observable } from 'rxjs';\nimport { ActionRecipeSpecification } from '@backbase/data-ang/actions';\n\n@Injectable()\nexport class ActionsStoreModel {\n  constructor(private readonly store: Store<ActionsState>) {}\n  /**\n   * Stream of specifications.\n   */\n  readonly specifications$: Observable<ActionRecipeSpecification[]> = this.store.select(specifications);\n\n  /**\n   * Stream of specifications loading flags.\n   */\n  readonly specificationsLoading$: Observable<boolean> = this.store.select(specificationsLoading);\n\n  /**\n   * Stream of specifications errors.\n   */\n  readonly specificationsError$: Observable<boolean> = this.store.select(specificationsError);\n\n  /**\n   * Stream of action recipes.\n   */\n  readonly actionRecipes$: Observable<ActionRecipeItem[]> = this.store.select(actionRecipes);\n\n  /**\n   * Stream of action recipes loading flags.\n   */\n  readonly actionRecipesLoading$: Observable<boolean> = this.store.select(actionRecipesLoading);\n\n  /**\n   * Stream of action recipes errors.\n   */\n  readonly actionRecipesError$: Observable<Error | undefined> = this.store.select(actionRecipesError);\n\n  /**\n   * Stream of specifications with action recipe.\n   */\n  readonly specificationsWithActionRecipe$: Observable<SpecificationsWithAction> =\n    this.store.select(specificationsWithActionRecipe);\n\n  /**\n   * Method to dispatch load specifications.\n   *\n   * @param payload - load specifications payload\n   */\n  dispatchLoadSpecifications(payload: LoadSpecificationsPayload) {\n    this.store.dispatch(loadSpecifications(payload));\n  }\n\n  /**\n   * Method to dispatch load action recipes.\n   *\n   * @param payload - load specifications payload\n   */\n  dispatchLoadActionRecipes(payload: LoadActionRecipesPayload) {\n    this.store.dispatch(loadActionRecipes(payload));\n  }\n\n  /**\n   * Method to dispatch save action recipe.\n   *\n   * @param payload - action recipe payload\n   */\n  dispatchSaveActionRecipe(payload: SaveActionRecipePayload) {\n    this.store.dispatch(saveActionRecipe(payload));\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;;;;;;;AAKO,MAAM,iBAAiB,GAAG,YAAY,CAC3C,0CAA0C,EAC1C,KAAK,EAA4B,CAClC,CAAC;AAEK,MAAM,wBAAwB,GAAG,YAAY,CAClD,kDAAkD,EAClD,KAAK,EAGD,CACL,CAAC;AAEK,MAAM,uBAAuB,GAAG,YAAY,CACjD,iDAAiD,EACjD,KAAK,EAAqB,CAC3B,CAAC;AAEK,MAAM,gBAAgB,GAAG,YAAY,CAC1C,yCAAyC,EACzC,KAAK,EAA2B,CACjC,CAAC;AAEK,MAAM,uBAAuB,GAAG,YAAY,CACjD,iDAAiD,EACjD,KAAK,EAGD,CACL,CAAC;AAEK,MAAM,uBAAuB,GAAG,YAAY,CACjD,iDAAiD,EACjD,KAAK,EAGD,CACL;;ACtCM,MAAM,wBAAwB,GAAG,qBAAqB,CAAmC,eAAe,CAAC,CAAC;AAE1G,MAAM,aAAa,GAAG,cAAc,CAAC,wBAAwB,EAAE,CAAC,KAAK,KAAyB,KAAK,CAAC,IAAI,CAAC,CAAC;AAE1G,MAAM,oBAAoB,GAAG,cAAc,CAAC,wBAAwB,EAAE,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAE9F,MAAM,kBAAkB,GAAG,cAAc,CAAC,wBAAwB,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AAE1F,MAAM,6BAA6B,GAAG,cAAc,CAAC,wBAAwB,EAAE,KAAK,IAAI,KAAK,CAAC,gBAAgB,CAAC;;MCYzG,qBAAqB;IAChC,YACmB,QAAiB,EACjB,KAA0B,EAC1B,WAAoD,EACpD,mBAAwC;QAHxC,aAAQ,GAAR,QAAQ,CAAS;QACjB,UAAK,GAAL,KAAK,CAAqB;QAC1B,gBAAW,GAAX,WAAW,CAAyC;QACpD,wBAAmB,GAAnB,mBAAmB,CAAqB;QAG3D,mBAAc,GAAG,YAAY,CAAC,MAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,iBAAiB,CAAC,EACzB,SAAS,CAAC,CAAC,EAAE,gBAAgB,EAAE,aAAa,EAAE,KAC5C,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,IAAI,CACnD,GAAG,CAAC,IAAI,KAAK,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,eAAe,EAAE,EAAE,EAAE,KAAK,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAC3G,GAAG,CAAC,IAAI,IACN,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,KAAK,aAAa,CAAC,GAAG,IAAI,CACxG,EACD,GAAG,CAAC,IAAI,IACN,wBAAwB,CAAC;YACvB,aAAa,EAAE,IAAI,IAAI,EAAE;YACzB,gBAAgB;SACjB,CAAC,CACH,EACD,UAAU,CAAC,KAAK,IAAI,EAAE,CAAC,uBAAuB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAC5D,CACF,CACF,CACF,CAAC;QAEF,sBAAiB,GAAG,YAAY,CAAC,MAC/B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,gBAAgB,CAAC,EACxB,OAAO,CAAC,CAAC,EAAE,YAAY,EAAE,KAAK,YAAY,CAAC,eAAe,CAAC,EAC3D,QAAQ,CAAC,KAAK,IACZ,KAAK,CAAC,IAAI,CACR,SAAS,CAAC,CAAC,EAAE,YAAY,EAAE,aAAa,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,KAClF,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,IAAI,CACjE,SAAS,CAAC,CAAC,EAAE,aAAa,EAAE;YAC1B,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,MAAM;gBAAE,OAAO,UAAU,CAAC,oBAAoB,CAAC,CAAC;YAErF,OAAO,EAAE,CACP,uBAAuB,iBACrB,YAAY,kCACP,aAAa,CAAC,CAAC,CAAC,IACf,aAAa,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI;oBACjC,UAAU,EAAE,2BAA2B,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,YAAY,CAAC;iBACnF,OAEC,mBAAmB,IAAI,EAAE,YAAY,EAAE,mBAAmB,EAAE,GAChE,CACH,CAAC;SACH,CAAC,EACF,UAAU,CAAC,GAAG;YACZ,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACtB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC,IAAI,CAC1D,KAAK,EAAE,EACP,GAAG,CAAC,gBAAgB,IAClB,iBAAiB,CAAC;oBAChB,aAAa;oBACb,gBAAgB;iBACjB,CAAC,CACH,CACF,CAAC;aACH;YAED,OAAO,EAAE,CACP,uBAAuB,iBACrB,YAAY,EAAE,yBAAyB,CAAC,YAAY,CAAC,KACjD,mBAAmB,IAAI,EAAE,YAAY,EAAE,mBAAmB,EAAE,GAChE,CACH,CAAC;SACH,CAAC,CACH,CACF,CACF,CACF,CACF,CACF,CAAC;QAEF,sBAAiB,GAAG,YAAY,CAC9B,MACE,KAAK,CACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,EACnD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CACpD,CAAC,IAAI,CACJ,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE;YACnB,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;aACzD;SACF,CAAC,CACH,EACH,EAAE,QAAQ,EAAE,KAAK,EAAE,CACpB,CAAC;KAtFE;;mHANO,qBAAqB;uHAArB,qBAAqB;4FAArB,qBAAqB;kBADjC,UAAU;;;ACnBJ,MAAM,kBAAkB,GAAG,YAAY,CAC5C,0CAA0C,EAC1C,KAAK,EAA6B,CACnC,CAAC;AAEK,MAAM,yBAAyB,GAAG,YAAY,CACnD,kDAAkD,EAClD,KAAK,EAAmD,CACzD,CAAC;AAEK,MAAM,wBAAwB,GAAG,YAAY,CAClD,iDAAiD,EACjD,KAAK,EAAsB,CAC5B;;MCTY,4BAA4B;IACvC,YACmB,QAAiB,EACjB,WAAoD;QADpD,aAAQ,GAAR,QAAQ,CAAS;QACjB,gBAAW,GAAX,WAAW,CAAyC;QAGvE,oBAAe,GAAG,YAAY,CAAC,MAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,kBAAkB,CAAC,EAC1B,SAAS,CAAC,CAAC,EAAE,gBAAgB,EAAE,KAC7B,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,IAAI,CACvC,GAAG,CAAC,IAAI,KAAK,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAClG,GAAG,CAAC,IAAI,IAAI,yBAAyB,CAAC,EAAE,cAAc,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC,CAAC,EACtE,UAAU,CAAC,MAAM,EAAE,CAAC,wBAAwB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAChE,CACF,CACF,CACF,CAAC;KAbE;;0HAJO,4BAA4B;8HAA5B,4BAA4B;4FAA5B,4BAA4B;kBADxC,UAAU;;;ACLJ,MAAM,wBAAwB,GAAuB;IAC1D,IAAI,EAAE,EAAE;IACR,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,SAAS;IAChB,gBAAgB,EAAE,SAAS;CAC5B;;ACKD,MAAM,qBAAqB,GAAG,aAAa,CACzC,wBAAwB,EACxB,EAAE,CAAC,iBAAiB,EAAE,KAAK,qCACtB,KAAK,KACR,OAAO,EAAE,IAAI,EACb,KAAK,EAAE,SAAS,EAChB,gBAAgB,EAAE,SAAS,IAC3B,CAAC,EACH,EAAE,CAAC,wBAAwB,EAAE,CAAC,KAAK,EAAE,MAAM,sCACtC,KAAK,KACR,IAAI,EAAE,MAAM,CAAC,aAAa,EAC1B,OAAO,EAAE,KAAK,EACd,gBAAgB,EAAE,MAAM,CAAC,gBAAgB,IACzC,CAAC,EACH,EAAE,CAAC,uBAAuB,EAAE,CAAC,KAAK,EAAE,MAAM,sCACrC,KAAK,KACR,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,OAAO,EAAE,KAAK,IACd,CAAC,EACH,EAAE,CAAC,uBAAuB,EAAE,CAAC,KAAK,EAAE,MAAM;IACxC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IACxC,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IACvB,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,eAAe,EAAE,KAAK,eAAe,KAAK,MAAM,CAAC,eAAe,CAAC,CAAC;IACxG,MAAM,QAAQ,GAAG,WAAW,KAAK,CAAC,CAAC,CAAC;IAEpC,uCACK,KAAK,KACR,IAAI,EAAE,QAAQ,GAAG,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,GAAG,kBAAkB,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,IAClF;AACJ,CAAC,CAAC,EACF,EAAE,CAAC,uBAAuB,EAAE,CAAC,KAAK,EAAE,MAAM;IACxC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;IACxC,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;IACvB,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,eAAe,EAAE,KAAK,eAAe,KAAK,MAAM,CAAC,eAAe,CAAC,CAAC;IACxG,MAAM,QAAQ,GAAG,WAAW,KAAK,CAAC,CAAC,CAAC;IAEpC,uCACK,KAAK,KACR,IAAI,EAAE,QAAQ;cACV,CAAC,GAAG,IAAI,kCAAO,MAAM,KAAE,MAAM,EAAE,KAAK,IAAG;cACvC,kBAAkB,CAAC,IAAI,oBAAO,IAAI,CAAC,WAAW,CAAC,GAAI,WAAW,CAAC,IACnE;AACJ,CAAC,CAAC,CACH,CAAC;SAEc,oBAAoB,CAAC,KAAqC,EAAE,MAAc;IACxF,OAAO,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,kBAAkB,GAAG,CAAC,IAAwB,EAAE,YAA8B,EAAE,KAAa,KAAK;IACtG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;IACvB,YAAY;IACZ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;CACzB;;AC/DM,MAAM,0BAA0B,GAAwB;IAC7D,IAAI,EAAE,EAAE;IACR,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,KAAK;CACb;;ACFM,MAAM,YAAY,GAAiB;IACxC,cAAc,EAAE,0BAA0B;IAC1C,aAAa,EAAE,wBAAwB;CACxC;;ACFM,MAAM,sBAAsB,GAAG,aAAa,CACjD,YAAY,CAAC,cAAc,EAC3B,EAAE,CAAC,kBAAkB,EAAE,KAAK,qCACvB,KAAK,KACR,OAAO,EAAE,IAAI,EACb,KAAK,EAAE,KAAK,IACZ,CAAC,EACH,EAAE,CAAC,yBAAyB,EAAE,CAAC,KAAK,EAAE,MAAM,sCACvC,KAAK,KACR,IAAI,EAAE,MAAM,CAAC,cAAc,EAC3B,OAAO,EAAE,KAAK,IACd,CAAC,EACH,EAAE,CAAC,wBAAwB,EAAE,CAAC,KAAK,EAAE,MAAM,sCACtC,KAAK,KACR,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,OAAO,EAAE,KAAK,IACd,CAAC,CACJ,CAAC;SAEc,qBAAqB,CAAC,KAAsC,EAAE,MAAc;IAC1F,OAAO,sBAAsB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC/C;;MCLa,kBAAkB;;gHAAlB,kBAAkB;iHAAlB,kBAAkB,YAP3B,YAAY;QACZ,mBAAmB;iHAMV,kBAAkB,aATlB,CAAC,qBAAqB,EAAE,4BAA4B,CAAC,YACvD;YACP,YAAY;YACZ,mBAAmB;YACnB,WAAW,CAAC,UAAU,CAAC,eAAe,EAAE,oBAAoB,CAAC;YAC7D,WAAW,CAAC,UAAU,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;YAC/D,aAAa,CAAC,UAAU,CAAC,CAAC,qBAAqB,EAAE,4BAA4B,CAAC,CAAC;SAChF;4FAEU,kBAAkB;kBAV9B,QAAQ;mBAAC;oBACR,SAAS,EAAE,CAAC,qBAAqB,EAAE,4BAA4B,CAAC;oBAChE,OAAO,EAAE;wBACP,YAAY;wBACZ,mBAAmB;wBACnB,WAAW,CAAC,UAAU,CAAC,eAAe,EAAE,oBAAoB,CAAC;wBAC7D,WAAW,CAAC,UAAU,CAAC,gBAAgB,EAAE,qBAAqB,CAAC;wBAC/D,aAAa,CAAC,UAAU,CAAC,CAAC,qBAAqB,EAAE,4BAA4B,CAAC,CAAC;qBAChF;iBACF;;;ACjBM,MAAM,yBAAyB,GAAG,qBAAqB,CAAoC,gBAAgB,CAAC,CAAC;AAE7G,MAAM,cAAc,GAAG,cAAc,CAAC,yBAAyB,EAAE,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;AAEtF,MAAM,qBAAqB,GAAG,cAAc,CAAC,yBAAyB,EAAE,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAEhG,MAAM,mBAAmB,GAAG,cAAc,CAAC,yBAAyB,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC;;ACJ3F,MAAM,8BAA8B,GAAG,cAAc,CAC1D,cAAc,EACd,aAAa,EACb,CAAC,KAAK,EAAE,OAAO,KAA+B,oCAAoC,CAAC,KAAK,EAAE,OAAO,CAAC,CACnG;;MCSY,iBAAiB;IAC5B,YAA6B,KAA0B;QAA1B,UAAK,GAAL,KAAK,CAAqB;;;;QAI9C,oBAAe,GAA4C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;;;;QAK7F,2BAAsB,GAAwB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;;;;QAKvF,yBAAoB,GAAwB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;;;;QAKnF,mBAAc,GAAmC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;;;;QAKlF,0BAAqB,GAAwB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;;;;QAKrF,wBAAmB,GAAkC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;;;;QAK3F,oCAA+B,GACtC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;KAnCO;;;;;;IA0C3D,0BAA0B,CAAC,OAAkC;QAC3D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;KAClD;;;;;;IAOD,yBAAyB,CAAC,OAAiC;QACzD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;KACjD;;;;;;IAOD,wBAAwB,CAAC,OAAgC;QACvD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;KAChD;;+GA/DU,iBAAiB;mHAAjB,iBAAiB;4FAAjB,iBAAiB;kBAD7B,UAAU;;;ACjBX;;;;;;"}