import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { loadSpecifications, loadSpecificationsFailed, loadSpecificationsSuccess } from './actions';
import { createEffect, ofType } from '@ngrx/effects';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@backbase/actions-common-ang";
export class ActionsSpecificationsEffects {
    constructor(actions$, dataService) {
        this.actions$ = actions$;
        this.dataService = dataService;
        this.specifications$ = createEffect(() => this.actions$.pipe(ofType(loadSpecifications), switchMap(({ specificationIds }) => this.dataService.getSpecifications().pipe(map(data => (specificationIds ? data.filter(({ id }) => !!id && specificationIds.has(id)) : data)), map(data => loadSpecificationsSuccess({ specifications: data || [] })), catchError(() => of(loadSpecificationsFailed({ error: true })))))));
    }
}
ActionsSpecificationsEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsSpecificationsEffects, deps: [{ token: i1.Actions }, { token: i2.NotificationsPreferencesBaseDataService }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsSpecificationsEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsSpecificationsEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsSpecificationsEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.NotificationsPreferencesBaseDataService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWN0aW9ucy1zdG9yZS1hbmcvc3JjL3NwZWNpZmljYXRpb25zL2VmZmVjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx3QkFBd0IsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwRyxPQUFPLEVBQVcsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUk5RCxNQUFNLE9BQU8sNEJBQTRCO0lBQ3ZDLFlBQ21CLFFBQWlCLEVBQ2pCLFdBQW9EO1FBRHBELGFBQVEsR0FBUixRQUFRLENBQVM7UUFDakIsZ0JBQVcsR0FBWCxXQUFXLENBQXlDO1FBR3ZFLG9CQUFlLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQzFCLFNBQVMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLENBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQ3ZDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUNsRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLGNBQWMsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUN0RSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNoRSxDQUNGLENBQ0YsQ0FDRixDQUFDO0lBYkMsQ0FBQzs7MEhBSk8sNEJBQTRCOzhIQUE1Qiw0QkFBNEI7NEZBQTVCLDRCQUE0QjtrQkFEeEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGxvYWRTcGVjaWZpY2F0aW9ucywgbG9hZFNwZWNpZmljYXRpb25zRmFpbGVkLCBsb2FkU3BlY2lmaWNhdGlvbnNTdWNjZXNzIH0gZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB7IEFjdGlvbnMsIGNyZWF0ZUVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zUHJlZmVyZW5jZXNCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvYWN0aW9ucy1jb21tb24tYW5nJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjdGlvbnNTcGVjaWZpY2F0aW9uc0VmZmVjdHMge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFjdGlvbnMkOiBBY3Rpb25zLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YVNlcnZpY2U6IE5vdGlmaWNhdGlvbnNQcmVmZXJlbmNlc0Jhc2VEYXRhU2VydmljZSxcbiAgKSB7fVxuXG4gIHNwZWNpZmljYXRpb25zJCA9IGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgIG9mVHlwZShsb2FkU3BlY2lmaWNhdGlvbnMpLFxuICAgICAgc3dpdGNoTWFwKCh7IHNwZWNpZmljYXRpb25JZHMgfSkgPT5cbiAgICAgICAgdGhpcy5kYXRhU2VydmljZS5nZXRTcGVjaWZpY2F0aW9ucygpLnBpcGUoXG4gICAgICAgICAgbWFwKGRhdGEgPT4gKHNwZWNpZmljYXRpb25JZHMgPyBkYXRhLmZpbHRlcigoeyBpZCB9KSA9PiAhIWlkICYmIHNwZWNpZmljYXRpb25JZHMuaGFzKGlkKSkgOiBkYXRhKSksXG4gICAgICAgICAgbWFwKGRhdGEgPT4gbG9hZFNwZWNpZmljYXRpb25zU3VjY2Vzcyh7IHNwZWNpZmljYXRpb25zOiBkYXRhIHx8IFtdIH0pKSxcbiAgICAgICAgICBjYXRjaEVycm9yKCgpID0+IG9mKGxvYWRTcGVjaWZpY2F0aW9uc0ZhaWxlZCh7IGVycm9yOiB0cnVlIH0pKSksXG4gICAgICAgICksXG4gICAgICApLFxuICAgICksXG4gICk7XG59XG4iXX0=