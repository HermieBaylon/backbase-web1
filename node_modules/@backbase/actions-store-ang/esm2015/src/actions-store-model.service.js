import { Injectable } from '@angular/core';
import { loadActionRecipes, saveActionRecipe } from './action-recipes/actions';
import { loadSpecifications } from './specifications/actions';
import { specificationsError, specificationsLoading, specifications } from './specifications/selectors';
import { actionRecipes, actionRecipesError, actionRecipesLoading } from './action-recipes/selectors';
import { specificationsWithActionRecipe } from './selectors';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
export class ActionsStoreModel {
    constructor(store) {
        this.store = store;
        /**
         * Stream of specifications.
         */
        this.specifications$ = this.store.select(specifications);
        /**
         * Stream of specifications loading flags.
         */
        this.specificationsLoading$ = this.store.select(specificationsLoading);
        /**
         * Stream of specifications errors.
         */
        this.specificationsError$ = this.store.select(specificationsError);
        /**
         * Stream of action recipes.
         */
        this.actionRecipes$ = this.store.select(actionRecipes);
        /**
         * Stream of action recipes loading flags.
         */
        this.actionRecipesLoading$ = this.store.select(actionRecipesLoading);
        /**
         * Stream of action recipes errors.
         */
        this.actionRecipesError$ = this.store.select(actionRecipesError);
        /**
         * Stream of specifications with action recipe.
         */
        this.specificationsWithActionRecipe$ = this.store.select(specificationsWithActionRecipe);
    }
    /**
     * Method to dispatch load specifications.
     *
     * @param payload - load specifications payload
     */
    dispatchLoadSpecifications(payload) {
        this.store.dispatch(loadSpecifications(payload));
    }
    /**
     * Method to dispatch load action recipes.
     *
     * @param payload - load specifications payload
     */
    dispatchLoadActionRecipes(payload) {
        this.store.dispatch(loadActionRecipes(payload));
    }
    /**
     * Method to dispatch save action recipe.
     *
     * @param payload - action recipe payload
     */
    dispatchSaveActionRecipe(payload) {
        this.store.dispatch(saveActionRecipe(payload));
    }
}
ActionsStoreModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsStoreModel, deps: [{ token: i1.Store }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsStoreModel.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsStoreModel });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsStoreModel, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy1zdG9yZS1tb2RlbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9hY3Rpb25zLXN0b3JlLWFuZy9zcmMvYWN0aW9ucy1zdG9yZS1tb2RlbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hHLE9BQU8sRUFBRSxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNyRyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxhQUFhLENBQUM7OztBQVc3RCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQTZCLEtBQTBCO1FBQTFCLFVBQUssR0FBTCxLQUFLLENBQXFCO1FBQ3ZEOztXQUVHO1FBQ00sb0JBQWUsR0FBNEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFdEc7O1dBRUc7UUFDTSwyQkFBc0IsR0FBd0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUVoRzs7V0FFRztRQUNNLHlCQUFvQixHQUF3QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTVGOztXQUVHO1FBQ00sbUJBQWMsR0FBbUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFM0Y7O1dBRUc7UUFDTSwwQkFBcUIsR0FBd0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUU5Rjs7V0FFRztRQUNNLHdCQUFtQixHQUFrQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRXBHOztXQUVHO1FBQ00sb0NBQStCLEdBQ3RDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFuQ00sQ0FBQztJQXFDM0Q7Ozs7T0FJRztJQUNILDBCQUEwQixDQUFDLE9BQWtDO1FBQzNELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCx5QkFBeUIsQ0FBQyxPQUFpQztRQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsd0JBQXdCLENBQUMsT0FBZ0M7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDOzsrR0EvRFUsaUJBQWlCO21IQUFqQixpQkFBaUI7NEZBQWpCLGlCQUFpQjtrQkFEN0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvblJlY2lwZUl0ZW0sIFNwZWNpZmljYXRpb25zV2l0aEFjdGlvbiB9IGZyb20gJ0BiYWNrYmFzZS9hY3Rpb25zLWNvbW1vbi1hbmcnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBsb2FkQWN0aW9uUmVjaXBlcywgc2F2ZUFjdGlvblJlY2lwZSB9IGZyb20gJy4vYWN0aW9uLXJlY2lwZXMvYWN0aW9ucyc7XG5pbXBvcnQgeyBsb2FkU3BlY2lmaWNhdGlvbnMgfSBmcm9tICcuL3NwZWNpZmljYXRpb25zL2FjdGlvbnMnO1xuaW1wb3J0IHsgc3BlY2lmaWNhdGlvbnNFcnJvciwgc3BlY2lmaWNhdGlvbnNMb2FkaW5nLCBzcGVjaWZpY2F0aW9ucyB9IGZyb20gJy4vc3BlY2lmaWNhdGlvbnMvc2VsZWN0b3JzJztcbmltcG9ydCB7IGFjdGlvblJlY2lwZXMsIGFjdGlvblJlY2lwZXNFcnJvciwgYWN0aW9uUmVjaXBlc0xvYWRpbmcgfSBmcm9tICcuL2FjdGlvbi1yZWNpcGVzL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBzcGVjaWZpY2F0aW9uc1dpdGhBY3Rpb25SZWNpcGUgfSBmcm9tICcuL3NlbGVjdG9ycyc7XG5pbXBvcnQge1xuICBMb2FkQWN0aW9uUmVjaXBlc1BheWxvYWQsXG4gIExvYWRTcGVjaWZpY2F0aW9uc1BheWxvYWQsXG4gIFNhdmVBY3Rpb25SZWNpcGVQYXlsb2FkLFxufSBmcm9tICcuL21vZGVsL2FjdGlvbi1yZWNpcGVzLWFjdGlvbnMubW9kZWwnO1xuaW1wb3J0IHsgQWN0aW9uc1N0YXRlIH0gZnJvbSAnLi9tb2RlbC9hY3Rpb25zLXN0b3JlLXN0YXRlLm1vZGVsJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFjdGlvblJlY2lwZVNwZWNpZmljYXRpb24gfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYWN0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY3Rpb25zU3RvcmVNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc3RvcmU6IFN0b3JlPEFjdGlvbnNTdGF0ZT4pIHt9XG4gIC8qKlxuICAgKiBTdHJlYW0gb2Ygc3BlY2lmaWNhdGlvbnMuXG4gICAqL1xuICByZWFkb25seSBzcGVjaWZpY2F0aW9ucyQ6IE9ic2VydmFibGU8QWN0aW9uUmVjaXBlU3BlY2lmaWNhdGlvbltdPiA9IHRoaXMuc3RvcmUuc2VsZWN0KHNwZWNpZmljYXRpb25zKTtcblxuICAvKipcbiAgICogU3RyZWFtIG9mIHNwZWNpZmljYXRpb25zIGxvYWRpbmcgZmxhZ3MuXG4gICAqL1xuICByZWFkb25seSBzcGVjaWZpY2F0aW9uc0xvYWRpbmckOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5zdG9yZS5zZWxlY3Qoc3BlY2lmaWNhdGlvbnNMb2FkaW5nKTtcblxuICAvKipcbiAgICogU3RyZWFtIG9mIHNwZWNpZmljYXRpb25zIGVycm9ycy5cbiAgICovXG4gIHJlYWRvbmx5IHNwZWNpZmljYXRpb25zRXJyb3IkOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5zdG9yZS5zZWxlY3Qoc3BlY2lmaWNhdGlvbnNFcnJvcik7XG5cbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBhY3Rpb24gcmVjaXBlcy5cbiAgICovXG4gIHJlYWRvbmx5IGFjdGlvblJlY2lwZXMkOiBPYnNlcnZhYmxlPEFjdGlvblJlY2lwZUl0ZW1bXT4gPSB0aGlzLnN0b3JlLnNlbGVjdChhY3Rpb25SZWNpcGVzKTtcblxuICAvKipcbiAgICogU3RyZWFtIG9mIGFjdGlvbiByZWNpcGVzIGxvYWRpbmcgZmxhZ3MuXG4gICAqL1xuICByZWFkb25seSBhY3Rpb25SZWNpcGVzTG9hZGluZyQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSB0aGlzLnN0b3JlLnNlbGVjdChhY3Rpb25SZWNpcGVzTG9hZGluZyk7XG5cbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBhY3Rpb24gcmVjaXBlcyBlcnJvcnMuXG4gICAqL1xuICByZWFkb25seSBhY3Rpb25SZWNpcGVzRXJyb3IkOiBPYnNlcnZhYmxlPEVycm9yIHwgdW5kZWZpbmVkPiA9IHRoaXMuc3RvcmUuc2VsZWN0KGFjdGlvblJlY2lwZXNFcnJvcik7XG5cbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBzcGVjaWZpY2F0aW9ucyB3aXRoIGFjdGlvbiByZWNpcGUuXG4gICAqL1xuICByZWFkb25seSBzcGVjaWZpY2F0aW9uc1dpdGhBY3Rpb25SZWNpcGUkOiBPYnNlcnZhYmxlPFNwZWNpZmljYXRpb25zV2l0aEFjdGlvbj4gPVxuICAgIHRoaXMuc3RvcmUuc2VsZWN0KHNwZWNpZmljYXRpb25zV2l0aEFjdGlvblJlY2lwZSk7XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB0byBkaXNwYXRjaCBsb2FkIHNwZWNpZmljYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gcGF5bG9hZCAtIGxvYWQgc3BlY2lmaWNhdGlvbnMgcGF5bG9hZFxuICAgKi9cbiAgZGlzcGF0Y2hMb2FkU3BlY2lmaWNhdGlvbnMocGF5bG9hZDogTG9hZFNwZWNpZmljYXRpb25zUGF5bG9hZCkge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2gobG9hZFNwZWNpZmljYXRpb25zKHBheWxvYWQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdG8gZGlzcGF0Y2ggbG9hZCBhY3Rpb24gcmVjaXBlcy5cbiAgICpcbiAgICogQHBhcmFtIHBheWxvYWQgLSBsb2FkIHNwZWNpZmljYXRpb25zIHBheWxvYWRcbiAgICovXG4gIGRpc3BhdGNoTG9hZEFjdGlvblJlY2lwZXMocGF5bG9hZDogTG9hZEFjdGlvblJlY2lwZXNQYXlsb2FkKSB7XG4gICAgdGhpcy5zdG9yZS5kaXNwYXRjaChsb2FkQWN0aW9uUmVjaXBlcyhwYXlsb2FkKSk7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHRvIGRpc3BhdGNoIHNhdmUgYWN0aW9uIHJlY2lwZS5cbiAgICpcbiAgICogQHBhcmFtIHBheWxvYWQgLSBhY3Rpb24gcmVjaXBlIHBheWxvYWRcbiAgICovXG4gIGRpc3BhdGNoU2F2ZUFjdGlvblJlY2lwZShwYXlsb2FkOiBTYXZlQWN0aW9uUmVjaXBlUGF5bG9hZCkge1xuICAgIHRoaXMuc3RvcmUuZGlzcGF0Y2goc2F2ZUFjdGlvblJlY2lwZShwYXlsb2FkKSk7XG4gIH1cbn1cbiJdfQ==