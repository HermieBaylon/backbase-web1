import { Injectable } from '@angular/core';
import { merge, of, throwError } from 'rxjs';
import { catchError, first, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';
import { EMPTY_RESPONSE_ERROR, parseActionRecipeFormItem, getMappedRecurrenceResponse, } from '@backbase/actions-common-ang';
import { loadActionRecipes, loadActionRecipesFailed, loadActionRecipesSuccess, saveActionRecipe, saveActionRecipeFailure, saveActionRecipeSuccess, } from './actions';
import { actionRecipesSpecificationIds } from './selectors';
import { createEffect, ofType } from '@ngrx/effects';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@ngrx/store";
import * as i3 from "@backbase/actions-common-ang";
import * as i4 from "@backbase/ui-ang/notification";
export class ActionsRecipesEffects {
    constructor(actions$, store, dataService, notificationService) {
        this.actions$ = actions$;
        this.store = store;
        this.dataService = dataService;
        this.notificationService = notificationService;
        this.actionRecipes$ = createEffect(() => this.actions$.pipe(ofType(loadActionRecipes), switchMap(({ specificationIds, arrangementId }) => this.dataService.getActionRecipes(arrangementId).pipe(map(data => (specificationIds ? data.filter(({ specificationId: id }) => specificationIds.has(id)) : data)), map(data => arrangementId ? data.filter(item => !item.arrangementId || item.arrangementId === arrangementId) : data), map(data => loadActionRecipesSuccess({
            actionRecipes: data || [],
            specificationIds,
        })), catchError(error => of(loadActionRecipesFailed({ error })))))));
        this.saveActionRecipe$ = createEffect(() => this.actions$.pipe(ofType(saveActionRecipe), groupBy(({ actionRecipe }) => actionRecipe.specificationId), mergeMap(group => group.pipe(switchMap(({ actionRecipe, arrangementId, warningNotification, successNotification }) => this.dataService.saveActionRecipe(actionRecipe, arrangementId).pipe(switchMap(({ actionRecipes }) => {
            if (!actionRecipes || !actionRecipes.length)
                return throwError(EMPTY_RESPONSE_ERROR);
            return of(saveActionRecipeSuccess(Object.assign({ actionRecipe: Object.assign(Object.assign({}, actionRecipes[0]), (actionRecipes[0].recurrence && {
                    recurrence: getMappedRecurrenceResponse(actionRecipes[0].recurrence, actionRecipe),
                })) }, (successNotification && { notification: successNotification }))));
        }), catchError(err => {
            if (err.status === 409) {
                return this.store.select(actionRecipesSpecificationIds).pipe(first(), map(specificationIds => loadActionRecipes({
                    arrangementId,
                    specificationIds,
                })));
            }
            return of(saveActionRecipeFailure(Object.assign({ actionRecipe: parseActionRecipeFormItem(actionRecipe) }, (warningNotification && { notification: warningNotification }))));
        })))))));
        this.showNotification$ = createEffect(() => merge(this.actions$.pipe(ofType(saveActionRecipeSuccess)), this.actions$.pipe(ofType(saveActionRecipeFailure))).pipe(map(({ notification }) => {
            if (notification) {
                this.notificationService.showNotification(notification);
            }
        })), { dispatch: false });
    }
}
ActionsRecipesEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsRecipesEffects, deps: [{ token: i1.Actions }, { token: i2.Store }, { token: i3.NotificationsPreferencesBaseDataService }, { token: i4.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ActionsRecipesEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsRecipesEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: ActionsRecipesEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.Store }, { type: i3.NotificationsPreferencesBaseDataService }, { type: i4.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,