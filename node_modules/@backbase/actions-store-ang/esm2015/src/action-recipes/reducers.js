import { createReducer, on } from '@ngrx/store';
import { loadActionRecipes, loadActionRecipesFailed, loadActionRecipesSuccess, saveActionRecipeFailure, saveActionRecipeSuccess, } from './actions';
import { actionRecipeInitialState } from './initial-state';
const _actionRecipesReducer = createReducer(actionRecipeInitialState, on(loadActionRecipes, state => (Object.assign(Object.assign({}, state), { loading: true, error: undefined, specificationIds: undefined }))), on(loadActionRecipesSuccess, (state, action) => (Object.assign(Object.assign({}, state), { data: action.actionRecipes, loading: false, specificationIds: action.specificationIds }))), on(loadActionRecipesFailed, (state, action) => (Object.assign(Object.assign({}, state), { error: action.error, loading: false }))), on(saveActionRecipeSuccess, (state, action) => {
    const { actionRecipe: recipe } = action;
    const { data } = state;
    const targetIndex = data.findIndex(({ specificationId }) => specificationId === recipe.specificationId);
    const isAppend = targetIndex === -1;
    return Object.assign(Object.assign({}, state), { data: isAppend ? [...data, recipe] : insertActionRecipe(data, recipe, targetIndex) });
}), on(saveActionRecipeFailure, (state, action) => {
    const { actionRecipe: recipe } = action;
    const { data } = state;
    const targetIndex = data.findIndex(({ specificationId }) => specificationId === recipe.specificationId);
    const isAppend = targetIndex === -1;
    return Object.assign(Object.assign({}, state), { data: isAppend
            ? [...data, Object.assign(Object.assign({}, recipe), { active: false })]
            : insertActionRecipe(data, Object.assign({}, data[targetIndex]), targetIndex) });
}));
export function actionRecipesReducer(state, action) {
    return _actionRecipesReducer(state, action);
}
const insertActionRecipe = (data, actionRecipe, index) => [
    ...data.slice(0, index),
    actionRecipe,
    ...data.slice(index + 1),
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FjdGlvbnMtc3RvcmUtYW5nL3NyYy9hY3Rpb24tcmVjaXBlcy9yZWR1Y2Vycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4RCxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHVCQUF1QixFQUN2Qix3QkFBd0IsRUFDeEIsdUJBQXVCLEVBQ3ZCLHVCQUF1QixHQUN4QixNQUFNLFdBQVcsQ0FBQztBQUVuQixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUczRCxNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FDekMsd0JBQXdCLEVBQ3hCLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLGlDQUMxQixLQUFLLEtBQ1IsT0FBTyxFQUFFLElBQUksRUFDYixLQUFLLEVBQUUsU0FBUyxFQUNoQixnQkFBZ0IsRUFBRSxTQUFTLElBQzNCLENBQUMsRUFDSCxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxpQ0FDM0MsS0FBSyxLQUNSLElBQUksRUFBRSxNQUFNLENBQUMsYUFBYSxFQUMxQixPQUFPLEVBQUUsS0FBSyxFQUNkLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsSUFDekMsQ0FBQyxFQUNILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLGlDQUMxQyxLQUFLLEtBQ1IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQ25CLE9BQU8sRUFBRSxLQUFLLElBQ2QsQ0FBQyxFQUNILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM1QyxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUN4QyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3hHLE1BQU0sUUFBUSxHQUFHLFdBQVcsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUVwQyx1Q0FDSyxLQUFLLEtBQ1IsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsSUFDbEY7QUFDSixDQUFDLENBQUMsRUFDRixFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDNUMsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDeEMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztJQUN2QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxlQUFlLEVBQUUsRUFBRSxFQUFFLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN4RyxNQUFNLFFBQVEsR0FBRyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFFcEMsdUNBQ0ssS0FBSyxLQUNSLElBQUksRUFBRSxRQUFRO1lBQ1osQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLGtDQUFPLE1BQU0sS0FBRSxNQUFNLEVBQUUsS0FBSyxJQUFHO1lBQ3pDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLG9CQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBSSxXQUFXLENBQUMsSUFDbkU7QUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO0FBRUYsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEtBQXFDLEVBQUUsTUFBYztJQUN4RixPQUFPLHFCQUFxQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLElBQXdCLEVBQUUsWUFBOEIsRUFBRSxLQUFhLEVBQUUsRUFBRSxDQUFDO0lBQ3RHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO0lBQ3ZCLFlBQVk7SUFDWixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztDQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uLCBjcmVhdGVSZWR1Y2VyLCBvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7XG4gIGxvYWRBY3Rpb25SZWNpcGVzLFxuICBsb2FkQWN0aW9uUmVjaXBlc0ZhaWxlZCxcbiAgbG9hZEFjdGlvblJlY2lwZXNTdWNjZXNzLFxuICBzYXZlQWN0aW9uUmVjaXBlRmFpbHVyZSxcbiAgc2F2ZUFjdGlvblJlY2lwZVN1Y2Nlc3MsXG59IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBBY3Rpb25SZWNpcGVJdGVtIH0gZnJvbSAnQGJhY2tiYXNlL2FjdGlvbnMtY29tbW9uLWFuZyc7XG5pbXBvcnQgeyBhY3Rpb25SZWNpcGVJbml0aWFsU3RhdGUgfSBmcm9tICcuL2luaXRpYWwtc3RhdGUnO1xuaW1wb3J0IHsgQWN0aW9uUmVjaXBlc1N0YXRlIH0gZnJvbSAnLi4vbW9kZWwvYWN0aW9ucy1zdG9yZS1zdGF0ZS5tb2RlbCc7XG5cbmNvbnN0IF9hY3Rpb25SZWNpcGVzUmVkdWNlciA9IGNyZWF0ZVJlZHVjZXIoXG4gIGFjdGlvblJlY2lwZUluaXRpYWxTdGF0ZSxcbiAgb24obG9hZEFjdGlvblJlY2lwZXMsIHN0YXRlID0+ICh7XG4gICAgLi4uc3RhdGUsXG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgIHNwZWNpZmljYXRpb25JZHM6IHVuZGVmaW5lZCxcbiAgfSkpLFxuICBvbihsb2FkQWN0aW9uUmVjaXBlc1N1Y2Nlc3MsIChzdGF0ZSwgYWN0aW9uKSA9PiAoe1xuICAgIC4uLnN0YXRlLFxuICAgIGRhdGE6IGFjdGlvbi5hY3Rpb25SZWNpcGVzLFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIHNwZWNpZmljYXRpb25JZHM6IGFjdGlvbi5zcGVjaWZpY2F0aW9uSWRzLFxuICB9KSksXG4gIG9uKGxvYWRBY3Rpb25SZWNpcGVzRmFpbGVkLCAoc3RhdGUsIGFjdGlvbikgPT4gKHtcbiAgICAuLi5zdGF0ZSxcbiAgICBlcnJvcjogYWN0aW9uLmVycm9yLFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICB9KSksXG4gIG9uKHNhdmVBY3Rpb25SZWNpcGVTdWNjZXNzLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IHsgYWN0aW9uUmVjaXBlOiByZWNpcGUgfSA9IGFjdGlvbjtcbiAgICBjb25zdCB7IGRhdGEgfSA9IHN0YXRlO1xuICAgIGNvbnN0IHRhcmdldEluZGV4ID0gZGF0YS5maW5kSW5kZXgoKHsgc3BlY2lmaWNhdGlvbklkIH0pID0+IHNwZWNpZmljYXRpb25JZCA9PT0gcmVjaXBlLnNwZWNpZmljYXRpb25JZCk7XG4gICAgY29uc3QgaXNBcHBlbmQgPSB0YXJnZXRJbmRleCA9PT0gLTE7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICBkYXRhOiBpc0FwcGVuZCA/IFsuLi5kYXRhLCByZWNpcGVdIDogaW5zZXJ0QWN0aW9uUmVjaXBlKGRhdGEsIHJlY2lwZSwgdGFyZ2V0SW5kZXgpLFxuICAgIH07XG4gIH0pLFxuICBvbihzYXZlQWN0aW9uUmVjaXBlRmFpbHVyZSwgKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICBjb25zdCB7IGFjdGlvblJlY2lwZTogcmVjaXBlIH0gPSBhY3Rpb247XG4gICAgY29uc3QgeyBkYXRhIH0gPSBzdGF0ZTtcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IGRhdGEuZmluZEluZGV4KCh7IHNwZWNpZmljYXRpb25JZCB9KSA9PiBzcGVjaWZpY2F0aW9uSWQgPT09IHJlY2lwZS5zcGVjaWZpY2F0aW9uSWQpO1xuICAgIGNvbnN0IGlzQXBwZW5kID0gdGFyZ2V0SW5kZXggPT09IC0xO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgZGF0YTogaXNBcHBlbmRcbiAgICAgICAgPyBbLi4uZGF0YSwgeyAuLi5yZWNpcGUsIGFjdGl2ZTogZmFsc2UgfV1cbiAgICAgICAgOiBpbnNlcnRBY3Rpb25SZWNpcGUoZGF0YSwgeyAuLi5kYXRhW3RhcmdldEluZGV4XSB9LCB0YXJnZXRJbmRleCksXG4gICAgfTtcbiAgfSksXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gYWN0aW9uUmVjaXBlc1JlZHVjZXIoc3RhdGU6IEFjdGlvblJlY2lwZXNTdGF0ZSB8IHVuZGVmaW5lZCwgYWN0aW9uOiBBY3Rpb24pOiBBY3Rpb25SZWNpcGVzU3RhdGUge1xuICByZXR1cm4gX2FjdGlvblJlY2lwZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xufVxuXG5jb25zdCBpbnNlcnRBY3Rpb25SZWNpcGUgPSAoZGF0YTogQWN0aW9uUmVjaXBlSXRlbVtdLCBhY3Rpb25SZWNpcGU6IEFjdGlvblJlY2lwZUl0ZW0sIGluZGV4OiBudW1iZXIpID0+IFtcbiAgLi4uZGF0YS5zbGljZSgwLCBpbmRleCksXG4gIGFjdGlvblJlY2lwZSxcbiAgLi4uZGF0YS5zbGljZShpbmRleCArIDEpLFxuXTtcbiJdfQ==