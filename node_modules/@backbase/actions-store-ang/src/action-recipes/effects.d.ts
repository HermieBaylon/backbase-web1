import { NotificationService } from '@backbase/ui-ang/notification';
import { Store } from '@ngrx/store';
import { NotificationsPreferencesBaseDataService } from '@backbase/actions-common-ang';
import { Actions } from '@ngrx/effects';
import { ActionsState } from '../model/actions-store-state.model';
import * as i0 from "@angular/core";
export declare class ActionsRecipesEffects {
    private readonly actions$;
    private readonly store;
    private readonly dataService;
    private readonly notificationService;
    constructor(actions$: Actions, store: Store<ActionsState>, dataService: NotificationsPreferencesBaseDataService, notificationService: NotificationService);
    actionRecipes$: import("rxjs").Observable<({
        actionRecipes: import("@backbase/actions-http-ang").ActionRecipeGetResponseBody[];
        specificationIds?: Set<string> | undefined;
    } & import("@ngrx/store/src/models").TypedAction<"[ACT Action Recipes] Load Action Recipes Success">) | ({
        error?: Error | undefined;
    } & import("@ngrx/store/src/models").TypedAction<"[ACT Action Recipes] Load Action Recipes Failed">)> & import("@ngrx/effects").CreateEffectMetadata;
    saveActionRecipe$: import("rxjs").Observable<(import("../model/action-recipes-actions.model").LoadActionRecipesPayload & import("@ngrx/store/src/models").TypedAction<"[ACT Action Recipes] Load Action Recipes">) | ({
        actionRecipe: import("@backbase/actions-http-ang").ActionRecipeGetResponseBody;
        notification?: import("@backbase/actions-common-ang").Notification | undefined;
    } & import("@ngrx/store/src/models").TypedAction<"[ACT Action Recipes] Save Action Recipe Success">) | ({
        actionRecipe: import("@backbase/actions-common-ang").ActionRecipeItem;
        notification?: import("@backbase/actions-common-ang").Notification | undefined;
    } & import("@ngrx/store/src/models").TypedAction<"[ACT Action Recipes] Save Action Recipe Failure">)> & import("@ngrx/effects").CreateEffectMetadata;
    showNotification$: import("rxjs").Observable<void> & import("@ngrx/effects").CreateEffectMetadata;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActionsRecipesEffects, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ActionsRecipesEffects>;
}
