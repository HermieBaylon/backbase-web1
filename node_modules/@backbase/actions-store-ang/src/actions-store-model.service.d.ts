import { ActionRecipeItem, SpecificationsWithAction } from '@backbase/actions-common-ang';
import { Store } from '@ngrx/store';
import { LoadActionRecipesPayload, LoadSpecificationsPayload, SaveActionRecipePayload } from './model/action-recipes-actions.model';
import { ActionsState } from './model/actions-store-state.model';
import { Observable } from 'rxjs';
import { ActionRecipeSpecification } from '@backbase/data-ang/actions';
import * as i0 from "@angular/core";
export declare class ActionsStoreModel {
    private readonly store;
    constructor(store: Store<ActionsState>);
    /**
     * Stream of specifications.
     */
    readonly specifications$: Observable<ActionRecipeSpecification[]>;
    /**
     * Stream of specifications loading flags.
     */
    readonly specificationsLoading$: Observable<boolean>;
    /**
     * Stream of specifications errors.
     */
    readonly specificationsError$: Observable<boolean>;
    /**
     * Stream of action recipes.
     */
    readonly actionRecipes$: Observable<ActionRecipeItem[]>;
    /**
     * Stream of action recipes loading flags.
     */
    readonly actionRecipesLoading$: Observable<boolean>;
    /**
     * Stream of action recipes errors.
     */
    readonly actionRecipesError$: Observable<Error | undefined>;
    /**
     * Stream of specifications with action recipe.
     */
    readonly specificationsWithActionRecipe$: Observable<SpecificationsWithAction>;
    /**
     * Method to dispatch load specifications.
     *
     * @param payload - load specifications payload
     */
    dispatchLoadSpecifications(payload: LoadSpecificationsPayload): void;
    /**
     * Method to dispatch load action recipes.
     *
     * @param payload - load specifications payload
     */
    dispatchLoadActionRecipes(payload: LoadActionRecipesPayload): void;
    /**
     * Method to dispatch save action recipe.
     *
     * @param payload - action recipe payload
     */
    dispatchSaveActionRecipe(payload: SaveActionRecipePayload): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActionsStoreModel, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ActionsStoreModel>;
}
