import { HttpParameterCodec, HttpParams } from '@angular/common/http';
import { InjectionToken } from '@angular/core';
import { AvailableFeature, FeaturesService } from '@backbase/foundation-ang/future';
/**
 * Object used to hold Http Parameters
 */
export interface HttpParametersObject {
    /**
     * Each key is the name of the http param. Each value is the http param value.
     */
    [k: string]: string | Array<string> | undefined | number;
}
export interface NormalizedHttpParameters {
    [k: string]: string | Array<string>;
}
/**
 * Normalize a map of `HttpParametersObject` and return a valid `HttpParam`.
 *
 * This does 3 things:
 *  - Filter out `undefined` values.
 *  - Convert all `number` values into `strings`.
 *  - Encode values using a custom encoder (fixes this [known bug](https://github.com/angular/angular/issues/18261)).
 */
export declare type HttpParamsFactory = (params: HttpParametersObject) => HttpParams;
export declare const normalizeHttpParameter: (accum: NormalizedHttpParameters, [key, value]: [string, string | Array<string> | undefined | number]) => NormalizedHttpParameters;
export declare const EXTRA_ENCODE_URI_PARAMS: AvailableFeature;
/**
 * Filter undefined params, and convert numbers to strings.
 */
export declare const normalizeHttpParameters: (params: HttpParametersObject) => NormalizedHttpParameters;
export declare class CustomEncoder implements HttpParameterCodec {
    encodeKey(key: string): string;
    encodeValue(value: string): string;
    decodeKey(key: string): string;
    decodeValue(value: string): string;
}
/**
 * Injection token for the `HttpParamsFactory` utility function.
 *
 * @usageNotes
 *
 * ### Example
 *
 * ```
 * export class MyDataService {
 *   constructor(private readonly http: HttpClient,
 *   @Inject(HTTP_PARAMS_FACTORY)
 *   private readonly toHttpParams: HttpParamsFactory,
 *   ){}
 *
 *   makeRequest(params: HttpParameters): Observable<HttpResponse<any>> {
 *     return this.http.request('get', '/api', {
 *       params: this.toHttpParams(params),
 *     });
 *   }
 * }
 * ```
 */
export declare const HTTP_PARAMS_FACTORY: InjectionToken<HttpParamsFactory>;
export declare const httpParamsFactoryFactory: (featuresService: FeaturesService) => (fromObject: HttpParametersObject) => HttpParams;
