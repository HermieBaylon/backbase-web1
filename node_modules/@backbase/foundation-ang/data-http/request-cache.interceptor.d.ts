import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Provider } from '@angular/core';
import { Observable } from 'rxjs';
import { RequestCacheService } from './request-cache.service';
import * as ɵngcc0 from '@angular/core';
export declare class RequestCacheInterceptor implements HttpInterceptor {
    private readonly cache;
    constructor(cache: RequestCacheService);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    private isCachable;
    private cachedResponse;
    private refreshResponse;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<RequestCacheInterceptor, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<RequestCacheInterceptor>;
}
export declare const requestCacheInterceptorProvider: Provider;

//# sourceMappingURL=request-cache.interceptor.d.ts.map