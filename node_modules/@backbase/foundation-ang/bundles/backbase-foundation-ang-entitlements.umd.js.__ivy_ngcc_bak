(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common/http'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/foundation-ang/entitlements', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common/http', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["foundation-ang"] = global.backbase["foundation-ang"] || {}, global.backbase["foundation-ang"].entitlements = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common.http, global.ng.router));
})(this, (function (exports, i0, rxjs, operators, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ENTITLEMENTS_CONFIG = new i0.InjectionToken('web-sdk-entitlements-config');
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var CONDITIONS = new i0.InjectionToken('web-sdk-conditions');

    var LogicalOperator;
    (function (LogicalOperator) {
        LogicalOperator["AND"] = "AND";
        LogicalOperator["OR"] = "OR";
        LogicalOperator["NOT"] = "NOT";
    })(LogicalOperator || (LogicalOperator = {}));
    var SUMMARY_PERMISSIONS_PATH = '/accessgroups/users/permissions/summary';
    var DATA_ITEMS_PERMISSIONS_PATH = '/accessgroups/users/data-item-permissions';
    var ConditionsService = /** @class */ (function () {
        function ConditionsService(http, config) {
            var _this = this;
            var _a, _b, _c;
            this.http = http;
            this.config = config;
            this.createConditions = function (stringDef) {
                var splitBySpaces = stringDef
                    .trim()
                    .split(' ')
                    .filter(function (spaced) { return spaced !== ''; });
                return _this.separateLogicalOperators(['AND'].concat(splitBySpaces));
            };
            var basePath = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.accessControlBasePath) || '/access-control';
            var path = ((_b = this.config) === null || _b === void 0 ? void 0 : _b.accessControlPath) || "/client-api/v2" + SUMMARY_PERMISSIONS_PATH;
            this.entitlements$ = this.http
                .get("" + basePath + path)
                .pipe(operators.map(function (EntitlementSummaryResponse) {
                if (EntitlementSummaryResponse.length && 'dataItem' in EntitlementSummaryResponse[0]) {
                    return _this.mapDataItemPermissions(EntitlementSummaryResponse);
                }
                else {
                    return _this.mapPermissionsSummary(EntitlementSummaryResponse);
                }
            }), operators.shareReplay(1));
            this.forceResolved = ((_c = this.config) === null || _c === void 0 ? void 0 : _c.forceResolved) || false;
        }
        // map response of getUserPermissionsSummary to flat array of available entitlements
        ConditionsService.prototype.mapPermissionsSummary = function (entitlementsData) {
            var _this = this;
            var entitlements = [];
            entitlementsData.forEach(function (entitlementData) {
                var availablePermissions = Object.entries(entitlementData.permissions).filter(function (_d) {
                    var _e = __read(_d, 2), value = _e[1];
                    return value === true;
                });
                availablePermissions.forEach(function (_d) {
                    var _e = __read(_d, 1), privilege = _e[0];
                    var entitlement = _this.removeWhiteSpace({
                        resource: entitlementData.resource,
                        function: entitlementData.function,
                        privilege: privilege,
                    });
                    entitlements.push(entitlement);
                });
            });
            return entitlements;
        };
        // map response of getDataItemPermissionsContext to flat array of available entitlements
        // this endpoint can optionally be configured when needing data-item specific entitlements
        ConditionsService.prototype.mapDataItemPermissions = function (entitlementsData) {
            var _this = this;
            var entitlements = [];
            entitlementsData.forEach(function (entitlementData) {
                entitlementData.permissions.forEach(function (permission) {
                    permission.privileges.forEach(function (privilege) {
                        var entitlement = _this.removeWhiteSpace({
                            dataItem: entitlementData.dataItem.id,
                            resource: permission.resource,
                            function: permission.businessFunction,
                            privilege: privilege,
                        });
                        entitlements.push(entitlement);
                    });
                });
            });
            return entitlements;
        };
        ConditionsService.prototype.resolveEntitlements = function (identifier) {
            if (this.forceResolved) {
                return Promise.resolve(true);
            }
            var conditions = this.createConditions(identifier);
            return this.resolveConditions(conditions).toPromise();
        };
        ConditionsService.prototype.parseIdentifier = function (identifier) {
            var identifierArray = identifier.split('.').map(function (str) { return str.trim(); });
            if (identifierArray.length < 3 || identifierArray.length > 4) {
                throw Error("'" + identifier + "' is not valid entitlement identifier");
            }
            if (identifierArray.length === 3) {
                return this.removeWhiteSpace({
                    dataItem: undefined,
                    resource: identifierArray[0],
                    function: identifierArray[1],
                    privilege: identifierArray[2],
                });
            }
            return this.removeWhiteSpace({
                dataItem: identifierArray[0],
                resource: identifierArray[1],
                function: identifierArray[2],
                privilege: identifierArray[3],
            });
        };
        ConditionsService.prototype.resolveConditions = function (conditions) {
            var _this = this;
            if (conditions.length === 0) {
                return rxjs.of(true);
            }
            var resolutions = conditions.map(function (condition) { return _this.resolveEntitlement(condition).pipe(operators.map(function (value) { return ({ value: value, logic: condition.logic }); })); });
            return rxjs.forkJoin(resolutions).pipe(operators.map(this.resolveResolutions));
        };
        ConditionsService.prototype.resolveResolutions = function (resolutions) {
            return resolutions.reduce(function (final, resolution) {
                if (resolution.logic === LogicalOperator.AND) {
                    return final && resolution.value;
                }
                else if (resolution.logic === LogicalOperator.NOT) {
                    return final && !resolution.value;
                }
                return final || resolution.value;
            }, true);
        };
        ConditionsService.prototype.separateLogicalOperators = function (splitBySpaces) {
            var conditions = [];
            for (var i = 0; i < splitBySpaces.length; i += 2) {
                var logic = splitBySpaces[i];
                if (logic !== LogicalOperator.AND && logic !== LogicalOperator.OR) {
                    throw Error("'" + logic + "' is not valid logical operator");
                }
                var identifier = splitBySpaces[i + 1];
                if (identifier.charAt(0) === '!') {
                    conditions.push(Object.assign(Object.assign({}, this.parseIdentifier(identifier.substr(1))), { logic: LogicalOperator.NOT }));
                }
                else {
                    conditions.push(Object.assign(Object.assign({}, this.parseIdentifier(identifier)), { logic: logic }));
                }
            }
            return conditions;
        };
        ConditionsService.prototype.removeWhiteSpace = function (item) {
            return Object.assign(Object.assign({}, item), { dataItem: item.dataItem ? item.dataItem.replace(/ /g, '') : undefined, resource: item.resource.replace(/ /g, ''), function: item.function.replace(/ /g, '') });
        };
        ConditionsService.prototype.resolveEntitlement = function (entitlement) {
            return this.entitlements$.pipe(operators.map(function (entitlements) { return entitlements.some(function (availableEntitlement) { return (entitlement.dataItem === undefined || availableEntitlement.dataItem === entitlement.dataItem) &&
                availableEntitlement.resource === entitlement.resource &&
                availableEntitlement.function === entitlement.function &&
                availableEntitlement.privilege === entitlement.privilege; }); }));
        };
        return ConditionsService;
    }());
    ConditionsService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function ConditionsService_Factory() { return new ConditionsService(i0__namespace.ɵɵinject(i1__namespace.HttpClient), i0__namespace.ɵɵinject(ENTITLEMENTS_CONFIG, 8)); }, token: ConditionsService, providedIn: "root" });
    ConditionsService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    ConditionsService.ctorParameters = function () { return [
        { type: i1.HttpClient },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [ENTITLEMENTS_CONFIG,] }] }
    ]; };

    /**
     * @description
     * A structural directive that conditionally includes a template based on the value of
     * an expression coerced to Boolean based on a entitlements triplets validation.
     * When the expression evaluates to true, Angular renders the template
     * Angular renders the template provided in an optional `else` clause. The default
     * template for the `else` clause is blank.
     *
     * @usageNotes
     *
     * ### Example
     * ```
     * <div *bbIfEntitlements="'ProductSummary.ProductSummary.edit'">Content to render when condition is true.</div>
     *
     * <div *bbIfEntitlements="'ProductSummary.ProductSummary.edit'; else alternative">Content to render when condition is true.</div>
     * <ng-template #alternative>
     *   <div>alternative content</div>
     * </ng-template>
     * ```
     */
    var IfEntitlementsDirective = /** @class */ (function () {
        function IfEntitlementsDirective(conditions, templateRef, viewContainerRef, cd) {
            this.conditions = conditions;
            this.templateRef = templateRef;
            this.viewContainerRef = viewContainerRef;
            this.cd = cd;
        }
        Object.defineProperty(IfEntitlementsDirective.prototype, "bbIfEntitlements", {
            /**
             * Entitlement to evaluate
             */
            set: function (value) {
                var _this = this;
                var entitlements = value.trim();
                this.conditions.resolveEntitlements(entitlements).then(function (canAccess) {
                    if (canAccess) {
                        _this.renderMainView();
                    }
                    else {
                        _this.renderAlternativeView();
                    }
                    _this.cd.markForCheck();
                }, function () {
                    console.error("The element cannot be displayed because the identifier is invalid: \"" + value + "\"");
                    _this.viewContainerRef.clear();
                    _this.cd.markForCheck();
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IfEntitlementsDirective.prototype, "bbIfEntitlementsElse", {
            /**
             * Alternative template to show in the else clause
             */
            set: function (value) {
                this.elseTemplateRef = value;
            },
            enumerable: false,
            configurable: true
        });
        IfEntitlementsDirective.prototype.renderMainView = function () {
            this.viewContainerRef.createEmbeddedView(this.templateRef);
        };
        IfEntitlementsDirective.prototype.renderAlternativeView = function () {
            this.viewContainerRef.clear();
            if (this.elseTemplateRef) {
                this.viewContainerRef.createEmbeddedView(this.elseTemplateRef);
            }
        };
        return IfEntitlementsDirective;
    }());
    IfEntitlementsDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[bbIfEntitlements]',
                },] }
    ];
    IfEntitlementsDirective.ctorParameters = function () { return [
        { type: ConditionsService },
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    IfEntitlementsDirective.propDecorators = {
        bbIfEntitlements: [{ type: i0.Input }],
        bbIfEntitlementsElse: [{ type: i0.Input }]
    };

    var EntitlementsModule = /** @class */ (function () {
        function EntitlementsModule() {
        }
        return EntitlementsModule;
    }());
    EntitlementsModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [IfEntitlementsDirective],
                    providers: [{ provide: CONDITIONS, useExisting: ConditionsService }],
                    exports: [IfEntitlementsDirective],
                },] }
    ];

    var EntitlementsGuard = /** @class */ (function () {
        function EntitlementsGuard(conditions, router) {
            var _this = this;
            this.conditions = conditions;
            this.router = router;
            this.userHasEntitlements = function (entitlements) { return __awaiter(_this, void 0, void 0, function () {
                var _c, err_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 3, , 4]);
                            _c = !entitlements;
                            if (_c) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.conditions.resolveEntitlements(entitlements)];
                        case 1:
                            _c = (_d.sent());
                            _d.label = 2;
                        case 2:
                            if (_c) {
                                return [2 /*return*/, true];
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            err_1 = _d.sent();
                            console.error(err_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, false];
                    }
                });
            }); };
        }
        EntitlementsGuard.prototype.resolveEntitlements = function (entitlements, redirectTo, route, state) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, this.userHasEntitlements(entitlements)];
                        case 1:
                            if (_c.sent()) {
                                return [2 /*return*/, true];
                            }
                            if (!(typeof redirectTo === 'function')) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getRedirection(redirectTo, route, state)];
                        case 2:
                            redirectTo = _c.sent();
                            _c.label = 3;
                        case 3:
                            if (redirectTo) {
                                return [2 /*return*/, this.router.parseUrl(redirectTo)];
                            }
                            return [2 /*return*/, false];
                    }
                });
            });
        };
        EntitlementsGuard.prototype.getRedirection = function (getRedirectTo, route, state) {
            if (!route || !state) {
                return undefined;
            }
            var redirectTo = getRedirectTo(this.userHasEntitlements, route, state);
            if (redirectTo instanceof rxjs.Observable) {
                return redirectTo.pipe(operators.first()).toPromise();
            }
            return redirectTo;
        };
        EntitlementsGuard.prototype.canActivateChild = function (childRoute, state) {
            var _c = childRoute.data, entitlements = _c.entitlements, redirectTo = _c.redirectTo;
            return this.resolveEntitlements(entitlements, redirectTo, childRoute, state);
        };
        EntitlementsGuard.prototype.canLoad = function (route, segments) {
            var _a, _b;
            var entitlements = (_a = route.data) === null || _a === void 0 ? void 0 : _a.entitlements;
            var redirectTo = (_b = route.data) === null || _b === void 0 ? void 0 : _b.redirectTo;
            return this.resolveEntitlements(entitlements, redirectTo, route, segments);
        };
        EntitlementsGuard.prototype.canActivate = function (route, state) {
            var _c = route.data, entitlements = _c.entitlements, redirectTo = _c.redirectTo;
            return this.resolveEntitlements(entitlements, redirectTo, route, state);
        };
        return EntitlementsGuard;
    }());
    EntitlementsGuard.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function EntitlementsGuard_Factory() { return new EntitlementsGuard(i0__namespace.ɵɵinject(ConditionsService), i0__namespace.ɵɵinject(i2__namespace.Router)); }, token: EntitlementsGuard, providedIn: "root" });
    EntitlementsGuard.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    EntitlementsGuard.ctorParameters = function () { return [
        { type: ConditionsService },
        { type: i2.Router }
    ]; };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CONDITIONS = CONDITIONS;
    exports.ConditionsService = ConditionsService;
    exports.DATA_ITEMS_PERMISSIONS_PATH = DATA_ITEMS_PERMISSIONS_PATH;
    exports.ENTITLEMENTS_CONFIG = ENTITLEMENTS_CONFIG;
    exports.EntitlementsGuard = EntitlementsGuard;
    exports.EntitlementsModule = EntitlementsModule;
    exports.IfEntitlementsDirective = IfEntitlementsDirective;
    exports.SUMMARY_PERMISSIONS_PATH = SUMMARY_PERMISSIONS_PATH;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-foundation-ang-entitlements.umd.js.map
