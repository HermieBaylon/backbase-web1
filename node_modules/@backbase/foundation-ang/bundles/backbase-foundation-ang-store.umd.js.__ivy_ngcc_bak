(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ngrx/effects'), require('@ngrx/store'), require('@backbase/foundation-ang/future'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@backbase/foundation-ang/store', ['exports', '@angular/core', '@ngrx/effects', '@ngrx/store', '@backbase/foundation-ang/future', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["foundation-ang"] = global.backbase["foundation-ang"] || {}, global.backbase["foundation-ang"].store = {}), global.ng.core, global.i2, global.i1, global.backbase["foundation-ang"].future, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, i2, i1, future, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /**
     * @deprecated Will be removed in v7.0.0
     */
    var createChannelAction = function (action, channel) { return ({
        type: action.type,
        channel: channel,
        action: action,
    }); };
    var isChannelAction = function (action) { return 'channel' in action && 'action' in action; };
    var ɵ0$1 = isChannelAction;
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var toChannelAction = function (action) { return isChannelAction(action) ? action : createChannelAction(action); };
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var isActionForChannel = function (action, channels) {
        return !isChannelAction(action) || action.channel === undefined || channels.includes(action.channel);
    };
    /**
     * @deprecated Will be removed in v7.0.0
     * Stream operator to filter the `Actions` stream to only pass `Action`s that match the given `type`.
     */
    var ofType = function (type) { return typeof type === 'string'
        ? function (actions) { return actions.pipe(operators.filter(function (action) { return action.type === type; })); }
        : function (actions) { return actions.pipe(operators.filter(function (action) { return action.type === type.type; })); }; };
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var typePropertyIsNotAllowedMsg = 'type property is not allowed in action creators';

    /**
     * @deprecated Will be removed in v7.0.0
     */
    var InitializeStateActionType = '[Backbase Reducer] INITIALIZE REDUCER';
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var InitializeState = /** @class */ (function () {
        function InitializeState() {
            this.type = InitializeStateActionType;
        }
        return InitializeState;
    }());
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var metaChannelReducer = function (channels) {
        // create a meta reducer (takes a reducer, and returns a new reducer)
        return function (reducer) {
            // create a function to initialize the state for this reducer
            var initializeState = function () { return reducer(undefined, new InitializeState()); };
            // return the new reducer, which filters actions not for this "channel"
            return function (state, action) {
                if (state === void 0) { state = initializeState(); }
                var channelAction = toChannelAction(action);
                if (isActionForChannel(action, channels)) {
                    return reducer(state, channelAction.action);
                }
                return state;
            };
        };
    };

    var METADATA_KEY = '@backbase/store effect metadata';
    var setEffectActionMetadata = function (sourceProto, entries) {
        var constructor = sourceProto.constructor;
        var meta = constructor.hasOwnProperty(METADATA_KEY)
            ? constructor[METADATA_KEY]
            : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[METADATA_KEY];
        Array.prototype.push.apply(meta, entries);
    };
    var ɵ0 = setEffectActionMetadata;
    var getEffectsMetadata = function (sourceProto) { return sourceProto.constructor.hasOwnProperty(METADATA_KEY) ? sourceProto.constructor[METADATA_KEY] : []; };
    var ɵ1 = getEffectsMetadata;
    /**
     * @deprecated Will be removed in v7.0.0
     * Method decorator to mark a method as an effect. Effects can be registered with a `Store` to perform external
     * effects such as fetching data or navigating the browser.
     *
     * The decorated method must be `(actions: Observable<Action>, store?: Store) => Observable<Action>`.
     */
    var Effect = function () {
        return function (target, methodName) {
            var metadata = {
                propertyName: methodName,
            };
            setEffectActionMetadata(target, [metadata]);
        };
    };
    var hasEffectActionMetadata = function (instance) { return getEffectsMetadata(instance).length > 0; };
    var ɵ2 = hasEffectActionMetadata;
    var outputChannel = function (channel) { return function (source) { return source.pipe(operators.map(function (action) { return createChannelAction(action, channel); })); }; };
    var ɵ3 = outputChannel;
    var ofChannel = function (channels) { return function (source) { return source.pipe(operators.map(function (action) { return toChannelAction(action); }), operators.filter(function (action) { return isActionForChannel(action, channels); }), operators.map(function (channelAction) { return channelAction.action; })); }; };
    var ɵ4 = ofChannel;
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var createMetaChannelEffects = function (store, actions, effects, dispatchChannel, listenChannels) {
        if (!hasEffectActionMetadata(effects)) {
            throw new Error('Effect class has no effects');
        }
        var proto = function () { };
        Object.defineProperty(proto, 'name', { value: "Effect" + dispatchChannel, writable: false });
        var effectInstance = Object.create(proto);
        return getEffectsMetadata(effects).reduce(function (instance, effect) {
            instance[effect.propertyName] = i2.createEffect(function () { return effects[effect.propertyName](actions.pipe(ofChannel(listenChannels)), store).pipe(outputChannel(dispatchChannel)); });
            return instance;
        }, effectInstance);
    };

    /**
     * @deprecated Will be removed in v7.0.0
     */
    var InitializeStoreActionType = '[Backbase Reducer] INITIALIZE REDUCER';
    /**
     * @deprecated Will be removed in v7.0.0
     * An `Action` that is dispatched to a `Store` when it is created to allow the store to initialize
     * its initial state
     */
    var InitializeStoreAction = /** @class */ (function () {
        function InitializeStoreAction() {
            this.type = InitializeStoreActionType;
        }
        return InitializeStoreAction;
    }());
    /**
     * @deprecated Will be removed in v7.0.0
     * Stream operator to filter the `Actions` stream to only pass the `InitializeStoreAction`.
     * This can be used to write `Reducer`s or `Effect`s that are only run when their `Store` is
     * initially created.
     */
    var ofStoreInit = function () { return function (source) { return source.pipe(operators.filter(function (action) { return action.type === InitializeStoreActionType; })); }; };
    /**
     * @internal
     */
    var StoreBroker = /** @class */ (function () {
        function StoreBroker(superstore, actions, reducerManager, effectsSources, injector) {
            this.superstore = superstore;
            this.actions = actions;
            this.reducerManager = reducerManager;
            this.effectsSources = effectsSources;
            this.injector = injector;
            this.initializedStores = new Map();
        }
        StoreBroker.prototype.initStore = function (storeName, reducer, effects, branchName, dispatchChannel, inputChannels, widgetInjector) {
            var _this = this;
            if (inputChannels === void 0) { inputChannels = []; }
            if (this.isStoreInitialized(branchName, storeName)) {
                return this.createStore(storeName, branchName, dispatchChannel);
            }
            var allInputChannels = __spreadArray([this.privateChannel(storeName, dispatchChannel)], __read(inputChannels));
            this.addReducer(storeName, branchName, reducer, allInputChannels);
            this.setStoreInitialized(branchName, storeName);
            var store = this.createStore(storeName, branchName, dispatchChannel);
            effects
                .map(function (token) { return (widgetInjector || _this.injector).get(token); })
                .forEach(function (effectInstance) {
                _this.addEffects(store, effectInstance, _this.privateChannel(storeName, dispatchChannel), allInputChannels);
            });
            store.dispatch(new InitializeStoreAction());
            return store;
        };
        StoreBroker.prototype.createStore = function (storeName, branchName, dispatchChannel) {
            var _this = this;
            return {
                select: function (selector) {
                    return _this.superstore.select(function (state) { return state[_this.privateBranch(storeName, branchName)]; }).pipe(operators.map(selector));
                },
                dispatch: function (action) {
                    _this.dispatchForStore(storeName, dispatchChannel, action);
                },
            };
        };
        /**
         * Dispatches an action scoped on a channel just for this store.
         */
        StoreBroker.prototype.dispatchForStore = function (storeName, dispatchChannel, action) {
            this.dispatchOnChannel(this.privateChannel(storeName, dispatchChannel), action);
        };
        StoreBroker.prototype.dispatchOnChannel = function (channel, action) {
            this.superstore.dispatch(createChannelAction(action, channel));
        };
        StoreBroker.prototype.isStoreInitialized = function (branchName, storeName) {
            var storesInBranch = this.initializedStores.get(branchName);
            return !!(storesInBranch && storesInBranch.find(function (name) { return name === storeName; }));
        };
        StoreBroker.prototype.setStoreInitialized = function (branchName, storeName) {
            var storesInBranch = this.initializedStores.get(branchName);
            if (storesInBranch === undefined) {
                storesInBranch = [];
                this.initializedStores.set(branchName, storesInBranch);
            }
            storesInBranch.push(storeName);
        };
        StoreBroker.prototype.addReducer = function (storeName, branchName, reducer, inputChannels) {
            this.reducerManager.addFeature({
                key: this.privateBranch(storeName, branchName),
                reducers: metaChannelReducer(inputChannels)(reducer),
                reducerFactory: function () {
                    throw new Error('No reducer factory');
                },
                metaReducers: [], //[createMetaChannelReducer(inputChannels)],
            });
        };
        StoreBroker.prototype.addEffects = function (store, effects, dispatchChannel, listenChannels) {
            this.effectsSources.addEffects(createMetaChannelEffects(store, this.actions, effects, dispatchChannel, listenChannels));
        };
        StoreBroker.prototype.privateBranch = function (storeName, branchName) {
            return storeName + "/" + branchName;
        };
        StoreBroker.prototype.privateChannel = function (storeName, dispatchChannel) {
            return storeName + "/" + dispatchChannel;
        };
        return StoreBroker;
    }());
    StoreBroker.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function StoreBroker_Factory() { return new StoreBroker(i0__namespace.ɵɵinject(i1__namespace.Store), i0__namespace.ɵɵinject(i2__namespace.Actions), i0__namespace.ɵɵinject(i1__namespace.ReducerManager), i0__namespace.ɵɵinject(i2__namespace.EffectSources), i0__namespace.ɵɵinject(i0__namespace.INJECTOR)); }, token: StoreBroker, providedIn: "root" });
    StoreBroker.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    StoreBroker.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.Store,] }] },
        { type: rxjs.Observable, decorators: [{ type: i0.Inject, args: [i2.Actions,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i1.ReducerManager,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.EffectSources,] }] },
        { type: i0.Injector }
    ]; };

    /**
     * @deprecated Will be removed in v7.0.0
     */
    var ENFORCE_INJECTOR_FOR_CREATE_STORE = {
        name: 'ENFORCE_INJECTOR_FOR_CREATE_STORE',
        description: 'you have to provide widget injector for createStore to make sure your widget support lazy loading',
    };
    /**
     * @deprecated Will be removed in v7.0.0
     * Configuration token that defines the "branch" of the application state that the store is responsible for.
     *
     * @internal
     */
    var STORE_BRANCH = new i0.InjectionToken('@backbase store branch');
    /**
     * @deprecated Will be removed in v7.0.0
     * Configuration token that defines the "channel" on which the store will dispatch any events it produces.
     *
     * @internal
     */
    var STORE_DISPATCH_CHANNEL = new i0.InjectionToken('@backbase store dispatch channel');
    /**
     * @deprecated Will be removed in v7.0.0
     * Create a scoped store on a particular branch/channel
     */
    var StoreFactory = /** @class */ (function () {
        function StoreFactory(storeBroker, branch, dispatchChannel, featuresService) {
            this.storeBroker = storeBroker;
            this.branch = branch;
            this.dispatchChannel = dispatchChannel;
            this.featuresService = featuresService;
        }
        StoreFactory.prototype.createStore = function (storeName, reducer, effects, injector) {
            if (!injector && this.featuresService.isEnabled(ENFORCE_INJECTOR_FOR_CREATE_STORE)) {
                throw new Error(ENFORCE_INJECTOR_FOR_CREATE_STORE.description);
            }
            if (!injector) {
                console.warn(ENFORCE_INJECTOR_FOR_CREATE_STORE.description);
            }
            return this.storeBroker.initStore(storeName, reducer, effects, this.branch, this.dispatchChannel, undefined, injector);
        };
        return StoreFactory;
    }());
    StoreFactory.ctorParameters = function () { return [
        { type: StoreBroker },
        { type: undefined, decorators: [{ type: i0.Inject, args: [STORE_BRANCH,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [STORE_DISPATCH_CHANNEL,] }] },
        { type: future.FeaturesService }
    ]; };

    /**
     * @deprecated Will be removed in v7.0.0
     */
    var ALLOW_NGRX_IN_ROOT = {
        name: 'ALLOW_NGRX_IN_ROOT',
        description: 'StoreModule is deprecated - use BackbaseStoreModule instead',
    };
    /**
     * @deprecated
     */
    var StoreModule = /** @class */ (function () {
        function StoreModule(featuresService) {
            if (featuresService.isEnabled(ALLOW_NGRX_IN_ROOT)) {
                throw new Error('StoreModule is deprecated - use BackbaseStoreModule instead');
            }
        }
        return StoreModule;
    }());
    StoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        i2.EffectsModule.forRoot([]),
                        i1.StoreModule.forRoot({}),
                        future.FutureFeaturesModule.allowOptIn([ALLOW_NGRX_IN_ROOT, ENFORCE_INJECTOR_FOR_CREATE_STORE]),
                    ],
                    providers: [StoreBroker],
                },] }
    ];
    StoreModule.ctorParameters = function () { return [
        { type: future.FeaturesService }
    ]; };
    /**
     * @deprecated Will be removed in v7.0.0
     */
    var BackbaseStoreModule = /** @class */ (function () {
        function BackbaseStoreModule() {
        }
        return BackbaseStoreModule;
    }());
    BackbaseStoreModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i2.EffectsModule, i1.StoreModule, future.FutureFeaturesModule.allowOptIn([ENFORCE_INJECTOR_FOR_CREATE_STORE])],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    Object.defineProperty(exports, 'createAction', {
        enumerable: true,
        get: function () { return i1.createAction; }
    });
    Object.defineProperty(exports, 'createReducer', {
        enumerable: true,
        get: function () { return i1.createReducer; }
    });
    Object.defineProperty(exports, 'on', {
        enumerable: true,
        get: function () { return i1.on; }
    });
    Object.defineProperty(exports, 'props', {
        enumerable: true,
        get: function () { return i1.props; }
    });
    exports.BackbaseStoreModule = BackbaseStoreModule;
    exports.Effect = Effect;
    exports.InitializeStoreAction = InitializeStoreAction;
    exports.StoreFactory = StoreFactory;
    exports.ofStoreInit = ofStoreInit;
    exports.ofType = ofType;
    exports.typePropertyIsNotAllowedMsg = typePropertyIsNotAllowedMsg;
    exports["ɵSTORE_BRANCH"] = STORE_BRANCH;
    exports["ɵSTORE_DISPATCH_CHANNEL"] = STORE_DISPATCH_CHANNEL;
    exports["ɵStoreBroker"] = StoreBroker;
    exports["ɵa"] = ENFORCE_INJECTOR_FOR_CREATE_STORE;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-foundation-ang-store.umd.js.map
