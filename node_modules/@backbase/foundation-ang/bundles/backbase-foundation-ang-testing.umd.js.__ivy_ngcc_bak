(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@backbase/lib-bb-page-bootstrap-cdn')) :
    typeof define === 'function' && define.amd ? define('@backbase/foundation-ang/testing', ['exports', '@backbase/lib-bb-page-bootstrap-cdn'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["foundation-ang"] = global.backbase["foundation-ang"] || {}, global.backbase["foundation-ang"].testing = {}), global.libBbPageBootstrapCdn));
})(this, (function (exports, libBbPageBootstrapCdn) { 'use strict';

    /**
     * PortalContentMock class which functions as a mock content store
     *
     * @usageNotes
     * ```typescript
     * // Store content in mock content store and get contentRef back
     * const contentRef = PortalContentMock.addImageContent({ url: '/image.png' });
     *
     * // use PortalContentMock to get content from the mock content store
     * const portalContent = new PortalContentMock();
     * portalContent.getContent(contentRef);
     * ```
     */
    var PortalContentMock = /** @class */ (function () {
        function PortalContentMock() {
        }
        /**
         * Add image item to mock content store
         * @param content image item
         * @return content ref
         */
        PortalContentMock.addImageContent = function (content, contentRef) {
            return PortalContentMock.addContentItem(libBbPageBootstrapCdn.ContentTypes.IMAGE, content, undefined, contentRef);
        };
        /**
         * Add document item to mock content store
         * @param content document item
         * @return content ref
         */
        PortalContentMock.addDocumentContent = function (content, contentRef) {
            return PortalContentMock.addContentItem(libBbPageBootstrapCdn.ContentTypes.DOCUMENT, content, undefined, contentRef);
        };
        /**
         * Add structured content item to mock content store
         * @param typeDefinitionName type definition name of the strucutred content item
         * @param content structured content (JSON)
         * @return content ref
         */
        PortalContentMock.addStructuredContent = function (typeDefinitionName, content, contentRef) {
            return PortalContentMock.addContentItem(libBbPageBootstrapCdn.ContentTypes.STRUCTURED_CONTENT, content, typeDefinitionName, contentRef);
        };
        /**
         * Add plain text content item to mock content store
         * @param content plain text
         * @return content ref
         */
        PortalContentMock.addPlainTextContent = function (content, contentRef) {
            return PortalContentMock.addStructuredContent(libBbPageBootstrapCdn.StructuredContentType.PLAIN_TEXT, { content: content }, contentRef);
        };
        /**
         * Add rich text content item to mock content store
         * @param content rich text (HTML)
         * @return content ref
         */
        PortalContentMock.addRichTextContent = function (content, contentRef) {
            return PortalContentMock.addStructuredContent(libBbPageBootstrapCdn.StructuredContentType.RICH_TEXT, { content: content }, contentRef);
        };
        PortalContentMock.addContentItem = function (type, content, typeDefinitionName, contentRef) {
            if (contentRef === void 0) { contentRef = PortalContentMock.getContentRef(); }
            var contentItem = {
                type: type,
                content: content,
                properties: {},
            };
            if (typeDefinitionName) {
                contentItem.typeDefinitionName = typeDefinitionName;
            }
            PortalContentMock.contentMockMap[contentRef] = content;
            PortalContentMock.contentItemMockMap[contentRef] = contentItem;
            return contentRef;
        };
        PortalContentMock.getContentRef = function () {
            PortalContentMock.id += 1;
            return "cs:mockRepository:" + PortalContentMock.id;
        };
        PortalContentMock.prototype.get = function (contentRef) {
            var contentItem = PortalContentMock.contentItemMockMap[contentRef];
            if (!contentItem) {
                // Return empty text so deprecated content widget logic doesn't break
                return Promise.resolve({
                    id: contentRef,
                    type: libBbPageBootstrapCdn.ContentType.STRUCTURED_CONTENT,
                    content: '',
                });
            }
            if (contentItem.type === libBbPageBootstrapCdn.ContentTypes.IMAGE) {
                var content = contentItem.content;
                var imageContentItem = {
                    id: contentRef,
                    type: libBbPageBootstrapCdn.ContentType.IMAGE,
                    contentRef: content.url,
                };
                return Promise.resolve(imageContentItem);
            }
            if (contentItem.type === libBbPageBootstrapCdn.ContentTypes.STRUCTURED_CONTENT) {
                var content = contentItem.content;
                var structuredContentItem = {
                    id: contentRef,
                    type: libBbPageBootstrapCdn.ContentType.STRUCTURED_CONTENT,
                    content: content.content,
                };
                return Promise.resolve(structuredContentItem);
            }
            return Promise.reject("Couldn't map a content item of type " + contentItem.type);
        };
        PortalContentMock.prototype.getContent = function (contentRef) {
            return Promise.resolve(PortalContentMock.contentMockMap[contentRef]);
        };
        PortalContentMock.prototype.getContentItem = function (contentRef) {
            return Promise.resolve(PortalContentMock.contentItemMockMap[contentRef]);
        };
        PortalContentMock.prototype.subscribeContentUpdate = function () {
            return function () { };
        };
        PortalContentMock.prototype.subscribeContentItemUpdate = function () {
            return function () { };
        };
        return PortalContentMock;
    }());
    PortalContentMock.id = 0;
    PortalContentMock.contentMockMap = {};
    PortalContentMock.contentItemMockMap = {};

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PortalContentMock = PortalContentMock;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-foundation-ang-testing.umd.js.map
