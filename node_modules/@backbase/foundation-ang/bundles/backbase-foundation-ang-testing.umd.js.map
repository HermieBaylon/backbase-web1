{"version":3,"file":"backbase-foundation-ang-testing.umd.js","sources":["../../../../projects/backbase/foundation-ang/testing/src/content-mock.ts","../../../../projects/backbase/foundation-ang/testing/src/backbase-foundation-ang-testing.ts"],"names":["ContentTypes","StructuredContentType","ContentType"],"mappings":"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","sourcesContent":["import {\n  ContentType,\n  StructuredContentType,\n  ContentUpdateUnsubscribe,\n  PortalContent,\n  ContentTypes,\n  ContentItem,\n  ImageItem,\n  DocumentItem,\n  StructuredContentItem,\n  ImageContentItem,\n} from '@backbase/lib-bb-page-bootstrap-cdn';\n\ninterface ContentMock {\n  [contentRef: string]: any;\n}\n\ninterface ContentItemMock {\n  [contentRef: string]: ContentItem<any>;\n}\n\n/**\n * PortalContentMock class which functions as a mock content store\n *\n * @usageNotes\n * ```typescript\n * // Store content in mock content store and get contentRef back\n * const contentRef = PortalContentMock.addImageContent({ url: '/image.png' });\n *\n * // use PortalContentMock to get content from the mock content store\n * const portalContent = new PortalContentMock();\n * portalContent.getContent(contentRef);\n * ```\n */\nexport class PortalContentMock implements PortalContent {\n  private static id = 0;\n\n  private static readonly contentMockMap: ContentMock = {};\n\n  private static readonly contentItemMockMap: ContentItemMock = {};\n\n  /**\n   * Add image item to mock content store\n   * @param content image item\n   * @return content ref\n   */\n  public static addImageContent(content: Partial<ImageItem>, contentRef?: string) {\n    return PortalContentMock.addContentItem(ContentTypes.IMAGE, content, undefined, contentRef);\n  }\n\n  /**\n   * Add document item to mock content store\n   * @param content document item\n   * @return content ref\n   */\n  public static addDocumentContent(content: Partial<DocumentItem>, contentRef?: string) {\n    return PortalContentMock.addContentItem(ContentTypes.DOCUMENT, content, undefined, contentRef);\n  }\n\n  /**\n   * Add structured content item to mock content store\n   * @param typeDefinitionName type definition name of the strucutred content item\n   * @param content structured content (JSON)\n   * @return content ref\n   */\n  public static addStructuredContent<T = { [key: string]: any }>(\n    typeDefinitionName: string,\n    content: T,\n    contentRef?: string,\n  ) {\n    return PortalContentMock.addContentItem(ContentTypes.STRUCTURED_CONTENT, content, typeDefinitionName, contentRef);\n  }\n\n  /**\n   * Add plain text content item to mock content store\n   * @param content plain text\n   * @return content ref\n   */\n  public static addPlainTextContent(content: string, contentRef?: string) {\n    return PortalContentMock.addStructuredContent(StructuredContentType.PLAIN_TEXT, { content }, contentRef);\n  }\n\n  /**\n   * Add rich text content item to mock content store\n   * @param content rich text (HTML)\n   * @return content ref\n   */\n  public static addRichTextContent(content: string, contentRef?: string) {\n    return PortalContentMock.addStructuredContent(StructuredContentType.RICH_TEXT, { content }, contentRef);\n  }\n\n  private static addContentItem(\n    type: ContentTypes,\n    content: any,\n    typeDefinitionName?: string,\n    contentRef = PortalContentMock.getContentRef(),\n  ) {\n    const contentItem: ContentItem<any> = {\n      type,\n      content,\n      properties: {},\n    };\n\n    if (typeDefinitionName) {\n      contentItem.typeDefinitionName = typeDefinitionName;\n    }\n\n    PortalContentMock.contentMockMap[contentRef] = content;\n    PortalContentMock.contentItemMockMap[contentRef] = contentItem;\n\n    return contentRef;\n  }\n\n  private static getContentRef() {\n    PortalContentMock.id += 1;\n\n    return `cs:mockRepository:${PortalContentMock.id}`;\n  }\n\n  public get(contentRef: string): Promise<ImageContentItem | StructuredContentItem> {\n    const contentItem = PortalContentMock.contentItemMockMap[contentRef];\n\n    if (!contentItem) {\n      // Return empty text so deprecated content widget logic doesn't break\n      return Promise.resolve({\n        id: contentRef,\n        type: ContentType.STRUCTURED_CONTENT,\n        content: '',\n      });\n    }\n\n    if (contentItem.type === ContentTypes.IMAGE) {\n      const content: ImageItem = contentItem.content;\n\n      const imageContentItem: ImageContentItem = {\n        id: contentRef,\n        type: ContentType.IMAGE,\n        contentRef: content.url,\n      };\n\n      return Promise.resolve(imageContentItem);\n    }\n\n    if (contentItem.type === ContentTypes.STRUCTURED_CONTENT) {\n      const content: { content: string } = contentItem.content;\n\n      const structuredContentItem: StructuredContentItem = {\n        id: contentRef,\n        type: ContentType.STRUCTURED_CONTENT,\n        content: content.content,\n      };\n\n      return Promise.resolve(structuredContentItem);\n    }\n\n    return Promise.reject(`Couldn't map a content item of type ${contentItem.type}`);\n  }\n\n  public getContent<T>(contentRef: string): Promise<T> {\n    return Promise.resolve(PortalContentMock.contentMockMap[contentRef]);\n  }\n\n  public getContentItem<T extends ContentItem<any>>(contentRef: string): Promise<T> {\n    return Promise.resolve(PortalContentMock.contentItemMockMap[contentRef] as T);\n  }\n\n  public subscribeContentUpdate(): ContentUpdateUnsubscribe {\n    return () => {};\n  }\n\n  public subscribeContentItemUpdate(): ContentUpdateUnsubscribe {\n    return () => {};\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}