(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@backbase/foundation-ang/core'),exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/foundation-ang/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@backbase/foundation-ang/data-http', ['@angular/core','@backbase/foundation-ang/core','exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/web-sdk', '@backbase/foundation-ang/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.backbase.foundationAng.core,(global.backbase = global.backbase || {}, global.backbase["foundation-ang"] = global.backbase["foundation-ang"] || {}, global.backbase["foundation-ang"]["data-http"] = {}), global.ng.core, global.ng.common.http, global.backbase["foundation-ang"]["web-sdk"], global.backbase["foundation-ang"].core, global.rxjs, global.rxjs.operators));
})(this, (function (ɵngcc0,ɵngcc1,exports, i0, http, webSdk, core, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var CacheControlInterceptor = /** @class */ (function () {
        function CacheControlInterceptor() {
        }
        CacheControlInterceptor.prototype.intercept = function (req, next) {
            var updatedRequest = req.clone({
                setHeaders: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    Pragma: 'no-cache',
                },
            });
            return next.handle(updatedRequest);
        };
CacheControlInterceptor.ɵfac = function CacheControlInterceptor_Factory(t) { return new (t || CacheControlInterceptor)(); };
CacheControlInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: CacheControlInterceptor, factory: function (t) { return CacheControlInterceptor.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CacheControlInterceptor, [{
        type: i0.Injectable
    }], function () { return []; }, null); })();
        return CacheControlInterceptor;
    }());
    var cacheControlInterceptorProvider = [
        {
            provide: http.HTTP_INTERCEPTORS,
            useClass: CacheControlInterceptor,
            multi: true,
        },
    ];

    /**
     * This token can be used to inject default DataHttpConfig
     */
    var DATA_HTTP_CONFIG = new i0.InjectionToken('DataHttpConfig');
    var DATA_HTTP_CUSTOM_CONFIG = new i0.InjectionToken('DataHttpCustomConfig');
    /**
     * Returns merged service data http configuration
     * @param globalConfig Default service configuration object
     * @param serviceConfig Service configuration object to be merge on default
     */
    function createServiceDataHttpConfig(globalConfig, serviceConfig) {
        return Object.assign(Object.assign({}, globalConfig), serviceConfig);
    }

    var second = 1000;
    var RequestCacheService = /** @class */ (function () {
        function RequestCacheService() {
            this.ttl = 1 * second;
            this.results = new Map();
        }
        RequestCacheService.prototype.get = function (req) {
            this.garbageCollect();
            var cached = this.results.get(this.key(req));
            if (cached === undefined) {
                return undefined;
            }
            return cached.value;
        };
        RequestCacheService.prototype.set = function (request, response) {
            this.results.set(this.key(request), this.value(response));
        };
        RequestCacheService.prototype.key = function (request) {
            return JSON.stringify({
                url: request.urlWithParams,
            });
        };
        RequestCacheService.prototype.value = function (response) {
            return {
                expireAt: this.expiryTime(),
                value: response,
            };
        };
        RequestCacheService.prototype.expiryTime = function () {
            return Date.now() + this.ttl;
        };
        RequestCacheService.prototype.isExpired = function (value) {
            return Date.now() > value.expireAt;
        };
        RequestCacheService.prototype.garbageCollect = function () {
            var _this = this;
            this.results.forEach(function (value, key) {
                if (_this.isExpired(value)) {
                    _this.results.delete(key);
                }
            });
        };
RequestCacheService.ɵfac = function RequestCacheService_Factory(t) { return new (t || RequestCacheService)(); };
RequestCacheService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RequestCacheService, factory: function (t) { return RequestCacheService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RequestCacheService, [{
        type: i0.Injectable
    }], function () { return []; }, null); })();
        return RequestCacheService;
    }());

    var RequestCacheInterceptor = /** @class */ (function () {
        function RequestCacheInterceptor(cache) {
            this.cache = cache;
        }
        RequestCacheInterceptor.prototype.intercept = function (req, next) {
            if (!this.isCachable(req)) {
                return next.handle(req);
            }
            return this.cachedResponse(req) || this.refreshResponse(req, next);
        };
        RequestCacheInterceptor.prototype.isCachable = function (req) {
            return req.method === 'GET';
        };
        RequestCacheInterceptor.prototype.cachedResponse = function (req) {
            return this.cache.get(req);
        };
        RequestCacheInterceptor.prototype.refreshResponse = function (req, next) {
            var response = next.handle(req);
            this.cache.set(req, response);
            return response;
        };
RequestCacheInterceptor.ɵfac = function RequestCacheInterceptor_Factory(t) { return new (t || RequestCacheInterceptor)(ɵngcc0.ɵɵinject(RequestCacheService)); };
RequestCacheInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RequestCacheInterceptor, factory: function (t) { return RequestCacheInterceptor.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RequestCacheInterceptor, [{
        type: i0.Injectable
    }], function () { return [{ type: RequestCacheService }]; }, null); })();
        return RequestCacheInterceptor;
    }());
    RequestCacheInterceptor.ctorParameters = function () { return [
        { type: RequestCacheService }
    ]; };
    var requestCacheInterceptorProvider = [
        RequestCacheService,
        {
            provide: http.HTTP_INTERCEPTORS,
            useClass: RequestCacheInterceptor,
            multi: true,
        },
    ];

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var normalizeHttpParameter = function (accum, _a) {
        var _b, _c;
        var _d = __read(_a, 2), key = _d[0], value = _d[1];
        if (value === undefined) {
            return accum;
        }
        if (typeof value === 'number') {
            return Object.assign(Object.assign({}, accum), (_b = {}, _b[key] = String(value), _b));
        }
        return Object.assign(Object.assign({}, accum), (_c = {}, _c[key] = value, _c));
    };
    var EXTRA_ENCODE_URI_PARAMS = {
        name: 'EXTRA_ENCODE_URI_PARAMS',
        description: 'Correctly encode certain symbols in data module http params (eg encode "+" to "%2B) to fix a known angular bug (#18261)',
    };
    /**
     * Filter undefined params, and convert numbers to strings.
     */
    var normalizeHttpParameters = function (params) { return Object.entries(params).reduce(normalizeHttpParameter, {}); };
    var CustomEncoder = /** @class */ (function () {
        function CustomEncoder() {
        }
        CustomEncoder.prototype.encodeKey = function (key) {
            return encodeURIComponent(key);
        };
        CustomEncoder.prototype.encodeValue = function (value) {
            return encodeURIComponent(value);
        };
        CustomEncoder.prototype.decodeKey = function (key) {
            return decodeURIComponent(key);
        };
        CustomEncoder.prototype.decodeValue = function (value) {
            return decodeURIComponent(value);
        };
        return CustomEncoder;
    }());
    /**
     * Injection token for the `HttpParamsFactory` utility function.
     *
     * @usageNotes
     *
     * ### Example
     *
     * ```
     * export class MyDataService {
     *   constructor(private readonly http: HttpClient,
     *   @Inject(HTTP_PARAMS_FACTORY)
     *   private readonly toHttpParams: HttpParamsFactory,
     *   ){}
     *
     *   makeRequest(params: HttpParameters): Observable<HttpResponse<any>> {
     *     return this.http.request('get', '/api', {
     *       params: this.toHttpParams(params),
     *     });
     *   }
     * }
     * ```
     */
    var HTTP_PARAMS_FACTORY = new i0.InjectionToken('Http Param Factory');
    var httpParamsFactoryFactory = function (featuresService) {
        // We can't type options correctly, because angular is not exporting HttpParamsOptions
        // https://github.com/angular/angular/issues/20276
        var httpParamsOptions = featuresService.isEnabled(EXTRA_ENCODE_URI_PARAMS) ? { encoder: new CustomEncoder() } : {};
        return function (fromObject) { return new http.HttpParams(Object.assign(Object.assign({}, httpParamsOptions), { fromObject: normalizeHttpParameters(fromObject) })); };
    };

    /**
     * Returns merged data http configuration object
     * @param pageConfigService
     * @param config
     */
    function dataHttpConfigFactory(pageConfigService, config) {
        if (config === void 0) { config = {}; }
        return Object.assign({ headers: {}, apiRoot: pageConfigService.apiRoot }, config);
    }
    var ɵ0$1 = httpParamsFactoryFactory;
    var DataHttpModule = /** @class */ (function () {
        function DataHttpModule() {
        }
        /**
         * Creates a module with http configuration for data modules.
         *
         * @usageNotes
         *
         * ### Example
         *
         * ```
         * @NgModule({
         *   imports: [
         *     DataHttpModule.forRoot({
         *       rootApi: '/custom-base-url/',
         *       headers: {
         *         'X-custom': 'foo',
         *       }
         *     })
         *   ]
         * })
         * class MyAppModule {}
         * ```
         */
        DataHttpModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: DataHttpModule,
                providers: [
                    requestCacheInterceptorProvider,
                    cacheControlInterceptorProvider,
                    {
                        provide: DATA_HTTP_CUSTOM_CONFIG,
                        useValue: config,
                    },
                    {
                        provide: DATA_HTTP_CONFIG,
                        useFactory: dataHttpConfigFactory,
                        deps: [webSdk.PAGE_CONFIG, DATA_HTTP_CUSTOM_CONFIG],
                    },
                ],
            };
        };
DataHttpModule.ɵfac = function DataHttpModule_Factory(t) { return new (t || DataHttpModule)(); };
DataHttpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DataHttpModule });
DataHttpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: DATA_HTTP_CONFIG,
            useFactory: dataHttpConfigFactory,
            deps: [webSdk.PAGE_CONFIG]
        },
        {
            provide: HTTP_PARAMS_FACTORY,
            useFactory: ɵ0$1,
            deps: [core.FeaturesService]
        },
    ], imports: [[core.FutureFeaturesModule.allowOptIn([EXTRA_ENCODE_URI_PARAMS])]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataHttpModule, [{
        type: i0.NgModule,
        args: [{
                imports: [core.FutureFeaturesModule.allowOptIn([EXTRA_ENCODE_URI_PARAMS])],
                providers: [
                    {
                        provide: DATA_HTTP_CONFIG,
                        useFactory: dataHttpConfigFactory,
                        deps: [webSdk.PAGE_CONFIG]
                    },
                    {
                        provide: HTTP_PARAMS_FACTORY,
                        useFactory: ɵ0$1,
                        deps: [core.FeaturesService]
                    },
                ]
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DataHttpModule, { imports: [ɵngcc1.FutureFeaturesModule] }); })();
        return DataHttpModule;
    }());

    var DEFAULT_RETURN_STATUS = 200;
    exports.MocksItem = void 0;
    (function (MocksItem) {
        var placeholderPattern = /\{[^\}]*\}/g;
        function placeholdersCount(item) {
            return (item.urlPattern.match(placeholderPattern) || []).length;
        }
        function placeholderIndex(item) {
            var regex = new RegExp(placeholderPattern);
            var found = regex.exec(item.urlPattern);
            return found == null ? item.urlPattern.length : found.index;
        }
        function comparePlaceHolderCount(a, b) {
            return placeholdersCount(a) - placeholdersCount(b);
        }
        function comparePlaceholderIndex(a, b) {
            return placeholderIndex(b) - placeholderIndex(a);
        }
        function compareSpecificity(a, b) {
            return comparePlaceHolderCount(a, b) || comparePlaceholderIndex(a, b);
        }
        MocksItem.compareSpecificity = compareSpecificity;
    })(exports.MocksItem || (exports.MocksItem = {}));
    function fromExamples(examples) {
        return examples.map(exampleItemToMockItem).sort(exports.MocksItem.compareSpecificity);
    }
    function exampleItemToMockItem(example) {
        var defaultResponseItem;
        if (example.responses && example.responses.length) {
            defaultResponseItem =
                example.responses.find(function (response) { return isSuccessStatus(response.status); }) ||
                    example.responses[0];
        }
        return Object.assign({ statusToReturn: defaultResponseItem ? defaultResponseItem.status : DEFAULT_RETURN_STATUS }, example);
    }
    function isSuccessStatus(status) {
        return status >= 200 && status <= 299;
    }
    var MOCKS_EXAMPLES = new i0.InjectionToken("@backbase/foundation Mocks Examples");

    var hasProtocol = function (url) { return !!url.match(/^[^/:]+:\/{2,}$/); };
    var addTrailingSlash = function (url) { return url.replace(/([^\/])$/, '$1/'); };
    var ɵ0 = addTrailingSlash;
    var removeLeadingSlash = function (str) { return str.replace(/^[\/]+/, ''); };
    var ɵ1 = removeLeadingSlash;
    var removeTrailingSlash = function (str) { return str.replace(/[\/]+$/, ''); };
    var ɵ2 = removeTrailingSlash;
    /**
     * Join URL parts together into a single URL string.
     *
     * Ensures URL get joined together by a single slash.
     *
     * @internal
     * @usageNotes
     *
     * ### Example
     *
     * ```
     * joinUrl('a', 'b'); // returns 'a/b'
     * joinUrl('/a/', '/b/'); // returns '/a/b/'
     * joinUrl('http://www.example.com/', '/a/b', 'c'); // returns 'http://www.example.com/a/b/c'
     * ```
     */
    var joinUrl = function () {
        var urlParts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            urlParts[_i] = arguments[_i];
        }
        // Much of this is taken from https://github.com/jfromaniello/url-join/blob/master/lib/url-join.js
        if (urlParts.length < 2) {
            return urlParts[0] || '';
        }
        // If the first part is a plain protocol, we combine it with the next part.
        if (hasProtocol(urlParts[0])) {
            var first = urlParts.shift(); // it is assured by above check
            urlParts[0] = addTrailingSlash(first) + removeLeadingSlash(urlParts[0]);
        }
        var resultParts = urlParts.filter(Boolean).map(function (part, index) {
            if (index > 0) {
                // Removing the starting slashes for each component but the first.
                part = removeLeadingSlash(part);
            }
            if (index < urlParts.length - 1) {
                // Removing the ending slashes for each component but the last.
                part = removeTrailingSlash(part);
            }
            return part;
        });
        // All parts now start and end without slashes (exceptions for the first and last).
        return resultParts.join('/');
    };

    var DEFAULT_CONFIG_TOKEN = new i0.InjectionToken("@backbase/foundation default config token");
    var DataModulesManager = /** @class */ (function () {
        function DataModulesManager(injector, mockData) {
            this.injector = injector;
            this._mocks = [];
            this.modulesConfig = new Map();
            this.addMockExamples(mockData || []);
        }
        DataModulesManager.prototype.setModuleConfig = function (token, config) {
            if (this.modulesConfig.has(token)) {
                var current = this.modulesConfig.get(token);
                this.modulesConfig.set(token, Object.assign(Object.assign({}, current), { config: config }));
            }
            else {
                this.modulesConfig.set(token, {
                    config: config,
                });
            }
            this.updateMocks();
        };
        DataModulesManager.prototype.getMocks = function () {
            return this._mocks;
        };
        DataModulesManager.prototype.addMockExamples = function (mockData) {
            var e_1, _d;
            var _a, _b, _c;
            try {
                for (var mockData_1 = __values(mockData), mockData_1_1 = mockData_1.next(); !mockData_1_1.done; mockData_1_1 = mockData_1.next()) {
                    var _e = mockData_1_1.value, token = _e.token, examples = _e.examples;
                    var configToken = token || DEFAULT_CONFIG_TOKEN;
                    var config = (_a = this.injector.get(configToken, null)) !== null && _a !== void 0 ? _a : undefined;
                    var allExamples = configToken === DEFAULT_CONFIG_TOKEN
                        ? examples.concat((_c = (_b = this.modulesConfig.get(configToken)) === null || _b === void 0 ? void 0 : _b.examples) !== null && _c !== void 0 ? _c : [])
                        : examples;
                    this.modulesConfig.set(configToken, {
                        examples: allExamples,
                        config: config,
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mockData_1_1 && !mockData_1_1.done && (_d = mockData_1.return)) _d.call(mockData_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.updateMocks();
        };
        DataModulesManager.prototype.updateMocks = function () {
            var e_2, _d;
            var _this = this;
            var mockExamples = [];
            var _loop_1 = function (config, examples) {
                mockExamples.push.apply(mockExamples, __spreadArray([], __read((examples || []).map(function (example) { return _this.createURL(example, config); }))));
            };
            try {
                for (var _e = __values(this.modulesConfig.values()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var _g = _f.value, config = _g.config, examples = _g.examples;
                    _loop_1(config, examples);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_d = _e.return)) _d.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this._mocks = fromExamples(mockExamples);
        };
        DataModulesManager.prototype.createURL = function (example, serviceConfig) {
            return serviceConfig
                ? Object.assign(Object.assign({}, example), { urlPattern: joinUrl(serviceConfig.apiRoot, serviceConfig.servicePath, example.urlPattern) }) : example;
        };
DataModulesManager.ɵfac = function DataModulesManager_Factory(t) { return new (t || DataModulesManager)(ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(MOCKS_EXAMPLES, 8)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataModulesManager, [{
        type: i0.Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: Array, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [MOCKS_EXAMPLES]
            }] }]; }, null); })();
        return DataModulesManager;
    }());
    DataModulesManager.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DataModulesManager_Factory() { return new DataModulesManager(i0__namespace.ɵɵinject(i0__namespace.INJECTOR), i0__namespace.ɵɵinject(MOCKS_EXAMPLES, 8)); }, token: DataModulesManager, providedIn: "root" });
    DataModulesManager.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MOCKS_EXAMPLES,] }] }
    ]; };

    var DEFAULT_OPTIONS = {
        responseDelay: 300,
        enableMocksStorageKey: 'enableMocks',
    };
    var MocksInterceptor = /** @class */ (function () {
        /*
         * this class is constructed in createMocksInterceptor
         function so make sure to updated it too if you have changes in the dependancy list
         */
        function MocksInterceptor(dataModuleManager) {
            this.dataModuleManager = dataModuleManager;
            this.options = DEFAULT_OPTIONS;
        }
        MocksInterceptor.prototype.urlMatchesPattern = function (url, pattern) {
            var regexp = new RegExp(pattern
                .replace(/[.*+?^${}()|[\]\\]/g, '\\$&') // escape regex characters in URL pattern
                .replace(/\\{[^\}]*\}/g, '[^/]*') // convert template {placeholders} to regex
                .concat('$'));
            // fixes bug with older versions of data modules, where they could have ended up
            // with double slashes in the request URL, depending on the environment
            // by replacing multiple slashes with a single slash (except after ":" - e.g. in "http://")
            var normalUrl = url.replace(/([^:]\/)\/+/g, '$1');
            return regexp.test(normalUrl);
        };
        MocksInterceptor.prototype.findRequestMock = function (request) {
            var _this = this;
            var urlAndMethodMatch = function (item) {
                return request.method === item.method && _this.urlMatchesPattern(request.url, item.urlPattern);
            };
            return this.dataModuleManager.getMocks().find(urlAndMethodMatch);
        };
        MocksInterceptor.prototype.toResponseObject = function (mockItem) {
            var response = mockItem.responses.find(function (resp) { return resp.status === mockItem.statusToReturn; });
            if (!response) {
                return rxjs.throwError(new http.HttpErrorResponse({
                    status: 500,
                    statusText: 'No Mock Defined',
                }));
            }
            if (isSuccessStatus(response.status)) {
                return rxjs.of(new http.HttpResponse(response));
            }
            else {
                return rxjs.throwError(new http.HttpErrorResponse(response));
            }
        };
        MocksInterceptor.prototype.getMockItemFromStorage = function (urlPattern) {
            try {
                return JSON.parse(localStorage.getItem(urlPattern) || '{}');
            }
            catch (_a) {
                console.warn("[MOCK] Invalid json for the \"" + urlPattern + "\" local storage item");
                return {};
            }
        };
        MocksInterceptor.prototype.processRequest = function (request, next) {
            var mock = this.findRequestMock(request);
            if (mock) {
                return this.toResponseObject(Object.assign(Object.assign({}, mock), this.getMockItemFromStorage(mock.urlPattern)));
            }
            return next.handle(request);
        };
        MocksInterceptor.prototype.intercept = function (request, next) {
            if (localStorage.getItem(this.options.enableMocksStorageKey) !== 'true') {
                return next.handle(request);
            }
            return this.processRequest(request, next).pipe(operators.materialize(), operators.delay(this.options.responseDelay), operators.dematerialize(), operators.tap(function (response) {
                // eslint-disable-next-line  no-console
                console.log('[MOCK]', request, response);
            }));
        };
MocksInterceptor.ɵfac = function MocksInterceptor_Factory(t) { return new (t || MocksInterceptor)(ɵngcc0.ɵɵinject(DataModulesManager)); };
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MocksInterceptor, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: DataModulesManager }]; }, null); })();
        return MocksInterceptor;
    }());
    MocksInterceptor.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function MocksInterceptor_Factory() { return new MocksInterceptor(i0__namespace.ɵɵinject(DataModulesManager)); }, token: MocksInterceptor, providedIn: "root" });
    MocksInterceptor.ctorParameters = function () { return [
        { type: DataModulesManager }
    ]; };
    /**
     * Create a HTTP_INTERCEPTOR to return mock responses for data modules.
     */
    function createMocksInterceptor() {
        return [
            {
                provide: http.HTTP_INTERCEPTORS,
                useClass: MocksInterceptor,
                deps: [DataModulesManager],
                multi: true,
            },
            {
                provide: i0.APP_BOOTSTRAP_LISTENER,
                useValue: bootstrapMocksInterceptor,
                multi: true,
            },
        ];
    }
    function bootstrapMocksInterceptor() {
        if (!i0.isDevMode()) {
            console.warn('Mocks should not be enabled in a production environment.');
        }
    }
    /**
     * @internal
     * @deprecated
     */
    function createMockInterceptor(examples) {
        return createMocks(examples);
    }
    /**
     * Create mocks
     *
     * @param examples
     * @param serviceConfigToken
     */
    function createMocks(examples, serviceConfigToken) {
        return {
            provide: MOCKS_EXAMPLES,
            useValue: { examples: examples, token: serviceConfigToken },
            multi: true,
        };
    }

    var PageParams;
    (function (PageParams) {
        function equal(a, b) {
            return a.size === b.size && a.from === b.from;
        }
        PageParams.equal = equal;
        function toHttpParams(params) {
            return new http.HttpParams({
                fromObject: {
                    from: Math.floor(params.from).toString(),
                    size: Math.floor(params.size).toString(),
                },
            });
        }
        PageParams.toHttpParams = toHttpParams;
    })(PageParams || (PageParams = {}));
    var CursorParams;
    (function (CursorParams) {
        function equal(a, b) {
            return a.size === b.size && a.cursor === b.cursor;
        }
        CursorParams.equal = equal;
        function toHttpParams(params) {
            return new http.HttpParams({
                fromObject: Object.assign({ from: params.cursor }, (params.size ? { size: Math.floor(params.size).toString() } : {})),
            });
        }
        CursorParams.toHttpParams = toHttpParams;
    })(CursorParams || (CursorParams = {}));
    exports.PaginationParams = void 0;
    (function (PaginationParams) {
        function equal(a, b) {
            var cursorsEqual = isCursorParams(a) && isCursorParams(b) && CursorParams.equal(a, b);
            var pagesEqual = isPageParams(a) && isPageParams(b) && PageParams.equal(a, b);
            return cursorsEqual || pagesEqual;
        }
        PaginationParams.equal = equal;
        function isPageParams(params) {
            return params.from !== undefined;
        }
        PaginationParams.isPageParams = isPageParams;
        function isCursorParams(params) {
            return params.cursor !== undefined;
        }
        PaginationParams.isCursorParams = isCursorParams;
        function toHttpParams(params) {
            return isPageParams(params) ? PageParams.toHttpParams(params) : CursorParams.toHttpParams(params);
        }
        PaginationParams.toHttpParams = toHttpParams;
    })(exports.PaginationParams || (exports.PaginationParams = {}));

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DATA_HTTP_CONFIG = DATA_HTTP_CONFIG;
    exports.DataHttpModule = DataHttpModule;
    exports.DataModulesManager = DataModulesManager;
    exports.HTTP_PARAMS_FACTORY = HTTP_PARAMS_FACTORY;
    exports.createMockInterceptor = createMockInterceptor;
    exports.createMocks = createMocks;
    exports.createMocksInterceptor = createMocksInterceptor;
    exports.createServiceDataHttpConfig = createServiceDataHttpConfig;
    exports. ɵa   = dataHttpConfigFactory;
    exports. ɵb   = DATA_HTTP_CUSTOM_CONFIG;
    exports. ɵc   = MocksInterceptor;
    exports. ɵd   = bootstrapMocksInterceptor;
    exports. ɵf   = MOCKS_EXAMPLES;
    exports. ɵg   = EXTRA_ENCODE_URI_PARAMS;
    exports. ɵh   = httpParamsFactoryFactory;
    exports. ɵi   = RequestCacheInterceptor;
    exports. ɵj   = requestCacheInterceptorProvider;
    exports. ɵk   = RequestCacheService;
    exports. ɵl   = CacheControlInterceptor;
    exports. ɵm   = cacheControlInterceptorProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=backbase-foundation-ang-data-http.umd.js.map