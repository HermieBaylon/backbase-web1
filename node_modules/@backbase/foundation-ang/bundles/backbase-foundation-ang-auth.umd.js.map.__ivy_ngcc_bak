{"version":3,"file":"backbase-foundation-ang-auth.umd.js","sources":["../../../../projects/backbase/foundation-ang/auth/src/deprecated/auth.service.ts","../../../../projects/backbase/foundation-ang/auth/src/deprecated/auth.guard.ts","../../../../projects/backbase/foundation-ang/auth/src/deprecated/auth.interceptor.ts","../../../../projects/backbase/foundation-ang/auth/src/auto-refresh.ts","../../../../projects/backbase/foundation-ang/auth/src/auth-utils.ts","../../../../projects/backbase/foundation-ang/auth/src/invalid-token.interceptor.ts","../../../../projects/backbase/foundation-ang/auth/src/backbase-foundation-ang-auth.ts"],"sourcesContent":["import { forwardRef, Inject, Injectable, Optional } from '@angular/core';\nimport {\n  LOGOUT,\n  LogoutService,\n  REAUTHENTICATE,\n  ReauthenticateService,\n  SESSION,\n  SessionService,\n  ɵAUTH_EVENTS,\n  ɵAuthEvents,\n} from '@backbase/foundation-ang/web-sdk';\nimport { BehaviorSubject, Observable, merge } from 'rxjs';\nimport { distinctUntilChanged, filter, map, mapTo, pluck, switchMap } from 'rxjs/operators';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface AccessToken {\n  raw: string;\n  parsed: any;\n}\n\n/**\n * @internal\n */\nexport interface AuthSuccessPayload {\n  currentAccessToken: AccessToken;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface LoginOptions {\n  /**\n   * Url for redirecting to after login is done with the authorisation result.\n   */\n  redirectUri?: string;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface LogoutOptions {\n  /**\n   * Url for redirecting to after logout is done.\n   */\n  redirectUri?: string;\n}\n\nexport interface ReauthenticateOptions {\n  /*\n   * The scope to use for the reauthentication request.\n   *\n   * For example, the scope can be returned by the server when challenging a request for a resource, such\n   * as requiring multifactor authentication.\n   */\n  scope: string;\n  /**\n   * The acr (Authentication Context Class Reference) claim and associated acr_values request parameter\n   * are defined by the OpenID Connect Core 1.0 specification.\n   *\n   * The value provided here is used as the `acr_values` in the reauthentication request.\n   *\n   * For example, the acrValues may be returned by the server when challenging a request for a resource, such\n   * as requiring multifactor authentication.\n   */\n  acrValues: string;\n  /**\n   * Whether to redirect the user or perform a request.\n   */\n  redirect?: boolean;\n  /**\n   * Url to return to following reauthentication redirect.\n   */\n  redirectUri?: string;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface CountdownOptions {\n  /**\n   * Configures when the countdown will start.\n   *\n   * The countdown will `start` once the TTL equals (or is less than) the `duration`.\n   */\n  duration?: number;\n  /**\n   * Called once the countdown begins (when `TTL < duration`).\n   */\n  start: () => void;\n  /**\n   * Called once the session is reset (and `TTL > duration`)\n   */\n  reset: () => void;\n  /**\n   * Called once the session expires (TTL = 0)\n   */\n  end: () => void;\n  /**\n   * Called every second between `start` and `end`.\n   *\n   * The `remaining` param is the number of seconds remaining until TTL = 0.\n   */\n  tick?: (remaining: number) => void;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable({\n  providedIn: 'root',\n  // eslint-disable-next-line  no-use-before-define, @typescript-eslint/no-use-before-define\n  useClass: forwardRef(() => AuthServiceImpl), // Default implementation (allows mocking / replacing)\n})\nexport abstract class AuthService {\n  abstract readonly accessToken: Observable<AccessToken | undefined>;\n  abstract readonly isAuthenticated: Observable<boolean>;\n  abstract login(loginOptions?: LoginOptions): void;\n  abstract logout(logoutOptions?: LogoutOptions): Promise<void>;\n  abstract reauthenticate(reauthenticateOptions: ReauthenticateOptions): Promise<void>;\n  abstract registerSessionCountdown(countdown: CountdownOptions): void;\n  abstract timeToLive(): number;\n  abstract refresh(): Promise<void>;\n  abstract isImpersonated(): boolean;\n}\n\nexport class AuthServiceImpl implements AuthService {\n  private readonly logoutService: LogoutService;\n  private readonly reauthenticateService: ReauthenticateService;\n  private readonly sessionService: SessionService;\n  private readonly authEvents: ɵAuthEvents;\n\n  private readonly accessTokenSubject = new BehaviorSubject<AccessToken | undefined>(undefined);\n  private readonly isLoadingSubject = new BehaviorSubject<boolean>(true);\n\n  /**\n   * The current access token for the session, or `undefined` if there is no session.\n   *\n   * The first token will be emitted after the session is initialised. So if the user is logged\n   * in already then the first emission will be an access token.\n   *\n   * This is a hot observable, so subscribing to it won't trigger anything.\n   *\n   * The latest value will be replayed to late subscribers.\n   */\n  public readonly accessToken: Observable<AccessToken | undefined> = this.isLoadingSubject.pipe(\n    filter(loading => !loading),\n    distinctUntilChanged(),\n    switchMap(() => this.accessTokenSubject),\n  );\n\n  /**\n   * Track whether the current user is authenticated.\n   *\n   * This is a hot observable, so subscribing to it won't trigger anything.\n   *\n   * The latest value will be replayed to late subscribers.\n   */\n  public readonly isAuthenticated: Observable<boolean> = this.accessToken.pipe(map(token => !!token));\n\n  constructor(\n    @Optional() @Inject(LOGOUT) logoutService?: LogoutService,\n    @Optional() @Inject(REAUTHENTICATE) reauthenticateService?: ReauthenticateService,\n    @Optional() @Inject(SESSION) sessionService?: SessionService,\n    @Optional() @Inject(ɵAUTH_EVENTS) authEvents?: ɵAuthEvents,\n  ) {\n    if (!logoutService || !reauthenticateService || !sessionService || !authEvents) {\n      throw new Error(\n        'In order to use the @backbase/foundation-ang/auth, please include *either* the ' +\n          'WebSdkModule.forRoot(...) in your AppModule (for CDN deployment) or WebSdkApiModule ' +\n          '(for CX deployment)',\n      );\n    }\n\n    this.logoutService = logoutService;\n    this.reauthenticateService = reauthenticateService;\n    this.sessionService = sessionService;\n    this.authEvents = authEvents;\n\n    this.handleAuthEvents();\n  }\n\n  /**\n   * Redirect the user to the login page.\n   *\n   * @param loginOptions\n   */\n  login(loginOptions?: LoginOptions) {\n    this.logoutService.goToLoginPage(loginOptions?.redirectUri);\n  }\n\n  /**\n   * Log out the current user.\n   *\n   * @param logoutOptions\n   */\n  logout(logoutOptions?: LogoutOptions): Promise<void> {\n    return this.logoutService.logout(logoutOptions?.redirectUri);\n  }\n\n  /**\n   * Register a set of callbacks that will be called as the user's session gets close to expiring.\n   *\n   * @param countdown\n   */\n  registerSessionCountdown(countdown: CountdownOptions) {\n    this.sessionService.registerCountdown(countdown);\n  }\n\n  /**\n   * Return the time to live (TTL) in seconds of the user's session.\n   *\n   * Returns -1 if the TTL can't be determined.\n   */\n  timeToLive(): number {\n    return this.sessionService.timeToLive();\n  }\n\n  /**\n   * Returns whether the user is being impersonated.\n   * @returns true if the user is being impersonated.\n   */\n  isImpersonated(): boolean {\n    return this.sessionService.isImpersonated;\n  }\n\n  /**\n   * Reauthenticate the current user.\n   *\n   * This can be used when the backend responds with a 401 and the current user needs to\n   * reauthenticate.\n   *\n   * @usageNotes\n   *\n   * You can use this service to create an interceptor which will automatically redirect the\n   * user when the backend responds with a 401. Useful when the backend responds with a challenge\n   * (eg: for step-up multifactor authentication):\n   *\n   * ```\n   * import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\n   * import { from, Observable } from 'rxjs';\n   * import { catchError, first, mapTo } from 'rxjs/operators';\n   * import { AuthService } from '@backbase/foundation-ang/auth';\n   *\n   * export class ReauthenticateInterceptor implements HttpInterceptor {\n   *   constructor(private readonly authService: AuthService) {}\n   *   intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n   *     return next.handle(request).pipe(\n   *       // When any HTTP request fails (you could check status & headers here to only catch some failures).\n   *       catchError(error => {\n   *         // Retreive the challenge from the server's response.\n   *         const challenge: { scope: string; acrValues: string } = (error.error.challenges || []).find(\n   *           c => c.scope !== undefined,\n   *         );\n   *         // Reauthenticate the user with the requested scope & acr values and redirect back to here.\n   *         return from(\n   *           this.authService.reauthenticate({\n   *             scope: challenge.scope,\n   *             acrValues: challenge.acrValues,\n   *             redirect: true,\n   *             redirectUri: location.href,\n   *           }),\n   *           // Retry the orignal request\n   *         ).pipe(first(), mapTo(new HttpResponse({ body: error.error.data })));\n   *       }),\n   *     );\n   *   }\n   * }\n   * ```\n   *\n   * @param reauthenticateOptions\n   */\n  reauthenticate(reauthenticateOptions: ReauthenticateOptions): Promise<void> {\n    return this.reauthenticateService.reauthenticate(\n      reauthenticateOptions.scope,\n      reauthenticateOptions.acrValues,\n      reauthenticateOptions,\n    );\n  }\n\n  /**\n   * Refreshes the session.\n   */\n  refresh(): Promise<void> {\n    return this.sessionService.refresh();\n  }\n\n  private handleAuthEvents() {\n    merge(\n      this.authEvents.success.pipe(pluck('currentAccessToken')),\n      this.authEvents.init.pipe(pluck('currentAccessToken')),\n      this.authEvents.end.pipe(mapTo(undefined)),\n      this.authEvents.error.pipe(mapTo(undefined)),\n    )\n      .pipe(distinctUntilChanged((t1, t2) => t1?.raw === t2?.raw))\n      .subscribe(token => {\n        this.accessTokenSubject.next(token);\n        this.isLoadingSubject.next(false);\n      });\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { CanActivate, CanActivateChild, CanLoad } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate, CanLoad, CanActivateChild {\n  constructor(private auth: AuthService, private location: Location, @Inject(DOCUMENT) private document: any) {}\n\n  canLoad(): Observable<boolean> {\n    return this.auth.isAuthenticated.pipe(take(1));\n  }\n\n  canActivate(): Observable<boolean> {\n    return this.redirectIfUnauthenticated();\n  }\n\n  canActivateChild(): Observable<boolean> {\n    return this.redirectIfUnauthenticated();\n  }\n\n  private redirectIfUnauthenticated(): Observable<boolean> {\n    return this.auth.isAuthenticated.pipe(\n      tap(loggedIn => {\n        if (!loggedIn) {\n          // Use an actual location path with hash instead of `RouterStateSnapshot.url`\n          // because `Keycloak` uses `history.replaceState` on initialization to remove\n          // auth data from the path.\n          const actualPath = this.location.path(true);\n\n          this.auth.login({\n            redirectUri: this.document.location.origin + this.location.prepareExternalUrl(actualPath),\n          });\n        }\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { switchMap, take } from 'rxjs/operators';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.authService.accessToken.pipe(\n      take(1),\n      switchMap(token => {\n        if (!token) {\n          return next.handle(req);\n        }\n        const newReq = req.clone({\n          headers: req.headers.append('Authorization', `Bearer ${token.raw}`),\n        });\n        return next.handle(newReq);\n      }),\n    );\n  }\n}\n","import { Observable, from } from 'rxjs';\nimport { HttpClient, HttpEvent, HttpRequest } from '@angular/common/http';\nimport { AuthService } from './deprecated/auth.service';\nimport { tap, switchMap } from 'rxjs/operators';\n\nexport interface AutoRefreshService {\n  failed: boolean;\n  refreshAndRepeat: (req: HttpRequest<unknown>) => Observable<HttpEvent<any>>;\n}\n\nexport function createAutoRefresh(authService: AuthService, httpClient: HttpClient) {\n  let refresh$: Observable<void> | undefined;\n  let refreshFailed = false;\n\n  function refreshAndRepeat(req: HttpRequest<unknown>): Observable<HttpEvent<any>> {\n    if (!refresh$) {\n      refresh$ = from(authService.refresh()).pipe(\n        tap(\n          // after successful refresh remove reference as access token can expire again in the future\n          () => (refresh$ = undefined),\n          // flag refresh failure so we will not try auto refresh again\n          () => (refreshFailed = true),\n        ),\n      );\n    }\n    return refresh$.pipe(\n      switchMap(() => {\n        // repeat request (presume that access token is updated after refresh)\n        return httpClient.request(req.clone());\n      }),\n    );\n  }\n\n  return {\n    failed: refreshFailed,\n    refreshAndRepeat,\n  };\n}\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\n\nexport interface Scheme {\n  [key: string]: string;\n}\nexport const UNKNOWN_SCHEME = 'unknown';\n\n/**\n * See https://datatracker.ietf.org/doc/html/rfc6750#section-3\n * See https://www.rfc-editor.org/rfc/rfc7235.html#section-4.1\n * See https://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html\n * See https://datatracker.ietf.org/doc/html/rfc2617#section-3.2.1\n */\nexport function getWwwAuthenticate(headers: HttpHeaders): { [schemeName: string]: Scheme } {\n  let currentScheme = UNKNOWN_SCHEME;\n  const schemes = { [currentScheme]: {} };\n  const headerName = headers.keys().find(key => key.toLowerCase() === 'www-authenticate');\n  if (!headerName) {\n    return schemes;\n  }\n  const value = (headers.get(headerName) as string).toLowerCase().trim();\n  if (!value) {\n    return schemes;\n  }\n  const matches = value.match(/(?:[^\\s,\"]+|\"[^\"]*\")+/g);\n  if (!matches) {\n    schemes[currentScheme] = value;\n    return schemes;\n  }\n  return matches.reduce((acc: { [schemeName: string]: Scheme }, match: string) => {\n    const nameVal = match.split('=').map(v => v.trim());\n    if (nameVal.length === 1) {\n      currentScheme = nameVal[0];\n      acc[currentScheme] = {};\n    } else if (nameVal.length === 2) {\n      acc[currentScheme][nameVal[0]] = nameVal[1].replace(/\"/g, '');\n    }\n    return acc;\n  }, schemes);\n}\n\n/**\n * The 401 (Unauthorized) status code indicates that the request has not\n * been applied because it lacks valid authentication credentials for\n * the target resource.  The server generating a 401 response MUST send\n * a WWW-Authenticate header field (Section 4.1) containing at least one\n * challenge applicable to the target resource.\n */\nexport function is401AndNotReauth(error: HttpErrorResponse) {\n  if (error.status !== 401) {\n    return false;\n  }\n  const bearer = getWwwAuthenticate(error.headers).bearer;\n  if (!bearer) {\n    return false;\n  }\n  if (bearer.challenge_types && bearer.challenge_types !== 'reauth') {\n    return false;\n  }\n  return bearer.error === 'invalid_token';\n}\n","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpClient,\n  HttpErrorResponse,\n} from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from './deprecated/auth.service';\n\nimport { createAutoRefresh } from './auto-refresh';\nimport { is401AndNotReauth } from './auth-utils';\nimport { DOCUMENT } from '@angular/common';\n\n// invalid token interceptor configuration\nexport interface InvalidTokenConfig {\n  // if true, responses with 401 status will be repeated after session refresh\n  enableAutoRefresh?: boolean;\n  // redirect\n  redirectToLoginPage?: boolean;\n}\n\nexport const INVALID_TOKEN_CONFIG = new InjectionToken<InvalidTokenConfig>('invalid-token-config');\n\n@Injectable()\nexport class InvalidTokenInterceptor implements HttpInterceptor {\n  private config: Required<InvalidTokenConfig> = {\n    enableAutoRefresh: false,\n    redirectToLoginPage: true,\n  };\n  private autoRefresh = createAutoRefresh(this.authService, this.httpClient);\n\n  constructor(\n    private authService: AuthService,\n    private httpClient: HttpClient,\n    @Optional() @Inject(INVALID_TOKEN_CONFIG) private injectedConfig: InvalidTokenConfig,\n    @Inject(DOCUMENT) private document: any,\n  ) {\n    this.config = {\n      ...this.config,\n      ...(this.injectedConfig || {}),\n    };\n  }\n\n  private checkRedirect() {\n    if (this.config.redirectToLoginPage) {\n      this.authService.logout({ redirectUri: this.document.location.href });\n    }\n  }\n\n  private tryRefresh(req: HttpRequest<unknown>, err: HttpErrorResponse) {\n    return this.autoRefresh.refreshAndRepeat(req).pipe(\n      catchError(() => {\n        this.checkRedirect();\n        return throwError(err);\n      }),\n    );\n  }\n\n  intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError((err: HttpErrorResponse) => {\n        if (is401AndNotReauth(err)) {\n          if (this.config.enableAutoRefresh && !this.autoRefresh.failed) {\n            return this.tryRefresh(req, err);\n          }\n          this.checkRedirect();\n        }\n        return throwError(err);\n      }),\n    );\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AuthServiceImpl as ɵa} from './deprecated/auth.service';"],"names":["Injectable","forwardRef","BehaviorSubject","filter","distinctUntilChanged","switchMap","map","merge","pluck","mapTo","Optional","Inject","LOGOUT","REAUTHENTICATE","SESSION","ɵAUTH_EVENTS","take","tap","Location","DOCUMENT","from","InjectionToken","catchError","throwError","HttpClient"],"mappings":"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"}