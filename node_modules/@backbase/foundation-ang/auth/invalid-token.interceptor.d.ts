import { InjectionToken } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from './deprecated/auth.service';
import * as ɵngcc0 from '@angular/core';
export interface InvalidTokenConfig {
    enableAutoRefresh?: boolean;
    redirectToLoginPage?: boolean;
}
export declare const INVALID_TOKEN_CONFIG: InjectionToken<InvalidTokenConfig>;
export declare class InvalidTokenInterceptor implements HttpInterceptor {
    private authService;
    private httpClient;
    private injectedConfig;
    private document;
    private config;
    private autoRefresh;
    constructor(authService: AuthService, httpClient: HttpClient, injectedConfig: InvalidTokenConfig, document: any);
    private checkRedirect;
    private tryRefresh;
    intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<InvalidTokenInterceptor, [null, null, { optional: true; }, null]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<InvalidTokenInterceptor>;
}

//# sourceMappingURL=invalid-token.interceptor.d.ts.map