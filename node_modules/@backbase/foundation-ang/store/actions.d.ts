import { ActionCreator } from '@ngrx/store';
import { Observable } from 'rxjs';
/**
 * @deprecated Will be removed in v7.0.0
 * A `Channel` provides a way to limit the scope of `Action`s. `Effect`s and `Reducer`s will only
 * respond to `Action`s that match their `Channel`.
 */
export declare type Channel = string;
/**
 * @deprecated Will be removed in v7.0.0
 * An `Action` describes some request or event that a store may wish to respond to, either by
 * updating its internal state or triggering external effects and dispatching follow-up `Action`s
 */
export interface Action {
    /**
     * An identifier to uniquely identify the `Action` in the context of a `Store`.
     */
    type: string;
}
/**
 * @deprecated Will be removed in v7.0.0
 * A stream of `Action`s that a `Reducer` or `Effect` may respond to.
 */
export declare type Actions<V extends Action = Action> = Observable<V>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface ChannelAction<V extends Action = Action> extends Action {
    type: string;
    channel: Channel | undefined;
    action: V;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const createChannelAction: <V extends Action>(action: V, channel?: string | undefined) => ChannelAction<V>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const toChannelAction: <V extends Action>(action: V | ChannelAction<V>) => ChannelAction<V>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const isActionForChannel: <V extends Action>(action: V, channels: Array<Channel>) => boolean;
/**
 * @deprecated Will be removed in v7.0.0
 * Stream operator to filter the `Actions` stream to only pass `Action`s that match the given `type`.
 */
export declare const ofType: <R extends V, V extends Action = Action>(type: string | ActionCreator<string, FunctionWithParametersType<any[], R>>) => (actions: Actions<V>) => Actions<R>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export { createAction, ActionCreator, props } from '@ngrx/store';
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type Creator<P extends Array<any> = Array<any>, R extends object = object> = R extends {
    type: any;
} ? TypePropertyIsNotAllowed : FunctionWithParametersType<P, R>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const typePropertyIsNotAllowedMsg = "type property is not allowed in action creators";
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type TypePropertyIsNotAllowed = typeof typePropertyIsNotAllowedMsg;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type FunctionWithParametersType<P extends Array<unknown>, R = void> = (...args: P) => R;
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface TypedAction<T extends string> extends Action {
    readonly type: T;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type DisallowTypeProperty<T> = T extends {
    type: any;
} ? TypePropertyIsNotAllowed : T;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type PropsReturnType<T extends object> = T extends {
    type: any;
} ? TypePropertyIsNotAllowed : {
    _as: 'props';
    _p: T;
};
