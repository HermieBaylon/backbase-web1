import { Action, ChannelAction, Channel } from './actions';
import { Observable } from 'rxjs';
import { Type, InjectionToken } from '@angular/core';
import { Store } from './store-broker.service';
export declare const METADATA_KEY = "@backbase/store effect metadata";
/**
 * @deprecated Will be removed in v7.0.0
 * An instance of a class containing one or more `Effect` methods.
 */
export declare type Effects<V extends Action> = any;
/**
 * @deprecated Will be removed in v7.0.0
 * An injection token used to get an `Effect`s instance.
 */
export declare type EffectsInjectionToken<V extends Action> = Type<Effects<V>> | InjectionToken<Effects<V>>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface NgrxEffectsInstance<V extends Action> {
    [property: string]: Observable<V>;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface EffectMetadata<T> {
    propertyName: string;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Method decorator to mark a method as an effect. Effects can be registered with a `Store` to perform external
 * effects such as fetching data or navigating the browser.
 *
 * The decorated method must be `(actions: Observable<Action>, store?: Store) => Observable<Action>`.
 */
export declare const Effect: <T extends object>() => MethodDecorator;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const createMetaChannelEffects: <V extends Action>(store: Store<unknown, V>, actions: Observable<Action>, effects: Effects<Action>, dispatchChannel: Channel, listenChannels: Array<Channel>) => NgrxEffectsInstance<ChannelAction<Action>>;
