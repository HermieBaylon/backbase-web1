{"version":3,"file":"backbase-foundation-ang-testing.js","sources":["../../../../projects/backbase/foundation-ang/testing/src/content-mock.ts","../../../../projects/backbase/foundation-ang/testing/src/backbase-foundation-ang-testing.ts"],"sourcesContent":["import {\n  ContentType,\n  StructuredContentType,\n  ContentUpdateUnsubscribe,\n  PortalContent,\n  ContentTypes,\n  ContentItem,\n  ImageItem,\n  DocumentItem,\n  StructuredContentItem,\n  ImageContentItem,\n} from '@backbase/lib-bb-page-bootstrap-cdn';\n\ninterface ContentMock {\n  [contentRef: string]: any;\n}\n\ninterface ContentItemMock {\n  [contentRef: string]: ContentItem<any>;\n}\n\n/**\n * PortalContentMock class which functions as a mock content store\n *\n * @usageNotes\n * ```typescript\n * // Store content in mock content store and get contentRef back\n * const contentRef = PortalContentMock.addImageContent({ url: '/image.png' });\n *\n * // use PortalContentMock to get content from the mock content store\n * const portalContent = new PortalContentMock();\n * portalContent.getContent(contentRef);\n * ```\n */\nexport class PortalContentMock implements PortalContent {\n  private static id = 0;\n\n  private static readonly contentMockMap: ContentMock = {};\n\n  private static readonly contentItemMockMap: ContentItemMock = {};\n\n  /**\n   * Add image item to mock content store\n   * @param content image item\n   * @return content ref\n   */\n  public static addImageContent(content: Partial<ImageItem>, contentRef?: string) {\n    return PortalContentMock.addContentItem(ContentTypes.IMAGE, content, undefined, contentRef);\n  }\n\n  /**\n   * Add document item to mock content store\n   * @param content document item\n   * @return content ref\n   */\n  public static addDocumentContent(content: Partial<DocumentItem>, contentRef?: string) {\n    return PortalContentMock.addContentItem(ContentTypes.DOCUMENT, content, undefined, contentRef);\n  }\n\n  /**\n   * Add structured content item to mock content store\n   * @param typeDefinitionName type definition name of the strucutred content item\n   * @param content structured content (JSON)\n   * @return content ref\n   */\n  public static addStructuredContent<T = { [key: string]: any }>(\n    typeDefinitionName: string,\n    content: T,\n    contentRef?: string,\n  ) {\n    return PortalContentMock.addContentItem(ContentTypes.STRUCTURED_CONTENT, content, typeDefinitionName, contentRef);\n  }\n\n  /**\n   * Add plain text content item to mock content store\n   * @param content plain text\n   * @return content ref\n   */\n  public static addPlainTextContent(content: string, contentRef?: string) {\n    return PortalContentMock.addStructuredContent(StructuredContentType.PLAIN_TEXT, { content }, contentRef);\n  }\n\n  /**\n   * Add rich text content item to mock content store\n   * @param content rich text (HTML)\n   * @return content ref\n   */\n  public static addRichTextContent(content: string, contentRef?: string) {\n    return PortalContentMock.addStructuredContent(StructuredContentType.RICH_TEXT, { content }, contentRef);\n  }\n\n  private static addContentItem(\n    type: ContentTypes,\n    content: any,\n    typeDefinitionName?: string,\n    contentRef = PortalContentMock.getContentRef(),\n  ) {\n    const contentItem: ContentItem<any> = {\n      type,\n      content,\n      properties: {},\n    };\n\n    if (typeDefinitionName) {\n      contentItem.typeDefinitionName = typeDefinitionName;\n    }\n\n    PortalContentMock.contentMockMap[contentRef] = content;\n    PortalContentMock.contentItemMockMap[contentRef] = contentItem;\n\n    return contentRef;\n  }\n\n  private static getContentRef() {\n    PortalContentMock.id += 1;\n\n    return `cs:mockRepository:${PortalContentMock.id}`;\n  }\n\n  public get(contentRef: string): Promise<ImageContentItem | StructuredContentItem> {\n    const contentItem = PortalContentMock.contentItemMockMap[contentRef];\n\n    if (!contentItem) {\n      // Return empty text so deprecated content widget logic doesn't break\n      return Promise.resolve({\n        id: contentRef,\n        type: ContentType.STRUCTURED_CONTENT,\n        content: '',\n      });\n    }\n\n    if (contentItem.type === ContentTypes.IMAGE) {\n      const content: ImageItem = contentItem.content;\n\n      const imageContentItem: ImageContentItem = {\n        id: contentRef,\n        type: ContentType.IMAGE,\n        contentRef: content.url,\n      };\n\n      return Promise.resolve(imageContentItem);\n    }\n\n    if (contentItem.type === ContentTypes.STRUCTURED_CONTENT) {\n      const content: { content: string } = contentItem.content;\n\n      const structuredContentItem: StructuredContentItem = {\n        id: contentRef,\n        type: ContentType.STRUCTURED_CONTENT,\n        content: content.content,\n      };\n\n      return Promise.resolve(structuredContentItem);\n    }\n\n    return Promise.reject(`Couldn't map a content item of type ${contentItem.type}`);\n  }\n\n  public getContent<T>(contentRef: string): Promise<T> {\n    return Promise.resolve(PortalContentMock.contentMockMap[contentRef]);\n  }\n\n  public getContentItem<T extends ContentItem<any>>(contentRef: string): Promise<T> {\n    return Promise.resolve(PortalContentMock.contentItemMockMap[contentRef] as T);\n  }\n\n  public subscribeContentUpdate(): ContentUpdateUnsubscribe {\n    return () => {};\n  }\n\n  public subscribeContentItemUpdate(): ContentUpdateUnsubscribe {\n    return () => {};\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}