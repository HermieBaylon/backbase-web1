{"version":3,"file":"backbase-foundation-ang-store.js","sources":["../../../../projects/backbase/foundation-ang/store/src/actions.ts","../../../../projects/backbase/foundation-ang/store/src/reducers.ts","../../../../projects/backbase/foundation-ang/store/src/effects.ts","../../../../projects/backbase/foundation-ang/store/src/store-broker.service.ts","../../../../projects/backbase/foundation-ang/store/src/store-factory.service.ts","../../../../projects/backbase/foundation-ang/store/src/store.module.ts","../../../../projects/backbase/foundation-ang/store/src/backbase-foundation-ang-store.ts"],"names":["createMetaChannelReducer","NgrxStore","NgrxActions","NgrxReducerManager","NgrxEffectsSources","NgrxEffectsModule","NgrxStoreModule"],"mappings":";;;;;;;;;;;;;;;;AAqCA;AACA;AACG;AACI,MAAM,mBAAmB,GAAG,CAAmB,MAAS,EAAE,OAAiB,MAAwB;AAC1G,IAAE,IAAI,EAAE,MAAM,CAAC,IAAI;AACnB,IAAE,OAAO;AACT,IAAE,MAAM;AACP,CAAA,CAAC,CAAC;AAEH,MAAM,eAAe,GAAG,CAAmB,MAA4B,KACrE,SAAS,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM,CAAC;AAC5C;AACA;AACA;AACG;AACI,MAAM,eAAe,GAAG,CAAmB,MAA4B,KAC5E,eAAe,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAEjE;AACA;AACG;AACI,MAAM,kBAAkB,GAAG,CAAmB,MAAS,EAAE,QAAwB,KAAa;AAAE,IACrG,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACvG,CAAC,CAAC;AAEF;AACA;AACA;AACG;AACI,MAAM,MAAM,GAAG,CACpB,IAA+E,KAE/E,OAAO,IAAI,KAAK,QAAQ;AAC1B,MAAM,CAAC,OAAmB,KAAiB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAS,KAAkB,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;AACjH,MAAM,CAAC,OAAmB,KAClB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAS,KAAkB,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE;AAapF;AACA;AACG;AACI,MAAM,2BAA2B,GAAG;AAC3C;ACtFA;AACA;AACG;AACI,MAAM,yBAAyB,GAAG,uCAAuC,CAAC;AACjF;AACA;AACG;AACA,MAAU,eAAe,CAAA;AAA5B,IAAA,WAAA,GAAA;AAAE,QACS,IAAI,CAAA,IAAA,GAAG,yBAAyB,CAAC;AAC5C,KAAC;AAAA,CAAA;AAWD;AACA;AACG;AACI,MAAM,kBAAkB,GAAG,CAChC,QAAuB,KACuC;AAAE;AAEjE,IAAC,OAAO,CAAC,OAAsB,KAAkC;AAAE;AAEhE,QAAA,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,SAAS,EAAE,IAAI,eAAe,EAAO,CAAC,CAAC;AACjF;AACI,QAAA,OAAO,CAAC,KAAW,GAAA,eAAe,EAAE,EAAE,MAA4B,KAAO;AACvE,YAAA,MAAM,aAAa,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;AAC9C,YAAA,IAAI,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;AAChD,gBAAQ,OAAO,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;AAC7C,aAAA;AACD,YAAA,OAAO,KAAK,CAAC;AACf,SAAC,CAAC;AACJ,KAAC,CAAC;AACJ,CAAC;AACD;ACnCO,MAAM,YAAY,GAAG,iCAAiC,CAAC;AA+B9D,MAAM,uBAAuB,GAAG,CAAmB,WAAc,EAAE,OAAiC,KAAI;AACtG,IAAA,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;AAC5C,IAAA,MAAM,IAAI,GAA6B,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC;AAC7E,UAAG,WAAmB,CAAC,YAAY,CAAC;AACpC,UAAG,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAS,CAAC,YAAY,CAAC,CAAC;AAC7F,IAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC5C,CAAC,CAAC;AACF;AACA,MAAM,kBAAkB,GAAG,CAAmB,WAAc,KAC1D,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,GAAI,WAAW,CAAC,WAAmB,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACG;AACI,MAAM,MAAM,GAAG,MAAwC;AAAE,IAC9D,OAAO,UAAU,MAAS,EAAE,UAAkB,EAAA;AAC5C,QAAA,MAAM,QAAQ,GAAG;AACf,YAAA,YAAY,EAAE,UAAU;AAC9B,SAAK,CAAC;AACF,QAAA,uBAAuB,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC9C,KAAwD,CAAC;AAC3D,EAAE;AAEF,MAAM,uBAAuB,GAAG,CAAC,QAAa,KAAc,kBAAkB,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;AACpG;AACA,MAAM,aAAa,GAAG,CAAmB,OAAe,KAAK,CAAC,MAAqB,KACjF,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAS,KAAK,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACxE;AACA,MAAM,SAAS,GAAG,CAAmB,QAAuB,KAAK,CAAC,MAA0B,KAC1F,MAAM,CAAC,IAAI,CACT,GAAG,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,EACtC,MAAM,CAA0C,CAAC,MAAM,KACrD,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CACrC,EACD,GAAG,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,CAAC,CAC3C,CAAC;AACJ;AAAA;AACA;AACG;AACI,MAAM,wBAAwB,GAAG,CACtC,KAAwB,EACxB,OAA2B,EAC3B,OAAwB,EACxB,eAAwB,EACxB,cAA8B,KACgB;AAC9C,IAAA,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE;AACrC,QAAA,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;AAChD,KAAA;AACD,IAAA,MAAM,KAAK,GAAG,YAAa,GAAC,CAAC;AAC7B,IAAA,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,CAAS,MAAA,EAAA,eAAe,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;AAC/F,IAAE,MAAM,cAAc,GAA+C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAExF,IAAA,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,MAAM,CACvC,CAAC,QAAoD,EAAE,MAA2B,KAAI;AACpF,QAAA,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC,MAC3C,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,CAC/E,aAAa,CAAC,eAAe,CAAC,CAC/B,CACF,CAAC;AACF,QAAA,OAAO,QAAQ,CAAC;AACtB,KAAK,EACD,cAAc,CACf,CAAC;AACJ,CAAC;AACD;ACnGA;AACA;AACG;AACI,MAAM,yBAAyB,GAAG,uCAAuC,CAAC;AACjF;AACA;AACA;AACA;AACG;AACA,MAAU,qBAAqB,CAAA;AAAlC,IAAA,WAAA,GAAA;AAAE,QACS,IAAI,CAAA,IAAA,GAAG,yBAAyB,CAAC;AAC5C,KAAC;AAAA,CAAA;AAED;AACA;AACA;AACA;AACA;AACG;AACI,MAAM,WAAW,GAAG,MAAM,CAAC,MAA0B,KAC1D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,KAAsC,MAAM,CAAC,IAAI,KAAK,yBAAyB,CAAC,EAAE;AA2C9G;AACA;AACG;AACA,MACU,WAAW,CAAA;AAAE,IAGxB,WACsC,CAAA,UAA8B,EAC5B,OAA2B,EACpB,cAA8B,EAC9B,cAAkC,EAC9D,QAAkB,EAAA;AACvC,QALwC,IAAU,CAAA,UAAA,GAAV,UAAU,CAAoB;AAAC,QAC7B,IAAO,CAAA,OAAA,GAAP,OAAO,CAAoB;AAAC,QACrB,IAAc,CAAA,cAAA,GAAd,cAAc,CAAgB;AAAC,QAC/B,IAAc,CAAA,cAAA,GAAd,cAAc,CAAoB;AAAC,QAC/D,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;AAPpB,QAAA,IAAA,CAAA,iBAAiB,GAAG,IAAI,GAAG,EAAgC,CAAC;AAC/E,KAOM;AAEJ,IAAA,SAAS,CACP,SAAoB,EACpB,OAAsB,EACtB,OAAwC,EACxC,UAAsB,EACtB,eAAwB,EACxB,aAAgC,GAAA,EAAE,EAClC,cAAyB,EAAA;AAC7B,QACI,IAAI,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE;AACxD,YAAM,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;AACjE,SAAA;AAED,QAAA,MAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,eAAe,CAAC,EAAE,GAAG,aAAa,CAAC,CAAC;AACjG,QACI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;AAElE,QAAA,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAEhD,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAO,SAAS,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;AACjF,QAAI,OAAO;AACJ,aAAA,GAAG,CAAC,KAAK,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAa,KAAK,CAAC,CAAC;AACtE,aAAA,OAAO,CAAC,CAAC,cAA0B,KAAI;AACtC,YAAA,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,eAAe,CAAC,EAAE,gBAAgB,CAAC,CAAC;AAC5G,SAAC,CAAC,CAAC;AAEL,QAAA,KAAK,CAAC,QAAQ,CAAC,IAAI,qBAAqB,EAAO,CAAC,CAAC;AAEjD,QAAA,OAAO,KAAK,CAAC;AACjB,KAAG;AAEO,IAAA,WAAW,CACjB,SAAoB,EACpB,UAAsB,EACtB,eAAwB,EAAA;AAC5B,QACI,OAAO;AACL,YAAA,MAAM,EAAE,CAAI,QAAyB,KAAmB;AACtD,gBAAA,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAI,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;AACxH,aAAO;AACD,YAAA,QAAQ,EAAE,CAAC,MAAS,KAAI;AAAE,gBACxB,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;AAClE,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AAED;AACE;AACC;AACK,IAAA,gBAAgB,CAAC,SAAoB,EAAE,eAAwB,EAAE,MAAc,EAAA;AACrF,QAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,eAAe,CAAC,EAAE,MAAM,CAAC,CAAC;AACpF,KAAG;AACH,IACU,iBAAiB,CAAC,OAAgB,EAAE,MAAc,EAAA;AACxD,QAAA,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;AACnE,KAAG;AACH,IACU,kBAAkB,CAAC,UAAsB,EAAE,SAAoB,EAAA;AAAE,QACvE,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAC9D,QAAA,OAAO,CAAC,EAAE,cAAc,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;AACjF,KAAG;AACH,IACU,mBAAmB,CAAC,UAAsB,EAAE,SAAoB,EAAA;AAAE,QACxE,IAAI,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAChE,QAAI,IAAI,cAAc,KAAK,SAAS,EAAE;AACtC,YAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,YAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;AACxD,SAAA;AACD,QAAA,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACnC,KAAG;AAEO,IAAA,UAAU,CAChB,SAAoB,EACpB,UAAsB,EACtB,OAAsB,EACtB,aAA6B,EAAA;AAE7B,QAAA,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;AACnC,YAAM,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,UAAU,CAAC;AAC9C,YAAA,QAAQ,EAAEA,kBAAwB,CAAO,aAAa,CAAC,CAAC,OAAO,CAAC;AACtE,YAAM,cAAc,EAAE,MAAK;AACnB,gBAAA,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;AAC9C,aAAO;AACP,YAAM,YAAY,EAAE,EAAE;AACjB,SAAA,CAAC,CAAC;AACP,KAAG;AAEO,IAAA,UAAU,CAChB,KAAoB,EACpB,OAAmB,EACnB,eAAwB,EACxB,cAA8B,EAAA;AAClC,QACI,IAAI,CAAC,cAAc,CAAC,UAAU,CAC5B,wBAAwB,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,cAAc,CAAC,CACxF,CAAC;AACN,KAAG;AACH,IACU,aAAa,CAAC,SAAoB,EAAE,UAAsB,EAAA;AAChE,QAAA,OAAO,CAAG,EAAA,SAAS,CAAI,CAAA,EAAA,UAAU,EAAE,CAAC;AACxC,KAAG;AACH,IACU,cAAc,CAAC,SAAoB,EAAE,eAAwB,EAAA;AACnE,QAAA,OAAO,CAAG,EAAA,SAAS,CAAI,CAAA,EAAA,eAAe,EAAE,CAAC;AAC7C,KAAG;AACH;2OAAC;AACD,oSArHC;2BADA,IAAA,EAAA,jCACC;AADD,EAAA,UAAU,EAAC,IAAA,EAAA,CAAA,EAAE,UAAU,EAAE,MAAM,EAAE,EAAA,EAAA,/CAK7B,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAM,SAACC,KAAS,EAAA,EAAA,CAAA,EAAA;AAAE,YA7Ed,UAAU,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EA8Ed,MAAM,EAAA,IAAA,EAAA,CAACC,OAAW,EAAA,EAAA,CAAA,EAAA;AAClB,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAM,SAACC,cAAkB,EAAA,EAAA,CAAA,EAAA;AACzB,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAM,SAACC,aAAkB,EAAA,EAAA,CAAA,EAAA;AAAE,YAnFX,QAAQ,EAAA;AAAC;;;;;;;;;;;;;;;;6DAAE;AAAC;ACMjC;AACA;AACG;AACU,MAAA,iCAAiC,GAAqB;AACjE,IAAA,IAAI,EAAE,mCAAmC;AACzC,IAAA,WAAW,EAAE,mGAAmG;AAClH,EAAE;AAEF;AACA;AACA;AACA;AACA;AACG;AACA,MAAU,YAAY,GAAG,IAAI,cAAc,CAAa,wBAAwB,EAAE;AAErF;AACA;AACA;AACA;AACA;AACG;AACA,MAAU,sBAAsB,GAAG,IAAI,cAAc,CAAU,kCAAkC,EAAE;AAItG;AACA;AACA;AACG;AACA,MAAU,YAAY,CAAA;AACvB,IAAA,WAAA,CACmB,WAAwB,EACF,MAAkB,EACR,eAAwB,EACjE,eAAgC,EAAA;AAC5C,QAJqB,IAAW,CAAA,WAAA,GAAX,WAAW,CAAa;AAAC,QACH,IAAM,CAAA,MAAA,GAAN,MAAM,CAAY;AAAC,QACT,IAAe,CAAA,eAAA,GAAf,eAAe,CAAS;AAAC,QAClE,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;AAAC,KACvC;AA4BJ,IAAA,WAAW,CACT,SAAoB,EACpB,OAAsB,EACtB,OAAwC,EACxC,QAAmB,EAAA;AACvB,QACI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,iCAAiC,CAAC,EAAE;AAClF,YAAA,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,WAAW,CAAC,CAAC;AAChE,SAAA;AACL,QACI,IAAI,CAAC,QAAQ,EAAE;AACb,YAAA,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,WAAW,CAAC,CAAC;AAC7D,SAAA;AACL,QACI,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAC/B,SAAS,EACT,OAAO,EACP,OAAO,EACP,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,eAAe,EACpB,SAAS,EACT,QAAQ,CACT,CAAC;AACN,KAAG;AACH;AACA;AAAsC,YA7FtB,WAAW,EAAA;AAqCtB,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAM,SAAC,YAAY,EAAA,EAAA,CAAA,EAAA;AACnB,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAM,SAAC,sBAAsB,EAAA,EAAA,CAAA,EAAA;AAAE,YAnCT,eAAe,EAAA;AAAC;AAAG;ACE9C;AACA;AACG;AACI,MAAM,kBAAkB,GAAqB;AAClD,IAAA,IAAI,EAAE,oBAAoB;AAC1B,IAAA,WAAW,EAAE,6DAA6D;AAC5E,CAAC,CAAC;AAEF;AACA;AACG;AACA,MAQU,WAAW,CAAA;AACtB,IAAA,WAAA,CAAY,eAAgC,EAAA;AAC1C,QAAA,IAAI,eAAe,CAAC,SAAS,CAAC,kBAAkB,CAAC,EAAE;AACjD,YAAA,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;AAChF,SAAA;AACL,KAAG;AACH;2BAdC,IAAA,EAAA,IAAA,EAAA,QAAQ,EAAC,IAAA,EAAA,CAAA,EACR,gBAAA,OAAO,EAAE,EACP,oBAAAC,aAAiB,CAAC,OAAO,CAAC;CAAE,CAAC,EAC7B,oBAAAC,aAAe,CAAC,OAAO,CAAC,EAAE,CAAC,sBAC3B;UAAoB,CAAC,UAAU,CAAC,CAAC,kBAAkB,EAAE,iCAAiC,CAAC,CAAC,EACzF;AAAA,kBACD,SAAS,EAAE,CAAC;EAAW,CAAC,EACzB,aAAA,EAAA,EAAA;;cACA;AAAC;AACU,YAxBe,eAAe,EAAA;AAAC;;;;;;;;;;;;6MAAE;AA8B7C;AACA;AACG;AACA,MAGU,mBAAmB,CAAA;AAAE;mCAHjC,IAAA,EAAA,IAAA,EAAA,QAAQ,EAAC,IAAA,EAAA,CAAA,EACR,gBAAA,OAAO,EAAE,CAACD,aAAiB,EAAEC;OAAe,EAAE,oBAAoB,CAAC,UAAU,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,EACpH,aAAA,EAAA;AAAA;;;;;;;yNACA;AAAC;ACvCF;AACA;AACG;AAED;AAAC;AAG+L","sourcesContent":["import { ActionCreator } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * A `Channel` provides a way to limit the scope of `Action`s. `Effect`s and `Reducer`s will only\n * respond to `Action`s that match their `Channel`.\n */\nexport type Channel = string;\n\n/**\n * @deprecated Will be removed in v7.0.0\n * An `Action` describes some request or event that a store may wish to respond to, either by\n * updating its internal state or triggering external effects and dispatching follow-up `Action`s\n */\nexport interface Action {\n  /**\n   * An identifier to uniquely identify the `Action` in the context of a `Store`.\n   */\n  type: string;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * A stream of `Action`s that a `Reducer` or `Effect` may respond to.\n */\nexport type Actions<V extends Action = Action> = Observable<V>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface ChannelAction<V extends Action = Action> extends Action {\n  type: string;\n  channel: Channel | undefined;\n  action: V;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const createChannelAction = <V extends Action>(action: V, channel?: Channel): ChannelAction<V> => ({\n  type: action.type,\n  channel,\n  action,\n});\n\nconst isChannelAction = <V extends Action>(action: V | ChannelAction<V>): action is ChannelAction<V> =>\n  'channel' in action && 'action' in action;\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const toChannelAction = <V extends Action>(action: V | ChannelAction<V>): ChannelAction<V> =>\n  isChannelAction(action) ? action : createChannelAction(action);\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const isActionForChannel = <V extends Action>(action: V, channels: Array<Channel>): boolean => {\n  return !isChannelAction(action) || action.channel === undefined || channels.includes(action.channel);\n};\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Stream operator to filter the `Actions` stream to only pass `Action`s that match the given `type`.\n */\nexport const ofType = <R extends V, V extends Action = Action>(\n  type: string | ActionCreator<string, FunctionWithParametersType<Array<any>, R>>,\n) =>\n  typeof type === 'string'\n    ? (actions: Actions<V>): Actions<R> => actions.pipe(filter((action: V): action is R => action.type === type))\n    : (actions: Actions<V>): Actions<ReturnType<typeof type>> =>\n        actions.pipe(filter((action: V): action is R => action.type === type.type));\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport { createAction, ActionCreator, props } from '@ngrx/store';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type Creator<P extends Array<any> = Array<any>, R extends object = object> = R extends { type: any }\n  ? TypePropertyIsNotAllowed\n  : FunctionWithParametersType<P, R>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const typePropertyIsNotAllowedMsg = 'type property is not allowed in action creators';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type TypePropertyIsNotAllowed = typeof typePropertyIsNotAllowedMsg;\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type FunctionWithParametersType<P extends Array<unknown>, R = void> = (...args: P) => R;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface TypedAction<T extends string> extends Action {\n  readonly type: T;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type DisallowTypeProperty<T> = T extends { type: any } ? TypePropertyIsNotAllowed : T;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type PropsReturnType<T extends object> = T extends { type: any }\n  ? TypePropertyIsNotAllowed\n  : { _as: 'props'; _p: T };\n","import { ActionReducer } from '@ngrx/store';\n\nimport { Action, ActionCreator, isActionForChannel, ChannelAction, toChannelAction } from './actions';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const InitializeStateActionType = '[Backbase Reducer] INITIALIZE REDUCER';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport class InitializeState implements Action {\n  readonly type = InitializeStateActionType;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Generate a new state (`T`) based on a previous state in response to an action (`V`)\n */\nexport type Reducer<T, V> = (state: T | undefined, action: V) => T;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type MetaReducer<T, V extends Action = Action> = (reducer: Reducer<T, V>) => Reducer<T, V>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const metaChannelReducer = <T, V extends Action = Action>(\n  channels: Array<string>,\n): ((reducer: Reducer<T, V>) => Reducer<T, ChannelAction<V>>) => {\n  // create a meta reducer (takes a reducer, and returns a new reducer)\n  return (reducer: Reducer<T, V>): Reducer<T, ChannelAction<V>> => {\n    // create a function to initialize the state for this reducer\n    const initializeState = () => reducer(undefined, new InitializeState() as V);\n    // return the new reducer, which filters actions not for this \"channel\"\n    return (state: T = initializeState(), action: V | ChannelAction<V>): T => {\n      const channelAction = toChannelAction(action);\n      if (isActionForChannel(action, channels)) {\n        return reducer(state, channelAction.action);\n      }\n      return state;\n    };\n  };\n};\n\nexport { createReducer, on } from '@ngrx/store';\n\nexport { ActionReducer };\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type OnReducer<S, C extends Array<ActionCreator>> = (state: S, action: ActionType<C[number]>) => S;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface On<S> {\n  reducer: ActionReducer<S>;\n  types: Array<string>;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type ActionType<A> = A extends ActionCreator<infer T, infer C>\n  ? ReturnType<C> & {\n      type: T;\n    }\n  : never;\n","import { Action, ChannelAction, Channel, isActionForChannel, createChannelAction, toChannelAction } from './actions';\n\nimport { createEffect } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\nimport { Type, InjectionToken } from '@angular/core';\nimport { Store } from './store-broker.service';\n\nexport const METADATA_KEY = '@backbase/store effect metadata';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * An instance of a class containing one or more `Effect` methods.\n */\n// @todo: define effects class\n// @ts-expect-error: The generic here is undefined, but left for future use.\nexport type Effects<V extends Action> = any;\n\n/**\n * @deprecated Will be removed in v7.0.0\n * An injection token used to get an `Effect`s instance.\n */\nexport type EffectsInjectionToken<V extends Action> = Type<Effects<V>> | InjectionToken<Effects<V>>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface NgrxEffectsInstance<V extends Action> {\n  [property: string]: Observable<V>;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\n// @ts-expect-error: The generic here is undefined, but left for future use.\nexport interface EffectMetadata<T> {\n  // Once TS is >= 2.8 replace with <Key extends Extract<keyof T, string>>\n  propertyName: string;\n  // @todo: dispatch optional (same as ngrx)\n}\n\nconst setEffectActionMetadata = <T extends object>(sourceProto: T, entries: Array<EffectMetadata<T>>) => {\n  const constructor = sourceProto.constructor;\n  const meta: Array<EffectMetadata<T>> = constructor.hasOwnProperty(METADATA_KEY)\n    ? (constructor as any)[METADATA_KEY]\n    : (Object.defineProperty(constructor, METADATA_KEY, { value: [] }) as any)[METADATA_KEY];\n  Array.prototype.push.apply(meta, entries);\n};\n\nconst getEffectsMetadata = <T extends object>(sourceProto: T): Array<EffectMetadata<T>> =>\n  sourceProto.constructor.hasOwnProperty(METADATA_KEY) ? (sourceProto.constructor as any)[METADATA_KEY] : [];\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Method decorator to mark a method as an effect. Effects can be registered with a `Store` to perform external\n * effects such as fetching data or navigating the browser.\n *\n * The decorated method must be `(actions: Observable<Action>, store?: Store) => Observable<Action>`.\n */\nexport const Effect = <T extends object>(): MethodDecorator => {\n  return function (target: T, methodName: string) {\n    const metadata = {\n      propertyName: methodName,\n    };\n    setEffectActionMetadata(target, [metadata]);\n  } as (target: {}, propertyName: string | symbol) => void;\n};\n\nconst hasEffectActionMetadata = (instance: any): boolean => getEffectsMetadata(instance).length > 0;\n\nconst outputChannel = <T extends Action>(channel: string) => (source: Observable<T>): Observable<ChannelAction<T>> =>\n  source.pipe(map((action: T) => createChannelAction(action, channel)));\n\nconst ofChannel = <V extends Action>(channels: Array<string>) => (source: Observable<Action>): Observable<V> =>\n  source.pipe(\n    map(action => toChannelAction(action)),\n    filter<ChannelAction<Action>, ChannelAction<V>>((action): action is ChannelAction<V> =>\n      isActionForChannel(action, channels),\n    ),\n    map(channelAction => channelAction.action),\n  );\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const createMetaChannelEffects = <V extends Action>(\n  store: Store<unknown, V>,\n  actions: Observable<Action>,\n  effects: Effects<Action>,\n  dispatchChannel: Channel,\n  listenChannels: Array<Channel>,\n): NgrxEffectsInstance<ChannelAction<Action>> => {\n  if (!hasEffectActionMetadata(effects)) {\n    throw new Error('Effect class has no effects');\n  }\n  const proto = function () {};\n  Object.defineProperty(proto, 'name', { value: `Effect${dispatchChannel}`, writable: false });\n  const effectInstance: NgrxEffectsInstance<ChannelAction<Action>> = Object.create(proto);\n\n  return getEffectsMetadata(effects).reduce(\n    (instance: NgrxEffectsInstance<ChannelAction<Action>>, effect: EffectMetadata<any>) => {\n      instance[effect.propertyName] = createEffect(() =>\n        effects[effect.propertyName](actions.pipe(ofChannel(listenChannels)), store).pipe(\n          outputChannel(dispatchChannel),\n        ),\n      );\n      return instance;\n    },\n    effectInstance,\n  );\n};\n","import { Injectable, Injector, Inject } from '@angular/core';\nimport { ReducerManager as NgrxReducerManager, Store as NgrxStore } from '@ngrx/store';\nimport { Actions as NgrxActions, EffectSources as NgrxEffectsSources } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { Reducer, metaChannelReducer as createMetaChannelReducer, MetaReducer } from './reducers';\nimport { Action, Channel, createChannelAction } from './actions';\nimport { createMetaChannelEffects, NgrxEffectsInstance, EffectsInjectionToken, Effects } from './effects';\nimport { Selector } from './selectors';\nimport { filter, map } from 'rxjs/operators';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const InitializeStoreActionType = '[Backbase Reducer] INITIALIZE REDUCER';\n/**\n * @deprecated Will be removed in v7.0.0\n * An `Action` that is dispatched to a `Store` when it is created to allow the store to initialize\n * its initial state\n */\nexport class InitializeStoreAction implements Action {\n  readonly type = InitializeStoreActionType;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Stream operator to filter the `Actions` stream to only pass the `InitializeStoreAction`.\n * This can be used to write `Reducer`s or `Effect`s that are only run when their `Store` is\n * initially created.\n */\nexport const ofStoreInit = () => (source: Observable<Action>): Observable<InitializeStoreAction> =>\n  source.pipe(filter((action): action is InitializeStoreAction => action.type === InitializeStoreActionType));\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type BranchName = string;\n/**\n * @deprecated Will be removed in v7.0.0\n * The name of the store used to segregate the Store states within the application state branch.\n */\nexport type StoreName = string;\n\n/**\n * @deprecated Will be removed in v7.0.0\n * A Store that maintains internal state which can be queried and acted upon.\n */\nexport interface Store<State, V extends Action> {\n  /**\n   * Dispatch an action to the store.\n   * This may result in changes in state and/or external effects.\n   */\n  dispatch: (action: V) => void;\n\n  /**\n   * Select a projection of the internal state.\n   */\n  select: <R>(selector: Selector<State, R>) => Observable<R>;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface ReducerManager {\n  addFeature<T, V extends Action>(featureDef: {\n    key: string;\n    reducers: Reducer<T, V>;\n    reducerFactory: () => never;\n    metaReducers: Array<MetaReducer<T, V>>;\n  }): void;\n}\n\nexport interface EffectSources<V extends Action> {\n  addEffects(effects: NgrxEffectsInstance<V>): void;\n}\n\n/**\n * @internal\n */\n@Injectable({ providedIn: 'root' })\nexport class StoreBroker {\n  private readonly initializedStores = new Map<BranchName, Array<StoreName>>();\n\n  constructor(\n    @Inject(NgrxStore) private readonly superstore: Store<any, Action>,\n    @Inject(NgrxActions) private readonly actions: Observable<Action>,\n    @Inject(NgrxReducerManager) private readonly reducerManager: ReducerManager,\n    @Inject(NgrxEffectsSources) private readonly effectsSources: EffectSources<any>,\n    private readonly injector: Injector,\n  ) {}\n\n  initStore<T, V extends Action>(\n    storeName: StoreName,\n    reducer: Reducer<T, V>,\n    effects: Array<EffectsInjectionToken<V>>,\n    branchName: BranchName,\n    dispatchChannel: Channel,\n    inputChannels: Array<Channel> = [],\n    widgetInjector?: Injector,\n  ): Store<T, V> {\n    if (this.isStoreInitialized(branchName, storeName)) {\n      return this.createStore(storeName, branchName, dispatchChannel);\n    }\n\n    const allInputChannels = [this.privateChannel(storeName, dispatchChannel), ...inputChannels];\n\n    this.addReducer(storeName, branchName, reducer, allInputChannels);\n\n    this.setStoreInitialized(branchName, storeName);\n\n    const store = this.createStore<T, V>(storeName, branchName, dispatchChannel);\n    effects\n      .map(token => (widgetInjector || this.injector).get<Effects<V>>(token))\n      .forEach((effectInstance: Effects<V>) => {\n        this.addEffects(store, effectInstance, this.privateChannel(storeName, dispatchChannel), allInputChannels);\n      });\n\n    store.dispatch(new InitializeStoreAction() as V);\n\n    return store;\n  }\n\n  private createStore<T, V extends Action>(\n    storeName: StoreName,\n    branchName: BranchName,\n    dispatchChannel: Channel,\n  ): Store<T, V> {\n    return {\n      select: <R>(selector: (state: T) => R): Observable<R> => {\n        return this.superstore.select<T>(state => state[this.privateBranch(storeName, branchName)]).pipe(map(selector));\n      },\n      dispatch: (action: V) => {\n        this.dispatchForStore(storeName, dispatchChannel, action);\n      },\n    };\n  }\n\n  /**\n   * Dispatches an action scoped on a channel just for this store.\n   */\n  private dispatchForStore(storeName: StoreName, dispatchChannel: Channel, action: Action) {\n    this.dispatchOnChannel(this.privateChannel(storeName, dispatchChannel), action);\n  }\n\n  private dispatchOnChannel(channel: Channel, action: Action) {\n    this.superstore.dispatch(createChannelAction(action, channel));\n  }\n\n  private isStoreInitialized(branchName: BranchName, storeName: StoreName): boolean {\n    const storesInBranch = this.initializedStores.get(branchName);\n    return !!(storesInBranch && storesInBranch.find(name => name === storeName));\n  }\n\n  private setStoreInitialized(branchName: BranchName, storeName: StoreName) {\n    let storesInBranch = this.initializedStores.get(branchName);\n    if (storesInBranch === undefined) {\n      storesInBranch = [];\n      this.initializedStores.set(branchName, storesInBranch);\n    }\n    storesInBranch.push(storeName);\n  }\n\n  private addReducer<T, V extends Action>(\n    storeName: StoreName,\n    branchName: BranchName,\n    reducer: Reducer<T, V>,\n    inputChannels: Array<Channel>,\n  ) {\n    this.reducerManager.addFeature({\n      key: this.privateBranch(storeName, branchName),\n      reducers: createMetaChannelReducer<T, V>(inputChannels)(reducer),\n      reducerFactory: () => {\n        throw new Error('No reducer factory');\n      },\n      metaReducers: [], //[createMetaChannelReducer(inputChannels)],\n    });\n  }\n\n  private addEffects<V extends Action>(\n    store: Store<any, V>,\n    effects: Effects<V>,\n    dispatchChannel: Channel,\n    listenChannels: Array<Channel>,\n  ): void {\n    this.effectsSources.addEffects(\n      createMetaChannelEffects(store, this.actions, effects, dispatchChannel, listenChannels),\n    );\n  }\n\n  private privateBranch(storeName: StoreName, branchName: BranchName) {\n    return `${storeName}/${branchName}`;\n  }\n\n  private privateChannel(storeName: StoreName, dispatchChannel: Channel) {\n    return `${storeName}/${dispatchChannel}`;\n  }\n}\n","import { Action, Channel } from './actions';\nimport { Inject, InjectionToken, Injector } from '@angular/core';\nimport { Store, StoreBroker, BranchName, StoreName } from './store-broker.service';\nimport { Reducer } from './reducers';\nimport { EffectsInjectionToken } from './effects';\nimport { AvailableFeature, FeaturesService } from '@backbase/foundation-ang/future';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const ENFORCE_INJECTOR_FOR_CREATE_STORE: AvailableFeature = {\n  name: 'ENFORCE_INJECTOR_FOR_CREATE_STORE',\n  description: 'you have to provide widget injector for createStore to make sure your widget support lazy loading',\n};\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Configuration token that defines the \"branch\" of the application state that the store is responsible for.\n *\n * @internal\n */\nexport const STORE_BRANCH = new InjectionToken<BranchName>('@backbase store branch');\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Configuration token that defines the \"channel\" on which the store will dispatch any events it produces.\n *\n * @internal\n */\nexport const STORE_DISPATCH_CHANNEL = new InjectionToken<Channel>('@backbase store dispatch channel');\n\nexport { Store };\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Create a scoped store on a particular branch/channel\n */\nexport class StoreFactory {\n  constructor(\n    private readonly storeBroker: StoreBroker,\n    @Inject(STORE_BRANCH) private readonly branch: BranchName,\n    @Inject(STORE_DISPATCH_CHANNEL) private readonly dispatchChannel: Channel,\n    private featuresService: FeaturesService,\n  ) {}\n\n  /**\n   * @deprecated you have to provide widget injector for createStore to make sure your widget support lazy loading.\n   * Create a `Store` that maintains state (`T`) and responds to `Action`s (`V`).\n   * @param storeName The name of the store - this should be unique within the `branch`.\n   * @param reducer The reducers that update the `Store`s state based on `Action`s dispatched to the `Store`.\n   * @param effects The `Effect`s that trigger external effects and/or produce new `Action`s based on the `Action`s dispatched to the `Store`.\n   **/\n  createStore<T, V extends Action = Action>(\n    storeName: StoreName,\n    reducer: Reducer<T, V>,\n    effects: Array<EffectsInjectionToken<V>>,\n  ): Store<T, V>;\n  /**\n   * Create a `Store` that maintains state (`T`) and responds to `Action`s (`V`).\n   * @param storeName The name of the store - this should be unique within the `branch`.\n   * @param reducer The reducers that update the `Store`s state based on `Action`s dispatched to the `Store`.\n   * @param effects The `Effect`s that trigger external effects and/or produce new `Action`s based on the `Action`s dispatched to the `Store`.\n   * @param injector widget injector is required to support lazy loading.\n   **/\n  createStore<T, V extends Action = Action>(\n    storeName: StoreName,\n    reducer: Reducer<T, V>,\n    effects: Array<EffectsInjectionToken<V>>,\n    // eslint-disable-next-line @typescript-eslint/unified-signatures\n    injector: Injector,\n  ): Store<T, V>;\n  createStore<T, V extends Action = Action>(\n    storeName: StoreName,\n    reducer: Reducer<T, V>,\n    effects: Array<EffectsInjectionToken<V>>,\n    injector?: Injector,\n  ): Store<T, V> {\n    if (!injector && this.featuresService.isEnabled(ENFORCE_INJECTOR_FOR_CREATE_STORE)) {\n      throw new Error(ENFORCE_INJECTOR_FOR_CREATE_STORE.description);\n    }\n\n    if (!injector) {\n      console.warn(ENFORCE_INJECTOR_FOR_CREATE_STORE.description);\n    }\n\n    return this.storeBroker.initStore(\n      storeName,\n      reducer,\n      effects,\n      this.branch,\n      this.dispatchChannel,\n      undefined,\n      injector,\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { EffectsModule as NgrxEffectsModule } from '@ngrx/effects';\nimport { StoreModule as NgrxStoreModule } from '@ngrx/store';\nimport { AvailableFeature, FeaturesService } from '@backbase/foundation-ang/future';\nimport { FutureFeaturesModule } from '@backbase/foundation-ang/future';\nimport { StoreBroker } from './store-broker.service';\nimport { ENFORCE_INJECTOR_FOR_CREATE_STORE } from './store-factory.service';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const ALLOW_NGRX_IN_ROOT: AvailableFeature = {\n  name: 'ALLOW_NGRX_IN_ROOT',\n  description: 'StoreModule is deprecated - use BackbaseStoreModule instead',\n};\n\n/**\n * @deprecated\n */\n@NgModule({\n  imports: [\n    NgrxEffectsModule.forRoot([]),\n    NgrxStoreModule.forRoot({}),\n    FutureFeaturesModule.allowOptIn([ALLOW_NGRX_IN_ROOT, ENFORCE_INJECTOR_FOR_CREATE_STORE]),\n  ],\n  providers: [StoreBroker],\n})\nexport class StoreModule {\n  constructor(featuresService: FeaturesService) {\n    if (featuresService.isEnabled(ALLOW_NGRX_IN_ROOT)) {\n      throw new Error('StoreModule is deprecated - use BackbaseStoreModule instead');\n    }\n  }\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@NgModule({\n  imports: [NgrxEffectsModule, NgrxStoreModule, FutureFeaturesModule.allowOptIn([ENFORCE_INJECTOR_FOR_CREATE_STORE])],\n})\nexport class BackbaseStoreModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BranchName as ɵb} from './store-broker.service';\nexport {ENFORCE_INJECTOR_FOR_CREATE_STORE as ɵa} from './store-factory.service';"]}