import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, Injectable, Inject, LOCALE_ID, SkipSelf } from '@angular/core';
import { CONDITIONS, EntitlementsModule } from '@backbase/foundation-ang/entitlements';
export { CONDITIONS, ConditionsService, DATA_ITEMS_PERMISSIONS_PATH, ENTITLEMENTS_CONFIG, SUMMARY_PERMISSIONS_PATH } from '@backbase/foundation-ang/entitlements';
import { fromEventPattern, ReplaySubject, from } from 'rxjs';
import { PortalContentMock as PortalContentMock$1 } from '@backbase/foundation-ang/testing';
import { AuthKind, initialise } from '@backbase/lib-bb-page-bootstrap-cdn';
export { AuthKind, ContentType, ContentTypes, ReauthErrorCodes } from '@backbase/lib-bb-page-bootstrap-cdn';
import * as i1 from '@angular/common';
import { DOCUMENT } from '@angular/common';

/**
 * @deprecated Will be removed in v7.0.0
 */
const PAGE_CONFIG = new InjectionToken('web-sdk-page-config');
const defaultPageConfig = {
    apiRoot: '/gateway/api/',
    staticResourcesRoot: '/',
    currentLink: '',
    pageName: '',
    portalName: '',
    version: '6',
    locale: 'en-US',
    locales: ['en-US'],
    currentLinkUUID: '',
    designmode: false,
    cspNonce: '',
    linkRoot: '/gateway',
    webSdkVersion: '',
    userId: '',
};
/**
 * @deprecated Will be removed in v7.0.0
 */
function getPageConfig(webSdkServiceMap = {}) {
    const pageConfig = webSdkServiceMap.pageConfig
        ? Object.assign(Object.assign({}, defaultPageConfig), webSdkServiceMap.pageConfig()) : defaultPageConfig;
    return pageConfig;
}

/**
 * @deprecated Will be removed in v7.0.0. Use the `PubSubService` class instead.
 */
const PUBSUB = new InjectionToken('web-sdk-pubsub');
/**
 * @deprecated Will be removed in v7.0.0. Use the `SetLocaleService` class instead.
 */
const SET_LOCALE = new InjectionToken('web-sdk-set-locale');
/**
 * @deprecated Will be removed in v7.0.0
 */
const EMBEDDED_SERVICES = new InjectionToken('embedded platform services');
/**
 * @description
 * Service to reauthenticate a user.
 *
 * @example
 * export class SigningService {
 *   constructor(
 *     @Inject(REAUTHENTICATE) private reauthenticateService: ReauthenticateService,
 *   ) {
 *     this.reauthenticate(error);
 *   }
 *
 *   private reauthenticate(error: HttpErrorResponse) {
 *     const { acrValues, scope } = this.getChallenge(error);
 *     this.reauthenticateService.reauthenticate(scope, acrValues);
 *   }
 *
 *   private getReauthChallenge(error: HttpErrorResponse) {
 *     const challenges = error.error ? error.error.challenges : [];
 *     return challenges.find(c => c.scope !== undefined);
 *   }
 * }
 */
/**
 * @deprecated Will be removed in v7.0.0
 */
const EXTERNAL_SERVICES = new InjectionToken('external platform services');
/**
 * @deprecated Will be removed in v7.0.0
 */
const WEBSDK_SERVICE_MAP = new InjectionToken('Web SDK Service Map');
/**
 * @deprecated Will be removed in v7.0.0
 */
function websdkServiceFactory(webSdkServiceMap, serviceKey) {
    if (!webSdkServiceMap) {
        return undefined;
    }
    const factory = webSdkServiceMap[serviceKey];
    if (!factory) {
        return undefined;
    }
    return factory(); // TS isn't smart enough to know that factory() is T.
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function navigationFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'navigation');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function pubsubFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'eventBus');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function portalContentFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'portalContent');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function setLocaleFactory$1(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'setLocale');
}

/**
 * Convert a pubsub event to a replay subject.
 */
const fromPubsub = (eventName, pubsub) => {
    const pubsubObservable = fromEventPattern(function (handler) {
        return pubsub.subscribe(eventName, handler);
    }, function (_, unsubscribe) {
        unsubscribe();
    });
    // Subscribe now, and cache with ReplaySubject
    const pubsubReplay = new ReplaySubject(1);
    pubsubObservable.subscribe(pubsubReplay);
    return pubsubReplay;
};
const ɵ0$1 = fromPubsub;
/**
 * We wrap the pubsub events from web-sdk in streams.
 *
 * The main reason to do this is to ensure that we are subscribing to these
 * events *before* they emit. We'll then ensure they replay
 */
const wrapAuthEvents = (auth, pubsub) => ({
    init: from(auth.initToken),
    success: fromPubsub('auth:success', pubsub),
    end: fromPubsub('auth:end', pubsub),
    error: fromPubsub('auth:error', pubsub),
});

/**
 * @deprecated Will be removed in v7.0.0
 */
const HTTP_INTERCEPTORS = new InjectionToken('web-sdk-http-interceptors');
/**
 * @deprecated Will be removed in v7.0.0
 */
const REFRESH = new InjectionToken('web-sdk-refresh');
/**
 * @deprecated Will be removed in v7.0.0
 */
const NAVIGATION = new InjectionToken('web-sdk-navigation');
/**
 * @deprecated Will be removed in v7.0.0
 */
const PORTAL_CONTENT = new InjectionToken('web-sdk-portal-content');
/**
 * @deprecated Will be removed in v7.0.0
 */
const AUTH_EVENTS = new InjectionToken('Web SDK auth event streams');
/**
 *
 * @deprecated Will be removed in v7.0.0
 *
 * @description
 * Token to get instance of LoginService.
 * Example of the use case: to implement custom login widget.
 *
 * @example
 * constructor(@Inject(LOGIN) private loginService: LoginService) {}
 */
const LOGIN = new InjectionToken('web-sdk-login');
/**
 *
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of LogoutService.
 * Examples of the use cases: to implement custom logout widget or to logout user based on some custom logic.
 *
 * @example
 * constructor(@Inject(LOGOUT) private logoutService: LogoutService) {}
 */
const LOGOUT = new InjectionToken('web-sdk-logout');
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of SessionService.
 * Examples of the use cases:
 * - to register custom countdown to show modal before session is over
 * - to refresh session.
 *
 * @example
 * constructor(@Inject(SESSION) private sessionService: SessionService) {}.
 */
const SESSION = new InjectionToken('web-sdk-session');
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of ReauthenticateService.
 * Examples of the use cases:
 * - to reauthenticate a user.
 *
 * @example
 * constructor(@Inject(REAUTHENTICATE) private reauthenticateService: ReauthenticateService) {}.
 */
const REAUTHENTICATE = new InjectionToken('web-sdk-reauthenticate');
/**
 * This returns a BackbaseAuth, but with the `keysToCheck` as required, not optional.
 */
function getAuth(serviceName, keysToCheck, externalServices, optionalKeys) {
    const auth = websdkServiceFactory(externalServices, 'auth');
    if (!auth) {
        throw new Error('Authentication Service is not available.');
    }
    keysToCheck.forEach((key) => {
        if (!auth[key] && !(optionalKeys === null || optionalKeys === void 0 ? void 0 : optionalKeys.includes(key))) {
            throw new Error(`'${serviceName}' Service cannot be injected because '${key}' is not available in authentication '${auth.config.kind}' strategy.`);
        }
    });
    return auth; // this is guaranteed by the above checks
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function loginFactory(webSdkServiceMap) {
    const auth = getAuth('Login', ['login'], webSdkServiceMap);
    return {
        login: auth.login,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function logoutFactory(webSdkServiceMap) {
    const auth = getAuth('Logout', ['logout', 'goToLoginPage'], webSdkServiceMap);
    return {
        logout: auth.logout,
        goToLoginPage: auth.goToLoginPage,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function sessionFactory(webSdkServiceMap) {
    const auth = getAuth('Session', ['register', 'refresh', 'timeToLive', 'isImpersonated'], webSdkServiceMap, [
        'isImpersonated',
    ]);
    return {
        registerCountdown: auth.register,
        refresh: auth.refresh,
        timeToLive: auth.timeToLive,
        isImpersonated: auth.isImpersonated ? auth.isImpersonated() : false,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function reauthenticateFactory(webSdkServiceMap) {
    const auth = getAuth('Reauthenticate', ['reauthenticate'], webSdkServiceMap);
    return {
        reauthenticate: auth.reauthenticate,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function getAuthEvents(webSdkServices) {
    if (!webSdkServices.auth || !webSdkServices.eventBus) {
        throw new Error('Unable to listen to auth events');
    }
    // @todo: remove 'as any' when web-sdk updates BackbaseAuth
    return wrapAuthEvents(webSdkServices.auth(), webSdkServices.eventBus());
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function refreshFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'refresh');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function httpInterceptorsFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'httpInterceptors');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function setConditionsFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'conditions');
}

function getWebSdkServiceMap(externalServices, embeddedServices) {
    return Object.assign(Object.assign({}, embeddedServices), externalServices);
}
const ɵ0 = getPageConfig, ɵ1 = navigationFactory, ɵ2 = pubsubFactory, ɵ3 = portalContentFactory, ɵ4 = loginFactory, ɵ5 = logoutFactory, ɵ6 = sessionFactory, ɵ7 = reauthenticateFactory, ɵ8 = httpInterceptorsFactory, ɵ9 = refreshFactory, ɵ10 = setLocaleFactory$1, ɵ11 = setConditionsFactory, ɵ12 = getAuthEvents;
/**
 * Provides the following services:
 *
 * - `PageConfig`
 * - `Navigation`
 * - `Pubsub`
 * - `PortalConten`
 * - `LoginService`
 * - `LogoutService`
 * - `SessionService`
 * - `ReauthenticateService`
 * - `HttpInterceptors`
 * - `Refresh`
 * - `SetLocale`
 * - `Conditions`
 *
 * Notes:
 *  - The implementations of these services are provided via the Lean Page.
 *  - You must use the following injection tokens to any of inject these services.
 *
 * @usageNotes
 *
 * ```
 * constructor(
 *   @Inject(PAGE_CONFIG) pageConfig: PageConfig,
 *   @Inject(NAVIGATION) navigation: Navigation,
 *   @Inject(PUBSUB) pubsub: Pubsub,
 *   @Inject(PORTAL_CONTENT) portalContent: PortalContent
 *   @Inject(LOGIN) login: LoginService,
 *   @Inject(LOGOUT) logout: LogoutService,
 *   @Inject(SESSION) session: SessionService,
 *   @Inject(REAUTHENTICATE) reauthenticate: ReauthenticateService,
 *   @Inject(HTTP_INTERCEPTORS) httpInterceptors, HttpInterceptors,
 *   @Inject(REFRESH) refresh: Refresh,
 *   @Inject(SET_LOCALE) setLocale: SetLocale,
 *   @Inject(CONDITIONS) conditions: Conditions,
 * ) {}
 * ```
 */
class WebSdkApiModule {
}
WebSdkApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                providers: [
                    {
                        provide: WEBSDK_SERVICE_MAP,
                        useFactory: getWebSdkServiceMap,
                        deps: [
                            [new Optional(), EXTERNAL_SERVICES],
                            [new Optional(), EMBEDDED_SERVICES],
                        ],
                    },
                    {
                        provide: PAGE_CONFIG,
                        useFactory: ɵ0,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: NAVIGATION,
                        useFactory: ɵ1,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: PUBSUB,
                        useFactory: ɵ2,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: PORTAL_CONTENT,
                        useFactory: ɵ3,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: LOGIN,
                        useFactory: ɵ4,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: LOGOUT,
                        useFactory: ɵ5,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: SESSION,
                        useFactory: ɵ6,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: REAUTHENTICATE,
                        useFactory: ɵ7,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: HTTP_INTERCEPTORS,
                        useFactory: ɵ8,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: REFRESH,
                        useFactory: ɵ9,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: SET_LOCALE,
                        useFactory: ɵ10,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: CONDITIONS,
                        useFactory: ɵ11,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: AUTH_EVENTS,
                        useFactory: ɵ12,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                ],
            },] }
];

class PubSubService {
    constructor() {
        this.getListeners = (string) => this.listenersMap.get(string) || [];
        this.listenersMap = new Map();
    }
    publish(string, payload) {
        const listeners = this.getListeners(string);
        listeners.forEach(listener => {
            try {
                listener(payload);
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    subscribe(string, listener) {
        const listeners = this.getListeners(string);
        const newListeners = [...listeners, listener];
        this.listenersMap.set(string, newListeners);
        return () => {
            this.unsubscribe(string, listener);
        };
    }
    unsubscribe(string, listener) {
        const listeners = this.getListeners(string);
        const newListeners = listeners.filter(currentListener => currentListener !== listener);
        this.listenersMap.set(string, newListeners);
    }
    unsubscribeAll() {
        this.listenersMap.clear();
    }
}
PubSubService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PubSubService_Factory() { return new PubSubService(); }, token: PubSubService, providedIn: "root" });
PubSubService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PubSubService.ctorParameters = () => [];

const COOKIE_NAME = 'bb-locale';
//TODO: Remove dynamic when Ivy compilation is enabled
//@dynamic
class SetLocaleService {
    constructor(document) {
        this.document = document;
    }
    getCookieName() {
        return COOKIE_NAME;
    }
    setLocale(locale) {
        this.document.cookie = `${COOKIE_NAME}=${locale}; path=/`;
    }
    /**
     * @deprecated Will be removed in v7.0.0
     */
    setLocaleLegacy(locale) {
        this.setLocale(locale);
        return Promise.resolve({
            status: 200,
            statusText: 'OK',
            headers: {},
            body: '',
        });
    }
}
SetLocaleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SetLocaleService_Factory() { return new SetLocaleService(i0.ɵɵinject(i1.DOCUMENT)); }, token: SetLocaleService, providedIn: "root" });
SetLocaleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SetLocaleService.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];

/**
 * @deprecated Will be removed in v7.0.0
 */
const WEBSDK_CONFIG = new InjectionToken('web sdk config');
/**
 * @deprecated Will be removed in v7.0.0
 */
function setLocaleFactory(setLocale) {
    const setLocale$ = setLocale;
    return setLocale$.setLocaleLegacy;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
function bootstrapWebsdkService(config, locale) {
    const locales = config.locales || [locale];
    if (!locales.includes(locale)) {
        locales.push(locale);
    }
    const rawConfig = Object.assign(Object.assign({ apiRoot: config.apiRoot || '/api', locale, staticResourcesRoot: '/' }, config), { locales: locales.join(','), auth: Object.assign(Object.assign({ authUrl: '/auth', clientId: 'bb-web-client', realm: 'backbase', scope: 'openid' }, config.auth), { kind: AuthKind.Hybrid, loginPageUrl: '', landingPageUrl: '' }) });
    const { pageConfig, pubsub, navigation, portalContent, auth, httpInterceptors, itemRefresher, setLocale, conditions, } = initialise(rawConfig);
    return {
        pageConfig: () => pageConfig,
        navigation: () => navigation,
        eventBus: () => pubsub,
        portalContent: () => portalContent,
        auth: () => auth,
        httpInterceptors: () => httpInterceptors,
        refresh: () => itemRefresher.refresh,
        setLocale: () => setLocale,
        conditions: () => conditions,
    };
}
class WebSdkModule {
    constructor(config, parentModule) {
        if (parentModule) {
            throw new TypeError(`WebSdkModule is imported twice. It should only be imported in the AppModule`);
        }
        if (!config) {
            throw new Error('WebSdkModule must be imported with WebSdkModule.forRoot(...)');
        }
    }
    /**
     * Add the `WebSdkModule` to your application's `AppModule` to embed the
     * web-sdk services into your application. This allows you to deploy your
     * application outside of an Experience, without the Lean Page.
     *
     * Note: Any services created via `environment.bootstrap.services` will
     * overwrite the services from this module.
     *
     * This module provides all the services from `WebSdkApiAng`.
     *
     * Importing this module will automatically enable the hybrid auth flow.
     *
     * @usageNotes
     *
     * ```
     * NgModule({
     *  declarations: [AppComponent],
     *  imports: [
     *    ...
     *    WebSdkModule.forRoot(),
     *  ],
     *  bootstrap: [AppComponent],
     * })
     * export class AppModule {}
     * ```
     */
    static forRoot(config = {}) {
        return {
            ngModule: WebSdkModule,
            providers: [
                {
                    provide: WEBSDK_CONFIG,
                    useValue: config,
                },
                {
                    provide: WEBSDK_SERVICE_MAP,
                    useFactory: bootstrapWebsdkService,
                    deps: [WEBSDK_CONFIG, LOCALE_ID],
                },
                {
                    provide: PAGE_CONFIG,
                    useFactory: getPageConfig,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: NAVIGATION,
                    useFactory: navigationFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: PORTAL_CONTENT,
                    useFactory: portalContentFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: LOGIN,
                    useFactory: loginFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: LOGOUT,
                    useFactory: logoutFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: SESSION,
                    useFactory: sessionFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: REAUTHENTICATE,
                    useFactory: reauthenticateFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useFactory: httpInterceptorsFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: REFRESH,
                    useFactory: refreshFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: AUTH_EVENTS,
                    useFactory: getAuthEvents,
                    deps: [WEBSDK_SERVICE_MAP],
                },
            ],
        };
    }
}
WebSdkModule.decorators = [
    { type: NgModule, args: [{
                imports: [EntitlementsModule],
                providers: [
                    { provide: PUBSUB, useExisting: PubSubService },
                    {
                        provide: SET_LOCALE,
                        deps: [SetLocaleService],
                        useFactory: setLocaleFactory,
                    },
                ],
            },] }
];
WebSdkModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WEBSDK_CONFIG,] }] },
    { type: WebSdkModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];

/**
 * @deprecated This entrypoint is deprecated use \'@backbase/foundation-ang/test\' for PortalContentMock
 */
class PortalContentMock extends PortalContentMock$1 {
}

/**
 * Generated bundle index. Do not edit.
 */

export { HTTP_INTERCEPTORS, LOGIN, LOGOUT, NAVIGATION, PAGE_CONFIG, PORTAL_CONTENT, PUBSUB, PortalContentMock, PubSubService, REAUTHENTICATE, REFRESH, SESSION, SET_LOCALE, SetLocaleService, WebSdkApiModule, WebSdkModule, AUTH_EVENTS as ɵAUTH_EVENTS, EXTERNAL_SERVICES as ɵEXTERNAL_SERVICES, getWebSdkServiceMap as ɵa, getPageConfig as ɵb, EMBEDDED_SERVICES as ɵc, WEBSDK_SERVICE_MAP as ɵd, websdkServiceFactory as ɵe, navigationFactory as ɵf, pubsubFactory as ɵg, portalContentFactory as ɵh, setLocaleFactory$1 as ɵi, loginFactory as ɵj, logoutFactory as ɵk, sessionFactory as ɵl, reauthenticateFactory as ɵm, getAuthEvents as ɵn, refreshFactory as ɵo, httpInterceptorsFactory as ɵp, setConditionsFactory as ɵq, WEBSDK_CONFIG as ɵr, setLocaleFactory as ɵs, bootstrapWebsdkService as ɵt };
//# sourceMappingURL=backbase-foundation-ang-web-sdk.js.map
