{"version":3,"file":"backbase-foundation-ang-data-http.js","sources":["../../../../projects/backbase/foundation-ang/data-http/src/cache-control.interceptor.ts","../../../../projects/backbase/foundation-ang/data-http/src/data-http-config.ts","../../../../projects/backbase/foundation-ang/data-http/src/request-cache.service.ts","../../../../projects/backbase/foundation-ang/data-http/src/request-cache.interceptor.ts","../../../../projects/backbase/foundation-ang/data-http/src/custom-encoder.service.ts","../../../../projects/backbase/foundation-ang/data-http/src/data-http.module.ts","../../../../projects/backbase/foundation-ang/data-http/src/mocks.ts","../../../../projects/backbase/foundation-ang/data-http/src/url.ts","../../../../projects/backbase/foundation-ang/data-http/src/data-module-manager.ts","../../../../projects/backbase/foundation-ang/data-http/src/mocks.interceptor.service.ts","../../../../projects/backbase/foundation-ang/data-http/src/pagination.service.ts","../../../../projects/backbase/foundation-ang/data-http/src/backbase-foundation-ang-data-http.ts"],"sourcesContent":["import { HTTP_INTERCEPTORS, HttpHandler, HttpInterceptor, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { Injectable, Provider } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class CacheControlInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const updatedRequest = req.clone({\n      setHeaders: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        Pragma: 'no-cache',\n      },\n    });\n    return next.handle(updatedRequest);\n  }\n}\n\nexport const cacheControlInterceptorProvider: Provider = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: CacheControlInterceptor,\n    multi: true,\n  },\n];\n","import { InjectionToken } from '@angular/core';\n\n/**\n * This token can be used to inject default DataHttpConfig\n */\nexport const DATA_HTTP_CONFIG = new InjectionToken<DataHttpConfig>('DataHttpConfig');\nexport const DATA_HTTP_CUSTOM_CONFIG = new InjectionToken<DataHttpConfig>('DataHttpCustomConfig');\n\nexport interface DataHttpConfig {\n  readonly apiRoot: string;\n  readonly headers: { [key: string]: string };\n}\n\nexport interface ServiceDataHttpConfig extends DataHttpConfig {\n  readonly servicePath: string;\n}\n\n/**\n * Returns merged service data http configuration\n * @param globalConfig Default service configuration object\n * @param serviceConfig Service configuration object to be merge on default\n */\nexport function createServiceDataHttpConfig(\n  globalConfig: ServiceDataHttpConfig,\n  serviceConfig: Partial<ServiceDataHttpConfig>,\n): ServiceDataHttpConfig {\n  return {\n    ...globalConfig,\n    ...serviceConfig,\n  };\n}\n","import { HttpEvent, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n// JavaScript equality sucks.. We have to use strings for keys.\ntype RequestCacheKey = string;\n\ninterface RequestCacheValue<T> {\n  expireAt: number;\n  value: Observable<HttpEvent<T>>;\n}\n\nconst second = 1000;\n\n@Injectable()\nexport class RequestCacheService {\n  private readonly ttl = 1 * second;\n  private readonly results = new Map<RequestCacheKey, RequestCacheValue<any>>();\n\n  get(req: HttpRequest<any>): Observable<HttpEvent<any>> | undefined {\n    this.garbageCollect();\n\n    const cached = this.results.get(this.key(req));\n    if (cached === undefined) {\n      return undefined;\n    }\n\n    return cached.value;\n  }\n\n  set(request: HttpRequest<any>, response: Observable<HttpEvent<any>>): void {\n    this.results.set(this.key(request), this.value(response));\n  }\n\n  private key(request: HttpRequest<any>): RequestCacheKey {\n    return JSON.stringify({\n      url: request.urlWithParams,\n    });\n  }\n\n  private value<T>(response: Observable<HttpEvent<T>>): RequestCacheValue<T> {\n    return {\n      expireAt: this.expiryTime(),\n      value: response,\n    };\n  }\n\n  private expiryTime(): number {\n    return Date.now() + this.ttl;\n  }\n\n  private isExpired(value: RequestCacheValue<any>): boolean {\n    return Date.now() > value.expireAt;\n  }\n\n  private garbageCollect() {\n    this.results.forEach((value, key) => {\n      if (this.isExpired(value)) {\n        this.results.delete(key);\n      }\n    });\n  }\n}\n","import { HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable, Provider } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { RequestCacheService } from './request-cache.service';\n\n@Injectable()\nexport class RequestCacheInterceptor implements HttpInterceptor {\n  constructor(private readonly cache: RequestCacheService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    if (!this.isCachable(req)) {\n      return next.handle(req);\n    }\n\n    return this.cachedResponse(req) || this.refreshResponse(req, next);\n  }\n\n  private isCachable(req: HttpRequest<any>): boolean {\n    return req.method === 'GET';\n  }\n\n  private cachedResponse(req: HttpRequest<any>): Observable<HttpEvent<any>> | undefined {\n    return this.cache.get(req);\n  }\n\n  private refreshResponse(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const response = next.handle(req);\n    this.cache.set(req, response);\n    return response;\n  }\n}\n\nexport const requestCacheInterceptorProvider: Provider = [\n  RequestCacheService,\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: RequestCacheInterceptor,\n    multi: true,\n  },\n];\n","import { HttpParameterCodec, HttpParams } from '@angular/common/http';\nimport { InjectionToken } from '@angular/core';\nimport { AvailableFeature, FeaturesService } from '@backbase/foundation-ang/future';\n\n/**\n * Object used to hold Http Parameters\n */\nexport interface HttpParametersObject {\n  /**\n   * Each key is the name of the http param. Each value is the http param value.\n   */\n  [k: string]: string | Array<string> | undefined | number;\n}\n\nexport interface NormalizedHttpParameters {\n  [k: string]: string | Array<string>;\n}\n\n/**\n * Normalize a map of `HttpParametersObject` and return a valid `HttpParam`.\n *\n * This does 3 things:\n *  - Filter out `undefined` values.\n *  - Convert all `number` values into `strings`.\n *  - Encode values using a custom encoder (fixes this [known bug](https://github.com/angular/angular/issues/18261)).\n */\nexport type HttpParamsFactory = (params: HttpParametersObject) => HttpParams;\n\nexport const normalizeHttpParameter = (\n  accum: NormalizedHttpParameters,\n  [key, value]: [string, string | Array<string> | undefined | number],\n) => {\n  if (value === undefined) {\n    return accum;\n  }\n  if (typeof value === 'number') {\n    return { ...accum, [key]: String(value) };\n  }\n  return { ...accum, [key]: value };\n};\n\nexport const EXTRA_ENCODE_URI_PARAMS: AvailableFeature = {\n  name: 'EXTRA_ENCODE_URI_PARAMS',\n  description:\n    'Correctly encode certain symbols in data module http params (eg encode \"+\" to \"%2B) to fix a known angular bug (#18261)',\n};\n\n/**\n * Filter undefined params, and convert numbers to strings.\n */\nexport const normalizeHttpParameters = (params: HttpParametersObject): NormalizedHttpParameters =>\n  Object.entries(params).reduce(normalizeHttpParameter, {});\n\nexport class CustomEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n\n/**\n * Injection token for the `HttpParamsFactory` utility function.\n *\n * @usageNotes\n *\n * ### Example\n *\n * ```\n * export class MyDataService {\n *   constructor(private readonly http: HttpClient,\n *   @Inject(HTTP_PARAMS_FACTORY)\n *   private readonly toHttpParams: HttpParamsFactory,\n *   ){}\n *\n *   makeRequest(params: HttpParameters): Observable<HttpResponse<any>> {\n *     return this.http.request('get', '/api', {\n *       params: this.toHttpParams(params),\n *     });\n *   }\n * }\n * ```\n */\nexport const HTTP_PARAMS_FACTORY = new InjectionToken<HttpParamsFactory>('Http Param Factory');\n\nexport const httpParamsFactoryFactory = (featuresService: FeaturesService) => {\n  // We can't type options correctly, because angular is not exporting HttpParamsOptions\n  // https://github.com/angular/angular/issues/20276\n  const httpParamsOptions = featuresService.isEnabled(EXTRA_ENCODE_URI_PARAMS) ? { encoder: new CustomEncoder() } : {};\n  return (fromObject: HttpParametersObject): HttpParams =>\n    new HttpParams({ ...httpParamsOptions, fromObject: normalizeHttpParameters(fromObject) });\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { cacheControlInterceptorProvider } from './cache-control.interceptor';\nimport { DATA_HTTP_CONFIG, DATA_HTTP_CUSTOM_CONFIG, DataHttpConfig } from './data-http-config';\nimport { requestCacheInterceptorProvider } from './request-cache.interceptor';\nimport { PageConfig, PAGE_CONFIG } from '@backbase/foundation-ang/web-sdk';\nimport { HTTP_PARAMS_FACTORY, httpParamsFactoryFactory, EXTRA_ENCODE_URI_PARAMS } from './custom-encoder.service';\nimport { FutureFeaturesModule, FeaturesService } from '@backbase/foundation-ang/core';\n\n/**\n * Returns merged data http configuration object\n * @param pageConfigService\n * @param config\n */\nexport function dataHttpConfigFactory(\n  pageConfigService: PageConfig,\n  config: Partial<DataHttpConfig> = {},\n): DataHttpConfig {\n  return {\n    headers: {},\n    apiRoot: pageConfigService.apiRoot,\n    ...config,\n  };\n}\n\n@NgModule({\n  imports: [FutureFeaturesModule.allowOptIn([EXTRA_ENCODE_URI_PARAMS])],\n  providers: [\n    {\n      provide: DATA_HTTP_CONFIG,\n      useFactory: dataHttpConfigFactory,\n      deps: [PAGE_CONFIG],\n    },\n    {\n      provide: HTTP_PARAMS_FACTORY,\n      useFactory: httpParamsFactoryFactory,\n      deps: [FeaturesService],\n    },\n  ],\n})\nexport class DataHttpModule {\n  /**\n   * Creates a module with http configuration for data modules.\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * ```\n   * @NgModule({\n   *   imports: [\n   *     DataHttpModule.forRoot({\n   *       rootApi: '/custom-base-url/',\n   *       headers: {\n   *         'X-custom': 'foo',\n   *       }\n   *     })\n   *   ]\n   * })\n   * class MyAppModule {}\n   * ```\n   */\n  static forRoot(config: Partial<DataHttpConfig> = {}): ModuleWithProviders<DataHttpModule> {\n    return {\n      ngModule: DataHttpModule,\n      providers: [\n        requestCacheInterceptorProvider,\n        cacheControlInterceptorProvider,\n        {\n          provide: DATA_HTTP_CUSTOM_CONFIG,\n          useValue: config,\n        },\n        {\n          provide: DATA_HTTP_CONFIG,\n          useFactory: dataHttpConfigFactory,\n          deps: [PAGE_CONFIG, DATA_HTTP_CUSTOM_CONFIG],\n        },\n      ],\n    };\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ServiceDataHttpConfig } from './data-http-config';\n\nconst DEFAULT_RETURN_STATUS = 200;\n\nexport interface MockData {\n  examples: Array<MockExample>;\n  token?: InjectionToken<ServiceDataHttpConfig>;\n}\n\nexport interface MockDataConfig {\n  examples: Array<MockExample>;\n  config?: ServiceDataHttpConfig;\n}\n\n/**\n * Configuration of the mock responses based on matching a request.\n */\nexport interface MockExample {\n  urlPattern: string;\n  method: string;\n  responses: Array<MocksItemResponse<any>>;\n}\n\n/**\n * @internal\n */\nexport interface MocksItem extends MockExample {\n  statusToReturn: number;\n}\n\nexport namespace MocksItem {\n  const placeholderPattern = /\\{[^\\}]*\\}/g;\n\n  function placeholdersCount(item: MocksItem): number {\n    return (item.urlPattern.match(placeholderPattern) || []).length;\n  }\n\n  function placeholderIndex(item: MocksItem): number {\n    const regex = new RegExp(placeholderPattern);\n    const found = regex.exec(item.urlPattern);\n    return found == null ? item.urlPattern.length : found.index;\n  }\n\n  function comparePlaceHolderCount(a: MocksItem, b: MocksItem): number {\n    return placeholdersCount(a) - placeholdersCount(b);\n  }\n\n  function comparePlaceholderIndex(a: MocksItem, b: MocksItem): number {\n    return placeholderIndex(b) - placeholderIndex(a);\n  }\n\n  export function compareSpecificity(a: MocksItem, b: MocksItem): number {\n    return comparePlaceHolderCount(a, b) || comparePlaceholderIndex(a, b);\n  }\n}\n\nexport interface MocksItemResponse<T> {\n  status: number;\n  body?: T;\n}\n\nexport function fromExamples(examples: Array<MockExample>): Array<MocksItem> {\n  return examples.map(exampleItemToMockItem).sort(MocksItem.compareSpecificity);\n}\n\nfunction exampleItemToMockItem(example: MockExample): MocksItem {\n  let defaultResponseItem: MocksItemResponse<any> | undefined;\n  if (example.responses && example.responses.length) {\n    defaultResponseItem =\n      example.responses.find((response: MocksItemResponse<any>) => isSuccessStatus(response.status)) ||\n      example.responses[0];\n  }\n  return {\n    ...{ statusToReturn: defaultResponseItem ? defaultResponseItem.status : DEFAULT_RETURN_STATUS },\n    ...example,\n  };\n}\n\nexport function isSuccessStatus(status: number): boolean {\n  return status >= 200 && status <= 299;\n}\n\nexport const MOCKS_EXAMPLES = new InjectionToken<Array<MockData>>(`@backbase/foundation Mocks Examples`);\n","export const hasProtocol = (url: string): boolean => !!url.match(/^[^/:]+:\\/{2,}$/);\n\nconst addTrailingSlash = (url: string): string => url.replace(/([^\\/])$/, '$1/');\n\nconst removeLeadingSlash = (str: string): string => str.replace(/^[\\/]+/, '');\n\nconst removeTrailingSlash = (str: string): string => str.replace(/[\\/]+$/, '');\n\n/**\n * Join URL parts together into a single URL string.\n *\n * Ensures URL get joined together by a single slash.\n *\n * @internal\n * @usageNotes\n *\n * ### Example\n *\n * ```\n * joinUrl('a', 'b'); // returns 'a/b'\n * joinUrl('/a/', '/b/'); // returns '/a/b/'\n * joinUrl('http://www.example.com/', '/a/b', 'c'); // returns 'http://www.example.com/a/b/c'\n * ```\n */\nexport const joinUrl = (...urlParts: Array<string>): string => {\n  // Much of this is taken from https://github.com/jfromaniello/url-join/blob/master/lib/url-join.js\n  if (urlParts.length < 2) {\n    return urlParts[0] || '';\n  }\n\n  // If the first part is a plain protocol, we combine it with the next part.\n  if (hasProtocol(urlParts[0])) {\n    const first = urlParts.shift() as string; // it is assured by above check\n    urlParts[0] = addTrailingSlash(first) + removeLeadingSlash(urlParts[0]);\n  }\n\n  const resultParts = urlParts.filter(Boolean).map((part: string, index: number) => {\n    if (index > 0) {\n      // Removing the starting slashes for each component but the first.\n      part = removeLeadingSlash(part);\n    }\n    if (index < urlParts.length - 1) {\n      // Removing the ending slashes for each component but the last.\n      part = removeTrailingSlash(part);\n    }\n    return part;\n  });\n\n  // All parts now start and end without slashes (exceptions for the first and last).\n  return resultParts.join('/');\n};\n","import { Inject, Injectable, InjectionToken, Injector, Optional } from '@angular/core';\nimport { ServiceDataHttpConfig } from './data-http-config';\nimport { fromExamples, MockData, MockExample, MocksItem, MOCKS_EXAMPLES } from './mocks';\nimport { joinUrl } from './url';\n\nconst DEFAULT_CONFIG_TOKEN = new InjectionToken<Array<MockData>>(`@backbase/foundation default config token`);\n\n@Injectable({ providedIn: 'root' })\nexport class DataModulesManager {\n  private _mocks: Array<MocksItem> = [];\n\n  private modulesConfig = new Map<\n    InjectionToken<ServiceDataHttpConfig>,\n    Partial<{\n      examples: Array<MockExample>;\n      config: ServiceDataHttpConfig;\n    }>\n  >();\n\n  constructor(\n    private injector: Injector,\n    @Optional()\n    @Inject(MOCKS_EXAMPLES)\n    mockData?: Array<MockData>,\n  ) {\n    this.addMockExamples(mockData || []);\n  }\n\n  setModuleConfig(token: InjectionToken<ServiceDataHttpConfig>, config: ServiceDataHttpConfig) {\n    if (this.modulesConfig.has(token)) {\n      const current = this.modulesConfig.get(token);\n      this.modulesConfig.set(token, { ...current, config });\n    } else {\n      this.modulesConfig.set(token, {\n        config,\n      });\n    }\n    this.updateMocks();\n  }\n\n  getMocks(): ReadonlyArray<MocksItem> {\n    return this._mocks;\n  }\n\n  private addMockExamples(mockData: Array<MockData>) {\n    for (const { token, examples } of mockData) {\n      const configToken = token || DEFAULT_CONFIG_TOKEN;\n      const config = this.injector.get<ServiceDataHttpConfig | null>(configToken, null) ?? undefined;\n\n      const allExamples =\n        configToken === DEFAULT_CONFIG_TOKEN\n          ? examples.concat(this.modulesConfig.get(configToken)?.examples ?? [])\n          : examples;\n\n      this.modulesConfig.set(configToken, {\n        examples: allExamples,\n        config,\n      });\n    }\n\n    this.updateMocks();\n  }\n\n  private updateMocks() {\n    const mockExamples: Array<MockExample> = [];\n    for (const { config, examples } of this.modulesConfig.values()) {\n      mockExamples.push(...(examples || []).map(example => this.createURL(example, config)));\n    }\n    this._mocks = fromExamples(mockExamples);\n  }\n\n  private createURL(example: MockExample, serviceConfig?: ServiceDataHttpConfig): MockExample {\n    return serviceConfig\n      ? {\n          ...example,\n          ...{ urlPattern: joinUrl(serviceConfig.apiRoot, serviceConfig.servicePath, example.urlPattern) },\n        }\n      : example;\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n  HTTP_INTERCEPTORS,\n} from '@angular/common/http';\nimport { APP_BOOTSTRAP_LISTENER, Injectable, InjectionToken, isDevMode, Provider } from '@angular/core';\nimport { Observable, of as observableOf, throwError } from 'rxjs';\nimport { delay, dematerialize, materialize, tap } from 'rxjs/operators';\nimport { ServiceDataHttpConfig } from './data-http-config';\nimport { DataModulesManager } from './data-module-manager';\nimport { isSuccessStatus, MockExample, MocksItem, MOCKS_EXAMPLES } from './mocks';\n\nconst DEFAULT_OPTIONS = {\n  responseDelay: 300, // ms\n  enableMocksStorageKey: 'enableMocks',\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MocksInterceptor implements HttpInterceptor {\n  private readonly options: MocksInterceptorConfiguration = DEFAULT_OPTIONS;\n\n  private urlMatchesPattern(url: string, pattern: string) {\n    const regexp = new RegExp(\n      pattern\n        .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // escape regex characters in URL pattern\n        .replace(/\\\\{[^\\}]*\\}/g, '[^/]*') // convert template {placeholders} to regex\n        .concat('$'), // anchor to end of url\n    );\n    // fixes bug with older versions of data modules, where they could have ended up\n    // with double slashes in the request URL, depending on the environment\n    // by replacing multiple slashes with a single slash (except after \":\" - e.g. in \"http://\")\n    const normalUrl = url.replace(/([^:]\\/)\\/+/g, '$1');\n    return regexp.test(normalUrl);\n  }\n\n  private findRequestMock<R>(request: HttpRequest<R>): MocksItem | undefined {\n    const urlAndMethodMatch = (item: MocksItem) => {\n      return request.method === item.method && this.urlMatchesPattern(request.url, item.urlPattern);\n    };\n\n    return this.dataModuleManager.getMocks().find(urlAndMethodMatch);\n  }\n\n  private toResponseObject<T>(mockItem: MocksItem): Observable<HttpEvent<T>> {\n    const response = mockItem.responses.find(resp => resp.status === mockItem.statusToReturn);\n    if (!response) {\n      return throwError(\n        new HttpErrorResponse({\n          status: 500,\n          statusText: 'No Mock Defined',\n        }),\n      );\n    }\n\n    if (isSuccessStatus(response.status)) {\n      return observableOf(new HttpResponse(response));\n    } else {\n      return throwError(new HttpErrorResponse(response));\n    }\n  }\n\n  /*\n   * this class is constructed in createMocksInterceptor \n   function so make sure to updated it too if you have changes in the dependancy list\n   */\n  constructor(private readonly dataModuleManager: DataModulesManager) {}\n\n  private getMockItemFromStorage(urlPattern: string): Partial<MocksItem> {\n    try {\n      return JSON.parse(localStorage.getItem(urlPattern) || '{}');\n    } catch {\n      console.warn(`[MOCK] Invalid json for the \"${urlPattern}\" local storage item`);\n      return {};\n    }\n  }\n\n  private processRequest<R, T>(request: HttpRequest<R>, next: HttpHandler): Observable<HttpEvent<T>> {\n    const mock = this.findRequestMock(request);\n    if (mock) {\n      return this.toResponseObject<T>({ ...mock, ...this.getMockItemFromStorage(mock.urlPattern) });\n    }\n    return next.handle(request);\n  }\n\n  intercept<R, T>(request: HttpRequest<R>, next: HttpHandler): Observable<HttpEvent<T>> {\n    if (localStorage.getItem(this.options.enableMocksStorageKey) !== 'true') {\n      return next.handle(request);\n    }\n\n    return this.processRequest<R, T>(request, next).pipe(\n      materialize(),\n      delay(this.options.responseDelay),\n      dematerialize(),\n      tap(response => {\n        // eslint-disable-next-line  no-console\n        console.log('[MOCK]', request, response);\n      }),\n    );\n  }\n}\n\nexport interface MocksInterceptorConfiguration {\n  responseDelay: number;\n  enableMocksStorageKey: string;\n}\n\n/**\n * Create a HTTP_INTERCEPTOR to return mock responses for data modules.\n */\nexport function createMocksInterceptor(): Provider {\n  return [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: MocksInterceptor,\n      deps: [DataModulesManager],\n      multi: true,\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useValue: bootstrapMocksInterceptor,\n      multi: true,\n    },\n  ];\n}\n\nexport function bootstrapMocksInterceptor() {\n  if (!isDevMode()) {\n    console.warn('Mocks should not be enabled in a production environment.');\n  }\n}\n\n/**\n * @internal\n * @deprecated\n */\nexport function createMockInterceptor(examples: Array<MockExample>): Provider {\n  return createMocks(examples);\n}\n\n/**\n * Create mocks\n *\n * @param examples\n * @param serviceConfigToken\n */\nexport function createMocks(\n  examples: Array<MockExample>,\n  serviceConfigToken?: InjectionToken<ServiceDataHttpConfig>,\n): Provider {\n  return {\n    provide: MOCKS_EXAMPLES,\n    useValue: { examples, token: serviceConfigToken },\n    multi: true,\n  };\n}\n","import { HttpParams } from '@angular/common/http';\n\nexport interface PageParams {\n  from: number;\n  size: number;\n}\nnamespace PageParams {\n  export function equal(a: PageParams, b: PageParams): boolean {\n    return a.size === b.size && a.from === b.from;\n  }\n  export function toHttpParams(params: PageParams): HttpParams {\n    return new HttpParams({\n      fromObject: {\n        from: Math.floor(params.from).toString(),\n        size: Math.floor(params.size).toString(),\n      },\n    });\n  }\n}\nexport interface CursorParams {\n  cursor: string;\n  size?: number;\n}\nnamespace CursorParams {\n  export function equal(a: CursorParams, b: CursorParams): boolean {\n    return a.size === b.size && a.cursor === b.cursor;\n  }\n  export function toHttpParams(params: CursorParams): HttpParams {\n    return new HttpParams({\n      fromObject: {\n        from: params.cursor,\n        ...(params.size ? { size: Math.floor(params.size).toString() } : {}),\n      },\n    });\n  }\n}\nexport type PaginationParams = PageParams | CursorParams;\nexport namespace PaginationParams {\n  export function equal(a: PaginationParams, b: PaginationParams): boolean {\n    const cursorsEqual = isCursorParams(a) && isCursorParams(b) && CursorParams.equal(a, b);\n    const pagesEqual = isPageParams(a) && isPageParams(b) && PageParams.equal(a, b);\n    return cursorsEqual || pagesEqual;\n  }\n\n  export function isPageParams(params: PaginationParams): params is PageParams {\n    return (params as PageParams).from !== undefined;\n  }\n  export function isCursorParams(params: PaginationParams): params is CursorParams {\n    return (params as CursorParams).cursor !== undefined;\n  }\n\n  export function toHttpParams(params: PaginationParams): HttpParams {\n    return isPageParams(params) ? PageParams.toHttpParams(params) : CursorParams.toHttpParams(params);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CacheControlInterceptor as ɵl,cacheControlInterceptorProvider as ɵm} from './cache-control.interceptor';\nexport {EXTRA_ENCODE_URI_PARAMS as ɵg,httpParamsFactoryFactory as ɵh} from './custom-encoder.service';\nexport {DATA_HTTP_CUSTOM_CONFIG as ɵb} from './data-http-config';\nexport {dataHttpConfigFactory as ɵa} from './data-http.module';\nexport {MOCKS_EXAMPLES as ɵf,MockData as ɵe} from './mocks';\nexport {MocksInterceptor as ɵc,bootstrapMocksInterceptor as ɵd} from './mocks.interceptor.service';\nexport {RequestCacheInterceptor as ɵi,requestCacheInterceptorProvider as ɵj} from './request-cache.interceptor';\nexport {RequestCacheService as ɵk} from './request-cache.service';"],"names":["ɵ0","observableOf"],"mappings":"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"}