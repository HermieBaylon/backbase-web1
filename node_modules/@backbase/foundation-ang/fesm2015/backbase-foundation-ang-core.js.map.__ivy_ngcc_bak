{"version":3,"file":"backbase-foundation-ang-core.js","sources":["../../../../projects/backbase/foundation-ang/core/src/backbase-core/assets/assets.service.ts","../../../../projects/backbase/foundation-ang/core/src/web-sdk/properties.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/app-config.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/array.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/item-model-utils.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/tree.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/item-model.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/root-container.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/item-lifecycle.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/bootstrap/backbase-connector.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/lazy-config.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/item-registry.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/components/route.component.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/strategies/default-container-strategy.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/strategies/static-routes-strategy.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/strategies/routing-decorators.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/config/outlet-map.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/guards/route-guards-registry.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/customizable/template-registry.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/chrome/journey.component.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/config/routable-item-tree.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/components/outlet-collision.component.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/config/routing-tree.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/config/abstract-router-config.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/config/router-config.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/linked-list.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/navigation/router-navigation.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/item-navigation.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/component.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/pipeline-registry.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/observable.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/pipeline.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/item-io/parse-model.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/item-io/broker-helpers.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/item-io/input-broker.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/item-io/output-broker.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/debug.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/pluck.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/route-param.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/route-param-multi.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/item-navigate.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/model.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/app-config.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/url.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/router-navigate.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/graph.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/deprecated/flows.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/deprecated/item-transition.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/navigation.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/models/root-item-model.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/area/area.component.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/navigation/router.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/item-injector.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/combined-component-factory-resolver.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/item-loader.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/chrome/chrome.component.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/stepup/stepup.interceptor.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/stepup/stepup.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/session-timeout/session-timeout.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/rendering/root/root.component.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/directives/router-link.directive.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/directives/router-link-active.directive.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/directives/router-outlet.directive.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/routing/config/router-bootstrap.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/core-config.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/communication/pipes/handlers/memory.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/backbase-core.module.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/customizable/bb-template.service.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/stepup/stepup.module.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-core/session-timeout/session-timeout.module.ts","../../../../projects/backbase/foundation-ang/core/src/deprecated/start/register-single-app.ts","../../../../projects/backbase/foundation-ang/core/src/backbase-foundation-ang-core.ts"],"sourcesContent":["import { Injectable, Inject, InjectionToken, Optional, isDevMode } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { PAGE_CONFIG, PageConfig } from '@backbase/foundation-ang/web-sdk';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface AssetsConfiguration {\n  /**\n   * The name of the CX item containing the assets.\n   *\n   * This allows the assets to be packaged and served from one CX item, generally the app container item itself.\n   */\n  assetsStaticItemName: string;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type AssetIDResolver = (assetId: string) => string;\n/**\n * @deprecated Will be removed in v7.0.0\n * The method resolves an asset from a configured on the App level source\n * @param assetId id of the asset item to be resolved\n */\nexport type AssetsResolver = (assetId: string) => Observable<string>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface AssetsResolverConfig {\n  widgetName: string;\n  getURIFromAssetID: AssetIDResolver;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const CONFIG_ASSETS = new InjectionToken<AssetsConfiguration>(\n  '@backbase/foundation Assets Service Configuration',\n);\nconst DEFAULT_STATIC_ROOT = '/';\nconst DEFAULT_STATIC_ITEM_NAME = '';\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable()\nexport class AssetsService {\n  constructor(\n    @Optional()\n    @Inject(PAGE_CONFIG)\n    readonly pageConfig: PageConfig | null,\n    @Optional()\n    @Inject(CONFIG_ASSETS)\n    readonly assetsConfig: AssetsConfiguration | null,\n  ) {\n    if (!pageConfig && isDevMode()) {\n      console.warn(\n        `pageConfig is not provided which may impact the path that is resolving assets\n         please include *either* the 'WebSdkModule.forRoot(...)' in your AppModule (for CDN deployment) or WebSdkApiModule\n          (for CX deployment)`,\n      );\n    }\n  }\n\n  public createAssetsResolver(config: AssetsResolverConfig): AssetsResolver {\n    const widgetName = config.widgetName;\n    const assetsIdResolver = config.getURIFromAssetID;\n    const staticRoot = this.pageConfig ? this.pageConfig.staticResourcesRoot : DEFAULT_STATIC_ROOT;\n    const staticItemName = this.assetsConfig ? this.assetsConfig.assetsStaticItemName : DEFAULT_STATIC_ITEM_NAME;\n\n    return (assetId: string): Observable<string> => {\n      if (!assetId.length) {\n        return of('');\n      }\n      return of(\n        [staticRoot, staticItemName, 'assets', widgetName, assetsIdResolver(assetId)]\n          .filter(Boolean)\n          .map(str => str.replace(/\\/$/, ''))\n          .join('/'),\n      );\n    };\n  }\n}\n","import { Property, Properties } from '@backbase/foundation-ang/web-sdk';\n\nexport function equal(a: Property, b: Property): boolean {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a === b;\n}\n\n/**\n * Allow the processing of Properties as an array of pairs.\n *\n * @param process The processing to apply to the property pairs; mapping, filtering, etc.\n * @param properties\n */\nexport const propertiesAsPairs = (\n  process: (pairs: Array<[string, Property]>) => Array<[string, Property]>,\n  properties: Properties,\n): Properties => {\n  const pairs = process(Object.entries(properties));\n  return pairs.reduce(\n    (acc, [name, value]) => ({\n      ...acc,\n      [name]: value,\n    }),\n    {} as Properties,\n  );\n};\n\n/**\n * Returns a subset of the properties that start\n * with a given prefix, and also removes the prefix from the name\n * of the property.\n *\n * @param prefix\n * @param properties\n */\nexport const propertiesByPrefix = (prefix: string, properties: Properties): Properties =>\n  propertiesAsPairs(\n    pairs =>\n      pairs\n        .filter(([name]) => name.startsWith(prefix))\n        .map(([name, value]): [string, Property] => [name.substring(prefix.length), value]),\n    properties,\n  );\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { Properties } from '@backbase/foundation-ang/web-sdk';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppConfigService {\n  private readonly config = new BehaviorSubject<Properties>({});\n  private readonly propertyPrefix = 'AppConfig.';\n\n  get prefix() {\n    return this.propertyPrefix;\n  }\n\n  getConfig(): Observable<Properties> {\n    return this.config.asObservable();\n  }\n\n  setConfig(config: Properties) {\n    this.config.next(config);\n  }\n}\n","export const map = <T, R>(callbackfn: (value: T) => R, arr: Array<T>): Array<R> => arr.map<R>(callbackfn);\n\nexport const flatten = <T>(arr: Array<Array<T>>): Array<T> =>\n  arr.reduce((acc: Array<T>, a: Array<T>): Array<T> => [...acc, ...a], [] as Array<T>);\n\nexport const flatMap = <T, R>(callbackfn: (value: T) => Array<R>, arr: Array<T>): Array<R> =>\n  flatten<R>(map<T, Array<R>>(callbackfn, arr));\n\nexport const uniq = <T>(array: Array<T>): Array<T> => Array.from(new Set<T>(array));\nexport const hasDuplicates = (array: Array<unknown>): boolean => array.length !== uniq(array).length;\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is the length of the longer of two\n * lists. If one of the lists is shorter, the values will be set to \"undefined\".\n *\n * @param left\n * @param right\n */\nexport const pairs = <T, R>(left: Array<T>, right: Array<R>): Array<[T | undefined, R | undefined]> => {\n  const max = Math.max(left.length, right.length);\n  let idx = 0;\n\n  const returnZip: Array<[T | undefined, R | undefined]> = [];\n  while (idx < max) {\n    returnZip[idx] = [left[idx], right[idx]];\n    idx++;\n  }\n  return returnZip;\n};\n\n/**\n * This helper checks if the value is array of strings.\n * @param value a value to be evaluated\n * @returns true for array of strings and false for any other values\n */\nexport const isArrayOfStrings = (value: any): value is Array<string> =>\n  Array.isArray(value) && value.every(item => typeof item === 'string');\n","import { Item, Container } from '@backbase/foundation-ang/web-sdk';\n\n/**\n * This helper determines container objects from any other ones.\n * @param item an item to be evaluated\n * @returns true for containers and false for widgets and any other objects\n */\nexport const isContainer = (item: Item): item is Container =>\n  'name' in item && 'properties' in item && 'children' in item;\n\n/**\n * Returns the elements of a tree with the children that meet the condition specified in a predicate function.\n * @param item an item whose children need to be filtered\n * @param predicate the filter method called for each child. It should return boolean\n */\nexport const filterChildren = <T extends Item>(item: T, predicate: (child: Item) => boolean): T => {\n  return isContainer(item)\n    ? {\n        ...item,\n        children: item.children.map(child => filterChildren(child, predicate)).filter(predicate),\n      }\n    : item;\n};\n","import { flatMap, flatten } from './array';\nimport { LinkedList } from './linked-list';\nimport { Observable, merge, of, combineLatest } from 'rxjs';\nimport { map, scan, shareReplay, distinctUntilChanged, switchMap } from 'rxjs/operators';\n\nexport type ChildrenUpdateFn<T> = (acc: Array<ObservableTree<T>>) => Array<ObservableTree<T>>;\n\nconst treeValue = <T>(t: Tree<T>): T => t.value;\n\n/**\n * Abstract tree representation.\n */\nexport class Tree<T> {\n  constructor(\n    /**\n     * The value of this node\n     */\n    public value: T,\n    /**\n     * The children of this node\n     */\n    public children: Array<Tree<T>>,\n  ) {}\n\n  map<R>(callbackfn: (value: T, oldChildren: Array<T>, newChildren: Array<R>) => R): Tree<R> {\n    const newChildren: Array<Tree<R>> = this.children.map(childTree => childTree.map(callbackfn));\n    return new Tree(callbackfn(this.value, this.children.map(treeValue), newChildren.map(treeValue)), newChildren);\n  }\n\n  /**\n   * Flattens the tree into a flat array of tree nodes.\n   *\n   * The tree is flattened by in order of depth-first-preorder-traversal.\n   */\n  flatten(): Array<Tree<T>> {\n    return [this, ...flatMap(child => child.flatten(), this.children)];\n  }\n\n  pathTo(value: T): Array<T> {\n    if (this.value === value) {\n      return [this.value];\n    } else {\n      for (const child of this.children) {\n        const childPath = child.pathTo(value);\n        if (childPath.length !== 0) {\n          return [this.value, ...childPath];\n        }\n      }\n      return [];\n    }\n  }\n\n  lowestCommonAncestor(left: T, right: T): T | undefined {\n    const leftPath = new Set(this.pathTo(left));\n    return this.pathTo(right)\n      .reverse()\n      .find(candidate => leftPath.has(candidate));\n  }\n}\n\n/**\n * @description\n * This is an operator that can be used with an Observable's `pipe`.\n *\n * The piped observable should be an observable of an array.\n *\n * The source array is mapped over with the provided callback function, and the\n * callback function should take an item (T) from the source array, and return an\n * *observable* of a new item (R).\n *\n * The result is a new observable of an array the same length as the source array\n * but with the Ts mapped to Rs.\n *\n * This is useful for mapping over the observable children of node in the model tree.\n *\n * @usageNotes\n *\n * ### Example\n * ```\n * const children: ObservableTree<ItemModel> = this.model.children;\n * const titleProperties: Observable<Array<string>> = this.model.children.pipe(\n *   mapObservableArray(item => item.value.property<string>('title', 'Default Title'))\n * );\n * ```\n * @param callback Function that produces an *observable* element of the new Array\n */\nexport const mapObservableArray = function <T, R>(callback: (a: T) => Observable<R>) {\n  return (source: Observable<Array<T>>): Observable<Array<R>> => {\n    return source.pipe(switchMap((tArray: Array<T>) => combineLatest(tArray.map(callback))));\n  };\n};\n\n/**\n * An tree where each node's children are observable.\n */\nexport class ObservableTree<T> {\n  // Reducers to update children state\n  private readonly initialChildren: Observable<ChildrenUpdateFn<T>> = of((acc: Array<ObservableTree<T>>) => acc); // identity reducer for initial value\n  private readonly insertUpdates: Observable<ChildrenUpdateFn<T>> = this.insertions.pipe(\n    map((\n      { item, index }, // map inserts to reducer functions\n    ) => (children: Array<ObservableTree<T>>) => [...children.slice(0, index), item, ...children.slice(index)]),\n  );\n  private readonly removalUpdates: Observable<ChildrenUpdateFn<T>> = this.removals.pipe(\n    map((\n      index, // map removals to reducer funtions\n    ) => (children: Array<ObservableTree<T>>) => {\n      const newChildren = [...children];\n      newChildren.splice(index, 1);\n      return newChildren;\n    }),\n  );\n\n  // Combine reducers to a single stream\n  private readonly reducers: Observable<ChildrenUpdateFn<T>> = merge(\n    this.initialChildren,\n    this.insertUpdates,\n    this.removalUpdates,\n  );\n\n  /**\n   * The children of this node\n   */\n  readonly children: Observable<Array<ObservableTree<T>>>;\n\n  constructor(\n    /**\n     * The value of this node\n     */\n    public value: T,\n    initialChildren: Array<ObservableTree<T>>,\n    private readonly insertions: Observable<{ item: ObservableTree<T>; index: number }>,\n    private readonly removals: Observable<number>,\n  ) {\n    this.children = this.reducers.pipe(\n      scan<ChildrenUpdateFn<T>, Array<ObservableTree<T>>>(\n        (currentChildren: Array<ObservableTree<T>>, updateFn: ChildrenUpdateFn<T>) => updateFn(currentChildren),\n        initialChildren,\n      ),\n      shareReplay(1),\n    );\n  }\n\n  /**\n   * Find a node in the tree. Returns the result as an observable.\n   *\n   * If the element is found it is emitted, otherwise, the result emits undefined.\n   *\n   * The result observable will only emit again if the found node changes (ie: if\n   * it is added or removed, or if it finds a different node).\n   *\n   * @param predicate predicate is called once for each node of the tree, until a\n   * node is found. The predicate will be called again every time the tree changes\n   * (ie: a node in the tree is added or removed). The predicate is called in order\n   * of depth-first-preorder-traversal.\n   */\n  find(predicate: (value: T) => boolean): Observable<ObservableTree<T> | undefined> {\n    return this.flatten().pipe(\n      map(nodes => nodes.find(node => predicate(node.value))),\n      distinctUntilChanged(),\n    );\n  }\n\n  pathTo(value: T): Observable<Array<T>> {\n    return this.toTree().pipe(\n      map((tree: Tree<T>) => tree.pathTo(value)),\n      distinctUntilChanged(),\n    );\n  }\n\n  lowestCommonAncestor(left: T, right: T): Observable<T | undefined> {\n    return this.toTree().pipe(\n      map((tree: Tree<T>) => tree.lowestCommonAncestor(left, right)),\n      distinctUntilChanged(),\n    );\n  }\n\n  filter(predicate: (value: T) => boolean): Observable<Array<ObservableTree<T>>> {\n    return this.flatten().pipe(\n      map(nodes => nodes.filter(node => predicate(node.value))),\n      distinctUntilChanged(),\n    );\n  }\n\n  /**\n   * Flattens a tree into a single array of nodes. The result nodes are still trees.\n   *\n   * The tree is flattened in order of depth-first-preorder-traversal.\n   *\n   * The result is returned as an observable and re-emits every time a node is added\n   * or removed from the tree.\n   */\n  flatten(): Observable<Array<ObservableTree<T>>> {\n    return this.children.pipe(\n      switchMap(children => (children.length === 0 ? of([]) : combineLatest(children.map(child => child.flatten())))),\n      map<Array<Array<ObservableTree<T>>>, Array<ObservableTree<T>>>(flatten),\n      map(flat => [this, ...flat]),\n    );\n  }\n\n  /**\n   * Takes a snapshot of the tree.\n   */\n  toTree(): Observable<Tree<T>> {\n    return this.children.pipe(\n      switchMap(children => {\n        const mappedChildren$ = children.length === 0 ? of([]) : combineLatest(children.map(child => child.toTree()));\n        return mappedChildren$.pipe(map((mappedChildren: Array<Tree<T>>) => new Tree(this.value, mappedChildren)));\n      }),\n    );\n  }\n}\n\n/**\n * Like combineLatest in rxjs, but for a tree of observables, instead of\n * an array of observables.\n */\nexport function combineTree<T>(tree: Tree<Observable<T>>): Observable<Tree<T>> {\n  // Convert children from Array<Tree<Observable<T>>> to Observable<Array<Tree<T>>>\n  const children$: Observable<Array<Tree<T>>> =\n    tree.children.length === 0 ? of([]) : combineLatest(tree.children.map(combineTree));\n  return combineLatest([tree.value, children$]).pipe(\n    map(([value, children]: [T, Array<Tree<T>>]) => new Tree<T>(value, children)),\n  );\n}\n\n/**\n * Describes a more generic tree than our \"Tree\" type.\n *\n * This is useful for performing operations on different\n * \"tree\" implementations.\n *\n * For example, this is type which describes an angular\n * `Route` as our generic tree type:\n * `type AngularRouteTree = GenericTree<Route>;`\n *\n * And this describes our `ComponentRouteTree`\n * `type ComponentTree = GenericTree<Tree<ItemRoutes>>;\n */\nexport type GenericTree<T> = T & {\n  children?: Array<GenericTree<T>>;\n};\n\n/**\n * Extracts a branch from a tree that starts at the root, and ends at the leaf\n * node, as determined by the predicate (returns a linked list).\n *\n * If the element is not found, the result is undefined.\n *\n * @param predicate predicate is called once for each node of the tree, until a\n * node is found. The predicate is called in order of depth-first-preorder-traversal.\n */\nexport const treeBranch = <T>(\n  tree: GenericTree<T>,\n  predicate: (value: T, index?: number, parent?: T) => boolean,\n): LinkedList<T> | undefined => {\n  const walkTree = (\n    treeInner: GenericTree<T>,\n    index?: number,\n    parentTree?: GenericTree<T>,\n  ): LinkedList<T> | undefined => {\n    if (predicate(treeInner, index, parentTree)) {\n      return {\n        value: treeInner,\n      };\n    }\n\n    if (!treeInner.children) {\n      return undefined;\n    }\n\n    for (let i = 0; i < treeInner.children.length; i++) {\n      const foundInChild = walkTree(treeInner.children[i], i, treeInner);\n      if (foundInChild) {\n        return {\n          value: treeInner,\n          next: foundInChild,\n        };\n      }\n    }\n\n    return undefined;\n  };\n\n  return walkTree(tree);\n};\n","import { Properties, Property } from '@backbase/foundation-ang/web-sdk';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, scan, shareReplay, startWith } from 'rxjs/operators';\nimport { equal, propertiesByPrefix, propertiesAsPairs } from '../../web-sdk/properties';\nimport { ObservableTree } from './tree';\n\nexport type ItemName = string;\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport class ItemModel {\n  /**\n   * Name of the page instance of Backbase Item\n   */\n  readonly name: ItemName;\n  /**\n   * Properties of Backbase Item\n   */\n  readonly properties: Observable<Properties>;\n\n  /**\n   * The classId of the component that will render this item.\n   * @internal\n   */\n  readonly ɵclassId: string;\n\n  /**\n   * The property definitions for this item.\n   * @internal\n   */\n  readonly ɵproperties: Properties;\n\n  /**\n   * The input handlers for this item.\n   * @internal\n   */\n  readonly ɵinputProperties: Properties;\n\n  /**\n   * The output handlers for this item.\n   * @internal\n   */\n  readonly ɵoutputProperties: Properties;\n\n  constructor(name: ItemName, initialProperties: Properties, propertyUpdates: Observable<Properties>) {\n    this.name = name;\n\n    const applyPropertyUpdate = (currentProperties: Properties, update: Properties): Properties => {\n      return { ...currentProperties, ...update };\n    };\n\n    this.properties = propertyUpdates.pipe(startWith(initialProperties), scan(applyPropertyUpdate), shareReplay(1));\n\n    if (initialProperties.classId === undefined) {\n      throw new Error(`Missing classId property for ${name}`);\n    }\n\n    this.ɵclassId = initialProperties.classId as string;\n    this.ɵoutputProperties = this.outputProperties(initialProperties);\n    this.ɵinputProperties = this.inputProperties(initialProperties);\n    this.ɵproperties = this.nonIOProperties(initialProperties);\n  }\n\n  property<T extends Property>(propertyName: string, defaultValue: T): Observable<T>;\n  property<T extends Property>(propertyName: string): Observable<T | undefined>;\n  property(propertyName: string, defaultValue?: Property): Observable<Property | undefined> {\n    return this.properties.pipe<Property | undefined, Property | undefined, Property | undefined>(\n      pluck(propertyName),\n      map(propertyValue => (propertyValue === undefined || propertyValue === null ? defaultValue : propertyValue)),\n      distinctUntilChanged((a, b) => {\n        if (a === undefined && b === undefined) {\n          return true;\n        }\n        if (a === undefined) {\n          return false;\n        }\n        if (b === undefined) {\n          return false;\n        }\n        return equal(a, b);\n      }),\n    );\n  }\n\n  private outputProperties(properties: Properties): Properties {\n    return propertiesByPrefix('output.', properties);\n  }\n\n  private inputProperties(properties: Properties): Properties {\n    return propertiesByPrefix('input.', properties);\n  }\n\n  private nonIOProperties(properties: Properties): Properties {\n    return propertiesAsPairs(\n      pairs => pairs.filter(([name]) => !name.startsWith('input.') && !name.startsWith('output.')),\n      properties,\n    );\n  }\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport class ItemModelTree extends ObservableTree<ItemModel> {}\n","import { Injectable } from '@angular/core';\nimport { CommunicationDefinition, serializerDeserializer } from '@backbase/communication-property';\nimport { Observable, BehaviorSubject, Subject, of as observableOf, merge, combineLatest } from 'rxjs';\nimport { map, filter, pluck, shareReplay, switchMap } from 'rxjs/operators';\nimport { ItemLocation, Item, Properties, Container } from '@backbase/foundation-ang/web-sdk';\nimport { isContainer } from './item-model-utils';\nimport { ItemModel } from '../models/item-model';\nimport { ObservableTree } from '../models/tree';\n\nexport const ROOT_COMPONENT_CLASS_ID = 'RootComponent';\nconst DEFAULT_ROOT_NAME = 'bb-root-empty';\n\nexport interface InsertUpdate {\n  item: Item;\n  itemLocation: ItemLocation;\n}\nexport interface PropertyUpdate {\n  name: string;\n  properties: Properties;\n}\nexport type RemovalUpdate = ItemLocation;\nexport type ModelUpdate = InsertUpdate | PropertyUpdate | RemovalUpdate;\n\nexport const isInsert = (update: ModelUpdate): update is InsertUpdate =>\n  !!((update as InsertUpdate).item && (update as InsertUpdate).itemLocation);\n\nexport const isPropertyUpdate = (update: ModelUpdate): update is PropertyUpdate =>\n  !!((update as PropertyUpdate).name && (update as PropertyUpdate).properties);\n\nexport const isRemovalUpdate = (update: ModelUpdate): update is Exclude<RemovalUpdate, undefined> =>\n  !!(update && 'parentName' in update && 'index' in update);\n\nclass CommunicationInputs {\n  constructor(private readonly properties: Map<string, CommunicationDefinition>) {}\n\n  static fromProperties(properties: Properties): CommunicationInputs {\n    return new CommunicationInputs(\n      new Map(\n        Object.entries(properties)\n          .filter((property): property is [string, string] => typeof property[1] === 'string')\n          .map(([propertyName, propertyValue]) => [propertyName, serializerDeserializer.fromProperty(propertyValue)])\n          .filter((property): property is [string, CommunicationDefinition] => property[1] !== undefined),\n      ),\n    );\n  }\n\n  hasInputFor(communicationDefinition: CommunicationDefinition): boolean {\n    return (\n      Array.from(this.properties.values()).find(candidate => communicationDefinition.equals(candidate)) !== undefined\n    );\n  }\n}\n\n/**\n * The root container is basically the page model, but we don't assume that the\n * angular app is the entire page. It could just be a subset of the page model,\n * hence we call it \"root container\"\n *\n * @internal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ӨRootContainerService {\n  // The websdk commands mapped to observables.\n  private readonly propertyUpdates = new Subject<PropertyUpdate>();\n  private readonly inserts = new Subject<InsertUpdate>();\n  private readonly removals = new Subject<RemovalUpdate>();\n\n  public readonly modelUpdates: Observable<ModelUpdate> = merge(this.propertyUpdates, this.inserts, this.removals);\n\n  private readonly defaultValue: Container = {\n    name: DEFAULT_ROOT_NAME,\n    properties: { classId: ROOT_COMPONENT_CLASS_ID },\n    children: [],\n  };\n\n  private readonly rootContainerItem = new BehaviorSubject<Container>(this.defaultValue);\n\n  public model: Observable<ObservableTree<ItemModel>> = this.rootContainerItem.pipe(\n    filter(container => !this.isDefaultContainer(container.name)), // skip the empty state\n    map(c => this.createInitialModelState(c)),\n    shareReplay(1),\n  );\n\n  private createInitialModelState({ name, properties, children }: Container): ObservableTree<ItemModel> {\n    const initialRootContainerProperties = {\n      ...properties,\n      classId: ROOT_COMPONENT_CLASS_ID,\n    };\n    return this.createModelStateNode({\n      name,\n      properties: initialRootContainerProperties,\n      children,\n    });\n  }\n\n  private createModelStateNode(item: Item): ObservableTree<ItemModel> {\n    // Filter property updates to just the updates for this item.\n    const propertyUpdates: Observable<Properties> = this.propertyUpdates.pipe(\n      filter(update => update.name === item.name),\n      pluck('properties'),\n    );\n\n    // Recursively create the children.\n    const childNodes: Array<ObservableTree<ItemModel>> = isContainer(item)\n      ? item.children.map(this.createModelStateNode.bind(this))\n      : [];\n\n    let insertions: Observable<{\n      item: ObservableTree<ItemModel>;\n      index: number;\n    }>;\n    let removals: Observable<number>;\n\n    if (isContainer(item)) {\n      // Filter container updates for this item (inserts and removes)\n      insertions = this.inserts.pipe(\n        filter(insert => !!insert.itemLocation && insert.itemLocation.parentName === item.name),\n        map(insert => ({\n          item: this.createModelStateNode(insert.item),\n          index: insert.itemLocation ? insert.itemLocation.index : 0,\n        })),\n      );\n\n      removals = this.removals.pipe(\n        filter((removal: ItemLocation): boolean => !!removal && removal.parentName === item.name),\n        pluck('index'),\n      );\n    } else {\n      insertions = observableOf();\n      removals = observableOf();\n    }\n\n    // Create the node itself.\n    return new ObservableTree<ItemModel>(\n      new ItemModel(item.name, item.properties, propertyUpdates),\n      childNodes,\n      insertions,\n      removals,\n    );\n  }\n\n  private get rootName() {\n    return this.rootContainerItem.getValue().name;\n  }\n\n  private isDefaultContainer(name: string) {\n    return name === DEFAULT_ROOT_NAME;\n  }\n\n  isBootstrapped() {\n    return !this.isDefaultContainer(this.rootName);\n  }\n\n  updateItem(name: string, properties: Partial<Properties>) {\n    this.propertyUpdates.next({ name, properties: properties as Properties });\n  }\n\n  insertItem(item: Item, itemLocation: ItemLocation) {\n    if (!this.isBootstrapped()) {\n      this.rootContainerItem.next(item as Container);\n    } else {\n      this.inserts.next({ item, itemLocation });\n    }\n  }\n\n  removeItem(itemName: string, itemLocation: ItemLocation) {\n    if (this.rootName === itemName) {\n      this.rootContainerItem.next(this.defaultValue);\n    } else {\n      this.removals.next(itemLocation);\n    }\n  }\n\n  private filter(predicate: (value: ItemModel) => boolean): Observable<Array<ObservableTree<ItemModel>>> {\n    return this.model.pipe(switchMap(model => model.filter(predicate)));\n  }\n\n  private getCommunicationGroupItems(groupDefinition: CommunicationDefinition): Observable<Array<ItemModel>> {\n    return this.filter((item: ItemModel) =>\n      CommunicationInputs.fromProperties(item.ɵinputProperties).hasInputFor(groupDefinition),\n    ).pipe(map(nodes => nodes.map(node => node.value)));\n  }\n\n  // The only case where there will not be a common ancestor (i.e. return `undefined`) is if there are\n  // no items with inputs in the communication group.\n  commonAncestor(groupDefinition: CommunicationDefinition): Observable<ItemModel | undefined> {\n    return combineLatest([\n      this.model.pipe(switchMap(model => model.toTree())),\n      this.getCommunicationGroupItems(groupDefinition),\n    ]).pipe(\n      map(([tree, [first, ...items]]) => {\n        let lowest: ItemModel | undefined = first;\n        for (const item of items) {\n          const newLowest = tree.lowestCommonAncestor(lowest, item);\n          if (newLowest === undefined) {\n            return undefined;\n          } else {\n            lowest = newLowest;\n          }\n        }\n        return lowest;\n      }),\n    );\n  }\n}\n","import { Injectable, ComponentRef } from '@angular/core';\nimport { ItemModel } from '../models/item-model';\nimport { ObservableTree } from '../models/observable-tree.interface';\nimport { Subject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport enum LifecycleEventKind {\n  Create = 'create',\n  Remove = 'remove',\n}\n\nexport interface LifecycleEvent {\n  kind: LifecycleEventKind;\n  itemModel: ObservableTree<ItemModel>;\n  component: ComponentRef<any>;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemLifecycleService {\n  private readonly lifecycleEvents: Subject<LifecycleEvent> = new Subject();\n\n  onCreate(itemModel: ObservableTree<ItemModel>, component: ComponentRef<any>) {\n    this.lifecycleEvents.next({\n      kind: LifecycleEventKind.Create,\n      itemModel,\n      component,\n    });\n  }\n\n  onRemove(itemModel: ObservableTree<ItemModel>, component: ComponentRef<any>) {\n    this.lifecycleEvents.next({\n      kind: LifecycleEventKind.Remove,\n      itemModel,\n      component,\n    });\n  }\n\n  fromItem(name: string): Observable<LifecycleEvent> {\n    return this.lifecycleEvents.pipe(filter((lcEvent: LifecycleEvent) => name === lcEvent.itemModel.value.name));\n  }\n\n  whenCreate(name?: string): Observable<LifecycleEvent> {\n    const nameFilter = name ? (currentName: string) => currentName === name : () => true;\n    return this.lifecycleEvents.pipe(\n      filter(\n        (lcEvent: LifecycleEvent) =>\n          LifecycleEventKind.Create === lcEvent.kind && nameFilter(lcEvent.itemModel.value.name),\n      ),\n    );\n  }\n\n  whenRemove(name?: string): Observable<LifecycleEvent> {\n    const nameFilter = name ? (currentName: string) => currentName === name : () => true;\n    return this.lifecycleEvents.pipe(\n      filter(\n        (lcEvent: LifecycleEvent) =>\n          LifecycleEventKind.Remove === lcEvent.kind && nameFilter(lcEvent.itemModel.value.name),\n      ),\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Item, ItemLocation, Properties, Property, RenderingStrategy } from '@backbase/foundation-ang/web-sdk';\nimport { ConnectableObservable, Observable } from 'rxjs';\nimport { debounceTime, mapTo, publishReplay, take } from 'rxjs/operators';\nimport { propertiesByPrefix } from '../../web-sdk/properties';\nimport { AppConfigService } from '../models/app-config.service';\nimport { isArrayOfStrings } from '../models/array';\nimport { filterChildren } from '../models/item-model-utils';\nimport { ӨRootContainerService } from '../models/root-container.service';\nimport { ItemLifecycleService, LifecycleEvent } from '../rendering/item-lifecycle.service';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const isRootContainerItem = (item: Item): boolean => !item.properties || !item.properties.classId;\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable()\nexport class BackbaseConnector implements RenderingStrategy {\n  /**\n   * BackbaseConnectorService constructor\n   * @param zone NgZone to be used for manipulations with an item\n   * @param componentInjectors Backbase core components injector service to handle the model\n   */\n  constructor(\n    private readonly zone: NgZone,\n    private readonly appConfig: AppConfigService,\n    private readonly rootContainer: ӨRootContainerService,\n    private readonly lifeCycle: ItemLifecycleService,\n  ) {}\n\n  private filterItem(item: Item): Item {\n    const features = propertiesByPrefix(this.appConfig.prefix, item.properties);\n    this.appConfig.setConfig(features);\n    return filterChildren(item, child => {\n      const itemFeatures: Property = child.properties.features;\n      return (\n        !itemFeatures ||\n        !isArrayOfStrings(itemFeatures) ||\n        itemFeatures.some(requiredFeature => features[requiredFeature] !== false)\n      );\n    });\n  }\n\n  /**\n   * Bootstrap function to be called on page model initialization,\n   * and when new item added to the model (dropped on the page).\n   * @param item Item to bootstrap\n   * @param itemLocation Location of the item\n   */\n  bootstrap(item: Item, itemLocation: ItemLocation): Promise<boolean | void> {\n    return this.zone.run(() => {\n      let event: Observable<LifecycleEvent>;\n      if (isRootContainerItem(item)) {\n        event = this.lifeCycle.whenCreate(undefined).pipe(publishReplay(1));\n      } else {\n        event = this.lifeCycle.fromItem(item.name).pipe(publishReplay(1));\n      }\n      (event as ConnectableObservable<LifecycleEvent>).connect();\n      const itemToInsert = this.rootContainer.isBootstrapped() ? item : this.filterItem(item);\n      this.rootContainer.insertItem(itemToInsert, itemLocation);\n      return event.pipe(take(1), mapTo(true)).toPromise();\n    });\n  }\n\n  /**\n   * Update function will be called when properties are changed for\n   * one of the existing items on a page.\n   * @param item Updated item\n   * @param itemLocation Location of the item\n   * @param changes Object which contains only changed properties and their values\n   */\n  update(item: Item, _: ItemLocation, itemProperties: Partial<Properties>): Promise<void> {\n    return this.zone.run(() => {\n      this.rootContainer.updateItem(item.name, itemProperties);\n      return this.lifeCycle.fromItem(item.name).pipe(take(1), mapTo(undefined)).toPromise();\n    });\n  }\n\n  /**\n   * Remove function will be called when existing item is removed from the page.\n   * @param item Item to remove\n   * @param itemLocation Location of the item\n   */\n  remove(item: Item, itemLocation: ItemLocation): Promise<void> {\n    return this.zone.run(() => {\n      this.rootContainer.removeItem(item.name, itemLocation);\n      return this.lifeCycle.whenRemove().pipe(debounceTime(20), take(1), mapTo(undefined)).toPromise();\n    });\n  }\n}\n","import { InjectionToken, NgModuleFactory, Type } from '@angular/core';\n\n/**\n * Lazy Loading callback\n * Callback function that can be used to dynamically load lazy load bundles.\n */\nexport type LazyLoadCallback = () => Promise<NgModuleFactory<unknown> | Type<unknown>>;\n\n/**\n * Lazy Loading configuration item\n * It defines a list of components (array of strings),\n * and a callback function that can be used to\n * lazy load a bundle containing those components.\n */\nexport interface LazyComponentsConfig {\n  components: Array<string>;\n  loadChildren: LazyLoadCallback;\n}\n\nexport interface LazyModuleConfig {\n  module: string;\n  loadChildren: LazyLoadCallback;\n}\n\nexport type LazyConfigItem = LazyComponentsConfig | LazyModuleConfig;\n\nexport const LAZY_MAP = new InjectionToken<LazyConfig>('Lazy load map');\n\n/**\n * Backbase Lazy Loading configuration\n * Array of `LazyConfigItem` objects used to define which lazy\n * loading bundle should be loaded for a specific component.\n */\n\nexport type LazyConfig = Array<LazyConfigItem>;\n","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { LoadChildrenCallback } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { LazyConfigItem, LazyModuleConfig, LAZY_MAP } from './lazy-config';\n\nexport type ComponentClass<T> = new (...args: Array<any>) => T;\n\nexport interface ComponentMap {\n  [key: string]: ComponentClass<any>;\n}\n\n/**\n * ComponentRegistry configuration injection token\n */\nexport const CONFIG_COMPONENT_CLASS_MAP = new InjectionToken<Map<string, ComponentClass<any>>>(\n  '@backbase/foundation Components Registry',\n);\n\n/**\n * ItemRegistryService stores a hashMap\n * of the components included into the app and\n * avaliable for usage. It's meant to be an extension\n * point which is used by a developer.\n */\n@Injectable()\nexport class ItemRegistryService {\n  private readonly itemRegistry: BehaviorSubject<Map<string, ComponentClass<any>>>;\n  private readonly lazyModuleConfig: Array<LazyModuleConfig>;\n\n  /**\n   * ItemRegistryService constructor which allows to define components\n   * included into application\n   * @param ComponentRegistry a hashMap of the component classes to be added\n   */\n  constructor(\n    @Inject(CONFIG_COMPONENT_CLASS_MAP)\n    @Optional()\n    classMaps: Array<ComponentMap> | undefined,\n    @Inject(LAZY_MAP)\n    @Optional()\n    lazyConfig: Array<LazyConfigItem> | null,\n  ) {\n    this.itemRegistry = new BehaviorSubject(\n      new Map<string, ComponentClass<any>>(\n        classMaps\n          ? classMaps.reduce(\n              (acc: Array<[string, ComponentClass<any>]>, classMap) => [...acc, ...Object.entries(classMap)],\n              [],\n            )\n          : undefined,\n      ),\n    );\n\n    this.lazyModuleConfig = (lazyConfig || []).filter(isLazyModuleConfig);\n  }\n\n  entries() {\n    return Array.from(this.itemRegistry.value.entries());\n  }\n\n  add(classId: string, componentClass: ComponentClass<any>) {\n    this.itemRegistry.next(new Map([...this.entries(), [classId, componentClass]]));\n  }\n\n  has(classId: string): boolean {\n    return this.itemRegistry.value.has(classId);\n  }\n\n  /**\n   * This method allows to retrieve Component by it's classId\n   * @param classId classId key to get a component class\n   * @returns componentType to be used by a ComponentFactoryResolver\n   */\n  getComponentValue(classId: string): ComponentClass<any> | undefined {\n    return this.itemRegistry.value.get(classId);\n  }\n\n  getComponent(classId: string): Promise<ComponentClass<any>> {\n    return this.itemRegistry\n      .pipe(\n        map(registry => registry.get(classId)),\n        filter((componentClass): componentClass is ComponentClass<any> => componentClass !== undefined),\n        take(1),\n      )\n      .toPromise();\n  }\n\n  getModuleLoader(classId: string): LoadChildrenCallback | undefined {\n    const lazyModuleConfigItem = this.lazyModuleConfig.find(config => config.module === classId);\n    return lazyModuleConfigItem && lazyModuleConfigItem.loadChildren;\n  }\n}\n\nfunction isLazyModuleConfig(config: LazyConfigItem): config is LazyModuleConfig {\n  return !!(config as LazyModuleConfig).module;\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Route, Data } from '@angular/router';\nimport { pluck, switchMap, filter } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { ItemModel, ItemModelTree } from '../../models/item-model';\nimport { ObservableTree } from '../../models/tree';\nimport { ItemRegistryService } from '../../rendering/item-registry.service';\n\n@Component({\n  selector: 'bb-route',\n  template: `\n    <ng-container *ngIf=\"item | async as item\">\n      <router-outlet *ngIf=\"isModule(item.value); else renderModel\"></router-outlet>\n      <ng-template #renderModel><bb-chrome [item]=\"item\"></bb-chrome></ng-template>\n    </ng-container>\n  `,\n})\nexport class RouteComponent {\n  item: Observable<ObservableTree<ItemModel>> = this.route.data.pipe(\n    pluck<Data, string>('renderChild'),\n    switchMap(renderChild => this.tree.find(item => item.name === renderChild)),\n    filter((a: ObservableTree<ItemModel> | undefined): a is ObservableTree<ItemModel> => a !== undefined),\n  );\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly tree: ItemModelTree,\n    private itemRegistry: ItemRegistryService,\n  ) {}\n\n  static isItemInRoute(itemName: string, route: Route) {\n    if (!route.data || !route.data.renderChild) {\n      throw new Error(`@backbase/foundation Invalid route for RouteComponent. Missing data renderChild: ${route}`);\n    }\n    return route.data.renderChild === itemName;\n  }\n\n  /**\n   * @internal\n   */\n  isModule(model: ItemModel) {\n    return !!this.itemRegistry.getModuleLoader(model.ɵclassId);\n  }\n}\n","import { Route, Routes } from '@angular/router';\nimport { RouteComponent } from '../components/route.component';\nimport { RoutingStrategy } from './routing-decorators';\nimport { ItemRoutes } from '../config/routing-tree';\nimport { RoutableItem } from '../config/routable-item-tree';\n\nexport class DefaultContainerStrategy implements RoutingStrategy {\n  private itemRoutePath(route: string | undefined, index: number): string {\n    if (route) {\n      return route;\n    }\n    return (index + 1).toString();\n  }\n\n  // routes is guaranteed to have 1 item, but I don't know how to type that\n  private defaultRoute(routes: Routes): Route {\n    const defaultRoute = routes[0];\n    // Default behaviour, redirect to the first tab (primary route).\n    return {\n      path: '',\n      redirectTo: defaultRoute.path,\n      pathMatch: 'full',\n    };\n  }\n\n  private itemRoute(child: RoutableItem, childrenRoutes: Routes, index: number): Route {\n    return {\n      path: this.itemRoutePath(child.route, index),\n      component: RouteComponent,\n      canActivate: child.canActivate,\n      data: {\n        renderChild: child.name,\n        custom: child.routeData,\n      },\n      children: childrenRoutes,\n    };\n  }\n\n  private findChildrenRoutes(childrenItemRoutes: Array<ItemRoutes>, item: RoutableItem): Routes {\n    const itemRoutes = childrenItemRoutes.find(child => child.item === item.name);\n    return itemRoutes ? itemRoutes.routes : [];\n  }\n\n  private childrenRoutes(children: Array<RoutableItem>, childrenItemRoutes: Array<ItemRoutes>): Routes {\n    return children.map((child, index) =>\n      this.itemRoute(child, this.findChildrenRoutes(childrenItemRoutes, child), index),\n    );\n  }\n\n  getRoutes(item: RoutableItem, children: Array<RoutableItem>, childrenRoutes: Array<ItemRoutes>): Routes {\n    const childRoutes = this.childrenRoutes(children, childrenRoutes);\n    const defaultRoutes = childRoutes.length && item.hasDefault ? [this.defaultRoute(childRoutes)] : [];\n    const routes: Routes = [...childRoutes, ...defaultRoutes];\n    if (item.canActivateChild.length) {\n      return [\n        {\n          path: '',\n          canActivateChild: item.canActivateChild,\n          children: routes,\n        },\n      ];\n    } else {\n      return routes;\n    }\n  }\n}\n","import { Routes } from '@angular/router';\nimport { RoutingStrategy, WidgetRoute } from './routing-decorators';\n\nexport class StaticRoutesStrategy implements RoutingStrategy {\n  constructor(private readonly routes: Array<WidgetRoute> = []) {}\n\n  getRoutes(): Routes {\n    return this.routes;\n  }\n}\n","import { Routes, Route } from '@angular/router';\nimport { DefaultContainerStrategy } from './default-container-strategy';\nimport { StaticRoutesStrategy } from './static-routes-strategy';\nimport { RouteComponent } from '../components/route.component';\nimport { ItemRoutes } from '../config/routing-tree';\nimport { RoutableItem } from '../config/routable-item-tree';\n\n/**\n * Symbol used to keep internal Backbase routing information\n * in an Angular component class\n */\nexport const routingStrategyField = Symbol('ΩRoutingStrategy');\n\n/**\n * RoutingStrategyToken enum with routing strategy tokens\n */\nexport enum RoutingStrategyToken {\n  STATIC = 'StaticRoutesStrategy',\n  CONTAINERS = 'DefaultContainerStrategy',\n}\n\n/**\n * RoutingStrategyDefinition represents a set of avaliable\n * strategies for Backbase routing\n */\nexport type RoutingStrategyDefinition =\n  | { token: RoutingStrategyToken.CONTAINERS }\n  | { token: RoutingStrategyToken.STATIC; routes: WidgetRoutes };\n\n/**\n * RoutableComponentClass interface represents components which are\n * decorated with @RoutableWidget and can be used for @CopyRoute in a\n * wrapper widget (as a part of customisation).\n */\nexport interface RoutableComponentClass {\n  new (...args: Array<any>): {};\n  [routingStrategyField]?: RoutingStrategyDefinition;\n}\n\n/**\n * RoutableContainer decorator is used to mark an item as\n * routable. It makes the routing config service to use default\n * strategy for containers.\n */\nexport function RoutableContainer() {\n  return function <T extends new (...args: Array<any>) => {}>(constructor: T) {\n    (constructor as any)[routingStrategyField] = {\n      token: RoutingStrategyToken.CONTAINERS,\n    };\n    return constructor;\n  };\n}\n\n/**\n * WidgetRoute is a subset of Angular's Route interface but we only support a few select properties.\n *\n * We only support a selection of these properties so we can guarantee they work. If you would like\n * to have support added for additional Route properties, please request it and we will investigate\n * adding support for it.\n */\nexport interface WidgetRoute\n  extends Pick<Route, 'path' | 'component' | 'redirectTo' | 'pathMatch' | 'outlet' | 'canDeactivate'> {}\n\n/**\n * Please note that we have deprecated support for Routes. Please stick to using only the supported\n * `WidgetRoute` interface instead.\n */\nexport type WidgetRoutes = Routes | Array<WidgetRoute>;\n\n/**\n * Configuration interface for RoutableWidget decorator\n */\nexport interface RoutableWidgetConfig {\n  /**\n   * Angular router configuration\n   */\n  routes: WidgetRoutes;\n}\n\n/**\n * RoutableWidget decorator is used to define widget's internal routes.\n *\n * @usageNotes\n *\n * ### Example\n * ```\n * @Component({\n *   selector: 'bb-todo-widget',\n *   template: `\n *     <bb-router-outlet></bb-router-outlet>\n *   `,\n *   changeDetection: ChangeDetectionStrategy.OnPush,\n *   providers: [RouterService, TodoNavigationService],\n * })\n * @RoutableWidget({\n *   routes: [\n *     { path: '', component: TodoListContainerComponent },\n *     { path: ':id', component: TodoDetailContainerComponent },\n *     { path: 'edit/:id', component: TodoFormContainerComponent },\n *   ],\n * })\n * export class TodoWidgetComponent {}\n * ```\n *\n * @param config Configuration object of the RoutableWidget decorator\n */\nexport function RoutableWidget(config: RoutableWidgetConfig) {\n  return function <T extends new (...args: Array<any>) => {}>(constructor: T) {\n    (constructor as any)[routingStrategyField] = {\n      token: RoutingStrategyToken.STATIC,\n      routes: config.routes,\n    };\n    return constructor;\n  };\n}\n\nexport interface RoutingStrategy {\n  getRoutes(model: RoutableItem, children: Array<RoutableItem>, childRoutes: Array<ItemRoutes>): Routes;\n}\n\nexport interface RouteComponentStrategy {\n  isItemInRoute(itemName: string, route: Route): boolean;\n}\n\nexport const createRouteComponentStrategy = (component: any): RouteComponentStrategy => {\n  const isItemInRoute = component === RouteComponent ? component.isItemInRoute : () => false;\n  return {\n    isItemInRoute,\n  };\n};\n\nexport const createRoutingStrategy = (componentClass: RoutableComponentClass): RoutingStrategy | undefined => {\n  const strategy = componentClass[routingStrategyField];\n  if (strategy === undefined) {\n    return undefined;\n  }\n  switch (strategy.token) {\n    case RoutingStrategyToken.CONTAINERS:\n      return new DefaultContainerStrategy();\n    case RoutingStrategyToken.STATIC:\n      return new StaticRoutesStrategy(strategy.routes);\n    default:\n      return undefined;\n  }\n};\n\nexport const isRoutableItem = (componentClass: RoutableComponentClass): boolean => {\n  const strategy = componentClass[routingStrategyField];\n  return (\n    !!strategy &&\n    strategy.token &&\n    (strategy.token === RoutingStrategyToken.CONTAINERS || strategy.token === RoutingStrategyToken.STATIC)\n  );\n};\n\n/**\n * CopyRoutes decorator is used to re-use the internal routing configuration from an existing widget.\n *\n * @usageNotes\n *\n * ### Example\n * ```\n * @Component({\n *   selector: 'my-todo-widget',\n *   template: `\n *     <h1>My Custom Todo Widget</h1>\n *     <bb-router-outlet></bb-router-outlet>\n *   `,\n * })\n * @CopyRoutes(TodoWidgetComponent)\n * export class MyTodoWidgetComponent {}\n * ```\n *\n * @param from The Widget Component class from which to copy the routing configuration\n */\n// Note: `from` should be `{ [routingStrategyField]: RoutingStrategyDefinition }` but the type checker\n// can't resolve properties dynamically added by decorators.\nexport function CopyRoutes(\n  componentClass: RoutableComponentClass,\n  customize: (routes: WidgetRoutes) => WidgetRoutes = routes => routes,\n) {\n  return function <T extends RoutableComponentClass>(constructor: T) {\n    const definition = componentClass[routingStrategyField];\n    if (definition === undefined || definition.token !== RoutingStrategyToken.STATIC) {\n      return constructor;\n    }\n    (constructor as any)[routingStrategyField] = {\n      token: RoutingStrategyToken.STATIC,\n      routes: customize(definition.routes),\n    };\n    return constructor;\n  };\n}\n","import { PRIMARY_OUTLET } from '@angular/router';\nimport { Tree } from '../../models/tree';\nimport { flatMap } from '../../models/array';\nimport { ItemName } from '../../models/item-model';\nimport { RoutableItem } from './routable-item-tree';\n\n/**\n * Special type to flag an outlet as having a collision. This\n * enables us to create the outlet tree, and name the outlet, but\n * also flag the item as having a collision with another item.\n */\nexport class OutletCollision {\n  constructor(public outletName: string, public itemName: ItemName, public collisionWith: ItemName) {}\n}\n\nexport type OutletName = string | OutletCollision;\n\nexport interface ItemOutlet {\n  name: ItemName;\n  outlet?: OutletName;\n}\n\n/**\n * A mapping of the component tree, and their outlet configuration.\n * Because this tree isn't flattened, it hasn't had outlet collisions\n * resolved yet.\n */\nexport type OutletTree = Tree<ItemOutlet>;\n\n/**\n * A flattened tree of only routable items, and their outlets.\n *\n * This is a tree with outlet collisions resolved.\n *\n * Because flattening the tree can make multiple trees, this\n * interface is used to aggregate all the flattened (root) trees.\n */\nexport interface RoutableOutletTree {\n  rootItem: ItemName;\n  children: Array<Tree<RoutableItemOutlet>>;\n}\n\nexport interface RoutableItemOutlet {\n  item: ItemName;\n  outlet: OutletName;\n}\n\nexport type OutletMap = Map<ItemName, OutletName>;\n\nconst isValidOutlet = (outlet: string | undefined): boolean => outlet !== undefined && outlet !== '';\n\nconst outletCollision = (outletItem: RoutableItemOutlet, collisionWith: RoutableItemOutlet): RoutableItemOutlet => {\n  return {\n    item: outletItem.item,\n    outlet: new OutletCollision(`ɵ${outletItem.item}`, outletItem.item, collisionWith.item),\n  };\n};\n\nconst flattenOutletTreeNode = (node: OutletTree): Array<Tree<RoutableItemOutlet>> => {\n  const flattenedChildren = flatMap<OutletTree, Tree<RoutableItemOutlet>>(flattenOutletTreeNode, node.children);\n\n  if (node.value.outlet !== undefined) {\n    // not routable\n    // Don't flatten this node (just it's children)\n    return [new Tree({ item: node.value.name, outlet: node.value.outlet }, flattenedChildren)];\n  } else {\n    // Flatten this node\n    return flattenedChildren.reduce((acc, nextChild) => {\n      const collisionWith = acc.find(child => child.value.outlet === nextChild.value.outlet);\n      const newChild = collisionWith\n        ? new Tree(outletCollision(nextChild.value, collisionWith.value), nextChild.children)\n        : nextChild;\n      return [...acc, newChild];\n    }, [] as Array<Tree<RoutableItemOutlet>>);\n  }\n};\n\n/**\n * Special case for flattening the root node. If it can't be flattened into a tree with a single\n * root node, we create a special root node, so there is only ever a single tree.\n */\nconst flattenOutletTree = (outletTree: Tree<ItemOutlet>): RoutableOutletTree => {\n  return {\n    rootItem: outletTree.value.name,\n    children: flattenOutletTreeNode(outletTree),\n  };\n};\n\nconst mapItemToOutlet = (item: RoutableItem): ItemOutlet => {\n  if (!item.routingStrategy) {\n    return {\n      name: item.name,\n      outlet: undefined,\n    };\n  }\n  return {\n    name: item.name,\n    outlet: isValidOutlet(item.outlet) ? item.outlet : PRIMARY_OUTLET,\n  };\n};\n\nconst outletTreeToMap = (outletTree: RoutableOutletTree): OutletMap => {\n  const entries: Array<[ItemName, OutletName]> = flatMap(tree => tree.flatten(), outletTree.children) // flatten and merge the root outlet trees\n    .map((node: Tree<RoutableItemOutlet>): [ItemName, OutletName] => [node.value.item, node.value.outlet]);\n  return new Map<ItemName, OutletName>(entries);\n};\n\nexport const outletMap = (itemTree: Tree<RoutableItem>): OutletMap => {\n  return outletTreeToMap(flattenOutletTree(itemTree.map(mapItemToOutlet)));\n};\n","import { Inject, Injectable, InjectionToken, Type } from '@angular/core';\nimport { CanActivate, CanActivateChild } from '@angular/router';\n\nexport type RouteGuardKey = string;\n\nexport interface RouteGuardsConfig {\n  canActivate?: { [key: string]: Type<CanActivate> };\n  canActivateChild?: { [key: string]: Type<CanActivateChild> };\n}\n\nexport const CONFIG_ROUTE_GUARDS = new InjectionToken<RouteGuardsConfig>('@backbase/foundation Route Guards');\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable()\nexport class RouteGuardsRegistryService {\n  readonly canActivate: Map<RouteGuardKey, Type<CanActivate>> = new Map();\n  readonly canActivateChild: Map<RouteGuardKey, Type<CanActivateChild>> = new Map();\n\n  constructor(@Inject(CONFIG_ROUTE_GUARDS) configs: Array<RouteGuardsConfig>) {\n    configs.forEach(handlerMap => {\n      Object.entries(handlerMap.canActivate || {})\n        .filter((entry): entry is [RouteGuardKey, Type<CanActivate>] => 'canActivate' in entry[1].prototype)\n        .forEach(([key, guard]: [RouteGuardKey, Type<CanActivate>]) => {\n          this.canActivate.set(key, guard);\n        });\n      Object.entries(handlerMap.canActivateChild || {}).forEach(\n        ([key, guard]: [RouteGuardKey, Type<CanActivateChild>]) => {\n          this.canActivateChild.set(key, guard);\n        },\n      );\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nexport type Id = any;\n\n@Injectable()\nexport class TemplateRegistry {\n  private readonly registry: Map<Id, ReplaySubject<any>> = new Map();\n\n  set<T>(id: Id, entry: T) {\n    const entry$: ReplaySubject<T> = this.registry.get(id) || this.initEntry(id);\n    entry$.next(entry);\n  }\n\n  get<T>(id: Id): Observable<T> {\n    const entry$ = this.registry.get(id) || this.initEntry(id);\n    return entry$.pipe(first());\n  }\n\n  private initEntry<T>(id: Id): ReplaySubject<T> {\n    const entry = new ReplaySubject<T>();\n    this.registry.set(id, entry);\n    return entry;\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FeaturesService } from '@backbase/foundation-ang/future';\nimport { StoreFactory, ɵStoreBroker, ɵSTORE_BRANCH, ɵSTORE_DISPATCH_CHANNEL } from '@backbase/foundation-ang/store';\nimport { TemplateRegistry } from '../../customizable/template-registry';\nimport { ItemModel } from '../../models/item-model';\n\nexport function journeyItemModelFactory(route: ActivatedRoute) {\n  return route.snapshot.data.item;\n}\n\nexport function storeNameFactory(route: ActivatedRoute): any {\n  return route.snapshot.data.item.name;\n}\n\n@Component({\n  selector: 'bb-journey',\n  template: ` <router-outlet></router-outlet> `,\n  providers: [\n    {\n      provide: ItemModel,\n      useFactory: journeyItemModelFactory,\n      deps: [ActivatedRoute],\n    },\n    TemplateRegistry,\n    {\n      provide: ɵSTORE_BRANCH,\n      useFactory: storeNameFactory,\n      deps: [ActivatedRoute],\n    },\n    {\n      provide: ɵSTORE_DISPATCH_CHANNEL,\n      useFactory: storeNameFactory,\n      deps: [ActivatedRoute],\n    },\n    {\n      provide: StoreFactory,\n      useClass: StoreFactory,\n      deps: [ɵStoreBroker, ɵSTORE_BRANCH, ɵSTORE_DISPATCH_CHANNEL, FeaturesService],\n    },\n  ],\n})\nexport class JourneyComponent {}\n","import { Tree, combineTree } from '../../models/tree';\nimport { ItemModel } from '../../models/item-model';\nimport { createRoutingStrategy, RoutingStrategy } from '../strategies/routing-decorators';\nimport { propertiesByPrefix } from '../../../web-sdk/properties';\nimport { RouteGuardsRegistryService } from '../guards/route-guards-registry.service';\nimport { Observable, combineLatest, from, of } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { ItemRegistryService } from '../../rendering/item-registry.service';\nimport { Type } from '@angular/core';\nimport { CanActivate, CanActivateChild, LoadChildrenCallback } from '@angular/router';\nimport { Properties } from '@backbase/foundation-ang/web-sdk';\nimport { JourneyComponent } from '../../rendering/chrome/journey.component';\n\nconst CUSTOM_DATA_PREFIX = 'route.data.custom.';\n\nexport enum RouteModelProperty {\n  /**\n   * Each child of a RoutableContainer may have a property for \"route\",\n   * else the route will be the index of the child plus 1.\n   */\n  ROUTE = 'route',\n  /**\n   * RoutableContainers and RoutableWidget can have an optional \"outletName\"\n   * property to dynamically set the outlet name for the bb-router-outlet.\n   */\n  OUTLET = 'outletName',\n  /**\n   * `CanActivate` route guards can be added to generated child routes by including a\n   * `route.canActivate` property in the child's model. These guards must be registered with the\n   * `RouteGuardsRegistryService` via the `guards` option passed to `BackbaseCore.withConfig`.\n   */\n  CAN_ACTIVATE = 'route.canActivate',\n  /**\n   * `CanActivateChild` route guards can be added to generated routes by including a\n   * `route.canActivateChild` property in the item's model. These guards must be registered with the\n   * `RouteGuardsRegistryService` via the `guards` option passed to `BackbaseCore.withConfig`.\n   */\n  CAN_ACTIVATE_CHILD = 'route.canActivateChild',\n  /**\n   * RoutableContainer's can have a \"disableDefault\" property which will disable the\n   * default behaviour of containers where an empty path route will be created to\n   * redirect to the first child's route.\n   */\n  DISABLE_DEFAULT = 'disableDefault',\n}\n\n/**\n * @fixme: This is a union of some different types.\n *\n * interface NonRoutable {\n *   name: string;\n *   routingStrategy: undefined;\n * }\n * interface RoutableWidget {\n *   name: string;\n *   routingStrategy: RoutingStrategy;\n *   outletName?: string;\n * }\n * interface RoutableContainer {\n *   name: string;\n *   routingStrategy: RoutingStrategy;\n *   outletName?: string;\n *   hasDefault: boolean;\n * }\n * interface RoutableContainerChild extends NonRoutable | RoutableWidget | RoutableContainer {\n *   route?: string;\n *   routeData: Properties;\n *   canActivate: Array<CanActivate>;\n *   canActivateChild: Array<CanActivateChild>;\n * }\n * type RoutableItem = NonRoutable | RoutableWidget | RoutableContainer | RoutableContainerChild\n */\nexport interface RoutableItem {\n  name: string;\n  routingStrategy?: RoutingStrategy;\n  hasDefault?: boolean;\n  route?: string;\n  outlet?: string;\n  canActivate: Array<Type<CanActivate>>;\n  canActivateChild: Array<Type<CanActivateChild>>;\n  routeData: Properties;\n}\n\nconst getRoutingStrategy = (\n  itemRegistry: ItemRegistryService,\n  item: ItemModel,\n): Observable<RoutingStrategy | undefined> => {\n  const loadModuleFunction = itemRegistry.getModuleLoader(item.ɵclassId);\n  if (loadModuleFunction) {\n    return of(createJourneyStrategy(item, loadModuleFunction));\n  }\n  const component = itemRegistry.getComponentValue(item.ɵclassId);\n  if (component) {\n    return of(createRoutingStrategy(component));\n  }\n  return from(itemRegistry.getComponent(item.ɵclassId)).pipe(map(createRoutingStrategy), startWith(undefined));\n};\n\nconst getCanActivateRouteGuards = (\n  guardRegistry: RouteGuardsRegistryService,\n  guards: Array<string>,\n): Array<Type<CanActivate>> =>\n  guards\n    .map(guardName => guardRegistry.canActivate.get(guardName))\n    .filter((guard): guard is Type<CanActivate> => guard !== undefined);\n\nconst getCanActivateChildRouteGuards = (\n  guardRegistry: RouteGuardsRegistryService,\n  guards: Array<string>,\n): Array<Type<CanActivateChild>> =>\n  guards\n    .map(guardName => guardRegistry.canActivateChild.get(guardName))\n    .filter((guard): guard is Type<CanActivateChild> => guard !== undefined);\n\nconst toRoutableItem = (\n  item: ItemModel,\n  routeGuards: RouteGuardsRegistryService,\n  routeProperties: Properties,\n  routingStrategy: RoutingStrategy | undefined,\n): RoutableItem => {\n  return {\n    name: item.name,\n    routingStrategy,\n    route: routeProperties[RouteModelProperty.ROUTE] as string | undefined,\n    outlet: routeProperties[RouteModelProperty.OUTLET] as string | undefined,\n    canActivate: getCanActivateRouteGuards(\n      routeGuards,\n      (routeProperties[RouteModelProperty.CAN_ACTIVATE] || []) as Array<string>,\n    ),\n    canActivateChild: getCanActivateChildRouteGuards(\n      routeGuards,\n      (routeProperties[RouteModelProperty.CAN_ACTIVATE_CHILD] || []) as Array<string>,\n    ),\n    hasDefault: routingStrategy ? true !== routeProperties[RouteModelProperty.DISABLE_DEFAULT] : undefined,\n    routeData: propertiesByPrefix(CUSTOM_DATA_PREFIX, routeProperties),\n  };\n};\n\n// @fixme: don't re-emit unless properties we care about change\nconst routableItem = (itemRegistry: ItemRegistryService, routeGuards: RouteGuardsRegistryService) => (\n  item: ItemModel,\n): Observable<RoutableItem> =>\n  combineLatest([item.properties, getRoutingStrategy(itemRegistry, item)]).pipe(\n    map(([routeProperties, routingStrategy]) => toRoutableItem(item, routeGuards, routeProperties, routingStrategy)),\n  );\n\nfunction createJourneyStrategy(item: ItemModel, loadChildren: LoadChildrenCallback): RoutingStrategy {\n  return {\n    getRoutes() {\n      return [\n        {\n          path: '',\n          component: JourneyComponent,\n          data: { item },\n          loadChildren,\n        },\n      ];\n    },\n  };\n}\n\nexport const routableItemTree = (\n  itemRegistry: ItemRegistryService,\n  routeGuards: RouteGuardsRegistryService,\n  modelTree: Tree<ItemModel>,\n): Observable<Tree<RoutableItem>> => combineTree(modelTree.map(routableItem(itemRegistry, routeGuards)));\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Data } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\n\n@Component({\n  selector: 'bb-outlet-collision',\n  template: `\n    <p>You have dropped a routable item next to another routable item.</p>\n    <p>\n      You need to give this item ({{ me | async }}) a unique \"outletName\" from\n      <strong>{{ collisionWith | async }}</strong> to ensure the routes don't conflict.\n    </p>\n  `,\n})\nexport class OutletCollisionComponent {\n  me: Observable<string> = this.route.data.pipe(pluck<Data, string>('item'));\n\n  collisionWith: Observable<string> = this.route.data.pipe(pluck<Data, string>('collisionWith'));\n\n  constructor(private readonly route: ActivatedRoute) {}\n}\n","import { Routes, Route, PRIMARY_OUTLET } from '@angular/router';\nimport { OutletCollisionComponent } from '../components/outlet-collision.component';\nimport { flatMap } from '../../models/array';\nimport { Tree } from '../../models/tree';\nimport { OutletName, OutletCollision } from './outlet-map';\nimport { RoutableItem } from './routable-item-tree';\nimport { ItemName } from '../../models/item-model';\n\nexport type ComponentRouteTree = Tree<ItemRoutes>;\n\n/**\n * An ItemRoute represents a node in a routing tree, that is a\n * direct map of the CXP tree.\n *\n * The routes for each node represents the entire route tree from\n * this item down (this item's routes, merged with child routes).\n */\nexport interface ItemRoutes {\n  item: ItemName;\n  routes: Routes;\n  outletName?: OutletName;\n}\n\nexport const isRoutable = (itemRoutes: ItemRoutes): boolean => itemRoutes.outletName !== undefined;\n\nconst isAbsolute = (routePath: string) => routePath.startsWith('/');\n\nconst isMatchingRedirect = (redirectTo: string) => (route: Route): boolean =>\n  route.path !== undefined && route.path === redirectTo;\n\n/**\n * Applies an outlet name to a route\n * @param outlet\n * @param route\n * @param oldRoutes\n */\nconst namedOutletRoute = (outlet: string, route: Route, oldRoutes: Routes): Route => {\n  // Add outlet name\n  let newRoute: Route = route.component ? { ...route, outlet } : route;\n\n  // Convert redirects to duplicated routes (can't redirect to a named outlet easily).\n  if (newRoute.redirectTo !== undefined && !isAbsolute(newRoute.redirectTo)) {\n    // If it's not absolute, we try and make it a default route instead (no path)\n    const routeTo = oldRoutes.find(isMatchingRedirect(newRoute.redirectTo));\n    if (!routeTo) {\n      // Coudn't find a route that they're redirecting too, so we remove the route, as it won't work.\n      throw new Error(`Couldn't redirect to ${newRoute.redirectTo}`);\n    }\n    newRoute = {\n      ...routeTo, // @fixme: child routes with empty path redirects won't actually do the redirect\n      outlet, // ... that means a named deck container with a routable widget, won't show that\n      path: '', // ... widget's first route if it's a redirect\n    };\n  }\n\n  return newRoute;\n};\n\nconst applyOutletName = (item: RoutableItem, outlet: OutletName, routes: Routes): Routes => {\n  if (outlet === PRIMARY_OUTLET) {\n    return routes;\n  } else if (outlet instanceof OutletCollision) {\n    return [\n      {\n        path: '',\n        component: OutletCollisionComponent,\n        outlet: outlet.outletName,\n        data: {\n          item: item.name,\n          collisionWith: outlet.collisionWith,\n        },\n      },\n    ];\n  }\n\n  return routes.map((route, _, oldRoutes) => namedOutletRoute(`${outlet}`, route, oldRoutes));\n};\n\nconst mapItemToRoutes = (outlets: Map<ItemName, OutletName>) => (\n  item: RoutableItem,\n  children: Array<RoutableItem>,\n  childRoutes: Array<ItemRoutes>,\n): ItemRoutes => {\n  const outletName = outlets.get(item.name);\n  const routes = item.routingStrategy ? item.routingStrategy.getRoutes(item, children, childRoutes) : undefined;\n\n  if (outletName === undefined || routes === undefined) {\n    // Flatten non-routable items\n    return {\n      item: item.name,\n      outletName: undefined,\n      routes: flatMap(childRoute => childRoute.routes, childRoutes),\n    };\n  }\n  return {\n    item: item.name,\n    routes: applyOutletName(item, outletName, routes),\n    outletName,\n  };\n};\n\n/**\n * Create a tree of the components with routes. This is a direct map of the\n * component tree. Each node in the tree holds all routes for the nodes beneath\n * it. So the root node in the returned tree will hold all the routes for the\n * entire component tree.\n */\nexport const routingTree = (tree: Tree<RoutableItem>, outlets: Map<ItemName, OutletName>): ComponentRouteTree =>\n  tree.map(mapItemToRoutes(outlets));\n","import { Observable } from 'rxjs';\nimport { ItemModel } from '../../models/item-model';\n\nexport abstract class AbstractRouterConfigService {\n  abstract ɵitemOutletName(item: ItemModel): Observable<string | undefined>;\n}\n","import { Observable } from 'rxjs';\nimport { Routes } from '@angular/router';\nimport { Injectable } from '@angular/core';\n\nimport { ItemModel } from '../../models/item-model';\nimport { map, switchMap, shareReplay, distinctUntilChanged, withLatestFrom } from 'rxjs/operators';\nimport { ӨRootContainerService } from '../../models/root-container.service';\nimport { OutletCollision, OutletName, outletMap } from './outlet-map';\nimport { RouteGuardsRegistryService } from '../guards/route-guards-registry.service';\nimport { Tree } from '../../models/tree';\nimport { ItemRegistryService } from '../../rendering/item-registry.service';\nimport { RoutableItem, routableItemTree } from './routable-item-tree';\nimport { ComponentRouteTree, routingTree } from './routing-tree';\nimport { AbstractRouterConfigService } from './abstract-router-config.service';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RouterConfigService extends AbstractRouterConfigService {\n  private readonly routableItemTree: Observable<Tree<RoutableItem>> = this.rootContainer.model.pipe(\n    switchMap(model => model.toTree()),\n    switchMap(model => routableItemTree(this.itemRegistry, this.routeGuardsRegistry, model)),\n    shareReplay(1),\n  );\n\n  private readonly outlets: Observable<Map<string, OutletName>> = this.routableItemTree.pipe(\n    map(outletMap),\n    shareReplay(1),\n  );\n\n  /**\n   * Convert the component tree to a routing tree\n   *\n   * @internal\n   */\n  readonly ɵrouteTree: Observable<ComponentRouteTree> = this.outlets.pipe(\n    withLatestFrom(this.routableItemTree),\n    map(([outlets, tree]): ComponentRouteTree => routingTree(tree, outlets)),\n    shareReplay(1),\n  );\n\n  /**\n   * The dynamically generated Angular routes for the SPA, based on the model of the app.\n   */\n  public routes: Observable<Routes> = this.ɵrouteTree.pipe(\n    map((routeTrees: ComponentRouteTree): Routes => routeTrees.value.routes),\n    shareReplay(1),\n  );\n\n  constructor(\n    private readonly itemRegistry: ItemRegistryService,\n    private readonly routeGuardsRegistry: RouteGuardsRegistryService,\n    private readonly rootContainer: ӨRootContainerService,\n  ) {\n    super();\n  }\n\n  /**\n   * Get the router-outlet name for the given item in the model tree.\n   *\n   * @internal\n   */\n  ɵitemOutletName(item: ItemModel): Observable<string | undefined> {\n    return this.outlets.pipe(\n      map(outlets => outlets.get(item.name)),\n      map(outlet => (outlet instanceof OutletCollision ? outlet.outletName : outlet)),\n      distinctUntilChanged(),\n    );\n  }\n}\n","export interface LinkedList<T> {\n  value: T;\n  next?: LinkedList<T>;\n}\n\n/**\n * Creates a new LinkedList with the results of calling a provided function on\n * every element in the provided LinkedList.\n *\n * @param list\n * @param fn\n */\nexport const mapLinkedList = <T, R>(list: LinkedList<T>, fn: (value: T) => R): LinkedList<R> => ({\n  value: fn(list.value),\n  next: list.next === undefined ? undefined : mapLinkedList(list.next, fn),\n});\n\n/**\n * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD\n * to TAIL, where the new HEAD is determined by the first \"true\" result of calling the predicate\n * on each node in the list.\n *\n * The search is done by iterating over each element in the linked list\n * in the order from HEAD to TAIL.\n *\n * If not found, returns undefined.\n *\n * @param list\n * @param predicate\n */\nexport const linkedListFind = <T>(list: LinkedList<T>, predicate: (value: T) => boolean): LinkedList<T> | undefined => {\n  if (predicate(list.value)) {\n    return list;\n  }\n  return list.next ? linkedListFind(list.next, predicate) : undefined;\n};\n\n/**\n * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD\n * to TAIL, where the new HEAD is determined by the first \"true\" result of calling the predicate\n * on each node in the list.\n *\n * The search is done by iterating over each element in the linked list\n * in the order from TAIL to HEAD.\n *\n * If not found, returns undefined.\n *\n * @param list\n * @param predicate\n */\nexport const linkedListFindLast = <T>(\n  list: LinkedList<T>,\n  predicate: (value: T) => boolean,\n): LinkedList<T> | undefined => {\n  const foundChild = list.next ? linkedListFindLast(list.next, predicate) : undefined;\n  if (foundChild) {\n    return foundChild;\n  }\n  return predicate(list.value) ? list : undefined;\n};\n\n/**\n * Returns a shallow copy of a portion of a linked list into a new linked list,\n * selected from HEAD (inclusive) to the first element to return true (exclusive).\n * So the new TAIL will be the parent of the first element to return true.\n *\n * The search is done by iterating over each element in the linked list in the\n * order from HEAD to TAIL.\n *\n * If not found, returns undefined.\n *\n * @param list\n * @param predicate\n */\nconst linkedListSliceTail = <T>(list: LinkedList<T>, predicate: (value: T) => boolean): LinkedList<T> | undefined => {\n  if (predicate(list.value)) {\n    return undefined;\n  }\n  return {\n    value: list.value,\n    next: list.next ? linkedListSliceTail(list.next, predicate) : undefined,\n  };\n};\n\n/**\n * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD\n * to TAIL, where the new HEAD is determined by the first \"true\" result of calling the \"begin\"\n * predicate and the new TAIL is determined by the first \"true\" result of calling the \"end\"\n * predicate.\n *\n * If no \"begin\" predicate is sent, the HEAD will be the current HEAD.\n *\n * If no \"end\" predicate is sent, the TAIL will be the current TAIL.\n *\n * The search is done by iterating over each element in the linked list\n * in the order from HEAD to TAIL until both predicates return true.\n *\n * If not both found, returns undefined.\n *\n * @param list\n * @param predicate\n */\nexport const linkedListSlice = <T>(\n  list: LinkedList<T>,\n  begin?: (value: T) => boolean,\n  end?: (value: T) => boolean,\n): LinkedList<T> | undefined => {\n  const head = begin ? linkedListFind(list, begin) : list;\n  if (!head) {\n    return undefined;\n  }\n  return end ? linkedListSliceTail(head, end) : head;\n};\n\nexport const linkedListToArray = <T>(list: LinkedList<T>): Array<T> => [\n  list.value,\n  ...(list.next ? linkedListToArray(list.next) : []),\n];\n\nexport const linkedListFromArray = <T>(arr: Array<T>): LinkedList<T> | undefined =>\n  arr.reduceRight((next: LinkedList<T> | undefined, value: T) => ({ value, next }), undefined);\n\nexport const linkedListLast = <T>(list: LinkedList<T>): LinkedList<T> => (list.next ? linkedListLast(list.next) : list);\n","import { Injectable } from '@angular/core';\nimport {\n  PRIMARY_OUTLET,\n  Router,\n  UrlSegment,\n  UrlSegmentGroup,\n  UrlTree,\n  ActivatedRoute,\n  ActivatedRouteSnapshot,\n} from '@angular/router';\n\nimport {\n  linkedListSlice,\n  LinkedList,\n  linkedListFind,\n  linkedListToArray,\n  linkedListFromArray,\n  linkedListLast,\n} from '../../models/linked-list';\nimport { pairs, flatMap } from '../../models/array';\n\nexport interface RouteSegmentParams {\n  [key: string]: any;\n}\n\nexport interface RouteSegment {\n  path: string;\n  outlet: string;\n  params?: RouteSegmentParams;\n}\n\nexport type NavigationRoute = LinkedList<RouteSegment>;\n\ndeclare interface UrlSegmentGroupChildren {\n  [key: string]: UrlSegmentGroup;\n}\n\nconst hasNamedOutlet = (node: RouteSegment): boolean => node.outlet !== PRIMARY_OUTLET;\n\nconst routeSegmentToUrlSegment = (node: RouteSegment): UrlSegment => new UrlSegment(node.path, node.params || {});\n\n@Injectable()\nexport class RouterNavigationService {\n  constructor(private readonly router: Router) {}\n\n  /**\n   * Set (merge) the params on a given `ActivatedRoute`, preserving the active children's states.\n   *\n   * This allows updating the params in an arbitrary route in the active route\n   * tree without needing to know the state of every child route.\n   *\n   * @param params The route params that should be set on the given route\n   * @param from The route to set the params on\n   * @returns The new URLTree\n   */\n  setParams(params: RouteSegmentParams, from: ActivatedRoute | ActivatedRouteSnapshot): UrlTree {\n    const snapshot = from instanceof ActivatedRoute ? from.snapshot : from;\n    const navigationRoute: NavigationRoute | undefined = linkedListFromArray(\n      flatMap(\n        (route: ActivatedRouteSnapshot): Array<RouteSegment> =>\n          route.url.map((url: UrlSegment) => ({\n            path: url.path,\n            outlet: route.outlet,\n            params: url.parameters,\n          })),\n        snapshot.pathFromRoot,\n      ),\n    );\n    if (!navigationRoute) {\n      throw new Error('No route to set params on');\n    }\n    const last = linkedListLast(navigationRoute);\n    last.value.params = last.value.params ? { ...last.value.params, ...params } : params;\n    return this.createUrlTree(navigationRoute);\n  }\n\n  createUrlTree(routeBranch: NavigationRoute): UrlTree {\n    const tree = this.router.parseUrl('/'); // @todo: is there no better way to make a tree?\n    const rootRouteSegment = routeBranch.value;\n    tree.root.children[rootRouteSegment.outlet] = this.urlSegmentGroupForRoute(routeBranch);\n    return tree;\n  }\n\n  /*\n   * A segment group is a node in the UrlTree. The node itself is an array\n   * of segments, which are all considered on the \"primary\" outlet.\n   * The children of this node are the paths on the \"non-primary\" outlets.\n   * There will only be a single \"child\" for the NavigationRoute (as it\n   * represents a single branch through a UrlTree).\n   */\n  private urlSegmentGroupForRoute(routeBranch: NavigationRoute): UrlSegmentGroup {\n    // Find all paths up to the first non-primary outlet - these will be the segments.\n    const routeSegments: NavigationRoute = {\n      value: routeBranch.value,\n      next: routeBranch.next ? linkedListSlice(routeBranch.next, undefined, hasNamedOutlet) : undefined,\n    };\n    const segments: Array<UrlSegment> = linkedListToArray(routeSegments).map(routeSegmentToUrlSegment);\n\n    // Find the first non-primary outlet - this will be the child.\n    const nextOutlet = routeBranch.next && linkedListFind(routeBranch.next, hasNamedOutlet);\n    const segmentGroupChildren = nextOutlet\n      ? { [nextOutlet.value.outlet]: this.urlSegmentGroupForRoute(nextOutlet) }\n      : {};\n\n    return new UrlSegmentGroup(segments, segmentGroupChildren);\n  }\n\n  /**\n   * Merge a new `UrlTree` into the current active `UrlTree`.\n   *\n   * @param newTree\n   */\n  navigate(newTree: UrlTree): Promise<boolean> {\n    const activeTree = this.router.parseUrl(this.router.url);\n    const mergedTree = this.router.parseUrl('/');\n    mergedTree.root.children = this.mergeUrlSegmentGroupChildren(activeTree.root.children, newTree.root.children);\n    return this.router.navigateByUrl(mergedTree);\n  }\n\n  /**\n   * Merge new children of a `UrlSegmentGroup` children into the children of the\n   * current active `UrlSegmentGroup`.\n   *\n   * @param activeChildren\n   * @param newChildren\n   */\n  private mergeUrlSegmentGroupChildren(\n    activeChildren: UrlSegmentGroupChildren,\n    newChildren: UrlSegmentGroupChildren,\n  ): UrlSegmentGroupChildren {\n    const mergedChildren = Object.keys(newChildren).reduce(\n      (acc: UrlSegmentGroupChildren, outletName: string): UrlSegmentGroupChildren => {\n        if (!activeChildren[outletName]) {\n          return acc;\n        }\n\n        return {\n          ...acc,\n          [outletName]: this.mergeUrlTreeSegmentGroup(activeChildren[outletName], newChildren[outletName]),\n        };\n      },\n      newChildren,\n    );\n\n    /**\n     * Sibling routes can be preserved, or not.\n     *\n     * Because the current active route is a tree (for example, when you have multiple named\n     * outlets and they are active) when you navigate to a new route it is possible to preserve\n     * active routes that are siblings to the route you're navigating to.\n     *\n     * For example, when navigating from URL `/a/(b//x:c)` to `/a/c`, should the `x:c` or `b`\n     * be preserved. The URL can be visualised as a tree (where a double slash `//` shows siblings\n     * in the tree):\n     *\n     * ```\n     *  -a\n     *   `- b\n     *   `- x:c\n     * ```\n     *\n     * When set to true, all sibling will be preserved. For example, when navigating to `/a/d`\n     * the `x:c` branch will be preserved and the new URL will be `/a/(d//x:c)`. Similarly,\n     * when navigating to `/a/(x:e)`, the `b` branch will be preserved and the new URL will\n     * be `/a/(b//x:e)`.\n     *\n     * Merging is disabled by default, but can be enabled with a feature flag.\n     */\n    return { ...activeChildren, ...mergedChildren };\n  }\n\n  /**\n   * Merge a new `UrlSegmentGroup` into the current active `UrlSegmentGroup`.\n   *\n   * @param activeSegmentGroup\n   * @param newSegmentGroup\n   */\n  private mergeUrlTreeSegmentGroup(\n    activeSegmentGroup: UrlSegmentGroup,\n    newSegmentGroup: UrlSegmentGroup,\n  ): UrlSegmentGroup {\n    return new UrlSegmentGroup(\n      this.mergeUrlSegments(activeSegmentGroup.segments, newSegmentGroup.segments),\n      this.mergeUrlSegmentGroupChildren(activeSegmentGroup.children, newSegmentGroup.children),\n    );\n  }\n\n  /**\n   * Merge an array of new `UrlSegment` into the current active `UrlSegment` array.\n   *\n   * @param activeSegments\n   * @param newSegments\n   */\n  private mergeUrlSegments(activeSegments: Array<UrlSegment>, newSegments: Array<UrlSegment>): Array<UrlSegment> {\n    // Determine if any params are being set.\n    const preserveActiveTailSegments = !!newSegments.find(segment => Object.keys(segment.parameters).length > 0);\n\n    // When the new segments change path from the active segment, then they\n    // should no longer be preserved, so they get set to undefined.\n    const removeActiveSegments = () => {\n      let matches = true;\n      type SegmentTupple = [UrlSegment | undefined, UrlSegment | undefined];\n      return ([activeSegment, newSegment]: SegmentTupple): SegmentTupple => {\n        if (matches && activeSegment && newSegment) {\n          matches = activeSegment.path === newSegment.path;\n        }\n        return [matches ? activeSegment : undefined, newSegment];\n      };\n    };\n\n    // pair the segments into a single array\n    return pairs(activeSegments, newSegments)\n      .map(removeActiveSegments())\n      .map(([activeSegment, newSegment]) => this.mergeUrlSegment(activeSegment, newSegment, preserveActiveTailSegments))\n      .filter((a): a is UrlSegment => a !== undefined);\n  }\n\n  /**\n   * Merge a new `UrlSegment` into the current active `UrlSegment`.\n   *\n   * If there is both an active and new segment it is assumed that the path\n   * is the same already.\n   *\n   * @param activeSegment\n   * @param newSegment\n   * @param isSettingParams\n   */\n  private mergeUrlSegment(\n    activeSegment: UrlSegment | undefined,\n    newSegment: UrlSegment | undefined,\n    preserveActiveTailSegments: boolean,\n  ): UrlSegment | undefined {\n    /**\n     * There are 3 different strategies for how to preserve any \"tail\" segments in\n     * the route: 'never' | 'on-param-set' | 'always'.\n     *\n     * This is only relevant when any route branch you're navigating to is a subset\n     * of a current active route. For example, when navigating from URL `/a/b` to\n     * `/a`, should `b` be preserved?\n     *\n     * When set to 'never' the children will be discarded, and the new URL will simply\n     * be `/a`.\n     *\n     * When set to 'always' the children will always be preserved (this means it would\n     * be impossible to navigate to a parent route).\n     *\n     * When set to 'on-param-set' the children will only be preserved if params are being\n     * set on the route. For example, when navigating from `/a/b` to\n     * `/a;data=foo` then the new URL will be `/a:data=foo/b`.\n     *\n     * This is implemented using the 'never' OR 'on-param-set' strategy depending on the\n     * `preserveActiveTailSegments` flag.\n     */\n    if (activeSegment && !newSegment && preserveActiveTailSegments) {\n      return new UrlSegment(activeSegment.path, activeSegment.parameters);\n    } else if (newSegment) {\n      const activeSegmentParams = (activeSegment && activeSegment.parameters) || {};\n      return new UrlSegment(newSegment.path, this.mergeUrlSegmentParams(activeSegmentParams, newSegment.parameters));\n    }\n    return undefined;\n  }\n\n  private mergeUrlSegmentParams(activeSegmentParams: RouteSegmentParams, newSegmentParams: RouteSegmentParams) {\n    /**\n     * There 3 different strategies for how to preserve any route-parameters in the\n     * route: 'never' | 'overwrite' | 'merge'.\n     *\n     * For example, when navigating from URL `/a;data=foo/b` to `/a;x=y/c`, should the\n     * 'data' param be preserved.\n     *\n     * When `never` the params will be discarded, and the new URL will simply be `/a;x=y/c`.\n     *\n     * When `merge`, then the params will be preserved, and the new URL will be\n     * `/a;data=foo;x=y/c`.\n     *\n     * When 'overwrite', then the params will be only be preserved if there are no *other*\n     * params being set on that segment. For example, when navigating instead to:\n     * `/a/c;foo=bar`, the new URL will be `/a;data=foo/c;foo=bar`.\n     *\n     * This is implemented using the \"overwrite\" strategy.\n     */\n    return Object.keys(newSegmentParams).length === 0 ? activeSegmentParams : newSegmentParams;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, PRIMARY_OUTLET } from '@angular/router';\nimport { createRouteComponentStrategy } from '../routing/strategies/routing-decorators';\nimport { RouterConfigService } from '../routing/config/router-config.service';\nimport { take } from 'rxjs/operators';\nimport { Tree, treeBranch } from '../models/tree';\nimport { ItemRoutes, isRoutable } from '../routing/config/routing-tree';\nimport { LinkedList, mapLinkedList, linkedListFindLast, linkedListLast } from '../models/linked-list';\nimport {\n  RouteSegmentParams,\n  NavigationRoute,\n  RouteSegment,\n  RouterNavigationService,\n} from '../routing/navigation/router-navigation.service';\n\nexport type FindRouteFunction = (tree: Tree<ItemRoutes>, index?: number, parent?: Tree<ItemRoutes>) => boolean;\n\n/**\n * Extracts a tree branch from the component route tree up to the given item and\n * unwraps the value.\n *\n * It unwraps it so we don't end up with a `LinkedList<Tree>`, where each node\n * would have value`.value`.\n *\n * @param itemRouteTree\n * @param itemName\n */\nconst itemRoutesBranch = (\n  findRoute: (tree: Tree<ItemRoutes>, index?: number, parent?: Tree<ItemRoutes>) => boolean,\n  itemRouteTree: Tree<ItemRoutes>,\n): LinkedList<ItemRoutes> | undefined => {\n  const branch = treeBranch<Tree<ItemRoutes>>(itemRouteTree, findRoute);\n  if (branch === undefined) {\n    return undefined;\n  }\n  return mapLinkedList<Tree<ItemRoutes>, ItemRoutes>(branch, tree => tree.value);\n};\n\n/**\n * Maps a LinkedList<Route> to a NavigationRoute, to ensure each route is a\n * part of a URL segment.\n */\nconst mapToNavigationRoute = (routeBranch: LinkedList<Route>): NavigationRoute =>\n  mapLinkedList<Route, RouteSegment>(routeBranch, route => {\n    if (route.path === undefined) {\n      throw new Error(`Can't find route to item as route has no path`);\n    }\n    return {\n      path: route.path,\n      outlet: route.outlet || PRIMARY_OUTLET,\n    };\n  });\n\n/**\n * @internal\n */\n@Injectable()\nexport class ӨItemNavigationService {\n  constructor(\n    private readonly routerConfig: RouterConfigService,\n    private readonly navigationService: RouterNavigationService,\n  ) {}\n  async navigateToItem(itemName: string, params: RouteSegmentParams): Promise<boolean> {\n    const isItemByName = (tree: Tree<ItemRoutes>) => tree.value.item === itemName;\n    return this.navigateToRoute(isItemByName, params);\n  }\n\n  private isItemChild(navigateToParent: string, childIndex: number): FindRouteFunction {\n    return (tree: Tree<ItemRoutes>, index?: number, parent?: Tree<ItemRoutes>): boolean => {\n      if (parent) {\n        const isChild = parent.value.item === navigateToParent;\n        const isNthChild = index === childIndex;\n        if (isChild && isNthChild) {\n          return true;\n        }\n\n        const isLastChild = index === parent.children.length - 1;\n        const isIndexOutOfRange = childIndex > parent.children.length - 1;\n        if (isChild && isLastChild && isIndexOutOfRange) {\n          return true;\n        }\n      }\n\n      const noChildren = tree.children.length === 0;\n      const isParent = tree.value.item === navigateToParent;\n\n      if (isParent && noChildren) {\n        return true;\n      }\n\n      return false;\n    };\n  }\n\n  async navigateToChild(navigateToParent: string, childIndex: number, params: RouteSegmentParams): Promise<boolean> {\n    return this.navigateToRoute(this.isItemChild(navigateToParent, childIndex), params);\n  }\n\n  private async navigateToRoute(findRoute: FindRouteFunction, params: RouteSegmentParams): Promise<boolean> {\n    const route = await this.routeToItem(findRoute);\n\n    if (!route) {\n      // If there is no route, then this item should already be visible, as it means\n      // it's somewhere in the component tree above any routable item.\n      if (Object.keys(params).length) {\n        // If trying to pass params, this can't work, so throw\n        return Promise.reject(`Can't pass params to an item that isn't within a routable item`);\n      }\n      // Otherwise, there is no need to navigate, navigation has failed\n      return Promise.resolve(false);\n    }\n\n    const navigationRoute = mapToNavigationRoute(route);\n    // Set the params on the last path in the route.\n    linkedListLast(navigationRoute).value.params = params;\n    return this.navigationService.navigate(this.navigationService.createUrlTree(navigationRoute));\n  }\n\n  /**\n   * Search the component tree for a given item, and return the route to that item.\n   *\n   * @param itemName The CXP instance name of the item to route to.\n   */\n  private routeToItem(\n    findRoute: (tree: Tree<ItemRoutes>, index?: number, parent?: Tree<ItemRoutes>) => boolean,\n  ): Promise<LinkedList<Route> | undefined> {\n    // Take a snapshot of the current state of the route tree.\n    return this.routerConfig.ɵrouteTree\n      .pipe(take(1))\n      .toPromise()\n      .then((routeTree: Tree<ItemRoutes>) => this.findItemRoute(findRoute, routeTree));\n  }\n\n  /**\n   * Breadth-first-search of routes, to find a route to a given item.\n   *\n   * 1. Find the branch to this item in the component route tree.\n   * 2. Once found, find the closest routable parent.\n   * 3. Take the child of the routable parent.\n   * 4. For each route in the parent, use the \"RouteComponentStrategy\" to determine\n   *      which route the route-child is rendered in.\n   * 5. Once the route is found, flatten the routes of the componentRouteTree up to that route.\n   *\n   * @param itemName\n   * @param routes\n   */\n  private findItemRoute(\n    findRoute: (tree: Tree<ItemRoutes>, index?: number, parent?: Tree<ItemRoutes>) => boolean,\n    componentRouteTree: Tree<ItemRoutes>,\n  ): LinkedList<Route> | undefined {\n    // 1. Find the branch containing the item.\n    const branch: LinkedList<ItemRoutes> | undefined = itemRoutesBranch(findRoute, componentRouteTree);\n\n    if (!branch) {\n      // item not in tree\n      throw new Error(`No matching route found in model.`);\n    }\n    const foundNode = linkedListLast(branch);\n\n    // 2. Find the closest *routable* parent (depth-first search, so it searches from TAIL to HEAD)\n    const isParent = (node: ItemRoutes) => node.item !== foundNode.value.item;\n    const isRoutableParent = (node: ItemRoutes) => isRoutable(node) && isParent(node);\n    const routableNode = linkedListFindLast(branch, isRoutableParent);\n    if (!routableNode) {\n      return undefined;\n    }\n\n    // 3. Take the child of the routable node.\n    const routableNodeChild = routableNode.next;\n\n    // 4. Determine which route the child is rendered in.\n    const foundItemInRoute =\n      routableNodeChild &&\n      routableNode.value.routes.find(route => this.isItemInRoute(routableNodeChild.value.item, route));\n\n    // 5. Find the branch in the route tree up to that route (similar to step 1).\n    // Except that \"Routes\" is really like an array of trees, so we loop through them.\n    for (const rootRoute of componentRouteTree.value.routes) {\n      const routeBranch = treeBranch<Route>(rootRoute, route => route === foundItemInRoute);\n      if (routeBranch) {\n        return routeBranch;\n      }\n    }\n\n    return undefined;\n  }\n\n  private isItemInRoute(itemName: string, route: Route): boolean {\n    if (!route.component) {\n      return false;\n    }\n    return createRouteComponentStrategy(route.component).isItemInRoute(itemName, route);\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PipelineSource, PipelineSink } from '../pipeline-interface';\n\nexport const createComponentPipe = <T>(): PipelineSource<T> & PipelineSink<T> => ({\n  source: (ref: ComponentRef<any>, outputName: string) => () => ref.instance[outputName],\n  sink: (ref: ComponentRef<any>, inputName: string) => (stdin: Observable<T>) => {\n    stdin.subscribe((value: any) => {\n      ref.instance[inputName] = value;\n      ref.changeDetectorRef.markForCheck();\n    });\n  },\n});\n","import { InjectionToken, Inject, ValueProvider, FactoryProvider, Type, Injectable } from '@angular/core';\nimport { flatten } from '../../models/array';\n\nexport type ProcessorName = string;\n\n/**\n *\n * @deprecated Will be removed in v7.0.0\n * Configures a provider for a `PipelineProcessor` by name.\n *\n * @usageNotes\n *\n * Register a custom processor:\n *\n * ```typescript\n * BackbaseCoreModule.forRoot({\n *   pipelineProcessors: [{\n *     name: 'custom-pipe',\n *     provider: {\n *       provide: new InjectionToken('Custom handler'),\n *       useValue: {\n *         pipe: () => (stdin: Observable<any>) => stdin.pipe(tap(\n *           (val: any) => console.log(val)\n *         )),\n *       },\n *     },\n *   }],\n * })\n * ```\n *\n * Configure custom processor in model:\n *\n * ```json\n * {\n *   \"name\": \"my-widget\",\n *   \"properties\": {\n *     \"output.myOutput\": \"custom-pipe\"\n *   }\n * }\n * ```\n */\nexport interface PipelineProcessorConfig<T extends ProcessorName = ProcessorName> {\n  /**\n   * The name of the processor, which can be used in the model.\n   *\n   * Note: the name must begin with a letter (a-z).\n   */\n  name: T;\n  /**\n   * A valid angular provider that will be instantiated when it is needed.\n   */\n  provider: PipelineProcessorProvider;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * See https://angular.io/api/core/StaticProvider\n */\nexport declare interface StaticClassProvider {\n  useClass: Type<any>;\n  deps: Array<any>;\n  provide: any;\n  multi?: boolean;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type PipelineProcessorProvider = StaticClassProvider | FactoryProvider | ValueProvider;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const CONFIG_PIPELINE_PROCESSORS = new InjectionToken<Array<PipelineProcessorConfig>>(\n  '@backbase/foundation Pipeline Handlers',\n);\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Helper service wrapping around CONFIG_PIPELINE_PROCESSORS\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PipelineRegistry {\n  private readonly registeredHandlers: Map<ProcessorName, PipelineProcessorProvider>;\n\n  constructor(\n    @Inject(CONFIG_PIPELINE_PROCESSORS)\n    processorsNested: // eslint-disable-next-line @typescript-eslint/array-type\n    PipelineProcessorConfig[][], // Angular doesn't like nested array types\n  ) {\n    const allProcessors: Array<PipelineProcessorConfig> = flatten(processorsNested);\n    this.registeredHandlers = new Map(\n      allProcessors.map(({ name, provider }): [string, PipelineProcessorProvider] => [name, provider]),\n    );\n  }\n\n  getProcessorProvider(name: string): PipelineProcessorProvider {\n    const provider = this.registeredHandlers.get(name);\n    if (provider === undefined) {\n      throw new Error(`No provider to pipeline handler ${name}`);\n    }\n    return {\n      deps: [],\n      ...provider,\n    };\n  }\n\n  getProcessorProviderToken(name: string): any {\n    return this.getProcessorProvider(name).provide;\n  }\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport function createPipelineProcessorConfig<T extends ProcessorName>(\n  name: T,\n  provider: PipelineProcessorProvider,\n): PipelineProcessorConfig<T> {\n  return {\n    name,\n    provider,\n  };\n}\n","import { UnaryFunction } from 'rxjs';\n\nconst noop = () => {};\n\n// @see https://github.com/ReactiveX/rxjs/blob/5b82dcc601ed6eae955409ed0995cad61744f102/src/internal/util/pipe.ts\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { PipelineRegistry } from './pipeline-registry';\nimport {\n  PipelinePipe,\n  Pipe,\n  Sink,\n  Pipeline,\n  PipelineSink,\n  Source,\n  PipelineSource,\n  PipelineProcessor,\n} from './pipeline-interface';\nimport { Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { pipeFromArray } from '../../models/observable';\n\nconst noop = () => {};\n\nconst noopSink = <R>(stdin: Observable<R>) => {\n  stdin.subscribe(noop);\n};\n\nconst isSourceDefinition = <T, R>(definition: PipelineProcessor<T, R>): definition is PipelineSource<T> =>\n  definition && 'source' in definition;\n\nconst isPipeDefinition = <T, R>(definition: PipelineProcessor<T, R>): definition is PipelinePipe<T, R> =>\n  definition && 'pipe' in definition;\n\nconst isSinkDefinition = <R>(definition: PipelineProcessor<any, R>): definition is PipelineSink<R> =>\n  definition && 'sink' in definition;\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable()\nexport class PipelineService {\n  constructor(private readonly broker: PipelineRegistry, private readonly injector: Injector) {}\n\n  createSource<T>(name: string, args: Array<any>): Source<T> {\n    const instance = this.getInstance<T, any>(name);\n    if (!isSourceDefinition(instance)) {\n      throw new Error(`${name} is not a valid source`);\n    }\n    return instance.source(...args);\n  }\n\n  createPipe<T, R>(name: string, args: Array<any>): Pipe<T, R> {\n    const instance = this.getInstance<T, R>(name);\n    if (!isPipeDefinition(instance)) {\n      throw new Error(`${name} is not a valid pipe`);\n    }\n    return instance.pipe(...args);\n  }\n\n  createSink<R>(name: string, args: Array<any>): Sink<R> {\n    const instance = this.getInstance<any, R>(name);\n    if (isSinkDefinition(instance)) {\n      return instance.sink(...args);\n    } else if (isPipeDefinition(instance)) {\n      return this.chainSink([instance.pipe(...args)], noopSink);\n    }\n    throw new Error(`${name} is not a valid sink`);\n  }\n\n  private getInstance<T, R>(name: string): PipelineProcessor<T, R> {\n    const provide = this.broker.getProcessorProviderToken(name);\n    return this.injector.get<PipelineProcessor<T, R>>(provide);\n  }\n\n  chainSink<T, R>(pipes: Array<Pipe<T, R>>, sink: Sink<R>): Sink<T> {\n    return (stdin: Observable<T>): void => {\n      sink(stdin.pipe(pipeFromArray(pipes)));\n    };\n  }\n\n  runPipeline<T>(pipeline: Pipeline<T>, gc: Observable<any>): void {\n    return pipeline.sink(pipeline.source().pipe(takeUntil(gc)));\n  }\n}\n","import { serializerDeserializer } from '@backbase/communication-property';\nimport { Properties } from '@backbase/foundation-ang/web-sdk';\n\nexport interface PipelineCommand {\n  processorName: string;\n  args: Array<unknown>;\n}\n\nexport interface InputOutputProperty {\n  propertyName: string;\n  pipeline: PipelineCommand;\n}\n\nconst parsePipe = (pipeString: string): PipelineCommand => {\n  const communicationDefinition = serializerDeserializer.fromProperty(pipeString);\n  if (communicationDefinition !== undefined) {\n    return {\n      processorName: communicationDefinition.transport,\n      args: [communicationDefinition.param],\n    };\n  } else {\n    const parts = pipeString.split(' ');\n    const processorName = parts.shift() as string;\n    return {\n      processorName,\n      args: parts,\n    };\n  }\n};\n\nconst LEGACY_HANDLERS: Array<string> = ['debug', 'navigation', 'navigation-url', 'route-param', 'model-property'];\nconst isPipelineConfig = (propertyValue: string): boolean => {\n  const handlerName = propertyValue.split(':')[0];\n  return !LEGACY_HANDLERS.includes(handlerName);\n};\n\nconst upgradeToPipelineConfig = (propertyName: string, propertyValue: string): string => {\n  const colonIndex = propertyValue.indexOf(':');\n  const hasArg = colonIndex !== -1;\n  const handlerName = hasArg ? propertyValue.substr(0, colonIndex) : propertyValue;\n  const handlerArg = hasArg ? propertyValue.substr(colonIndex + 1) : '';\n\n  const handlerToPipeMapping: { [old: string]: () => string } = {\n    'navigation-url': () => `url ${handlerArg} ${propertyName}`,\n    navigation: () => `navigation ${propertyName} ${handlerArg}`,\n    'model-property': () => `model ${handlerArg}`,\n  };\n  return (handlerToPipeMapping[handlerName] || (() => `${handlerName} ${handlerArg}`))().trim();\n};\n\nconst normalizePropertyValue = (propertyName: string, value: string): string => {\n  if (!isPipelineConfig(value)) {\n    return upgradeToPipelineConfig(propertyName, value);\n  }\n  return value;\n};\n\nexport const parseInputOutputPropertyValue = (propertyName: string, propertyValue: string): PipelineCommand => {\n  const normalPropertyValue = normalizePropertyValue(propertyName, propertyValue);\n  const streamHandlers = normalPropertyValue.trim();\n  return parsePipe(streamHandlers);\n};\n\nexport const inputOutputProperties = (properties: Properties): Array<InputOutputProperty> =>\n  Object.entries(properties).map(([propertyName, value]) => ({\n    propertyName,\n    pipeline: parseInputOutputPropertyValue(propertyName, `${value}`),\n  }));\n","import { Properties } from '@backbase/foundation-ang/web-sdk';\nimport { inputOutputProperties, InputOutputProperty } from './parse-model';\n\nexport function parseProperties(properties: Properties): Array<InputOutputProperty> {\n  return inputOutputProperties(properties).filter(prop => !!prop.pipeline && !!prop.pipeline.processorName);\n}\n\nexport function getProcessorNames(properties: Properties): Array<string> {\n  return parseProperties(properties).map(propertyConfig => propertyConfig.pipeline.processorName);\n}\n","import { ComponentFactoryResolver, ComponentRef, Injectable, StaticProvider, Inject, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\nimport { ItemModel } from '../../models/item-model';\nimport { ObservableTree } from '../../models/observable-tree.interface';\nimport { ItemLifecycleService, LifecycleEvent } from '../../rendering/item-lifecycle.service';\nimport { LAZY_MAP, LazyConfig, LazyComponentsConfig } from '../../rendering/lazy-config';\nimport { createComponentPipe } from '../pipes/handlers/component';\nimport { Pipeline, Sink } from '../pipes/pipeline-interface';\nimport { PipelineRegistry } from '../pipes/pipeline-registry';\nimport { PipelineService } from '../pipes/pipeline.service';\nimport { getProcessorNames, parseProperties } from './broker-helpers';\n\n/**\n * The input broker service creates a communication pipeline\n * using the component input as a sink. The source of the pipeline\n * is determined by the item model.\n */\n@Injectable()\nexport class InputBrokerService {\n  constructor(\n    private readonly itemLifecycle: ItemLifecycleService,\n    private readonly pipelineRegistry: PipelineRegistry,\n    private readonly componentFactoryResolver: ComponentFactoryResolver,\n    @Inject(LAZY_MAP)\n    @Optional()\n    private readonly lazyConfig: LazyConfig | null,\n  ) {}\n\n  bootstrap() {\n    // Model properties cannot be linked to the Inputs of lazy loaded items\n    const lazyLoadedComponents = (this.lazyConfig\n      ? this.lazyConfig.filter(\n          (config): config is LazyComponentsConfig => !!(config as LazyComponentsConfig).components,\n        )\n      : []\n    ).reduce((acc, config) => [...acc, ...config.components], [] as Array<string>);\n\n    this.itemLifecycle.whenCreate().subscribe(({ itemModel, component }) => {\n      const gc$ = this.itemLifecycle.whenRemove(itemModel.value.name).pipe(take(1));\n      this.runInputPipelines(itemModel, component, gc$);\n      if (!lazyLoadedComponents.includes(itemModel.value.ɵclassId)) {\n        this.runModelInputs(itemModel, component, gc$);\n      }\n    });\n  }\n\n  private runModelInputs<C>(\n    itemModel: ObservableTree<ItemModel>,\n    ref: ComponentRef<C>,\n    gc$: Observable<LifecycleEvent>,\n  ) {\n    this.componentFactoryResolver.resolveComponentFactory(ref.componentType).inputs.forEach(input => {\n      // Abort if there is already an \"input.\" property with the same name\n      if (itemModel.value.ɵinputProperties[input.templateName] !== undefined) return;\n      const modelValue = itemModel.value.ɵproperties[input.templateName];\n      if (modelValue === undefined) return;\n      const source = itemModel.value.property(input.templateName, modelValue);\n      const sink = this.inputSink(ref, input.propName);\n      return sink(source.pipe(takeUntil(gc$)));\n    });\n  }\n\n  private runInputPipelines<C>(\n    itemModel: ObservableTree<ItemModel>,\n    ref: ComponentRef<C>,\n    gc$: Observable<LifecycleEvent>,\n  ) {\n    const pipelineService = ref.injector.get<PipelineService>(PipelineService);\n    parseProperties(itemModel.value.ɵinputProperties).forEach(inputPipesConfig => {\n      const sourceCommand = inputPipesConfig.pipeline;\n      const sourceFn = pipelineService.createSource(sourceCommand.processorName, sourceCommand.args);\n      const pipeline: Pipeline<any> = {\n        source: sourceFn,\n        sink: this.inputSink<C>(ref, inputPipesConfig.propertyName),\n      };\n\n      pipelineService.runPipeline(pipeline, gc$);\n    });\n  }\n\n  private inputSink<C>(ref: ComponentRef<C>, inputName: string): Sink<any> {\n    return createComponentPipe().sink(ref, inputName);\n  }\n\n  getItemProviders(item: ItemModel): Array<StaticProvider> {\n    return getProcessorNames(item.ɵinputProperties).map(processorName => {\n      try {\n        return this.pipelineRegistry.getProcessorProvider(processorName);\n      } catch (message) {\n        throw new Error(`Input '${processorName}' on ${item.name} is misconfigured. ${message}`);\n      }\n    });\n  }\n}\n\nexport function createInputBootstrap(Broker: InputBrokerService) {\n  return Broker.bootstrap.bind(Broker);\n}\n","import { ComponentRef, Injectable, StaticProvider } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { ItemModel } from '../../models/item-model';\nimport { ObservableTree } from '../../models/observable-tree.interface';\nimport { ItemLifecycleService, LifecycleEvent } from '../../rendering/item-lifecycle.service';\nimport { createComponentPipe } from '../pipes/handlers/component';\nimport { Pipeline, Source } from '../pipes/pipeline-interface';\nimport { PipelineRegistry } from '../pipes/pipeline-registry';\nimport { PipelineService } from '../pipes/pipeline.service';\nimport { getProcessorNames, parseProperties } from './broker-helpers';\n\n/**\n * The output broker service creates a communication pipeline\n * using the component output as a source. The sink of the pipeline\n * is determined by the item model.\n */\n@Injectable()\nexport class OutputBrokerService {\n  constructor(\n    private readonly itemLifecycle: ItemLifecycleService,\n    private readonly pipelineRegistry: PipelineRegistry,\n  ) {}\n\n  bootstrap() {\n    this.itemLifecycle.whenCreate().subscribe(({ itemModel, component }) => {\n      const gc$ = this.itemLifecycle.whenRemove(itemModel.value.name).pipe(take(1));\n      this.runOutputPipelines(itemModel, component, gc$);\n    });\n  }\n\n  private runOutputPipelines<C>(\n    itemModel: ObservableTree<ItemModel>,\n    ref: ComponentRef<C>,\n    gc$: Observable<LifecycleEvent>,\n  ) {\n    const pipelineService = ref.injector.get<PipelineService>(PipelineService);\n    parseProperties(itemModel.value.ɵoutputProperties).forEach(outputPipesConfig => {\n      const sinkCommand = outputPipesConfig.pipeline;\n      const sinkFn = pipelineService.createSink(sinkCommand.processorName, sinkCommand.args);\n      const pipeline: Pipeline<any> = {\n        source: this.outputSource<C>(ref, outputPipesConfig.propertyName),\n        sink: sinkFn,\n      };\n\n      if (!pipeline.source()) {\n        throw new Error(`${ref.componentType.name} does not have an output named '${outputPipesConfig.propertyName}'`);\n      }\n\n      pipelineService.runPipeline(pipeline, gc$);\n    });\n  }\n\n  private outputSource<C>(ref: ComponentRef<C>, outputName: string): Source<any> {\n    return createComponentPipe().source(ref, outputName);\n  }\n\n  getItemProviders(item: ItemModel): Array<StaticProvider> {\n    return getProcessorNames(item.ɵoutputProperties).map(processorName => {\n      try {\n        return this.pipelineRegistry.getProcessorProvider(processorName);\n      } catch (message) {\n        throw new Error(`Output '${processorName}' on ${item.name} is misconfigured. ${message}`);\n      }\n    });\n  }\n}\n\nexport function createOutputBootstrap(outputBroker: OutputBrokerService) {\n  return outputBroker.bootstrap.bind(outputBroker);\n}\n","import { Observable } from 'rxjs';\nimport { InjectionToken } from '@angular/core';\nimport { Pipe, PipelinePipe } from '../pipeline-interface';\nimport { tap } from 'rxjs/operators';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\n\n/**\n * A `PipelineProcessor` which can be used as a pipe\n * or a sink to debug a component's output.\n *\n * An optional prefix can be given as an argument to the handler.\n *\n * See `debugProcessorConfig` for configuration.\n */\nexport interface DebugPipe<T> extends PipelinePipe<T, T> {\n  /**\n   * @param debugPrefix prefix placed before each debug output\n   */\n  pipe: (debugPrefix?: string) => Pipe<T, T>;\n}\n\nexport type DebugSink<T> = DebugPipe<T>;\n\nexport const makeDebugPipe = <T>(): DebugPipe<T> => ({\n  pipe: (debugPrefix: string = 'DEBUG'): Pipe<T, T> => (stdin: Observable<T>): Observable<T> =>\n    stdin.pipe(\n      tap((value: T) => {\n        // eslint-disable-next-line  no-console\n        console.log(`DEBUG ITEM OUTPUT ${debugPrefix}:`, value);\n      }),\n    ),\n});\n\n/**\n * Configure the `DebugPipe`.\n *\n * Use the string 'debug' to configure this handler.\n *\n * @usageNotes\n *\n * ```json\n * {\n *   \"output.myOutput1\": \"debug test\", // use as sink\n *   \"output.myOutput2\": \"debug > route-param\" // use a pipe\n * }\n * ```\n */\nexport const debugProcessorConfig: PipelineProcessorConfig<'debug'> = {\n  name: 'debug',\n  provider: {\n    provide: new InjectionToken('Debug handler'),\n    useFactory: makeDebugPipe,\n  },\n};\n","import { pluck } from 'rxjs/operators';\nimport { InjectionToken } from '@angular/core';\nimport { PipelinePipe, Pipe } from '../pipeline-interface';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\n\n/**\n * A `PipelineProcessor` which can be pipe to transform a stream.\n *\n * Maps each source value (an object) to its specified nested property.\n *\n * See `pluckProcessorConfig` for configuration.\n */\nexport interface PluckPipe<T, R> extends PipelinePipe<T, R> {\n  /**\n   * The pluck function is from [RxJS](https://rxjs-dev.firebaseapp.com/api/operators/pluck)\n   */\n  pipe: (...properties: Array<string>) => Pipe<T, R>;\n}\n\nconst pluckPipe: PluckPipe<any, any> = { pipe: pluck };\n\n/**\n * Configure the `PluckPipe`.\n *\n * Use the string 'pluck' to configure this handler.\n *\n * @usageNotes\n *\n * ```json\n * {\n *   \"output.myObject\": \"pluck id > debug\", // transform an output\n *   \"input.myInput\": \"pluck id < some-object-source\" // transform an input\n * }\n * ```\n */\nexport const pluckProcessorConfig: PipelineProcessorConfig<'pluck'> = {\n  name: 'pluck',\n  provider: {\n    provide: new InjectionToken('Pluck pipeline handler'),\n    useValue: pluckPipe,\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { CommunicationDefinition, serializerDeserializer } from '@backbase/communication-property';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\n\nimport { ӨRootContainerService } from '../../../models/root-container.service';\nimport { ӨItemNavigationService } from '../../item-navigation.service';\nimport { PipelineSink, PipelineSource, Sink, Source } from '../pipeline-interface';\nimport { createPipelineProcessorConfig, PipelineProcessorConfig } from '../pipeline-registry';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface RouteParams {\n  [key: string]: any;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Use the router to store data.\n *\n * ```\n * [ Component Output ] -> [ Route Store ]\n * [ Route Store ] -> [ Component Input ]\n * ```\n *\n * See `RouteParam` for configuration.\n *\n * Note: you can use a single output to save multiple params\n * to a store by using `RouteParamsMultiSink`.\n */\nexport interface RouteParamsStore<T extends RouteParamPayload> extends PipelineSource<T | undefined>, PipelineSink<T> {\n  /**\n   * @param paramName The name of the param to save in the route\n   */\n  source: (group: string) => Source<T | undefined>;\n  /**\n   * @param paramName The name of the param to read from the route\n   */\n  sink: (group: string) => Sink<T>;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Pipeable operator for normalizing value to `RouteParams`.\n *\n * @param paramNameArg\n */\nexport const routeParams = (paramNameArg: string) => (stdin: Observable<string | undefined>) =>\n  stdin.pipe(map((payload: string | undefined) => (paramNameArg ? { [paramNameArg]: `${payload}` } : {})));\n\nconst TAG: 'route-param' = 'route-param';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * RouteParam Communication Transport\n *\n * Can be used to configure communication using RouteParam.\n *\n * @usageNotes\n *\n * Store some 2-way bound state to the router as \"paramName\"\n *\n * ```json\n * {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": RouteParam.toProperty(\"paramName\"),\n *     \"input.myInput\": RouteParam.toProperty(\"paramName\")\n *   }\n * }\n * ```\n *\n * Navigate to widget-b and pass data via route-param\n *\n * ```json\n * {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": RouteParam.toProperty(\"inputName\")\n *   }\n * },\n * {\n *   \"name\": \"widget-b\",\n *   \"properties\": {\n *     \"input.myInput\": RouteParam.toProperty(\"inputName\")\n *   }\n * }\n * ```\n */\nexport class RouteParam {\n  /**\n   * Generate a serialized communication configuration suitable for use as a Widget Input or Output property value.\n   *\n   * @param group The name of the communication group to which the Input/Output belongs\n   */\n  static toProperty(group: string): string {\n    return serializerDeserializer.toProperty(new CommunicationDefinition(TAG, group));\n  }\n}\n\nconst getActivatedRouteParam = (paramName: string) => (\n  activatedRoute: ActivatedRoute,\n): Observable<string | undefined> =>\n  activatedRoute.paramMap.pipe(\n    filter<ParamMap>(Boolean),\n    map((params: ParamMap) => params.get(paramName)),\n    map(param => (param === null ? undefined : param)),\n  );\n\nconst walkRoutePath = (activatedRoute: ActivatedRoute): Array<ActivatedRoute> => {\n  if (!activatedRoute.parent) {\n    return [activatedRoute];\n  }\n  return [activatedRoute, ...walkRoutePath(activatedRoute.parent)];\n};\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type RouteParamPayload =\n  | string\n  | {\n      [key: string]: string | number;\n    };\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const getRouteParam = (activatedRoute: ActivatedRoute, group: string): Observable<string | undefined> => {\n  const activatedRoutes: Array<ActivatedRoute> = walkRoutePath(activatedRoute);\n  const allParams$: Array<Observable<string | undefined>> = activatedRoutes.map(getActivatedRouteParam(group));\n\n  return combineLatest(allParams$).pipe(map(allParams => allParams.find(v => v !== undefined)));\n};\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const createRouteParams = <T extends RouteParamPayload = string>(\n  activatedRoute: ActivatedRoute,\n  itemNavigation: ӨItemNavigationService,\n  rootModel: ӨRootContainerService,\n): RouteParamsStore<T> => ({\n  source: (group: string) => () => getRouteParam(activatedRoute, group).pipe(map(deserialize)),\n  sink: (group: string) => {\n    return stdin => {\n      stdin.pipe(map(serialize), routeParams(group)).subscribe(params => {\n        rootModel\n          .commonAncestor(new CommunicationDefinition(TAG, group))\n          .pipe(first())\n          .subscribe(commonAncestor => {\n            if (commonAncestor === undefined) {\n              return console.warn('No Inputs configured to receive route param');\n            }\n            itemNavigation.navigateToItem(commonAncestor.name, params);\n          });\n      });\n    };\n  },\n});\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const routeParamsProcessorConfig: PipelineProcessorConfig = createPipelineProcessorConfig(TAG, {\n  provide: new InjectionToken('Route param pipeline handler'),\n  useFactory: createRouteParams,\n  deps: [ActivatedRoute, ӨItemNavigationService, ӨRootContainerService],\n});\n\nfunction serialize<T extends RouteParamPayload>(outputValue: T): string {\n  return typeof outputValue === 'string' ? outputValue : `\"${JSON.stringify(outputValue)}\"`;\n}\n\nfunction deserialize(payload: string | undefined) {\n  if (payload === undefined) {\n    return undefined;\n  }\n\n  // not serialized\n  if (!(payload.startsWith('\"') && payload.endsWith('\"'))) {\n    return payload;\n  }\n\n  // actually attempt to deserialize\n  try {\n    return JSON.parse(payload.substr(1, payload.length - 2));\n  } catch (_) {\n    return payload;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { PipelineSink, Sink } from '../pipeline-interface';\nimport { ӨItemNavigationService } from '../../item-navigation.service';\nimport { InjectionToken } from '@angular/core';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\nimport { ActivatedRoute } from '@angular/router';\nimport { RouterNavigationService } from '../../../routing/navigation/router-navigation.service';\n\nexport interface RouteParams {\n  [key: string]: any;\n}\n\nexport interface RouteParamsMultiSink extends PipelineSink<RouteParams> {\n  /**\n   * Save the given route params to the current route.\n   *\n   * If `targetName` is given it will also navigate to that item.\n   *\n   * Note: This sink only *writes* to the route. To read the params into a\n   * component input you must use the `RouteParamsStore`.\n   *\n   * @param targetName Optionally navigate to the given cxp item by name and save to\n   *   this item's route.\n   */\n  sink: (targetName?: string) => Sink<RouteParams>;\n}\n\nexport const createRouteParamsMulti = (\n  activatedRoute: ActivatedRoute,\n  routerService: RouterNavigationService,\n  itemNavigation: ӨItemNavigationService,\n): RouteParamsMultiSink => ({\n  sink: (targetName?: string) => (stdin: Observable<RouteParams>) => {\n    stdin.subscribe(params => {\n      if (!targetName) {\n        routerService.navigate(routerService.setParams(params, activatedRoute));\n      } else {\n        itemNavigation.navigateToItem(targetName, params);\n      }\n    });\n  },\n});\n\n/**\n * Configure the `RouteParamsMultiSink`.\n *\n * Use the string 'route-param-multi' to configure this handler.\n *\n * @usageNotes\n *\n * Store some 2-way bound states to the router as \"paramName\"\n *\n * ```json\n * {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": \"route-param-multi\",\n *     \"input.myInput\": \"route-param input1\", // assuming input1 is set via myOutput\n *     \"input.myInput2\": \"route-param input2\" // assuming input2 is set via myOutput\n *   }\n * }\n * ```\n *\n * Navigate to widget-b and pass data via route-param\n *\n * ```json\n * {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": \"route-param-multi widget-b\"\n *   }\n * },\n * {\n *   \"name\": \"widget-b\",\n *   \"properties\": {\n *     \"input.myInput\": \"route-param input1\",\n *     \"input.myInput2\": \"route-param input2\"\n *   }\n * }\n * ```\n *\n * See `RouteParamsMultiSink` for more options.\n *\n * Also see:\n *  - `routeParamsProcessorConfig`\n *  -\n */\nexport const routeParamsMultiProcessorConfig: PipelineProcessorConfig<'route-param-multi'> = {\n  name: 'route-param-multi',\n  provider: {\n    provide: new InjectionToken('Route param multi pipeline handler'),\n    useFactory: createRouteParamsMulti,\n    deps: [ActivatedRoute, RouterNavigationService, ӨItemNavigationService],\n  },\n};\n","import { Observable } from 'rxjs';\nimport { PipelineSink, Sink } from '../pipeline-interface';\nimport { ӨItemNavigationService } from '../../item-navigation.service';\nimport { InjectionToken } from '@angular/core';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\n\nexport interface ItemNavigateSink extends PipelineSink<any> {\n  /**\n   * Navigate to `targetName` when component outputs.\n   *\n   * @param targetName Navigate to the given cxp item by name.\n   */\n  sink: (targetName: string) => Sink<any>;\n}\n\nexport const createItemNavigate = (itemNavigation: ӨItemNavigationService): ItemNavigateSink => ({\n  sink: (targetName: string) => (stdin: Observable<any>) => {\n    stdin.subscribe(() => {\n      itemNavigation.navigateToItem(targetName, {});\n    });\n  },\n});\n\n/**\n * Configure the `ItemNavigateSink`.\n *\n * Use the string 'item-navigate' to configure this handler.\n *\n * Note: to pass route params you must use `RouteParamsStore` instead.\n *\n * @usageNotes\n *\n * Navigate between widgets\n *\n *\n * ```json\n * {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": \"item-navigate widget-b\"\n *   }\n * },\n * {\n *   \"name\": \"widget-b\"\n * }\n * ```\n *\n * See `RouteParamsStore` for more options.\n */\nexport const itemNavigateProcessorConfig: PipelineProcessorConfig<'item-navigate'> = {\n  name: 'item-navigate',\n  provider: {\n    provide: new InjectionToken('Item navigation pipeline handler'),\n    useFactory: createItemNavigate,\n    deps: [ӨItemNavigationService],\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Property } from '@backbase/foundation-ang/web-sdk';\nimport { ItemModel } from '../../../models/item-model';\nimport { PipelineSource, Source } from '../pipeline-interface';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\n\n/**\n * A `PipelineProcessor` which can be used as a source for a component's\n * input.\n *\n * See `modelProcessorConfig` for configuration.\n */\nexport interface ModelSource extends PipelineSource<Property | undefined> {\n  /**\n   * @param propertyName the name of the model property to read from\n   */\n  source: (propertyName: string) => Source<Property | undefined>;\n}\n\nexport const createModelSource = (itemModel: ItemModel): PipelineSource<Property | undefined> => ({\n  source: (propertyName: string) => () => itemModel.property(propertyName),\n});\n\n/**\n * Configure the `ModelSource`.\n *\n * Use the string 'model' to configure this handler.\n *\n * @usageNotes\n *\n * ```json\n * {\n *   \"modelProperty\": \"foobar\",\n *   \"input.myInput\": \"model modelProperty\", // read the value of modelProperty\n * }\n * ```\n */\nexport const modelProcessorConfig: PipelineProcessorConfig<'model'> = {\n  name: 'model',\n  provider: {\n    provide: new InjectionToken('Model pipeline handler'),\n    useFactory: createModelSource,\n    deps: [ItemModel],\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { pluck } from 'rxjs/operators';\nimport { CommunicationDefinition, serializerDeserializer } from '@backbase/communication-property';\nimport { Property } from '@backbase/foundation-ang/web-sdk';\n\nimport { AppConfigService } from '../../../models/app-config.service';\nimport { PipelineSource, Source } from '../pipeline-interface';\nimport { createPipelineProcessorConfig, PipelineProcessorConfig } from '../pipeline-registry';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * A `PipelineProcessor` which can be used as a source for a component's\n * input.\n *\n * See `appConfigProcessorConfig` for configuration.\n */\nexport interface AppConfigSource extends PipelineSource<Property | undefined> {\n  /**\n   * @param configName the name of the app config property to read from\n   */\n  source: (configName: string) => Source<Property | undefined>;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const createAppConfigSource = (appConfig: AppConfigService): PipelineSource<Property | undefined> => ({\n  source: (configName: string) => (): Observable<Property> => appConfig.getConfig().pipe(pluck(configName)),\n});\n\nconst TAG: 'app-config' = 'app-config';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * AppConfig Communication Transport\n *\n * Can be used in standalone development to configure communication using AppConfig\n */\nexport class AppConfig {\n  /**\n   * Generate a serialized communication configuration suitable for use as a Widget Input property value.\n   *\n   * @param group The name of the communication group to which the Input belongs\n   */\n  static toProperty(group: string): string {\n    return serializerDeserializer.toProperty(new CommunicationDefinition(TAG, group));\n  }\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Configure the `AppConfigSource`.\n *\n * Use the `AppConfig.toProperty` helper to configure this handler.\n *\n * @usageNotes\n *\n * ```json\n * {\n *   \"input.myInput\": \"AppConfig.toProperty(configPropertyName)\", // read the value of application configuration\n * }\n * ```\n */\nexport const appConfigProcessorConfig: PipelineProcessorConfig = createPipelineProcessorConfig(TAG, {\n  provide: new InjectionToken('Application configuration pipeline handler'),\n  useFactory: createAppConfigSource,\n  deps: [AppConfigService],\n});\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PipelineSink, Sink } from '../pipeline-interface';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\n\nexport class UrlSinkNavigator {\n  go(url: string): void {\n    window.location.href = url;\n  }\n}\n\n/**\n * A `PipelineProcessor` which can be used as a sink\n * to navigate to a URL when a component outputs.\n *\n * The value of the stream can be passed as a query parameter\n * if the `paramName` is set.\n *\n * See `urlProcessorConfig` for configuration.\n */\nexport interface UrlSink extends PipelineSink<string | undefined> {\n  /**\n   * @param url The full URL to navigate to\n   * @param paramName An optional param to pass in the query string\n   */\n  sink: (url: string, paramName?: string) => Sink<string | undefined>;\n}\n\nexport const createUrlSink = (navigator: UrlSinkNavigator = new UrlSinkNavigator()): UrlSink => ({\n  sink: (url: string, paramName?: string) => (stdin: Observable<string | undefined>) => {\n    stdin.subscribe((payload: string | undefined) => {\n      navigator.go(navigationUrlWithParam(url, paramName, payload));\n    });\n  },\n});\n\nfunction navigationUrlWithParam(navigationUrl: string, paramName?: string, param?: string) {\n  if (!paramName || !param) {\n    return navigationUrl;\n  }\n  const paramSeparator = navigationUrl.indexOf('?') === -1 ? '?' : '&';\n  return `${navigationUrl}${paramSeparator}${paramName}=${param}`;\n}\n\n/**\n * Configure the `UrlSink`.\n *\n * Use the string 'url' to configure this handler.\n *\n * @usageNotes\n *\n * ```json\n * {\n *   \"output.myOutput1\": \"url http://www.google.com/\", // navigate without param\n *   \"output.myOutput2\": \"url http://www.google.com/ query\" // navigate with param\n * }\n * ```\n */\nexport const urlProcessorConfig: PipelineProcessorConfig<'url'> = {\n  name: 'url',\n  provider: {\n    provide: new InjectionToken('Url pipeline handler'),\n    useFactory: createUrlSink,\n    deps: [],\n  },\n};\n","import { InjectionToken } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { PipelineSink, Sink, Source, PipelineSource } from '../pipeline-interface';\nimport { createPipelineProcessorConfig, PipelineProcessorConfig } from '../pipeline-registry';\nimport { getRouteParam } from './route-param';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Path fragment\n */\nexport type RoutePath = string;\n\nconst TAG: 'router.navigate' = 'router.navigate';\n\nconst isDefined = <T>(param: undefined | T): param is T => param !== undefined;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const PARAM_PLACEHOLDER_BUILDER = Symbol('Param Placeholder Builder');\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Placeholder to use for a named optional matrix param in `RouterNavigate`.\n *\n * This class is private. Use `RouterNavigateSink.param` to create a placeholder.\n */\nexport class RouterNavigateParamPlaceholder {\n  private constructor(public readonly paramName: string) {}\n\n  /**\n   * @internal\n   */\n  static [PARAM_PLACEHOLDER_BUILDER](name: string) {\n    return new RouterNavigateParamPlaceholder(name);\n  }\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Serialize the command generated with TS to pipeline source argument strings for the model.\n *\n * - Path commands are serialized as the path string.\n * - Single named optional params are serialzed as {paramName}\n * @param commands\n */\nexport const serializeCommands = (commands: Array<RoutePath | RouterNavigateParamPlaceholder>): Array<string> => {\n  // Validate that there is only max one placeholder\n  if (commands.filter(command => command instanceof RouterNavigateParamPlaceholder).length > 1) {\n    throw new Error('RouterNavigate: Only a single placeholder can be configured');\n  }\n\n  return commands.map(command => {\n    if (command instanceof RouterNavigateParamPlaceholder) {\n      return `{${command.paramName}}`;\n    } else {\n      return command;\n    }\n  });\n};\n\n/**\n * Deserialize the pipeline string arguments to commands for Router.navigate.\n * @param commands\n */\nconst deserializeCommands = (commands: Array<string>): Array<RoutePath | RouterNavigateParamPlaceholder> =>\n  commands.map(command => {\n    const paramNameMatches = command.match(/^{([^}]+)}$/);\n    if (!paramNameMatches) {\n      return command;\n    }\n    return RouterNavigateParamPlaceholder[PARAM_PLACEHOLDER_BUILDER](paramNameMatches[1]);\n  });\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Helper to configure output properties to write to the `RouterNavigateStore`\n *\n * @usageNotes\n *\n * To navigate like:\n *\n * ```ts\n * myOutput.subscribe(() => Router.navigate(['items']);)\n * ```\n *\n * Configure your model like:\n *\n * ```json\n *  {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": RouterNavigateSink.navigate(['items']),\n *   }\n * }\n * ```\n *\n * To navigate to nested paths like:\n *\n * ```ts\n * myOutput.subscribe(() => Router.navigate(['dashboard', 'transactions']);)\n * ```\n *\n * Configure your model like:\n *\n * ```json\n *  {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": RouterNavigateSink.navigate(['dashboard', 'transactions']),\n *   }\n * }\n * ```\n *\n * To navigate passing [optional route\n * params](https://angular.io/guide/router-tutorial-toh#heroes-list-optionally-selecting-a-hero),\n * eg in Angular it would be:\n *\n * ```ts\n * heroId.subscribe((heroId) => Router.navigate(['heroes', { id: heroId }]));\n * ```\n *\n * Configure your model like:\n *\n * ```json\n * {\n *   \"output.heroId\": RouterNavigateSink.navigate(['heroes', RouterNavigateSink.param('id')]),\n * }\n * ```\n *\n * To read a param you can connect an input to the `RouterNavigateSource`.\n */\nexport class RouterNavigateSink {\n  /**\n   * Generate a serialized `PipelineSink` configuration suitable for use as a Widget Output property value.\n   *\n   * @param commands The commands to use for navigation.\n   */\n  static navigate(commands: Array<RoutePath | RouterNavigateParamPlaceholder>): string {\n    return `${TAG} ${serializeCommands(commands).join(' ')}`;\n  }\n\n  /**\n   * Create a param placeholder to use in a `RouterNavigateSink`.\n   *\n   * @param paramName\n   */\n  static param(paramName: string): RouterNavigateParamPlaceholder {\n    if (!paramName) {\n      throw new Error('RouterNavigateSink.param: paramName must be set');\n    }\n    return RouterNavigateParamPlaceholder[PARAM_PLACEHOLDER_BUILDER](paramName);\n  }\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Helper to configure input properties to read from the `RouterNavigateStore`\n *\n * @usageNotes\n *\n *\n * To read a param into an input property:\n *\n * ```json\n * {\n *   \"input.heroId\": RouterNavigateSource.param('id')\n * }\n * ```\n */\nexport class RouterNavigateSource {\n  /**\n   * Generate a serialized `PipelineSource` configuration suitable for use as a Widget Input property value.\n   *\n   * @param paramName The name of the param to read from the URL.\n   */\n  static param(paramName: string): string {\n    return `${TAG} ${paramName}`;\n  }\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * A `PipelineProcessor` which can be used as a sink to navigate like Angular's `Router.Navigate` does.\n *\n * The value of the stream can be passed as an optional parameter.\n *\n * It can also be used as a source to read the params into a widget's inputs.\n *\n * There are some known limitations to the navigate sink:\n *\n *  1. You can only navigate with the primary outlet, not named outlets.\n *  2. You cannot navigate to paths with required params, only optional (matrix) params.\n *  3. You can only pass a single param name/value.\n *  4. You can only pass a string/number value.\n *  5. If there are other outlets in the current activate route, they Will be removed.\n *\n * If you require a more complex navigation, it's recommended to create a simple sink\n * of your own. See `PipelineProcessor` and `PipelineProcessorConfig`.\n *\n * See `RouterNavigateSink` and `RouterNavigateSource` for configuration.\n */\nexport interface RouterNavigateStore extends PipelineSink<string | undefined>, PipelineSource<string | undefined> {\n  /**\n   * A `PipelineProcessor` sink which navigates to a URL using angular's `Router.navigate`.\n   *\n   * To configure an output property for this sink use `RouterNavigateSink`.\n   *\n   * @param commands An array of URL fragments with which to construct the new URL tree.\n   */\n  sink: (...commands: Array<string>) => Sink<string | undefined>;\n\n  /**\n   * A `PipelineProcessor` source which reads from a URL param.\n   *\n   * To configure an input property for this source use `RouterNavigateSource`.\n   *\n   * @param paramName\n   */\n  source: (paramName: string) => Source<string | undefined>;\n}\n\nconst matrixParam = (\n  param: RouterNavigateParamPlaceholder,\n  paramValue: string | undefined,\n): { [key: string]: string } | undefined =>\n  isDefined(paramValue) ? { [param.paramName]: `${paramValue}` } : paramValue;\n\n// Convert configured navigate commands to actual angular Router.navigate commands\nconst navigateCommands = (\n  commands: Array<RoutePath | RouterNavigateParamPlaceholder>,\n  paramValue: string | undefined,\n): Array<string | { [key: string]: string }> =>\n  commands\n    .map(command => (command instanceof RouterNavigateParamPlaceholder ? matrixParam(command, paramValue) : command))\n    .filter(isDefined);\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const createRouterNavigateStore = (router: Router, activatedRoute: ActivatedRoute): RouterNavigateStore => ({\n  sink: (...serializedCommands) => {\n    const commands = deserializeCommands(serializedCommands);\n    return stdin => {\n      stdin.subscribe(paramValue => {\n        router.navigate(navigateCommands(commands, paramValue));\n      });\n    };\n  },\n  source: (paramName: string) => () => getRouteParam(activatedRoute, paramName),\n});\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const routerNavigateProcessorConfig: PipelineProcessorConfig = createPipelineProcessorConfig(TAG, {\n  provide: new InjectionToken('Router.Navigate pipeline handler'),\n  useFactory: createRouterNavigateStore,\n  deps: [Router, ActivatedRoute],\n});\n","export interface Edge<S> {\n  value: S;\n}\n\n/**\n * @deprecated\n */\nexport class Graph<T, S> {\n  public vertexes: Set<T> = new Set();\n  public edges: Map<T, Map<T, Edge<S>>> = new Map();\n\n  public add(vertex: T): void {\n    this.vertexes.add(vertex);\n  }\n\n  public connect(from: T, to: T, value: S) {\n    this.add(from);\n    this.add(to);\n\n    let vertexEdges = this.edges.get(from);\n    if (vertexEdges === undefined) {\n      vertexEdges = new Map();\n      this.edges.set(from, vertexEdges);\n    }\n    vertexEdges.set(to, { value });\n  }\n\n  public getEdge(from: T, to: T): S | undefined {\n    const edges = this.edges.get(from);\n    const edge = edges === undefined ? undefined : edges.get(to);\n    return edge === undefined ? undefined : edge.value;\n  }\n}\n","import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { Graph } from '../../models/graph';\n\nexport type ClassId = string;\nexport type OutputName = string;\nexport type InputName = string;\n\nexport interface ComponentOutputConfig {\n  classId: ClassId;\n  outputName: OutputName;\n}\nexport interface ComponentInputConfig {\n  classId: ClassId;\n  inputName?: InputName;\n}\n\nexport interface CommunicationFlowConfig {\n  output: ComponentOutputConfig;\n  input: ComponentInputConfig;\n  mapPayload?: (payload: any) => any;\n}\n\nexport interface Flow {\n  output: OutputName;\n  input?: InputName;\n  map?: (payload: any) => any;\n}\n\nexport const CONFIG_FLOWS = new InjectionToken<Array<Array<CommunicationFlowConfig>>>(\n  '@backbase/foundation Communcation Flow Configuration',\n);\n\n@Injectable()\nexport class FlowsService {\n  private readonly transitions = new Graph<ClassId, Array<Flow>>();\n\n  constructor(\n    @Optional()\n    @Inject(CONFIG_FLOWS)\n    flowsConfig: // eslint-disable-next-line @typescript-eslint/array-type\n    Array<CommunicationFlowConfig>[] | null, // Angular doesn't like nested array types\n  ) {\n    if (flowsConfig !== null) {\n      flowsConfig.forEach(flows => {\n        flows.forEach(flow => {\n          this.addFlow(flow);\n        });\n      });\n    }\n  }\n\n  private addFlow(config: CommunicationFlowConfig) {\n    const currentEdge = this.transitions.getEdge(config.output.classId, config.input.classId);\n    const flow = {\n      output: config.output.outputName,\n      input: config.input.inputName,\n      map: config.mapPayload,\n    };\n    const edge = currentEdge ? [...currentEdge, flow] : [flow];\n    this.transitions.connect(config.output.classId, config.input.classId, edge);\n  }\n\n  public getFlows(\n    from: ClassId,\n    fromOutput: OutputName,\n    to: Array<ClassId>,\n    toInput: InputName | undefined,\n  ): Array<Flow> {\n    const flows = to.reduce(\n      (acc, classId) => [...acc, ...(this.transitions.getEdge(from, classId) || [])],\n      [] as Array<Flow>,\n    );\n\n    return flows.filter(\n      flow =>\n        flow.output === fromOutput && (toInput === undefined || flow.input === undefined || toInput === flow.input),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Flow, FlowsService } from './flows.service';\nimport { ӨItemNavigationService } from '../item-navigation.service';\nimport { ItemModel } from '../../models/item-model';\n\n@Injectable()\nexport class ItemTransitionService {\n  constructor(private readonly flows: FlowsService, private readonly navigationService: ӨItemNavigationService) {}\n\n  transition(\n    fromItem: ItemModel,\n    fromOutput: string,\n    toItem: ItemModel,\n    toInput: string | undefined,\n    ancestors: Array<ItemModel>,\n    payload: any,\n  ): Promise<boolean> {\n    // Deprecated\n    const flows = this.flows.getFlows(\n      fromItem.ɵclassId,\n      fromOutput,\n      [...ancestors.map(item => item.ɵclassId)],\n      toInput,\n    );\n    if (flows.length === 0) {\n      flows.push({ output: fromOutput, input: toInput });\n    }\n    const params = this.mapFlows(flows, toInput, payload);\n    return this.navigationService.navigateToItem(toItem.name, params);\n  }\n\n  private mapFlows(flows: Array<Flow>, toInput: string | undefined, payload: any): any {\n    return flows.reduce((acc, flow) => {\n      const inputName = toInput || flow.input || flow.output;\n      const value = flow.map ? flow.map(payload) : payload;\n      if (value === undefined) {\n        return acc; // @todo: should it be possible to \"clear\" a param with undefined?\n      }\n      // Note: if 2 flows map to the same input, the 2nd will overwrite\n      return {\n        ...acc,\n        [inputName]: value,\n      };\n    }, {});\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\nimport { ItemTransitionService } from '../../deprecated/item-transition.service';\nimport { PipelineSink } from '../pipeline-interface';\nimport { ItemModel, ItemModelTree } from '../../../models/item-model';\nimport { ӨRootContainerService } from '../../../models/root-container.service';\nimport { mergeMap, filter, map } from 'rxjs/operators';\n\nexport const pipeName = 'navigation';\n\nexport const navigationHandlerToken = new InjectionToken('Navigation handler');\n\nexport const createNavigationSink = (\n  rootContainer: ӨRootContainerService,\n  itemTransition: ItemTransitionService,\n  itemModel: ItemModel,\n): PipelineSink<string | undefined> => {\n  return {\n    sink: (outputName?: string, config?: string) => (stdin: Observable<string | undefined>) => {\n      if (outputName === undefined || config === undefined) {\n        return;\n      }\n      const [targetName, targetInput] = config.split('.') as [string, string | undefined];\n\n      const target$: Observable<ItemModelTree> = rootContainer.model.pipe(\n        mergeMap(tree => tree.find(item => item.name === targetName)),\n        filter((a: ItemModelTree | undefined): a is ItemModelTree => a !== undefined),\n      );\n      const targetAnscestors: Observable<Array<ItemModel>> = target$.pipe(\n        mergeMap(tree => tree.flatten()),\n        map(flatNodes => flatNodes.map(node => node.value)),\n      );\n      combineLatest([target$, targetAnscestors, stdin]).subscribe(([target, anscestors, payload]) =>\n        itemTransition.transition(itemModel, outputName, target.value, targetInput, anscestors, payload),\n      );\n    },\n  };\n};\n\nexport const navigationProcessorConfig: PipelineProcessorConfig = {\n  name: pipeName,\n  provider: {\n    provide: navigationHandlerToken,\n    useFactory: createNavigationSink,\n    deps: [ӨRootContainerService, ItemTransitionService, ItemModel],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { ItemModel, ItemModelTree } from './item-model';\nimport { ӨRootContainerService } from './root-container.service';\nimport { ObservableTree } from './tree';\n\n/**\n * The model of the item at the root of the SPA (ie: the app container).\n */\n@Injectable()\nexport class RootItemModelService {\n  constructor(private readonly rootModel: ӨRootContainerService) {}\n\n  /**\n   * Find an item by searching the tree of the SPA.\n   *\n   * Note: Because the model of the SPA can change, this method returns an observable.\n   *\n   * @param name The instance name of the item to find.\n   */\n  findByName(name: string): Observable<ItemModelTree | undefined> {\n    return this.find(model => model.name === name);\n  }\n\n  private find(predicate: (value: ItemModel) => boolean): Observable<ObservableTree<ItemModel> | undefined> {\n    return this.rootModel.model.pipe(switchMap(model => model.find(predicate)));\n  }\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { ItemModel } from '../../models/item-model';\nimport { ObservableTree } from '../../models/tree';\nimport { ItemRegistryService } from '../item-registry.service';\n\n/**\n * AreaComponent is a wrapper for ChromeComponent,\n * which defines the area for dynamic components rendering\n */\n@Component({\n  selector: 'bb-area',\n  template: `\n    <ng-container *ngFor=\"let item of children\">\n      <router-outlet *ngIf=\"isModule(item.value); else renderModel\"></router-outlet>\n      <ng-template #renderModel><bb-chrome [item]=\"item\"></bb-chrome></ng-template>\n      <ng-container> </ng-container\n    ></ng-container>\n  `,\n  styles: [':host { display: block; }'],\n})\nexport class AreaComponent {\n  /**\n   * name attribute of the area,\n   * represented also as a \"data-area\"\n   * attribute in the corresponding node\n   */\n  @HostBinding('attr.data-area')\n  @Input()\n  name = '0';\n\n  @Input() children: Array<ObservableTree<ItemModel>> = [];\n\n  constructor(private itemRegistry: ItemRegistryService) {}\n\n  /**\n   * @internal\n   */\n  isModule(model: ItemModel) {\n    return !!this.itemRegistry.getModuleLoader(model.ɵclassId);\n  }\n}\n","import { Router, ActivatedRoute, NavigationExtras, UrlTree, PRIMARY_OUTLET } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { ItemModel } from '../../models/item-model';\nimport { AbstractRouterConfigService } from '../config/abstract-router-config.service';\n\n@Injectable()\nexport class RouterService {\n  readonly outletName: Observable<string | undefined> = this.routerConfig.ɵitemOutletName(this.itemModel);\n\n  /**\n   * Backbase Angular Router abstraction.\n   * See https://angular.io/api/router/Router\n   *\n   * The purpose for Backbase abstracting around the default Angular Router is\n   * when linking a to a bb-router-outlet. The outlet name for a bb-router-outlet\n   * is dynamically generated by a property on the model, so you can use the\n   * Backbase Router service to automatically apply the outletName to the navigation\n   * commands.\n   *\n   * @param router Angular Router\n   * @param route Angular ActivatedRoute\n   * @param itemModel Model of the Backbase Widget or Container\n   */\n  constructor(\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    private readonly itemModel: ItemModel,\n    private readonly routerConfig: AbstractRouterConfigService,\n  ) {}\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   * See Angular Router.navigate\n   */\n  navigate(commands: Array<any>, extras: NavigationExtras = {}): Promise<boolean> {\n    return this.createUrlTree(commands, extras).then(urlTree =>\n      this.router.navigateByUrl(this.router.serializeUrl(urlTree), extras),\n    );\n  }\n\n  /**\n   * Applies an array of commands to the current url tree and creates a new url tree.\n   * See Angular Router.createUrlTree\n   */\n  createUrlTree(commands: Array<any>, extras: NavigationExtras = {}): Promise<UrlTree> {\n    return this.outletName\n      .pipe(take(1))\n      .toPromise()\n      .then(outletName => this.outletCommands(outletName, commands))\n      .then(cmnds =>\n        this.router.createUrlTree(cmnds, {\n          relativeTo: this.route,\n          ...extras,\n        }),\n      );\n  }\n\n  private outletCommands(outletName: string | undefined, commands: Array<any>): Array<any> {\n    if (outletName == null || outletName === PRIMARY_OUTLET) {\n      return commands;\n    } else {\n      return [{ outlets: { [outletName]: commands } }];\n    }\n  }\n}\n","import { Injector, Provider, Injectable, StaticProvider } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ItemModelTree, ItemModel } from '../models/item-model';\nimport { RouterService } from '../routing/navigation/router.service';\n\nimport { FeaturesService } from '@backbase/foundation-ang/future';\nimport { ɵSTORE_BRANCH, ɵSTORE_DISPATCH_CHANNEL, StoreFactory, ɵStoreBroker } from '@backbase/foundation-ang/store';\nimport { PipelineRegistry } from '../communication/pipes/pipeline-registry';\nimport { InputBrokerService } from '../communication/item-io/input-broker.service';\nimport { OutputBrokerService } from '../communication/item-io/output-broker.service';\nimport { PipelineService } from '../communication/pipes/pipeline.service';\nimport { uniq } from '../models/array';\nimport { TemplateRegistry } from '../customizable/template-registry';\nimport { AbstractRouterConfigService } from '../routing/config/abstract-router-config.service';\n\n@Injectable()\nexport class ItemInjectorService {\n  constructor(private readonly inputBroker: InputBrokerService, private readonly outputBroker: OutputBrokerService) {}\n\n  createInjector(parent: Injector | undefined, item: ItemModelTree): Injector {\n    const widgetProvider: Provider = {\n      provide: ItemModel,\n      useValue: item.value,\n    };\n    const containerProvider: Provider = {\n      provide: ItemModelTree,\n      useValue: item,\n    };\n    const routerServiceProvider: StaticProvider = {\n      provide: RouterService,\n      deps: [Router, ActivatedRoute, ItemModel, AbstractRouterConfigService],\n    };\n\n    /**\n     * @todo: consider putting *all* configured handlers on the\n     * injector, instead of only handlers used based on the model.\n     *\n     * This would make it possible to create higher-order handlers\n     */\n    const communicationPipelineProviders: Array<StaticProvider> = uniq([\n      ...this.inputBroker.getItemProviders(item.value),\n      ...this.outputBroker.getItemProviders(item.value),\n    ]);\n    const pipelineService: StaticProvider = {\n      provide: PipelineService,\n      deps: [PipelineRegistry, Injector],\n    };\n\n    return Injector.create({\n      providers: [\n        widgetProvider,\n        containerProvider,\n        routerServiceProvider,\n        ...communicationPipelineProviders,\n        pipelineService,\n        {\n          provide: ɵSTORE_BRANCH,\n          useValue: item.value.name,\n        },\n        {\n          provide: ɵSTORE_DISPATCH_CHANNEL,\n          useValue: item.value.name,\n        },\n        {\n          provide: StoreFactory,\n          useClass: StoreFactory,\n          deps: [ɵStoreBroker, ɵSTORE_BRANCH, ɵSTORE_DISPATCH_CHANNEL, FeaturesService],\n        },\n        {\n          provide: TemplateRegistry,\n          useClass: TemplateRegistry,\n          deps: [],\n        },\n      ],\n      parent,\n    });\n  }\n}\n","import { Injectable, ComponentFactoryResolver, ComponentFactory } from '@angular/core';\nimport { ItemRegistryService } from './item-registry.service';\n\n@Injectable()\nexport class CombinedComponentFactoryResolver {\n  private readonly childResolvers = new Map<string, ComponentFactoryResolver>();\n  constructor(\n    private readonly itemRegistry: ItemRegistryService,\n    private readonly rootResolver: ComponentFactoryResolver,\n  ) {}\n\n  registerChildResolver(classId: string, resolver: ComponentFactoryResolver) {\n    this.childResolvers.set(classId, resolver);\n  }\n\n  resolveComponentFactory<T>(classId: string): ComponentFactory<T> {\n    const type = this.itemRegistry.getComponentValue(classId);\n    if (!type) {\n      throw new Error(`@backbase/foundation No component registered for ${classId}. Did you add it to the classMap?`);\n    }\n    const resolver = this.childResolvers.get(classId) || this.rootResolver;\n    return resolver.resolveComponentFactory(type);\n  }\n}\n","import { Compiler, Injector, NgModuleRef, Injectable, Inject, Optional, NgModuleFactory, Type } from '@angular/core';\nimport { hasDuplicates } from '../models/array';\nimport { ItemRegistryService } from './item-registry.service';\nimport { CombinedComponentFactoryResolver } from './combined-component-factory-resolver';\nimport { LazyComponentsConfig, LazyConfig, LAZY_MAP } from './lazy-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemLoaderService {\n  private readonly lazyComponentsConfig: Array<LazyComponentsConfig>;\n  constructor(\n    private readonly compiler: Compiler,\n    private readonly parentInjector: Injector,\n    private readonly itemRegistry: ItemRegistryService,\n    private readonly componentFactoryResolver: CombinedComponentFactoryResolver,\n    // @fixme: generate lazy map from the page model?\n    @Inject(LAZY_MAP)\n    @Optional()\n    lazyConfig: LazyConfig | null,\n  ) {\n    this.lazyComponentsConfig = lazyConfig\n      ? lazyConfig.filter((config): config is LazyComponentsConfig => !!(config as LazyComponentsConfig).components)\n      : [];\n\n    if (\n      hasDuplicates(\n        this.lazyComponentsConfig.reduce((acc, config) => [...acc, ...config.components], [] as Array<string>),\n      )\n    ) {\n      throw new Error(\n        '[LazyConfig] You have added one or more components inside multiple lazy loading bundles. ' +\n          \"This will make an impact on your app's performance. \" +\n          'Update your config to have one component included in only one bundle.',\n      );\n    }\n  }\n\n  /**\n   * Loads the module this class is in, and adds\n   * it to the global item registry, and global component\n   * resolver.\n   *\n   * @param classId\n   */\n  loadComponent(classId: string): Promise<void> {\n    if (this.itemRegistry.has(classId) || this.lazyComponentsConfig.length === 0) {\n      return Promise.resolve();\n    }\n\n    const foundBundle = this.lazyComponentsConfig.find(item => item.components.indexOf(classId) !== -1);\n    const callback = foundBundle ? foundBundle.loadChildren : undefined;\n\n    if (!callback) {\n      return Promise.resolve();\n    }\n\n    return callback()\n      .then(this.toModuleFactory.bind(this))\n      .then(this.loadModule.bind(this))\n      .then(this.registerModule.bind(this, classId));\n  }\n\n  private toModuleFactory(loadedItem: NgModuleFactory<unknown> | Type<unknown>): NgModuleFactory<unknown> {\n    // Depending on compiler, callback can return either module factory or the module itself.\n    return loadedItem instanceof NgModuleFactory ? loadedItem : this.compiler.compileModuleSync(loadedItem);\n  }\n\n  private loadModule(moduleFactory: NgModuleFactory<unknown>): NgModuleRef<unknown> {\n    return moduleFactory.create(this.parentInjector);\n  }\n\n  private registerModule(classId: string, ngModule: NgModuleRef<unknown>) {\n    this.registerComponentClass(classId, ngModule);\n    this.registerComponentFactoryResolver(classId, ngModule);\n  }\n\n  private registerComponentClass(classId: string, ngModule: NgModuleRef<unknown>) {\n    const childRegistry = ngModule.injector.get<ItemRegistryService>(ItemRegistryService);\n    const componentClass = childRegistry.getComponentValue(classId);\n    if (!componentClass) {\n      throw new Error(`@backbase/foundation No component registered for ${classId}. Did you add it to the classMap?`);\n    }\n    this.itemRegistry.add(classId, componentClass);\n  }\n\n  private registerComponentFactoryResolver(classId: string, ngModule: NgModuleRef<unknown>) {\n    this.componentFactoryResolver.registerChildResolver(classId, ngModule.componentFactoryResolver);\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  HostBinding,\n  Input,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { ItemModel } from '../../models/item-model';\nimport { ObservableTree } from '../../models/tree';\nimport { ItemLifecycleService } from '../item-lifecycle.service';\nimport { ItemInjectorService } from '../item-injector.service';\nimport { ReplaySubject, Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil, pairwise, startWith, withLatestFrom, last, switchMap, map } from 'rxjs/operators';\nimport { ItemLoaderService } from '../item-loader.service';\nimport { CombinedComponentFactoryResolver } from '../combined-component-factory-resolver';\n\nexport type ComponentItemModelTuple = [ComponentRef<any>, ObservableTree<ItemModel>];\n\n/**\n * ChromeComponent represents \"chrome element\" and\n * implements dynamic components rendering\n */\n@Component({\n  selector: 'bb-chrome',\n  template: ` <ng-container #vc></ng-container> `,\n})\nexport class ChromeComponent implements OnInit, OnDestroy {\n  /**\n   * Represents a container where View can be attached\n   */\n  @ViewChild('vc', { read: ViewContainerRef, static: true })\n  vcRef: ViewContainerRef | undefined;\n\n  private readonly gc$ = new Subject<void>();\n  private readonly itemValue = new ReplaySubject<ObservableTree<ItemModel>>(1);\n  private readonly component$: Observable<ComponentRef<any>> = this.itemValue.pipe(\n    switchMap(item => this.createComponent(item)),\n    shareReplay(1),\n  );\n  private readonly componentItemModelTuple: Observable<\n    ComponentItemModelTuple | [undefined, undefined]\n  > = this.component$.pipe(\n    withLatestFrom(this.itemValue),\n    map(([ref, item]): ComponentItemModelTuple | [undefined, undefined] =>\n      ref === undefined ? [undefined, undefined] : [ref, item],\n    ),\n    startWith<ComponentItemModelTuple | [undefined, undefined]>([undefined, undefined]),\n  );\n\n  /**\n   * data-chrome attribute instructs CXP to use this component as drop target area\n   */\n  @HostBinding('attr.data-chrome') name: string | undefined;\n\n  /**\n   * Setter (Input) for an item to be bootstrapped\n   * @param item Actual item to be bootstrapped\n   */\n  @Input()\n  set item(item: ObservableTree<ItemModel>) {\n    this.name = item.value.name;\n    this.itemValue.next(item);\n  }\n\n  /**\n   * ChromeComponent constructor\n   * @param componentFactoryResolver Factory which allows chrome component to resolve items\n   * @param injectors Injectors map\n   * @param components Components Registry Service\n   */\n  constructor(\n    private readonly itemLifecycle: ItemLifecycleService,\n    private readonly itemInjector: ItemInjectorService,\n    private readonly itemLoader: ItemLoaderService,\n    private readonly componentFactoryLoader: CombinedComponentFactoryResolver,\n  ) {}\n\n  ngOnInit() {\n    // Insert component on create\n    this.componentItemModelTuple\n      .pipe(pairwise(), takeUntil(this.gc$))\n      .subscribe(([[oldComponent, oldItemValue], [component, item]]) => {\n        if (!this.vcRef || !component || !item) {\n          return;\n        }\n        if (oldComponent && oldItemValue) {\n          this.itemLifecycle.onRemove(oldItemValue, oldComponent);\n        }\n\n        this.vcRef.clear();\n        this.vcRef.insert(component.hostView);\n        this.itemLifecycle.onCreate(item, component);\n        component.changeDetectorRef.markForCheck();\n      });\n  }\n\n  ngOnDestroy() {\n    // Cleanup on destroy\n    this.componentItemModelTuple.pipe(takeUntil(this.gc$), last()).subscribe(([component, item]) => {\n      if (item && component) {\n        this.itemLifecycle.onRemove(item, component);\n      }\n    });\n\n    this.gc$.next();\n    this.gc$.complete();\n  }\n\n  /**\n   * inner helper function which creates components\n   * @param item item to be created\n   */\n  private createComponent(item: ObservableTree<ItemModel>): Promise<ComponentRef<any>> {\n    return this.itemLoader\n      .loadComponent(item.value.ɵclassId)\n      .then(() => this.componentFactoryLoader.resolveComponentFactory(item.value.ɵclassId))\n      .then(componentFactory => {\n        // FIXME: @deprecated parentInjector (no replacement)\n        const injector = this.itemInjector.createInjector(this.vcRef && this.vcRef.parentInjector, item);\n\n        // Create the component\n        return componentFactory.create(injector);\n      });\n  }\n}\n","import { ComponentRef, Injector } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpErrorResponse,\n  HttpClient,\n} from '@angular/common/http';\n\nimport { Observable, throwError, race } from 'rxjs';\nimport { switchMap, catchError, map, take } from 'rxjs/operators';\nimport { StepUpService, StepUpComponent, StepUpComponentType } from './stepup.service';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type ShouldInterceptStepUpCallback = (response: HttpErrorResponse) => boolean;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface ShouldInterceptStepUpConfig {\n  /**\n   * Step-up authentication is triggered when the response `statusCode` matches the one defined by this option.\n   * Default: `401`.\n   */\n  statusCode: number;\n  /**\n   * Step-up authentication is triggered when this header is present in a error response in combination with `statusCode` check\n   * Default: `WWW-Authenticate`.\n   */\n  headerAttribute: string;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const createInterceptCallback = (\n  interceptConfig: ShouldInterceptStepUpConfig,\n): ShouldInterceptStepUpCallback => (responseError: HttpErrorResponse): boolean => {\n  return (\n    responseError.status === interceptConfig.statusCode &&\n    responseError.headers.get(interceptConfig.headerAttribute) !== null\n  );\n};\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const isInterceptCallback = (\n  interceptConfig: ShouldInterceptStepUpCallback | ShouldInterceptStepUpConfig,\n): interceptConfig is ShouldInterceptStepUpCallback => typeof interceptConfig === 'function';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * The step-up interceptor configuration interface.\n * Step-up authentication provides a higher level of assurance that\n * a person is who they claim to be. When a user tries to perform a task,\n * they are challenged to produce additional forms of authentication.\n */\nexport interface StepUpInterceptorConfig {\n  /**\n   * Configuration for the retry requests of the stepup authentication mechanism.\n   */\n  retryRequests: {\n    /**\n     * The key of the header which is added to the retry request.\n     * The value for this header will be determined by the payload of an event\n     * emitted by the `StepUpComponentType.complete`. See the `StepUpComponentType` interface.\n     * Default: `X-MFA`\n     */\n    headerAttribute: string;\n  };\n  /**\n   * If this header is present, on a error response and it matches statusCode, it will trigger a step-up mechanism\n   */\n  interceptResponses: ShouldInterceptStepUpCallback | ShouldInterceptStepUpConfig;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Configuration interface for the step-up authentication.\n */\nexport type StepUpConfig = StepUpInterceptorConfig & {\n  /**\n   * Step-up component class. When a step-up request is intercepted this is the\n   * component which will be displayed to resolve the step-up authentication.\n   */\n  mediatorComponentClass: StepUpComponentType;\n};\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const DEFAULT_STEPUP_CONFIG: StepUpInterceptorConfig = {\n  retryRequests: {\n    headerAttribute: 'X-MFA',\n  },\n  interceptResponses: {\n    statusCode: 401,\n    headerAttribute: 'WWW-Authenticate',\n  },\n};\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type StepupComponentCompleteEvent = ['complete', string];\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type StepupComponentCancelEvent = ['cancel', undefined];\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type StepupComponentEvents = StepupComponentCancelEvent | StepupComponentCompleteEvent;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport class StepUpInterceptor implements HttpInterceptor {\n  /**\n   * @deprecated Should not be public\n   * @todo convert to a local variable within  the intercept handler\n   */\n  mediatorComponent: ComponentRef<StepUpComponent> | undefined;\n\n  constructor(\n    private readonly stepupService: StepUpService,\n    private readonly config: StepUpConfig,\n    private readonly injector: Injector,\n  ) {}\n\n  intercept<R, T>(req: HttpRequest<R>, next: HttpHandler): Observable<HttpEvent<T>> {\n    const shouldIntercept: ShouldInterceptStepUpCallback = isInterceptCallback(this.config.interceptResponses)\n      ? this.config.interceptResponses\n      : createInterceptCallback(this.config.interceptResponses);\n    return next.handle(req).pipe(\n      catchError((error: HttpErrorResponse): Observable<never> | Observable<HttpEvent<T>> => {\n        if (!shouldIntercept(error)) {\n          // if it's an error which shouldn't be intercepted propagate the error\n          // to as if it wasn't intercepted at all.\n          return throwError(error);\n        }\n        this.mediatorComponent = this.mediatorComponent ?? this.stepupService.stepupComponent;\n\n        // Errors which are to be intercepted should be \"paused\" and the stream will be handled according\n        // to the event coming from a mediator component. On complete event we are going to retry the request\n        // while if any other event was fired by the mediator component, we proceed with the error as usual\n        const handleMediatorComponentEvent = ([event, token]: StepupComponentEvents): Observable<HttpEvent<T>> => {\n          if (event === 'complete' && token) {\n            // The HttpClient cannot be injected because it is a circular dependency, so we must lazily get it only when required.\n            const http = this.injector.get<HttpClient>(HttpClient);\n            return http.request<T>(req.clone({ setHeaders: { [this.config.retryRequests.headerAttribute]: token } }));\n          } else {\n            return throwError(error);\n          }\n        };\n\n        // we listen to an event from mediator component in order to be able to amend\n        // requests \"chain\", so we can repeat the request or just propagate the error\n        const mediatorComponentResponse = race<StepupComponentEvents>(\n          this.mediatorComponent.instance.complete.pipe(\n            map<string, StepupComponentCompleteEvent>(value => ['complete', value]),\n          ),\n          this.mediatorComponent.instance.cancel.pipe(\n            map<any, StepupComponentCancelEvent>(() => ['cancel', undefined]),\n          ),\n        ).pipe(take(1), switchMap(handleMediatorComponentEvent));\n\n        // and we trigger the component to open\n        this.mediatorComponent.instance.open(error);\n        return mediatorComponentResponse;\n      }),\n    );\n  }\n}\n","import {\n  ComponentRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Injectable,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport { StepUpConfig, DEFAULT_STEPUP_CONFIG } from './stepup.interceptor';\nimport { CustomStepUpConfig } from './stepup.module';\nimport { HttpErrorResponse } from '@angular/common/http';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const STEPUP_CONFIG = new InjectionToken<StepUpConfig>('Custom step-up configuration injection token');\n\n/**\n * @deprecated Will be removed in v7.0.0\n * The interface which should be implemented by a stepUp component\n */\nexport interface StepUpComponent {\n  /**\n   * Indicates that the secret has been provided by the user via the `StepUpComponent`.\n   * After it emits the retry request will be sent to the API endpoint.\n   */\n  complete: EventEmitter<string>;\n  /**\n   * The StepUpComponent instance emits this cancel event to trigger standard behaviour.\n   * That is, there is no retry request and HttpEvent is propagated to the next interceptor in the chain.\n   */\n  cancel: EventEmitter<any>;\n  /**\n   * The method of the `StepUpComponent` which is called when a request is intercepted.\n   * Trigger this method should show the component where user can provide a second step \"secret\".\n   */\n  open: (response: HttpErrorResponse) => void;\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * The type which defines the StepUpComponent signature\n */\nexport type StepUpComponentType = new (...args: Array<any>) => StepUpComponent;\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@Injectable()\nexport class StepUpService {\n  private stepupComponentRef: ComponentRef<StepUpComponent> | undefined;\n  private readonly stepupConfig: StepUpConfig;\n\n  constructor(\n    private readonly resolver: ComponentFactoryResolver,\n    @Inject(STEPUP_CONFIG) stepupConfigParam: CustomStepUpConfig,\n  ) {\n    this.stepupConfig = { ...DEFAULT_STEPUP_CONFIG, ...stepupConfigParam };\n  }\n\n  get stepupComponent(): ComponentRef<StepUpComponent> {\n    if (this.stepupComponentRef) {\n      return this.stepupComponentRef;\n    }\n    throw new Error('No stepupComponent defined');\n  }\n\n  createStepUpComponent(stepupContainer: ViewContainerRef) {\n    stepupContainer.clear();\n    const factory: ComponentFactory<StepUpComponent> = this.resolver.resolveComponentFactory(\n      this.stepupConfig.mediatorComponentClass,\n    );\n    this.stepupComponentRef = stepupContainer.createComponent(factory);\n  }\n}\n","import {\n  ComponentRef,\n  ViewContainerRef,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Injectable,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\n\n/**\n * The session timeout configuration.\n * Allows the application to manage the session timeout component class and inactivity modal time.\n */\nexport interface SessionTimeoutConfig {\n  /**\n   * The name of the component to be used for stepup mechanism\n   */\n  sessionTimeoutComponentClass: SessionTimeoutComponentType;\n  /**\n   * The time before session expiry that the modal should appear in seconds\n   */\n  inactivityModalTime: number;\n}\n\nexport const SESSION_TIMEOUT_CONFIG = new InjectionToken<SessionTimeoutConfig>(\n  'Custom session timeout configuration injection token',\n);\n\n/**\n * The interface for a SessionTimeoutComponent\n */\nexport interface SessionTimeoutComponent {\n  /**\n   * The default time in seconds to open the session timeout modal before session expiry.\n   * This will be overwritten if you set `maxInactivityDuration` in the experience configuration\n   */\n  inactivityModalTime: number;\n}\n\n/**\n * The session timeout component type, set to SessionTimeoutComponent\n */\nexport type SessionTimeoutComponentType = new (...args: Array<any>) => SessionTimeoutComponent;\n\n/**\n * The session timeout service creates a session timeout component instance within the root.\n */\n@Injectable()\nexport class SessionTimeoutService {\n  private sessionTimeoutComponentRef: ComponentRef<SessionTimeoutComponent> | undefined;\n\n  constructor(\n    private readonly resolver: ComponentFactoryResolver,\n    @Inject(SESSION_TIMEOUT_CONFIG) private readonly sessionTimeoutConfig: SessionTimeoutConfig,\n  ) {}\n\n  get sessionTimeoutComponent(): ComponentRef<SessionTimeoutComponent> {\n    if (this.sessionTimeoutComponentRef) {\n      return this.sessionTimeoutComponentRef;\n    }\n    throw new Error('No sessionTimeoutComponent defined');\n  }\n\n  createSessionTimeoutComponent(sessionTimeoutContainer: ViewContainerRef) {\n    sessionTimeoutContainer.clear();\n    const factory: ComponentFactory<SessionTimeoutComponent> = this.resolver.resolveComponentFactory(\n      this.sessionTimeoutConfig.sessionTimeoutComponentClass,\n    );\n    this.sessionTimeoutComponentRef = sessionTimeoutContainer.createComponent(factory);\n    this.sessionTimeoutComponentRef.instance.inactivityModalTime = this.sessionTimeoutConfig.inactivityModalTime;\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Optional,\n  OnInit,\n  OnDestroy,\n  NgZone,\n  ViewChild,\n  ViewContainerRef,\n  Inject,\n} from '@angular/core';\nimport { flatMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { ItemModel } from '../../models/item-model';\nimport { ObservableTree } from '../../models/tree';\nimport { ӨRootContainerService } from '../../models/root-container.service';\nimport { ӨItemNavigationService } from '../../communication/item-navigation.service';\nimport { StepUpService } from '../../stepup/stepup.service';\nimport { SessionTimeoutService } from '../../session-timeout/session-timeout.service';\nimport { PUBSUB, Pubsub } from '@backbase/foundation-ang/web-sdk';\n\n@Component({\n  selector: 'bb-root',\n  template: `\n    <bb-area [children]=\"children | async\"></bb-area>\n    <template #stepupContainer></template>\n    <template #sessionTimeoutContainer></template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RootComponent implements OnInit, OnDestroy {\n  @ViewChild('stepupContainer', { read: ViewContainerRef, static: true })\n  readonly stepupContainer: ViewContainerRef | undefined;\n  @ViewChild('sessionTimeoutContainer', { read: ViewContainerRef, static: true })\n  readonly sessionTimeoutContainer: ViewContainerRef | undefined;\n\n  readonly children: Observable<Array<ObservableTree<ItemModel>>> = this.rootContainer.model.pipe(\n    flatMap(state => state.children),\n  );\n\n  constructor(\n    private readonly rootContainer: ӨRootContainerService,\n    private readonly zone: NgZone,\n    private readonly itemNavigation: ӨItemNavigationService,\n    @Optional()\n    @Inject(PUBSUB)\n    private readonly events?: Pubsub,\n    @Optional() private readonly stepupService?: StepUpService,\n    @Optional() private readonly sessionTimeoutService?: SessionTimeoutService,\n  ) {}\n\n  readonly eventListener: EventListener = ({ name }: any) => {\n    // [FIXME] This zone should almost certainly be handled in the EventBus, but can't be currently\n    // because we only provide an interface not a wrapper\n    this.zone.run(() => {\n      this.itemNavigation.navigateToItem(name, {});\n    });\n  };\n\n  ngOnInit() {\n    if (this.events) {\n      this.events.subscribe('navigation.viewItem', this.eventListener);\n    }\n    if (this.stepupService && this.stepupContainer) {\n      this.stepupService.createStepUpComponent(this.stepupContainer);\n    }\n    if (this.sessionTimeoutService && this.sessionTimeoutContainer) {\n      this.sessionTimeoutService.createSessionTimeoutComponent(this.sessionTimeoutContainer);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.events) {\n      this.events.unsubscribe('navigation.viewItem', this.eventListener);\n    }\n  }\n}\n","import {\n  Directive,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnDestroy,\n  HostListener,\n  Attribute,\n  Renderer2,\n  ElementRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Router, ActivatedRoute, NavigationEnd, UrlTree } from '@angular/router';\nimport { LocationStrategy } from '@angular/common';\nimport { RouterService } from '../navigation/router.service';\n\n// This is declared in `@angular/router/src/config`, but doesn't seem to be exported\nexport type QueryParamsHandling = 'merge' | 'preserve' | '';\n\nconst toCommandsArray = (commands: Array<any> | string): Array<any> => {\n  if (commands != null) {\n    return Array.isArray(commands) ? commands : [commands];\n  } else {\n    return [];\n  }\n};\n\n@Directive({ selector: 'a[bbRouterLink]' })\nexport class RouterLinkWithHrefDirective implements OnChanges, OnDestroy {\n  @HostBinding('attr.target')\n  @Input()\n  target: string | undefined;\n\n  @Input() queryParams: { [k: string]: any } | undefined;\n  @Input() fragment: string | undefined;\n  @Input() queryParamsHandling: QueryParamsHandling | undefined;\n  @Input() preserveFragment: boolean | undefined;\n  @Input() skipLocationChange: boolean | undefined;\n  @Input() replaceUrl: boolean | undefined;\n\n  private commands: Array<any> = [];\n  private readonly subscriptions: Array<Subscription>;\n  private readonly preserve: boolean | undefined;\n\n  constructor(\n    private readonly router: Router,\n    private readonly bbRouter: RouterService,\n    private readonly locationStrategy: LocationStrategy,\n    private readonly el: ElementRef,\n    private readonly renderer: Renderer2,\n  ) {\n    this.subscriptions = [\n      router.events.subscribe(s => {\n        if (s instanceof NavigationEnd) {\n          this.updateTargetUrlAndHref();\n        }\n      }),\n    ];\n  }\n\n  @Input()\n  set bbRouterLink(commands: Array<any> | string) {\n    this.commands = toCommandsArray(commands);\n  }\n\n  ngOnChanges() {\n    this.updateTargetUrlAndHref();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  @HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'])\n  onClick(button: number, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): boolean {\n    if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n      return true;\n    }\n\n    if (typeof this.target === 'string' && this.target !== '_self') {\n      return true;\n    }\n\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n    this.urlTree.then(urlTree => {\n      this.router.navigateByUrl(this.router.serializeUrl(urlTree), extras);\n    });\n    return false;\n  }\n\n  private updateTargetUrlAndHref(): void {\n    this.urlTree.then(urlTree => {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'href',\n        this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(urlTree)),\n      );\n    });\n  }\n\n  get urlTree(): Promise<UrlTree> {\n    return this.bbRouter.createUrlTree(this.commands, {\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      ...(attrBoolValue(this.preserve) ? { queryParamsHandling: 'preserve' } : {}),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\n}\n\n@Directive({ selector: ':not(a)[bbRouterLink]' })\nexport class RouterLinkDirective {\n  @Input() queryParams: { [k: string]: any } | undefined;\n  @Input() fragment: string | undefined;\n  @Input() queryParamsHandling: QueryParamsHandling | undefined;\n  @Input() preserveFragment: boolean | undefined;\n  @Input() skipLocationChange: boolean | undefined;\n  @Input() replaceUrl: boolean | undefined;\n  private commands: Array<any> = [];\n  private readonly preserve: boolean | undefined;\n\n  constructor(\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    @Attribute('tabindex') tabIndex: string,\n    renderer: Renderer2,\n    el: ElementRef,\n    private readonly bbRouter: RouterService,\n  ) {\n    if (tabIndex == null) {\n      renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n    }\n  }\n\n  @Input()\n  set bbRouterLink(commands: Array<any> | string) {\n    this.commands = toCommandsArray(commands);\n  }\n\n  @HostListener('click')\n  onClick(): boolean {\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n    };\n\n    this.urlTree.then(urlTree => {\n      this.router.navigateByUrl(this.router.serializeUrl(urlTree), extras);\n    });\n    return true;\n  }\n\n  get urlTree(): Promise<UrlTree> {\n    return this.bbRouter.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      ...(attrBoolValue(this.preserve) ? { queryParamsHandling: 'preserve' } : {}),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\n}\n\nfunction attrBoolValue(s: any): boolean {\n  return s === '' || !!s;\n}\n","import {\n  AfterContentInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  QueryList,\n  Renderer2,\n  Optional,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { RouterLinkDirective, RouterLinkWithHrefDirective } from './router-link.directive';\nimport { Router, NavigationEnd, Event } from '@angular/router';\n\n/**\n * Router link options\n */\nexport interface RouterLinkActiveOptions {\n  /**\n   * If it is `true`, the directive will add the classes only when the url matches the link exactly.\n   * Default: `false`\n   */\n  exact?: boolean;\n  /**\n   * If it is defined, active link will get `aria-current` attribute set to the value provided and all\n   * the other links will get `aria-current` set to `'false'`.\n   * Default: `undefined`\n   */\n  ariaCurrent?: string;\n}\n\n/**\n *\n * @description\n *\n * Lets you add a CSS class and `aria-current` attribute to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class and `aria-current` attribute to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a bbRouterLink=\"/user/bob\" bbRouterLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class Will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a bbRouterLink=\"/user/bob\" bbRouterLinkActive=\"class1 class2\">Bob</a>\n * <a bbRouterLink=\"/user/bob\" [bbRouterLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a bbRouterLink=\"/user/bob\" bbRouterLinkActive=\"active-link\" [bbRouterLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive to set `aria-current` attribute for all links. If option is defined,\n * value will be added to the active link and `aria-current=\"false\"` to the other links.\n *\n * ```\n * <a bbRouterLink=\"/user/bob\" bbRouterLinkActive=\"active-link\" [bbRouterLinkActiveOptions]=\"{ariaCurrent: 'page'}\">\n *  Bob\n * </a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a bbRouterLink=\"/user/bob\" bbRouterLinkActive #rla=\"bbRouterLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div bbRouterLinkActive=\"active-link\" [bbRouterLinkActiveOptions]=\"{exact: true}\">\n *   <a bbRouterLink=\"/user/jim\">Jim</a>\n *   <a bbRouterLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * @ngModule RouterModule\n *\n */\n@Directive({\n  selector: '[bbRouterLinkActive]',\n  exportAs: 'bbRouterLinkActive',\n})\nexport class RouterLinkActiveDirective implements OnChanges, OnDestroy, AfterContentInit {\n  @ContentChildren(RouterLinkDirective, { descendants: true })\n  links: QueryList<RouterLinkDirective> | undefined;\n  @ContentChildren(RouterLinkWithHrefDirective, { descendants: true })\n  linksWithHrefs: QueryList<RouterLinkWithHrefDirective> | undefined;\n\n  private classes: Array<string> = [];\n  private readonly subscription: Subscription;\n  public readonly isActive: boolean = false;\n\n  @Input() bbRouterLinkActiveOptions: RouterLinkActiveOptions = {};\n\n  constructor(\n    private readonly router: Router,\n    private readonly element: ElementRef,\n    private readonly renderer: Renderer2,\n    @Optional() private readonly link?: RouterLinkDirective,\n    @Optional() private readonly linkWithHref?: RouterLinkWithHrefDirective,\n  ) {\n    this.subscription = router.events.subscribe((s: Event) => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n\n  ngAfterContentInit(): void {\n    if (!this.links || !this.linksWithHrefs) return;\n    this.links.changes.subscribe(_ => this.update());\n    this.linksWithHrefs.changes.subscribe(_ => this.update());\n    this.update();\n  }\n\n  @Input()\n  set bbRouterLinkActive(data: Array<string> | string) {\n    const classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(c => !!c);\n  }\n\n  ngOnChanges(): void {\n    this.update();\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  private updateClasses(hasActiveLinks: boolean) {\n    this.classes.forEach(c => {\n      if (hasActiveLinks) {\n        this.renderer.addClass(this.element.nativeElement, c);\n      } else {\n        this.renderer.removeClass(this.element.nativeElement, c);\n      }\n    });\n  }\n\n  private updateAria(hasActiveLinks: boolean) {\n    const ariaAttr = 'aria-current';\n    if (this.bbRouterLinkActiveOptions.ariaCurrent) {\n      this.renderer.setAttribute(\n        this.element.nativeElement,\n        ariaAttr,\n        hasActiveLinks ? this.bbRouterLinkActiveOptions.ariaCurrent : 'false',\n      );\n    } else {\n      this.renderer.removeAttribute(this.element.nativeElement, ariaAttr);\n    }\n  }\n\n  private update(): void {\n    if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;\n    this.hasActiveLinks().then(hasActiveLinks => {\n      if (this.isActive !== hasActiveLinks) {\n        (this as any).isActive = hasActiveLinks;\n        this.updateAria(hasActiveLinks);\n        this.updateClasses(hasActiveLinks);\n      }\n    });\n  }\n\n  private isLinkActive(router: Router): (link: RouterLinkDirective | RouterLinkWithHrefDirective) => Promise<boolean> {\n    return (link: RouterLinkDirective | RouterLinkWithHrefDirective): Promise<boolean> =>\n      link.urlTree.then(urlTree => router.isActive(urlTree, !!this.bbRouterLinkActiveOptions.exact));\n  }\n\n  private hasActiveLinks(): Promise<boolean> {\n    if (!this.links || !this.linksWithHrefs) return Promise.resolve(false);\n    return Promise.all([\n      this.link ? this.isLinkActive(this.router)(this.link) : Promise.resolve(false),\n      this.linkWithHref ? this.isLinkActive(this.router)(this.linkWithHref) : Promise.resolve(false),\n      ...this.links.map(this.isLinkActive(this.router)),\n      ...this.linksWithHrefs.map(this.isLinkActive(this.router)),\n    ]).then((liveActives: Array<boolean>): boolean => liveActives.some(a => a));\n  }\n}\n","import {\n  Directive,\n  OnDestroy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ChangeDetectorRef,\n  OnInit,\n  Output,\n  ComponentRef,\n  EventEmitter,\n} from '@angular/core';\nimport { RouterOutlet, ChildrenOutletContexts, Router, PRIMARY_OUTLET, Data, ActivatedRoute } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RouterService } from '../navigation/router.service';\n\nconst OUTLET_IS_NOT_INITIALIZED_ERROR = 'Outlet is not instantiated';\n\n/**\n * Includes the component associated with the current Route\n */\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: 'bb-router-outlet',\n  exportAs: 'bbOutlet',\n})\nexport class RouterOutletDirective implements OnInit, OnDestroy {\n  private outlet: RouterOutlet | undefined;\n  private nameValue: string | undefined;\n  private readonly destroy$ = new Subject();\n\n  private get name(): string {\n    return this.nameValue || PRIMARY_OUTLET;\n  }\n\n  /**\n   * A router outlet will emit an activate event any time a new component\n   * is being instantiated.\n   */\n  // eslint-disable-next-line  @angular-eslint/no-output-rename\n  @Output('activate') activateEvents = new EventEmitter<any>();\n\n  /**\n   * A router outlet will emit a deactivate event when the route component\n   * is being destroyed.\n   */\n  // eslint-disable-next-line  @angular-eslint/no-output-rename\n  @Output('deactivate') deactivateEvents = new EventEmitter<any>();\n\n  get isActivated(): boolean {\n    return this.outlet ? this.outlet.isActivated : false;\n  }\n\n  get component(): Object {\n    if (!this.outlet) {\n      throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);\n    }\n    return this.outlet.component;\n  }\n\n  get activatedRoute(): ActivatedRoute {\n    if (!this.outlet) {\n      throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);\n    }\n    return this.outlet.activatedRoute;\n  }\n\n  get activatedRouteData(): Data {\n    if (!this.outlet) {\n      return {};\n    }\n    return this.outlet.activatedRouteData;\n  }\n\n  constructor(\n    private readonly childrenOutletContexts: ChildrenOutletContexts,\n    private readonly componentFactoryResolver: ComponentFactoryResolver,\n    private readonly vcRef: ViewContainerRef,\n    private readonly cdRef: ChangeDetectorRef,\n    private readonly router: Router,\n    private readonly bbRouter: RouterService,\n  ) {}\n\n  private destroy(): Promise<void> {\n    if (this.nameValue) {\n      return this.removeOutletFromUrl()\n        .then(() => this.router.navigate(['/']))\n        .then(() => this.destroyChild());\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  private destroyChild() {\n    if (this.outlet) {\n      this.outlet.ngOnDestroy();\n    }\n  }\n\n  private removeOutletFromUrl(): Promise<boolean> {\n    // @todo: It's not possible to remove an outlet from the navigation.\n    // @see: https://github.com/angular/angular/issues/15338 (this workaround is from there)\n    return this.nameValue ? this.router.navigate([{ outlets: { [this.nameValue]: null } }]) : Promise.resolve(true);\n  }\n\n  ngOnInit() {\n    this.bbRouter.outletName.pipe(takeUntil(this.destroy$)).subscribe(outletName => {\n      this.destroy().then(() => {\n        this.nameValue = outletName;\n\n        this.outlet = new RouterOutlet(\n          this.childrenOutletContexts,\n          this.vcRef,\n          this.componentFactoryResolver,\n          this.name,\n          this.cdRef,\n        );\n\n        this.outlet.activateEvents.subscribe((event: any) => {\n          this.activateEvents.next(event);\n        });\n        this.outlet.deactivateEvents.subscribe((event: any) => {\n          this.deactivateEvents.next(event);\n        });\n\n        // Doesn't implement the `RouterOutlet` interface due to private members\n        this.childrenOutletContexts.onChildOutletCreated(this.name, this as any);\n\n        this.outlet.ngOnInit();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n    this.destroyChild();\n    this.childrenOutletContexts.onChildOutletDestroyed(this.name);\n  }\n\n  attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute): void {\n    if (!this.outlet) {\n      throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);\n    }\n    return this.outlet.attach(ref, activatedRoute);\n  }\n\n  detach(): ComponentRef<any> {\n    if (!this.outlet) {\n      throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);\n    }\n    return this.outlet.detach();\n  }\n\n  deactivate(): void {\n    if (this.outlet) {\n      this.outlet.deactivate();\n    }\n  }\n\n  activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver | null) {\n    if (!this.outlet) {\n      throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);\n    }\n    // Not sure how hacky this is - forcefully deactivating the outlet before reactivating it.\n    this.outlet.deactivate();\n    return this.outlet.activateWith(activatedRoute, resolver);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, Routes } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { skip, take, withLatestFrom, startWith } from 'rxjs/operators';\nimport { ӨItemNavigationService } from '../../communication/item-navigation.service';\nimport {\n  isInsert,\n  isPropertyUpdate,\n  ModelUpdate,\n  ӨRootContainerService,\n  isRemovalUpdate,\n} from '../../models/root-container.service';\nimport { isContainer } from '../../models/item-model-utils';\nimport { RouterConfigService } from './router-config.service';\n\nconst noop = undefined;\n\nexport interface BootstrapService {\n  bootstrap: Function;\n}\n\nexport function createRouteConfigBootstrap(routerBootstrap: BootstrapService) {\n  return routerBootstrap.bootstrap.bind(routerBootstrap);\n}\n\ninterface ItemNavigation {\n  name: string;\n  nthChild?: number;\n}\n\nconst notEmpty = (a: Array<any>): boolean => a.length > 0;\n\nconst itemToNavigate = (update: ModelUpdate): ItemNavigation => {\n  if (isInsert(update)) {\n    // navigate to the first child of inserted item (if exists) or to the item itself\n    return {\n      name: update.item.name,\n      nthChild: isContainer(update.item) && notEmpty(update.item.children) ? 0 : undefined,\n    };\n  } else if (isPropertyUpdate(update)) {\n    // navigate to the updated item (@todo: if this item is currently active)\n    return { name: update.name };\n  } else if (isRemovalUpdate(update)) {\n    // navigate to the nth child of the parent\n    return { name: update.parentName, nthChild: update.index };\n  } else {\n    throw Error('not handled model update');\n  }\n};\n\n@Injectable()\nexport class RouterBootstrapService {\n  private readonly bootstrapRoutes: Observable<Routes> = this.routerConfig.routes.pipe(take(1));\n  private readonly updateRoutes: Observable<[Routes, ModelUpdate | undefined]> = this.routerConfig.routes.pipe(\n    skip(1),\n    withLatestFrom(this.rootModel.modelUpdates.pipe(startWith(noop))),\n  );\n\n  constructor(\n    private readonly routerConfig: RouterConfigService,\n    private readonly router: Router,\n    private readonly rootModel: ӨRootContainerService,\n    private readonly itemNavigation: ӨItemNavigationService,\n  ) {}\n\n  bootstrap() {\n    const initialRoutes: Routes = this.router.config;\n\n    this.bootstrapRoutes.subscribe(routes => {\n      this.router.resetConfig([...routes, ...initialRoutes]);\n      this.router.initialNavigation();\n    });\n\n    let lastUpdate: ModelUpdate | undefined;\n    this.updateRoutes.subscribe(([routes, update]) => {\n      this.router.resetConfig([...routes, ...initialRoutes]);\n      if (update && lastUpdate !== update) {\n        lastUpdate = update;\n        this.navigateOnUpdates(update);\n      } else {\n        this.router.navigateByUrl(this.router.url, { skipLocationChange: true });\n      }\n    });\n  }\n\n  private navigateOnUpdates(update: ModelUpdate) {\n    const itemNavigation = itemToNavigate(update);\n    const navigation =\n      itemNavigation.nthChild !== undefined\n        ? this.itemNavigation.navigateToChild(itemNavigation.name, itemNavigation.nthChild, {})\n        : this.itemNavigation.navigateToItem(itemNavigation.name, {});\n    navigation.then((result: boolean) => {\n      if (!result) {\n        // If the navigation failed, it might be because the item\n        // was not within a routable item, so it can't be navigated to.\n        // In this case, we trigger a navigation to '/' to trigger\n        // and new redirects (this use-case is when a \"deck-container\" is\n        // dropped onto the root of the page, we need to trigger the\n        // redirect to the first route).\n        // @todo: is there a better way to trigger redirects?\n        // @todo: is there a better way to know that the navigation\n        //   failure was because it was to a non-routable item? maybe\n        //   it should throw instead of resolve false?\n        this.router.navigateByUrl('/');\n      }\n    });\n  }\n}\n","import { ComponentMap } from './rendering/item-registry.service';\nimport { CommunicationFlowConfig } from './communication/deprecated/flows.service';\nimport { AssetsConfiguration } from './assets/assets.service';\nimport { EnabledFeaturesConfig, DeprecationsService } from '@backbase/foundation-ang/future';\nimport { RouteGuardsConfig } from './routing/guards/route-guards-registry.service';\nimport { InjectionToken } from '@angular/core';\nimport { PipelineProcessorConfig } from './communication/pipes/pipeline-registry';\nimport { LazyConfig } from './rendering/lazy-config';\n\n/**\n * Options to configure the Backbase Core Functionality.\n */\nexport interface BackbaseCoreConfiguration {\n  /**\n   * A hash map of Backbase Item components (widget or container),\n   * where key is string matching the `classId` item property,\n   * and value is the Angular component Class.\n   */\n  classMap?: ComponentMap;\n\n  /**\n   * Register Route Guards that can be attached to routes based on the Item Model\n   *\n   * This only allows guards to be configured via the Item Model properties - the guards\n   * must still be provided in a `NgModule` `providers`.\n   */\n  guards?: RouteGuardsConfig;\n\n  /**\n   * Configure the input/output processors available in\n   * this app (in addition to the default processors).\n   */\n  pipelineProcessors?: Array<PipelineProcessorConfig>;\n}\n\n/**\n * Options to configure the Backbase Core Functionality.\n */\nexport interface BackbaseRootConfiguration {\n  /**\n   * Application assets configuration.\n   */\n  assets?: AssetsConfiguration;\n\n  /**\n   * A hash map of Backbase Item components (widget or container),\n   * where key is string matching the `classId` item property,\n   * and value is the Angular component Class.\n   */\n  classMap?: ComponentMap;\n\n  /**\n   * Configuration of \"navigation\" output handler.\n   */\n  flows?: Array<CommunicationFlowConfig>;\n\n  /**\n   * Configure the input/output processors available in\n   * this app (in addition to the default processors).\n   */\n  pipelineProcessors?: Array<PipelineProcessorConfig>;\n\n  /**\n   * Register Route Guards that can be attached to routes based on the Item Model\n   *\n   * This only allows guards to be configured via the Item Model properties - the guards\n   * must still be provided in a `NgModule` `providers`.\n   */\n  guards?: RouteGuardsConfig;\n\n  /**\n   * Decide if deprecation warnings should be logged to the developer console.\n   */\n  logDeprecations?: boolean;\n\n  /**\n   * Opt in to future features.\n   */\n  features?: EnabledFeaturesConfig;\n\n  /**\n   * Option for lazy loaded modules configuration.\n   */\n  lazyModules?: LazyConfig;\n}\n\nexport { ComponentMap, ComponentClass } from './rendering/item-registry.service';\nexport {\n  CommunicationFlowConfig,\n  ComponentOutputConfig,\n  ComponentInputConfig,\n  ClassId,\n  OutputName,\n  InputName,\n} from './communication/deprecated/flows.service';\nexport { EnabledFeaturesConfig } from '@backbase/foundation-ang/future';\n\nexport const DEPRECATED_WITH_CONFIG = new InjectionToken<DeprecatedWithConfig>(\n  'Flags whether BackbaseCoreModule.withConfig was called with deprecated options',\n);\n\nexport interface DeprecatedWithConfig {\n  assets?: any;\n  logDeprecationsService?: any;\n  features?: any;\n  flows?: any;\n  [key: string]: any | undefined;\n}\n\nexport const logDeprecatedConfig = (\n  deprecationService: DeprecationsService,\n  deprecatedConfigs: Array<DeprecatedWithConfig>,\n) => {\n  const deprecatedOptions: Array<string> = deprecatedConfigs.reduce<Array<string>>(\n    (acc, deprecatedConfig) => [\n      ...acc,\n      ...Object.keys(deprecatedConfig).filter(key => deprecatedConfig[key] !== undefined),\n    ],\n    [],\n  );\n  if (deprecatedOptions.length > 0) {\n    deprecationService.logDeprecatedFeature(\n      `Deprecated options (${deprecatedOptions.join(', ')}) ` +\n        'being used with BackbaseCoreModule.withConfig. Use BackbaseCoreModule.forRoot instead.',\n    );\n  }\n};\n\nexport const createLogDeprecatedConfig = (\n  deprecationService: DeprecationsService,\n  deprecatedConfig: Array<DeprecatedWithConfig>,\n) => {\n  return logDeprecatedConfig.bind(null, deprecationService, deprecatedConfig);\n};\n","import { Injectable, InjectionToken } from '@angular/core';\nimport { CommunicationDefinition, serializerDeserializer } from '@backbase/communication-property';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { concatMap, filter, first, map } from 'rxjs/operators';\nimport { ӨRootContainerService } from '../../../models/root-container.service';\nimport { ItemModel } from '../../../models/item-model';\nimport { ӨItemNavigationService } from '../../item-navigation.service';\nimport { PipelineSink, PipelineSource, Sink, Source } from '../pipeline-interface';\nimport { createPipelineProcessorConfig, PipelineProcessorConfig } from '../pipeline-registry';\nimport { asyncScheduler } from 'rxjs';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Use a service to store data and pass it between widgets.\n *\n * ```\n * [ Component Output ] -> [ Memory Store ]\n * [ Memory Store ] -> [ Component Input ]\n * ```\n *\n * See `Memory` for configuration.\n */\nexport interface MemoryStore<T> extends PipelineSource<T | undefined>, PipelineSink<T> {\n  /**\n   * @param group The name communication group to connect via the store\n   */\n  source: (group: string) => Source<T | undefined>;\n  /**\n   * @param group The name communication group to connect via the store\n   */\n  sink: (group: string) => Sink<T>;\n}\n\nconst TAG: 'memory' = 'memory';\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Memory Communication Transport\n *\n * Can be used to configure communication using Memory.\n *\n * @usageNotes\n *\n * Pass some data to widget-b via an in memory store\n *\n * ```json\n * {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": Memory.toProperty(\"myGroupName\")\n *   }\n * },\n * {\n *   \"name\": \"widget-b\",\n *   \"properties\": {\n *     \"input.myInput\": Memory.toProperty(\"myGroupName\")\n *   }\n * }\n * ```\n */\nexport class Memory {\n  /**\n   * Generate a serialized communication configuration suitable for use as a Widget Input or Output property value.\n   *\n   * @param group The name of the communication group to which the Input/Output belongs\n   */\n  static toProperty(group: string): string {\n    return serializerDeserializer.toProperty(new CommunicationDefinition(TAG, group));\n  }\n}\n\n/**\n * @deprecated Will be removed in v7.0.0\n * Storage service to retain the values for each communication group that is using the Memory transport\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MemoryStorageService {\n  private readonly storage = new Map<\n    string,\n    Subject<{\n      value: any;\n    }>\n  >();\n  private getSubject(group: string) {\n    if (!this.storage.has(group)) {\n      this.storage.set(group, new ReplaySubject(1));\n    } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.storage.get(group)!;\n  }\n\n  /**\n   * Get an Observable of the values being communicated to the given group\n   *\n   * @param group The name of the communication group\n   */\n  get<T>(group: string): Observable<T> {\n    return this.getSubject(group)\n      .asObservable()\n      .pipe(\n        map(item => {\n          const localValue = item.value;\n          if (typeof item.value === 'object' && item.value['_clearPayload'] === true) {\n            item.value = undefined;\n          }\n          return localValue;\n        }),\n      );\n  }\n\n  /**\n   * Communicate some value to members of the given communication group\n   *\n   * @param group The name of the communication group\n   * @param value The value to communicate\n   */\n  set<T>(group: string, value: T): void {\n    this.getSubject(group).next({ value });\n  }\n}\n\nexport const createMemory = <T>(\n  itemNavigation: ӨItemNavigationService,\n  rootModel: ӨRootContainerService,\n  storage: MemoryStorageService,\n): MemoryStore<T> => {\n  return {\n    source: <U extends T>(group: string) => (): Observable<U | undefined> => storage.get(group),\n    sink: <U extends T>(group: string) => (stdin: Observable<U>) => {\n      const commonAncestorItem = getItemFormCommunicationGroup(group, rootModel);\n      return stdin\n        .pipe(concatMap(data => commonAncestorItem.pipe(map(item => [data, item.name] as const))))\n        .subscribe(([data, name]) => {\n          asyncScheduler.schedule(() => {\n            storage.set(group, data);\n          });\n          itemNavigation.navigateToItem(name, {});\n        });\n    },\n  };\n};\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const memoryProcessorConfig: PipelineProcessorConfig = createPipelineProcessorConfig(TAG, {\n  provide: new InjectionToken('Memory pipeline handler'),\n  useFactory: createMemory,\n  deps: [ӨItemNavigationService, ӨRootContainerService, MemoryStorageService],\n});\n\nfunction getItemFormCommunicationGroup(group: string, rootModel: ӨRootContainerService) {\n  const communicationDefinition = new CommunicationDefinition(TAG, group);\n  const commonAncestorItem = rootModel.commonAncestor(communicationDefinition).pipe(\n    first(),\n    filter((item): item is ItemModel => {\n      if (item === undefined) {\n        console.warn(`No Inputs configured to receive in memory value for communication group \"${group}\"`);\n        return false;\n      }\n      return true;\n    }),\n  );\n  return commonAncestorItem;\n}\n","import { CommonModule } from '@angular/common';\nimport { ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\n// assets (todo: make an assets module)\nimport { AssetsService, CONFIG_ASSETS } from './assets/assets.service';\n\n// bootstrap (todo: make a bootstrap module)\nimport { BackbaseConnector } from './bootstrap/backbase-connector.service';\n\n// communication (todo: make a communication module)\nimport { ӨItemNavigationService } from './communication/item-navigation.service';\nimport { InputBrokerService, createInputBootstrap } from './communication/item-io/input-broker.service';\nimport { OutputBrokerService, createOutputBootstrap } from './communication/item-io/output-broker.service';\nimport { CONFIG_PIPELINE_PROCESSORS } from './communication/pipes/pipeline-registry';\nimport { debugProcessorConfig } from './communication/pipes/handlers/debug';\nimport { pluckProcessorConfig } from './communication/pipes/handlers/pluck';\nimport { routeParamsProcessorConfig } from './communication/pipes/handlers/route-param';\nimport { routeParamsMultiProcessorConfig } from './communication/pipes/handlers/route-param-multi';\nimport { itemNavigateProcessorConfig } from './communication/pipes/handlers/item-navigate';\nimport { modelProcessorConfig } from './communication/pipes/handlers/model';\nimport { appConfigProcessorConfig } from './communication/pipes/handlers/app-config';\nimport { urlProcessorConfig } from './communication/pipes/handlers/url';\nimport { routerNavigateProcessorConfig } from './communication/pipes/handlers/router-navigate';\n// deprecated communications\nimport { FlowsService, CONFIG_FLOWS } from './communication/deprecated/flows.service';\nimport { ItemTransitionService } from './communication/deprecated/item-transition.service';\nimport { navigationProcessorConfig } from './communication/pipes/handlers/navigation';\n\n// future\nimport { ENABLED_FEATURES_CONFIG } from '@backbase/foundation-ang/future';\nimport { LOG_DEPRECATIONS_CONFIG, DeprecationsService } from '@backbase/foundation-ang/future';\n\n// models (todo: make a models module?)\nimport { RootItemModelService } from './models/root-item-model.service';\n\n// rendering (todo: make a rendering module)\nimport { AreaComponent } from './rendering/area/area.component';\nimport { ChromeComponent } from './rendering/chrome/chrome.component';\nimport { JourneyComponent } from './rendering/chrome/journey.component';\nimport { RootComponent } from './rendering/root/root.component';\nimport { CONFIG_COMPONENT_CLASS_MAP, ItemRegistryService } from './rendering/item-registry.service';\nimport { ItemInjectorService } from './rendering/item-injector.service';\n\n// routing (todo: create a separate routing module)\nimport { RouteComponent } from './routing/components/route.component';\nimport { RouterLinkDirective, RouterLinkWithHrefDirective } from './routing/directives/router-link.directive';\nimport { RouterLinkActiveDirective } from './routing/directives/router-link-active.directive';\nimport { RouterOutletDirective } from './routing/directives/router-outlet.directive';\nimport { OutletCollisionComponent } from './routing/components/outlet-collision.component';\nimport { RouterBootstrapService, createRouteConfigBootstrap } from './routing/config/router-bootstrap.service';\nimport { RouterNavigationService } from './routing/navigation/router-navigation.service';\nimport { RouteGuardsRegistryService, CONFIG_ROUTE_GUARDS } from './routing/guards/route-guards-registry.service';\nimport { RouterService } from './routing/navigation/router.service';\n\n// config\nimport {\n  BackbaseCoreConfiguration,\n  BackbaseRootConfiguration,\n  createLogDeprecatedConfig,\n  DEPRECATED_WITH_CONFIG,\n} from './core-config';\nimport { ItemLoaderService } from './rendering/item-loader.service';\nimport { LAZY_MAP } from './rendering/lazy-config';\nimport { CombinedComponentFactoryResolver } from './rendering/combined-component-factory-resolver';\nimport { memoryProcessorConfig } from './communication/pipes/handlers/memory';\n\nimport { AbstractRouterConfigService } from './routing/config/abstract-router-config.service';\nimport { RouterConfigService } from './routing/config/router-config.service';\n\nconst coreComponents = [\n  RootComponent,\n  AreaComponent,\n  ChromeComponent,\n  RouteComponent,\n  OutletCollisionComponent,\n  JourneyComponent,\n];\n\nconst coreDirectives = [\n  RouterLinkDirective,\n  RouterLinkWithHrefDirective,\n  RouterLinkActiveDirective,\n  RouterOutletDirective,\n];\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [...coreComponents, ...coreDirectives],\n  exports: [...coreComponents, ...coreDirectives],\n  entryComponents: coreComponents,\n  providers: [\n    RootItemModelService,\n    ItemRegistryService,\n    BackbaseConnector,\n    ӨItemNavigationService,\n    ItemTransitionService,\n    RouteGuardsRegistryService,\n    RouterNavigationService,\n    RouterService,\n    DeprecationsService,\n    OutputBrokerService,\n    InputBrokerService,\n    RouterBootstrapService,\n    ItemInjectorService,\n    FlowsService,\n    AssetsService,\n    ItemLoaderService,\n    CombinedComponentFactoryResolver,\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: createRouteConfigBootstrap,\n      deps: [RouterBootstrapService],\n      multi: true,\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: createLogDeprecatedConfig,\n      deps: [DeprecationsService, DEPRECATED_WITH_CONFIG],\n      multi: true,\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: createInputBootstrap,\n      deps: [InputBrokerService],\n      multi: true,\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: createOutputBootstrap,\n      deps: [OutputBrokerService],\n      multi: true,\n    },\n    {\n      provide: CONFIG_COMPONENT_CLASS_MAP,\n      useValue: {\n        RootComponent,\n      },\n      multi: true,\n    },\n    {\n      provide: CONFIG_PIPELINE_PROCESSORS,\n      useValue: [\n        debugProcessorConfig,\n        pluckProcessorConfig,\n        routeParamsProcessorConfig,\n        routeParamsMultiProcessorConfig,\n        itemNavigateProcessorConfig,\n        modelProcessorConfig,\n        appConfigProcessorConfig,\n        urlProcessorConfig,\n        navigationProcessorConfig,\n        memoryProcessorConfig,\n        routerNavigateProcessorConfig,\n      ],\n      multi: true,\n    },\n    {\n      provide: AbstractRouterConfigService,\n      useExisting: RouterConfigService,\n    },\n    // Defaults, overrided by forRoot and withConfig\n    {\n      provide: CONFIG_COMPONENT_CLASS_MAP,\n      useValue: {},\n      multi: true,\n    },\n    {\n      provide: CONFIG_FLOWS,\n      multi: true,\n      useValue: [],\n    },\n    {\n      provide: CONFIG_ROUTE_GUARDS,\n      multi: true,\n      useValue: {},\n    },\n    {\n      provide: DEPRECATED_WITH_CONFIG,\n      useValue: {},\n      multi: true,\n    },\n  ],\n})\nexport class BackbaseCoreModule {\n  /**\n   * Creates a module that will populate entryComponents with Components passed as classMap\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * ```\n   * @NgModule({\n   *   imports: [\n   *     BackbaseCoreModule.withConfig({\n   *       classMap: {\n   *         myClassId: MyComponent\n   *       }\n   *     })\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  static withConfig(config: BackbaseCoreConfiguration): ModuleWithProviders<BackbaseCoreModule> {\n    return {\n      ngModule: BackbaseCoreModule,\n      providers: [\n        {\n          provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n          useValue: config.classMap || {},\n          multi: true,\n        },\n        {\n          provide: CONFIG_COMPONENT_CLASS_MAP,\n          useValue: config.classMap || {},\n          multi: true,\n        },\n        {\n          provide: CONFIG_ROUTE_GUARDS,\n          multi: true,\n          useValue: config.guards || {},\n        },\n        {\n          provide: CONFIG_PIPELINE_PROCESSORS,\n          useValue: config.pipelineProcessors || [],\n          multi: true,\n        },\n      ],\n    };\n  }\n\n  /**\n   * Creates a configured BackbaseCoreModule.\n   *\n   * This should be called only once per app.\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * ```\n   * @NgModule({\n   *   imports: [\n   *     BackbaseCoreModule.forRoot({\n   *       classMap: {\n   *         myClassId: MyComponent,\n   *         logDeprecations: true,\n   *       }\n   *     })\n   *   ]\n   * })\n   * class AppModule {}\n   * ```\n   */\n  static forRoot(config: BackbaseRootConfiguration): ModuleWithProviders<BackbaseCoreModule> {\n    return {\n      ngModule: BackbaseCoreModule,\n      providers: [\n        {\n          provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n          useValue: config.classMap || {},\n          multi: true,\n        },\n        {\n          provide: CONFIG_COMPONENT_CLASS_MAP,\n          useValue: config.classMap || {},\n          multi: true,\n        },\n        {\n          provide: CONFIG_FLOWS,\n          multi: true,\n          useValue: config.flows || [],\n        },\n        {\n          provide: CONFIG_ROUTE_GUARDS,\n          multi: true,\n          useValue: config.guards || {},\n        },\n        {\n          provide: CONFIG_ASSETS,\n          multi: false,\n          useValue: config.assets || {\n            assetsStaticItemName: '',\n          },\n        },\n        {\n          provide: LOG_DEPRECATIONS_CONFIG,\n          multi: false,\n          useValue: !!config.logDeprecations,\n        },\n        {\n          provide: ENABLED_FEATURES_CONFIG,\n          multi: false,\n          useValue: config.features || {},\n        },\n        {\n          provide: CONFIG_PIPELINE_PROCESSORS,\n          useValue: config.pipelineProcessors || [],\n          multi: true,\n        },\n        {\n          provide: LAZY_MAP,\n          useValue: config.lazyModules || undefined,\n          multi: false,\n        },\n      ],\n    };\n  }\n}\n","import {\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  Directive,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\nimport { TemplateRegistry } from './template-registry';\n\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface CustomTemplateContext<Host, ExtraContext> {\n  readonly $implicit: Host;\n  context: ExtraContext | undefined;\n}\n\nexport type CustomTemplateRef<HostRef, Context> = TemplateRef<CustomTemplateContext<HostRef, Context>>;\n\n/**\n *\n * @deprecated Will be removed in v7.0.0\n *\n * @description\n * Every custom template directive should extend this class.\n * See 'How to make widget customizable'\n *\n * @usageNotes\n *\n * ### Example\n * ```\n * import { Component, Directive } from '@angular/core';\n * import { BbTemplate, ItemModel } from '@backbase/foundation-ang/core';\n *\n * @Component({\n *   selector: 'my-widget',\n *   template: `\n *   <li *ngFor=\"let item of pallete\">\n *     My colors:\n *     <ng-container\n *       customItemTemplate\n *       [bbHostRef]=\"hostRef\"\n *       [bbTemplateContext]=\"item\"\n *     ></ng-container>\n *   </li>\n *\n *   <ng-template customItemTemplate let-hostRef let-item=\"context\">\n *     Current name: {{ item.color }}\n *     Hex value: {{ hostRef.getHexColor(item.color) }}\n *   </ng-template>\n *   `,\n * })\n * export class MyWidgetComponent {\n *   readonly hostRef = this;\n *   readonly palette: Array<PaletteItem> = [{\n *     color: 'blue',\n *   }];\n *   readonly hexValues = {\n *     blue: '0000ff',\n *   };\n *\n *   constructor(private itemModel: ItemModel) {}\n *\n *   getHexColor(color: string): string | undefined {\n *     return this.hexValues[color];\n *   }\n * }\n *\n * type PaletteItem {\n *   color: string;\n * };\n *\n * @Directive({\n *   selector: '[customItemTemplate]',\n * })\n * export class customItemTemplate extends BbTemplate<MyWidgetComponent, PaletteItem> {}\n * ```\n */\n/* eslint-disable @angular-eslint/directive-class-suffix */\n@Directive({})\nexport abstract class BbTemplate<HostRef, Context> implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Custom context\n   */\n  @Input() bbTemplateContext: Context | undefined;\n\n  /**\n   * Context of the host component\n   */\n  @Input() bbHostRef: HostRef | undefined;\n\n  private templateSubscription: Subscription | undefined;\n\n  private customTemplateContext: CustomTemplateContext<HostRef, Context> | undefined;\n\n  constructor(\n    private readonly viewContainerRef: ViewContainerRef,\n    private readonly registry: TemplateRegistry,\n    @Optional() private readonly templateRef: TemplateRef<CustomTemplateContext<HostRef, Context>>,\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnInit() {\n    this.checkContainerHasHostRef();\n    this.checkNgTemplateIsNotUsedtoDefineSlot();\n\n    if (this.isContainer) {\n      this.waitTemplate();\n    } else {\n      this.registry.set<CustomTemplateRef<HostRef, Context>>(this.templateId(), this.templateRef);\n    }\n  }\n\n  private templateId() {\n    return this.constructor;\n  }\n\n  private checkContainerHasHostRef() {\n    if (this.isContainer && this.bbHostRef === undefined) {\n      throw new Error(`${this.constructor.name}: Missing required input [bbHostRef]`);\n    }\n  }\n\n  private checkNgTemplateIsNotUsedtoDefineSlot() {\n    if (!this.isContainer && this.bbHostRef) {\n      throw new Error(\n        `${this.constructor.name}: [bbHostRef] should not be used in conjunction with <ng-template>. Use <ng-container> instead.`,\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.customTemplateContext) {\n      return;\n    }\n\n    if ('bbTemplateContext' in changes) {\n      this.customTemplateContext.context = changes.bbTemplateContext.currentValue;\n    }\n  }\n\n  private waitTemplate() {\n    const templateSubject = this.registry.get<CustomTemplateRef<HostRef, Context>>(this.templateId());\n\n    this.templateSubscription = templateSubject.subscribe(\n      (tempalateRef: TemplateRef<CustomTemplateContext<HostRef, Context>>) => {\n        this.viewContainerRef.clear();\n\n        this.customTemplateContext = this.createContext();\n        const view = tempalateRef.createEmbeddedView(this.customTemplateContext);\n        this.viewContainerRef.insert(view);\n      },\n    );\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    if (this.templateSubscription) {\n      this.templateSubscription.unsubscribe();\n    }\n  }\n\n  private createContext(): CustomTemplateContext<HostRef, Context> {\n    if (this.bbHostRef === undefined) {\n      throw new Error(`${this.constructor.name}: Missing required input [bbHostRef]`);\n    }\n\n    return {\n      $implicit: this.bbHostRef,\n      context: this.bbTemplateContext,\n    };\n  }\n\n  private get isContainer(): boolean {\n    return !this.templateRef;\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  ComponentFactoryResolver,\n  ANALYZE_FOR_ENTRY_COMPONENTS,\n  Injector,\n} from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { StepUpInterceptor, StepUpConfig } from './stepup.interceptor';\nimport { StepUpService, StepUpComponentType, STEPUP_CONFIG } from './stepup.service';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type CustomStepUpConfig = Partial<StepUpConfig> & { mediatorComponentClass: StepUpComponentType };\n/**\n * @deprecated Will be removed in v7.0.0\n */\n@NgModule({})\nexport class StepUpModule {\n  static forRoot(config: CustomStepUpConfig): ModuleWithProviders<StepUpModule> {\n    return {\n      ngModule: StepUpModule,\n      providers: [\n        {\n          provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n          useValue: [config.mediatorComponentClass],\n          multi: true,\n        },\n        {\n          provide: STEPUP_CONFIG,\n          useValue: config,\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: StepUpInterceptor,\n          deps: [StepUpService, STEPUP_CONFIG, Injector],\n          multi: true,\n        },\n        {\n          provide: StepUpService,\n          useClass: StepUpService,\n          deps: [ComponentFactoryResolver, STEPUP_CONFIG],\n        },\n      ],\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, ComponentFactoryResolver } from '@angular/core';\nimport { SessionTimeoutService, SESSION_TIMEOUT_CONFIG, SessionTimeoutConfig } from './session-timeout.service';\n\n@NgModule({})\nexport class SessionTimeoutModule {\n  /**\n   * Creates a configured SessionTimeoutModule.\n   *\n   * This should be called only once per app.\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * ```\n   * @NgModule({\n   *   imports: [\n   *     SessionTimeoutModule.forRoot({\n   *       classMap: {\n   *         sessionTimeoutComponentClass: MyCustomSessionTimeoutComponent,\n   *         inactivityModalTime: 300,\n   *       }\n   *     })\n   *   ]\n   * })\n   * class AppModule {}\n   * ```\n   */\n  static forRoot(config: SessionTimeoutConfig): ModuleWithProviders<SessionTimeoutModule> {\n    return {\n      ngModule: SessionTimeoutModule,\n      providers: [\n        {\n          provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n          useValue: config.sessionTimeoutComponentClass,\n          multi: true,\n        },\n        {\n          provide: SESSION_TIMEOUT_CONFIG,\n          useValue: config,\n        },\n        {\n          provide: SessionTimeoutService,\n          useClass: SessionTimeoutService,\n          deps: [ComponentFactoryResolver, SESSION_TIMEOUT_CONFIG],\n        },\n      ],\n    };\n  }\n}\n","import { NgModuleRef, StaticProvider } from '@angular/core';\nimport { ExternalServices, ɵEXTERNAL_SERVICES as EXTERNAL_SERVICES } from '@backbase/foundation-ang/web-sdk';\nimport { BackbaseConnector } from '../../backbase-core/bootstrap/backbase-connector.service';\n\nexport type CreateNgModule = (extraProviders: Array<StaticProvider>) => Promise<NgModuleRef<any>>;\nexport type StartSingleApp = (externalServices?: ExternalServices) => Promise<BackbaseConnector>;\n\n/**\n * Exposes Angular Single Page Application bootstrap method `window.BB.startSingleApp`\n * @param createNgModule Function that accepts StaticProviders and returns NgModuleRef\n * @usageNotes\n * ### Example\n *\n * ```\n * window.BB.startSingleApp = registerSingleApp(createNgModule);\n *\n * window.BB.startSingleApp(webSdkServices, staticProviders)\n *   .then((bbConnector: BackbaseConnector) => bbConector.bootstrap(item, itemLocation));\n * ```\n */\nexport function registerSingleApp(createNgModule: CreateNgModule): StartSingleApp {\n  const startSingleApp: StartSingleApp = (externalServices: ExternalServices = {}): Promise<BackbaseConnector> => {\n    const providers = [\n      {\n        provide: EXTERNAL_SERVICES,\n        useValue: externalServices,\n      },\n    ];\n    return createNgModule(providers).then(\n      (moduleRef: NgModuleRef<any>): BackbaseConnector => moduleRef.injector.get<BackbaseConnector>(BackbaseConnector),\n    );\n  };\n  window.BB = window.BB || {};\n  Object.assign(window.BB, { startSingleApp });\n  return startSingleApp;\n}\n\ndeclare global {\n  interface Window {\n    BB: { [key: string]: any };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CONFIG_ASSETS as ɵa} from './backbase-core/assets/assets.service';\nexport {CONFIG_FLOWS as ɵv,FlowsService as ɵw} from './backbase-core/communication/deprecated/flows.service';\nexport {ItemTransitionService as ɵbo} from './backbase-core/communication/deprecated/item-transition.service';\nexport {InputBrokerService as ɵbh,createInputBootstrap as ɵbi} from './backbase-core/communication/item-io/input-broker.service';\nexport {OutputBrokerService as ɵbj,createOutputBootstrap as ɵbk} from './backbase-core/communication/item-io/output-broker.service';\nexport {appConfigProcessorConfig as ɵi,createAppConfigSource as ɵh} from './backbase-core/communication/pipes/handlers/app-config';\nexport {debugProcessorConfig as ɵbs,makeDebugPipe as ɵbr} from './backbase-core/communication/pipes/handlers/debug';\nexport {createItemNavigate as ɵbw,itemNavigateProcessorConfig as ɵbx} from './backbase-core/communication/pipes/handlers/item-navigate';\nexport {MemoryStorageService as ɵl,createMemory as ɵm,memoryProcessorConfig as ɵn} from './backbase-core/communication/pipes/handlers/memory';\nexport {createModelSource as ɵby,modelProcessorConfig as ɵbz} from './backbase-core/communication/pipes/handlers/model';\nexport {createNavigationSink as ɵce,navigationHandlerToken as ɵcd,navigationProcessorConfig as ɵcf,pipeName as ɵcc} from './backbase-core/communication/pipes/handlers/navigation';\nexport {pluckProcessorConfig as ɵbt} from './backbase-core/communication/pipes/handlers/pluck';\nexport {createRouteParams as ɵj,routeParamsProcessorConfig as ɵk} from './backbase-core/communication/pipes/handlers/route-param';\nexport {createRouteParamsMulti as ɵbu,routeParamsMultiProcessorConfig as ɵbv} from './backbase-core/communication/pipes/handlers/route-param-multi';\nexport {createRouterNavigateStore as ɵp,routerNavigateProcessorConfig as ɵq,serializeCommands as ɵo} from './backbase-core/communication/pipes/handlers/router-navigate';\nexport {createUrlSink as ɵca,urlProcessorConfig as ɵcb} from './backbase-core/communication/pipes/handlers/url';\nexport {CONFIG_PIPELINE_PROCESSORS as ɵf,PipelineRegistry as ɵg} from './backbase-core/communication/pipes/pipeline-registry';\nexport {DEPRECATED_WITH_CONFIG as ɵr,createLogDeprecatedConfig as ɵs} from './backbase-core/core-config';\nexport {AppConfigService as ɵbn} from './backbase-core/models/app-config.service';\nexport {ObservableTree as ɵc} from './backbase-core/models/tree';\nexport {journeyItemModelFactory as ɵbc,storeNameFactory as ɵbd} from './backbase-core/rendering/chrome/journey.component';\nexport {CombinedComponentFactoryResolver as ɵbm} from './backbase-core/rendering/combined-component-factory-resolver';\nexport {ItemInjectorService as ɵbg} from './backbase-core/rendering/item-injector.service';\nexport {ItemLifecycleService as ɵb} from './backbase-core/rendering/item-lifecycle.service';\nexport {ItemLoaderService as ɵbl} from './backbase-core/rendering/item-loader.service';\nexport {CONFIG_COMPONENT_CLASS_MAP as ɵt,ItemRegistryService as ɵu} from './backbase-core/rendering/item-registry.service';\nexport {LAZY_MAP as ɵbb} from './backbase-core/rendering/lazy-config';\nexport {AbstractRouterConfigService as ɵbe} from './backbase-core/routing/config/abstract-router-config.service';\nexport {RouterBootstrapService as ɵbq,createRouteConfigBootstrap as ɵbp} from './backbase-core/routing/config/router-bootstrap.service';\nexport {CONFIG_ROUTE_GUARDS as ɵd,RouteGuardsRegistryService as ɵe} from './backbase-core/routing/guards/route-guards-registry.service';\nexport {RouterNavigationService as ɵbf} from './backbase-core/routing/navigation/router-navigation.service';\nexport {SESSION_TIMEOUT_CONFIG as ɵz,SessionTimeoutService as ɵba} from './backbase-core/session-timeout/session-timeout.service';\nexport {STEPUP_CONFIG as ɵx,StepUpService as ɵy} from './backbase-core/stepup/stepup.service';"],"names":["map","observableOf","noop","ɵ0","TAG","flatMap","EXTERNAL_SERVICES"],"mappings":"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"}