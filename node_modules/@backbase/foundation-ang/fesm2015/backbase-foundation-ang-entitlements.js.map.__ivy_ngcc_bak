{"version":3,"file":"backbase-foundation-ang-entitlements.js","sources":["../../../../projects/backbase/foundation-ang/entitlements/src/services/providers.ts","../../../../projects/backbase/foundation-ang/entitlements/src/services/conditions.service.ts","../../../../projects/backbase/foundation-ang/entitlements/src/directives/if-entitlements.directive.ts","../../../../projects/backbase/foundation-ang/entitlements/src/entitlements.module.ts","../../../../projects/backbase/foundation-ang/entitlements/src/guards/entitlements.guard.ts","../../../../projects/backbase/foundation-ang/entitlements/src/backbase-foundation-ang-entitlements.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { EntitlementsConfig } from './conditions.service';\nimport { PropertyResolver as LeanPropertyResolver } from '@backbase/lib-bb-page-bootstrap-cdn';\n\nexport const ENTITLEMENTS_CONFIG = new InjectionToken<EntitlementsConfig>('web-sdk-entitlements-config');\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport type PropertyResolver = Pick<LeanPropertyResolver, 'resolveEntitlements'>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport const CONDITIONS = new InjectionToken<PropertyResolver>('web-sdk-conditions');\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { ENTITLEMENTS_CONFIG } from './providers';\n\ntype DataItemEntitlementResponse = Array<{\n  dataItem: {\n    id: string;\n    datatype: string;\n  };\n  permissions: {\n    businessFunction: string;\n    privileges: string[];\n    resource: string;\n  }[];\n}>;\n\ntype EntitlementSummaryResponse = Array<{\n  resource: string;\n  function: string;\n  permissions: { [key: string]: boolean };\n}>;\n\ninterface Entitlement {\n  dataItem?: string;\n  resource: string;\n  function: string;\n  privilege: string;\n}\n\nenum LogicalOperator {\n  AND = 'AND',\n  OR = 'OR',\n  NOT = 'NOT',\n}\n\ninterface Condition extends Entitlement {\n  logic: LogicalOperator;\n}\n\ninterface Resolution {\n  value: boolean;\n  logic: LogicalOperator;\n}\n\nexport interface EntitlementsConfig {\n  forceResolved?: boolean;\n  accessControlBasePath?: string;\n  accessControlPath?: string;\n}\n\nexport const SUMMARY_PERMISSIONS_PATH = '/accessgroups/users/permissions/summary';\nexport const DATA_ITEMS_PERMISSIONS_PATH = '/accessgroups/users/data-item-permissions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConditionsService {\n  private forceResolved: boolean;\n  private entitlements$: Observable<Entitlement[]>;\n\n  constructor(\n    private readonly http: HttpClient,\n    @Optional() @Inject(ENTITLEMENTS_CONFIG) private config: EntitlementsConfig | null,\n  ) {\n    const basePath = this.config?.accessControlBasePath || '/access-control';\n    const path = this.config?.accessControlPath || `/client-api/v2${SUMMARY_PERMISSIONS_PATH}`;\n\n    this.entitlements$ = this.http\n      .get<EntitlementSummaryResponse | DataItemEntitlementResponse>(`${basePath}${path}`)\n      .pipe(\n        map(EntitlementSummaryResponse => {\n          if (EntitlementSummaryResponse.length && 'dataItem' in EntitlementSummaryResponse[0]) {\n            return this.mapDataItemPermissions(EntitlementSummaryResponse as DataItemEntitlementResponse);\n          } else {\n            return this.mapPermissionsSummary(EntitlementSummaryResponse as EntitlementSummaryResponse);\n          }\n        }),\n        shareReplay(1),\n      );\n\n    this.forceResolved = this.config?.forceResolved || false;\n  }\n\n  // map response of getUserPermissionsSummary to flat array of available entitlements\n  private mapPermissionsSummary(entitlementsData: EntitlementSummaryResponse): Entitlement[] {\n    const entitlements: Entitlement[] = [];\n\n    entitlementsData.forEach(entitlementData => {\n      const availablePermissions = Object.entries(entitlementData.permissions).filter(([, value]) => value === true);\n\n      availablePermissions.forEach(([privilege]) => {\n        const entitlement = this.removeWhiteSpace({\n          resource: entitlementData.resource,\n          function: entitlementData.function,\n          privilege,\n        });\n\n        entitlements.push(entitlement);\n      });\n    });\n\n    return entitlements;\n  }\n\n  // map response of getDataItemPermissionsContext to flat array of available entitlements\n  // this endpoint can optionally be configured when needing data-item specific entitlements\n  private mapDataItemPermissions(entitlementsData: DataItemEntitlementResponse): Entitlement[] {\n    const entitlements: Entitlement[] = [];\n\n    entitlementsData.forEach(entitlementData => {\n      entitlementData.permissions.forEach(permission => {\n        permission.privileges.forEach(privilege => {\n          const entitlement = this.removeWhiteSpace({\n            dataItem: entitlementData.dataItem.id,\n            resource: permission.resource,\n            function: permission.businessFunction,\n            privilege,\n          });\n\n          entitlements.push(entitlement);\n        });\n      });\n    });\n\n    return entitlements;\n  }\n\n  resolveEntitlements(identifier: string): Promise<boolean> {\n    if (this.forceResolved) {\n      return Promise.resolve(true);\n    }\n\n    const conditions = this.createConditions(identifier);\n\n    return this.resolveConditions(conditions).toPromise();\n  }\n\n  private parseIdentifier(identifier: string): Entitlement {\n    const identifierArray = identifier.split('.').map((str: string) => str.trim());\n\n    if (identifierArray.length < 3 || identifierArray.length > 4) {\n      throw Error(`'${identifier}' is not valid entitlement identifier`);\n    }\n\n    if (identifierArray.length === 3) {\n      return this.removeWhiteSpace({\n        dataItem: undefined,\n        resource: identifierArray[0],\n        function: identifierArray[1],\n        privilege: identifierArray[2],\n      });\n    }\n\n    return this.removeWhiteSpace({\n      dataItem: identifierArray[0],\n      resource: identifierArray[1],\n      function: identifierArray[2],\n      privilege: identifierArray[3],\n    });\n  }\n\n  private resolveConditions(conditions: Array<Condition>): Observable<boolean> {\n    if (conditions.length === 0) {\n      return of(true);\n    }\n\n    const resolutions = conditions.map((condition: Condition) =>\n      this.resolveEntitlement(condition).pipe(map((value: boolean) => ({ value, logic: condition.logic }))),\n    );\n\n    return forkJoin(resolutions).pipe(map(this.resolveResolutions));\n  }\n\n  private resolveResolutions(resolutions: Resolution[]) {\n    return resolutions.reduce((final: boolean, resolution: Resolution) => {\n      if (resolution.logic === LogicalOperator.AND) {\n        return final && resolution.value;\n      } else if (resolution.logic === LogicalOperator.NOT) {\n        return final && !resolution.value;\n      }\n\n      return final || resolution.value;\n    }, true);\n  }\n\n  private separateLogicalOperators(splitBySpaces: string[]): Array<Condition> {\n    const conditions: Array<Condition> = [];\n\n    for (let i = 0; i < splitBySpaces.length; i += 2) {\n      const logic = splitBySpaces[i];\n      if (logic !== LogicalOperator.AND && logic !== LogicalOperator.OR) {\n        throw Error(`'${logic}' is not valid logical operator`);\n      }\n\n      const identifier = splitBySpaces[i + 1];\n      if (identifier.charAt(0) === '!') {\n        conditions.push({\n          ...this.parseIdentifier(identifier.substr(1)),\n          logic: LogicalOperator.NOT,\n        });\n      } else {\n        conditions.push({\n          ...this.parseIdentifier(identifier),\n          logic,\n        });\n      }\n    }\n\n    return conditions;\n  }\n\n  private removeWhiteSpace<T extends { dataItem?: string; resource: string; function: string }>(item: T): T {\n    return {\n      ...item,\n      dataItem: item.dataItem ? item.dataItem.replace(/ /g, '') : undefined,\n      resource: item.resource.replace(/ /g, ''),\n      function: item.function.replace(/ /g, ''),\n    };\n  }\n\n  private createConditions = (stringDef: string): Array<Condition> => {\n    const splitBySpaces = stringDef\n      .trim()\n      .split(' ')\n      .filter((spaced: string) => spaced !== '');\n\n    return this.separateLogicalOperators(['AND'].concat(splitBySpaces));\n  };\n\n  private resolveEntitlement(entitlement: Entitlement): Observable<boolean> {\n    return this.entitlements$.pipe(\n      map(entitlements =>\n        entitlements.some(\n          availableEntitlement =>\n            (entitlement.dataItem === undefined || availableEntitlement.dataItem === entitlement.dataItem) &&\n            availableEntitlement.resource === entitlement.resource &&\n            availableEntitlement.function === entitlement.function &&\n            availableEntitlement.privilege === entitlement.privilege,\n        ),\n      ),\n    );\n  }\n}\n","import { ChangeDetectorRef, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { ConditionsService } from '../services/conditions.service';\n\n/**\n * @description\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean based on a entitlements triplets validation.\n * When the expression evaluates to true, Angular renders the template\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * @usageNotes\n *\n * ### Example\n * ```\n * <div *bbIfEntitlements=\"'ProductSummary.ProductSummary.edit'\">Content to render when condition is true.</div>\n *\n * <div *bbIfEntitlements=\"'ProductSummary.ProductSummary.edit'; else alternative\">Content to render when condition is true.</div>\n * <ng-template #alternative>\n *   <div>alternative content</div>\n * </ng-template>\n * ```\n */\n@Directive({\n  selector: '[bbIfEntitlements]',\n})\nexport class IfEntitlementsDirective<T = unknown> {\n  private elseTemplateRef: TemplateRef<T> | undefined;\n\n  /**\n   * Entitlement to evaluate\n   */\n  @Input() set bbIfEntitlements(value: string) {\n    const entitlements = value.trim();\n\n    this.conditions.resolveEntitlements(entitlements).then(\n      canAccess => {\n        if (canAccess) {\n          this.renderMainView();\n        } else {\n          this.renderAlternativeView();\n        }\n\n        this.cd.markForCheck();\n      },\n      () => {\n        console.error(`The element cannot be displayed because the identifier is invalid: \"${value}\"`);\n        this.viewContainerRef.clear();\n        this.cd.markForCheck();\n      },\n    );\n  }\n\n  /**\n   * Alternative template to show in the else clause\n   */\n  @Input() set bbIfEntitlementsElse(value: TemplateRef<T>) {\n    this.elseTemplateRef = value;\n  }\n\n  private renderMainView() {\n    this.viewContainerRef.createEmbeddedView(this.templateRef);\n  }\n\n  private renderAlternativeView() {\n    this.viewContainerRef.clear();\n\n    if (this.elseTemplateRef) {\n      this.viewContainerRef.createEmbeddedView(this.elseTemplateRef);\n    }\n  }\n\n  constructor(\n    private conditions: ConditionsService,\n    private templateRef: TemplateRef<T>,\n    private viewContainerRef: ViewContainerRef,\n    private cd: ChangeDetectorRef,\n  ) {}\n}\n","import { NgModule } from '@angular/core';\nimport { IfEntitlementsDirective } from './directives/if-entitlements.directive';\nimport { ConditionsService } from './services/conditions.service';\nimport { CONDITIONS } from './services/providers';\n\n@NgModule({\n  declarations: [IfEntitlementsDirective],\n  providers: [{ provide: CONDITIONS, useExisting: ConditionsService }],\n  exports: [IfEntitlementsDirective],\n})\nexport class EntitlementsModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  CanActivateChild,\n  CanLoad,\n  Route,\n  Router,\n  RouterStateSnapshot,\n  UrlSegment,\n  UrlTree,\n} from '@angular/router';\nimport { ConditionsService } from '../services/conditions.service';\nimport { Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nexport type ResolveEntitlements = (entitlementDefinition: string) => Promise<boolean>;\nexport type RedirectionFactory = (\n  resolveEntitlements: ResolveEntitlements,\n  route: ActivatedRouteSnapshot | Route,\n  state: RouterStateSnapshot | UrlSegment[],\n) => string | undefined | Promise<string | undefined> | Observable<string | undefined>;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EntitlementsGuard implements CanActivate, CanActivateChild, CanLoad {\n  constructor(protected readonly conditions: ConditionsService, protected readonly router: Router) {}\n\n  protected readonly userHasEntitlements = async (entitlements: string): Promise<boolean> => {\n    try {\n      if (!entitlements || (await this.conditions.resolveEntitlements(entitlements))) {\n        return true;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return false;\n  };\n\n  protected async resolveEntitlements(\n    entitlements: string,\n    redirectTo?: string | RedirectionFactory,\n    route?: ActivatedRouteSnapshot | Route,\n    state?: RouterStateSnapshot | UrlSegment[],\n  ): Promise<boolean | UrlTree> {\n    if (await this.userHasEntitlements(entitlements)) {\n      return true;\n    }\n\n    if (typeof redirectTo === 'function') {\n      redirectTo = await this.getRedirection(redirectTo, route, state);\n    }\n\n    if (redirectTo) {\n      return this.router.parseUrl(redirectTo);\n    }\n\n    return false;\n  }\n\n  private getRedirection(\n    getRedirectTo: RedirectionFactory,\n    route?: ActivatedRouteSnapshot | Route,\n    state?: RouterStateSnapshot | UrlSegment[],\n  ): string | undefined | Promise<string | undefined> {\n    if (!route || !state) {\n      return undefined;\n    }\n    const redirectTo = getRedirectTo(this.userHasEntitlements, route, state);\n    if (redirectTo instanceof Observable) {\n      return redirectTo.pipe(first()).toPromise();\n    }\n    return redirectTo;\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\n    const { entitlements, redirectTo } = childRoute.data;\n    return this.resolveEntitlements(entitlements, redirectTo, childRoute, state);\n  }\n\n  canLoad(route: Route, segments: UrlSegment[]): Promise<boolean | UrlTree> {\n    const entitlements = route.data?.entitlements;\n    const redirectTo = route.data?.redirectTo;\n    return this.resolveEntitlements(entitlements, redirectTo, route, segments);\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree> {\n    const { entitlements, redirectTo } = route.data;\n    return this.resolveEntitlements(entitlements, redirectTo, route, state);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}