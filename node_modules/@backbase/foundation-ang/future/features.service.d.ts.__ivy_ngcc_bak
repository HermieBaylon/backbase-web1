import { InjectionToken } from '@angular/core';
import { AvailableFeature, AvailableFeaturesConfig } from './future.module';
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface EnabledFeaturesConfig {
    [feature: string]: boolean;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const ENABLED_FEATURES_CONFIG: InjectionToken<EnabledFeaturesConfig>;
/**
 * @deprecated Will be removed in v7.0.0
 * @usageNotes
 *
 * ### Example
 *
 * Create a Feature Flag in the module that implements/uses it
 *
 * ```
 * export const FEATURE_EXAMPLE: AvailableFeature = {
 *  name: 'EXAMPLE',
 *  description: 'Describe the feature that will be enabled by this flag',
 * };
 * ```
 *
 * Check if the application has opted into the Feature Flag
 *
 * ```
 * if (featuresService.isEnabled(FEATURE_EXAMPLE)) {
 *   // Use new feature
 *   …
 * }
 * ```
 *
 * Make the feature flag available from the module that implements/uses it
 *
 * ```
 * @NgModule({
 *   imports: [
 *     FutureFeaturesModule.allowOptIn([FEATURE_EXAMPLE]),
 *     …
 *   ],
 *   …
 * })
 * export class MyModule {
 *   …
 * }
 * ```
 *
 * In the application, opt in to the new feature (and enable logging of configuration issues)
 *
 * ```
 * @NgModule({
 *   imports: [
 *     BackbaseCoreModule.forRoot({
 *       logDeprecations: true,
 *       features: {
 *          FEATURE_EXAMPLE: true,
 *       },
 *       …
 *     }),
 *     …
 *   ],
 *   …
 * })
 * export class AppModule {
 *   …
 * }
 * ```
 */
export declare class FeaturesService {
    private readonly enabled;
    private readonly logDeprecations;
    constructor(availableConfigs: Array<AvailableFeaturesConfig> | null, enabledConfigOrNull: EnabledFeaturesConfig | null, logDeprecations: boolean | null);
    isEnabled(feature: AvailableFeature): boolean;
    private logConfigurationErrors;
}
