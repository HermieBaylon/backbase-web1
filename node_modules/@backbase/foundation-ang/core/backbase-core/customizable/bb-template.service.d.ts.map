{"version":3,"file":"bb-template.service.d.ts","sources":["bb-template.service.d.ts"],"names":[],"mappingssourcesContent":["import { OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { TemplateRegistry } from './template-registry';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface CustomTemplateContext<Host, ExtraContext> {\n    readonly $implicit: Host;\n    context: ExtraContext | undefined;\n}\nexport declare type CustomTemplateRef<HostRef, Context> = TemplateRef<CustomTemplateContext<HostRef, Context>>;\n/**\n *\n * @deprecated Will be removed in v7.0.0\n *\n * @description\n * Every custom template directive should extend this class.\n * See 'How to make widget customizable'\n *\n * @usageNotes\n *\n * ### Example\n * ```\n * import { Component, Directive } from '@angular/core';\n * import { BbTemplate, ItemModel } from '@backbase/foundation-ang/core';\n *\n * @Component({\n *   selector: 'my-widget',\n *   template: `\n *   <li *ngFor=\"let item of pallete\">\n *     My colors:\n *     <ng-container\n *       customItemTemplate\n *       [bbHostRef]=\"hostRef\"\n *       [bbTemplateContext]=\"item\"\n *     ></ng-container>\n *   </li>\n *\n *   <ng-template customItemTemplate let-hostRef let-item=\"context\">\n *     Current name: {{ item.color }}\n *     Hex value: {{ hostRef.getHexColor(item.color) }}\n *   </ng-template>\n *   `,\n * })\n * export class MyWidgetComponent {\n *   readonly hostRef = this;\n *   readonly palette: Array<PaletteItem> = [{\n *     color: 'blue',\n *   }];\n *   readonly hexValues = {\n *     blue: '0000ff',\n *   };\n *\n *   constructor(private itemModel: ItemModel) {}\n *\n *   getHexColor(color: string): string | undefined {\n *     return this.hexValues[color];\n *   }\n * }\n *\n * type PaletteItem {\n *   color: string;\n * };\n *\n * @Directive({\n *   selector: '[customItemTemplate]',\n * })\n * export class customItemTemplate extends BbTemplate<MyWidgetComponent, PaletteItem> {}\n * ```\n */\nexport declare abstract class BbTemplate<HostRef, Context> implements OnInit, OnDestroy, OnChanges {\n    private readonly viewContainerRef;\n    private readonly registry;\n    private readonly templateRef;\n    /**\n     * Custom context\n     */\n    bbTemplateContext: Context | undefined;\n    /**\n     * Context of the host component\n     */\n    bbHostRef: HostRef | undefined;\n    private templateSubscription;\n    private customTemplateContext;\n    constructor(viewContainerRef: ViewContainerRef, registry: TemplateRegistry, templateRef: TemplateRef<CustomTemplateContext<HostRef, Context>>);\n    /**\n     * @internal\n     */\n    ngOnInit(): void;\n    private templateId;\n    private checkContainerHasHostRef;\n    private checkNgTemplateIsNotUsedtoDefineSlot;\n    /**\n     * @internal\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    private waitTemplate;\n    /**\n     * @internal\n     */\n    ngOnDestroy(): void;\n    private createContext;\n    private get isContainer();\n}\n"]}