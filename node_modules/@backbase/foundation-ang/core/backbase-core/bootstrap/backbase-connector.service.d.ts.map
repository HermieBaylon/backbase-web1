{"version":3,"file":"backbase-connector.service.d.ts","sources":["backbase-connector.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone } from '@angular/core';\nimport { Item, ItemLocation, Properties, RenderingStrategy } from '@backbase/foundation-ang/web-sdk';\nimport { AppConfigService } from '../models/app-config.service';\nimport { ӨRootContainerService } from '../models/root-container.service';\nimport { ItemLifecycleService } from '../rendering/item-lifecycle.service';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare const isRootContainerItem: (item: Item) => boolean;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare class BackbaseConnector implements RenderingStrategy {\n    private readonly zone;\n    private readonly appConfig;\n    private readonly rootContainer;\n    private readonly lifeCycle;\n    /**\n     * BackbaseConnectorService constructor\n     * @param zone NgZone to be used for manipulations with an item\n     * @param componentInjectors Backbase core components injector service to handle the model\n     */\n    constructor(zone: NgZone, appConfig: AppConfigService, rootContainer: ӨRootContainerService, lifeCycle: ItemLifecycleService);\n    private filterItem;\n    /**\n     * Bootstrap function to be called on page model initialization,\n     * and when new item added to the model (dropped on the page).\n     * @param item Item to bootstrap\n     * @param itemLocation Location of the item\n     */\n    bootstrap(item: Item, itemLocation: ItemLocation): Promise<boolean | void>;\n    /**\n     * Update function will be called when properties are changed for\n     * one of the existing items on a page.\n     * @param item Updated item\n     * @param itemLocation Location of the item\n     * @param changes Object which contains only changed properties and their values\n     */\n    update(item: Item, _: ItemLocation, itemProperties: Partial<Properties>): Promise<void>;\n    /**\n     * Remove function will be called when existing item is removed from the page.\n     * @param item Item to remove\n     * @param itemLocation Location of the item\n     */\n    remove(item: Item, itemLocation: ItemLocation): Promise<void>;\n}\n"]}