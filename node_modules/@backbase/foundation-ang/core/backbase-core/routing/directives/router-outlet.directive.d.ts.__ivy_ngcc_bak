import { OnDestroy, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef, OnInit, ComponentRef, EventEmitter } from '@angular/core';
import { ChildrenOutletContexts, Router, Data, ActivatedRoute } from '@angular/router';
import { RouterService } from '../navigation/router.service';
/**
 * Includes the component associated with the current Route
 */
export declare class RouterOutletDirective implements OnInit, OnDestroy {
    private readonly childrenOutletContexts;
    private readonly componentFactoryResolver;
    private readonly vcRef;
    private readonly cdRef;
    private readonly router;
    private readonly bbRouter;
    private outlet;
    private nameValue;
    private readonly destroy$;
    private get name();
    /**
     * A router outlet will emit an activate event any time a new component
     * is being instantiated.
     */
    activateEvents: EventEmitter<any>;
    /**
     * A router outlet will emit a deactivate event when the route component
     * is being destroyed.
     */
    deactivateEvents: EventEmitter<any>;
    get isActivated(): boolean;
    get component(): Object;
    get activatedRoute(): ActivatedRoute;
    get activatedRouteData(): Data;
    constructor(childrenOutletContexts: ChildrenOutletContexts, componentFactoryResolver: ComponentFactoryResolver, vcRef: ViewContainerRef, cdRef: ChangeDetectorRef, router: Router, bbRouter: RouterService);
    private destroy;
    private destroyChild;
    private removeOutletFromUrl;
    ngOnInit(): void;
    ngOnDestroy(): void;
    attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute): void;
    detach(): ComponentRef<any>;
    deactivate(): void;
    activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver | null): void;
}
