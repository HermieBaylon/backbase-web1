import { Router, ActivatedRoute, NavigationExtras, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';
import { ItemModel } from '../../models/item-model';
import { AbstractRouterConfigService } from '../config/abstract-router-config.service';
export declare class RouterService {
    private readonly router;
    private readonly route;
    private readonly itemModel;
    private readonly routerConfig;
    readonly outletName: Observable<string | undefined>;
    /**
     * Backbase Angular Router abstraction.
     * See https://angular.io/api/router/Router
     *
     * The purpose for Backbase abstracting around the default Angular Router is
     * when linking a to a bb-router-outlet. The outlet name for a bb-router-outlet
     * is dynamically generated by a property on the model, so you can use the
     * Backbase Router service to automatically apply the outletName to the navigation
     * commands.
     *
     * @param router Angular Router
     * @param route Angular ActivatedRoute
     * @param itemModel Model of the Backbase Widget or Container
     */
    constructor(router: Router, route: ActivatedRoute, itemModel: ItemModel, routerConfig: AbstractRouterConfigService);
    /**
     * Navigate based on the provided array of commands and a starting point.
     * If no starting route is provided, the navigation is absolute.
     * See Angular Router.navigate
     */
    navigate(commands: Array<any>, extras?: NavigationExtras): Promise<boolean>;
    /**
     * Applies an array of commands to the current url tree and creates a new url tree.
     * See Angular Router.createUrlTree
     */
    createUrlTree(commands: Array<any>, extras?: NavigationExtras): Promise<UrlTree>;
    private outletCommands;
}
