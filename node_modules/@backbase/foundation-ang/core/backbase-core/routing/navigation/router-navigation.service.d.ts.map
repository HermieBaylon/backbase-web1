{"version":3,"file":"router-navigation.service.d.ts","sources":["router-navigation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Router, UrlTree, ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';\nimport { LinkedList } from '../../models/linked-list';\nexport interface RouteSegmentParams {\n    [key: string]: any;\n}\nexport interface RouteSegment {\n    path: string;\n    outlet: string;\n    params?: RouteSegmentParams;\n}\nexport declare type NavigationRoute = LinkedList<RouteSegment>;\nexport declare class RouterNavigationService {\n    private readonly router;\n    constructor(router: Router);\n    /**\n     * Set (merge) the params on a given `ActivatedRoute`, preserving the active children's states.\n     *\n     * This allows updating the params in an arbitrary route in the active route\n     * tree without needing to know the state of every child route.\n     *\n     * @param params The route params that should be set on the given route\n     * @param from The route to set the params on\n     * @returns The new URLTree\n     */\n    setParams(params: RouteSegmentParams, from: ActivatedRoute | ActivatedRouteSnapshot): UrlTree;\n    createUrlTree(routeBranch: NavigationRoute): UrlTree;\n    private urlSegmentGroupForRoute;\n    /**\n     * Merge a new `UrlTree` into the current active `UrlTree`.\n     *\n     * @param newTree\n     */\n    navigate(newTree: UrlTree): Promise<boolean>;\n    /**\n     * Merge new children of a `UrlSegmentGroup` children into the children of the\n     * current active `UrlSegmentGroup`.\n     *\n     * @param activeChildren\n     * @param newChildren\n     */\n    private mergeUrlSegmentGroupChildren;\n    /**\n     * Merge a new `UrlSegmentGroup` into the current active `UrlSegmentGroup`.\n     *\n     * @param activeSegmentGroup\n     * @param newSegmentGroup\n     */\n    private mergeUrlTreeSegmentGroup;\n    /**\n     * Merge an array of new `UrlSegment` into the current active `UrlSegment` array.\n     *\n     * @param activeSegments\n     * @param newSegments\n     */\n    private mergeUrlSegments;\n    /**\n     * Merge a new `UrlSegment` into the current active `UrlSegment`.\n     *\n     * If there is both an active and new segment it is assumed that the path\n     * is the same already.\n     *\n     * @param activeSegment\n     * @param newSegment\n     * @param isSettingParams\n     */\n    private mergeUrlSegment;\n    private mergeUrlSegmentParams;\n}\n"]}