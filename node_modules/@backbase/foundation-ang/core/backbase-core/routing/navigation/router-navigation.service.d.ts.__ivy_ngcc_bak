import { Router, UrlTree, ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';
import { LinkedList } from '../../models/linked-list';
export interface RouteSegmentParams {
    [key: string]: any;
}
export interface RouteSegment {
    path: string;
    outlet: string;
    params?: RouteSegmentParams;
}
export declare type NavigationRoute = LinkedList<RouteSegment>;
export declare class RouterNavigationService {
    private readonly router;
    constructor(router: Router);
    /**
     * Set (merge) the params on a given `ActivatedRoute`, preserving the active children's states.
     *
     * This allows updating the params in an arbitrary route in the active route
     * tree without needing to know the state of every child route.
     *
     * @param params The route params that should be set on the given route
     * @param from The route to set the params on
     * @returns The new URLTree
     */
    setParams(params: RouteSegmentParams, from: ActivatedRoute | ActivatedRouteSnapshot): UrlTree;
    createUrlTree(routeBranch: NavigationRoute): UrlTree;
    private urlSegmentGroupForRoute;
    /**
     * Merge a new `UrlTree` into the current active `UrlTree`.
     *
     * @param newTree
     */
    navigate(newTree: UrlTree): Promise<boolean>;
    /**
     * Merge new children of a `UrlSegmentGroup` children into the children of the
     * current active `UrlSegmentGroup`.
     *
     * @param activeChildren
     * @param newChildren
     */
    private mergeUrlSegmentGroupChildren;
    /**
     * Merge a new `UrlSegmentGroup` into the current active `UrlSegmentGroup`.
     *
     * @param activeSegmentGroup
     * @param newSegmentGroup
     */
    private mergeUrlTreeSegmentGroup;
    /**
     * Merge an array of new `UrlSegment` into the current active `UrlSegment` array.
     *
     * @param activeSegments
     * @param newSegments
     */
    private mergeUrlSegments;
    /**
     * Merge a new `UrlSegment` into the current active `UrlSegment`.
     *
     * If there is both an active and new segment it is assumed that the path
     * is the same already.
     *
     * @param activeSegment
     * @param newSegment
     * @param isSettingParams
     */
    private mergeUrlSegment;
    private mergeUrlSegmentParams;
}
