import { Routes, Route } from '@angular/router';
import { ItemRoutes } from '../config/routing-tree';
import { RoutableItem } from '../config/routable-item-tree';
/**
 * Symbol used to keep internal Backbase routing information
 * in an Angular component class
 */
export declare const routingStrategyField: unique symbol;
/**
 * RoutingStrategyToken enum with routing strategy tokens
 */
export declare enum RoutingStrategyToken {
    STATIC = "StaticRoutesStrategy",
    CONTAINERS = "DefaultContainerStrategy"
}
/**
 * RoutingStrategyDefinition represents a set of avaliable
 * strategies for Backbase routing
 */
export declare type RoutingStrategyDefinition = {
    token: RoutingStrategyToken.CONTAINERS;
} | {
    token: RoutingStrategyToken.STATIC;
    routes: WidgetRoutes;
};
/**
 * RoutableComponentClass interface represents components which are
 * decorated with @RoutableWidget and can be used for @CopyRoute in a
 * wrapper widget (as a part of customisation).
 */
export interface RoutableComponentClass {
    new (...args: Array<any>): {};
    [routingStrategyField]?: RoutingStrategyDefinition;
}
/**
 * RoutableContainer decorator is used to mark an item as
 * routable. It makes the routing config service to use default
 * strategy for containers.
 */
export declare function RoutableContainer(): <T extends new (...args: Array<any>) => {}>(constructor: T) => T;
/**
 * WidgetRoute is a subset of Angular's Route interface but we only support a few select properties.
 *
 * We only support a selection of these properties so we can guarantee they work. If you would like
 * to have support added for additional Route properties, please request it and we will investigate
 * adding support for it.
 */
export interface WidgetRoute extends Pick<Route, 'path' | 'component' | 'redirectTo' | 'pathMatch' | 'outlet' | 'canDeactivate'> {
}
/**
 * Please note that we have deprecated support for Routes. Please stick to using only the supported
 * `WidgetRoute` interface instead.
 */
export declare type WidgetRoutes = Routes | Array<WidgetRoute>;
/**
 * Configuration interface for RoutableWidget decorator
 */
export interface RoutableWidgetConfig {
    /**
     * Angular router configuration
     */
    routes: WidgetRoutes;
}
/**
 * RoutableWidget decorator is used to define widget's internal routes.
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * @Component({
 *   selector: 'bb-todo-widget',
 *   template: `
 *     <bb-router-outlet></bb-router-outlet>
 *   `,
 *   changeDetection: ChangeDetectionStrategy.OnPush,
 *   providers: [RouterService, TodoNavigationService],
 * })
 * @RoutableWidget({
 *   routes: [
 *     { path: '', component: TodoListContainerComponent },
 *     { path: ':id', component: TodoDetailContainerComponent },
 *     { path: 'edit/:id', component: TodoFormContainerComponent },
 *   ],
 * })
 * export class TodoWidgetComponent {}
 * ```
 *
 * @param config Configuration object of the RoutableWidget decorator
 */
export declare function RoutableWidget(config: RoutableWidgetConfig): <T extends new (...args: Array<any>) => {}>(constructor: T) => T;
export interface RoutingStrategy {
    getRoutes(model: RoutableItem, children: Array<RoutableItem>, childRoutes: Array<ItemRoutes>): Routes;
}
export interface RouteComponentStrategy {
    isItemInRoute(itemName: string, route: Route): boolean;
}
export declare const createRouteComponentStrategy: (component: any) => RouteComponentStrategy;
export declare const createRoutingStrategy: (componentClass: RoutableComponentClass) => RoutingStrategy | undefined;
export declare const isRoutableItem: (componentClass: RoutableComponentClass) => boolean;
/**
 * CopyRoutes decorator is used to re-use the internal routing configuration from an existing widget.
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * @Component({
 *   selector: 'my-todo-widget',
 *   template: `
 *     <h1>My Custom Todo Widget</h1>
 *     <bb-router-outlet></bb-router-outlet>
 *   `,
 * })
 * @CopyRoutes(TodoWidgetComponent)
 * export class MyTodoWidgetComponent {}
 * ```
 *
 * @param from The Widget Component class from which to copy the routing configuration
 */
export declare function CopyRoutes(componentClass: RoutableComponentClass, customize?: (routes: WidgetRoutes) => WidgetRoutes): <T extends RoutableComponentClass>(constructor: T) => T;
