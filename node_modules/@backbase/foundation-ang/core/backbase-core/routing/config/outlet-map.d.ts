import { Tree } from '../../models/tree';
import { ItemName } from '../../models/item-model';
import { RoutableItem } from './routable-item-tree';
/**
 * Special type to flag an outlet as having a collision. This
 * enables us to create the outlet tree, and name the outlet, but
 * also flag the item as having a collision with another item.
 */
export declare class OutletCollision {
    outletName: string;
    itemName: ItemName;
    collisionWith: ItemName;
    constructor(outletName: string, itemName: ItemName, collisionWith: ItemName);
}
export declare type OutletName = string | OutletCollision;
export interface ItemOutlet {
    name: ItemName;
    outlet?: OutletName;
}
/**
 * A mapping of the component tree, and their outlet configuration.
 * Because this tree isn't flattened, it hasn't had outlet collisions
 * resolved yet.
 */
export declare type OutletTree = Tree<ItemOutlet>;
/**
 * A flattened tree of only routable items, and their outlets.
 *
 * This is a tree with outlet collisions resolved.
 *
 * Because flattening the tree can make multiple trees, this
 * interface is used to aggregate all the flattened (root) trees.
 */
export interface RoutableOutletTree {
    rootItem: ItemName;
    children: Array<Tree<RoutableItemOutlet>>;
}
export interface RoutableItemOutlet {
    item: ItemName;
    outlet: OutletName;
}
export declare type OutletMap = Map<ItemName, OutletName>;
export declare const outletMap: (itemTree: Tree<RoutableItem>) => OutletMap;
