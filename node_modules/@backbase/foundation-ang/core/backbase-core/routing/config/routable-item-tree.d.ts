import { Tree } from '../../models/tree';
import { ItemModel } from '../../models/item-model';
import { RoutingStrategy } from '../strategies/routing-decorators';
import { RouteGuardsRegistryService } from '../guards/route-guards-registry.service';
import { Observable } from 'rxjs';
import { ItemRegistryService } from '../../rendering/item-registry.service';
import { Type } from '@angular/core';
import { CanActivate, CanActivateChild } from '@angular/router';
import { Properties } from '@backbase/foundation-ang/web-sdk';
export declare enum RouteModelProperty {
    /**
     * Each child of a RoutableContainer may have a property for "route",
     * else the route will be the index of the child plus 1.
     */
    ROUTE = "route",
    /**
     * RoutableContainers and RoutableWidget can have an optional "outletName"
     * property to dynamically set the outlet name for the bb-router-outlet.
     */
    OUTLET = "outletName",
    /**
     * `CanActivate` route guards can be added to generated child routes by including a
     * `route.canActivate` property in the child's model. These guards must be registered with the
     * `RouteGuardsRegistryService` via the `guards` option passed to `BackbaseCore.withConfig`.
     */
    CAN_ACTIVATE = "route.canActivate",
    /**
     * `CanActivateChild` route guards can be added to generated routes by including a
     * `route.canActivateChild` property in the item's model. These guards must be registered with the
     * `RouteGuardsRegistryService` via the `guards` option passed to `BackbaseCore.withConfig`.
     */
    CAN_ACTIVATE_CHILD = "route.canActivateChild",
    /**
     * RoutableContainer's can have a "disableDefault" property which will disable the
     * default behaviour of containers where an empty path route will be created to
     * redirect to the first child's route.
     */
    DISABLE_DEFAULT = "disableDefault"
}
/**
 * @fixme: This is a union of some different types.
 *
 * interface NonRoutable {
 *   name: string;
 *   routingStrategy: undefined;
 * }
 * interface RoutableWidget {
 *   name: string;
 *   routingStrategy: RoutingStrategy;
 *   outletName?: string;
 * }
 * interface RoutableContainer {
 *   name: string;
 *   routingStrategy: RoutingStrategy;
 *   outletName?: string;
 *   hasDefault: boolean;
 * }
 * interface RoutableContainerChild extends NonRoutable | RoutableWidget | RoutableContainer {
 *   route?: string;
 *   routeData: Properties;
 *   canActivate: Array<CanActivate>;
 *   canActivateChild: Array<CanActivateChild>;
 * }
 * type RoutableItem = NonRoutable | RoutableWidget | RoutableContainer | RoutableContainerChild
 */
export interface RoutableItem {
    name: string;
    routingStrategy?: RoutingStrategy;
    hasDefault?: boolean;
    route?: string;
    outlet?: string;
    canActivate: Array<Type<CanActivate>>;
    canActivateChild: Array<Type<CanActivateChild>>;
    routeData: Properties;
}
export declare const routableItemTree: (itemRegistry: ItemRegistryService, routeGuards: RouteGuardsRegistryService, modelTree: Tree<ItemModel>) => Observable<Tree<RoutableItem>>;
