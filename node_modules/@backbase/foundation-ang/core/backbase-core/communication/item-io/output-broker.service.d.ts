import { StaticProvider } from '@angular/core';
import { ItemModel } from '../../models/item-model';
import { ItemLifecycleService } from '../../rendering/item-lifecycle.service';
import { PipelineRegistry } from '../pipes/pipeline-registry';
/**
 * The output broker service creates a communication pipeline
 * using the component output as a source. The sink of the pipeline
 * is determined by the item model.
 */
import * as ɵngcc0 from '@angular/core';
export declare class OutputBrokerService {
    private readonly itemLifecycle;
    private readonly pipelineRegistry;
    constructor(itemLifecycle: ItemLifecycleService, pipelineRegistry: PipelineRegistry);
    bootstrap(): void;
    private runOutputPipelines;
    private outputSource;
    getItemProviders(item: ItemModel): Array<StaticProvider>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<OutputBrokerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<OutputBrokerService>;
}
export declare function createOutputBootstrap(outputBroker: OutputBrokerService): () => void;

//# sourceMappingURL=output-broker.service.d.ts.map