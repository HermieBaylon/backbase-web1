import { ComponentFactoryResolver, StaticProvider } from '@angular/core';
import { ItemModel } from '../../models/item-model';
import { ItemLifecycleService } from '../../rendering/item-lifecycle.service';
import { LazyConfig } from '../../rendering/lazy-config';
import { PipelineRegistry } from '../pipes/pipeline-registry';
/**
 * The input broker service creates a communication pipeline
 * using the component input as a sink. The source of the pipeline
 * is determined by the item model.
 */
import * as ɵngcc0 from '@angular/core';
export declare class InputBrokerService {
    private readonly itemLifecycle;
    private readonly pipelineRegistry;
    private readonly componentFactoryResolver;
    private readonly lazyConfig;
    constructor(itemLifecycle: ItemLifecycleService, pipelineRegistry: PipelineRegistry, componentFactoryResolver: ComponentFactoryResolver, lazyConfig: LazyConfig | null);
    bootstrap(): void;
    private runModelInputs;
    private runInputPipelines;
    private inputSink;
    getItemProviders(item: ItemModel): Array<StaticProvider>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<InputBrokerService, [null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<InputBrokerService>;
}
export declare function createInputBootstrap(Broker: InputBrokerService): () => void;

//# sourceMappingURL=input-broker.service.d.ts.map