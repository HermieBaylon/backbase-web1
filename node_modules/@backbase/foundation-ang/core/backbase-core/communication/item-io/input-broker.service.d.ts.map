{"version":3,"file":"input-broker.service.d.ts","sources":["input-broker.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ComponentFactoryResolver, StaticProvider } from '@angular/core';\nimport { ItemModel } from '../../models/item-model';\nimport { ItemLifecycleService } from '../../rendering/item-lifecycle.service';\nimport { LazyConfig } from '../../rendering/lazy-config';\nimport { PipelineRegistry } from '../pipes/pipeline-registry';\n/**\n * The input broker service creates a communication pipeline\n * using the component input as a sink. The source of the pipeline\n * is determined by the item model.\n */\nexport declare class InputBrokerService {\n    private readonly itemLifecycle;\n    private readonly pipelineRegistry;\n    private readonly componentFactoryResolver;\n    private readonly lazyConfig;\n    constructor(itemLifecycle: ItemLifecycleService, pipelineRegistry: PipelineRegistry, componentFactoryResolver: ComponentFactoryResolver, lazyConfig: LazyConfig | null);\n    bootstrap(): void;\n    private runModelInputs;\n    private runInputPipelines;\n    private inputSink;\n    getItemProviders(item: ItemModel): Array<StaticProvider>;\n}\nexport declare function createInputBootstrap(Broker: InputBrokerService): () => void;\n"]}