import { Observable } from 'rxjs';
import { ӨRootContainerService } from '../../../models/root-container.service';
import { ӨItemNavigationService } from '../../item-navigation.service';
import { PipelineSink, PipelineSource, Sink, Source } from '../pipeline-interface';
import { PipelineProcessorConfig } from '../pipeline-registry';
/**
 * @deprecated Will be removed in v7.0.0
 * Use a service to store data and pass it between widgets.
 *
 * ```
 * [ Component Output ] -> [ Memory Store ]
 * [ Memory Store ] -> [ Component Input ]
 * ```
 *
 * See `Memory` for configuration.
 */
export interface MemoryStore<T> extends PipelineSource<T | undefined>, PipelineSink<T> {
    /**
     * @param group The name communication group to connect via the store
     */
    source: (group: string) => Source<T | undefined>;
    /**
     * @param group The name communication group to connect via the store
     */
    sink: (group: string) => Sink<T>;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Memory Communication Transport
 *
 * Can be used to configure communication using Memory.
 *
 * @usageNotes
 *
 * Pass some data to widget-b via an in memory store
 *
 * ```json
 * {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": Memory.toProperty("myGroupName")
 *   }
 * },
 * {
 *   "name": "widget-b",
 *   "properties": {
 *     "input.myInput": Memory.toProperty("myGroupName")
 *   }
 * }
 * ```
 */
export declare class Memory {
    /**
     * Generate a serialized communication configuration suitable for use as a Widget Input or Output property value.
     *
     * @param group The name of the communication group to which the Input/Output belongs
     */
    static toProperty(group: string): string;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Storage service to retain the values for each communication group that is using the Memory transport
 */
export declare class MemoryStorageService {
    private readonly storage;
    private getSubject;
    /**
     * Get an Observable of the values being communicated to the given group
     *
     * @param group The name of the communication group
     */
    get<T>(group: string): Observable<T>;
    /**
     * Communicate some value to members of the given communication group
     *
     * @param group The name of the communication group
     * @param value The value to communicate
     */
    set<T>(group: string, value: T): void;
}
export declare const createMemory: <T>(itemNavigation: ӨItemNavigationService, rootModel: ӨRootContainerService, storage: MemoryStorageService) => MemoryStore<T>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const memoryProcessorConfig: PipelineProcessorConfig;
