import { Router, ActivatedRoute } from '@angular/router';
import { PipelineSink, Sink, Source, PipelineSource } from '../pipeline-interface';
import { PipelineProcessorConfig } from '../pipeline-registry';
/**
 * @deprecated Will be removed in v7.0.0
 * Path fragment
 */
export declare type RoutePath = string;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const PARAM_PLACEHOLDER_BUILDER: unique symbol;
/**
 * @deprecated Will be removed in v7.0.0
 * Placeholder to use for a named optional matrix param in `RouterNavigate`.
 *
 * This class is private. Use `RouterNavigateSink.param` to create a placeholder.
 */
export declare class RouterNavigateParamPlaceholder {
    readonly paramName: string;
    private constructor();
    /**
     * @internal
     */
    static [PARAM_PLACEHOLDER_BUILDER](name: string): RouterNavigateParamPlaceholder;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Serialize the command generated with TS to pipeline source argument strings for the model.
 *
 * - Path commands are serialized as the path string.
 * - Single named optional params are serialzed as {paramName}
 * @param commands
 */
export declare const serializeCommands: (commands: Array<RoutePath | RouterNavigateParamPlaceholder>) => Array<string>;
/**
 * @deprecated Will be removed in v7.0.0
 * Helper to configure output properties to write to the `RouterNavigateStore`
 *
 * @usageNotes
 *
 * To navigate like:
 *
 * ```ts
 * myOutput.subscribe(() => Router.navigate(['items']);)
 * ```
 *
 * Configure your model like:
 *
 * ```json
 *  {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": RouterNavigateSink.navigate(['items']),
 *   }
 * }
 * ```
 *
 * To navigate to nested paths like:
 *
 * ```ts
 * myOutput.subscribe(() => Router.navigate(['dashboard', 'transactions']);)
 * ```
 *
 * Configure your model like:
 *
 * ```json
 *  {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": RouterNavigateSink.navigate(['dashboard', 'transactions']),
 *   }
 * }
 * ```
 *
 * To navigate passing [optional route
 * params](https://angular.io/guide/router-tutorial-toh#heroes-list-optionally-selecting-a-hero),
 * eg in Angular it would be:
 *
 * ```ts
 * heroId.subscribe((heroId) => Router.navigate(['heroes', { id: heroId }]));
 * ```
 *
 * Configure your model like:
 *
 * ```json
 * {
 *   "output.heroId": RouterNavigateSink.navigate(['heroes', RouterNavigateSink.param('id')]),
 * }
 * ```
 *
 * To read a param you can connect an input to the `RouterNavigateSource`.
 */
export declare class RouterNavigateSink {
    /**
     * Generate a serialized `PipelineSink` configuration suitable for use as a Widget Output property value.
     *
     * @param commands The commands to use for navigation.
     */
    static navigate(commands: Array<RoutePath | RouterNavigateParamPlaceholder>): string;
    /**
     * Create a param placeholder to use in a `RouterNavigateSink`.
     *
     * @param paramName
     */
    static param(paramName: string): RouterNavigateParamPlaceholder;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Helper to configure input properties to read from the `RouterNavigateStore`
 *
 * @usageNotes
 *
 *
 * To read a param into an input property:
 *
 * ```json
 * {
 *   "input.heroId": RouterNavigateSource.param('id')
 * }
 * ```
 */
export declare class RouterNavigateSource {
    /**
     * Generate a serialized `PipelineSource` configuration suitable for use as a Widget Input property value.
     *
     * @param paramName The name of the param to read from the URL.
     */
    static param(paramName: string): string;
}
/**
 * @deprecated Will be removed in v7.0.0
 * A `PipelineProcessor` which can be used as a sink to navigate like Angular's `Router.Navigate` does.
 *
 * The value of the stream can be passed as an optional parameter.
 *
 * It can also be used as a source to read the params into a widget's inputs.
 *
 * There are some known limitations to the navigate sink:
 *
 *  1. You can only navigate with the primary outlet, not named outlets.
 *  2. You cannot navigate to paths with required params, only optional (matrix) params.
 *  3. You can only pass a single param name/value.
 *  4. You can only pass a string/number value.
 *  5. If there are other outlets in the current activate route, they Will be removed.
 *
 * If you require a more complex navigation, it's recommended to create a simple sink
 * of your own. See `PipelineProcessor` and `PipelineProcessorConfig`.
 *
 * See `RouterNavigateSink` and `RouterNavigateSource` for configuration.
 */
export interface RouterNavigateStore extends PipelineSink<string | undefined>, PipelineSource<string | undefined> {
    /**
     * A `PipelineProcessor` sink which navigates to a URL using angular's `Router.navigate`.
     *
     * To configure an output property for this sink use `RouterNavigateSink`.
     *
     * @param commands An array of URL fragments with which to construct the new URL tree.
     */
    sink: (...commands: Array<string>) => Sink<string | undefined>;
    /**
     * A `PipelineProcessor` source which reads from a URL param.
     *
     * To configure an input property for this source use `RouterNavigateSource`.
     *
     * @param paramName
     */
    source: (paramName: string) => Source<string | undefined>;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const createRouterNavigateStore: (router: Router, activatedRoute: ActivatedRoute) => RouterNavigateStore;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const routerNavigateProcessorConfig: PipelineProcessorConfig;
