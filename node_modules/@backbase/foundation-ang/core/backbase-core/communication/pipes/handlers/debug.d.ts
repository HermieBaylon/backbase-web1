import { Pipe, PipelinePipe } from '../pipeline-interface';
import { PipelineProcessorConfig } from '../pipeline-registry';
/**
 * A `PipelineProcessor` which can be used as a pipe
 * or a sink to debug a component's output.
 *
 * An optional prefix can be given as an argument to the handler.
 *
 * See `debugProcessorConfig` for configuration.
 */
export interface DebugPipe<T> extends PipelinePipe<T, T> {
    /**
     * @param debugPrefix prefix placed before each debug output
     */
    pipe: (debugPrefix?: string) => Pipe<T, T>;
}
export declare type DebugSink<T> = DebugPipe<T>;
export declare const makeDebugPipe: <T>() => DebugPipe<T>;
/**
 * Configure the `DebugPipe`.
 *
 * Use the string 'debug' to configure this handler.
 *
 * @usageNotes
 *
 * ```json
 * {
 *   "output.myOutput1": "debug test", // use as sink
 *   "output.myOutput2": "debug > route-param" // use a pipe
 * }
 * ```
 */
export declare const debugProcessorConfig: PipelineProcessorConfig<'debug'>;
