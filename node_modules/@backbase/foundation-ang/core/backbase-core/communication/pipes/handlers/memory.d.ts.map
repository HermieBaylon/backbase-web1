{"version":3,"file":"memory.d.ts","sources":["memory.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { ӨRootContainerService } from '../../../models/root-container.service';\nimport { ӨItemNavigationService } from '../../item-navigation.service';\nimport { PipelineSink, PipelineSource, Sink, Source } from '../pipeline-interface';\nimport { PipelineProcessorConfig } from '../pipeline-registry';\n/**\n * @deprecated Will be removed in v7.0.0\n * Use a service to store data and pass it between widgets.\n *\n * ```\n * [ Component Output ] -> [ Memory Store ]\n * [ Memory Store ] -> [ Component Input ]\n * ```\n *\n * See `Memory` for configuration.\n */\nexport interface MemoryStore<T> extends PipelineSource<T | undefined>, PipelineSink<T> {\n    /**\n     * @param group The name communication group to connect via the store\n     */\n    source: (group: string) => Source<T | undefined>;\n    /**\n     * @param group The name communication group to connect via the store\n     */\n    sink: (group: string) => Sink<T>;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n * Memory Communication Transport\n *\n * Can be used to configure communication using Memory.\n *\n * @usageNotes\n *\n * Pass some data to widget-b via an in memory store\n *\n * ```json\n * {\n *   \"name\": \"widget-a\",\n *   \"properties\": {\n *     \"output.myOutput\": Memory.toProperty(\"myGroupName\")\n *   }\n * },\n * {\n *   \"name\": \"widget-b\",\n *   \"properties\": {\n *     \"input.myInput\": Memory.toProperty(\"myGroupName\")\n *   }\n * }\n * ```\n */\nexport declare class Memory {\n    /**\n     * Generate a serialized communication configuration suitable for use as a Widget Input or Output property value.\n     *\n     * @param group The name of the communication group to which the Input/Output belongs\n     */\n    static toProperty(group: string): string;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n * Storage service to retain the values for each communication group that is using the Memory transport\n */\nexport declare class MemoryStorageService {\n    private readonly storage;\n    private getSubject;\n    /**\n     * Get an Observable of the values being communicated to the given group\n     *\n     * @param group The name of the communication group\n     */\n    get<T>(group: string): Observable<T>;\n    /**\n     * Communicate some value to members of the given communication group\n     *\n     * @param group The name of the communication group\n     * @param value The value to communicate\n     */\n    set<T>(group: string, value: T): void;\n}\nexport declare const createMemory: <T>(itemNavigation: ӨItemNavigationService, rootModel: ӨRootContainerService, storage: MemoryStorageService) => MemoryStore<T>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare const memoryProcessorConfig: PipelineProcessorConfig;\n"]}