import { PipelineSink, Sink } from '../pipeline-interface';
import { ӨItemNavigationService } from '../../item-navigation.service';
import { PipelineProcessorConfig } from '../pipeline-registry';
import { ActivatedRoute } from '@angular/router';
import { RouterNavigationService } from '../../../routing/navigation/router-navigation.service';
export interface RouteParams {
    [key: string]: any;
}
export interface RouteParamsMultiSink extends PipelineSink<RouteParams> {
    /**
     * Save the given route params to the current route.
     *
     * If `targetName` is given it will also navigate to that item.
     *
     * Note: This sink only *writes* to the route. To read the params into a
     * component input you must use the `RouteParamsStore`.
     *
     * @param targetName Optionally navigate to the given cxp item by name and save to
     *   this item's route.
     */
    sink: (targetName?: string) => Sink<RouteParams>;
}
export declare const createRouteParamsMulti: (activatedRoute: ActivatedRoute, routerService: RouterNavigationService, itemNavigation: ӨItemNavigationService) => RouteParamsMultiSink;
/**
 * Configure the `RouteParamsMultiSink`.
 *
 * Use the string 'route-param-multi' to configure this handler.
 *
 * @usageNotes
 *
 * Store some 2-way bound states to the router as "paramName"
 *
 * ```json
 * {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": "route-param-multi",
 *     "input.myInput": "route-param input1", // assuming input1 is set via myOutput
 *     "input.myInput2": "route-param input2" // assuming input2 is set via myOutput
 *   }
 * }
 * ```
 *
 * Navigate to widget-b and pass data via route-param
 *
 * ```json
 * {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": "route-param-multi widget-b"
 *   }
 * },
 * {
 *   "name": "widget-b",
 *   "properties": {
 *     "input.myInput": "route-param input1",
 *     "input.myInput2": "route-param input2"
 *   }
 * }
 * ```
 *
 * See `RouteParamsMultiSink` for more options.
 *
 * Also see:
 *  - `routeParamsProcessorConfig`
 *  -
 */
export declare const routeParamsMultiProcessorConfig: PipelineProcessorConfig<'route-param-multi'>;
