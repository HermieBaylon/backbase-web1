import { PipelinePipe, Pipe } from '../pipeline-interface';
import { PipelineProcessorConfig } from '../pipeline-registry';
/**
 * A `PipelineProcessor` which can be pipe to transform a stream.
 *
 * Maps each source value (an object) to its specified nested property.
 *
 * See `pluckProcessorConfig` for configuration.
 */
export interface PluckPipe<T, R> extends PipelinePipe<T, R> {
    /**
     * The pluck function is from [RxJS](https://rxjs-dev.firebaseapp.com/api/operators/pluck)
     */
    pipe: (...properties: Array<string>) => Pipe<T, R>;
}
/**
 * Configure the `PluckPipe`.
 *
 * Use the string 'pluck' to configure this handler.
 *
 * @usageNotes
 *
 * ```json
 * {
 *   "output.myObject": "pluck id > debug", // transform an output
 *   "input.myInput": "pluck id < some-object-source" // transform an input
 * }
 * ```
 */
export declare const pluckProcessorConfig: PipelineProcessorConfig<'pluck'>;
