import { PipelineSink, Sink } from '../pipeline-interface';
import { PipelineProcessorConfig } from '../pipeline-registry';
export declare class UrlSinkNavigator {
    go(url: string): void;
}
/**
 * A `PipelineProcessor` which can be used as a sink
 * to navigate to a URL when a component outputs.
 *
 * The value of the stream can be passed as a query parameter
 * if the `paramName` is set.
 *
 * See `urlProcessorConfig` for configuration.
 */
export interface UrlSink extends PipelineSink<string | undefined> {
    /**
     * @param url The full URL to navigate to
     * @param paramName An optional param to pass in the query string
     */
    sink: (url: string, paramName?: string) => Sink<string | undefined>;
}
export declare const createUrlSink: (navigator?: UrlSinkNavigator) => UrlSink;
/**
 * Configure the `UrlSink`.
 *
 * Use the string 'url' to configure this handler.
 *
 * @usageNotes
 *
 * ```json
 * {
 *   "output.myOutput1": "url http://www.google.com/", // navigate without param
 *   "output.myOutput2": "url http://www.google.com/ query" // navigate with param
 * }
 * ```
 */
export declare const urlProcessorConfig: PipelineProcessorConfig<'url'>;
