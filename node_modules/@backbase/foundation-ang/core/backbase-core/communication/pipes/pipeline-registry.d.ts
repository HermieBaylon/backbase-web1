import { InjectionToken, ValueProvider, FactoryProvider, Type } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare type ProcessorName = string;
/**
 *
 * @deprecated Will be removed in v7.0.0
 * Configures a provider for a `PipelineProcessor` by name.
 *
 * @usageNotes
 *
 * Register a custom processor:
 *
 * ```typescript
 * BackbaseCoreModule.forRoot({
 *   pipelineProcessors: [{
 *     name: 'custom-pipe',
 *     provider: {
 *       provide: new InjectionToken('Custom handler'),
 *       useValue: {
 *         pipe: () => (stdin: Observable<any>) => stdin.pipe(tap(
 *           (val: any) => console.log(val)
 *         )),
 *       },
 *     },
 *   }],
 * })
 * ```
 *
 * Configure custom processor in model:
 *
 * ```json
 * {
 *   "name": "my-widget",
 *   "properties": {
 *     "output.myOutput": "custom-pipe"
 *   }
 * }
 * ```
 */
export interface PipelineProcessorConfig<T extends ProcessorName = ProcessorName> {
    /**
     * The name of the processor, which can be used in the model.
     *
     * Note: the name must begin with a letter (a-z).
     */
    name: T;
    /**
     * A valid angular provider that will be instantiated when it is needed.
     */
    provider: PipelineProcessorProvider;
}
/**
 * @deprecated Will be removed in v7.0.0
 * See https://angular.io/api/core/StaticProvider
 */
export declare interface StaticClassProvider {
    useClass: Type<any>;
    deps: Array<any>;
    provide: any;
    multi?: boolean;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type PipelineProcessorProvider = StaticClassProvider | FactoryProvider | ValueProvider;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const CONFIG_PIPELINE_PROCESSORS: InjectionToken<PipelineProcessorConfig<string>[]>;
/**
 * @deprecated Will be removed in v7.0.0
 * Helper service wrapping around CONFIG_PIPELINE_PROCESSORS
 */
export declare class PipelineRegistry {
    private readonly registeredHandlers;
    constructor(processorsNested: PipelineProcessorConfig[][]);
    getProcessorProvider(name: string): PipelineProcessorProvider;
    getProcessorProviderToken(name: string): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<PipelineRegistry, never>;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function createPipelineProcessorConfig<T extends ProcessorName>(name: T, provider: PipelineProcessorProvider): PipelineProcessorConfig<T>;

//# sourceMappingURL=pipeline-registry.d.ts.map