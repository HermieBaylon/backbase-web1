{"version":3,"file":"pipeline-registry.d.ts","sources":["pipeline-registry.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { InjectionToken, ValueProvider, FactoryProvider, Type } from '@angular/core';\nexport declare type ProcessorName = string;\n/**\n *\n * @deprecated Will be removed in v7.0.0\n * Configures a provider for a `PipelineProcessor` by name.\n *\n * @usageNotes\n *\n * Register a custom processor:\n *\n * ```typescript\n * BackbaseCoreModule.forRoot({\n *   pipelineProcessors: [{\n *     name: 'custom-pipe',\n *     provider: {\n *       provide: new InjectionToken('Custom handler'),\n *       useValue: {\n *         pipe: () => (stdin: Observable<any>) => stdin.pipe(tap(\n *           (val: any) => console.log(val)\n *         )),\n *       },\n *     },\n *   }],\n * })\n * ```\n *\n * Configure custom processor in model:\n *\n * ```json\n * {\n *   \"name\": \"my-widget\",\n *   \"properties\": {\n *     \"output.myOutput\": \"custom-pipe\"\n *   }\n * }\n * ```\n */\nexport interface PipelineProcessorConfig<T extends ProcessorName = ProcessorName> {\n    /**\n     * The name of the processor, which can be used in the model.\n     *\n     * Note: the name must begin with a letter (a-z).\n     */\n    name: T;\n    /**\n     * A valid angular provider that will be instantiated when it is needed.\n     */\n    provider: PipelineProcessorProvider;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n * See https://angular.io/api/core/StaticProvider\n */\nexport declare interface StaticClassProvider {\n    useClass: Type<any>;\n    deps: Array<any>;\n    provide: any;\n    multi?: boolean;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare type PipelineProcessorProvider = StaticClassProvider | FactoryProvider | ValueProvider;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare const CONFIG_PIPELINE_PROCESSORS: InjectionToken<PipelineProcessorConfig<string>[]>;\n/**\n * @deprecated Will be removed in v7.0.0\n * Helper service wrapping around CONFIG_PIPELINE_PROCESSORS\n */\nexport declare class PipelineRegistry {\n    private readonly registeredHandlers;\n    constructor(processorsNested: PipelineProcessorConfig[][]);\n    getProcessorProvider(name: string): PipelineProcessorProvider;\n    getProcessorProviderToken(name: string): any;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare function createPipelineProcessorConfig<T extends ProcessorName>(name: T, provider: PipelineProcessorProvider): PipelineProcessorConfig<T>;\n"]}