import { RouterConfigService } from '../routing/config/router-config.service';
import { Tree } from '../models/tree';
import { ItemRoutes } from '../routing/config/routing-tree';
import { RouteSegmentParams, RouterNavigationService } from '../routing/navigation/router-navigation.service';
export declare type FindRouteFunction = (tree: Tree<ItemRoutes>, index?: number, parent?: Tree<ItemRoutes>) => boolean;
/**
 * @internal
 */
export declare class Ó¨ItemNavigationService {
    private readonly routerConfig;
    private readonly navigationService;
    constructor(routerConfig: RouterConfigService, navigationService: RouterNavigationService);
    navigateToItem(itemName: string, params: RouteSegmentParams): Promise<boolean>;
    private isItemChild;
    navigateToChild(navigateToParent: string, childIndex: number, params: RouteSegmentParams): Promise<boolean>;
    private navigateToRoute;
    /**
     * Search the component tree for a given item, and return the route to that item.
     *
     * @param itemName The CXP instance name of the item to route to.
     */
    private routeToItem;
    /**
     * Breadth-first-search of routes, to find a route to a given item.
     *
     * 1. Find the branch to this item in the component route tree.
     * 2. Once found, find the closest routable parent.
     * 3. Take the child of the routable parent.
     * 4. For each route in the parent, use the "RouteComponentStrategy" to determine
     *      which route the route-child is rendered in.
     * 5. Once the route is found, flatten the routes of the componentRouteTree up to that route.
     *
     * @param itemName
     * @param routes
     */
    private findItemRoute;
    private isItemInRoute;
}
