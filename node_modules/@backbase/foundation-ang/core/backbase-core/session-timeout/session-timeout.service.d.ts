import { ComponentRef, ViewContainerRef, ComponentFactoryResolver, InjectionToken } from '@angular/core';
/**
 * The session timeout configuration.
 * Allows the application to manage the session timeout component class and inactivity modal time.
 */
import * as ɵngcc0 from '@angular/core';
export interface SessionTimeoutConfig {
    /**
     * The name of the component to be used for stepup mechanism
     */
    sessionTimeoutComponentClass: SessionTimeoutComponentType;
    /**
     * The time before session expiry that the modal should appear in seconds
     */
    inactivityModalTime: number;
}
export declare const SESSION_TIMEOUT_CONFIG: InjectionToken<SessionTimeoutConfig>;
/**
 * The interface for a SessionTimeoutComponent
 */
export interface SessionTimeoutComponent {
    /**
     * The default time in seconds to open the session timeout modal before session expiry.
     * This will be overwritten if you set `maxInactivityDuration` in the experience configuration
     */
    inactivityModalTime: number;
}
/**
 * The session timeout component type, set to SessionTimeoutComponent
 */
export declare type SessionTimeoutComponentType = new (...args: Array<any>) => SessionTimeoutComponent;
/**
 * The session timeout service creates a session timeout component instance within the root.
 */
export declare class SessionTimeoutService {
    private readonly resolver;
    private readonly sessionTimeoutConfig;
    private sessionTimeoutComponentRef;
    constructor(resolver: ComponentFactoryResolver, sessionTimeoutConfig: SessionTimeoutConfig);
    get sessionTimeoutComponent(): ComponentRef<SessionTimeoutComponent>;
    createSessionTimeoutComponent(sessionTimeoutContainer: ViewContainerRef): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SessionTimeoutService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<SessionTimeoutService>;
}

//# sourceMappingURL=session-timeout.service.d.ts.map