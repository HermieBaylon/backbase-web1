export interface LinkedList<T> {
    value: T;
    next?: LinkedList<T>;
}
/**
 * Creates a new LinkedList with the results of calling a provided function on
 * every element in the provided LinkedList.
 *
 * @param list
 * @param fn
 */
export declare const mapLinkedList: <T, R>(list: LinkedList<T>, fn: (value: T) => R) => LinkedList<R>;
/**
 * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD
 * to TAIL, where the new HEAD is determined by the first "true" result of calling the predicate
 * on each node in the list.
 *
 * The search is done by iterating over each element in the linked list
 * in the order from HEAD to TAIL.
 *
 * If not found, returns undefined.
 *
 * @param list
 * @param predicate
 */
export declare const linkedListFind: <T>(list: LinkedList<T>, predicate: (value: T) => boolean) => LinkedList<T> | undefined;
/**
 * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD
 * to TAIL, where the new HEAD is determined by the first "true" result of calling the predicate
 * on each node in the list.
 *
 * The search is done by iterating over each element in the linked list
 * in the order from TAIL to HEAD.
 *
 * If not found, returns undefined.
 *
 * @param list
 * @param predicate
 */
export declare const linkedListFindLast: <T>(list: LinkedList<T>, predicate: (value: T) => boolean) => LinkedList<T> | undefined;
/**
 * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD
 * to TAIL, where the new HEAD is determined by the first "true" result of calling the "begin"
 * predicate and the new TAIL is determined by the first "true" result of calling the "end"
 * predicate.
 *
 * If no "begin" predicate is sent, the HEAD will be the current HEAD.
 *
 * If no "end" predicate is sent, the TAIL will be the current TAIL.
 *
 * The search is done by iterating over each element in the linked list
 * in the order from HEAD to TAIL until both predicates return true.
 *
 * If not both found, returns undefined.
 *
 * @param list
 * @param predicate
 */
export declare const linkedListSlice: <T>(list: LinkedList<T>, begin?: ((value: T) => boolean) | undefined, end?: ((value: T) => boolean) | undefined) => LinkedList<T> | undefined;
export declare const linkedListToArray: <T>(list: LinkedList<T>) => T[];
export declare const linkedListFromArray: <T>(arr: T[]) => LinkedList<T> | undefined;
export declare const linkedListLast: <T>(list: LinkedList<T>) => LinkedList<T>;
