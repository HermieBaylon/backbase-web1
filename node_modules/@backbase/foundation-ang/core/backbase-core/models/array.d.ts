export declare const map: <T, R>(callbackfn: (value: T) => R, arr: T[]) => R[];
export declare const flatten: <T>(arr: T[][]) => T[];
export declare const flatMap: <T, R>(callbackfn: (value: T) => R[], arr: T[]) => R[];
export declare const uniq: <T>(array: T[]) => T[];
export declare const hasDuplicates: (array: Array<unknown>) => boolean;
/**
 * Creates a new list out of the two supplied by pairing up equally-positioned
 * items from both lists. The returned list is the length of the longer of two
 * lists. If one of the lists is shorter, the values will be set to "undefined".
 *
 * @param left
 * @param right
 */
export declare const pairs: <T, R>(left: T[], right: R[]) => [T | undefined, R | undefined][];
/**
 * This helper checks if the value is array of strings.
 * @param value a value to be evaluated
 * @returns true for array of strings and false for any other values
 */
export declare const isArrayOfStrings: (value: any) => value is string[];
