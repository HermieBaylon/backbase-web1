{"version":3,"file":"assets.service.d.ts","sources":["assets.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PageConfig } from '@backbase/foundation-ang/web-sdk';\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface AssetsConfiguration {\n    /**\n     * The name of the CX item containing the assets.\n     *\n     * This allows the assets to be packaged and served from one CX item, generally the app container item itself.\n     */\n    assetsStaticItemName: string;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare type AssetIDResolver = (assetId: string) => string;\n/**\n * @deprecated Will be removed in v7.0.0\n * The method resolves an asset from a configured on the App level source\n * @param assetId id of the asset item to be resolved\n */\nexport declare type AssetsResolver = (assetId: string) => Observable<string>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport interface AssetsResolverConfig {\n    widgetName: string;\n    getURIFromAssetID: AssetIDResolver;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare const CONFIG_ASSETS: InjectionToken<AssetsConfiguration>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare class AssetsService {\n    readonly pageConfig: PageConfig | null;\n    readonly assetsConfig: AssetsConfiguration | null;\n    constructor(pageConfig: PageConfig | null, assetsConfig: AssetsConfiguration | null);\n    createAssetsResolver(config: AssetsResolverConfig): AssetsResolver;\n}\n"]}