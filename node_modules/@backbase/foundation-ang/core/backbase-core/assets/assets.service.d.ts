import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { PageConfig } from '@backbase/foundation-ang/web-sdk';
/**
 * @deprecated Will be removed in v7.0.0
 */
import * as ɵngcc0 from '@angular/core';
export interface AssetsConfiguration {
    /**
     * The name of the CX item containing the assets.
     *
     * This allows the assets to be packaged and served from one CX item, generally the app container item itself.
     */
    assetsStaticItemName: string;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type AssetIDResolver = (assetId: string) => string;
/**
 * @deprecated Will be removed in v7.0.0
 * The method resolves an asset from a configured on the App level source
 * @param assetId id of the asset item to be resolved
 */
export declare type AssetsResolver = (assetId: string) => Observable<string>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface AssetsResolverConfig {
    widgetName: string;
    getURIFromAssetID: AssetIDResolver;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const CONFIG_ASSETS: InjectionToken<AssetsConfiguration>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare class AssetsService {
    readonly pageConfig: PageConfig | null;
    readonly assetsConfig: AssetsConfiguration | null;
    constructor(pageConfig: PageConfig | null, assetsConfig: AssetsConfiguration | null);
    createAssetsResolver(config: AssetsResolverConfig): AssetsResolver;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<AssetsService, [{ optional: true; }, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDeclaration<AssetsService>;
}

//# sourceMappingURL=assets.service.d.ts.map