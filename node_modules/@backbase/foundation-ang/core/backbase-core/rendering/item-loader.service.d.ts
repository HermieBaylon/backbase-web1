import { Compiler, Injector } from '@angular/core';
import { ItemRegistryService } from './item-registry.service';
import { CombinedComponentFactoryResolver } from './combined-component-factory-resolver';
import { LazyConfig } from './lazy-config';
import * as ɵngcc0 from '@angular/core';
export declare class ItemLoaderService {
    private readonly compiler;
    private readonly parentInjector;
    private readonly itemRegistry;
    private readonly componentFactoryResolver;
    private readonly lazyComponentsConfig;
    constructor(compiler: Compiler, parentInjector: Injector, itemRegistry: ItemRegistryService, componentFactoryResolver: CombinedComponentFactoryResolver, lazyConfig: LazyConfig | null);
    /**
     * Loads the module this class is in, and adds
     * it to the global item registry, and global component
     * resolver.
     *
     * @param classId
     */
    loadComponent(classId: string): Promise<void>;
    private toModuleFactory;
    private loadModule;
    private registerModule;
    private registerComponentClass;
    private registerComponentFactoryResolver;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ItemLoaderService, [null, null, null, null, { optional: true; }]>;
}

//# sourceMappingURL=item-loader.service.d.ts.map