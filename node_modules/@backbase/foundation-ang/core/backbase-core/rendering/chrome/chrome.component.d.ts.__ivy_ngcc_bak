import { ComponentRef, ViewContainerRef, OnInit, OnDestroy } from '@angular/core';
import { ItemModel } from '../../models/item-model';
import { ObservableTree } from '../../models/tree';
import { ItemLifecycleService } from '../item-lifecycle.service';
import { ItemInjectorService } from '../item-injector.service';
import { ItemLoaderService } from '../item-loader.service';
import { CombinedComponentFactoryResolver } from '../combined-component-factory-resolver';
export declare type ComponentItemModelTuple = [ComponentRef<any>, ObservableTree<ItemModel>];
/**
 * ChromeComponent represents "chrome element" and
 * implements dynamic components rendering
 */
export declare class ChromeComponent implements OnInit, OnDestroy {
    private readonly itemLifecycle;
    private readonly itemInjector;
    private readonly itemLoader;
    private readonly componentFactoryLoader;
    /**
     * Represents a container where View can be attached
     */
    vcRef: ViewContainerRef | undefined;
    private readonly gc$;
    private readonly itemValue;
    private readonly component$;
    private readonly componentItemModelTuple;
    /**
     * data-chrome attribute instructs CXP to use this component as drop target area
     */
    name: string | undefined;
    /**
     * Setter (Input) for an item to be bootstrapped
     * @param item Actual item to be bootstrapped
     */
    set item(item: ObservableTree<ItemModel>);
    /**
     * ChromeComponent constructor
     * @param componentFactoryResolver Factory which allows chrome component to resolve items
     * @param injectors Injectors map
     * @param components Components Registry Service
     */
    constructor(itemLifecycle: ItemLifecycleService, itemInjector: ItemInjectorService, itemLoader: ItemLoaderService, componentFactoryLoader: CombinedComponentFactoryResolver);
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * inner helper function which creates components
     * @param item item to be created
     */
    private createComponent;
}
