{"version":3,"file":"chrome.component.d.ts","sources":["chrome.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentRef, ViewContainerRef, OnInit, OnDestroy } from '@angular/core';\nimport { ItemModel } from '../../models/item-model';\nimport { ObservableTree } from '../../models/tree';\nimport { ItemLifecycleService } from '../item-lifecycle.service';\nimport { ItemInjectorService } from '../item-injector.service';\nimport { ItemLoaderService } from '../item-loader.service';\nimport { CombinedComponentFactoryResolver } from '../combined-component-factory-resolver';\nexport declare type ComponentItemModelTuple = [ComponentRef<any>, ObservableTree<ItemModel>];\n/**\n * ChromeComponent represents \"chrome element\" and\n * implements dynamic components rendering\n */\nexport declare class ChromeComponent implements OnInit, OnDestroy {\n    private readonly itemLifecycle;\n    private readonly itemInjector;\n    private readonly itemLoader;\n    private readonly componentFactoryLoader;\n    /**\n     * Represents a container where View can be attached\n     */\n    vcRef: ViewContainerRef | undefined;\n    private readonly gc$;\n    private readonly itemValue;\n    private readonly component$;\n    private readonly componentItemModelTuple;\n    /**\n     * data-chrome attribute instructs CXP to use this component as drop target area\n     */\n    name: string | undefined;\n    /**\n     * Setter (Input) for an item to be bootstrapped\n     * @param item Actual item to be bootstrapped\n     */\n    set item(item: ObservableTree<ItemModel>);\n    /**\n     * ChromeComponent constructor\n     * @param componentFactoryResolver Factory which allows chrome component to resolve items\n     * @param injectors Injectors map\n     * @param components Components Registry Service\n     */\n    constructor(itemLifecycle: ItemLifecycleService, itemInjector: ItemInjectorService, itemLoader: ItemLoaderService, componentFactoryLoader: CombinedComponentFactoryResolver);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * inner helper function which creates components\n     * @param item item to be created\n     */\n    private createComponent;\n}\n"]}