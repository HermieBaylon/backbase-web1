{"version":3,"file":"item-registry.service.d.ts","sources":["item-registry.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { LoadChildrenCallback } from '@angular/router';\nimport { LazyConfigItem } from './lazy-config';\nexport declare type ComponentClass<T> = new (...args: Array<any>) => T;\nexport interface ComponentMap {\n    [key: string]: ComponentClass<any>;\n}\n/**\n * ComponentRegistry configuration injection token\n */\nexport declare const CONFIG_COMPONENT_CLASS_MAP: InjectionToken<Map<string, ComponentClass<any>>>;\n/**\n * ItemRegistryService stores a hashMap\n * of the components included into the app and\n * avaliable for usage. It's meant to be an extension\n * point which is used by a developer.\n */\nexport declare class ItemRegistryService {\n    private readonly itemRegistry;\n    private readonly lazyModuleConfig;\n    /**\n     * ItemRegistryService constructor which allows to define components\n     * included into application\n     * @param ComponentRegistry a hashMap of the component classes to be added\n     */\n    constructor(classMaps: Array<ComponentMap> | undefined, lazyConfig: Array<LazyConfigItem> | null);\n    entries(): [string, ComponentClass<any>][];\n    add(classId: string, componentClass: ComponentClass<any>): void;\n    has(classId: string): boolean;\n    /**\n     * This method allows to retrieve Component by it's classId\n     * @param classId classId key to get a component class\n     * @returns componentType to be used by a ComponentFactoryResolver\n     */\n    getComponentValue(classId: string): ComponentClass<any> | undefined;\n    getComponent(classId: string): Promise<ComponentClass<any>>;\n    getModuleLoader(classId: string): LoadChildrenCallback | undefined;\n}\n"]}