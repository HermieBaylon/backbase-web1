import { ComponentRef, Injector } from '@angular/core';
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { StepUpService, StepUpComponent, StepUpComponentType } from './stepup.service';
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type ShouldInterceptStepUpCallback = (response: HttpErrorResponse) => boolean;
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface ShouldInterceptStepUpConfig {
    /**
     * Step-up authentication is triggered when the response `statusCode` matches the one defined by this option.
     * Default: `401`.
     */
    statusCode: number;
    /**
     * Step-up authentication is triggered when this header is present in a error response in combination with `statusCode` check
     * Default: `WWW-Authenticate`.
     */
    headerAttribute: string;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const createInterceptCallback: (interceptConfig: ShouldInterceptStepUpConfig) => ShouldInterceptStepUpCallback;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const isInterceptCallback: (interceptConfig: ShouldInterceptStepUpCallback | ShouldInterceptStepUpConfig) => interceptConfig is ShouldInterceptStepUpCallback;
/**
 * @deprecated Will be removed in v7.0.0
 * The step-up interceptor configuration interface.
 * Step-up authentication provides a higher level of assurance that
 * a person is who they claim to be. When a user tries to perform a task,
 * they are challenged to produce additional forms of authentication.
 */
export interface StepUpInterceptorConfig {
    /**
     * Configuration for the retry requests of the stepup authentication mechanism.
     */
    retryRequests: {
        /**
         * The key of the header which is added to the retry request.
         * The value for this header will be determined by the payload of an event
         * emitted by the `StepUpComponentType.complete`. See the `StepUpComponentType` interface.
         * Default: `X-MFA`
         */
        headerAttribute: string;
    };
    /**
     * If this header is present, on a error response and it matches statusCode, it will trigger a step-up mechanism
     */
    interceptResponses: ShouldInterceptStepUpCallback | ShouldInterceptStepUpConfig;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Configuration interface for the step-up authentication.
 */
export declare type StepUpConfig = StepUpInterceptorConfig & {
    /**
     * Step-up component class. When a step-up request is intercepted this is the
     * component which will be displayed to resolve the step-up authentication.
     */
    mediatorComponentClass: StepUpComponentType;
};
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const DEFAULT_STEPUP_CONFIG: StepUpInterceptorConfig;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type StepupComponentCompleteEvent = ['complete', string];
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type StepupComponentCancelEvent = ['cancel', undefined];
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare type StepupComponentEvents = StepupComponentCancelEvent | StepupComponentCompleteEvent;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare class StepUpInterceptor implements HttpInterceptor {
    private readonly stepupService;
    private readonly config;
    private readonly injector;
    /**
     * @deprecated Should not be public
     * @todo convert to a local variable within  the intercept handler
     */
    mediatorComponent: ComponentRef<StepUpComponent> | undefined;
    constructor(stepupService: StepUpService, config: StepUpConfig, injector: Injector);
    intercept<R, T>(req: HttpRequest<R>, next: HttpHandler): Observable<HttpEvent<T>>;
}
