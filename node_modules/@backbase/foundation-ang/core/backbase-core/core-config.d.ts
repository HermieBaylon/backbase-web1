import { ComponentMap } from './rendering/item-registry.service';
import { CommunicationFlowConfig } from './communication/deprecated/flows.service';
import { AssetsConfiguration } from './assets/assets.service';
import { EnabledFeaturesConfig, DeprecationsService } from '@backbase/foundation-ang/future';
import { RouteGuardsConfig } from './routing/guards/route-guards-registry.service';
import { InjectionToken } from '@angular/core';
import { PipelineProcessorConfig } from './communication/pipes/pipeline-registry';
import { LazyConfig } from './rendering/lazy-config';
/**
 * Options to configure the Backbase Core Functionality.
 */
export interface BackbaseCoreConfiguration {
    /**
     * A hash map of Backbase Item components (widget or container),
     * where key is string matching the `classId` item property,
     * and value is the Angular component Class.
     */
    classMap?: ComponentMap;
    /**
     * Register Route Guards that can be attached to routes based on the Item Model
     *
     * This only allows guards to be configured via the Item Model properties - the guards
     * must still be provided in a `NgModule` `providers`.
     */
    guards?: RouteGuardsConfig;
    /**
     * Configure the input/output processors available in
     * this app (in addition to the default processors).
     */
    pipelineProcessors?: Array<PipelineProcessorConfig>;
}
/**
 * Options to configure the Backbase Core Functionality.
 */
export interface BackbaseRootConfiguration {
    /**
     * Application assets configuration.
     */
    assets?: AssetsConfiguration;
    /**
     * A hash map of Backbase Item components (widget or container),
     * where key is string matching the `classId` item property,
     * and value is the Angular component Class.
     */
    classMap?: ComponentMap;
    /**
     * Configuration of "navigation" output handler.
     */
    flows?: Array<CommunicationFlowConfig>;
    /**
     * Configure the input/output processors available in
     * this app (in addition to the default processors).
     */
    pipelineProcessors?: Array<PipelineProcessorConfig>;
    /**
     * Register Route Guards that can be attached to routes based on the Item Model
     *
     * This only allows guards to be configured via the Item Model properties - the guards
     * must still be provided in a `NgModule` `providers`.
     */
    guards?: RouteGuardsConfig;
    /**
     * Decide if deprecation warnings should be logged to the developer console.
     */
    logDeprecations?: boolean;
    /**
     * Opt in to future features.
     */
    features?: EnabledFeaturesConfig;
    /**
     * Option for lazy loaded modules configuration.
     */
    lazyModules?: LazyConfig;
}
export { ComponentMap, ComponentClass } from './rendering/item-registry.service';
export { CommunicationFlowConfig, ComponentOutputConfig, ComponentInputConfig, ClassId, OutputName, InputName, } from './communication/deprecated/flows.service';
export { EnabledFeaturesConfig } from '@backbase/foundation-ang/future';
export declare const DEPRECATED_WITH_CONFIG: InjectionToken<DeprecatedWithConfig>;
export interface DeprecatedWithConfig {
    assets?: any;
    logDeprecationsService?: any;
    features?: any;
    flows?: any;
    [key: string]: any | undefined;
}
export declare const logDeprecatedConfig: (deprecationService: DeprecationsService, deprecatedConfigs: Array<DeprecatedWithConfig>) => void;
export declare const createLogDeprecatedConfig: (deprecationService: DeprecationsService, deprecatedConfig: Array<DeprecatedWithConfig>) => () => void;
