{"version":3,"file":"entitlements.guard.d.ts","sources":["entitlements.guard.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, Router, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';\nimport { ConditionsService } from '../services/conditions.service';\nimport { Observable } from 'rxjs';\nexport declare type ResolveEntitlements = (entitlementDefinition: string) => Promise<boolean>;\nexport declare type RedirectionFactory = (resolveEntitlements: ResolveEntitlements, route: ActivatedRouteSnapshot | Route, state: RouterStateSnapshot | UrlSegment[]) => string | undefined | Promise<string | undefined> | Observable<string | undefined>;\nexport declare class EntitlementsGuard implements CanActivate, CanActivateChild, CanLoad {\n    protected readonly conditions: ConditionsService;\n    protected readonly router: Router;\n    constructor(conditions: ConditionsService, router: Router);\n    protected readonly userHasEntitlements: (entitlements: string) => Promise<boolean>;\n    protected resolveEntitlements(entitlements: string, redirectTo?: string | RedirectionFactory, route?: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot | UrlSegment[]): Promise<boolean | UrlTree>;\n    private getRedirection;\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree>;\n    canLoad(route: Route, segments: UrlSegment[]): Promise<boolean | UrlTree>;\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree>;\n}\n"]}