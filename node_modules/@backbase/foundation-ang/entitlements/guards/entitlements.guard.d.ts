import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, Router, RouterStateSnapshot, UrlSegment, UrlTree } from '@angular/router';
import { ConditionsService } from '../services/conditions.service';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare type ResolveEntitlements = (entitlementDefinition: string) => Promise<boolean>;
export declare type RedirectionFactory = (resolveEntitlements: ResolveEntitlements, route: ActivatedRouteSnapshot | Route, state: RouterStateSnapshot | UrlSegment[]) => string | undefined | Promise<string | undefined> | Observable<string | undefined>;
export declare class EntitlementsGuard implements CanActivate, CanActivateChild, CanLoad {
    protected readonly conditions: ConditionsService;
    protected readonly router: Router;
    constructor(conditions: ConditionsService, router: Router);
    protected readonly userHasEntitlements: (entitlements: string) => Promise<boolean>;
    protected resolveEntitlements(entitlements: string, redirectTo?: string | RedirectionFactory, route?: ActivatedRouteSnapshot | Route, state?: RouterStateSnapshot | UrlSegment[]): Promise<boolean | UrlTree>;
    private getRedirection;
    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree>;
    canLoad(route: Route, segments: UrlSegment[]): Promise<boolean | UrlTree>;
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean | UrlTree>;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<EntitlementsGuard, never>;
}

//# sourceMappingURL=entitlements.guard.d.ts.map