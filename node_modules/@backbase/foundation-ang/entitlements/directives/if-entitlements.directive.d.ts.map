{"version":3,"file":"if-entitlements.directive.d.ts","sources":["if-entitlements.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { ConditionsService } from '../services/conditions.service';\n/**\n * @description\n * A structural directive that conditionally includes a template based on the value of\n * an expression coerced to Boolean based on a entitlements triplets validation.\n * When the expression evaluates to true, Angular renders the template\n * Angular renders the template provided in an optional `else` clause. The default\n * template for the `else` clause is blank.\n *\n * @usageNotes\n *\n * ### Example\n * ```\n * <div *bbIfEntitlements=\"'ProductSummary.ProductSummary.edit'\">Content to render when condition is true.</div>\n *\n * <div *bbIfEntitlements=\"'ProductSummary.ProductSummary.edit'; else alternative\">Content to render when condition is true.</div>\n * <ng-template #alternative>\n *   <div>alternative content</div>\n * </ng-template>\n * ```\n */\nexport declare class IfEntitlementsDirective<T = unknown> {\n    private conditions;\n    private templateRef;\n    private viewContainerRef;\n    private cd;\n    private elseTemplateRef;\n    /**\n     * Entitlement to evaluate\n     */\n    set bbIfEntitlements(value: string);\n    /**\n     * Alternative template to show in the else clause\n     */\n    set bbIfEntitlementsElse(value: TemplateRef<T>);\n    private renderMainView;\n    private renderAlternativeView;\n    constructor(conditions: ConditionsService, templateRef: TemplateRef<T>, viewContainerRef: ViewContainerRef, cd: ChangeDetectorRef);\n}\n"]}