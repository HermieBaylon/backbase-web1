import { ChangeDetectorRef, TemplateRef, ViewContainerRef } from '@angular/core';
import { ConditionsService } from '../services/conditions.service';
/**
 * @description
 * A structural directive that conditionally includes a template based on the value of
 * an expression coerced to Boolean based on a entitlements triplets validation.
 * When the expression evaluates to true, Angular renders the template
 * Angular renders the template provided in an optional `else` clause. The default
 * template for the `else` clause is blank.
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * <div *bbIfEntitlements="'ProductSummary.ProductSummary.edit'">Content to render when condition is true.</div>
 *
 * <div *bbIfEntitlements="'ProductSummary.ProductSummary.edit'; else alternative">Content to render when condition is true.</div>
 * <ng-template #alternative>
 *   <div>alternative content</div>
 * </ng-template>
 * ```
 */
export declare class IfEntitlementsDirective<T = unknown> {
    private conditions;
    private templateRef;
    private viewContainerRef;
    private cd;
    private elseTemplateRef;
    /**
     * Entitlement to evaluate
     */
    set bbIfEntitlements(value: string);
    /**
     * Alternative template to show in the else clause
     */
    set bbIfEntitlementsElse(value: TemplateRef<T>);
    private renderMainView;
    private renderAlternativeView;
    constructor(conditions: ConditionsService, templateRef: TemplateRef<T>, viewContainerRef: ViewContainerRef, cd: ChangeDetectorRef);
}
