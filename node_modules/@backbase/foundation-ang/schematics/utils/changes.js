"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.astChangeFile = exports.insert = void 0;
const ng_utils_1 = require("./ng-utils");
function insert(host, modulePath, changes) {
    const recorder = host.beginUpdate(modulePath);
    for (const change of changes) {
        if (change instanceof ng_utils_1.InsertChange) {
            recorder.insertLeft(change.pos, change.toAdd);
        }
        else if (change instanceof ng_utils_1.RemoveChange) {
            recorder.remove(change.pos - 1, change.toRemove.length + 1);
        }
        else if (change instanceof ng_utils_1.NoopChange) {
            // do nothing
        }
        else if (change instanceof ng_utils_1.ReplaceChange) {
            const action = change;
            recorder.remove(action.pos + 1, action.oldText.length);
            recorder.insertLeft(action.pos + 1, action.newText);
        }
        else {
            throw new Error(`Unexpected Change '${change}'`);
        }
    }
    host.commitUpdate(recorder);
}
exports.insert = insert;
const applyChanges = (requestedChanges) => tree => {
    const changes = requestedChanges.filter((change) => !(change instanceof ng_utils_1.NoopChange));
    if (changes.length === 0) {
        return;
    }
    insert(tree, changes[0].path, changes);
};
const requestTextChanges = (toFile) => (withOperators) => {
    const changes = [];
    withOperators({
        insert: (pos, toAdd) => changes.push(new ng_utils_1.InsertChange(toFile, pos, toAdd)),
        replace: (pos, oldText, newText) => changes.push(new ng_utils_1.ReplaceChange(toFile, pos, oldText, newText)),
        remove: (pos, toRemove) => changes.push(new ng_utils_1.RemoveChange(toFile, pos, toRemove)),
    });
    return changes;
};
const astChangeFile = (parser) => (filePath, changes) => (tree, context) => {
    const buffer = tree.read(filePath);
    if (buffer === null) {
        return;
    }
    const parsed = parser(buffer.toString('utf-8'));
    if (parsed === undefined) {
        return;
    }
    const requestedChanges = requestTextChanges(filePath)(ops => changes(parsed, ops));
    return applyChanges(requestedChanges)(tree, context);
};
exports.astChangeFile = astChangeFile;
//# sourceMappingURL=changes.js.map