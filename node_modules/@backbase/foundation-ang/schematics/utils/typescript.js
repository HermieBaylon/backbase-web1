"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguageService = exports.findReferences = exports.getUpdatedSourceFileFromTree = exports.findTightestNode = exports.createTsProgramForNgWorkSpace = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const ts = require("typescript");
const array_1 = require("./array");
const typescript_hosts_1 = require("./typescript-hosts");
function createTsProgramForNgWorkSpace(tree, tsConfigPath = './tsconfig.json') {
    const configResults = ts.getParsedCommandLineOfConfigFile(tsConfigPath, {
        rootDirs: ['libs', 'apps'],
    }, new typescript_hosts_1.ParseConfigFileHost(tree));
    if (!configResults || configResults.errors.length > 0) {
        throw new schematics_1.SchematicsException(`can not create typescript program from ${tsConfigPath}`);
    }
    return ts.createProgram({
        options: configResults.options,
        rootNames: configResults.fileNames,
        host: new typescript_hosts_1.CompilerHost(tree, configResults.options),
    });
}
exports.createTsProgramForNgWorkSpace = createTsProgramForNgWorkSpace;
function findTightestNode(node, position) {
    if (node.getStart() <= position && position < node.getEnd()) {
        return node.forEachChild(c => findTightestNode(c, position)) || node;
    }
    return;
}
exports.findTightestNode = findTightestNode;
function getUpdatedSourceFileFromTree(tree, sourceFile) {
    const file = tree.read(sourceFile.fileName);
    if (!file) {
        return sourceFile;
    }
    const content = file.toString('utf-8');
    sourceFile = sourceFile.update(content, {
        newLength: content.length,
        span: {
            start: 0,
            length: sourceFile.text.length,
        },
    });
    return sourceFile;
}
exports.getUpdatedSourceFileFromTree = getUpdatedSourceFileFromTree;
function findReferences(languageService, fileName, pos) {
    return array_1.flat((languageService.findReferences(fileName, pos) || [])
        .filter(ref => ref.definition.kind === ts.ScriptElementKind.alias)
        .map(ref => ref.references.filter(r => !r.isDefinition)));
}
exports.findReferences = findReferences;
function createLanguageService(tree, compilerOptions, rootFileNames, getScriptVersion) {
    return ts.createLanguageService(new typescript_hosts_1.SchematicsTreeLanguageServiceHost(tree, compilerOptions, rootFileNames, getScriptVersion));
}
exports.createLanguageService = createLanguageService;
//# sourceMappingURL=typescript.js.map