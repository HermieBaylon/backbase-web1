"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const try_rule_1 = require("../utils/try-rule");
const json_1 = require("../utils/json");
const manualProcess = `
## Modify the "update" script in package.json

Change the update script to target version ^6 for @backbase/foundation-ang:

    "scripts": {
      "update": "ng update @backbase/foundation-ang@^6",
    }
`;
const updateUpdateScript = json_1.astChangeJsonFile('package.json', (json, { insert, replace }) => {
    const scriptsNode = json.properties.find(({ key }) => key.kind === 'string' && key.value === 'scripts');
    if (!scriptsNode || scriptsNode.value.kind !== 'object') {
        return;
    }
    const updateScriptNode = scriptsNode.value.properties.find(({ key }) => key.kind === 'string' && key.value === 'update');
    if (!updateScriptNode) {
        const scriptsNodes = scriptsNode.value.properties;
        const hasScripts = scriptsNodes.length > 0;
        if (!hasScripts) {
            insert(scriptsNode.value.start.offset + 1, `"update": "ng update @backbase/foundation-ang@^6"`);
        }
        else {
            const last = scriptsNode.value.properties[scriptsNode.value.properties.length - 1];
            const indent = ' '.repeat(last.start.character);
            insert(last.value.end.offset, core_1.tags.stripIndent `
        ,
        ${indent}"update": "ng update @backbase/foundation-ang@^6"
        `);
        }
    }
    else if (updateScriptNode.value.kind === 'string') {
        replace(updateScriptNode.value.start.offset, updateScriptNode.value.value, updateScriptNode.value.value.replace('@backbase/foundation-ang@^5', '@backbase/foundation-ang@^6'));
    }
});
exports.default = () => try_rule_1.tryRule(updateUpdateScript, manualProcess);
//# sourceMappingURL=6.0.1.js.map