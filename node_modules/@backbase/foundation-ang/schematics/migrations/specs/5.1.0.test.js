"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const utils_1 = require("./utils");
const createWorkspace = (tree) => {
    tree.create('/angular.json', `{
    "version": 1,
    "projects": {
      "my-app": {
        "projectType": "application",
        "root": "apps/my-app",
        "sourceRoot": "apps/my-app/src",
        "architect": {
          "build": {
            "builder": "@bb-cli/bb-ang:browser",
            "options": {
              "main": "apps/my-app/src/main.ts"
            }
          }
        }
      },
      "my-widget": {
        "root": "libs/my-widget",
        "sourceRoot": "libs/my-widget/src",
        "projectType": "library"
      }
    },
  }`);
    tree.create('/package.json', `{
    "dependencies": {
    },
    "devDependencies": {
    }
  }`);
    tree.create('/tsconfig.json', `{
    "exclude": [
      "node_modules",
      "tmp"
    ]
  }`);
    tree.create('apps/my-app/src/main.ts', `import { StaticProvider, enableProdMode } from '@angular/core';
  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
  import { registerSingleApp } from '@backbase/foundation-ang/core';

  import { AppModule } from './app/app.module';

  import { environment } from './environments/environment';
  if (environment.production) {
    enableProdMode();
  }

  const start = registerSingleApp((extraProviders: Array<StaticProvider>) =>
    platformBrowserDynamic(extraProviders).bootstrapModule(AppModule),
  );

  if (environment.bootstrap) {
    const { services, pageModel } = environment.bootstrap;
    start(services).then(app => {
      app.bootstrap(pageModel, { parentName: '', index: 0 });
    });
  }`);
    tree.create('apps/my-app/src/app/app.module.ts', `import { BrowserModule } from '@angular/platform-browser';
  import { NgModule } from '@angular/core';

  import { AppComponent } from './app.component';
  import { BackbaseCoreModule } from '@backbase/foundation-ang/core';

  @NgModule({
    declarations: [
      AppComponent
    ],
    imports: [
      BrowserModule,
      BackbaseCoreModule,
    ],
    bootstrap: [AppComponent]
  })
  export class AppModule { }
  `);
    tree.create('/libs/my-widget/package.json', `{
    "dependencies": {
    },
    "peerDependencies": {
      "@backbase/foundation-ang": "5.0.0"
    }
  }`);
    return tree;
};
describe('5.1.0 migration', () => {
    let tree;
    let runner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(new schematics_1.EmptyTree());
        runner = new testing_1.SchematicTestRunner('schematics', require.resolve('../../migrations.json'));
        tree = createWorkspace(tree);
    }));
    it('should handle named imports', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = 'libs/myApp/file.ts';
        tree.create(filePath, `import { NgModule } from '@angular/core';
      import { StoreModule } from '@backbase/foundation-ang/store';
      import { DemoEffects } from './effects';

      @NgModule({
        imports: [StoreModule],
        providers: [DemoEffects],
      })
      export class DemoModelModule {}
    `);
        const updatedTree = yield runner.runSchematicAsync('5.1.0', {}, tree).toPromise();
        const updatedFile = updatedTree.readContent(filePath);
        expect(updatedFile).not.toContain(`import { StoreModule } from '@backbase/foundation-ang/store';`);
        expect(updatedFile).toContain(`import { BackbaseStoreModule } from '@backbase/foundation-ang/store';`);
        expect(updatedFile).not.toContain(`[StoreModule]`);
        utils_1.notHaveEmptyImports(updatedFile);
    }));
    it('should handle nameSpace imports', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = 'libs/myApp/file.ts';
        tree.create(filePath, `import { NgModule } from '@angular/core';
      import * as coreAng from '@backbase/foundation-ang/store';
      import { DemoEffects } from './effects';

      @NgModule({
        imports: [coreAng.StoreModule],
        providers: [DemoEffects],
      })
      export class DemoModelModule {}
    `);
        const updatedTree = yield runner.runSchematicAsync('5.1.0', {}, tree).toPromise();
        const updatedFile = updatedTree.readContent(filePath);
        expect(updatedFile).not.toContain(`coreAng.StoreModule`);
        expect(updatedFile).toContain(`coreAng.BackbaseStoreModule`);
        utils_1.notHaveEmptyImports(updatedFile);
    }));
    it('should add ngrx imports to app root module', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = '/apps/my-app/src/app/app.module.ts';
        const updatedTree = yield runner.runSchematicAsync('5.1.0', {}, tree).toPromise();
        const updatedFile = updatedTree.readContent(filePath);
        expect(updatedFile).toContain(`StoreModule.forRoot({})`);
        expect(updatedFile).toContain(`EffectsModule.forRoot([])`);
        expect(updatedFile).toContain(`import { StoreModule } from '@ngrx/store';`);
        expect(updatedFile).toContain(`import { EffectsModule } from '@ngrx/effects';`);
    }));
    it('should update package.json with ngrx packages', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = '/package.json';
        const updatedTree = yield runner.runSchematicAsync('5.1.0', {}, tree).toPromise();
        const updatedFile = updatedTree.readContent(filePath);
        const pkgJson = JSON.parse(updatedFile);
        expect(pkgJson.dependencies['@ngrx/effects']).toEqual('^8.0.0');
        expect(pkgJson.dependencies['@ngrx/store']).toEqual('^8.0.0');
    }));
});
//# sourceMappingURL=5.1.0.test.js.map