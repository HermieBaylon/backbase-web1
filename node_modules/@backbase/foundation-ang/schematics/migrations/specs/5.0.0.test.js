"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const utils_1 = require("./utils");
const createWorkspace = (tree) => {
    tree.create('/angular.json', `{
    "version": 1,
    "projects": {
      "my-widget": {
        "root": "libs/my-widget",
        "sourceRoot": "libs/my-widget/src",
        "projectType": "library"
      }
    },
  }`);
    tree.create('/tsconfig.json', `{
    "exclude": [
      "node_modules",
      "tmp"
    ]
  }`);
    tree.create('/libs/my-widget/package.json', `{
    "dependencies": {
    },
    "peerDependencies": {
      "@backbase/foundation-ang": "5.0.0"
    }
  }`);
    tree.create('/libs/my-widget/file.ts', ''); // at least one file is needed for compiler
    return tree;
};
describe('5.0.0 migration', () => {
    let tree;
    let runner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(new schematics_1.EmptyTree());
        runner = new testing_1.SchematicTestRunner('schematics', require.resolve('../../migrations.json'));
        // create workspace,app,widget from backbase schematics
        tree = createWorkspace(tree);
    }));
    it('should update libs/widget package.json with foundation 5', () => __awaiter(void 0, void 0, void 0, function* () {
        const mockFilePath = '/libs/my-widget/package.json';
        tree.overwrite(mockFilePath, `{
      "$schema": "../../node_modules/ng-packagr/package.schema.json",
      "name": "@backbase/my-widget-ang",
      "version": "1.0.0",
      "description": "MyWidget",
      "peerDependencies": {
        "@angular/common": "^8.0.0",
        "@angular/core": "^8.0.0",
        "@backbase/foundation-ang": "^4.34.0"
      },
      "ngPackage": {
        "lib": {
          "entryFile": "public_api.ts",
          "languageLevel": [
            "dom",
            "es2017"
          ]
        },
        "dest": "../../dist/libs/my-widget"
      }
    }`);
        const updatedTree = yield runner.runSchematicAsync('5.0.0', {}, tree).toPromise();
        expect(updatedTree.readContent(mockFilePath)).toContain(`"@backbase/foundation-ang": "^5.0.0"`);
    }));
    it('handle one named import', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = 'libs/myApp/file.ts';
        tree.create(filePath, `
    import { Provider } from '@angular/core';
    import { Item } from '@backbase/foundation-ang/core';
    import { PropertyValue } from '@backbase/foundation-ang/core';
    import { ExternalServices } from '@backbase/foundation-ang/start';

    export interface Environment {
      readonly assetsStaticItemName: string;
      readonly production: boolean;
      readonly mockProviders?: Array<Provider>;
      readonly bootstrap?: {
        readonly pageModel: { [key: string]: Item };
        readonly services: ExternalServices;
      };
    }
    `);
        const updatedTree = yield runner.runSchematicAsync('5.0.0', {}, tree).toPromise();
        const updatedFile = updatedTree.readContent(filePath);
        expect(updatedFile).not.toContain(`import { Item } from '@backbase/foundation-ang/core';`);
        expect(updatedFile).toContain(`import { Item } from '@backbase/foundation-ang/web-sdk';`);
        expect(updatedFile).toContain(`import { Property as PropertyValue } from '@backbase/foundation-ang/web-sdk';`);
        utils_1.notHaveEmptyImports(updatedFile);
    }));
    it('handle multiple named imports', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = 'libs/myApp/file.ts';
        tree.create(filePath, `import { Provider } from '@angular/core';
    import { Widget, anotherItemShouldRemain, PropertyValue } from '@backbase/foundation-ang/core';
    import { ExternalServices } from '@backbase/foundation-ang/start';


    export interface Environment {
      readonly assetsStaticItemName: string;
      readonly production: boolean;
      readonly mockProviders?: Array<Provider>;
      readonly bootstrap?: {
        readonly pageModel: { [key: string]: Item };
        readonly services: ExternalServices;
      };
    }
    `);
        const updatedTree = yield runner.runSchematicAsync('5.0.0', {}, tree).toPromise();
        const updatedFile = updatedTree.readContent(filePath);
        expect(updatedFile).not.toContain(`import { Widget, anotherItemShouldRemain } from '@backbase/foundation-ang/core';`);
        expect(updatedFile).toContain(`import {  anotherItemShouldRemain, } from '@backbase/foundation-ang/core';`);
        expect(updatedFile).toContain('import {Widget, Property as PropertyValue} from "@backbase/foundation-ang/web-sdk";');
        utils_1.notHaveEmptyImports(updatedFile);
    }));
    it('handle namespace imports', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = 'libs/myApp/file.ts';
        tree.create(filePath, `import { Widget } from '@backbase/foundation-ang/core';
    import * as coreAng from '@backbase/foundation-ang/core';

    declare const test: coreAng.BackbaseCoreModule;
    declare const test1: coreAng.PropertyValue;

    export const widgetFactory: () => Widget = () => {
      return {
        name: 'test',
        properties: {
          prop1: '',
        },
      };
    };

    export const containerFactory: () => coreAng.Container = () => {
      return {
        name: 'testContainer',
        properties: {
          prop1: '',
        },
        children: [widgetFactory()],
      };
    };
    `);
        const updatedTree = yield runner.runSchematicAsync('5.0.0', {}, tree).toPromise();
        const updatedFile = updatedTree.readContent(filePath);
        expect(updatedFile).toContain(`import * as coreAng from '@backbase/foundation-ang/core'`);
        expect(updatedFile).toContain(`import * as websdk from "@backbase/foundation-ang/web-sdk";`);
        expect(updatedFile).toContain('declare const test: coreAng.BackbaseCoreModule;');
        expect(updatedFile).toContain(`declare const test1: websdk.Property;`);
        expect(updatedFile).toContain('websdk.Container');
        utils_1.notHaveEmptyImports(updatedFile);
    }));
});
//# sourceMappingURL=5.0.0.test.js.map