"use strict";
/* eslint-disable @typescript-eslint/no-non-null-assertion */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
describe('6.0.1 migration', () => {
    let tree;
    let runner;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        tree = new testing_1.UnitTestTree(new schematics_1.EmptyTree());
        runner = new testing_1.SchematicTestRunner('schematics', require.resolve('../../migrations.json'));
    }));
    it('should add a new update script if no scripts exist', () => __awaiter(void 0, void 0, void 0, function* () {
        tree.create('/package.json', JSON.stringify({
            scripts: {},
        }, null, 2));
        const updatedTree = yield runner.runSchematicAsync('6.0.1', {}, tree).toPromise();
        const newContent = updatedTree.readContent('/package.json');
        expect(JSON.parse(newContent).scripts.update).toEqual(`ng update @backbase/foundation-ang@^6`);
    }));
    it('should add a new update script if other scripts exist', () => __awaiter(void 0, void 0, void 0, function* () {
        tree.create('/package.json', JSON.stringify({
            scripts: {
                build: 'ng build',
            },
        }));
        const updatedTree = yield runner.runSchematicAsync('6.0.1', {}, tree).toPromise();
        const newContent = updatedTree.readContent('/package.json');
        expect(JSON.parse(newContent).scripts.update).toEqual(`ng update @backbase/foundation-ang@^6`);
    }));
    it('should update the update script if it already exists', () => __awaiter(void 0, void 0, void 0, function* () {
        tree.create('/package.json', JSON.stringify({
            scripts: {
                build: 'ng build',
                update: 'ng update @bb-cli/bb-schematics@^5 @backbase/foundation-ang@^5',
            },
        }));
        const updatedTree = yield runner.runSchematicAsync('6.0.1', {}, tree).toPromise();
        const newContent = updatedTree.readContent('/package.json');
        expect(JSON.parse(newContent).scripts.update).toEqual(`ng update @bb-cli/bb-schematics@^5 @backbase/foundation-ang@^6`);
    }));
});
//# sourceMappingURL=6.0.1.test.js.map