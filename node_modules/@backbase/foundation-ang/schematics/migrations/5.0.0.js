"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const ts = require("typescript");
const changes_1 = require("../utils/changes");
const imports_1 = require("../utils/imports");
const ng_utils_1 = require("../utils/ng-utils");
const try_rule_1 = require("../utils/try-rule");
const typescript_1 = require("../utils/typescript");
const manualProcess = `
## Update all Imports from @backbase/foundation-ang/core that contains the following types
* Properties
* PropertyValue
* Item
* ItemLocation
* Widget
* Container

to be imported from @backbase/foundation-ang/web-sdk for Example
 \`import { Item } from '@backbase/foundation-ang/core'\`;
 should be converted to
 \`import { Item } from '@backbase/foundation-ang/web-sdk\`';
`;
function default_1() {
    return try_rule_1.tryRule((tree) => __awaiter(this, void 0, void 0, function* () {
        const program = typescript_1.createTsProgramForNgWorkSpace(tree);
        const filesVersions = new Map();
        const languageService = typescript_1.createLanguageService(tree, program.getCompilerOptions(), [...program.getRootFileNames()], (fileName) => {
            const version = filesVersions.get(fileName) || 0;
            return version.toString();
        });
        for (const sourceFile of program.getSourceFiles()) {
            if (sourceFile.isDeclarationFile) {
                continue;
            }
            const webSdk = ts.createUniqueName('websdk');
            const changes = imports_1.updateImportsSpecifier(sourceFile, languageService, ['@backbase/foundation-ang/core'], '@backbase/foundation-ang/web-sdk', webSdk, ['Properties', 'PropertyValue', 'Item', 'ItemLocation', 'Widget', 'Container']);
            if (changes.length > 0) {
                changes_1.insert(tree, sourceFile.fileName, changes);
                filesVersions.set(sourceFile.fileName, (filesVersions.get(sourceFile.fileName) || 0) + 1);
                changes_1.insert(tree, sourceFile.fileName, handlePropertyValue(typescript_1.getUpdatedSourceFileFromTree(tree, sourceFile), webSdk.text));
            }
        }
        yield updatePeerDepsOfFoundationToVersion5(tree);
    }), manualProcess);
}
exports.default = default_1;
function handlePropertyValue(sourceFile, nameSpaceName) {
    const changes = [];
    const fileName = sourceFile.fileName;
    const setPropertyValueNode = (node) => {
        if (ts.isImportSpecifier(node) && node.name.text === 'PropertyValue') {
            changes.push(new ng_utils_1.InsertChange(fileName, node.name.getStart(), 'Property as '));
        }
        else {
            ts.forEachChild(node, setPropertyValueNode);
        }
    };
    sourceFile.forEachChild(setPropertyValueNode);
    const setPropertyValueNodeForNameSpace = (node) => {
        if (ts.isQualifiedName(node) && node.left.getText() === nameSpaceName && node.right.text === 'PropertyValue') {
            changes.push(new ng_utils_1.ReplaceChange(fileName, node.right.getStart() - 1, node.right.text, 'Property'));
        }
        else {
            ts.forEachChild(node, setPropertyValueNodeForNameSpace);
        }
    };
    sourceFile.forEachChild(setPropertyValueNodeForNameSpace);
    return changes;
}
function updatePeerDepsOfFoundationToVersion5(tree) {
    return __awaiter(this, void 0, void 0, function* () {
        const workspace = yield ng_utils_1.getWorkspace(tree);
        for (const project of workspace.projects.values()) {
            const packageJsonPath = core_1.join(core_1.normalize(project.root), 'package.json');
            const buffer = tree.read(packageJsonPath);
            if (buffer === null) {
                continue;
            }
            const packageJson = buffer.toString('utf-8');
            const parsedJson = core_1.parseJsonAst(packageJson);
            if (parsedJson.kind !== 'object') {
                continue;
            }
            const foundationVersionChange = updateFoundationAngPeerDependency(packageJsonPath, parsedJson);
            if (!foundationVersionChange) {
                continue;
            }
            changes_1.insert(tree, packageJsonPath, [foundationVersionChange]);
        }
    });
}
function updateFoundationAngPeerDependency(packageJsonPath, parsedJson) {
    const peerDependencies = ng_utils_1.findPropertyInAstObject(parsedJson, 'peerDependencies');
    if (!peerDependencies || peerDependencies.kind !== 'object') {
        return;
    }
    const foundationProp = ng_utils_1.findPropertyInAstObject(peerDependencies, '@backbase/foundation-ang');
    if (!foundationProp || foundationProp.kind !== 'string') {
        return;
    }
    return new ng_utils_1.ReplaceChange(packageJsonPath, foundationProp.start.offset, foundationProp.value, '^5.0.0');
}
//# sourceMappingURL=5.0.0.js.map