import { ContentUpdateUnsubscribe, PortalContent, ContentItem, ImageItem, DocumentItem, StructuredContentItem, ImageContentItem } from '@backbase/lib-bb-page-bootstrap-cdn';
/**
 * PortalContentMock class which functions as a mock content store
 *
 * @usageNotes
 * ```typescript
 * // Store content in mock content store and get contentRef back
 * const contentRef = PortalContentMock.addImageContent({ url: '/image.png' });
 *
 * // use PortalContentMock to get content from the mock content store
 * const portalContent = new PortalContentMock();
 * portalContent.getContent(contentRef);
 * ```
 */
export declare class PortalContentMock implements PortalContent {
    private static id;
    private static readonly contentMockMap;
    private static readonly contentItemMockMap;
    /**
     * Add image item to mock content store
     * @param content image item
     * @return content ref
     */
    static addImageContent(content: Partial<ImageItem>, contentRef?: string): string;
    /**
     * Add document item to mock content store
     * @param content document item
     * @return content ref
     */
    static addDocumentContent(content: Partial<DocumentItem>, contentRef?: string): string;
    /**
     * Add structured content item to mock content store
     * @param typeDefinitionName type definition name of the strucutred content item
     * @param content structured content (JSON)
     * @return content ref
     */
    static addStructuredContent<T = {
        [key: string]: any;
    }>(typeDefinitionName: string, content: T, contentRef?: string): string;
    /**
     * Add plain text content item to mock content store
     * @param content plain text
     * @return content ref
     */
    static addPlainTextContent(content: string, contentRef?: string): string;
    /**
     * Add rich text content item to mock content store
     * @param content rich text (HTML)
     * @return content ref
     */
    static addRichTextContent(content: string, contentRef?: string): string;
    private static addContentItem;
    private static getContentRef;
    get(contentRef: string): Promise<ImageContentItem | StructuredContentItem>;
    getContent<T>(contentRef: string): Promise<T>;
    getContentItem<T extends ContentItem<any>>(contentRef: string): Promise<T>;
    subscribeContentUpdate(): ContentUpdateUnsubscribe;
    subscribeContentItemUpdate(): ContentUpdateUnsubscribe;
}
