import { InjectionToken } from '@angular/core';
import { Countdown, GoToLoginPage, HttpInterceptors, Login, Logout, Navigation, PortalContent, PropertyResolver, Reauthenticate, Refresh, RefreshSession, TimeToLive } from '@backbase/lib-bb-page-bootstrap-cdn';
import { AuthEvents } from '../auth-events';
import { WebSdkServiceMap } from '../providers';
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const HTTP_INTERCEPTORS: InjectionToken<HttpInterceptors>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const REFRESH: InjectionToken<Refresh>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const NAVIGATION: InjectionToken<Navigation>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const PORTAL_CONTENT: InjectionToken<PortalContent>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare const AUTH_EVENTS: InjectionToken<AuthEvents>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface LoginService {
    /**
     * @description method to login
     * @param {string} username
     * @param {string} password
     * @return {Promise} promise that resolves when user is logged in
     */
    login: Login;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export interface LogoutService {
    /**
     * @description method to logout
     * @param {string} redirectUri url for redirecting to after logout is done
     * @return {Promise} promise that is resolved when logout is done
     */
    logout: Logout;
    /**
     * @description method to redirect to login page set in auth configuration
     * @param {string} redirectUri parameter used by hybrid authentication.
     *                  It is passed to Keycloak so when user gets authenticated on IAM server,
     *                  that server redirects to this redirectUri.
     *                  Usually redirectUri is the url of the page user is redirected from, or landing page of the portal.
     * @return {void}
     */
    goToLoginPage: GoToLoginPage;
}
/**
 *
 * @deprecated Will be removed in v7.0.0
 *
 * @description
 * Token to get instance of LoginService.
 * Example of the use case: to implement custom login widget.
 *
 * @example
 * constructor(@Inject(LOGIN) private loginService: LoginService) {}
 */
export declare const LOGIN: InjectionToken<LoginService>;
/**
 *
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of LogoutService.
 * Examples of the use cases: to implement custom logout widget or to logout user based on some custom logic.
 *
 * @example
 * constructor(@Inject(LOGOUT) private logoutService: LogoutService) {}
 */
export declare const LOGOUT: InjectionToken<LogoutService>;
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of SessionService.
 * Examples of the use cases:
 * - to register custom countdown to show modal before session is over
 * - to refresh session.
 *
 * @example
 * constructor(@Inject(SESSION) private sessionService: SessionService) {}.
 */
export declare const SESSION: InjectionToken<SessionService>;
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of ReauthenticateService.
 * Examples of the use cases:
 * - to reauthenticate a user.
 *
 * @example
 * constructor(@Inject(REAUTHENTICATE) private reauthenticateService: ReauthenticateService) {}.
 */
export declare const REAUTHENTICATE: InjectionToken<ReauthenticateService>;
export declare type CountdownRegister = (countdown: Countdown) => () => void;
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get lean-client services map directly.
 * Used internally by foundation-ang to register lean-client services into the angular app.
 */
export interface ReauthenticateService {
    /**
     * @description method to reauthenticate a user
     * @param {string} scope identifies the resource or permission that the user is consenting to.
     * @param {string} acrValues a space-delimited list of acceptable levels of assurance.
     *                  Can be used by the IdP to steer the authentication flow.
     * @param {ReauthConfig} [reauthConfig] A configuration allowing the passing of optional parameters.
     * @return {Promise}
     */
    reauthenticate: Reauthenticate;
}
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Service to register custom countdown callbacks, to refresh session, to get time to live of the session.
 *
 * @example
 * export class CountdownService {
 *   constructor(
 *     @Inject(SESSION) private sessionService: SessionService,
 *     private modalService: ModalService,
 *   ) {
 *     this.registerCountdown();
 *   }
 *
 *   private registerCountdown() {
 *     this.sessionService.registerCountdown({
 *       start: () => {
 *         this.modalService.open({
 *           header: 'Session notification',
 *           message: 'Your session will expire soon',
 *           okHandler: () => this.sessionService.refresh()
 *         });
 *       },
 *       end: () => {
 *         this.modalService.open('session', {
 *           header: 'Session notification',
 *           question: 'Your session is expired! Do you want to log in?',
 *           okHandler: () => this.sessionService.refresh(),
 *         });
 *       },
 *       reset: () => {
 *         this.modalService.close();
 *       },
 *       duration: 20, //seconds
 *     });
 *   }
 * }
 */
export interface SessionService {
    /**
     * @description Refreshes session
     * @return {Promise} promise that will be resolved when session is refreshed
     */
    refresh: RefreshSession;
    /**
     * @description Registers countdown callbacks.
     * @param {Countdown} countdown
     */
    registerCountdown: CountdownRegister;
    /**
     * @description Returns time to live of the session
     * @return {number} time to live of the session (seconds)
     */
    timeToLive: TimeToLive;
    /**
     * @description Whether the user is being impersonated
     */
    isImpersonated: boolean;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function loginFactory(webSdkServiceMap?: WebSdkServiceMap): LoginService;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function logoutFactory(webSdkServiceMap?: WebSdkServiceMap): LogoutService;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function sessionFactory(webSdkServiceMap?: WebSdkServiceMap): SessionService;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function reauthenticateFactory(webSdkServiceMap?: WebSdkServiceMap): ReauthenticateService;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function getAuthEvents(webSdkServices: WebSdkServiceMap): AuthEvents;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function refreshFactory(webSdkServiceMap?: WebSdkServiceMap): Refresh | undefined;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function httpInterceptorsFactory(webSdkServiceMap?: WebSdkServiceMap): HttpInterceptors | undefined;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare function setConditionsFactory(webSdkServiceMap?: WebSdkServiceMap): Pick<PropertyResolver, 'resolveEntitlements'> | undefined;
