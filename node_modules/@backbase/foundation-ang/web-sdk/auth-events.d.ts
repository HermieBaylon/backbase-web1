import { Observable } from 'rxjs';
import { BackbaseAuth as BackbaseAuthCdn, Pubsub } from '@backbase/lib-bb-page-bootstrap-cdn';
export interface AccessToken {
    raw: string;
    parsed: any;
}
export interface AuthSuccess {
    currentAccessToken: AccessToken;
}
export interface AuthEvents {
    /**
     * Emits once after authorisation is initiated, then completes.
     *
     * If the user is authorised, emits with AccessToken.
     *
     * If the user is not authorised, emits with undefined;
     */
    init: Observable<AuthSuccess | undefined>;
    /**
     * Emits when a user is successfully authenticated.
     */
    success: Observable<AuthSuccess>;
    /**
     * Emits when the session ends.
     */
    end: Observable<void>;
    /**
     * Emits if there was an error during authentication.
     */
    error: Observable<void>;
}
export interface BackbaseAuth extends BackbaseAuthCdn {
    initToken: Promise<AuthSuccess | undefined>;
}
/**
 * We wrap the pubsub events from web-sdk in streams.
 *
 * The main reason to do this is to ensure that we are subscribing to these
 * events *before* they emit. We'll then ensure they replay
 */
export declare const wrapAuthEvents: (auth: BackbaseAuth, pubsub: Pubsub) => AuthEvents;
