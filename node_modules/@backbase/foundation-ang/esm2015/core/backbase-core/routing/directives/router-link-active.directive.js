import { ContentChildren, Directive, ElementRef, Input, Renderer2, Optional, } from '@angular/core';
import { RouterLinkDirective, RouterLinkWithHrefDirective } from './router-link.directive';
import { Router, NavigationEnd } from '@angular/router';
/**
 *
 * @description
 *
 * Lets you add a CSS class and `aria-current` attribute to an element when the link's route becomes active.
 *
 * This directive lets you add a CSS class and `aria-current` attribute to an element when the link's route
 * becomes active.
 *
 * Consider the following example:
 *
 * ```
 * <a bbRouterLink="/user/bob" bbRouterLinkActive="active-link">Bob</a>
 * ```
 *
 * When the url is either '/user' or '/user/bob', the active-link class will
 * be added to the `a` tag. If the url changes, the class Will be removed.
 *
 * You can set more than one class, as follows:
 *
 * ```
 * <a bbRouterLink="/user/bob" bbRouterLinkActive="class1 class2">Bob</a>
 * <a bbRouterLink="/user/bob" [bbRouterLinkActive]="['class1', 'class2']">Bob</a>
 * ```
 *
 * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
 * only when the url matches the link exactly.
 *
 * ```
 * <a bbRouterLink="/user/bob" bbRouterLinkActive="active-link" [bbRouterLinkActiveOptions]="{exact:
 * true}">Bob</a>
 * ```
 *
 * You can configure RouterLinkActive to set `aria-current` attribute for all links. If option is defined,
 * value will be added to the active link and `aria-current="false"` to the other links.
 *
 * ```
 * <a bbRouterLink="/user/bob" bbRouterLinkActive="active-link" [bbRouterLinkActiveOptions]="{ariaCurrent: 'page'}">
 *  Bob
 * </a>
 * ```
 *
 * You can assign the RouterLinkActive instance to a template variable and directly check
 * the `isActive` status.
 * ```
 * <a bbRouterLink="/user/bob" bbRouterLinkActive #rla="bbRouterLinkActive">
 *   Bob {{ rla.isActive ? '(already open)' : ''}}
 * </a>
 * ```
 *
 * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
 *
 * ```
 * <div bbRouterLinkActive="active-link" [bbRouterLinkActiveOptions]="{exact: true}">
 *   <a bbRouterLink="/user/jim">Jim</a>
 *   <a bbRouterLink="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * This will set the active-link class on the div tag if the url is either '/user/jim' or
 * '/user/bob'.
 *
 * @ngModule RouterModule
 *
 */
export class RouterLinkActiveDirective {
    constructor(router, element, renderer, link, linkWithHref) {
        this.router = router;
        this.element = element;
        this.renderer = renderer;
        this.link = link;
        this.linkWithHref = linkWithHref;
        this.classes = [];
        this.isActive = false;
        this.bbRouterLinkActiveOptions = {};
        this.subscription = router.events.subscribe((s) => {
            if (s instanceof NavigationEnd) {
                this.update();
            }
        });
    }
    ngAfterContentInit() {
        if (!this.links || !this.linksWithHrefs)
            return;
        this.links.changes.subscribe(_ => this.update());
        this.linksWithHrefs.changes.subscribe(_ => this.update());
        this.update();
    }
    set bbRouterLinkActive(data) {
        const classes = Array.isArray(data) ? data : data.split(' ');
        this.classes = classes.filter(c => !!c);
    }
    ngOnChanges() {
        this.update();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    updateClasses(hasActiveLinks) {
        this.classes.forEach(c => {
            if (hasActiveLinks) {
                this.renderer.addClass(this.element.nativeElement, c);
            }
            else {
                this.renderer.removeClass(this.element.nativeElement, c);
            }
        });
    }
    updateAria(hasActiveLinks) {
        const ariaAttr = 'aria-current';
        if (this.bbRouterLinkActiveOptions.ariaCurrent) {
            this.renderer.setAttribute(this.element.nativeElement, ariaAttr, hasActiveLinks ? this.bbRouterLinkActiveOptions.ariaCurrent : 'false');
        }
        else {
            this.renderer.removeAttribute(this.element.nativeElement, ariaAttr);
        }
    }
    update() {
        if (!this.links || !this.linksWithHrefs || !this.router.navigated)
            return;
        this.hasActiveLinks().then(hasActiveLinks => {
            if (this.isActive !== hasActiveLinks) {
                this.isActive = hasActiveLinks;
                this.updateAria(hasActiveLinks);
                this.updateClasses(hasActiveLinks);
            }
        });
    }
    isLinkActive(router) {
        return (link) => link.urlTree.then(urlTree => router.isActive(urlTree, !!this.bbRouterLinkActiveOptions.exact));
    }
    hasActiveLinks() {
        if (!this.links || !this.linksWithHrefs)
            return Promise.resolve(false);
        return Promise.all([
            this.link ? this.isLinkActive(this.router)(this.link) : Promise.resolve(false),
            this.linkWithHref ? this.isLinkActive(this.router)(this.linkWithHref) : Promise.resolve(false),
            ...this.links.map(this.isLinkActive(this.router)),
            ...this.linksWithHrefs.map(this.isLinkActive(this.router)),
        ]).then((liveActives) => liveActives.some(a => a));
    }
}
RouterLinkActiveDirective.decorators = [
    { type: Directive, args: [{
                selector: '[bbRouterLinkActive]',
                exportAs: 'bbRouterLinkActive',
            },] }
];
RouterLinkActiveDirective.ctorParameters = () => [
    { type: Router },
    { type: ElementRef },
    { type: Renderer2 },
    { type: RouterLinkDirective, decorators: [{ type: Optional }] },
    { type: RouterLinkWithHrefDirective, decorators: [{ type: Optional }] }
];
RouterLinkActiveDirective.propDecorators = {
    links: [{ type: ContentChildren, args: [RouterLinkDirective, { descendants: true },] }],
    linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHrefDirective, { descendants: true },] }],
    bbRouterLinkActiveOptions: [{ type: Input }],
    bbRouterLinkActive: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,