import { Directive, HostBinding, Input, HostListener, Attribute, Renderer2, ElementRef, } from '@angular/core';
import { Router, ActivatedRoute, NavigationEnd } from '@angular/router';
import { LocationStrategy } from '@angular/common';
import { RouterService } from '../navigation/router.service';
const toCommandsArray = (commands) => {
    if (commands != null) {
        return Array.isArray(commands) ? commands : [commands];
    }
    else {
        return [];
    }
};
const ɵ0 = toCommandsArray;
export class RouterLinkWithHrefDirective {
    constructor(router, bbRouter, locationStrategy, el, renderer) {
        this.router = router;
        this.bbRouter = bbRouter;
        this.locationStrategy = locationStrategy;
        this.el = el;
        this.renderer = renderer;
        this.commands = [];
        this.subscriptions = [
            router.events.subscribe(s => {
                if (s instanceof NavigationEnd) {
                    this.updateTargetUrlAndHref();
                }
            }),
        ];
    }
    set bbRouterLink(commands) {
        this.commands = toCommandsArray(commands);
    }
    ngOnChanges() {
        this.updateTargetUrlAndHref();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(s => s.unsubscribe());
    }
    onClick(button, ctrlKey, metaKey, shiftKey) {
        if (button !== 0 || ctrlKey || metaKey || shiftKey) {
            return true;
        }
        if (typeof this.target === 'string' && this.target !== '_self') {
            return true;
        }
        const extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
        };
        this.urlTree.then(urlTree => {
            this.router.navigateByUrl(this.router.serializeUrl(urlTree), extras);
        });
        return false;
    }
    updateTargetUrlAndHref() {
        this.urlTree.then(urlTree => {
            this.renderer.setAttribute(this.el.nativeElement, 'href', this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(urlTree)));
        });
    }
    get urlTree() {
        return this.bbRouter.createUrlTree(this.commands, Object.assign(Object.assign({ queryParams: this.queryParams, fragment: this.fragment }, (attrBoolValue(this.preserve) ? { queryParamsHandling: 'preserve' } : {})), { queryParamsHandling: this.queryParamsHandling, preserveFragment: attrBoolValue(this.preserveFragment) }));
    }
}
RouterLinkWithHrefDirective.decorators = [
    { type: Directive, args: [{ selector: 'a[bbRouterLink]' },] }
];
RouterLinkWithHrefDirective.ctorParameters = () => [
    { type: Router },
    { type: RouterService },
    { type: LocationStrategy },
    { type: ElementRef },
    { type: Renderer2 }
];
RouterLinkWithHrefDirective.propDecorators = {
    target: [{ type: HostBinding, args: ['attr.target',] }, { type: Input }],
    queryParams: [{ type: Input }],
    fragment: [{ type: Input }],
    queryParamsHandling: [{ type: Input }],
    preserveFragment: [{ type: Input }],
    skipLocationChange: [{ type: Input }],
    replaceUrl: [{ type: Input }],
    bbRouterLink: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] }]
};
export class RouterLinkDirective {
    constructor(router, route, tabIndex, renderer, el, bbRouter) {
        this.router = router;
        this.route = route;
        this.bbRouter = bbRouter;
        this.commands = [];
        if (tabIndex == null) {
            renderer.setAttribute(el.nativeElement, 'tabindex', '0');
        }
    }
    set bbRouterLink(commands) {
        this.commands = toCommandsArray(commands);
    }
    onClick() {
        const extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
        };
        this.urlTree.then(urlTree => {
            this.router.navigateByUrl(this.router.serializeUrl(urlTree), extras);
        });
        return true;
    }
    get urlTree() {
        return this.bbRouter.createUrlTree(this.commands, Object.assign(Object.assign({ relativeTo: this.route, queryParams: this.queryParams, fragment: this.fragment }, (attrBoolValue(this.preserve) ? { queryParamsHandling: 'preserve' } : {})), { queryParamsHandling: this.queryParamsHandling, preserveFragment: attrBoolValue(this.preserveFragment) }));
    }
}
RouterLinkDirective.decorators = [
    { type: Directive, args: [{ selector: ':not(a)[bbRouterLink]' },] }
];
RouterLinkDirective.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: RouterService }
];
RouterLinkDirective.propDecorators = {
    queryParams: [{ type: Input }],
    fragment: [{ type: Input }],
    queryParamsHandling: [{ type: Input }],
    preserveFragment: [{ type: Input }],
    skipLocationChange: [{ type: Input }],
    replaceUrl: [{ type: Input }],
    bbRouterLink: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
function attrBoolValue(s) {
    return s === '' || !!s;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,