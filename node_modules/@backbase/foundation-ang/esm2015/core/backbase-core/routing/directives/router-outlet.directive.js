import { Directive, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef, Output, EventEmitter, } from '@angular/core';
import { RouterOutlet, ChildrenOutletContexts, Router, PRIMARY_OUTLET } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { RouterService } from '../navigation/router.service';
const OUTLET_IS_NOT_INITIALIZED_ERROR = 'Outlet is not instantiated';
/**
 * Includes the component associated with the current Route
 */
export class RouterOutletDirective {
    constructor(childrenOutletContexts, componentFactoryResolver, vcRef, cdRef, router, bbRouter) {
        this.childrenOutletContexts = childrenOutletContexts;
        this.componentFactoryResolver = componentFactoryResolver;
        this.vcRef = vcRef;
        this.cdRef = cdRef;
        this.router = router;
        this.bbRouter = bbRouter;
        this.destroy$ = new Subject();
        /**
         * A router outlet will emit an activate event any time a new component
         * is being instantiated.
         */
        // eslint-disable-next-line  @angular-eslint/no-output-rename
        this.activateEvents = new EventEmitter();
        /**
         * A router outlet will emit a deactivate event when the route component
         * is being destroyed.
         */
        // eslint-disable-next-line  @angular-eslint/no-output-rename
        this.deactivateEvents = new EventEmitter();
    }
    get name() {
        return this.nameValue || PRIMARY_OUTLET;
    }
    get isActivated() {
        return this.outlet ? this.outlet.isActivated : false;
    }
    get component() {
        if (!this.outlet) {
            throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);
        }
        return this.outlet.component;
    }
    get activatedRoute() {
        if (!this.outlet) {
            throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);
        }
        return this.outlet.activatedRoute;
    }
    get activatedRouteData() {
        if (!this.outlet) {
            return {};
        }
        return this.outlet.activatedRouteData;
    }
    destroy() {
        if (this.nameValue) {
            return this.removeOutletFromUrl()
                .then(() => this.router.navigate(['/']))
                .then(() => this.destroyChild());
        }
        else {
            return Promise.resolve();
        }
    }
    destroyChild() {
        if (this.outlet) {
            this.outlet.ngOnDestroy();
        }
    }
    removeOutletFromUrl() {
        // @todo: It's not possible to remove an outlet from the navigation.
        // @see: https://github.com/angular/angular/issues/15338 (this workaround is from there)
        return this.nameValue ? this.router.navigate([{ outlets: { [this.nameValue]: null } }]) : Promise.resolve(true);
    }
    ngOnInit() {
        this.bbRouter.outletName.pipe(takeUntil(this.destroy$)).subscribe(outletName => {
            this.destroy().then(() => {
                this.nameValue = outletName;
                this.outlet = new RouterOutlet(this.childrenOutletContexts, this.vcRef, this.componentFactoryResolver, this.name, this.cdRef);
                this.outlet.activateEvents.subscribe((event) => {
                    this.activateEvents.next(event);
                });
                this.outlet.deactivateEvents.subscribe((event) => {
                    this.deactivateEvents.next(event);
                });
                // Doesn't implement the `RouterOutlet` interface due to private members
                this.childrenOutletContexts.onChildOutletCreated(this.name, this);
                this.outlet.ngOnInit();
            });
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.destroyChild();
        this.childrenOutletContexts.onChildOutletDestroyed(this.name);
    }
    attach(ref, activatedRoute) {
        if (!this.outlet) {
            throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);
        }
        return this.outlet.attach(ref, activatedRoute);
    }
    detach() {
        if (!this.outlet) {
            throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);
        }
        return this.outlet.detach();
    }
    deactivate() {
        if (this.outlet) {
            this.outlet.deactivate();
        }
    }
    activateWith(activatedRoute, resolver) {
        if (!this.outlet) {
            throw new Error(OUTLET_IS_NOT_INITIALIZED_ERROR);
        }
        // Not sure how hacky this is - forcefully deactivating the outlet before reactivating it.
        this.outlet.deactivate();
        return this.outlet.activateWith(activatedRoute, resolver);
    }
}
RouterOutletDirective.decorators = [
    { type: Directive, args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: 'bb-router-outlet',
                exportAs: 'bbOutlet',
            },] }
];
RouterOutletDirective.ctorParameters = () => [
    { type: ChildrenOutletContexts },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef },
    { type: Router },
    { type: RouterService }
];
RouterOutletDirective.propDecorators = {
    activateEvents: [{ type: Output, args: ['activate',] }],
    deactivateEvents: [{ type: Output, args: ['deactivate',] }]
};
//# sourceMappingURL=data:application/json;base64,