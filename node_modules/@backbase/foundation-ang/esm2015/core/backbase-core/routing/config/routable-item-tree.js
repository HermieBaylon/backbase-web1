import { combineTree } from '../../models/tree';
import { createRoutingStrategy } from '../strategies/routing-decorators';
import { propertiesByPrefix } from '../../../web-sdk/properties';
import { combineLatest, from, of } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { JourneyComponent } from '../../rendering/chrome/journey.component';
const CUSTOM_DATA_PREFIX = 'route.data.custom.';
export var RouteModelProperty;
(function (RouteModelProperty) {
    /**
     * Each child of a RoutableContainer may have a property for "route",
     * else the route will be the index of the child plus 1.
     */
    RouteModelProperty["ROUTE"] = "route";
    /**
     * RoutableContainers and RoutableWidget can have an optional "outletName"
     * property to dynamically set the outlet name for the bb-router-outlet.
     */
    RouteModelProperty["OUTLET"] = "outletName";
    /**
     * `CanActivate` route guards can be added to generated child routes by including a
     * `route.canActivate` property in the child's model. These guards must be registered with the
     * `RouteGuardsRegistryService` via the `guards` option passed to `BackbaseCore.withConfig`.
     */
    RouteModelProperty["CAN_ACTIVATE"] = "route.canActivate";
    /**
     * `CanActivateChild` route guards can be added to generated routes by including a
     * `route.canActivateChild` property in the item's model. These guards must be registered with the
     * `RouteGuardsRegistryService` via the `guards` option passed to `BackbaseCore.withConfig`.
     */
    RouteModelProperty["CAN_ACTIVATE_CHILD"] = "route.canActivateChild";
    /**
     * RoutableContainer's can have a "disableDefault" property which will disable the
     * default behaviour of containers where an empty path route will be created to
     * redirect to the first child's route.
     */
    RouteModelProperty["DISABLE_DEFAULT"] = "disableDefault";
})(RouteModelProperty || (RouteModelProperty = {}));
const getRoutingStrategy = (itemRegistry, item) => {
    const loadModuleFunction = itemRegistry.getModuleLoader(item.ɵclassId);
    if (loadModuleFunction) {
        return of(createJourneyStrategy(item, loadModuleFunction));
    }
    const component = itemRegistry.getComponentValue(item.ɵclassId);
    if (component) {
        return of(createRoutingStrategy(component));
    }
    return from(itemRegistry.getComponent(item.ɵclassId)).pipe(map(createRoutingStrategy), startWith(undefined));
};
const ɵ0 = getRoutingStrategy;
const getCanActivateRouteGuards = (guardRegistry, guards) => guards
    .map(guardName => guardRegistry.canActivate.get(guardName))
    .filter((guard) => guard !== undefined);
const ɵ1 = getCanActivateRouteGuards;
const getCanActivateChildRouteGuards = (guardRegistry, guards) => guards
    .map(guardName => guardRegistry.canActivateChild.get(guardName))
    .filter((guard) => guard !== undefined);
const ɵ2 = getCanActivateChildRouteGuards;
const toRoutableItem = (item, routeGuards, routeProperties, routingStrategy) => {
    return {
        name: item.name,
        routingStrategy,
        route: routeProperties[RouteModelProperty.ROUTE],
        outlet: routeProperties[RouteModelProperty.OUTLET],
        canActivate: getCanActivateRouteGuards(routeGuards, (routeProperties[RouteModelProperty.CAN_ACTIVATE] || [])),
        canActivateChild: getCanActivateChildRouteGuards(routeGuards, (routeProperties[RouteModelProperty.CAN_ACTIVATE_CHILD] || [])),
        hasDefault: routingStrategy ? true !== routeProperties[RouteModelProperty.DISABLE_DEFAULT] : undefined,
        routeData: propertiesByPrefix(CUSTOM_DATA_PREFIX, routeProperties),
    };
};
const ɵ3 = toRoutableItem;
// @fixme: don't re-emit unless properties we care about change
const routableItem = (itemRegistry, routeGuards) => (item) => combineLatest([item.properties, getRoutingStrategy(itemRegistry, item)]).pipe(map(([routeProperties, routingStrategy]) => toRoutableItem(item, routeGuards, routeProperties, routingStrategy)));
const ɵ4 = routableItem;
function createJourneyStrategy(item, loadChildren) {
    return {
        getRoutes() {
            return [
                {
                    path: '',
                    component: JourneyComponent,
                    data: { item },
                    loadChildren,
                },
            ];
        },
    };
}
export const routableItemTree = (itemRegistry, routeGuards, modelTree) => combineTree(modelTree.map(routableItem(itemRegistry, routeGuards)));
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,