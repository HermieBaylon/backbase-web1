import { PRIMARY_OUTLET } from '@angular/router';
import { OutletCollisionComponent } from '../components/outlet-collision.component';
import { flatMap } from '../../models/array';
import { OutletCollision } from './outlet-map';
export const isRoutable = (itemRoutes) => itemRoutes.outletName !== undefined;
const isAbsolute = (routePath) => routePath.startsWith('/');
const ɵ0 = isAbsolute;
const isMatchingRedirect = (redirectTo) => (route) => route.path !== undefined && route.path === redirectTo;
const ɵ1 = isMatchingRedirect;
/**
 * Applies an outlet name to a route
 * @param outlet
 * @param route
 * @param oldRoutes
 */
const namedOutletRoute = (outlet, route, oldRoutes) => {
    // Add outlet name
    let newRoute = route.component ? Object.assign(Object.assign({}, route), { outlet }) : route;
    // Convert redirects to duplicated routes (can't redirect to a named outlet easily).
    if (newRoute.redirectTo !== undefined && !isAbsolute(newRoute.redirectTo)) {
        // If it's not absolute, we try and make it a default route instead (no path)
        const routeTo = oldRoutes.find(isMatchingRedirect(newRoute.redirectTo));
        if (!routeTo) {
            // Coudn't find a route that they're redirecting too, so we remove the route, as it won't work.
            throw new Error(`Couldn't redirect to ${newRoute.redirectTo}`);
        }
        newRoute = Object.assign(Object.assign({}, routeTo), { // @fixme: child routes with empty path redirects won't actually do the redirect
            outlet, path: '' });
    }
    return newRoute;
};
const ɵ2 = namedOutletRoute;
const applyOutletName = (item, outlet, routes) => {
    if (outlet === PRIMARY_OUTLET) {
        return routes;
    }
    else if (outlet instanceof OutletCollision) {
        return [
            {
                path: '',
                component: OutletCollisionComponent,
                outlet: outlet.outletName,
                data: {
                    item: item.name,
                    collisionWith: outlet.collisionWith,
                },
            },
        ];
    }
    return routes.map((route, _, oldRoutes) => namedOutletRoute(`${outlet}`, route, oldRoutes));
};
const ɵ3 = applyOutletName;
const mapItemToRoutes = (outlets) => (item, children, childRoutes) => {
    const outletName = outlets.get(item.name);
    const routes = item.routingStrategy ? item.routingStrategy.getRoutes(item, children, childRoutes) : undefined;
    if (outletName === undefined || routes === undefined) {
        // Flatten non-routable items
        return {
            item: item.name,
            outletName: undefined,
            routes: flatMap(childRoute => childRoute.routes, childRoutes),
        };
    }
    return {
        item: item.name,
        routes: applyOutletName(item, outletName, routes),
        outletName,
    };
};
const ɵ4 = mapItemToRoutes;
/**
 * Create a tree of the components with routes. This is a direct map of the
 * component tree. Each node in the tree holds all routes for the nodes beneath
 * it. So the root node in the returned tree will hold all the routes for the
 * entire component tree.
 */
export const routingTree = (tree, outlets) => tree.map(mapItemToRoutes(outlets));
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,