import { Injectable } from '@angular/core';
import { map, switchMap, shareReplay, distinctUntilChanged, withLatestFrom } from 'rxjs/operators';
import { ӨRootContainerService } from '../../models/root-container.service';
import { OutletCollision, outletMap } from './outlet-map';
import { RouteGuardsRegistryService } from '../guards/route-guards-registry.service';
import { ItemRegistryService } from '../../rendering/item-registry.service';
import { routableItemTree } from './routable-item-tree';
import { routingTree } from './routing-tree';
import { AbstractRouterConfigService } from './abstract-router-config.service';
import * as i0 from "@angular/core";
import * as i1 from "../../rendering/item-registry.service";
import * as i2 from "../guards/route-guards-registry.service";
import * as i3 from "../../models/root-container.service";
/**
 * @deprecated Will be removed in v7.0.0
 */
export class RouterConfigService extends AbstractRouterConfigService {
    constructor(itemRegistry, routeGuardsRegistry, rootContainer) {
        super();
        this.itemRegistry = itemRegistry;
        this.routeGuardsRegistry = routeGuardsRegistry;
        this.rootContainer = rootContainer;
        this.routableItemTree = this.rootContainer.model.pipe(switchMap(model => model.toTree()), switchMap(model => routableItemTree(this.itemRegistry, this.routeGuardsRegistry, model)), shareReplay(1));
        this.outlets = this.routableItemTree.pipe(map(outletMap), shareReplay(1));
        /**
         * Convert the component tree to a routing tree
         *
         * @internal
         */
        this.ɵrouteTree = this.outlets.pipe(withLatestFrom(this.routableItemTree), map(([outlets, tree]) => routingTree(tree, outlets)), shareReplay(1));
        /**
         * The dynamically generated Angular routes for the SPA, based on the model of the app.
         */
        this.routes = this.ɵrouteTree.pipe(map((routeTrees) => routeTrees.value.routes), shareReplay(1));
    }
    /**
     * Get the router-outlet name for the given item in the model tree.
     *
     * @internal
     */
    ɵitemOutletName(item) {
        return this.outlets.pipe(map(outlets => outlets.get(item.name)), map(outlet => (outlet instanceof OutletCollision ? outlet.outletName : outlet)), distinctUntilChanged());
    }
}
RouterConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RouterConfigService_Factory() { return new RouterConfigService(i0.ɵɵinject(i1.ItemRegistryService), i0.ɵɵinject(i2.RouteGuardsRegistryService), i0.ɵɵinject(i3.ӨRootContainerService)); }, token: RouterConfigService, providedIn: "root" });
RouterConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
RouterConfigService.ctorParameters = () => [
    { type: ItemRegistryService },
    { type: RouteGuardsRegistryService },
    { type: ӨRootContainerService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZS9zcmMvYmFja2Jhc2UtY29yZS9yb3V0aW5nL2NvbmZpZy9yb3V0ZXItY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGVBQWUsRUFBYyxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFFckYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDNUUsT0FBTyxFQUFnQixnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3RFLE9BQU8sRUFBc0IsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7O0FBRS9FOztHQUVHO0FBSUgsTUFBTSxPQUFPLG1CQUFvQixTQUFRLDJCQUEyQjtJQStCbEUsWUFDbUIsWUFBaUMsRUFDakMsbUJBQStDLEVBQy9DLGFBQW9DO1FBRXJELEtBQUssRUFBRSxDQUFDO1FBSlMsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBNEI7UUFDL0Msa0JBQWEsR0FBYixhQUFhLENBQXVCO1FBakN0QyxxQkFBZ0IsR0FBbUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUMvRixTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFDbEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFDeEYsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7UUFFZSxZQUFPLEdBQXdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQ3hGLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFDZCxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztRQUVGOzs7O1dBSUc7UUFDTSxlQUFVLEdBQW1DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUNyRSxjQUFjLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQ3JDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFzQixFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUN4RSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztRQUVGOztXQUVHO1FBQ0ksV0FBTSxHQUF1QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDdEQsR0FBRyxDQUFDLENBQUMsVUFBOEIsRUFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFDeEUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7SUFRRixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGVBQWUsQ0FBQyxJQUFlO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ3RCLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxZQUFZLGVBQWUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDL0Usb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztJQUNKLENBQUM7Ozs7WUFyREYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFWUSxtQkFBbUI7WUFGbkIsMEJBQTBCO1lBRjFCLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEl0ZW1Nb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9pdGVtLW1vZGVsJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwLCBzaGFyZVJlcGxheSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsg06hSb290Q29udGFpbmVyU2VydmljZSB9IGZyb20gJy4uLy4uL21vZGVscy9yb290LWNvbnRhaW5lci5zZXJ2aWNlJztcbmltcG9ydCB7IE91dGxldENvbGxpc2lvbiwgT3V0bGV0TmFtZSwgb3V0bGV0TWFwIH0gZnJvbSAnLi9vdXRsZXQtbWFwJztcbmltcG9ydCB7IFJvdXRlR3VhcmRzUmVnaXN0cnlTZXJ2aWNlIH0gZnJvbSAnLi4vZ3VhcmRzL3JvdXRlLWd1YXJkcy1yZWdpc3RyeS5zZXJ2aWNlJztcbmltcG9ydCB7IFRyZWUgfSBmcm9tICcuLi8uLi9tb2RlbHMvdHJlZSc7XG5pbXBvcnQgeyBJdGVtUmVnaXN0cnlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcmVuZGVyaW5nL2l0ZW0tcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBSb3V0YWJsZUl0ZW0sIHJvdXRhYmxlSXRlbVRyZWUgfSBmcm9tICcuL3JvdXRhYmxlLWl0ZW0tdHJlZSc7XG5pbXBvcnQgeyBDb21wb25lbnRSb3V0ZVRyZWUsIHJvdXRpbmdUcmVlIH0gZnJvbSAnLi9yb3V0aW5nLXRyZWUnO1xuaW1wb3J0IHsgQWJzdHJhY3RSb3V0ZXJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9hYnN0cmFjdC1yb3V0ZXItY29uZmlnLnNlcnZpY2UnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFJvdXRlckNvbmZpZ1NlcnZpY2UgZXh0ZW5kcyBBYnN0cmFjdFJvdXRlckNvbmZpZ1NlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHJvdXRhYmxlSXRlbVRyZWU6IE9ic2VydmFibGU8VHJlZTxSb3V0YWJsZUl0ZW0+PiA9IHRoaXMucm9vdENvbnRhaW5lci5tb2RlbC5waXBlKFxuICAgIHN3aXRjaE1hcChtb2RlbCA9PiBtb2RlbC50b1RyZWUoKSksXG4gICAgc3dpdGNoTWFwKG1vZGVsID0+IHJvdXRhYmxlSXRlbVRyZWUodGhpcy5pdGVtUmVnaXN0cnksIHRoaXMucm91dGVHdWFyZHNSZWdpc3RyeSwgbW9kZWwpKSxcbiAgICBzaGFyZVJlcGxheSgxKSxcbiAgKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IG91dGxldHM6IE9ic2VydmFibGU8TWFwPHN0cmluZywgT3V0bGV0TmFtZT4+ID0gdGhpcy5yb3V0YWJsZUl0ZW1UcmVlLnBpcGUoXG4gICAgbWFwKG91dGxldE1hcCksXG4gICAgc2hhcmVSZXBsYXkoMSksXG4gICk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgdGhlIGNvbXBvbmVudCB0cmVlIHRvIGEgcm91dGluZyB0cmVlXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgybVyb3V0ZVRyZWU6IE9ic2VydmFibGU8Q29tcG9uZW50Um91dGVUcmVlPiA9IHRoaXMub3V0bGV0cy5waXBlKFxuICAgIHdpdGhMYXRlc3RGcm9tKHRoaXMucm91dGFibGVJdGVtVHJlZSksXG4gICAgbWFwKChbb3V0bGV0cywgdHJlZV0pOiBDb21wb25lbnRSb3V0ZVRyZWUgPT4gcm91dGluZ1RyZWUodHJlZSwgb3V0bGV0cykpLFxuICAgIHNoYXJlUmVwbGF5KDEpLFxuICApO1xuXG4gIC8qKlxuICAgKiBUaGUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIEFuZ3VsYXIgcm91dGVzIGZvciB0aGUgU1BBLCBiYXNlZCBvbiB0aGUgbW9kZWwgb2YgdGhlIGFwcC5cbiAgICovXG4gIHB1YmxpYyByb3V0ZXM6IE9ic2VydmFibGU8Um91dGVzPiA9IHRoaXMuybVyb3V0ZVRyZWUucGlwZShcbiAgICBtYXAoKHJvdXRlVHJlZXM6IENvbXBvbmVudFJvdXRlVHJlZSk6IFJvdXRlcyA9PiByb3V0ZVRyZWVzLnZhbHVlLnJvdXRlcyksXG4gICAgc2hhcmVSZXBsYXkoMSksXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBpdGVtUmVnaXN0cnk6IEl0ZW1SZWdpc3RyeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZUd1YXJkc1JlZ2lzdHJ5OiBSb3V0ZUd1YXJkc1JlZ2lzdHJ5U2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvb3RDb250YWluZXI6INOoUm9vdENvbnRhaW5lclNlcnZpY2UsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByb3V0ZXItb3V0bGV0IG5hbWUgZm9yIHRoZSBnaXZlbiBpdGVtIGluIHRoZSBtb2RlbCB0cmVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIMm1aXRlbU91dGxldE5hbWUoaXRlbTogSXRlbU1vZGVsKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5vdXRsZXRzLnBpcGUoXG4gICAgICBtYXAob3V0bGV0cyA9PiBvdXRsZXRzLmdldChpdGVtLm5hbWUpKSxcbiAgICAgIG1hcChvdXRsZXQgPT4gKG91dGxldCBpbnN0YW5jZW9mIE91dGxldENvbGxpc2lvbiA/IG91dGxldC5vdXRsZXROYW1lIDogb3V0bGV0KSksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==