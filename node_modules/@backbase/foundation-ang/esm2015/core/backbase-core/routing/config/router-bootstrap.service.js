import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { skip, take, withLatestFrom, startWith } from 'rxjs/operators';
import { ӨItemNavigationService } from '../../communication/item-navigation.service';
import { isInsert, isPropertyUpdate, ӨRootContainerService, isRemovalUpdate, } from '../../models/root-container.service';
import { isContainer } from '../../models/item-model-utils';
import { RouterConfigService } from './router-config.service';
const noop = undefined;
export function createRouteConfigBootstrap(routerBootstrap) {
    return routerBootstrap.bootstrap.bind(routerBootstrap);
}
const notEmpty = (a) => a.length > 0;
const ɵ0 = notEmpty;
const itemToNavigate = (update) => {
    if (isInsert(update)) {
        // navigate to the first child of inserted item (if exists) or to the item itself
        return {
            name: update.item.name,
            nthChild: isContainer(update.item) && notEmpty(update.item.children) ? 0 : undefined,
        };
    }
    else if (isPropertyUpdate(update)) {
        // navigate to the updated item (@todo: if this item is currently active)
        return { name: update.name };
    }
    else if (isRemovalUpdate(update)) {
        // navigate to the nth child of the parent
        return { name: update.parentName, nthChild: update.index };
    }
    else {
        throw Error('not handled model update');
    }
};
const ɵ1 = itemToNavigate;
export class RouterBootstrapService {
    constructor(routerConfig, router, rootModel, itemNavigation) {
        this.routerConfig = routerConfig;
        this.router = router;
        this.rootModel = rootModel;
        this.itemNavigation = itemNavigation;
        this.bootstrapRoutes = this.routerConfig.routes.pipe(take(1));
        this.updateRoutes = this.routerConfig.routes.pipe(skip(1), withLatestFrom(this.rootModel.modelUpdates.pipe(startWith(noop))));
    }
    bootstrap() {
        const initialRoutes = this.router.config;
        this.bootstrapRoutes.subscribe(routes => {
            this.router.resetConfig([...routes, ...initialRoutes]);
            this.router.initialNavigation();
        });
        let lastUpdate;
        this.updateRoutes.subscribe(([routes, update]) => {
            this.router.resetConfig([...routes, ...initialRoutes]);
            if (update && lastUpdate !== update) {
                lastUpdate = update;
                this.navigateOnUpdates(update);
            }
            else {
                this.router.navigateByUrl(this.router.url, { skipLocationChange: true });
            }
        });
    }
    navigateOnUpdates(update) {
        const itemNavigation = itemToNavigate(update);
        const navigation = itemNavigation.nthChild !== undefined
            ? this.itemNavigation.navigateToChild(itemNavigation.name, itemNavigation.nthChild, {})
            : this.itemNavigation.navigateToItem(itemNavigation.name, {});
        navigation.then((result) => {
            if (!result) {
                // If the navigation failed, it might be because the item
                // was not within a routable item, so it can't be navigated to.
                // In this case, we trigger a navigation to '/' to trigger
                // and new redirects (this use-case is when a "deck-container" is
                // dropped onto the root of the page, we need to trigger the
                // redirect to the first route).
                // @todo: is there a better way to trigger redirects?
                // @todo: is there a better way to know that the navigation
                //   failure was because it was to a non-routable item? maybe
                //   it should throw instead of resolve false?
                this.router.navigateByUrl('/');
            }
        });
    }
}
RouterBootstrapService.decorators = [
    { type: Injectable }
];
RouterBootstrapService.ctorParameters = () => [
    { type: RouterConfigService },
    { type: Router },
    { type: ӨRootContainerService },
    { type: ӨItemNavigationService }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,