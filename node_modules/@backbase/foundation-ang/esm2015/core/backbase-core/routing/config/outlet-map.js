import { PRIMARY_OUTLET } from '@angular/router';
import { Tree } from '../../models/tree';
import { flatMap } from '../../models/array';
/**
 * Special type to flag an outlet as having a collision. This
 * enables us to create the outlet tree, and name the outlet, but
 * also flag the item as having a collision with another item.
 */
export class OutletCollision {
    constructor(outletName, itemName, collisionWith) {
        this.outletName = outletName;
        this.itemName = itemName;
        this.collisionWith = collisionWith;
    }
}
const isValidOutlet = (outlet) => outlet !== undefined && outlet !== '';
const ɵ0 = isValidOutlet;
const outletCollision = (outletItem, collisionWith) => {
    return {
        item: outletItem.item,
        outlet: new OutletCollision(`ɵ${outletItem.item}`, outletItem.item, collisionWith.item),
    };
};
const ɵ1 = outletCollision;
const flattenOutletTreeNode = (node) => {
    const flattenedChildren = flatMap(flattenOutletTreeNode, node.children);
    if (node.value.outlet !== undefined) {
        // not routable
        // Don't flatten this node (just it's children)
        return [new Tree({ item: node.value.name, outlet: node.value.outlet }, flattenedChildren)];
    }
    else {
        // Flatten this node
        return flattenedChildren.reduce((acc, nextChild) => {
            const collisionWith = acc.find(child => child.value.outlet === nextChild.value.outlet);
            const newChild = collisionWith
                ? new Tree(outletCollision(nextChild.value, collisionWith.value), nextChild.children)
                : nextChild;
            return [...acc, newChild];
        }, []);
    }
};
const ɵ2 = flattenOutletTreeNode;
/**
 * Special case for flattening the root node. If it can't be flattened into a tree with a single
 * root node, we create a special root node, so there is only ever a single tree.
 */
const flattenOutletTree = (outletTree) => {
    return {
        rootItem: outletTree.value.name,
        children: flattenOutletTreeNode(outletTree),
    };
};
const ɵ3 = flattenOutletTree;
const mapItemToOutlet = (item) => {
    if (!item.routingStrategy) {
        return {
            name: item.name,
            outlet: undefined,
        };
    }
    return {
        name: item.name,
        outlet: isValidOutlet(item.outlet) ? item.outlet : PRIMARY_OUTLET,
    };
};
const ɵ4 = mapItemToOutlet;
const outletTreeToMap = (outletTree) => {
    const entries = flatMap(tree => tree.flatten(), outletTree.children) // flatten and merge the root outlet trees
        .map((node) => [node.value.item, node.value.outlet]);
    return new Map(entries);
};
const ɵ5 = outletTreeToMap;
export const outletMap = (itemTree) => {
    return outletTreeToMap(flattenOutletTree(itemTree.map(mapItemToOutlet)));
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LW1hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvcm91dGluZy9jb25maWcvb3V0bGV0LW1hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUk3Qzs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFDMUIsWUFBbUIsVUFBa0IsRUFBUyxRQUFrQixFQUFTLGFBQXVCO1FBQTdFLGVBQVUsR0FBVixVQUFVLENBQVE7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQVU7SUFBRyxDQUFDO0NBQ3JHO0FBb0NELE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBMEIsRUFBVyxFQUFFLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssRUFBRSxDQUFDOztBQUVyRyxNQUFNLGVBQWUsR0FBRyxDQUFDLFVBQThCLEVBQUUsYUFBaUMsRUFBc0IsRUFBRTtJQUNoSCxPQUFPO1FBQ0wsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJO1FBQ3JCLE1BQU0sRUFBRSxJQUFJLGVBQWUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7S0FDeEYsQ0FBQztBQUNKLENBQUMsQ0FBQzs7QUFFRixNQUFNLHFCQUFxQixHQUFHLENBQUMsSUFBZ0IsRUFBbUMsRUFBRTtJQUNsRixNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBdUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTlHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ25DLGVBQWU7UUFDZiwrQ0FBK0M7UUFDL0MsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztLQUM1RjtTQUFNO1FBQ0wsb0JBQW9CO1FBQ3BCLE9BQU8saUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFO1lBQ2pELE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZGLE1BQU0sUUFBUSxHQUFHLGFBQWE7Z0JBQzVCLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQztnQkFDckYsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUNkLE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM1QixDQUFDLEVBQUUsRUFBcUMsQ0FBQyxDQUFDO0tBQzNDO0FBQ0gsQ0FBQyxDQUFDOztBQUVGOzs7R0FHRztBQUNILE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxVQUE0QixFQUFzQixFQUFFO0lBQzdFLE9BQU87UUFDTCxRQUFRLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJO1FBQy9CLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxVQUFVLENBQUM7S0FDNUMsQ0FBQztBQUNKLENBQUMsQ0FBQzs7QUFFRixNQUFNLGVBQWUsR0FBRyxDQUFDLElBQWtCLEVBQWMsRUFBRTtJQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUN6QixPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsTUFBTSxFQUFFLFNBQVM7U0FDbEIsQ0FBQztLQUNIO0lBQ0QsT0FBTztRQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtRQUNmLE1BQU0sRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFjO0tBQ2xFLENBQUM7QUFDSixDQUFDLENBQUM7O0FBRUYsTUFBTSxlQUFlLEdBQUcsQ0FBQyxVQUE4QixFQUFhLEVBQUU7SUFDcEUsTUFBTSxPQUFPLEdBQWtDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsMENBQTBDO1NBQzNJLEdBQUcsQ0FBQyxDQUFDLElBQThCLEVBQTBCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RyxPQUFPLElBQUksR0FBRyxDQUF1QixPQUFPLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7O0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsUUFBNEIsRUFBYSxFQUFFO0lBQ25FLE9BQU8sZUFBZSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBSSU1BUllfT1VUTEVUIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFRyZWUgfSBmcm9tICcuLi8uLi9tb2RlbHMvdHJlZSc7XG5pbXBvcnQgeyBmbGF0TWFwIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FycmF5JztcbmltcG9ydCB7IEl0ZW1OYW1lIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2l0ZW0tbW9kZWwnO1xuaW1wb3J0IHsgUm91dGFibGVJdGVtIH0gZnJvbSAnLi9yb3V0YWJsZS1pdGVtLXRyZWUnO1xuXG4vKipcbiAqIFNwZWNpYWwgdHlwZSB0byBmbGFnIGFuIG91dGxldCBhcyBoYXZpbmcgYSBjb2xsaXNpb24uIFRoaXNcbiAqIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHRoZSBvdXRsZXQgdHJlZSwgYW5kIG5hbWUgdGhlIG91dGxldCwgYnV0XG4gKiBhbHNvIGZsYWcgdGhlIGl0ZW0gYXMgaGF2aW5nIGEgY29sbGlzaW9uIHdpdGggYW5vdGhlciBpdGVtLlxuICovXG5leHBvcnQgY2xhc3MgT3V0bGV0Q29sbGlzaW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIG91dGxldE5hbWU6IHN0cmluZywgcHVibGljIGl0ZW1OYW1lOiBJdGVtTmFtZSwgcHVibGljIGNvbGxpc2lvbldpdGg6IEl0ZW1OYW1lKSB7fVxufVxuXG5leHBvcnQgdHlwZSBPdXRsZXROYW1lID0gc3RyaW5nIHwgT3V0bGV0Q29sbGlzaW9uO1xuXG5leHBvcnQgaW50ZXJmYWNlIEl0ZW1PdXRsZXQge1xuICBuYW1lOiBJdGVtTmFtZTtcbiAgb3V0bGV0PzogT3V0bGV0TmFtZTtcbn1cblxuLyoqXG4gKiBBIG1hcHBpbmcgb2YgdGhlIGNvbXBvbmVudCB0cmVlLCBhbmQgdGhlaXIgb3V0bGV0IGNvbmZpZ3VyYXRpb24uXG4gKiBCZWNhdXNlIHRoaXMgdHJlZSBpc24ndCBmbGF0dGVuZWQsIGl0IGhhc24ndCBoYWQgb3V0bGV0IGNvbGxpc2lvbnNcbiAqIHJlc29sdmVkIHlldC5cbiAqL1xuZXhwb3J0IHR5cGUgT3V0bGV0VHJlZSA9IFRyZWU8SXRlbU91dGxldD47XG5cbi8qKlxuICogQSBmbGF0dGVuZWQgdHJlZSBvZiBvbmx5IHJvdXRhYmxlIGl0ZW1zLCBhbmQgdGhlaXIgb3V0bGV0cy5cbiAqXG4gKiBUaGlzIGlzIGEgdHJlZSB3aXRoIG91dGxldCBjb2xsaXNpb25zIHJlc29sdmVkLlxuICpcbiAqIEJlY2F1c2UgZmxhdHRlbmluZyB0aGUgdHJlZSBjYW4gbWFrZSBtdWx0aXBsZSB0cmVlcywgdGhpc1xuICogaW50ZXJmYWNlIGlzIHVzZWQgdG8gYWdncmVnYXRlIGFsbCB0aGUgZmxhdHRlbmVkIChyb290KSB0cmVlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0YWJsZU91dGxldFRyZWUge1xuICByb290SXRlbTogSXRlbU5hbWU7XG4gIGNoaWxkcmVuOiBBcnJheTxUcmVlPFJvdXRhYmxlSXRlbU91dGxldD4+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRhYmxlSXRlbU91dGxldCB7XG4gIGl0ZW06IEl0ZW1OYW1lO1xuICBvdXRsZXQ6IE91dGxldE5hbWU7XG59XG5cbmV4cG9ydCB0eXBlIE91dGxldE1hcCA9IE1hcDxJdGVtTmFtZSwgT3V0bGV0TmFtZT47XG5cbmNvbnN0IGlzVmFsaWRPdXRsZXQgPSAob3V0bGV0OiBzdHJpbmcgfCB1bmRlZmluZWQpOiBib29sZWFuID0+IG91dGxldCAhPT0gdW5kZWZpbmVkICYmIG91dGxldCAhPT0gJyc7XG5cbmNvbnN0IG91dGxldENvbGxpc2lvbiA9IChvdXRsZXRJdGVtOiBSb3V0YWJsZUl0ZW1PdXRsZXQsIGNvbGxpc2lvbldpdGg6IFJvdXRhYmxlSXRlbU91dGxldCk6IFJvdXRhYmxlSXRlbU91dGxldCA9PiB7XG4gIHJldHVybiB7XG4gICAgaXRlbTogb3V0bGV0SXRlbS5pdGVtLFxuICAgIG91dGxldDogbmV3IE91dGxldENvbGxpc2lvbihgybUke291dGxldEl0ZW0uaXRlbX1gLCBvdXRsZXRJdGVtLml0ZW0sIGNvbGxpc2lvbldpdGguaXRlbSksXG4gIH07XG59O1xuXG5jb25zdCBmbGF0dGVuT3V0bGV0VHJlZU5vZGUgPSAobm9kZTogT3V0bGV0VHJlZSk6IEFycmF5PFRyZWU8Um91dGFibGVJdGVtT3V0bGV0Pj4gPT4ge1xuICBjb25zdCBmbGF0dGVuZWRDaGlsZHJlbiA9IGZsYXRNYXA8T3V0bGV0VHJlZSwgVHJlZTxSb3V0YWJsZUl0ZW1PdXRsZXQ+PihmbGF0dGVuT3V0bGV0VHJlZU5vZGUsIG5vZGUuY2hpbGRyZW4pO1xuXG4gIGlmIChub2RlLnZhbHVlLm91dGxldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gbm90IHJvdXRhYmxlXG4gICAgLy8gRG9uJ3QgZmxhdHRlbiB0aGlzIG5vZGUgKGp1c3QgaXQncyBjaGlsZHJlbilcbiAgICByZXR1cm4gW25ldyBUcmVlKHsgaXRlbTogbm9kZS52YWx1ZS5uYW1lLCBvdXRsZXQ6IG5vZGUudmFsdWUub3V0bGV0IH0sIGZsYXR0ZW5lZENoaWxkcmVuKV07XG4gIH0gZWxzZSB7XG4gICAgLy8gRmxhdHRlbiB0aGlzIG5vZGVcbiAgICByZXR1cm4gZmxhdHRlbmVkQ2hpbGRyZW4ucmVkdWNlKChhY2MsIG5leHRDaGlsZCkgPT4ge1xuICAgICAgY29uc3QgY29sbGlzaW9uV2l0aCA9IGFjYy5maW5kKGNoaWxkID0+IGNoaWxkLnZhbHVlLm91dGxldCA9PT0gbmV4dENoaWxkLnZhbHVlLm91dGxldCk7XG4gICAgICBjb25zdCBuZXdDaGlsZCA9IGNvbGxpc2lvbldpdGhcbiAgICAgICAgPyBuZXcgVHJlZShvdXRsZXRDb2xsaXNpb24obmV4dENoaWxkLnZhbHVlLCBjb2xsaXNpb25XaXRoLnZhbHVlKSwgbmV4dENoaWxkLmNoaWxkcmVuKVxuICAgICAgICA6IG5leHRDaGlsZDtcbiAgICAgIHJldHVybiBbLi4uYWNjLCBuZXdDaGlsZF07XG4gICAgfSwgW10gYXMgQXJyYXk8VHJlZTxSb3V0YWJsZUl0ZW1PdXRsZXQ+Pik7XG4gIH1cbn07XG5cbi8qKlxuICogU3BlY2lhbCBjYXNlIGZvciBmbGF0dGVuaW5nIHRoZSByb290IG5vZGUuIElmIGl0IGNhbid0IGJlIGZsYXR0ZW5lZCBpbnRvIGEgdHJlZSB3aXRoIGEgc2luZ2xlXG4gKiByb290IG5vZGUsIHdlIGNyZWF0ZSBhIHNwZWNpYWwgcm9vdCBub2RlLCBzbyB0aGVyZSBpcyBvbmx5IGV2ZXIgYSBzaW5nbGUgdHJlZS5cbiAqL1xuY29uc3QgZmxhdHRlbk91dGxldFRyZWUgPSAob3V0bGV0VHJlZTogVHJlZTxJdGVtT3V0bGV0Pik6IFJvdXRhYmxlT3V0bGV0VHJlZSA9PiB7XG4gIHJldHVybiB7XG4gICAgcm9vdEl0ZW06IG91dGxldFRyZWUudmFsdWUubmFtZSxcbiAgICBjaGlsZHJlbjogZmxhdHRlbk91dGxldFRyZWVOb2RlKG91dGxldFRyZWUpLFxuICB9O1xufTtcblxuY29uc3QgbWFwSXRlbVRvT3V0bGV0ID0gKGl0ZW06IFJvdXRhYmxlSXRlbSk6IEl0ZW1PdXRsZXQgPT4ge1xuICBpZiAoIWl0ZW0ucm91dGluZ1N0cmF0ZWd5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgIG91dGxldDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgb3V0bGV0OiBpc1ZhbGlkT3V0bGV0KGl0ZW0ub3V0bGV0KSA/IGl0ZW0ub3V0bGV0IDogUFJJTUFSWV9PVVRMRVQsXG4gIH07XG59O1xuXG5jb25zdCBvdXRsZXRUcmVlVG9NYXAgPSAob3V0bGV0VHJlZTogUm91dGFibGVPdXRsZXRUcmVlKTogT3V0bGV0TWFwID0+IHtcbiAgY29uc3QgZW50cmllczogQXJyYXk8W0l0ZW1OYW1lLCBPdXRsZXROYW1lXT4gPSBmbGF0TWFwKHRyZWUgPT4gdHJlZS5mbGF0dGVuKCksIG91dGxldFRyZWUuY2hpbGRyZW4pIC8vIGZsYXR0ZW4gYW5kIG1lcmdlIHRoZSByb290IG91dGxldCB0cmVlc1xuICAgIC5tYXAoKG5vZGU6IFRyZWU8Um91dGFibGVJdGVtT3V0bGV0Pik6IFtJdGVtTmFtZSwgT3V0bGV0TmFtZV0gPT4gW25vZGUudmFsdWUuaXRlbSwgbm9kZS52YWx1ZS5vdXRsZXRdKTtcbiAgcmV0dXJuIG5ldyBNYXA8SXRlbU5hbWUsIE91dGxldE5hbWU+KGVudHJpZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IG91dGxldE1hcCA9IChpdGVtVHJlZTogVHJlZTxSb3V0YWJsZUl0ZW0+KTogT3V0bGV0TWFwID0+IHtcbiAgcmV0dXJuIG91dGxldFRyZWVUb01hcChmbGF0dGVuT3V0bGV0VHJlZShpdGVtVHJlZS5tYXAobWFwSXRlbVRvT3V0bGV0KSkpO1xufTtcbiJdfQ==