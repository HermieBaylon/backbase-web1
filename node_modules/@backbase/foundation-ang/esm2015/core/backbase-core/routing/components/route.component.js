import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { pluck, switchMap, filter } from 'rxjs/operators';
import { ItemModelTree } from '../../models/item-model';
import { ItemRegistryService } from '../../rendering/item-registry.service';
export class RouteComponent {
    constructor(route, tree, itemRegistry) {
        this.route = route;
        this.tree = tree;
        this.itemRegistry = itemRegistry;
        this.item = this.route.data.pipe(pluck('renderChild'), switchMap(renderChild => this.tree.find(item => item.name === renderChild)), filter((a) => a !== undefined));
    }
    static isItemInRoute(itemName, route) {
        if (!route.data || !route.data.renderChild) {
            throw new Error(`@backbase/foundation Invalid route for RouteComponent. Missing data renderChild: ${route}`);
        }
        return route.data.renderChild === itemName;
    }
    /**
     * @internal
     */
    isModule(model) {
        return !!this.itemRegistry.getModuleLoader(model.ÉµclassId);
    }
}
RouteComponent.decorators = [
    { type: Component, args: [{
                selector: 'bb-route',
                template: `
    <ng-container *ngIf="item | async as item">
      <router-outlet *ngIf="isModule(item.value); else renderModel"></router-outlet>
      <ng-template #renderModel><bb-chrome [item]="item"></bb-chrome></ng-template>
    </ng-container>
  `
            },] }
];
RouteComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: ItemModelTree },
    { type: ItemRegistryService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZS9zcmMvYmFja2Jhc2UtY29yZS9yb3V0aW5nL2NvbXBvbmVudHMvcm91dGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBZSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTFELE9BQU8sRUFBYSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQVc1RSxNQUFNLE9BQU8sY0FBYztJQU96QixZQUNtQixLQUFxQixFQUNyQixJQUFtQixFQUM1QixZQUFpQztRQUZ4QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNyQixTQUFJLEdBQUosSUFBSSxDQUFlO1FBQzVCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQVQzQyxTQUFJLEdBQTBDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDaEUsS0FBSyxDQUFlLGFBQWEsQ0FBQyxFQUNsQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUMsRUFDM0UsTUFBTSxDQUFDLENBQUMsQ0FBd0MsRUFBa0MsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FDdEcsQ0FBQztJQU1DLENBQUM7SUFFSixNQUFNLENBQUMsYUFBYSxDQUFDLFFBQWdCLEVBQUUsS0FBWTtRQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzFDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0ZBQW9GLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDOUc7UUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRLENBQUMsS0FBZ0I7UUFDdkIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdELENBQUM7OztZQWxDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFFBQVEsRUFBRTs7Ozs7R0FLVDthQUNGOzs7WUFmUSxjQUFjO1lBR0gsYUFBYTtZQUV4QixtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZSwgRGF0YSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBwbHVjaywgc3dpdGNoTWFwLCBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJdGVtTW9kZWwsIEl0ZW1Nb2RlbFRyZWUgfSBmcm9tICcuLi8uLi9tb2RlbHMvaXRlbS1tb2RlbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlVHJlZSB9IGZyb20gJy4uLy4uL21vZGVscy90cmVlJztcbmltcG9ydCB7IEl0ZW1SZWdpc3RyeVNlcnZpY2UgfSBmcm9tICcuLi8uLi9yZW5kZXJpbmcvaXRlbS1yZWdpc3RyeS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItcm91dGUnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpdGVtIHwgYXN5bmMgYXMgaXRlbVwiPlxuICAgICAgPHJvdXRlci1vdXRsZXQgKm5nSWY9XCJpc01vZHVsZShpdGVtLnZhbHVlKTsgZWxzZSByZW5kZXJNb2RlbFwiPjwvcm91dGVyLW91dGxldD5cbiAgICAgIDxuZy10ZW1wbGF0ZSAjcmVuZGVyTW9kZWw+PGJiLWNocm9tZSBbaXRlbV09XCJpdGVtXCI+PC9iYi1jaHJvbWU+PC9uZy10ZW1wbGF0ZT5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgUm91dGVDb21wb25lbnQge1xuICBpdGVtOiBPYnNlcnZhYmxlPE9ic2VydmFibGVUcmVlPEl0ZW1Nb2RlbD4+ID0gdGhpcy5yb3V0ZS5kYXRhLnBpcGUoXG4gICAgcGx1Y2s8RGF0YSwgc3RyaW5nPigncmVuZGVyQ2hpbGQnKSxcbiAgICBzd2l0Y2hNYXAocmVuZGVyQ2hpbGQgPT4gdGhpcy50cmVlLmZpbmQoaXRlbSA9PiBpdGVtLm5hbWUgPT09IHJlbmRlckNoaWxkKSksXG4gICAgZmlsdGVyKChhOiBPYnNlcnZhYmxlVHJlZTxJdGVtTW9kZWw+IHwgdW5kZWZpbmVkKTogYSBpcyBPYnNlcnZhYmxlVHJlZTxJdGVtTW9kZWw+ID0+IGEgIT09IHVuZGVmaW5lZCksXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSByZWFkb25seSB0cmVlOiBJdGVtTW9kZWxUcmVlLFxuICAgIHByaXZhdGUgaXRlbVJlZ2lzdHJ5OiBJdGVtUmVnaXN0cnlTZXJ2aWNlLFxuICApIHt9XG5cbiAgc3RhdGljIGlzSXRlbUluUm91dGUoaXRlbU5hbWU6IHN0cmluZywgcm91dGU6IFJvdXRlKSB7XG4gICAgaWYgKCFyb3V0ZS5kYXRhIHx8ICFyb3V0ZS5kYXRhLnJlbmRlckNoaWxkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEBiYWNrYmFzZS9mb3VuZGF0aW9uIEludmFsaWQgcm91dGUgZm9yIFJvdXRlQ29tcG9uZW50LiBNaXNzaW5nIGRhdGEgcmVuZGVyQ2hpbGQ6ICR7cm91dGV9YCk7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZS5kYXRhLnJlbmRlckNoaWxkID09PSBpdGVtTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGlzTW9kdWxlKG1vZGVsOiBJdGVtTW9kZWwpIHtcbiAgICByZXR1cm4gISF0aGlzLml0ZW1SZWdpc3RyeS5nZXRNb2R1bGVMb2FkZXIobW9kZWwuybVjbGFzc0lkKTtcbiAgfVxufVxuIl19