import { DefaultContainerStrategy } from './default-container-strategy';
import { StaticRoutesStrategy } from './static-routes-strategy';
import { RouteComponent } from '../components/route.component';
/**
 * Symbol used to keep internal Backbase routing information
 * in an Angular component class
 */
export const routingStrategyField = Symbol('Î©RoutingStrategy');
/**
 * RoutingStrategyToken enum with routing strategy tokens
 */
export var RoutingStrategyToken;
(function (RoutingStrategyToken) {
    RoutingStrategyToken["STATIC"] = "StaticRoutesStrategy";
    RoutingStrategyToken["CONTAINERS"] = "DefaultContainerStrategy";
})(RoutingStrategyToken || (RoutingStrategyToken = {}));
/**
 * RoutableContainer decorator is used to mark an item as
 * routable. It makes the routing config service to use default
 * strategy for containers.
 */
export function RoutableContainer() {
    return function (constructor) {
        constructor[routingStrategyField] = {
            token: RoutingStrategyToken.CONTAINERS,
        };
        return constructor;
    };
}
/**
 * RoutableWidget decorator is used to define widget's internal routes.
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * @Component({
 *   selector: 'bb-todo-widget',
 *   template: `
 *     <bb-router-outlet></bb-router-outlet>
 *   `,
 *   changeDetection: ChangeDetectionStrategy.OnPush,
 *   providers: [RouterService, TodoNavigationService],
 * })
 * @RoutableWidget({
 *   routes: [
 *     { path: '', component: TodoListContainerComponent },
 *     { path: ':id', component: TodoDetailContainerComponent },
 *     { path: 'edit/:id', component: TodoFormContainerComponent },
 *   ],
 * })
 * export class TodoWidgetComponent {}
 * ```
 *
 * @param config Configuration object of the RoutableWidget decorator
 */
export function RoutableWidget(config) {
    return function (constructor) {
        constructor[routingStrategyField] = {
            token: RoutingStrategyToken.STATIC,
            routes: config.routes,
        };
        return constructor;
    };
}
export const createRouteComponentStrategy = (component) => {
    const isItemInRoute = component === RouteComponent ? component.isItemInRoute : () => false;
    return {
        isItemInRoute,
    };
};
export const createRoutingStrategy = (componentClass) => {
    const strategy = componentClass[routingStrategyField];
    if (strategy === undefined) {
        return undefined;
    }
    switch (strategy.token) {
        case RoutingStrategyToken.CONTAINERS:
            return new DefaultContainerStrategy();
        case RoutingStrategyToken.STATIC:
            return new StaticRoutesStrategy(strategy.routes);
        default:
            return undefined;
    }
};
export const isRoutableItem = (componentClass) => {
    const strategy = componentClass[routingStrategyField];
    return (!!strategy &&
        strategy.token &&
        (strategy.token === RoutingStrategyToken.CONTAINERS || strategy.token === RoutingStrategyToken.STATIC));
};
/**
 * CopyRoutes decorator is used to re-use the internal routing configuration from an existing widget.
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * @Component({
 *   selector: 'my-todo-widget',
 *   template: `
 *     <h1>My Custom Todo Widget</h1>
 *     <bb-router-outlet></bb-router-outlet>
 *   `,
 * })
 * @CopyRoutes(TodoWidgetComponent)
 * export class MyTodoWidgetComponent {}
 * ```
 *
 * @param from The Widget Component class from which to copy the routing configuration
 */
// Note: `from` should be `{ [routingStrategyField]: RoutingStrategyDefinition }` but the type checker
// can't resolve properties dynamically added by decorators.
export function CopyRoutes(componentClass, customize = routes => routes) {
    return function (constructor) {
        const definition = componentClass[routingStrategyField];
        if (definition === undefined || definition.token !== RoutingStrategyToken.STATIC) {
            return constructor;
        }
        constructor[routingStrategyField] = {
            token: RoutingStrategyToken.STATIC,
            routes: customize(definition.routes),
        };
        return constructor;
    };
}
//# sourceMappingURL=data:application/json;base64,