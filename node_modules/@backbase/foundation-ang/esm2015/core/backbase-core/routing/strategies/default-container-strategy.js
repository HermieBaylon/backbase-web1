import { RouteComponent } from '../components/route.component';
export class DefaultContainerStrategy {
    itemRoutePath(route, index) {
        if (route) {
            return route;
        }
        return (index + 1).toString();
    }
    // routes is guaranteed to have 1 item, but I don't know how to type that
    defaultRoute(routes) {
        const defaultRoute = routes[0];
        // Default behaviour, redirect to the first tab (primary route).
        return {
            path: '',
            redirectTo: defaultRoute.path,
            pathMatch: 'full',
        };
    }
    itemRoute(child, childrenRoutes, index) {
        return {
            path: this.itemRoutePath(child.route, index),
            component: RouteComponent,
            canActivate: child.canActivate,
            data: {
                renderChild: child.name,
                custom: child.routeData,
            },
            children: childrenRoutes,
        };
    }
    findChildrenRoutes(childrenItemRoutes, item) {
        const itemRoutes = childrenItemRoutes.find(child => child.item === item.name);
        return itemRoutes ? itemRoutes.routes : [];
    }
    childrenRoutes(children, childrenItemRoutes) {
        return children.map((child, index) => this.itemRoute(child, this.findChildrenRoutes(childrenItemRoutes, child), index));
    }
    getRoutes(item, children, childrenRoutes) {
        const childRoutes = this.childrenRoutes(children, childrenRoutes);
        const defaultRoutes = childRoutes.length && item.hasDefault ? [this.defaultRoute(childRoutes)] : [];
        const routes = [...childRoutes, ...defaultRoutes];
        if (item.canActivateChild.length) {
            return [
                {
                    path: '',
                    canActivateChild: item.canActivateChild,
                    children: routes,
                },
            ];
        }
        else {
            return routes;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1jb250YWluZXItc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL3JvdXRpbmcvc3RyYXRlZ2llcy9kZWZhdWx0LWNvbnRhaW5lci1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFLL0QsTUFBTSxPQUFPLHdCQUF3QjtJQUMzQixhQUFhLENBQUMsS0FBeUIsRUFBRSxLQUFhO1FBQzVELElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELHlFQUF5RTtJQUNqRSxZQUFZLENBQUMsTUFBYztRQUNqQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsZ0VBQWdFO1FBQ2hFLE9BQU87WUFDTCxJQUFJLEVBQUUsRUFBRTtZQUNSLFVBQVUsRUFBRSxZQUFZLENBQUMsSUFBSTtZQUM3QixTQUFTLEVBQUUsTUFBTTtTQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVPLFNBQVMsQ0FBQyxLQUFtQixFQUFFLGNBQXNCLEVBQUUsS0FBYTtRQUMxRSxPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7WUFDNUMsU0FBUyxFQUFFLGNBQWM7WUFDekIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLElBQUksRUFBRTtnQkFDSixXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ3ZCLE1BQU0sRUFBRSxLQUFLLENBQUMsU0FBUzthQUN4QjtZQUNELFFBQVEsRUFBRSxjQUFjO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBRU8sa0JBQWtCLENBQUMsa0JBQXFDLEVBQUUsSUFBa0I7UUFDbEYsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUUsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRU8sY0FBYyxDQUFDLFFBQTZCLEVBQUUsa0JBQXFDO1FBQ3pGLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQ2pGLENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQWtCLEVBQUUsUUFBNkIsRUFBRSxjQUFpQztRQUM1RixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNsRSxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDcEcsTUFBTSxNQUFNLEdBQVcsQ0FBQyxHQUFHLFdBQVcsRUFBRSxHQUFHLGFBQWEsQ0FBQyxDQUFDO1FBQzFELElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtZQUNoQyxPQUFPO2dCQUNMO29CQUNFLElBQUksRUFBRSxFQUFFO29CQUNSLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7b0JBQ3ZDLFFBQVEsRUFBRSxNQUFNO2lCQUNqQjthQUNGLENBQUM7U0FDSDthQUFNO1lBQ0wsT0FBTyxNQUFNLENBQUM7U0FDZjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlLCBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGVDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3JvdXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSb3V0aW5nU3RyYXRlZ3kgfSBmcm9tICcuL3JvdXRpbmctZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBJdGVtUm91dGVzIH0gZnJvbSAnLi4vY29uZmlnL3JvdXRpbmctdHJlZSc7XG5pbXBvcnQgeyBSb3V0YWJsZUl0ZW0gfSBmcm9tICcuLi9jb25maWcvcm91dGFibGUtaXRlbS10cmVlJztcblxuZXhwb3J0IGNsYXNzIERlZmF1bHRDb250YWluZXJTdHJhdGVneSBpbXBsZW1lbnRzIFJvdXRpbmdTdHJhdGVneSB7XG4gIHByaXZhdGUgaXRlbVJvdXRlUGF0aChyb3V0ZTogc3RyaW5nIHwgdW5kZWZpbmVkLCBpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAocm91dGUpIHtcbiAgICAgIHJldHVybiByb3V0ZTtcbiAgICB9XG4gICAgcmV0dXJuIChpbmRleCArIDEpLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvLyByb3V0ZXMgaXMgZ3VhcmFudGVlZCB0byBoYXZlIDEgaXRlbSwgYnV0IEkgZG9uJ3Qga25vdyBob3cgdG8gdHlwZSB0aGF0XG4gIHByaXZhdGUgZGVmYXVsdFJvdXRlKHJvdXRlczogUm91dGVzKTogUm91dGUge1xuICAgIGNvbnN0IGRlZmF1bHRSb3V0ZSA9IHJvdXRlc1swXTtcbiAgICAvLyBEZWZhdWx0IGJlaGF2aW91ciwgcmVkaXJlY3QgdG8gdGhlIGZpcnN0IHRhYiAocHJpbWFyeSByb3V0ZSkuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6ICcnLFxuICAgICAgcmVkaXJlY3RUbzogZGVmYXVsdFJvdXRlLnBhdGgsXG4gICAgICBwYXRoTWF0Y2g6ICdmdWxsJyxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBpdGVtUm91dGUoY2hpbGQ6IFJvdXRhYmxlSXRlbSwgY2hpbGRyZW5Sb3V0ZXM6IFJvdXRlcywgaW5kZXg6IG51bWJlcik6IFJvdXRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogdGhpcy5pdGVtUm91dGVQYXRoKGNoaWxkLnJvdXRlLCBpbmRleCksXG4gICAgICBjb21wb25lbnQ6IFJvdXRlQ29tcG9uZW50LFxuICAgICAgY2FuQWN0aXZhdGU6IGNoaWxkLmNhbkFjdGl2YXRlLFxuICAgICAgZGF0YToge1xuICAgICAgICByZW5kZXJDaGlsZDogY2hpbGQubmFtZSxcbiAgICAgICAgY3VzdG9tOiBjaGlsZC5yb3V0ZURhdGEsXG4gICAgICB9LFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuUm91dGVzLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGZpbmRDaGlsZHJlblJvdXRlcyhjaGlsZHJlbkl0ZW1Sb3V0ZXM6IEFycmF5PEl0ZW1Sb3V0ZXM+LCBpdGVtOiBSb3V0YWJsZUl0ZW0pOiBSb3V0ZXMge1xuICAgIGNvbnN0IGl0ZW1Sb3V0ZXMgPSBjaGlsZHJlbkl0ZW1Sb3V0ZXMuZmluZChjaGlsZCA9PiBjaGlsZC5pdGVtID09PSBpdGVtLm5hbWUpO1xuICAgIHJldHVybiBpdGVtUm91dGVzID8gaXRlbVJvdXRlcy5yb3V0ZXMgOiBbXTtcbiAgfVxuXG4gIHByaXZhdGUgY2hpbGRyZW5Sb3V0ZXMoY2hpbGRyZW46IEFycmF5PFJvdXRhYmxlSXRlbT4sIGNoaWxkcmVuSXRlbVJvdXRlczogQXJyYXk8SXRlbVJvdXRlcz4pOiBSb3V0ZXMge1xuICAgIHJldHVybiBjaGlsZHJlbi5tYXAoKGNoaWxkLCBpbmRleCkgPT5cbiAgICAgIHRoaXMuaXRlbVJvdXRlKGNoaWxkLCB0aGlzLmZpbmRDaGlsZHJlblJvdXRlcyhjaGlsZHJlbkl0ZW1Sb3V0ZXMsIGNoaWxkKSwgaW5kZXgpLFxuICAgICk7XG4gIH1cblxuICBnZXRSb3V0ZXMoaXRlbTogUm91dGFibGVJdGVtLCBjaGlsZHJlbjogQXJyYXk8Um91dGFibGVJdGVtPiwgY2hpbGRyZW5Sb3V0ZXM6IEFycmF5PEl0ZW1Sb3V0ZXM+KTogUm91dGVzIHtcbiAgICBjb25zdCBjaGlsZFJvdXRlcyA9IHRoaXMuY2hpbGRyZW5Sb3V0ZXMoY2hpbGRyZW4sIGNoaWxkcmVuUm91dGVzKTtcbiAgICBjb25zdCBkZWZhdWx0Um91dGVzID0gY2hpbGRSb3V0ZXMubGVuZ3RoICYmIGl0ZW0uaGFzRGVmYXVsdCA/IFt0aGlzLmRlZmF1bHRSb3V0ZShjaGlsZFJvdXRlcyldIDogW107XG4gICAgY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbLi4uY2hpbGRSb3V0ZXMsIC4uLmRlZmF1bHRSb3V0ZXNdO1xuICAgIGlmIChpdGVtLmNhbkFjdGl2YXRlQ2hpbGQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgcGF0aDogJycsXG4gICAgICAgICAgY2FuQWN0aXZhdGVDaGlsZDogaXRlbS5jYW5BY3RpdmF0ZUNoaWxkLFxuICAgICAgICAgIGNoaWxkcmVuOiByb3V0ZXMsXG4gICAgICAgIH0sXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcm91dGVzO1xuICAgIH1cbiAgfVxufVxuIl19