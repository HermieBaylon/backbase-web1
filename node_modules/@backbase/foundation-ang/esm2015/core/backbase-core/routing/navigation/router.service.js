import { Router, ActivatedRoute, PRIMARY_OUTLET } from '@angular/router';
import { Injectable } from '@angular/core';
import { take } from 'rxjs/operators';
import { ItemModel } from '../../models/item-model';
import { AbstractRouterConfigService } from '../config/abstract-router-config.service';
export class RouterService {
    /**
     * Backbase Angular Router abstraction.
     * See https://angular.io/api/router/Router
     *
     * The purpose for Backbase abstracting around the default Angular Router is
     * when linking a to a bb-router-outlet. The outlet name for a bb-router-outlet
     * is dynamically generated by a property on the model, so you can use the
     * Backbase Router service to automatically apply the outletName to the navigation
     * commands.
     *
     * @param router Angular Router
     * @param route Angular ActivatedRoute
     * @param itemModel Model of the Backbase Widget or Container
     */
    constructor(router, route, itemModel, routerConfig) {
        this.router = router;
        this.route = route;
        this.itemModel = itemModel;
        this.routerConfig = routerConfig;
        this.outletName = this.routerConfig.ÉµitemOutletName(this.itemModel);
    }
    /**
     * Navigate based on the provided array of commands and a starting point.
     * If no starting route is provided, the navigation is absolute.
     * See Angular Router.navigate
     */
    navigate(commands, extras = {}) {
        return this.createUrlTree(commands, extras).then(urlTree => this.router.navigateByUrl(this.router.serializeUrl(urlTree), extras));
    }
    /**
     * Applies an array of commands to the current url tree and creates a new url tree.
     * See Angular Router.createUrlTree
     */
    createUrlTree(commands, extras = {}) {
        return this.outletName
            .pipe(take(1))
            .toPromise()
            .then(outletName => this.outletCommands(outletName, commands))
            .then(cmnds => this.router.createUrlTree(cmnds, Object.assign({ relativeTo: this.route }, extras)));
    }
    outletCommands(outletName, commands) {
        if (outletName == null || outletName === PRIMARY_OUTLET) {
            return commands;
        }
        else {
            return [{ outlets: { [outletName]: commands } }];
        }
    }
}
RouterService.decorators = [
    { type: Injectable }
];
RouterService.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: ItemModel },
    { type: AbstractRouterConfigService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL3JvdXRpbmcvbmF2aWdhdGlvbi9yb3V0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBNkIsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBR3ZGLE1BQU0sT0FBTyxhQUFhO0lBR3hCOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSCxZQUNtQixNQUFjLEVBQ2QsS0FBcUIsRUFDckIsU0FBb0IsRUFDcEIsWUFBeUM7UUFIekMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQTZCO1FBcEJuRCxlQUFVLEdBQW1DLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQXFCckcsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsUUFBb0IsRUFBRSxTQUEyQixFQUFFO1FBQzFELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ3pELElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUNyRSxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILGFBQWEsQ0FBQyxRQUFvQixFQUFFLFNBQTJCLEVBQUU7UUFDL0QsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsU0FBUyxFQUFFO2FBQ1gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDN0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxrQkFDN0IsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLElBQ25CLE1BQU0sRUFDVCxDQUNILENBQUM7SUFDTixDQUFDO0lBRU8sY0FBYyxDQUFDLFVBQThCLEVBQUUsUUFBb0I7UUFDekUsSUFBSSxVQUFVLElBQUksSUFBSSxJQUFJLFVBQVUsS0FBSyxjQUFjLEVBQUU7WUFDdkQsT0FBTyxRQUFRLENBQUM7U0FDakI7YUFBTTtZQUNMLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQzs7O1lBM0RGLFVBQVU7OztZQVJGLE1BQU07WUFBRSxjQUFjO1lBS3RCLFNBQVM7WUFDVCwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlLCBOYXZpZ2F0aW9uRXh0cmFzLCBVcmxUcmVlLCBQUklNQVJZX09VVExFVCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBJdGVtTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvaXRlbS1tb2RlbCc7XG5pbXBvcnQgeyBBYnN0cmFjdFJvdXRlckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuLi9jb25maWcvYWJzdHJhY3Qtcm91dGVyLWNvbmZpZy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvdXRlclNlcnZpY2Uge1xuICByZWFkb25seSBvdXRsZXROYW1lOiBPYnNlcnZhYmxlPHN0cmluZyB8IHVuZGVmaW5lZD4gPSB0aGlzLnJvdXRlckNvbmZpZy7JtWl0ZW1PdXRsZXROYW1lKHRoaXMuaXRlbU1vZGVsKTtcblxuICAvKipcbiAgICogQmFja2Jhc2UgQW5ndWxhciBSb3V0ZXIgYWJzdHJhY3Rpb24uXG4gICAqIFNlZSBodHRwczovL2FuZ3VsYXIuaW8vYXBpL3JvdXRlci9Sb3V0ZXJcbiAgICpcbiAgICogVGhlIHB1cnBvc2UgZm9yIEJhY2tiYXNlIGFic3RyYWN0aW5nIGFyb3VuZCB0aGUgZGVmYXVsdCBBbmd1bGFyIFJvdXRlciBpc1xuICAgKiB3aGVuIGxpbmtpbmcgYSB0byBhIGJiLXJvdXRlci1vdXRsZXQuIFRoZSBvdXRsZXQgbmFtZSBmb3IgYSBiYi1yb3V0ZXItb3V0bGV0XG4gICAqIGlzIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCBieSBhIHByb3BlcnR5IG9uIHRoZSBtb2RlbCwgc28geW91IGNhbiB1c2UgdGhlXG4gICAqIEJhY2tiYXNlIFJvdXRlciBzZXJ2aWNlIHRvIGF1dG9tYXRpY2FsbHkgYXBwbHkgdGhlIG91dGxldE5hbWUgdG8gdGhlIG5hdmlnYXRpb25cbiAgICogY29tbWFuZHMuXG4gICAqXG4gICAqIEBwYXJhbSByb3V0ZXIgQW5ndWxhciBSb3V0ZXJcbiAgICogQHBhcmFtIHJvdXRlIEFuZ3VsYXIgQWN0aXZhdGVkUm91dGVcbiAgICogQHBhcmFtIGl0ZW1Nb2RlbCBNb2RlbCBvZiB0aGUgQmFja2Jhc2UgV2lkZ2V0IG9yIENvbnRhaW5lclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGl0ZW1Nb2RlbDogSXRlbU1vZGVsLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcm91dGVyQ29uZmlnOiBBYnN0cmFjdFJvdXRlckNvbmZpZ1NlcnZpY2UsXG4gICkge31cblxuICAvKipcbiAgICogTmF2aWdhdGUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIGFycmF5IG9mIGNvbW1hbmRzIGFuZCBhIHN0YXJ0aW5nIHBvaW50LlxuICAgKiBJZiBubyBzdGFydGluZyByb3V0ZSBpcyBwcm92aWRlZCwgdGhlIG5hdmlnYXRpb24gaXMgYWJzb2x1dGUuXG4gICAqIFNlZSBBbmd1bGFyIFJvdXRlci5uYXZpZ2F0ZVxuICAgKi9cbiAgbmF2aWdhdGUoY29tbWFuZHM6IEFycmF5PGFueT4sIGV4dHJhczogTmF2aWdhdGlvbkV4dHJhcyA9IHt9KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlVXJsVHJlZShjb21tYW5kcywgZXh0cmFzKS50aGVuKHVybFRyZWUgPT5cbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwodGhpcy5yb3V0ZXIuc2VyaWFsaXplVXJsKHVybFRyZWUpLCBleHRyYXMpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBhbiBhcnJheSBvZiBjb21tYW5kcyB0byB0aGUgY3VycmVudCB1cmwgdHJlZSBhbmQgY3JlYXRlcyBhIG5ldyB1cmwgdHJlZS5cbiAgICogU2VlIEFuZ3VsYXIgUm91dGVyLmNyZWF0ZVVybFRyZWVcbiAgICovXG4gIGNyZWF0ZVVybFRyZWUoY29tbWFuZHM6IEFycmF5PGFueT4sIGV4dHJhczogTmF2aWdhdGlvbkV4dHJhcyA9IHt9KTogUHJvbWlzZTxVcmxUcmVlPiB7XG4gICAgcmV0dXJuIHRoaXMub3V0bGV0TmFtZVxuICAgICAgLnBpcGUodGFrZSgxKSlcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4ob3V0bGV0TmFtZSA9PiB0aGlzLm91dGxldENvbW1hbmRzKG91dGxldE5hbWUsIGNvbW1hbmRzKSlcbiAgICAgIC50aGVuKGNtbmRzID0+XG4gICAgICAgIHRoaXMucm91dGVyLmNyZWF0ZVVybFRyZWUoY21uZHMsIHtcbiAgICAgICAgICByZWxhdGl2ZVRvOiB0aGlzLnJvdXRlLFxuICAgICAgICAgIC4uLmV4dHJhcyxcbiAgICAgICAgfSksXG4gICAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBvdXRsZXRDb21tYW5kcyhvdXRsZXROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQsIGNvbW1hbmRzOiBBcnJheTxhbnk+KTogQXJyYXk8YW55PiB7XG4gICAgaWYgKG91dGxldE5hbWUgPT0gbnVsbCB8fCBvdXRsZXROYW1lID09PSBQUklNQVJZX09VVExFVCkge1xuICAgICAgcmV0dXJuIGNvbW1hbmRzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3sgb3V0bGV0czogeyBbb3V0bGV0TmFtZV06IGNvbW1hbmRzIH0gfV07XG4gICAgfVxuICB9XG59XG4iXX0=