import { Injectable } from '@angular/core';
import { PRIMARY_OUTLET, Router, UrlSegment, UrlSegmentGroup, ActivatedRoute, } from '@angular/router';
import { linkedListSlice, linkedListFind, linkedListToArray, linkedListFromArray, linkedListLast, } from '../../models/linked-list';
import { pairs, flatMap } from '../../models/array';
const hasNamedOutlet = (node) => node.outlet !== PRIMARY_OUTLET;
const ɵ0 = hasNamedOutlet;
const routeSegmentToUrlSegment = (node) => new UrlSegment(node.path, node.params || {});
const ɵ1 = routeSegmentToUrlSegment;
export class RouterNavigationService {
    constructor(router) {
        this.router = router;
    }
    /**
     * Set (merge) the params on a given `ActivatedRoute`, preserving the active children's states.
     *
     * This allows updating the params in an arbitrary route in the active route
     * tree without needing to know the state of every child route.
     *
     * @param params The route params that should be set on the given route
     * @param from The route to set the params on
     * @returns The new URLTree
     */
    setParams(params, from) {
        const snapshot = from instanceof ActivatedRoute ? from.snapshot : from;
        const navigationRoute = linkedListFromArray(flatMap((route) => route.url.map((url) => ({
            path: url.path,
            outlet: route.outlet,
            params: url.parameters,
        })), snapshot.pathFromRoot));
        if (!navigationRoute) {
            throw new Error('No route to set params on');
        }
        const last = linkedListLast(navigationRoute);
        last.value.params = last.value.params ? Object.assign(Object.assign({}, last.value.params), params) : params;
        return this.createUrlTree(navigationRoute);
    }
    createUrlTree(routeBranch) {
        const tree = this.router.parseUrl('/'); // @todo: is there no better way to make a tree?
        const rootRouteSegment = routeBranch.value;
        tree.root.children[rootRouteSegment.outlet] = this.urlSegmentGroupForRoute(routeBranch);
        return tree;
    }
    /*
     * A segment group is a node in the UrlTree. The node itself is an array
     * of segments, which are all considered on the "primary" outlet.
     * The children of this node are the paths on the "non-primary" outlets.
     * There will only be a single "child" for the NavigationRoute (as it
     * represents a single branch through a UrlTree).
     */
    urlSegmentGroupForRoute(routeBranch) {
        // Find all paths up to the first non-primary outlet - these will be the segments.
        const routeSegments = {
            value: routeBranch.value,
            next: routeBranch.next ? linkedListSlice(routeBranch.next, undefined, hasNamedOutlet) : undefined,
        };
        const segments = linkedListToArray(routeSegments).map(routeSegmentToUrlSegment);
        // Find the first non-primary outlet - this will be the child.
        const nextOutlet = routeBranch.next && linkedListFind(routeBranch.next, hasNamedOutlet);
        const segmentGroupChildren = nextOutlet
            ? { [nextOutlet.value.outlet]: this.urlSegmentGroupForRoute(nextOutlet) }
            : {};
        return new UrlSegmentGroup(segments, segmentGroupChildren);
    }
    /**
     * Merge a new `UrlTree` into the current active `UrlTree`.
     *
     * @param newTree
     */
    navigate(newTree) {
        const activeTree = this.router.parseUrl(this.router.url);
        const mergedTree = this.router.parseUrl('/');
        mergedTree.root.children = this.mergeUrlSegmentGroupChildren(activeTree.root.children, newTree.root.children);
        return this.router.navigateByUrl(mergedTree);
    }
    /**
     * Merge new children of a `UrlSegmentGroup` children into the children of the
     * current active `UrlSegmentGroup`.
     *
     * @param activeChildren
     * @param newChildren
     */
    mergeUrlSegmentGroupChildren(activeChildren, newChildren) {
        const mergedChildren = Object.keys(newChildren).reduce((acc, outletName) => {
            if (!activeChildren[outletName]) {
                return acc;
            }
            return Object.assign(Object.assign({}, acc), { [outletName]: this.mergeUrlTreeSegmentGroup(activeChildren[outletName], newChildren[outletName]) });
        }, newChildren);
        /**
         * Sibling routes can be preserved, or not.
         *
         * Because the current active route is a tree (for example, when you have multiple named
         * outlets and they are active) when you navigate to a new route it is possible to preserve
         * active routes that are siblings to the route you're navigating to.
         *
         * For example, when navigating from URL `/a/(b//x:c)` to `/a/c`, should the `x:c` or `b`
         * be preserved. The URL can be visualised as a tree (where a double slash `//` shows siblings
         * in the tree):
         *
         * ```
         *  -a
         *   `- b
         *   `- x:c
         * ```
         *
         * When set to true, all sibling will be preserved. For example, when navigating to `/a/d`
         * the `x:c` branch will be preserved and the new URL will be `/a/(d//x:c)`. Similarly,
         * when navigating to `/a/(x:e)`, the `b` branch will be preserved and the new URL will
         * be `/a/(b//x:e)`.
         *
         * Merging is disabled by default, but can be enabled with a feature flag.
         */
        return Object.assign(Object.assign({}, activeChildren), mergedChildren);
    }
    /**
     * Merge a new `UrlSegmentGroup` into the current active `UrlSegmentGroup`.
     *
     * @param activeSegmentGroup
     * @param newSegmentGroup
     */
    mergeUrlTreeSegmentGroup(activeSegmentGroup, newSegmentGroup) {
        return new UrlSegmentGroup(this.mergeUrlSegments(activeSegmentGroup.segments, newSegmentGroup.segments), this.mergeUrlSegmentGroupChildren(activeSegmentGroup.children, newSegmentGroup.children));
    }
    /**
     * Merge an array of new `UrlSegment` into the current active `UrlSegment` array.
     *
     * @param activeSegments
     * @param newSegments
     */
    mergeUrlSegments(activeSegments, newSegments) {
        // Determine if any params are being set.
        const preserveActiveTailSegments = !!newSegments.find(segment => Object.keys(segment.parameters).length > 0);
        // When the new segments change path from the active segment, then they
        // should no longer be preserved, so they get set to undefined.
        const removeActiveSegments = () => {
            let matches = true;
            return ([activeSegment, newSegment]) => {
                if (matches && activeSegment && newSegment) {
                    matches = activeSegment.path === newSegment.path;
                }
                return [matches ? activeSegment : undefined, newSegment];
            };
        };
        // pair the segments into a single array
        return pairs(activeSegments, newSegments)
            .map(removeActiveSegments())
            .map(([activeSegment, newSegment]) => this.mergeUrlSegment(activeSegment, newSegment, preserveActiveTailSegments))
            .filter((a) => a !== undefined);
    }
    /**
     * Merge a new `UrlSegment` into the current active `UrlSegment`.
     *
     * If there is both an active and new segment it is assumed that the path
     * is the same already.
     *
     * @param activeSegment
     * @param newSegment
     * @param isSettingParams
     */
    mergeUrlSegment(activeSegment, newSegment, preserveActiveTailSegments) {
        /**
         * There are 3 different strategies for how to preserve any "tail" segments in
         * the route: 'never' | 'on-param-set' | 'always'.
         *
         * This is only relevant when any route branch you're navigating to is a subset
         * of a current active route. For example, when navigating from URL `/a/b` to
         * `/a`, should `b` be preserved?
         *
         * When set to 'never' the children will be discarded, and the new URL will simply
         * be `/a`.
         *
         * When set to 'always' the children will always be preserved (this means it would
         * be impossible to navigate to a parent route).
         *
         * When set to 'on-param-set' the children will only be preserved if params are being
         * set on the route. For example, when navigating from `/a/b` to
         * `/a;data=foo` then the new URL will be `/a:data=foo/b`.
         *
         * This is implemented using the 'never' OR 'on-param-set' strategy depending on the
         * `preserveActiveTailSegments` flag.
         */
        if (activeSegment && !newSegment && preserveActiveTailSegments) {
            return new UrlSegment(activeSegment.path, activeSegment.parameters);
        }
        else if (newSegment) {
            const activeSegmentParams = (activeSegment && activeSegment.parameters) || {};
            return new UrlSegment(newSegment.path, this.mergeUrlSegmentParams(activeSegmentParams, newSegment.parameters));
        }
        return undefined;
    }
    mergeUrlSegmentParams(activeSegmentParams, newSegmentParams) {
        /**
         * There 3 different strategies for how to preserve any route-parameters in the
         * route: 'never' | 'overwrite' | 'merge'.
         *
         * For example, when navigating from URL `/a;data=foo/b` to `/a;x=y/c`, should the
         * 'data' param be preserved.
         *
         * When `never` the params will be discarded, and the new URL will simply be `/a;x=y/c`.
         *
         * When `merge`, then the params will be preserved, and the new URL will be
         * `/a;data=foo;x=y/c`.
         *
         * When 'overwrite', then the params will be only be preserved if there are no *other*
         * params being set on that segment. For example, when navigating instead to:
         * `/a/c;foo=bar`, the new URL will be `/a;data=foo/c;foo=bar`.
         *
         * This is implemented using the "overwrite" strategy.
         */
        return Object.keys(newSegmentParams).length === 0 ? activeSegmentParams : newSegmentParams;
    }
}
RouterNavigationService.decorators = [
    { type: Injectable }
];
RouterNavigationService.ctorParameters = () => [
    { type: Router }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,