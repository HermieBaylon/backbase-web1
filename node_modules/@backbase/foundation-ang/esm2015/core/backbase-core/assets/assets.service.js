import { Injectable, Inject, InjectionToken, Optional, isDevMode } from '@angular/core';
import { of } from 'rxjs';
import { PAGE_CONFIG } from '@backbase/foundation-ang/web-sdk';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const CONFIG_ASSETS = new InjectionToken('@backbase/foundation Assets Service Configuration');
const DEFAULT_STATIC_ROOT = '/';
const DEFAULT_STATIC_ITEM_NAME = '';
/**
 * @deprecated Will be removed in v7.0.0
 */
export class AssetsService {
    constructor(pageConfig, assetsConfig) {
        this.pageConfig = pageConfig;
        this.assetsConfig = assetsConfig;
        if (!pageConfig && isDevMode()) {
            console.warn(`pageConfig is not provided which may impact the path that is resolving assets
         please include *either* the 'WebSdkModule.forRoot(...)' in your AppModule (for CDN deployment) or WebSdkApiModule
          (for CX deployment)`);
        }
    }
    createAssetsResolver(config) {
        const widgetName = config.widgetName;
        const assetsIdResolver = config.getURIFromAssetID;
        const staticRoot = this.pageConfig ? this.pageConfig.staticResourcesRoot : DEFAULT_STATIC_ROOT;
        const staticItemName = this.assetsConfig ? this.assetsConfig.assetsStaticItemName : DEFAULT_STATIC_ITEM_NAME;
        return (assetId) => {
            if (!assetId.length) {
                return of('');
            }
            return of([staticRoot, staticItemName, 'assets', widgetName, assetsIdResolver(assetId)]
                .filter(Boolean)
                .map(str => str.replace(/\/$/, ''))
                .join('/'));
        };
    }
}
AssetsService.decorators = [
    { type: Injectable }
];
AssetsService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PAGE_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG_ASSETS,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL2Fzc2V0cy9hc3NldHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsRUFBRSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQWMsTUFBTSxrQ0FBa0MsQ0FBQztBQThCM0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQzdDLG1EQUFtRCxDQUNwRCxDQUFDO0FBQ0YsTUFBTSxtQkFBbUIsR0FBRyxHQUFHLENBQUM7QUFDaEMsTUFBTSx3QkFBd0IsR0FBRyxFQUFFLENBQUM7QUFDcEM7O0dBRUc7QUFFSCxNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUdXLFVBQTZCLEVBRzdCLFlBQXdDO1FBSHhDLGVBQVUsR0FBVixVQUFVLENBQW1CO1FBRzdCLGlCQUFZLEdBQVosWUFBWSxDQUE0QjtRQUVqRCxJQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsRUFBRSxFQUFFO1lBQzlCLE9BQU8sQ0FBQyxJQUFJLENBQ1Y7OzhCQUVzQixDQUN2QixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRU0sb0JBQW9CLENBQUMsTUFBNEI7UUFDdEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNyQyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztRQUNsRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztRQUMvRixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQztRQUU3RyxPQUFPLENBQUMsT0FBZSxFQUFzQixFQUFFO1lBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO2dCQUNuQixPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNmO1lBQ0QsT0FBTyxFQUFFLENBQ1AsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQzFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7aUJBQ2YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7aUJBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FDYixDQUFDO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQzs7O1lBcENGLFVBQVU7Ozs0Q0FHTixRQUFRLFlBQ1IsTUFBTSxTQUFDLFdBQVc7NENBRWxCLFFBQVEsWUFDUixNQUFNLFNBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG9mLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQQUdFX0NPTkZJRywgUGFnZUNvbmZpZyB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy93ZWItc2RrJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZXRzQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgQ1ggaXRlbSBjb250YWluaW5nIHRoZSBhc3NldHMuXG4gICAqXG4gICAqIFRoaXMgYWxsb3dzIHRoZSBhc3NldHMgdG8gYmUgcGFja2FnZWQgYW5kIHNlcnZlZCBmcm9tIG9uZSBDWCBpdGVtLCBnZW5lcmFsbHkgdGhlIGFwcCBjb250YWluZXIgaXRlbSBpdHNlbGYuXG4gICAqL1xuICBhc3NldHNTdGF0aWNJdGVtTmFtZTogc3RyaW5nO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCB0eXBlIEFzc2V0SURSZXNvbHZlciA9IChhc3NldElkOiBzdHJpbmcpID0+IHN0cmluZztcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogVGhlIG1ldGhvZCByZXNvbHZlcyBhbiBhc3NldCBmcm9tIGEgY29uZmlndXJlZCBvbiB0aGUgQXBwIGxldmVsIHNvdXJjZVxuICogQHBhcmFtIGFzc2V0SWQgaWQgb2YgdGhlIGFzc2V0IGl0ZW0gdG8gYmUgcmVzb2x2ZWRcbiAqL1xuZXhwb3J0IHR5cGUgQXNzZXRzUmVzb2x2ZXIgPSAoYXNzZXRJZDogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHN0cmluZz47XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBc3NldHNSZXNvbHZlckNvbmZpZyB7XG4gIHdpZGdldE5hbWU6IHN0cmluZztcbiAgZ2V0VVJJRnJvbUFzc2V0SUQ6IEFzc2V0SURSZXNvbHZlcjtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY29uc3QgQ09ORklHX0FTU0VUUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBc3NldHNDb25maWd1cmF0aW9uPihcbiAgJ0BiYWNrYmFzZS9mb3VuZGF0aW9uIEFzc2V0cyBTZXJ2aWNlIENvbmZpZ3VyYXRpb24nLFxuKTtcbmNvbnN0IERFRkFVTFRfU1RBVElDX1JPT1QgPSAnLyc7XG5jb25zdCBERUZBVUxUX1NUQVRJQ19JVEVNX05BTUUgPSAnJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXNzZXRzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChQQUdFX0NPTkZJRylcbiAgICByZWFkb25seSBwYWdlQ29uZmlnOiBQYWdlQ29uZmlnIHwgbnVsbCxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQ09ORklHX0FTU0VUUylcbiAgICByZWFkb25seSBhc3NldHNDb25maWc6IEFzc2V0c0NvbmZpZ3VyYXRpb24gfCBudWxsLFxuICApIHtcbiAgICBpZiAoIXBhZ2VDb25maWcgJiYgaXNEZXZNb2RlKCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYHBhZ2VDb25maWcgaXMgbm90IHByb3ZpZGVkIHdoaWNoIG1heSBpbXBhY3QgdGhlIHBhdGggdGhhdCBpcyByZXNvbHZpbmcgYXNzZXRzXG4gICAgICAgICBwbGVhc2UgaW5jbHVkZSAqZWl0aGVyKiB0aGUgJ1dlYlNka01vZHVsZS5mb3JSb290KC4uLiknIGluIHlvdXIgQXBwTW9kdWxlIChmb3IgQ0ROIGRlcGxveW1lbnQpIG9yIFdlYlNka0FwaU1vZHVsZVxuICAgICAgICAgIChmb3IgQ1ggZGVwbG95bWVudClgLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlQXNzZXRzUmVzb2x2ZXIoY29uZmlnOiBBc3NldHNSZXNvbHZlckNvbmZpZyk6IEFzc2V0c1Jlc29sdmVyIHtcbiAgICBjb25zdCB3aWRnZXROYW1lID0gY29uZmlnLndpZGdldE5hbWU7XG4gICAgY29uc3QgYXNzZXRzSWRSZXNvbHZlciA9IGNvbmZpZy5nZXRVUklGcm9tQXNzZXRJRDtcbiAgICBjb25zdCBzdGF0aWNSb290ID0gdGhpcy5wYWdlQ29uZmlnID8gdGhpcy5wYWdlQ29uZmlnLnN0YXRpY1Jlc291cmNlc1Jvb3QgOiBERUZBVUxUX1NUQVRJQ19ST09UO1xuICAgIGNvbnN0IHN0YXRpY0l0ZW1OYW1lID0gdGhpcy5hc3NldHNDb25maWcgPyB0aGlzLmFzc2V0c0NvbmZpZy5hc3NldHNTdGF0aWNJdGVtTmFtZSA6IERFRkFVTFRfU1RBVElDX0lURU1fTkFNRTtcblxuICAgIHJldHVybiAoYXNzZXRJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+ID0+IHtcbiAgICAgIGlmICghYXNzZXRJZC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG9mKCcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZihcbiAgICAgICAgW3N0YXRpY1Jvb3QsIHN0YXRpY0l0ZW1OYW1lLCAnYXNzZXRzJywgd2lkZ2V0TmFtZSwgYXNzZXRzSWRSZXNvbHZlcihhc3NldElkKV1cbiAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgLm1hcChzdHIgPT4gc3RyLnJlcGxhY2UoL1xcLyQvLCAnJykpXG4gICAgICAgICAgLmpvaW4oJy8nKSxcbiAgICAgICk7XG4gICAgfTtcbiAgfVxufVxuIl19