import { Input, Optional, TemplateRef, ViewContainerRef, Directive, } from '@angular/core';
import { TemplateRegistry } from './template-registry';
/**
 *
 * @deprecated Will be removed in v7.0.0
 *
 * @description
 * Every custom template directive should extend this class.
 * See 'How to make widget customizable'
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * import { Component, Directive } from '@angular/core';
 * import { BbTemplate, ItemModel } from '@backbase/foundation-ang/core';
 *
 * @Component({
 *   selector: 'my-widget',
 *   template: `
 *   <li *ngFor="let item of pallete">
 *     My colors:
 *     <ng-container
 *       customItemTemplate
 *       [bbHostRef]="hostRef"
 *       [bbTemplateContext]="item"
 *     ></ng-container>
 *   </li>
 *
 *   <ng-template customItemTemplate let-hostRef let-item="context">
 *     Current name: {{ item.color }}
 *     Hex value: {{ hostRef.getHexColor(item.color) }}
 *   </ng-template>
 *   `,
 * })
 * export class MyWidgetComponent {
 *   readonly hostRef = this;
 *   readonly palette: Array<PaletteItem> = [{
 *     color: 'blue',
 *   }];
 *   readonly hexValues = {
 *     blue: '0000ff',
 *   };
 *
 *   constructor(private itemModel: ItemModel) {}
 *
 *   getHexColor(color: string): string | undefined {
 *     return this.hexValues[color];
 *   }
 * }
 *
 * type PaletteItem {
 *   color: string;
 * };
 *
 * @Directive({
 *   selector: '[customItemTemplate]',
 * })
 * export class customItemTemplate extends BbTemplate<MyWidgetComponent, PaletteItem> {}
 * ```
 */
/* eslint-disable @angular-eslint/directive-class-suffix */
export class BbTemplate {
    constructor(viewContainerRef, registry, templateRef) {
        this.viewContainerRef = viewContainerRef;
        this.registry = registry;
        this.templateRef = templateRef;
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.checkContainerHasHostRef();
        this.checkNgTemplateIsNotUsedtoDefineSlot();
        if (this.isContainer) {
            this.waitTemplate();
        }
        else {
            this.registry.set(this.templateId(), this.templateRef);
        }
    }
    templateId() {
        return this.constructor;
    }
    checkContainerHasHostRef() {
        if (this.isContainer && this.bbHostRef === undefined) {
            throw new Error(`${this.constructor.name}: Missing required input [bbHostRef]`);
        }
    }
    checkNgTemplateIsNotUsedtoDefineSlot() {
        if (!this.isContainer && this.bbHostRef) {
            throw new Error(`${this.constructor.name}: [bbHostRef] should not be used in conjunction with <ng-template>. Use <ng-container> instead.`);
        }
    }
    /**
     * @internal
     */
    ngOnChanges(changes) {
        if (!this.customTemplateContext) {
            return;
        }
        if ('bbTemplateContext' in changes) {
            this.customTemplateContext.context = changes.bbTemplateContext.currentValue;
        }
    }
    waitTemplate() {
        const templateSubject = this.registry.get(this.templateId());
        this.templateSubscription = templateSubject.subscribe((tempalateRef) => {
            this.viewContainerRef.clear();
            this.customTemplateContext = this.createContext();
            const view = tempalateRef.createEmbeddedView(this.customTemplateContext);
            this.viewContainerRef.insert(view);
        });
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        if (this.templateSubscription) {
            this.templateSubscription.unsubscribe();
        }
    }
    createContext() {
        if (this.bbHostRef === undefined) {
            throw new Error(`${this.constructor.name}: Missing required input [bbHostRef]`);
        }
        return {
            $implicit: this.bbHostRef,
            context: this.bbTemplateContext,
        };
    }
    get isContainer() {
        return !this.templateRef;
    }
}
BbTemplate.decorators = [
    { type: Directive, args: [{},] }
];
BbTemplate.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRegistry },
    { type: TemplateRef, decorators: [{ type: Optional }] }
];
BbTemplate.propDecorators = {
    bbTemplateContext: [{ type: Input }],
    bbHostRef: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,