import { HttpClient, } from '@angular/common/http';
import { throwError, race } from 'rxjs';
import { switchMap, catchError, map, take } from 'rxjs/operators';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const createInterceptCallback = (interceptConfig) => (responseError) => {
    return (responseError.status === interceptConfig.statusCode &&
        responseError.headers.get(interceptConfig.headerAttribute) !== null);
};
/**
 * @deprecated Will be removed in v7.0.0
 */
export const isInterceptCallback = (interceptConfig) => typeof interceptConfig === 'function';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const DEFAULT_STEPUP_CONFIG = {
    retryRequests: {
        headerAttribute: 'X-MFA',
    },
    interceptResponses: {
        statusCode: 401,
        headerAttribute: 'WWW-Authenticate',
    },
};
/**
 * @deprecated Will be removed in v7.0.0
 */
export class StepUpInterceptor {
    constructor(stepupService, config, injector) {
        this.stepupService = stepupService;
        this.config = config;
        this.injector = injector;
    }
    intercept(req, next) {
        const shouldIntercept = isInterceptCallback(this.config.interceptResponses)
            ? this.config.interceptResponses
            : createInterceptCallback(this.config.interceptResponses);
        return next.handle(req).pipe(catchError((error) => {
            var _a;
            if (!shouldIntercept(error)) {
                // if it's an error which shouldn't be intercepted propagate the error
                // to as if it wasn't intercepted at all.
                return throwError(error);
            }
            this.mediatorComponent = (_a = this.mediatorComponent) !== null && _a !== void 0 ? _a : this.stepupService.stepupComponent;
            // Errors which are to be intercepted should be "paused" and the stream will be handled according
            // to the event coming from a mediator component. On complete event we are going to retry the request
            // while if any other event was fired by the mediator component, we proceed with the error as usual
            const handleMediatorComponentEvent = ([event, token]) => {
                if (event === 'complete' && token) {
                    // The HttpClient cannot be injected because it is a circular dependency, so we must lazily get it only when required.
                    const http = this.injector.get(HttpClient);
                    return http.request(req.clone({ setHeaders: { [this.config.retryRequests.headerAttribute]: token } }));
                }
                else {
                    return throwError(error);
                }
            };
            // we listen to an event from mediator component in order to be able to amend
            // requests "chain", so we can repeat the request or just propagate the error
            const mediatorComponentResponse = race(this.mediatorComponent.instance.complete.pipe(map(value => ['complete', value])), this.mediatorComponent.instance.cancel.pipe(map(() => ['cancel', undefined]))).pipe(take(1), switchMap(handleMediatorComponentEvent));
            // and we trigger the component to open
            this.mediatorComponent.instance.open(error);
            return mediatorComponentResponse;
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHVwLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZS9zcmMvYmFja2Jhc2UtY29yZS9zdGVwdXAvc3RlcHVwLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFNTCxVQUFVLEdBQ1gsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixPQUFPLEVBQWMsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFxQmxFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FDckMsZUFBNEMsRUFDYixFQUFFLENBQUMsQ0FBQyxhQUFnQyxFQUFXLEVBQUU7SUFDaEYsT0FBTyxDQUNMLGFBQWEsQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLFVBQVU7UUFDbkQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLElBQUksQ0FDcEUsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FDakMsZUFBNEUsRUFDMUIsRUFBRSxDQUFDLE9BQU8sZUFBZSxLQUFLLFVBQVUsQ0FBQztBQXVDN0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBNEI7SUFDNUQsYUFBYSxFQUFFO1FBQ2IsZUFBZSxFQUFFLE9BQU87S0FDekI7SUFDRCxrQkFBa0IsRUFBRTtRQUNsQixVQUFVLEVBQUUsR0FBRztRQUNmLGVBQWUsRUFBRSxrQkFBa0I7S0FDcEM7Q0FDRixDQUFDO0FBYUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBTzVCLFlBQ21CLGFBQTRCLEVBQzVCLE1BQW9CLEVBQ3BCLFFBQWtCO1FBRmxCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLFdBQU0sR0FBTixNQUFNLENBQWM7UUFDcEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUNsQyxDQUFDO0lBRUosU0FBUyxDQUFPLEdBQW1CLEVBQUUsSUFBaUI7UUFDcEQsTUFBTSxlQUFlLEdBQWtDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7WUFDeEcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCO1lBQ2hDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDNUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsVUFBVSxDQUFDLENBQUMsS0FBd0IsRUFBZ0QsRUFBRTs7WUFDcEYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDM0Isc0VBQXNFO2dCQUN0RSx5Q0FBeUM7Z0JBQ3pDLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFCO1lBQ0QsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE1BQUEsSUFBSSxDQUFDLGlCQUFpQixtQ0FBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQztZQUV0RixpR0FBaUc7WUFDakcscUdBQXFHO1lBQ3JHLG1HQUFtRztZQUNuRyxNQUFNLDRCQUE0QixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUF3QixFQUE0QixFQUFFO2dCQUN2RyxJQUFJLEtBQUssS0FBSyxVQUFVLElBQUksS0FBSyxFQUFFO29CQUNqQyxzSEFBc0g7b0JBQ3RILE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFhLFVBQVUsQ0FBQyxDQUFDO29CQUN2RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzNHO3FCQUFNO29CQUNMLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMxQjtZQUNILENBQUMsQ0FBQztZQUVGLDZFQUE2RTtZQUM3RSw2RUFBNkU7WUFDN0UsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQ3BDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDM0MsR0FBRyxDQUF1QyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQ3hFLEVBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUN6QyxHQUFHLENBQWtDLEdBQUcsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQ2xFLENBQ0YsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7WUFFekQsdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVDLE9BQU8seUJBQXlCLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBFdmVudCxcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBJbnRlcmNlcHRvcixcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBFcnJvclJlc3BvbnNlLFxuICBIdHRwQ2xpZW50LFxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IsIHJhY2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgY2F0Y2hFcnJvciwgbWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3RlcFVwU2VydmljZSwgU3RlcFVwQ29tcG9uZW50LCBTdGVwVXBDb21wb25lbnRUeXBlIH0gZnJvbSAnLi9zdGVwdXAuc2VydmljZSc7XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IHR5cGUgU2hvdWxkSW50ZXJjZXB0U3RlcFVwQ2FsbGJhY2sgPSAocmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiBib29sZWFuO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2hvdWxkSW50ZXJjZXB0U3RlcFVwQ29uZmlnIHtcbiAgLyoqXG4gICAqIFN0ZXAtdXAgYXV0aGVudGljYXRpb24gaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHJlc3BvbnNlIGBzdGF0dXNDb2RlYCBtYXRjaGVzIHRoZSBvbmUgZGVmaW5lZCBieSB0aGlzIG9wdGlvbi5cbiAgICogRGVmYXVsdDogYDQwMWAuXG4gICAqL1xuICBzdGF0dXNDb2RlOiBudW1iZXI7XG4gIC8qKlxuICAgKiBTdGVwLXVwIGF1dGhlbnRpY2F0aW9uIGlzIHRyaWdnZXJlZCB3aGVuIHRoaXMgaGVhZGVyIGlzIHByZXNlbnQgaW4gYSBlcnJvciByZXNwb25zZSBpbiBjb21iaW5hdGlvbiB3aXRoIGBzdGF0dXNDb2RlYCBjaGVja1xuICAgKiBEZWZhdWx0OiBgV1dXLUF1dGhlbnRpY2F0ZWAuXG4gICAqL1xuICBoZWFkZXJBdHRyaWJ1dGU6IHN0cmluZztcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlSW50ZXJjZXB0Q2FsbGJhY2sgPSAoXG4gIGludGVyY2VwdENvbmZpZzogU2hvdWxkSW50ZXJjZXB0U3RlcFVwQ29uZmlnLFxuKTogU2hvdWxkSW50ZXJjZXB0U3RlcFVwQ2FsbGJhY2sgPT4gKHJlc3BvbnNlRXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiAoXG4gICAgcmVzcG9uc2VFcnJvci5zdGF0dXMgPT09IGludGVyY2VwdENvbmZpZy5zdGF0dXNDb2RlICYmXG4gICAgcmVzcG9uc2VFcnJvci5oZWFkZXJzLmdldChpbnRlcmNlcHRDb25maWcuaGVhZGVyQXR0cmlidXRlKSAhPT0gbnVsbFxuICApO1xufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY29uc3QgaXNJbnRlcmNlcHRDYWxsYmFjayA9IChcbiAgaW50ZXJjZXB0Q29uZmlnOiBTaG91bGRJbnRlcmNlcHRTdGVwVXBDYWxsYmFjayB8IFNob3VsZEludGVyY2VwdFN0ZXBVcENvbmZpZyxcbik6IGludGVyY2VwdENvbmZpZyBpcyBTaG91bGRJbnRlcmNlcHRTdGVwVXBDYWxsYmFjayA9PiB0eXBlb2YgaW50ZXJjZXB0Q29uZmlnID09PSAnZnVuY3Rpb24nO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqIFRoZSBzdGVwLXVwIGludGVyY2VwdG9yIGNvbmZpZ3VyYXRpb24gaW50ZXJmYWNlLlxuICogU3RlcC11cCBhdXRoZW50aWNhdGlvbiBwcm92aWRlcyBhIGhpZ2hlciBsZXZlbCBvZiBhc3N1cmFuY2UgdGhhdFxuICogYSBwZXJzb24gaXMgd2hvIHRoZXkgY2xhaW0gdG8gYmUuIFdoZW4gYSB1c2VyIHRyaWVzIHRvIHBlcmZvcm0gYSB0YXNrLFxuICogdGhleSBhcmUgY2hhbGxlbmdlZCB0byBwcm9kdWNlIGFkZGl0aW9uYWwgZm9ybXMgb2YgYXV0aGVudGljYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RlcFVwSW50ZXJjZXB0b3JDb25maWcge1xuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIHJldHJ5IHJlcXVlc3RzIG9mIHRoZSBzdGVwdXAgYXV0aGVudGljYXRpb24gbWVjaGFuaXNtLlxuICAgKi9cbiAgcmV0cnlSZXF1ZXN0czoge1xuICAgIC8qKlxuICAgICAqIFRoZSBrZXkgb2YgdGhlIGhlYWRlciB3aGljaCBpcyBhZGRlZCB0byB0aGUgcmV0cnkgcmVxdWVzdC5cbiAgICAgKiBUaGUgdmFsdWUgZm9yIHRoaXMgaGVhZGVyIHdpbGwgYmUgZGV0ZXJtaW5lZCBieSB0aGUgcGF5bG9hZCBvZiBhbiBldmVudFxuICAgICAqIGVtaXR0ZWQgYnkgdGhlIGBTdGVwVXBDb21wb25lbnRUeXBlLmNvbXBsZXRlYC4gU2VlIHRoZSBgU3RlcFVwQ29tcG9uZW50VHlwZWAgaW50ZXJmYWNlLlxuICAgICAqIERlZmF1bHQ6IGBYLU1GQWBcbiAgICAgKi9cbiAgICBoZWFkZXJBdHRyaWJ1dGU6IHN0cmluZztcbiAgfTtcbiAgLyoqXG4gICAqIElmIHRoaXMgaGVhZGVyIGlzIHByZXNlbnQsIG9uIGEgZXJyb3IgcmVzcG9uc2UgYW5kIGl0IG1hdGNoZXMgc3RhdHVzQ29kZSwgaXQgd2lsbCB0cmlnZ2VyIGEgc3RlcC11cCBtZWNoYW5pc21cbiAgICovXG4gIGludGVyY2VwdFJlc3BvbnNlczogU2hvdWxkSW50ZXJjZXB0U3RlcFVwQ2FsbGJhY2sgfCBTaG91bGRJbnRlcmNlcHRTdGVwVXBDb25maWc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogQ29uZmlndXJhdGlvbiBpbnRlcmZhY2UgZm9yIHRoZSBzdGVwLXVwIGF1dGhlbnRpY2F0aW9uLlxuICovXG5leHBvcnQgdHlwZSBTdGVwVXBDb25maWcgPSBTdGVwVXBJbnRlcmNlcHRvckNvbmZpZyAmIHtcbiAgLyoqXG4gICAqIFN0ZXAtdXAgY29tcG9uZW50IGNsYXNzLiBXaGVuIGEgc3RlcC11cCByZXF1ZXN0IGlzIGludGVyY2VwdGVkIHRoaXMgaXMgdGhlXG4gICAqIGNvbXBvbmVudCB3aGljaCB3aWxsIGJlIGRpc3BsYXllZCB0byByZXNvbHZlIHRoZSBzdGVwLXVwIGF1dGhlbnRpY2F0aW9uLlxuICAgKi9cbiAgbWVkaWF0b3JDb21wb25lbnRDbGFzczogU3RlcFVwQ29tcG9uZW50VHlwZTtcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1RFUFVQX0NPTkZJRzogU3RlcFVwSW50ZXJjZXB0b3JDb25maWcgPSB7XG4gIHJldHJ5UmVxdWVzdHM6IHtcbiAgICBoZWFkZXJBdHRyaWJ1dGU6ICdYLU1GQScsXG4gIH0sXG4gIGludGVyY2VwdFJlc3BvbnNlczoge1xuICAgIHN0YXR1c0NvZGU6IDQwMSxcbiAgICBoZWFkZXJBdHRyaWJ1dGU6ICdXV1ctQXV0aGVudGljYXRlJyxcbiAgfSxcbn07XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IHR5cGUgU3RlcHVwQ29tcG9uZW50Q29tcGxldGVFdmVudCA9IFsnY29tcGxldGUnLCBzdHJpbmddO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCB0eXBlIFN0ZXB1cENvbXBvbmVudENhbmNlbEV2ZW50ID0gWydjYW5jZWwnLCB1bmRlZmluZWRdO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCB0eXBlIFN0ZXB1cENvbXBvbmVudEV2ZW50cyA9IFN0ZXB1cENvbXBvbmVudENhbmNlbEV2ZW50IHwgU3RlcHVwQ29tcG9uZW50Q29tcGxldGVFdmVudDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY2xhc3MgU3RlcFVwSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgU2hvdWxkIG5vdCBiZSBwdWJsaWNcbiAgICogQHRvZG8gY29udmVydCB0byBhIGxvY2FsIHZhcmlhYmxlIHdpdGhpbiAgdGhlIGludGVyY2VwdCBoYW5kbGVyXG4gICAqL1xuICBtZWRpYXRvckNvbXBvbmVudDogQ29tcG9uZW50UmVmPFN0ZXBVcENvbXBvbmVudD4gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGVwdXBTZXJ2aWNlOiBTdGVwVXBTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBTdGVwVXBDb25maWcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICkge31cblxuICBpbnRlcmNlcHQ8UiwgVD4ocmVxOiBIdHRwUmVxdWVzdDxSPiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj4ge1xuICAgIGNvbnN0IHNob3VsZEludGVyY2VwdDogU2hvdWxkSW50ZXJjZXB0U3RlcFVwQ2FsbGJhY2sgPSBpc0ludGVyY2VwdENhbGxiYWNrKHRoaXMuY29uZmlnLmludGVyY2VwdFJlc3BvbnNlcylcbiAgICAgID8gdGhpcy5jb25maWcuaW50ZXJjZXB0UmVzcG9uc2VzXG4gICAgICA6IGNyZWF0ZUludGVyY2VwdENhbGxiYWNrKHRoaXMuY29uZmlnLmludGVyY2VwdFJlc3BvbnNlcyk7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IE9ic2VydmFibGU8bmV2ZXI+IHwgT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8VD4+ID0+IHtcbiAgICAgICAgaWYgKCFzaG91bGRJbnRlcmNlcHQoZXJyb3IpKSB7XG4gICAgICAgICAgLy8gaWYgaXQncyBhbiBlcnJvciB3aGljaCBzaG91bGRuJ3QgYmUgaW50ZXJjZXB0ZWQgcHJvcGFnYXRlIHRoZSBlcnJvclxuICAgICAgICAgIC8vIHRvIGFzIGlmIGl0IHdhc24ndCBpbnRlcmNlcHRlZCBhdCBhbGwuXG4gICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVkaWF0b3JDb21wb25lbnQgPSB0aGlzLm1lZGlhdG9yQ29tcG9uZW50ID8/IHRoaXMuc3RlcHVwU2VydmljZS5zdGVwdXBDb21wb25lbnQ7XG5cbiAgICAgICAgLy8gRXJyb3JzIHdoaWNoIGFyZSB0byBiZSBpbnRlcmNlcHRlZCBzaG91bGQgYmUgXCJwYXVzZWRcIiBhbmQgdGhlIHN0cmVhbSB3aWxsIGJlIGhhbmRsZWQgYWNjb3JkaW5nXG4gICAgICAgIC8vIHRvIHRoZSBldmVudCBjb21pbmcgZnJvbSBhIG1lZGlhdG9yIGNvbXBvbmVudC4gT24gY29tcGxldGUgZXZlbnQgd2UgYXJlIGdvaW5nIHRvIHJldHJ5IHRoZSByZXF1ZXN0XG4gICAgICAgIC8vIHdoaWxlIGlmIGFueSBvdGhlciBldmVudCB3YXMgZmlyZWQgYnkgdGhlIG1lZGlhdG9yIGNvbXBvbmVudCwgd2UgcHJvY2VlZCB3aXRoIHRoZSBlcnJvciBhcyB1c3VhbFxuICAgICAgICBjb25zdCBoYW5kbGVNZWRpYXRvckNvbXBvbmVudEV2ZW50ID0gKFtldmVudCwgdG9rZW5dOiBTdGVwdXBDb21wb25lbnRFdmVudHMpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj4gPT4ge1xuICAgICAgICAgIGlmIChldmVudCA9PT0gJ2NvbXBsZXRlJyAmJiB0b2tlbikge1xuICAgICAgICAgICAgLy8gVGhlIEh0dHBDbGllbnQgY2Fubm90IGJlIGluamVjdGVkIGJlY2F1c2UgaXQgaXMgYSBjaXJjdWxhciBkZXBlbmRlbmN5LCBzbyB3ZSBtdXN0IGxhemlseSBnZXQgaXQgb25seSB3aGVuIHJlcXVpcmVkLlxuICAgICAgICAgICAgY29uc3QgaHR0cCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEh0dHBDbGllbnQ+KEh0dHBDbGllbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGh0dHAucmVxdWVzdDxUPihyZXEuY2xvbmUoeyBzZXRIZWFkZXJzOiB7IFt0aGlzLmNvbmZpZy5yZXRyeVJlcXVlc3RzLmhlYWRlckF0dHJpYnV0ZV06IHRva2VuIH0gfSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHdlIGxpc3RlbiB0byBhbiBldmVudCBmcm9tIG1lZGlhdG9yIGNvbXBvbmVudCBpbiBvcmRlciB0byBiZSBhYmxlIHRvIGFtZW5kXG4gICAgICAgIC8vIHJlcXVlc3RzIFwiY2hhaW5cIiwgc28gd2UgY2FuIHJlcGVhdCB0aGUgcmVxdWVzdCBvciBqdXN0IHByb3BhZ2F0ZSB0aGUgZXJyb3JcbiAgICAgICAgY29uc3QgbWVkaWF0b3JDb21wb25lbnRSZXNwb25zZSA9IHJhY2U8U3RlcHVwQ29tcG9uZW50RXZlbnRzPihcbiAgICAgICAgICB0aGlzLm1lZGlhdG9yQ29tcG9uZW50Lmluc3RhbmNlLmNvbXBsZXRlLnBpcGUoXG4gICAgICAgICAgICBtYXA8c3RyaW5nLCBTdGVwdXBDb21wb25lbnRDb21wbGV0ZUV2ZW50Pih2YWx1ZSA9PiBbJ2NvbXBsZXRlJywgdmFsdWVdKSxcbiAgICAgICAgICApLFxuICAgICAgICAgIHRoaXMubWVkaWF0b3JDb21wb25lbnQuaW5zdGFuY2UuY2FuY2VsLnBpcGUoXG4gICAgICAgICAgICBtYXA8YW55LCBTdGVwdXBDb21wb25lbnRDYW5jZWxFdmVudD4oKCkgPT4gWydjYW5jZWwnLCB1bmRlZmluZWRdKSxcbiAgICAgICAgICApLFxuICAgICAgICApLnBpcGUodGFrZSgxKSwgc3dpdGNoTWFwKGhhbmRsZU1lZGlhdG9yQ29tcG9uZW50RXZlbnQpKTtcblxuICAgICAgICAvLyBhbmQgd2UgdHJpZ2dlciB0aGUgY29tcG9uZW50IHRvIG9wZW5cbiAgICAgICAgdGhpcy5tZWRpYXRvckNvbXBvbmVudC5pbnN0YW5jZS5vcGVuKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yQ29tcG9uZW50UmVzcG9uc2U7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG4iXX0=