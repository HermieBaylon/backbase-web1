import { ComponentFactoryResolver, Injectable, Inject, InjectionToken, } from '@angular/core';
import { DEFAULT_STEPUP_CONFIG } from './stepup.interceptor';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const STEPUP_CONFIG = new InjectionToken('Custom step-up configuration injection token');
/**
 * @deprecated Will be removed in v7.0.0
 */
export class StepUpService {
    constructor(resolver, stepupConfigParam) {
        this.resolver = resolver;
        this.stepupConfig = Object.assign(Object.assign({}, DEFAULT_STEPUP_CONFIG), stepupConfigParam);
    }
    get stepupComponent() {
        if (this.stepupComponentRef) {
            return this.stepupComponentRef;
        }
        throw new Error('No stepupComponent defined');
    }
    createStepUpComponent(stepupContainer) {
        stepupContainer.clear();
        const factory = this.resolver.resolveComponentFactory(this.stepupConfig.mediatorComponentClass);
        this.stepupComponentRef = stepupContainer.createComponent(factory);
    }
}
StepUpService.decorators = [
    { type: Injectable }
];
StepUpService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Inject, args: [STEPUP_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHVwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL3N0ZXB1cC9zdGVwdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsd0JBQXdCLEVBRXhCLFVBQVUsRUFFVixNQUFNLEVBQ04sY0FBYyxHQUNmLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBZ0IscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUczRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBZSw4Q0FBOEMsQ0FBQyxDQUFDO0FBNkI5Rzs7R0FFRztBQUVILE1BQU0sT0FBTyxhQUFhO0lBSXhCLFlBQ21CLFFBQWtDLEVBQzVCLGlCQUFxQztRQUQzQyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUduRCxJQUFJLENBQUMsWUFBWSxtQ0FBUSxxQkFBcUIsR0FBSyxpQkFBaUIsQ0FBRSxDQUFDO0lBQ3pFLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7U0FDaEM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHFCQUFxQixDQUFDLGVBQWlDO1FBQ3JELGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4QixNQUFNLE9BQU8sR0FBc0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FDdEYsSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FDekMsQ0FBQztRQUNGLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxlQUFlLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JFLENBQUM7OztZQXpCRixVQUFVOzs7WUE3Q1Qsd0JBQXdCOzRDQW9EckIsTUFBTSxTQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgQ29tcG9uZW50RmFjdG9yeSxcbiAgSW5qZWN0YWJsZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbmplY3QsXG4gIEluamVjdGlvblRva2VuLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0ZXBVcENvbmZpZywgREVGQVVMVF9TVEVQVVBfQ09ORklHIH0gZnJvbSAnLi9zdGVwdXAuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgQ3VzdG9tU3RlcFVwQ29uZmlnIH0gZnJvbSAnLi9zdGVwdXAubW9kdWxlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBTVEVQVVBfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPFN0ZXBVcENvbmZpZz4oJ0N1c3RvbSBzdGVwLXVwIGNvbmZpZ3VyYXRpb24gaW5qZWN0aW9uIHRva2VuJyk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogVGhlIGludGVyZmFjZSB3aGljaCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYnkgYSBzdGVwVXAgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RlcFVwQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoZSBzZWNyZXQgaGFzIGJlZW4gcHJvdmlkZWQgYnkgdGhlIHVzZXIgdmlhIHRoZSBgU3RlcFVwQ29tcG9uZW50YC5cbiAgICogQWZ0ZXIgaXQgZW1pdHMgdGhlIHJldHJ5IHJlcXVlc3Qgd2lsbCBiZSBzZW50IHRvIHRoZSBBUEkgZW5kcG9pbnQuXG4gICAqL1xuICBjb21wbGV0ZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gIC8qKlxuICAgKiBUaGUgU3RlcFVwQ29tcG9uZW50IGluc3RhbmNlIGVtaXRzIHRoaXMgY2FuY2VsIGV2ZW50IHRvIHRyaWdnZXIgc3RhbmRhcmQgYmVoYXZpb3VyLlxuICAgKiBUaGF0IGlzLCB0aGVyZSBpcyBubyByZXRyeSByZXF1ZXN0IGFuZCBIdHRwRXZlbnQgaXMgcHJvcGFnYXRlZCB0byB0aGUgbmV4dCBpbnRlcmNlcHRvciBpbiB0aGUgY2hhaW4uXG4gICAqL1xuICBjYW5jZWw6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAvKipcbiAgICogVGhlIG1ldGhvZCBvZiB0aGUgYFN0ZXBVcENvbXBvbmVudGAgd2hpY2ggaXMgY2FsbGVkIHdoZW4gYSByZXF1ZXN0IGlzIGludGVyY2VwdGVkLlxuICAgKiBUcmlnZ2VyIHRoaXMgbWV0aG9kIHNob3VsZCBzaG93IHRoZSBjb21wb25lbnQgd2hlcmUgdXNlciBjYW4gcHJvdmlkZSBhIHNlY29uZCBzdGVwIFwic2VjcmV0XCIuXG4gICAqL1xuICBvcGVuOiAocmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqIFRoZSB0eXBlIHdoaWNoIGRlZmluZXMgdGhlIFN0ZXBVcENvbXBvbmVudCBzaWduYXR1cmVcbiAqL1xuZXhwb3J0IHR5cGUgU3RlcFVwQ29tcG9uZW50VHlwZSA9IG5ldyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gU3RlcFVwQ29tcG9uZW50O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdGVwVXBTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGVwdXBDb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxTdGVwVXBDb21wb25lbnQ+IHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHJlYWRvbmx5IHN0ZXB1cENvbmZpZzogU3RlcFVwQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBASW5qZWN0KFNURVBVUF9DT05GSUcpIHN0ZXB1cENvbmZpZ1BhcmFtOiBDdXN0b21TdGVwVXBDb25maWcsXG4gICkge1xuICAgIHRoaXMuc3RlcHVwQ29uZmlnID0geyAuLi5ERUZBVUxUX1NURVBVUF9DT05GSUcsIC4uLnN0ZXB1cENvbmZpZ1BhcmFtIH07XG4gIH1cblxuICBnZXQgc3RlcHVwQ29tcG9uZW50KCk6IENvbXBvbmVudFJlZjxTdGVwVXBDb21wb25lbnQ+IHtcbiAgICBpZiAodGhpcy5zdGVwdXBDb21wb25lbnRSZWYpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0ZXB1cENvbXBvbmVudFJlZjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBzdGVwdXBDb21wb25lbnQgZGVmaW5lZCcpO1xuICB9XG5cbiAgY3JlYXRlU3RlcFVwQ29tcG9uZW50KHN0ZXB1cENvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZikge1xuICAgIHN0ZXB1cENvbnRhaW5lci5jbGVhcigpO1xuICAgIGNvbnN0IGZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8U3RlcFVwQ29tcG9uZW50PiA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoXG4gICAgICB0aGlzLnN0ZXB1cENvbmZpZy5tZWRpYXRvckNvbXBvbmVudENsYXNzLFxuICAgICk7XG4gICAgdGhpcy5zdGVwdXBDb21wb25lbnRSZWYgPSBzdGVwdXBDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuICB9XG59XG4iXX0=