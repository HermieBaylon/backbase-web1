import { ComponentFactoryResolver, Injectable, Inject, InjectionToken, } from '@angular/core';
export const SESSION_TIMEOUT_CONFIG = new InjectionToken('Custom session timeout configuration injection token');
/**
 * The session timeout service creates a session timeout component instance within the root.
 */
export class SessionTimeoutService {
    constructor(resolver, sessionTimeoutConfig) {
        this.resolver = resolver;
        this.sessionTimeoutConfig = sessionTimeoutConfig;
    }
    get sessionTimeoutComponent() {
        if (this.sessionTimeoutComponentRef) {
            return this.sessionTimeoutComponentRef;
        }
        throw new Error('No sessionTimeoutComponent defined');
    }
    createSessionTimeoutComponent(sessionTimeoutContainer) {
        sessionTimeoutContainer.clear();
        const factory = this.resolver.resolveComponentFactory(this.sessionTimeoutConfig.sessionTimeoutComponentClass);
        this.sessionTimeoutComponentRef = sessionTimeoutContainer.createComponent(factory);
        this.sessionTimeoutComponentRef.instance.inactivityModalTime = this.sessionTimeoutConfig.inactivityModalTime;
    }
}
SessionTimeoutService.decorators = [
    { type: Injectable }
];
SessionTimeoutService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Inject, args: [SESSION_TIMEOUT_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi10aW1lb3V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL3Nlc3Npb24tdGltZW91dC9zZXNzaW9uLXRpbWVvdXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsd0JBQXdCLEVBRXhCLFVBQVUsRUFDVixNQUFNLEVBQ04sY0FBYyxHQUNmLE1BQU0sZUFBZSxDQUFDO0FBaUJ2QixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGNBQWMsQ0FDdEQsc0RBQXNELENBQ3ZELENBQUM7QUFrQkY7O0dBRUc7QUFFSCxNQUFNLE9BQU8scUJBQXFCO0lBR2hDLFlBQ21CLFFBQWtDLEVBQ0Ysb0JBQTBDO1FBRDFFLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ0YseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtJQUMxRixDQUFDO0lBRUosSUFBSSx1QkFBdUI7UUFDekIsSUFBSSxJQUFJLENBQUMsMEJBQTBCLEVBQUU7WUFDbkMsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUM7U0FDeEM7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELDZCQUE2QixDQUFDLHVCQUF5QztRQUNyRSx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE9BQU8sR0FBOEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FDOUYsSUFBSSxDQUFDLG9CQUFvQixDQUFDLDRCQUE0QixDQUN2RCxDQUFDO1FBQ0YsSUFBSSxDQUFDLDBCQUEwQixHQUFHLHVCQUF1QixDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsMEJBQTBCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxtQkFBbUIsQ0FBQztJQUMvRyxDQUFDOzs7WUF2QkYsVUFBVTs7O1lBN0NULHdCQUF3Qjs0Q0FtRHJCLE1BQU0sU0FBQyxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRSZWYsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgQ29tcG9uZW50RmFjdG9yeSxcbiAgSW5qZWN0YWJsZSxcbiAgSW5qZWN0LFxuICBJbmplY3Rpb25Ub2tlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVGhlIHNlc3Npb24gdGltZW91dCBjb25maWd1cmF0aW9uLlxuICogQWxsb3dzIHRoZSBhcHBsaWNhdGlvbiB0byBtYW5hZ2UgdGhlIHNlc3Npb24gdGltZW91dCBjb21wb25lbnQgY2xhc3MgYW5kIGluYWN0aXZpdHkgbW9kYWwgdGltZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uVGltZW91dENvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgY29tcG9uZW50IHRvIGJlIHVzZWQgZm9yIHN0ZXB1cCBtZWNoYW5pc21cbiAgICovXG4gIHNlc3Npb25UaW1lb3V0Q29tcG9uZW50Q2xhc3M6IFNlc3Npb25UaW1lb3V0Q29tcG9uZW50VHlwZTtcbiAgLyoqXG4gICAqIFRoZSB0aW1lIGJlZm9yZSBzZXNzaW9uIGV4cGlyeSB0aGF0IHRoZSBtb2RhbCBzaG91bGQgYXBwZWFyIGluIHNlY29uZHNcbiAgICovXG4gIGluYWN0aXZpdHlNb2RhbFRpbWU6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IFNFU1NJT05fVElNRU9VVF9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48U2Vzc2lvblRpbWVvdXRDb25maWc+KFxuICAnQ3VzdG9tIHNlc3Npb24gdGltZW91dCBjb25maWd1cmF0aW9uIGluamVjdGlvbiB0b2tlbicsXG4pO1xuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIGEgU2Vzc2lvblRpbWVvdXRDb21wb25lbnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uVGltZW91dENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB0aW1lIGluIHNlY29uZHMgdG8gb3BlbiB0aGUgc2Vzc2lvbiB0aW1lb3V0IG1vZGFsIGJlZm9yZSBzZXNzaW9uIGV4cGlyeS5cbiAgICogVGhpcyB3aWxsIGJlIG92ZXJ3cml0dGVuIGlmIHlvdSBzZXQgYG1heEluYWN0aXZpdHlEdXJhdGlvbmAgaW4gdGhlIGV4cGVyaWVuY2UgY29uZmlndXJhdGlvblxuICAgKi9cbiAgaW5hY3Rpdml0eU1vZGFsVGltZTogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRoZSBzZXNzaW9uIHRpbWVvdXQgY29tcG9uZW50IHR5cGUsIHNldCB0byBTZXNzaW9uVGltZW91dENvbXBvbmVudFxuICovXG5leHBvcnQgdHlwZSBTZXNzaW9uVGltZW91dENvbXBvbmVudFR5cGUgPSBuZXcgKC4uLmFyZ3M6IEFycmF5PGFueT4pID0+IFNlc3Npb25UaW1lb3V0Q29tcG9uZW50O1xuXG4vKipcbiAqIFRoZSBzZXNzaW9uIHRpbWVvdXQgc2VydmljZSBjcmVhdGVzIGEgc2Vzc2lvbiB0aW1lb3V0IGNvbXBvbmVudCBpbnN0YW5jZSB3aXRoaW4gdGhlIHJvb3QuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZXNzaW9uVGltZW91dFNlcnZpY2Uge1xuICBwcml2YXRlIHNlc3Npb25UaW1lb3V0Q29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8U2Vzc2lvblRpbWVvdXRDb21wb25lbnQ+IHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBASW5qZWN0KFNFU1NJT05fVElNRU9VVF9DT05GSUcpIHByaXZhdGUgcmVhZG9ubHkgc2Vzc2lvblRpbWVvdXRDb25maWc6IFNlc3Npb25UaW1lb3V0Q29uZmlnLFxuICApIHt9XG5cbiAgZ2V0IHNlc3Npb25UaW1lb3V0Q29tcG9uZW50KCk6IENvbXBvbmVudFJlZjxTZXNzaW9uVGltZW91dENvbXBvbmVudD4ge1xuICAgIGlmICh0aGlzLnNlc3Npb25UaW1lb3V0Q29tcG9uZW50UmVmKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXNzaW9uVGltZW91dENvbXBvbmVudFJlZjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBzZXNzaW9uVGltZW91dENvbXBvbmVudCBkZWZpbmVkJyk7XG4gIH1cblxuICBjcmVhdGVTZXNzaW9uVGltZW91dENvbXBvbmVudChzZXNzaW9uVGltZW91dENvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZikge1xuICAgIHNlc3Npb25UaW1lb3V0Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgY29uc3QgZmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeTxTZXNzaW9uVGltZW91dENvbXBvbmVudD4gPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFxuICAgICAgdGhpcy5zZXNzaW9uVGltZW91dENvbmZpZy5zZXNzaW9uVGltZW91dENvbXBvbmVudENsYXNzLFxuICAgICk7XG4gICAgdGhpcy5zZXNzaW9uVGltZW91dENvbXBvbmVudFJlZiA9IHNlc3Npb25UaW1lb3V0Q29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcbiAgICB0aGlzLnNlc3Npb25UaW1lb3V0Q29tcG9uZW50UmVmLmluc3RhbmNlLmluYWN0aXZpdHlNb2RhbFRpbWUgPSB0aGlzLnNlc3Npb25UaW1lb3V0Q29uZmlnLmluYWN0aXZpdHlNb2RhbFRpbWU7XG4gIH1cbn1cbiJdfQ==