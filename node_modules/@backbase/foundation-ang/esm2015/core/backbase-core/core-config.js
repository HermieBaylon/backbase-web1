import { InjectionToken } from '@angular/core';
export const DEPRECATED_WITH_CONFIG = new InjectionToken('Flags whether BackbaseCoreModule.withConfig was called with deprecated options');
export const logDeprecatedConfig = (deprecationService, deprecatedConfigs) => {
    const deprecatedOptions = deprecatedConfigs.reduce((acc, deprecatedConfig) => [
        ...acc,
        ...Object.keys(deprecatedConfig).filter(key => deprecatedConfig[key] !== undefined),
    ], []);
    if (deprecatedOptions.length > 0) {
        deprecationService.logDeprecatedFeature(`Deprecated options (${deprecatedOptions.join(', ')}) ` +
            'being used with BackbaseCoreModule.withConfig. Use BackbaseCoreModule.forRoot instead.');
    }
};
export const createLogDeprecatedConfig = (deprecationService, deprecatedConfig) => {
    return logDeprecatedConfig.bind(null, deprecationService, deprecatedConfig);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL2NvcmUtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUE0Ri9DLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLElBQUksY0FBYyxDQUN0RCxnRkFBZ0YsQ0FDakYsQ0FBQztBQVVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLGtCQUF1QyxFQUN2QyxpQkFBOEMsRUFDOUMsRUFBRTtJQUNGLE1BQU0saUJBQWlCLEdBQWtCLGlCQUFpQixDQUFDLE1BQU0sQ0FDL0QsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO1FBQ3pCLEdBQUcsR0FBRztRQUNOLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsQ0FBQztLQUNwRixFQUNELEVBQUUsQ0FDSCxDQUFDO0lBQ0YsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2hDLGtCQUFrQixDQUFDLG9CQUFvQixDQUNyQyx1QkFBdUIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQ3JELHdGQUF3RixDQUMzRixDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUN2QyxrQkFBdUMsRUFDdkMsZ0JBQTZDLEVBQzdDLEVBQUU7SUFDRixPQUFPLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUM5RSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRNYXAgfSBmcm9tICcuL3JlbmRlcmluZy9pdGVtLXJlZ2lzdHJ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tbXVuaWNhdGlvbkZsb3dDb25maWcgfSBmcm9tICcuL2NvbW11bmljYXRpb24vZGVwcmVjYXRlZC9mbG93cy5zZXJ2aWNlJztcbmltcG9ydCB7IEFzc2V0c0NvbmZpZ3VyYXRpb24gfSBmcm9tICcuL2Fzc2V0cy9hc3NldHMuc2VydmljZSc7XG5pbXBvcnQgeyBFbmFibGVkRmVhdHVyZXNDb25maWcsIERlcHJlY2F0aW9uc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZnV0dXJlJztcbmltcG9ydCB7IFJvdXRlR3VhcmRzQ29uZmlnIH0gZnJvbSAnLi9yb3V0aW5nL2d1YXJkcy9yb3V0ZS1ndWFyZHMtcmVnaXN0cnkuc2VydmljZSc7XG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGlwZWxpbmVQcm9jZXNzb3JDb25maWcgfSBmcm9tICcuL2NvbW11bmljYXRpb24vcGlwZXMvcGlwZWxpbmUtcmVnaXN0cnknO1xuaW1wb3J0IHsgTGF6eUNvbmZpZyB9IGZyb20gJy4vcmVuZGVyaW5nL2xhenktY29uZmlnJztcblxuLyoqXG4gKiBPcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgQmFja2Jhc2UgQ29yZSBGdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tiYXNlQ29yZUNvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogQSBoYXNoIG1hcCBvZiBCYWNrYmFzZSBJdGVtIGNvbXBvbmVudHMgKHdpZGdldCBvciBjb250YWluZXIpLFxuICAgKiB3aGVyZSBrZXkgaXMgc3RyaW5nIG1hdGNoaW5nIHRoZSBgY2xhc3NJZGAgaXRlbSBwcm9wZXJ0eSxcbiAgICogYW5kIHZhbHVlIGlzIHRoZSBBbmd1bGFyIGNvbXBvbmVudCBDbGFzcy5cbiAgICovXG4gIGNsYXNzTWFwPzogQ29tcG9uZW50TWFwO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBSb3V0ZSBHdWFyZHMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gcm91dGVzIGJhc2VkIG9uIHRoZSBJdGVtIE1vZGVsXG4gICAqXG4gICAqIFRoaXMgb25seSBhbGxvd3MgZ3VhcmRzIHRvIGJlIGNvbmZpZ3VyZWQgdmlhIHRoZSBJdGVtIE1vZGVsIHByb3BlcnRpZXMgLSB0aGUgZ3VhcmRzXG4gICAqIG11c3Qgc3RpbGwgYmUgcHJvdmlkZWQgaW4gYSBgTmdNb2R1bGVgIGBwcm92aWRlcnNgLlxuICAgKi9cbiAgZ3VhcmRzPzogUm91dGVHdWFyZHNDb25maWc7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSB0aGUgaW5wdXQvb3V0cHV0IHByb2Nlc3NvcnMgYXZhaWxhYmxlIGluXG4gICAqIHRoaXMgYXBwIChpbiBhZGRpdGlvbiB0byB0aGUgZGVmYXVsdCBwcm9jZXNzb3JzKS5cbiAgICovXG4gIHBpcGVsaW5lUHJvY2Vzc29ycz86IEFycmF5PFBpcGVsaW5lUHJvY2Vzc29yQ29uZmlnPjtcbn1cblxuLyoqXG4gKiBPcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgQmFja2Jhc2UgQ29yZSBGdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tiYXNlUm9vdENvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogQXBwbGljYXRpb24gYXNzZXRzIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBhc3NldHM/OiBBc3NldHNDb25maWd1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBBIGhhc2ggbWFwIG9mIEJhY2tiYXNlIEl0ZW0gY29tcG9uZW50cyAod2lkZ2V0IG9yIGNvbnRhaW5lciksXG4gICAqIHdoZXJlIGtleSBpcyBzdHJpbmcgbWF0Y2hpbmcgdGhlIGBjbGFzc0lkYCBpdGVtIHByb3BlcnR5LFxuICAgKiBhbmQgdmFsdWUgaXMgdGhlIEFuZ3VsYXIgY29tcG9uZW50IENsYXNzLlxuICAgKi9cbiAgY2xhc3NNYXA/OiBDb21wb25lbnRNYXA7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb2YgXCJuYXZpZ2F0aW9uXCIgb3V0cHV0IGhhbmRsZXIuXG4gICAqL1xuICBmbG93cz86IEFycmF5PENvbW11bmljYXRpb25GbG93Q29uZmlnPjtcblxuICAvKipcbiAgICogQ29uZmlndXJlIHRoZSBpbnB1dC9vdXRwdXQgcHJvY2Vzc29ycyBhdmFpbGFibGUgaW5cbiAgICogdGhpcyBhcHAgKGluIGFkZGl0aW9uIHRvIHRoZSBkZWZhdWx0IHByb2Nlc3NvcnMpLlxuICAgKi9cbiAgcGlwZWxpbmVQcm9jZXNzb3JzPzogQXJyYXk8UGlwZWxpbmVQcm9jZXNzb3JDb25maWc+O1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBSb3V0ZSBHdWFyZHMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gcm91dGVzIGJhc2VkIG9uIHRoZSBJdGVtIE1vZGVsXG4gICAqXG4gICAqIFRoaXMgb25seSBhbGxvd3MgZ3VhcmRzIHRvIGJlIGNvbmZpZ3VyZWQgdmlhIHRoZSBJdGVtIE1vZGVsIHByb3BlcnRpZXMgLSB0aGUgZ3VhcmRzXG4gICAqIG11c3Qgc3RpbGwgYmUgcHJvdmlkZWQgaW4gYSBgTmdNb2R1bGVgIGBwcm92aWRlcnNgLlxuICAgKi9cbiAgZ3VhcmRzPzogUm91dGVHdWFyZHNDb25maWc7XG5cbiAgLyoqXG4gICAqIERlY2lkZSBpZiBkZXByZWNhdGlvbiB3YXJuaW5ncyBzaG91bGQgYmUgbG9nZ2VkIHRvIHRoZSBkZXZlbG9wZXIgY29uc29sZS5cbiAgICovXG4gIGxvZ0RlcHJlY2F0aW9ucz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIE9wdCBpbiB0byBmdXR1cmUgZmVhdHVyZXMuXG4gICAqL1xuICBmZWF0dXJlcz86IEVuYWJsZWRGZWF0dXJlc0NvbmZpZztcblxuICAvKipcbiAgICogT3B0aW9uIGZvciBsYXp5IGxvYWRlZCBtb2R1bGVzIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBsYXp5TW9kdWxlcz86IExhenlDb25maWc7XG59XG5cbmV4cG9ydCB7IENvbXBvbmVudE1hcCwgQ29tcG9uZW50Q2xhc3MgfSBmcm9tICcuL3JlbmRlcmluZy9pdGVtLXJlZ2lzdHJ5LnNlcnZpY2UnO1xuZXhwb3J0IHtcbiAgQ29tbXVuaWNhdGlvbkZsb3dDb25maWcsXG4gIENvbXBvbmVudE91dHB1dENvbmZpZyxcbiAgQ29tcG9uZW50SW5wdXRDb25maWcsXG4gIENsYXNzSWQsXG4gIE91dHB1dE5hbWUsXG4gIElucHV0TmFtZSxcbn0gZnJvbSAnLi9jb21tdW5pY2F0aW9uL2RlcHJlY2F0ZWQvZmxvd3Muc2VydmljZSc7XG5leHBvcnQgeyBFbmFibGVkRmVhdHVyZXNDb25maWcgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZnV0dXJlJztcblxuZXhwb3J0IGNvbnN0IERFUFJFQ0FURURfV0lUSF9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48RGVwcmVjYXRlZFdpdGhDb25maWc+KFxuICAnRmxhZ3Mgd2hldGhlciBCYWNrYmFzZUNvcmVNb2R1bGUud2l0aENvbmZpZyB3YXMgY2FsbGVkIHdpdGggZGVwcmVjYXRlZCBvcHRpb25zJyxcbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVwcmVjYXRlZFdpdGhDb25maWcge1xuICBhc3NldHM/OiBhbnk7XG4gIGxvZ0RlcHJlY2F0aW9uc1NlcnZpY2U/OiBhbnk7XG4gIGZlYXR1cmVzPzogYW55O1xuICBmbG93cz86IGFueTtcbiAgW2tleTogc3RyaW5nXTogYW55IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgbG9nRGVwcmVjYXRlZENvbmZpZyA9IChcbiAgZGVwcmVjYXRpb25TZXJ2aWNlOiBEZXByZWNhdGlvbnNTZXJ2aWNlLFxuICBkZXByZWNhdGVkQ29uZmlnczogQXJyYXk8RGVwcmVjYXRlZFdpdGhDb25maWc+LFxuKSA9PiB7XG4gIGNvbnN0IGRlcHJlY2F0ZWRPcHRpb25zOiBBcnJheTxzdHJpbmc+ID0gZGVwcmVjYXRlZENvbmZpZ3MucmVkdWNlPEFycmF5PHN0cmluZz4+KFxuICAgIChhY2MsIGRlcHJlY2F0ZWRDb25maWcpID0+IFtcbiAgICAgIC4uLmFjYyxcbiAgICAgIC4uLk9iamVjdC5rZXlzKGRlcHJlY2F0ZWRDb25maWcpLmZpbHRlcihrZXkgPT4gZGVwcmVjYXRlZENvbmZpZ1trZXldICE9PSB1bmRlZmluZWQpLFxuICAgIF0sXG4gICAgW10sXG4gICk7XG4gIGlmIChkZXByZWNhdGVkT3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgZGVwcmVjYXRpb25TZXJ2aWNlLmxvZ0RlcHJlY2F0ZWRGZWF0dXJlKFxuICAgICAgYERlcHJlY2F0ZWQgb3B0aW9ucyAoJHtkZXByZWNhdGVkT3B0aW9ucy5qb2luKCcsICcpfSkgYCArXG4gICAgICAgICdiZWluZyB1c2VkIHdpdGggQmFja2Jhc2VDb3JlTW9kdWxlLndpdGhDb25maWcuIFVzZSBCYWNrYmFzZUNvcmVNb2R1bGUuZm9yUm9vdCBpbnN0ZWFkLicsXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxvZ0RlcHJlY2F0ZWRDb25maWcgPSAoXG4gIGRlcHJlY2F0aW9uU2VydmljZTogRGVwcmVjYXRpb25zU2VydmljZSxcbiAgZGVwcmVjYXRlZENvbmZpZzogQXJyYXk8RGVwcmVjYXRlZFdpdGhDb25maWc+LFxuKSA9PiB7XG4gIHJldHVybiBsb2dEZXByZWNhdGVkQ29uZmlnLmJpbmQobnVsbCwgZGVwcmVjYXRpb25TZXJ2aWNlLCBkZXByZWNhdGVkQ29uZmlnKTtcbn07XG4iXX0=