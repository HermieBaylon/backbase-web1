import { Injectable, NgZone } from '@angular/core';
import { debounceTime, mapTo, publishReplay, take } from 'rxjs/operators';
import { propertiesByPrefix } from '../../web-sdk/properties';
import { AppConfigService } from '../models/app-config.service';
import { isArrayOfStrings } from '../models/array';
import { filterChildren } from '../models/item-model-utils';
import { ӨRootContainerService } from '../models/root-container.service';
import { ItemLifecycleService } from '../rendering/item-lifecycle.service';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const isRootContainerItem = (item) => !item.properties || !item.properties.classId;
/**
 * @deprecated Will be removed in v7.0.0
 */
export class BackbaseConnector {
    /**
     * BackbaseConnectorService constructor
     * @param zone NgZone to be used for manipulations with an item
     * @param componentInjectors Backbase core components injector service to handle the model
     */
    constructor(zone, appConfig, rootContainer, lifeCycle) {
        this.zone = zone;
        this.appConfig = appConfig;
        this.rootContainer = rootContainer;
        this.lifeCycle = lifeCycle;
    }
    filterItem(item) {
        const features = propertiesByPrefix(this.appConfig.prefix, item.properties);
        this.appConfig.setConfig(features);
        return filterChildren(item, child => {
            const itemFeatures = child.properties.features;
            return (!itemFeatures ||
                !isArrayOfStrings(itemFeatures) ||
                itemFeatures.some(requiredFeature => features[requiredFeature] !== false));
        });
    }
    /**
     * Bootstrap function to be called on page model initialization,
     * and when new item added to the model (dropped on the page).
     * @param item Item to bootstrap
     * @param itemLocation Location of the item
     */
    bootstrap(item, itemLocation) {
        return this.zone.run(() => {
            let event;
            if (isRootContainerItem(item)) {
                event = this.lifeCycle.whenCreate(undefined).pipe(publishReplay(1));
            }
            else {
                event = this.lifeCycle.fromItem(item.name).pipe(publishReplay(1));
            }
            event.connect();
            const itemToInsert = this.rootContainer.isBootstrapped() ? item : this.filterItem(item);
            this.rootContainer.insertItem(itemToInsert, itemLocation);
            return event.pipe(take(1), mapTo(true)).toPromise();
        });
    }
    /**
     * Update function will be called when properties are changed for
     * one of the existing items on a page.
     * @param item Updated item
     * @param itemLocation Location of the item
     * @param changes Object which contains only changed properties and their values
     */
    update(item, _, itemProperties) {
        return this.zone.run(() => {
            this.rootContainer.updateItem(item.name, itemProperties);
            return this.lifeCycle.fromItem(item.name).pipe(take(1), mapTo(undefined)).toPromise();
        });
    }
    /**
     * Remove function will be called when existing item is removed from the page.
     * @param item Item to remove
     * @param itemLocation Location of the item
     */
    remove(item, itemLocation) {
        return this.zone.run(() => {
            this.rootContainer.removeItem(item.name, itemLocation);
            return this.lifeCycle.whenRemove().pipe(debounceTime(20), take(1), mapTo(undefined)).toPromise();
        });
    }
}
BackbaseConnector.decorators = [
    { type: Injectable }
];
BackbaseConnector.ctorParameters = () => [
    { type: NgZone },
    { type: AppConfigService },
    { type: ӨRootContainerService },
    { type: ItemLifecycleService }
];
//# sourceMappingURL=data:application/json;base64,