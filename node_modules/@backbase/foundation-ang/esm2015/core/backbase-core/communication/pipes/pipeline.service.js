import { Injectable, Injector } from '@angular/core';
import { PipelineRegistry } from './pipeline-registry';
import { takeUntil } from 'rxjs/operators';
import { pipeFromArray } from '../../models/observable';
const noop = () => { };
const ɵ0 = noop;
const noopSink = (stdin) => {
    stdin.subscribe(noop);
};
const ɵ1 = noopSink;
const isSourceDefinition = (definition) => definition && 'source' in definition;
const ɵ2 = isSourceDefinition;
const isPipeDefinition = (definition) => definition && 'pipe' in definition;
const ɵ3 = isPipeDefinition;
const isSinkDefinition = (definition) => definition && 'sink' in definition;
const ɵ4 = isSinkDefinition;
/**
 * @deprecated Will be removed in v7.0.0
 */
export class PipelineService {
    constructor(broker, injector) {
        this.broker = broker;
        this.injector = injector;
    }
    createSource(name, args) {
        const instance = this.getInstance(name);
        if (!isSourceDefinition(instance)) {
            throw new Error(`${name} is not a valid source`);
        }
        return instance.source(...args);
    }
    createPipe(name, args) {
        const instance = this.getInstance(name);
        if (!isPipeDefinition(instance)) {
            throw new Error(`${name} is not a valid pipe`);
        }
        return instance.pipe(...args);
    }
    createSink(name, args) {
        const instance = this.getInstance(name);
        if (isSinkDefinition(instance)) {
            return instance.sink(...args);
        }
        else if (isPipeDefinition(instance)) {
            return this.chainSink([instance.pipe(...args)], noopSink);
        }
        throw new Error(`${name} is not a valid sink`);
    }
    getInstance(name) {
        const provide = this.broker.getProcessorProviderToken(name);
        return this.injector.get(provide);
    }
    chainSink(pipes, sink) {
        return (stdin) => {
            sink(stdin.pipe(pipeFromArray(pipes)));
        };
    }
    runPipeline(pipeline, gc) {
        return pipeline.sink(pipeline.source().pipe(takeUntil(gc)));
    }
}
PipelineService.decorators = [
    { type: Injectable }
];
PipelineService.ctorParameters = () => [
    { type: PipelineRegistry },
    { type: Injector }
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvY29tbXVuaWNhdGlvbi9waXBlcy9waXBlbGluZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBWXZELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFeEQsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDOztBQUV0QixNQUFNLFFBQVEsR0FBRyxDQUFJLEtBQW9CLEVBQUUsRUFBRTtJQUMzQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hCLENBQUMsQ0FBQzs7QUFFRixNQUFNLGtCQUFrQixHQUFHLENBQU8sVUFBbUMsRUFBbUMsRUFBRSxDQUN4RyxVQUFVLElBQUksUUFBUSxJQUFJLFVBQVUsQ0FBQzs7QUFFdkMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFPLFVBQW1DLEVBQW9DLEVBQUUsQ0FDdkcsVUFBVSxJQUFJLE1BQU0sSUFBSSxVQUFVLENBQUM7O0FBRXJDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBSSxVQUFxQyxFQUFpQyxFQUFFLENBQ25HLFVBQVUsSUFBSSxNQUFNLElBQUksVUFBVSxDQUFDOztBQUNyQzs7R0FFRztBQUVILE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQTZCLE1BQXdCLEVBQW1CLFFBQWtCO1FBQTdELFdBQU0sR0FBTixNQUFNLENBQWtCO1FBQW1CLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBRyxDQUFDO0lBRTlGLFlBQVksQ0FBSSxJQUFZLEVBQUUsSUFBZ0I7UUFDNUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBUyxJQUFJLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksd0JBQXdCLENBQUMsQ0FBQztTQUNsRDtRQUNELE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxVQUFVLENBQU8sSUFBWSxFQUFFLElBQWdCO1FBQzdDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQU8sSUFBSSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLHNCQUFzQixDQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsVUFBVSxDQUFJLElBQVksRUFBRSxJQUFnQjtRQUMxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFTLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDOUIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDL0I7YUFBTSxJQUFJLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksc0JBQXNCLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU8sV0FBVyxDQUFPLElBQVk7UUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUEwQixPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsU0FBUyxDQUFPLEtBQXdCLEVBQUUsSUFBYTtRQUNyRCxPQUFPLENBQUMsS0FBb0IsRUFBUSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVcsQ0FBSSxRQUFxQixFQUFFLEVBQW1CO1FBQ3ZELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7O1lBM0NGLFVBQVU7OztZQWhDRixnQkFBZ0I7WUFESixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBpcGVsaW5lUmVnaXN0cnkgfSBmcm9tICcuL3BpcGVsaW5lLXJlZ2lzdHJ5JztcbmltcG9ydCB7XG4gIFBpcGVsaW5lUGlwZSxcbiAgUGlwZSxcbiAgU2luayxcbiAgUGlwZWxpbmUsXG4gIFBpcGVsaW5lU2luayxcbiAgU291cmNlLFxuICBQaXBlbGluZVNvdXJjZSxcbiAgUGlwZWxpbmVQcm9jZXNzb3IsXG59IGZyb20gJy4vcGlwZWxpbmUtaW50ZXJmYWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuLi8uLi9tb2RlbHMvb2JzZXJ2YWJsZSc7XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fTtcblxuY29uc3Qgbm9vcFNpbmsgPSA8Uj4oc3RkaW46IE9ic2VydmFibGU8Uj4pID0+IHtcbiAgc3RkaW4uc3Vic2NyaWJlKG5vb3ApO1xufTtcblxuY29uc3QgaXNTb3VyY2VEZWZpbml0aW9uID0gPFQsIFI+KGRlZmluaXRpb246IFBpcGVsaW5lUHJvY2Vzc29yPFQsIFI+KTogZGVmaW5pdGlvbiBpcyBQaXBlbGluZVNvdXJjZTxUPiA9PlxuICBkZWZpbml0aW9uICYmICdzb3VyY2UnIGluIGRlZmluaXRpb247XG5cbmNvbnN0IGlzUGlwZURlZmluaXRpb24gPSA8VCwgUj4oZGVmaW5pdGlvbjogUGlwZWxpbmVQcm9jZXNzb3I8VCwgUj4pOiBkZWZpbml0aW9uIGlzIFBpcGVsaW5lUGlwZTxULCBSPiA9PlxuICBkZWZpbml0aW9uICYmICdwaXBlJyBpbiBkZWZpbml0aW9uO1xuXG5jb25zdCBpc1NpbmtEZWZpbml0aW9uID0gPFI+KGRlZmluaXRpb246IFBpcGVsaW5lUHJvY2Vzc29yPGFueSwgUj4pOiBkZWZpbml0aW9uIGlzIFBpcGVsaW5lU2luazxSPiA9PlxuICBkZWZpbml0aW9uICYmICdzaW5rJyBpbiBkZWZpbml0aW9uO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQaXBlbGluZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGJyb2tlcjogUGlwZWxpbmVSZWdpc3RyeSwgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IpIHt9XG5cbiAgY3JlYXRlU291cmNlPFQ+KG5hbWU6IHN0cmluZywgYXJnczogQXJyYXk8YW55Pik6IFNvdXJjZTxUPiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlPFQsIGFueT4obmFtZSk7XG4gICAgaWYgKCFpc1NvdXJjZURlZmluaXRpb24oaW5zdGFuY2UpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGEgdmFsaWQgc291cmNlYCk7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZS5zb3VyY2UoLi4uYXJncyk7XG4gIH1cblxuICBjcmVhdGVQaXBlPFQsIFI+KG5hbWU6IHN0cmluZywgYXJnczogQXJyYXk8YW55Pik6IFBpcGU8VCwgUj4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZTxULCBSPihuYW1lKTtcbiAgICBpZiAoIWlzUGlwZURlZmluaXRpb24oaW5zdGFuY2UpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gaXMgbm90IGEgdmFsaWQgcGlwZWApO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2UucGlwZSguLi5hcmdzKTtcbiAgfVxuXG4gIGNyZWF0ZVNpbms8Uj4obmFtZTogc3RyaW5nLCBhcmdzOiBBcnJheTxhbnk+KTogU2luazxSPiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldEluc3RhbmNlPGFueSwgUj4obmFtZSk7XG4gICAgaWYgKGlzU2lua0RlZmluaXRpb24oaW5zdGFuY2UpKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2Uuc2luayguLi5hcmdzKTtcbiAgICB9IGVsc2UgaWYgKGlzUGlwZURlZmluaXRpb24oaW5zdGFuY2UpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGFpblNpbmsoW2luc3RhbmNlLnBpcGUoLi4uYXJncyldLCBub29wU2luayk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgJHtuYW1lfSBpcyBub3QgYSB2YWxpZCBzaW5rYCk7XG4gIH1cblxuICBwcml2YXRlIGdldEluc3RhbmNlPFQsIFI+KG5hbWU6IHN0cmluZyk6IFBpcGVsaW5lUHJvY2Vzc29yPFQsIFI+IHtcbiAgICBjb25zdCBwcm92aWRlID0gdGhpcy5icm9rZXIuZ2V0UHJvY2Vzc29yUHJvdmlkZXJUb2tlbihuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5pbmplY3Rvci5nZXQ8UGlwZWxpbmVQcm9jZXNzb3I8VCwgUj4+KHByb3ZpZGUpO1xuICB9XG5cbiAgY2hhaW5TaW5rPFQsIFI+KHBpcGVzOiBBcnJheTxQaXBlPFQsIFI+Piwgc2luazogU2luazxSPik6IFNpbms8VD4ge1xuICAgIHJldHVybiAoc3RkaW46IE9ic2VydmFibGU8VD4pOiB2b2lkID0+IHtcbiAgICAgIHNpbmsoc3RkaW4ucGlwZShwaXBlRnJvbUFycmF5KHBpcGVzKSkpO1xuICAgIH07XG4gIH1cblxuICBydW5QaXBlbGluZTxUPihwaXBlbGluZTogUGlwZWxpbmU8VD4sIGdjOiBPYnNlcnZhYmxlPGFueT4pOiB2b2lkIHtcbiAgICByZXR1cm4gcGlwZWxpbmUuc2luayhwaXBlbGluZS5zb3VyY2UoKS5waXBlKHRha2VVbnRpbChnYykpKTtcbiAgfVxufVxuIl19