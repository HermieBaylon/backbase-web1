import { Injectable, InjectionToken } from '@angular/core';
import { CommunicationDefinition, serializerDeserializer } from '@backbase/communication-property';
import { ReplaySubject } from 'rxjs';
import { concatMap, filter, first, map } from 'rxjs/operators';
import { ӨRootContainerService } from '../../../models/root-container.service';
import { ӨItemNavigationService } from '../../item-navigation.service';
import { createPipelineProcessorConfig } from '../pipeline-registry';
import { asyncScheduler } from 'rxjs';
import * as i0 from "@angular/core";
const TAG = 'memory';
/**
 * @deprecated Will be removed in v7.0.0
 * Memory Communication Transport
 *
 * Can be used to configure communication using Memory.
 *
 * @usageNotes
 *
 * Pass some data to widget-b via an in memory store
 *
 * ```json
 * {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": Memory.toProperty("myGroupName")
 *   }
 * },
 * {
 *   "name": "widget-b",
 *   "properties": {
 *     "input.myInput": Memory.toProperty("myGroupName")
 *   }
 * }
 * ```
 */
export class Memory {
    /**
     * Generate a serialized communication configuration suitable for use as a Widget Input or Output property value.
     *
     * @param group The name of the communication group to which the Input/Output belongs
     */
    static toProperty(group) {
        return serializerDeserializer.toProperty(new CommunicationDefinition(TAG, group));
    }
}
/**
 * @deprecated Will be removed in v7.0.0
 * Storage service to retain the values for each communication group that is using the Memory transport
 */
export class MemoryStorageService {
    constructor() {
        this.storage = new Map();
    }
    getSubject(group) {
        if (!this.storage.has(group)) {
            this.storage.set(group, new ReplaySubject(1));
        } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.storage.get(group);
    }
    /**
     * Get an Observable of the values being communicated to the given group
     *
     * @param group The name of the communication group
     */
    get(group) {
        return this.getSubject(group)
            .asObservable()
            .pipe(map(item => {
            const localValue = item.value;
            if (typeof item.value === 'object' && item.value['_clearPayload'] === true) {
                item.value = undefined;
            }
            return localValue;
        }));
    }
    /**
     * Communicate some value to members of the given communication group
     *
     * @param group The name of the communication group
     * @param value The value to communicate
     */
    set(group, value) {
        this.getSubject(group).next({ value });
    }
}
MemoryStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MemoryStorageService_Factory() { return new MemoryStorageService(); }, token: MemoryStorageService, providedIn: "root" });
MemoryStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
export const createMemory = (itemNavigation, rootModel, storage) => {
    return {
        source: (group) => () => storage.get(group),
        sink: (group) => (stdin) => {
            const commonAncestorItem = getItemFormCommunicationGroup(group, rootModel);
            return stdin
                .pipe(concatMap(data => commonAncestorItem.pipe(map(item => [data, item.name]))))
                .subscribe(([data, name]) => {
                asyncScheduler.schedule(() => {
                    storage.set(group, data);
                });
                itemNavigation.navigateToItem(name, {});
            });
        },
    };
};
/**
 * @deprecated Will be removed in v7.0.0
 */
export const memoryProcessorConfig = createPipelineProcessorConfig(TAG, {
    provide: new InjectionToken('Memory pipeline handler'),
    useFactory: createMemory,
    deps: [ӨItemNavigationService, ӨRootContainerService, MemoryStorageService],
});
function getItemFormCommunicationGroup(group, rootModel) {
    const communicationDefinition = new CommunicationDefinition(TAG, group);
    const commonAncestorItem = rootModel.commonAncestor(communicationDefinition).pipe(first(), filter((item) => {
        if (item === undefined) {
            console.warn(`No Inputs configured to receive in memory value for communication group "${group}"`);
            return false;
        }
        return true;
    }));
    return commonAncestorItem;
}
//# sourceMappingURL=data:application/json;base64,