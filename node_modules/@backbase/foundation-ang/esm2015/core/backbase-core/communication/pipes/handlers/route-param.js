import { InjectionToken } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CommunicationDefinition, serializerDeserializer } from '@backbase/communication-property';
import { combineLatest } from 'rxjs';
import { filter, first, map } from 'rxjs/operators';
import { ӨRootContainerService } from '../../../models/root-container.service';
import { ӨItemNavigationService } from '../../item-navigation.service';
import { createPipelineProcessorConfig } from '../pipeline-registry';
/**
 * @deprecated Will be removed in v7.0.0
 * Pipeable operator for normalizing value to `RouteParams`.
 *
 * @param paramNameArg
 */
export const routeParams = (paramNameArg) => (stdin) => stdin.pipe(map((payload) => (paramNameArg ? { [paramNameArg]: `${payload}` } : {})));
const TAG = 'route-param';
/**
 * @deprecated Will be removed in v7.0.0
 * RouteParam Communication Transport
 *
 * Can be used to configure communication using RouteParam.
 *
 * @usageNotes
 *
 * Store some 2-way bound state to the router as "paramName"
 *
 * ```json
 * {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": RouteParam.toProperty("paramName"),
 *     "input.myInput": RouteParam.toProperty("paramName")
 *   }
 * }
 * ```
 *
 * Navigate to widget-b and pass data via route-param
 *
 * ```json
 * {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": RouteParam.toProperty("inputName")
 *   }
 * },
 * {
 *   "name": "widget-b",
 *   "properties": {
 *     "input.myInput": RouteParam.toProperty("inputName")
 *   }
 * }
 * ```
 */
export class RouteParam {
    /**
     * Generate a serialized communication configuration suitable for use as a Widget Input or Output property value.
     *
     * @param group The name of the communication group to which the Input/Output belongs
     */
    static toProperty(group) {
        return serializerDeserializer.toProperty(new CommunicationDefinition(TAG, group));
    }
}
const getActivatedRouteParam = (paramName) => (activatedRoute) => activatedRoute.paramMap.pipe(filter(Boolean), map((params) => params.get(paramName)), map(param => (param === null ? undefined : param)));
const ɵ0 = getActivatedRouteParam;
const walkRoutePath = (activatedRoute) => {
    if (!activatedRoute.parent) {
        return [activatedRoute];
    }
    return [activatedRoute, ...walkRoutePath(activatedRoute.parent)];
};
const ɵ1 = walkRoutePath;
/**
 * @deprecated Will be removed in v7.0.0
 */
export const getRouteParam = (activatedRoute, group) => {
    const activatedRoutes = walkRoutePath(activatedRoute);
    const allParams$ = activatedRoutes.map(getActivatedRouteParam(group));
    return combineLatest(allParams$).pipe(map(allParams => allParams.find(v => v !== undefined)));
};
/**
 * @deprecated Will be removed in v7.0.0
 */
export const createRouteParams = (activatedRoute, itemNavigation, rootModel) => ({
    source: (group) => () => getRouteParam(activatedRoute, group).pipe(map(deserialize)),
    sink: (group) => {
        return stdin => {
            stdin.pipe(map(serialize), routeParams(group)).subscribe(params => {
                rootModel
                    .commonAncestor(new CommunicationDefinition(TAG, group))
                    .pipe(first())
                    .subscribe(commonAncestor => {
                    if (commonAncestor === undefined) {
                        return console.warn('No Inputs configured to receive route param');
                    }
                    itemNavigation.navigateToItem(commonAncestor.name, params);
                });
            });
        };
    },
});
/**
 * @deprecated Will be removed in v7.0.0
 */
export const routeParamsProcessorConfig = createPipelineProcessorConfig(TAG, {
    provide: new InjectionToken('Route param pipeline handler'),
    useFactory: createRouteParams,
    deps: [ActivatedRoute, ӨItemNavigationService, ӨRootContainerService],
});
function serialize(outputValue) {
    return typeof outputValue === 'string' ? outputValue : `"${JSON.stringify(outputValue)}"`;
}
function deserialize(payload) {
    if (payload === undefined) {
        return undefined;
    }
    // not serialized
    if (!(payload.startsWith('"') && payload.endsWith('"'))) {
        return payload;
    }
    // actually attempt to deserialize
    try {
        return JSON.parse(payload.substr(1, payload.length - 2));
    }
    catch (_) {
        return payload;
    }
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,