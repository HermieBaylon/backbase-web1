import { InjectionToken } from '@angular/core';
import { combineLatest } from 'rxjs';
import { ItemTransitionService } from '../../deprecated/item-transition.service';
import { ItemModel } from '../../../models/item-model';
import { ӨRootContainerService } from '../../../models/root-container.service';
import { mergeMap, filter, map } from 'rxjs/operators';
export const pipeName = 'navigation';
export const navigationHandlerToken = new InjectionToken('Navigation handler');
export const createNavigationSink = (rootContainer, itemTransition, itemModel) => {
    return {
        sink: (outputName, config) => (stdin) => {
            if (outputName === undefined || config === undefined) {
                return;
            }
            const [targetName, targetInput] = config.split('.');
            const target$ = rootContainer.model.pipe(mergeMap(tree => tree.find(item => item.name === targetName)), filter((a) => a !== undefined));
            const targetAnscestors = target$.pipe(mergeMap(tree => tree.flatten()), map(flatNodes => flatNodes.map(node => node.value)));
            combineLatest([target$, targetAnscestors, stdin]).subscribe(([target, anscestors, payload]) => itemTransition.transition(itemModel, outputName, target.value, targetInput, anscestors, payload));
        },
    };
};
export const navigationProcessorConfig = {
    name: pipeName,
    provider: {
        provide: navigationHandlerToken,
        useFactory: createNavigationSink,
        deps: [ӨRootContainerService, ItemTransitionService, ItemModel],
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvY29tbXVuaWNhdGlvbi9waXBlcy9oYW5kbGVycy9uYXZpZ2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUVqRixPQUFPLEVBQUUsU0FBUyxFQUFpQixNQUFNLDRCQUE0QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFFckMsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUUvRSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUNsQyxhQUFvQyxFQUNwQyxjQUFxQyxFQUNyQyxTQUFvQixFQUNjLEVBQUU7SUFDcEMsT0FBTztRQUNMLElBQUksRUFBRSxDQUFDLFVBQW1CLEVBQUUsTUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQXFDLEVBQUUsRUFBRTtZQUN4RixJQUFJLFVBQVUsS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDcEQsT0FBTzthQUNSO1lBQ0QsTUFBTSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBaUMsQ0FBQztZQUVwRixNQUFNLE9BQU8sR0FBOEIsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLEVBQzdELE1BQU0sQ0FBQyxDQUFDLENBQTRCLEVBQXNCLEVBQUUsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQzlFLENBQUM7WUFDRixNQUFNLGdCQUFnQixHQUFpQyxPQUFPLENBQUMsSUFBSSxDQUNqRSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFDaEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNwRCxDQUFDO1lBQ0YsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FDNUYsY0FBYyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FDakcsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQTRCO0lBQ2hFLElBQUksRUFBRSxRQUFRO0lBQ2QsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLHNCQUFzQjtRQUMvQixVQUFVLEVBQUUsb0JBQW9CO1FBQ2hDLElBQUksRUFBRSxDQUFDLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLFNBQVMsQ0FBQztLQUNoRTtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGlwZWxpbmVQcm9jZXNzb3JDb25maWcgfSBmcm9tICcuLi9waXBlbGluZS1yZWdpc3RyeSc7XG5pbXBvcnQgeyBJdGVtVHJhbnNpdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9kZXByZWNhdGVkL2l0ZW0tdHJhbnNpdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBpcGVsaW5lU2luayB9IGZyb20gJy4uL3BpcGVsaW5lLWludGVyZmFjZSc7XG5pbXBvcnQgeyBJdGVtTW9kZWwsIEl0ZW1Nb2RlbFRyZWUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMvaXRlbS1tb2RlbCc7XG5pbXBvcnQgeyDTqFJvb3RDb250YWluZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWxzL3Jvb3QtY29udGFpbmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgbWVyZ2VNYXAsIGZpbHRlciwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY29uc3QgcGlwZU5hbWUgPSAnbmF2aWdhdGlvbic7XG5cbmV4cG9ydCBjb25zdCBuYXZpZ2F0aW9uSGFuZGxlclRva2VuID0gbmV3IEluamVjdGlvblRva2VuKCdOYXZpZ2F0aW9uIGhhbmRsZXInKTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU5hdmlnYXRpb25TaW5rID0gKFxuICByb290Q29udGFpbmVyOiDTqFJvb3RDb250YWluZXJTZXJ2aWNlLFxuICBpdGVtVHJhbnNpdGlvbjogSXRlbVRyYW5zaXRpb25TZXJ2aWNlLFxuICBpdGVtTW9kZWw6IEl0ZW1Nb2RlbCxcbik6IFBpcGVsaW5lU2luazxzdHJpbmcgfCB1bmRlZmluZWQ+ID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzaW5rOiAob3V0cHV0TmFtZT86IHN0cmluZywgY29uZmlnPzogc3RyaW5nKSA9PiAoc3RkaW46IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPikgPT4ge1xuICAgICAgaWYgKG91dHB1dE5hbWUgPT09IHVuZGVmaW5lZCB8fCBjb25maWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBbdGFyZ2V0TmFtZSwgdGFyZ2V0SW5wdXRdID0gY29uZmlnLnNwbGl0KCcuJykgYXMgW3N0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkXTtcblxuICAgICAgY29uc3QgdGFyZ2V0JDogT2JzZXJ2YWJsZTxJdGVtTW9kZWxUcmVlPiA9IHJvb3RDb250YWluZXIubW9kZWwucGlwZShcbiAgICAgICAgbWVyZ2VNYXAodHJlZSA9PiB0cmVlLmZpbmQoaXRlbSA9PiBpdGVtLm5hbWUgPT09IHRhcmdldE5hbWUpKSxcbiAgICAgICAgZmlsdGVyKChhOiBJdGVtTW9kZWxUcmVlIHwgdW5kZWZpbmVkKTogYSBpcyBJdGVtTW9kZWxUcmVlID0+IGEgIT09IHVuZGVmaW5lZCksXG4gICAgICApO1xuICAgICAgY29uc3QgdGFyZ2V0QW5zY2VzdG9yczogT2JzZXJ2YWJsZTxBcnJheTxJdGVtTW9kZWw+PiA9IHRhcmdldCQucGlwZShcbiAgICAgICAgbWVyZ2VNYXAodHJlZSA9PiB0cmVlLmZsYXR0ZW4oKSksXG4gICAgICAgIG1hcChmbGF0Tm9kZXMgPT4gZmxhdE5vZGVzLm1hcChub2RlID0+IG5vZGUudmFsdWUpKSxcbiAgICAgICk7XG4gICAgICBjb21iaW5lTGF0ZXN0KFt0YXJnZXQkLCB0YXJnZXRBbnNjZXN0b3JzLCBzdGRpbl0pLnN1YnNjcmliZSgoW3RhcmdldCwgYW5zY2VzdG9ycywgcGF5bG9hZF0pID0+XG4gICAgICAgIGl0ZW1UcmFuc2l0aW9uLnRyYW5zaXRpb24oaXRlbU1vZGVsLCBvdXRwdXROYW1lLCB0YXJnZXQudmFsdWUsIHRhcmdldElucHV0LCBhbnNjZXN0b3JzLCBwYXlsb2FkKSxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBuYXZpZ2F0aW9uUHJvY2Vzc29yQ29uZmlnOiBQaXBlbGluZVByb2Nlc3NvckNvbmZpZyA9IHtcbiAgbmFtZTogcGlwZU5hbWUsXG4gIHByb3ZpZGVyOiB7XG4gICAgcHJvdmlkZTogbmF2aWdhdGlvbkhhbmRsZXJUb2tlbixcbiAgICB1c2VGYWN0b3J5OiBjcmVhdGVOYXZpZ2F0aW9uU2luayxcbiAgICBkZXBzOiBb06hSb290Q29udGFpbmVyU2VydmljZSwgSXRlbVRyYW5zaXRpb25TZXJ2aWNlLCBJdGVtTW9kZWxdLFxuICB9LFxufTtcbiJdfQ==