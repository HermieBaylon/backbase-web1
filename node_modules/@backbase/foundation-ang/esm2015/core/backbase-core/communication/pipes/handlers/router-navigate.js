import { InjectionToken } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { createPipelineProcessorConfig } from '../pipeline-registry';
import { getRouteParam } from './route-param';
const TAG = 'router.navigate';
const isDefined = (param) => param !== undefined;
const ɵ0 = isDefined;
/**
 * @deprecated Will be removed in v7.0.0
 */
export const PARAM_PLACEHOLDER_BUILDER = Symbol('Param Placeholder Builder');
/**
 * @deprecated Will be removed in v7.0.0
 * Placeholder to use for a named optional matrix param in `RouterNavigate`.
 *
 * This class is private. Use `RouterNavigateSink.param` to create a placeholder.
 */
export class RouterNavigateParamPlaceholder {
    constructor(paramName) {
        this.paramName = paramName;
    }
    /**
     * @internal
     */
    static [PARAM_PLACEHOLDER_BUILDER](name) {
        return new RouterNavigateParamPlaceholder(name);
    }
}
/**
 * @deprecated Will be removed in v7.0.0
 * Serialize the command generated with TS to pipeline source argument strings for the model.
 *
 * - Path commands are serialized as the path string.
 * - Single named optional params are serialzed as {paramName}
 * @param commands
 */
export const serializeCommands = (commands) => {
    // Validate that there is only max one placeholder
    if (commands.filter(command => command instanceof RouterNavigateParamPlaceholder).length > 1) {
        throw new Error('RouterNavigate: Only a single placeholder can be configured');
    }
    return commands.map(command => {
        if (command instanceof RouterNavigateParamPlaceholder) {
            return `{${command.paramName}}`;
        }
        else {
            return command;
        }
    });
};
/**
 * Deserialize the pipeline string arguments to commands for Router.navigate.
 * @param commands
 */
const deserializeCommands = (commands) => commands.map(command => {
    const paramNameMatches = command.match(/^{([^}]+)}$/);
    if (!paramNameMatches) {
        return command;
    }
    return RouterNavigateParamPlaceholder[PARAM_PLACEHOLDER_BUILDER](paramNameMatches[1]);
});
const ɵ1 = deserializeCommands;
/**
 * @deprecated Will be removed in v7.0.0
 * Helper to configure output properties to write to the `RouterNavigateStore`
 *
 * @usageNotes
 *
 * To navigate like:
 *
 * ```ts
 * myOutput.subscribe(() => Router.navigate(['items']);)
 * ```
 *
 * Configure your model like:
 *
 * ```json
 *  {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": RouterNavigateSink.navigate(['items']),
 *   }
 * }
 * ```
 *
 * To navigate to nested paths like:
 *
 * ```ts
 * myOutput.subscribe(() => Router.navigate(['dashboard', 'transactions']);)
 * ```
 *
 * Configure your model like:
 *
 * ```json
 *  {
 *   "name": "widget-a",
 *   "properties": {
 *     "output.myOutput": RouterNavigateSink.navigate(['dashboard', 'transactions']),
 *   }
 * }
 * ```
 *
 * To navigate passing [optional route
 * params](https://angular.io/guide/router-tutorial-toh#heroes-list-optionally-selecting-a-hero),
 * eg in Angular it would be:
 *
 * ```ts
 * heroId.subscribe((heroId) => Router.navigate(['heroes', { id: heroId }]));
 * ```
 *
 * Configure your model like:
 *
 * ```json
 * {
 *   "output.heroId": RouterNavigateSink.navigate(['heroes', RouterNavigateSink.param('id')]),
 * }
 * ```
 *
 * To read a param you can connect an input to the `RouterNavigateSource`.
 */
export class RouterNavigateSink {
    /**
     * Generate a serialized `PipelineSink` configuration suitable for use as a Widget Output property value.
     *
     * @param commands The commands to use for navigation.
     */
    static navigate(commands) {
        return `${TAG} ${serializeCommands(commands).join(' ')}`;
    }
    /**
     * Create a param placeholder to use in a `RouterNavigateSink`.
     *
     * @param paramName
     */
    static param(paramName) {
        if (!paramName) {
            throw new Error('RouterNavigateSink.param: paramName must be set');
        }
        return RouterNavigateParamPlaceholder[PARAM_PLACEHOLDER_BUILDER](paramName);
    }
}
/**
 * @deprecated Will be removed in v7.0.0
 * Helper to configure input properties to read from the `RouterNavigateStore`
 *
 * @usageNotes
 *
 *
 * To read a param into an input property:
 *
 * ```json
 * {
 *   "input.heroId": RouterNavigateSource.param('id')
 * }
 * ```
 */
export class RouterNavigateSource {
    /**
     * Generate a serialized `PipelineSource` configuration suitable for use as a Widget Input property value.
     *
     * @param paramName The name of the param to read from the URL.
     */
    static param(paramName) {
        return `${TAG} ${paramName}`;
    }
}
const matrixParam = (param, paramValue) => isDefined(paramValue) ? { [param.paramName]: `${paramValue}` } : paramValue;
const ɵ2 = matrixParam;
// Convert configured navigate commands to actual angular Router.navigate commands
const navigateCommands = (commands, paramValue) => commands
    .map(command => (command instanceof RouterNavigateParamPlaceholder ? matrixParam(command, paramValue) : command))
    .filter(isDefined);
const ɵ3 = navigateCommands;
/**
 * @deprecated Will be removed in v7.0.0
 */
export const createRouterNavigateStore = (router, activatedRoute) => ({
    sink: (...serializedCommands) => {
        const commands = deserializeCommands(serializedCommands);
        return stdin => {
            stdin.subscribe(paramValue => {
                router.navigate(navigateCommands(commands, paramValue));
            });
        };
    },
    source: (paramName) => () => getRouteParam(activatedRoute, paramName),
});
/**
 * @deprecated Will be removed in v7.0.0
 */
export const routerNavigateProcessorConfig = createPipelineProcessorConfig(TAG, {
    provide: new InjectionToken('Router.Navigate pipeline handler'),
    useFactory: createRouterNavigateStore,
    deps: [Router, ActivatedRoute],
});
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,