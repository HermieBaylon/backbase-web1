import { InjectionToken } from '@angular/core';
export class UrlSinkNavigator {
    go(url) {
        window.location.href = url;
    }
}
export const createUrlSink = (navigator = new UrlSinkNavigator()) => ({
    sink: (url, paramName) => (stdin) => {
        stdin.subscribe((payload) => {
            navigator.go(navigationUrlWithParam(url, paramName, payload));
        });
    },
});
function navigationUrlWithParam(navigationUrl, paramName, param) {
    if (!paramName || !param) {
        return navigationUrl;
    }
    const paramSeparator = navigationUrl.indexOf('?') === -1 ? '?' : '&';
    return `${navigationUrl}${paramSeparator}${paramName}=${param}`;
}
/**
 * Configure the `UrlSink`.
 *
 * Use the string 'url' to configure this handler.
 *
 * @usageNotes
 *
 * ```json
 * {
 *   "output.myOutput1": "url http://www.google.com/", // navigate without param
 *   "output.myOutput2": "url http://www.google.com/ query" // navigate with param
 * }
 * ```
 */
export const urlProcessorConfig = {
    name: 'url',
    provider: {
        provide: new InjectionToken('Url pipeline handler'),
        useFactory: createUrlSink,
        deps: [],
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZS9zcmMvYmFja2Jhc2UtY29yZS9jb21tdW5pY2F0aW9uL3BpcGVzL2hhbmRsZXJzL3VybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSy9DLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsRUFBRSxDQUFDLEdBQVc7UUFDWixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBbUJELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLFlBQThCLElBQUksZ0JBQWdCLEVBQUUsRUFBVyxFQUFFLENBQUMsQ0FBQztJQUMvRixJQUFJLEVBQUUsQ0FBQyxHQUFXLEVBQUUsU0FBa0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFxQyxFQUFFLEVBQUU7UUFDbkYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQTJCLEVBQUUsRUFBRTtZQUM5QyxTQUFTLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCxTQUFTLHNCQUFzQixDQUFDLGFBQXFCLEVBQUUsU0FBa0IsRUFBRSxLQUFjO0lBQ3ZGLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDeEIsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFDRCxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUNyRSxPQUFPLEdBQUcsYUFBYSxHQUFHLGNBQWMsR0FBRyxTQUFTLElBQUksS0FBSyxFQUFFLENBQUM7QUFDbEUsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBbUM7SUFDaEUsSUFBSSxFQUFFLEtBQUs7SUFDWCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsSUFBSSxjQUFjLENBQUMsc0JBQXNCLENBQUM7UUFDbkQsVUFBVSxFQUFFLGFBQWE7UUFDekIsSUFBSSxFQUFFLEVBQUU7S0FDVDtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUGlwZWxpbmVTaW5rLCBTaW5rIH0gZnJvbSAnLi4vcGlwZWxpbmUtaW50ZXJmYWNlJztcbmltcG9ydCB7IFBpcGVsaW5lUHJvY2Vzc29yQ29uZmlnIH0gZnJvbSAnLi4vcGlwZWxpbmUtcmVnaXN0cnknO1xuXG5leHBvcnQgY2xhc3MgVXJsU2lua05hdmlnYXRvciB7XG4gIGdvKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGBQaXBlbGluZVByb2Nlc3NvcmAgd2hpY2ggY2FuIGJlIHVzZWQgYXMgYSBzaW5rXG4gKiB0byBuYXZpZ2F0ZSB0byBhIFVSTCB3aGVuIGEgY29tcG9uZW50IG91dHB1dHMuXG4gKlxuICogVGhlIHZhbHVlIG9mIHRoZSBzdHJlYW0gY2FuIGJlIHBhc3NlZCBhcyBhIHF1ZXJ5IHBhcmFtZXRlclxuICogaWYgdGhlIGBwYXJhbU5hbWVgIGlzIHNldC5cbiAqXG4gKiBTZWUgYHVybFByb2Nlc3NvckNvbmZpZ2AgZm9yIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXJsU2luayBleHRlbmRzIFBpcGVsaW5lU2luazxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB1cmwgVGhlIGZ1bGwgVVJMIHRvIG5hdmlnYXRlIHRvXG4gICAqIEBwYXJhbSBwYXJhbU5hbWUgQW4gb3B0aW9uYWwgcGFyYW0gdG8gcGFzcyBpbiB0aGUgcXVlcnkgc3RyaW5nXG4gICAqL1xuICBzaW5rOiAodXJsOiBzdHJpbmcsIHBhcmFtTmFtZT86IHN0cmluZykgPT4gU2luazxzdHJpbmcgfCB1bmRlZmluZWQ+O1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlVXJsU2luayA9IChuYXZpZ2F0b3I6IFVybFNpbmtOYXZpZ2F0b3IgPSBuZXcgVXJsU2lua05hdmlnYXRvcigpKTogVXJsU2luayA9PiAoe1xuICBzaW5rOiAodXJsOiBzdHJpbmcsIHBhcmFtTmFtZT86IHN0cmluZykgPT4gKHN0ZGluOiBPYnNlcnZhYmxlPHN0cmluZyB8IHVuZGVmaW5lZD4pID0+IHtcbiAgICBzdGRpbi5zdWJzY3JpYmUoKHBheWxvYWQ6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgbmF2aWdhdG9yLmdvKG5hdmlnYXRpb25VcmxXaXRoUGFyYW0odXJsLCBwYXJhbU5hbWUsIHBheWxvYWQpKTtcbiAgICB9KTtcbiAgfSxcbn0pO1xuXG5mdW5jdGlvbiBuYXZpZ2F0aW9uVXJsV2l0aFBhcmFtKG5hdmlnYXRpb25Vcmw6IHN0cmluZywgcGFyYW1OYW1lPzogc3RyaW5nLCBwYXJhbT86IHN0cmluZykge1xuICBpZiAoIXBhcmFtTmFtZSB8fCAhcGFyYW0pIHtcbiAgICByZXR1cm4gbmF2aWdhdGlvblVybDtcbiAgfVxuICBjb25zdCBwYXJhbVNlcGFyYXRvciA9IG5hdmlnYXRpb25VcmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJztcbiAgcmV0dXJuIGAke25hdmlnYXRpb25Vcmx9JHtwYXJhbVNlcGFyYXRvcn0ke3BhcmFtTmFtZX09JHtwYXJhbX1gO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZSB0aGUgYFVybFNpbmtgLlxuICpcbiAqIFVzZSB0aGUgc3RyaW5nICd1cmwnIHRvIGNvbmZpZ3VyZSB0aGlzIGhhbmRsZXIuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiBgYGBqc29uXG4gKiB7XG4gKiAgIFwib3V0cHV0Lm15T3V0cHV0MVwiOiBcInVybCBodHRwOi8vd3d3Lmdvb2dsZS5jb20vXCIsIC8vIG5hdmlnYXRlIHdpdGhvdXQgcGFyYW1cbiAqICAgXCJvdXRwdXQubXlPdXRwdXQyXCI6IFwidXJsIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbS8gcXVlcnlcIiAvLyBuYXZpZ2F0ZSB3aXRoIHBhcmFtXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHVybFByb2Nlc3NvckNvbmZpZzogUGlwZWxpbmVQcm9jZXNzb3JDb25maWc8J3VybCc+ID0ge1xuICBuYW1lOiAndXJsJyxcbiAgcHJvdmlkZXI6IHtcbiAgICBwcm92aWRlOiBuZXcgSW5qZWN0aW9uVG9rZW4oJ1VybCBwaXBlbGluZSBoYW5kbGVyJyksXG4gICAgdXNlRmFjdG9yeTogY3JlYXRlVXJsU2luayxcbiAgICBkZXBzOiBbXSxcbiAgfSxcbn07XG4iXX0=