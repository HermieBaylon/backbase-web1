import { InjectionToken } from '@angular/core';
import { pluck } from 'rxjs/operators';
import { CommunicationDefinition, serializerDeserializer } from '@backbase/communication-property';
import { AppConfigService } from '../../../models/app-config.service';
import { createPipelineProcessorConfig } from '../pipeline-registry';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const createAppConfigSource = (appConfig) => ({
    source: (configName) => () => appConfig.getConfig().pipe(pluck(configName)),
});
const TAG = 'app-config';
/**
 * @deprecated Will be removed in v7.0.0
 * AppConfig Communication Transport
 *
 * Can be used in standalone development to configure communication using AppConfig
 */
export class AppConfig {
    /**
     * Generate a serialized communication configuration suitable for use as a Widget Input property value.
     *
     * @param group The name of the communication group to which the Input belongs
     */
    static toProperty(group) {
        return serializerDeserializer.toProperty(new CommunicationDefinition(TAG, group));
    }
}
/**
 * @deprecated Will be removed in v7.0.0
 * Configure the `AppConfigSource`.
 *
 * Use the `AppConfig.toProperty` helper to configure this handler.
 *
 * @usageNotes
 *
 * ```json
 * {
 *   "input.myInput": "AppConfig.toProperty(configPropertyName)", // read the value of application configuration
 * }
 * ```
 */
export const appConfigProcessorConfig = createPipelineProcessorConfig(TAG, {
    provide: new InjectionToken('Application configuration pipeline handler'),
    useFactory: createAppConfigSource,
    deps: [AppConfigService],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvY29tbXVuaWNhdGlvbi9waXBlcy9oYW5kbGVycy9hcHAtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBR25HLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXRFLE9BQU8sRUFBRSw2QkFBNkIsRUFBMkIsTUFBTSxzQkFBc0IsQ0FBQztBQWU5Rjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsU0FBMkIsRUFBd0MsRUFBRSxDQUFDLENBQUM7SUFDM0csTUFBTSxFQUFFLENBQUMsVUFBa0IsRUFBRSxFQUFFLENBQUMsR0FBeUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQzFHLENBQUMsQ0FBQztBQUVILE1BQU0sR0FBRyxHQUFpQixZQUFZLENBQUM7QUFFdkM7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sU0FBUztJQUNwQjs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFhO1FBQzdCLE9BQU8sc0JBQXNCLENBQUMsVUFBVSxDQUFDLElBQUksdUJBQXVCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQztDQUNGO0FBRUQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUE0Qiw2QkFBNkIsQ0FBQyxHQUFHLEVBQUU7SUFDbEcsT0FBTyxFQUFFLElBQUksY0FBYyxDQUFDLDRDQUE0QyxDQUFDO0lBQ3pFLFVBQVUsRUFBRSxxQkFBcUI7SUFDakMsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Q0FDekIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHBsdWNrIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29tbXVuaWNhdGlvbkRlZmluaXRpb24sIHNlcmlhbGl6ZXJEZXNlcmlhbGl6ZXIgfSBmcm9tICdAYmFja2Jhc2UvY29tbXVuaWNhdGlvbi1wcm9wZXJ0eSc7XG5pbXBvcnQgeyBQcm9wZXJ0eSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy93ZWItc2RrJztcblxuaW1wb3J0IHsgQXBwQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9hcHAtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGlwZWxpbmVTb3VyY2UsIFNvdXJjZSB9IGZyb20gJy4uL3BpcGVsaW5lLWludGVyZmFjZSc7XG5pbXBvcnQgeyBjcmVhdGVQaXBlbGluZVByb2Nlc3NvckNvbmZpZywgUGlwZWxpbmVQcm9jZXNzb3JDb25maWcgfSBmcm9tICcuLi9waXBlbGluZS1yZWdpc3RyeSc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogQSBgUGlwZWxpbmVQcm9jZXNzb3JgIHdoaWNoIGNhbiBiZSB1c2VkIGFzIGEgc291cmNlIGZvciBhIGNvbXBvbmVudCdzXG4gKiBpbnB1dC5cbiAqXG4gKiBTZWUgYGFwcENvbmZpZ1Byb2Nlc3NvckNvbmZpZ2AgZm9yIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwQ29uZmlnU291cmNlIGV4dGVuZHMgUGlwZWxpbmVTb3VyY2U8UHJvcGVydHkgfCB1bmRlZmluZWQ+IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBjb25maWdOYW1lIHRoZSBuYW1lIG9mIHRoZSBhcHAgY29uZmlnIHByb3BlcnR5IHRvIHJlYWQgZnJvbVxuICAgKi9cbiAgc291cmNlOiAoY29uZmlnTmFtZTogc3RyaW5nKSA9PiBTb3VyY2U8UHJvcGVydHkgfCB1bmRlZmluZWQ+O1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVBcHBDb25maWdTb3VyY2UgPSAoYXBwQ29uZmlnOiBBcHBDb25maWdTZXJ2aWNlKTogUGlwZWxpbmVTb3VyY2U8UHJvcGVydHkgfCB1bmRlZmluZWQ+ID0+ICh7XG4gIHNvdXJjZTogKGNvbmZpZ05hbWU6IHN0cmluZykgPT4gKCk6IE9ic2VydmFibGU8UHJvcGVydHk+ID0+IGFwcENvbmZpZy5nZXRDb25maWcoKS5waXBlKHBsdWNrKGNvbmZpZ05hbWUpKSxcbn0pO1xuXG5jb25zdCBUQUc6ICdhcHAtY29uZmlnJyA9ICdhcHAtY29uZmlnJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKiBBcHBDb25maWcgQ29tbXVuaWNhdGlvbiBUcmFuc3BvcnRcbiAqXG4gKiBDYW4gYmUgdXNlZCBpbiBzdGFuZGFsb25lIGRldmVsb3BtZW50IHRvIGNvbmZpZ3VyZSBjb21tdW5pY2F0aW9uIHVzaW5nIEFwcENvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgQXBwQ29uZmlnIHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgc2VyaWFsaXplZCBjb21tdW5pY2F0aW9uIGNvbmZpZ3VyYXRpb24gc3VpdGFibGUgZm9yIHVzZSBhcyBhIFdpZGdldCBJbnB1dCBwcm9wZXJ0eSB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIGdyb3VwIFRoZSBuYW1lIG9mIHRoZSBjb21tdW5pY2F0aW9uIGdyb3VwIHRvIHdoaWNoIHRoZSBJbnB1dCBiZWxvbmdzXG4gICAqL1xuICBzdGF0aWMgdG9Qcm9wZXJ0eShncm91cDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gc2VyaWFsaXplckRlc2VyaWFsaXplci50b1Byb3BlcnR5KG5ldyBDb21tdW5pY2F0aW9uRGVmaW5pdGlvbihUQUcsIGdyb3VwKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKiBDb25maWd1cmUgdGhlIGBBcHBDb25maWdTb3VyY2VgLlxuICpcbiAqIFVzZSB0aGUgYEFwcENvbmZpZy50b1Byb3BlcnR5YCBoZWxwZXIgdG8gY29uZmlndXJlIHRoaXMgaGFuZGxlci5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgXCJpbnB1dC5teUlucHV0XCI6IFwiQXBwQ29uZmlnLnRvUHJvcGVydHkoY29uZmlnUHJvcGVydHlOYW1lKVwiLCAvLyByZWFkIHRoZSB2YWx1ZSBvZiBhcHBsaWNhdGlvbiBjb25maWd1cmF0aW9uXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IGFwcENvbmZpZ1Byb2Nlc3NvckNvbmZpZzogUGlwZWxpbmVQcm9jZXNzb3JDb25maWcgPSBjcmVhdGVQaXBlbGluZVByb2Nlc3NvckNvbmZpZyhUQUcsIHtcbiAgcHJvdmlkZTogbmV3IEluamVjdGlvblRva2VuKCdBcHBsaWNhdGlvbiBjb25maWd1cmF0aW9uIHBpcGVsaW5lIGhhbmRsZXInKSxcbiAgdXNlRmFjdG9yeTogY3JlYXRlQXBwQ29uZmlnU291cmNlLFxuICBkZXBzOiBbQXBwQ29uZmlnU2VydmljZV0sXG59KTtcbiJdfQ==