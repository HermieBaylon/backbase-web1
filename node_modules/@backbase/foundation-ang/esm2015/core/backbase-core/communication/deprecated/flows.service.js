import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';
import { Graph } from '../../models/graph';
export const CONFIG_FLOWS = new InjectionToken('@backbase/foundation Communcation Flow Configuration');
export class FlowsService {
    constructor(flowsConfig) {
        this.transitions = new Graph();
        if (flowsConfig !== null) {
            flowsConfig.forEach(flows => {
                flows.forEach(flow => {
                    this.addFlow(flow);
                });
            });
        }
    }
    addFlow(config) {
        const currentEdge = this.transitions.getEdge(config.output.classId, config.input.classId);
        const flow = {
            output: config.output.outputName,
            input: config.input.inputName,
            map: config.mapPayload,
        };
        const edge = currentEdge ? [...currentEdge, flow] : [flow];
        this.transitions.connect(config.output.classId, config.input.classId, edge);
    }
    getFlows(from, fromOutput, to, toInput) {
        const flows = to.reduce((acc, classId) => [...acc, ...(this.transitions.getEdge(from, classId) || [])], []);
        return flows.filter(flow => flow.output === fromOutput && (toInput === undefined || flow.input === undefined || toInput === flow.input));
    }
}
FlowsService.decorators = [
    { type: Injectable }
];
FlowsService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG_FLOWS,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxvd3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvY29tbXVuaWNhdGlvbi9kZXByZWNhdGVkL2Zsb3dzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUEyQjNDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FDNUMsc0RBQXNELENBQ3ZELENBQUM7QUFHRixNQUFNLE9BQU8sWUFBWTtJQUd2QixZQUdFLFdBQ3VDO1FBTnhCLGdCQUFXLEdBQUcsSUFBSSxLQUFLLEVBQXdCLENBQUM7UUFRL0QsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQ3hCLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3JCLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFTyxPQUFPLENBQUMsTUFBK0I7UUFDN0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRixNQUFNLElBQUksR0FBRztZQUNYLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVU7WUFDaEMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUztZQUM3QixHQUFHLEVBQUUsTUFBTSxDQUFDLFVBQVU7U0FDdkIsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU0sUUFBUSxDQUNiLElBQWEsRUFDYixVQUFzQixFQUN0QixFQUFrQixFQUNsQixPQUE4QjtRQUU5QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsTUFBTSxDQUNyQixDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUM5RSxFQUFpQixDQUNsQixDQUFDO1FBRUYsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUNqQixJQUFJLENBQUMsRUFBRSxDQUNMLElBQUksQ0FBQyxNQUFNLEtBQUssVUFBVSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxPQUFPLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUM5RyxDQUFDO0lBQ0osQ0FBQzs7O1lBN0NGLFVBQVU7Ozt3Q0FLTixRQUFRLFlBQ1IsTUFBTSxTQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JhcGggfSBmcm9tICcuLi8uLi9tb2RlbHMvZ3JhcGgnO1xuXG5leHBvcnQgdHlwZSBDbGFzc0lkID0gc3RyaW5nO1xuZXhwb3J0IHR5cGUgT3V0cHV0TmFtZSA9IHN0cmluZztcbmV4cG9ydCB0eXBlIElucHV0TmFtZSA9IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRPdXRwdXRDb25maWcge1xuICBjbGFzc0lkOiBDbGFzc0lkO1xuICBvdXRwdXROYW1lOiBPdXRwdXROYW1lO1xufVxuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRJbnB1dENvbmZpZyB7XG4gIGNsYXNzSWQ6IENsYXNzSWQ7XG4gIGlucHV0TmFtZT86IElucHV0TmFtZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21tdW5pY2F0aW9uRmxvd0NvbmZpZyB7XG4gIG91dHB1dDogQ29tcG9uZW50T3V0cHV0Q29uZmlnO1xuICBpbnB1dDogQ29tcG9uZW50SW5wdXRDb25maWc7XG4gIG1hcFBheWxvYWQ/OiAocGF5bG9hZDogYW55KSA9PiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxvdyB7XG4gIG91dHB1dDogT3V0cHV0TmFtZTtcbiAgaW5wdXQ/OiBJbnB1dE5hbWU7XG4gIG1hcD86IChwYXlsb2FkOiBhbnkpID0+IGFueTtcbn1cblxuZXhwb3J0IGNvbnN0IENPTkZJR19GTE9XUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxBcnJheTxBcnJheTxDb21tdW5pY2F0aW9uRmxvd0NvbmZpZz4+PihcbiAgJ0BiYWNrYmFzZS9mb3VuZGF0aW9uIENvbW11bmNhdGlvbiBGbG93IENvbmZpZ3VyYXRpb24nLFxuKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZsb3dzU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdHJhbnNpdGlvbnMgPSBuZXcgR3JhcGg8Q2xhc3NJZCwgQXJyYXk8Rmxvdz4+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KENPTkZJR19GTE9XUylcbiAgICBmbG93c0NvbmZpZzogLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9hcnJheS10eXBlXG4gICAgQXJyYXk8Q29tbXVuaWNhdGlvbkZsb3dDb25maWc+W10gfCBudWxsLCAvLyBBbmd1bGFyIGRvZXNuJ3QgbGlrZSBuZXN0ZWQgYXJyYXkgdHlwZXNcbiAgKSB7XG4gICAgaWYgKGZsb3dzQ29uZmlnICE9PSBudWxsKSB7XG4gICAgICBmbG93c0NvbmZpZy5mb3JFYWNoKGZsb3dzID0+IHtcbiAgICAgICAgZmxvd3MuZm9yRWFjaChmbG93ID0+IHtcbiAgICAgICAgICB0aGlzLmFkZEZsb3coZmxvdyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhZGRGbG93KGNvbmZpZzogQ29tbXVuaWNhdGlvbkZsb3dDb25maWcpIHtcbiAgICBjb25zdCBjdXJyZW50RWRnZSA9IHRoaXMudHJhbnNpdGlvbnMuZ2V0RWRnZShjb25maWcub3V0cHV0LmNsYXNzSWQsIGNvbmZpZy5pbnB1dC5jbGFzc0lkKTtcbiAgICBjb25zdCBmbG93ID0ge1xuICAgICAgb3V0cHV0OiBjb25maWcub3V0cHV0Lm91dHB1dE5hbWUsXG4gICAgICBpbnB1dDogY29uZmlnLmlucHV0LmlucHV0TmFtZSxcbiAgICAgIG1hcDogY29uZmlnLm1hcFBheWxvYWQsXG4gICAgfTtcbiAgICBjb25zdCBlZGdlID0gY3VycmVudEVkZ2UgPyBbLi4uY3VycmVudEVkZ2UsIGZsb3ddIDogW2Zsb3ddO1xuICAgIHRoaXMudHJhbnNpdGlvbnMuY29ubmVjdChjb25maWcub3V0cHV0LmNsYXNzSWQsIGNvbmZpZy5pbnB1dC5jbGFzc0lkLCBlZGdlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGbG93cyhcbiAgICBmcm9tOiBDbGFzc0lkLFxuICAgIGZyb21PdXRwdXQ6IE91dHB1dE5hbWUsXG4gICAgdG86IEFycmF5PENsYXNzSWQ+LFxuICAgIHRvSW5wdXQ6IElucHV0TmFtZSB8IHVuZGVmaW5lZCxcbiAgKTogQXJyYXk8Rmxvdz4ge1xuICAgIGNvbnN0IGZsb3dzID0gdG8ucmVkdWNlKFxuICAgICAgKGFjYywgY2xhc3NJZCkgPT4gWy4uLmFjYywgLi4uKHRoaXMudHJhbnNpdGlvbnMuZ2V0RWRnZShmcm9tLCBjbGFzc0lkKSB8fCBbXSldLFxuICAgICAgW10gYXMgQXJyYXk8Rmxvdz4sXG4gICAgKTtcblxuICAgIHJldHVybiBmbG93cy5maWx0ZXIoXG4gICAgICBmbG93ID0+XG4gICAgICAgIGZsb3cub3V0cHV0ID09PSBmcm9tT3V0cHV0ICYmICh0b0lucHV0ID09PSB1bmRlZmluZWQgfHwgZmxvdy5pbnB1dCA9PT0gdW5kZWZpbmVkIHx8IHRvSW5wdXQgPT09IGZsb3cuaW5wdXQpLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==