import { serializerDeserializer } from '@backbase/communication-property';
const parsePipe = (pipeString) => {
    const communicationDefinition = serializerDeserializer.fromProperty(pipeString);
    if (communicationDefinition !== undefined) {
        return {
            processorName: communicationDefinition.transport,
            args: [communicationDefinition.param],
        };
    }
    else {
        const parts = pipeString.split(' ');
        const processorName = parts.shift();
        return {
            processorName,
            args: parts,
        };
    }
};
const ɵ0 = parsePipe;
const LEGACY_HANDLERS = ['debug', 'navigation', 'navigation-url', 'route-param', 'model-property'];
const isPipelineConfig = (propertyValue) => {
    const handlerName = propertyValue.split(':')[0];
    return !LEGACY_HANDLERS.includes(handlerName);
};
const ɵ1 = isPipelineConfig;
const upgradeToPipelineConfig = (propertyName, propertyValue) => {
    const colonIndex = propertyValue.indexOf(':');
    const hasArg = colonIndex !== -1;
    const handlerName = hasArg ? propertyValue.substr(0, colonIndex) : propertyValue;
    const handlerArg = hasArg ? propertyValue.substr(colonIndex + 1) : '';
    const handlerToPipeMapping = {
        'navigation-url': () => `url ${handlerArg} ${propertyName}`,
        navigation: () => `navigation ${propertyName} ${handlerArg}`,
        'model-property': () => `model ${handlerArg}`,
    };
    return (handlerToPipeMapping[handlerName] || (() => `${handlerName} ${handlerArg}`))().trim();
};
const ɵ2 = upgradeToPipelineConfig;
const normalizePropertyValue = (propertyName, value) => {
    if (!isPipelineConfig(value)) {
        return upgradeToPipelineConfig(propertyName, value);
    }
    return value;
};
const ɵ3 = normalizePropertyValue;
export const parseInputOutputPropertyValue = (propertyName, propertyValue) => {
    const normalPropertyValue = normalizePropertyValue(propertyName, propertyValue);
    const streamHandlers = normalPropertyValue.trim();
    return parsePipe(streamHandlers);
};
export const inputOutputProperties = (properties) => Object.entries(properties).map(([propertyName, value]) => ({
    propertyName,
    pipeline: parseInputOutputPropertyValue(propertyName, `${value}`),
}));
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL2NvbW11bmljYXRpb24vaXRlbS1pby9wYXJzZS1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQWExRSxNQUFNLFNBQVMsR0FBRyxDQUFDLFVBQWtCLEVBQW1CLEVBQUU7SUFDeEQsTUFBTSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEYsSUFBSSx1QkFBdUIsS0FBSyxTQUFTLEVBQUU7UUFDekMsT0FBTztZQUNMLGFBQWEsRUFBRSx1QkFBdUIsQ0FBQyxTQUFTO1lBQ2hELElBQUksRUFBRSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQztTQUN0QyxDQUFDO0tBQ0g7U0FBTTtRQUNMLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBWSxDQUFDO1FBQzlDLE9BQU87WUFDTCxhQUFhO1lBQ2IsSUFBSSxFQUFFLEtBQUs7U0FDWixDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUM7O0FBRUYsTUFBTSxlQUFlLEdBQWtCLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUNsSCxNQUFNLGdCQUFnQixHQUFHLENBQUMsYUFBcUIsRUFBVyxFQUFFO0lBQzFELE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsT0FBTyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDaEQsQ0FBQyxDQUFDOztBQUVGLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxZQUFvQixFQUFFLGFBQXFCLEVBQVUsRUFBRTtJQUN0RixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sTUFBTSxHQUFHLFVBQVUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNqQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFDakYsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRXRFLE1BQU0sb0JBQW9CLEdBQW9DO1FBQzVELGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sVUFBVSxJQUFJLFlBQVksRUFBRTtRQUMzRCxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsY0FBYyxZQUFZLElBQUksVUFBVSxFQUFFO1FBQzVELGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsVUFBVSxFQUFFO0tBQzlDLENBQUM7SUFDRixPQUFPLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLFdBQVcsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNoRyxDQUFDLENBQUM7O0FBRUYsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLFlBQW9CLEVBQUUsS0FBYSxFQUFVLEVBQUU7SUFDN0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzVCLE9BQU8sdUJBQXVCLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUM7O0FBRUYsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQUcsQ0FBQyxZQUFvQixFQUFFLGFBQXFCLEVBQW1CLEVBQUU7SUFDNUcsTUFBTSxtQkFBbUIsR0FBRyxzQkFBc0IsQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDaEYsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEQsT0FBTyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxVQUFzQixFQUE4QixFQUFFLENBQzFGLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekQsWUFBWTtJQUNaLFFBQVEsRUFBRSw2QkFBNkIsQ0FBQyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQztDQUNsRSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlcmlhbGl6ZXJEZXNlcmlhbGl6ZXIgfSBmcm9tICdAYmFja2Jhc2UvY29tbXVuaWNhdGlvbi1wcm9wZXJ0eSc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL3dlYi1zZGsnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBpcGVsaW5lQ29tbWFuZCB7XG4gIHByb2Nlc3Nvck5hbWU6IHN0cmluZztcbiAgYXJnczogQXJyYXk8dW5rbm93bj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRPdXRwdXRQcm9wZXJ0eSB7XG4gIHByb3BlcnR5TmFtZTogc3RyaW5nO1xuICBwaXBlbGluZTogUGlwZWxpbmVDb21tYW5kO1xufVxuXG5jb25zdCBwYXJzZVBpcGUgPSAocGlwZVN0cmluZzogc3RyaW5nKTogUGlwZWxpbmVDb21tYW5kID0+IHtcbiAgY29uc3QgY29tbXVuaWNhdGlvbkRlZmluaXRpb24gPSBzZXJpYWxpemVyRGVzZXJpYWxpemVyLmZyb21Qcm9wZXJ0eShwaXBlU3RyaW5nKTtcbiAgaWYgKGNvbW11bmljYXRpb25EZWZpbml0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvY2Vzc29yTmFtZTogY29tbXVuaWNhdGlvbkRlZmluaXRpb24udHJhbnNwb3J0LFxuICAgICAgYXJnczogW2NvbW11bmljYXRpb25EZWZpbml0aW9uLnBhcmFtXSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHBhcnRzID0gcGlwZVN0cmluZy5zcGxpdCgnICcpO1xuICAgIGNvbnN0IHByb2Nlc3Nvck5hbWUgPSBwYXJ0cy5zaGlmdCgpIGFzIHN0cmluZztcbiAgICByZXR1cm4ge1xuICAgICAgcHJvY2Vzc29yTmFtZSxcbiAgICAgIGFyZ3M6IHBhcnRzLFxuICAgIH07XG4gIH1cbn07XG5cbmNvbnN0IExFR0FDWV9IQU5ETEVSUzogQXJyYXk8c3RyaW5nPiA9IFsnZGVidWcnLCAnbmF2aWdhdGlvbicsICduYXZpZ2F0aW9uLXVybCcsICdyb3V0ZS1wYXJhbScsICdtb2RlbC1wcm9wZXJ0eSddO1xuY29uc3QgaXNQaXBlbGluZUNvbmZpZyA9IChwcm9wZXJ0eVZhbHVlOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgY29uc3QgaGFuZGxlck5hbWUgPSBwcm9wZXJ0eVZhbHVlLnNwbGl0KCc6JylbMF07XG4gIHJldHVybiAhTEVHQUNZX0hBTkRMRVJTLmluY2x1ZGVzKGhhbmRsZXJOYW1lKTtcbn07XG5cbmNvbnN0IHVwZ3JhZGVUb1BpcGVsaW5lQ29uZmlnID0gKHByb3BlcnR5TmFtZTogc3RyaW5nLCBwcm9wZXJ0eVZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjb2xvbkluZGV4ID0gcHJvcGVydHlWYWx1ZS5pbmRleE9mKCc6Jyk7XG4gIGNvbnN0IGhhc0FyZyA9IGNvbG9uSW5kZXggIT09IC0xO1xuICBjb25zdCBoYW5kbGVyTmFtZSA9IGhhc0FyZyA/IHByb3BlcnR5VmFsdWUuc3Vic3RyKDAsIGNvbG9uSW5kZXgpIDogcHJvcGVydHlWYWx1ZTtcbiAgY29uc3QgaGFuZGxlckFyZyA9IGhhc0FyZyA/IHByb3BlcnR5VmFsdWUuc3Vic3RyKGNvbG9uSW5kZXggKyAxKSA6ICcnO1xuXG4gIGNvbnN0IGhhbmRsZXJUb1BpcGVNYXBwaW5nOiB7IFtvbGQ6IHN0cmluZ106ICgpID0+IHN0cmluZyB9ID0ge1xuICAgICduYXZpZ2F0aW9uLXVybCc6ICgpID0+IGB1cmwgJHtoYW5kbGVyQXJnfSAke3Byb3BlcnR5TmFtZX1gLFxuICAgIG5hdmlnYXRpb246ICgpID0+IGBuYXZpZ2F0aW9uICR7cHJvcGVydHlOYW1lfSAke2hhbmRsZXJBcmd9YCxcbiAgICAnbW9kZWwtcHJvcGVydHknOiAoKSA9PiBgbW9kZWwgJHtoYW5kbGVyQXJnfWAsXG4gIH07XG4gIHJldHVybiAoaGFuZGxlclRvUGlwZU1hcHBpbmdbaGFuZGxlck5hbWVdIHx8ICgoKSA9PiBgJHtoYW5kbGVyTmFtZX0gJHtoYW5kbGVyQXJnfWApKSgpLnRyaW0oKTtcbn07XG5cbmNvbnN0IG5vcm1hbGl6ZVByb3BlcnR5VmFsdWUgPSAocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBpZiAoIWlzUGlwZWxpbmVDb25maWcodmFsdWUpKSB7XG4gICAgcmV0dXJuIHVwZ3JhZGVUb1BpcGVsaW5lQ29uZmlnKHByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXJzZUlucHV0T3V0cHV0UHJvcGVydHlWYWx1ZSA9IChwcm9wZXJ0eU5hbWU6IHN0cmluZywgcHJvcGVydHlWYWx1ZTogc3RyaW5nKTogUGlwZWxpbmVDb21tYW5kID0+IHtcbiAgY29uc3Qgbm9ybWFsUHJvcGVydHlWYWx1ZSA9IG5vcm1hbGl6ZVByb3BlcnR5VmFsdWUocHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlKTtcbiAgY29uc3Qgc3RyZWFtSGFuZGxlcnMgPSBub3JtYWxQcm9wZXJ0eVZhbHVlLnRyaW0oKTtcbiAgcmV0dXJuIHBhcnNlUGlwZShzdHJlYW1IYW5kbGVycyk7XG59O1xuXG5leHBvcnQgY29uc3QgaW5wdXRPdXRwdXRQcm9wZXJ0aWVzID0gKHByb3BlcnRpZXM6IFByb3BlcnRpZXMpOiBBcnJheTxJbnB1dE91dHB1dFByb3BlcnR5PiA9PlxuICBPYmplY3QuZW50cmllcyhwcm9wZXJ0aWVzKS5tYXAoKFtwcm9wZXJ0eU5hbWUsIHZhbHVlXSkgPT4gKHtcbiAgICBwcm9wZXJ0eU5hbWUsXG4gICAgcGlwZWxpbmU6IHBhcnNlSW5wdXRPdXRwdXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5TmFtZSwgYCR7dmFsdWV9YCksXG4gIH0pKTtcbiJdfQ==