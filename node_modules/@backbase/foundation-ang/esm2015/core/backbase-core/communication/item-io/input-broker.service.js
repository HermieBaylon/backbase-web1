import { ComponentFactoryResolver, Injectable, Inject, Optional } from '@angular/core';
import { take, takeUntil } from 'rxjs/operators';
import { ItemLifecycleService } from '../../rendering/item-lifecycle.service';
import { LAZY_MAP } from '../../rendering/lazy-config';
import { createComponentPipe } from '../pipes/handlers/component';
import { PipelineRegistry } from '../pipes/pipeline-registry';
import { PipelineService } from '../pipes/pipeline.service';
import { getProcessorNames, parseProperties } from './broker-helpers';
/**
 * The input broker service creates a communication pipeline
 * using the component input as a sink. The source of the pipeline
 * is determined by the item model.
 */
export class InputBrokerService {
    constructor(itemLifecycle, pipelineRegistry, componentFactoryResolver, lazyConfig) {
        this.itemLifecycle = itemLifecycle;
        this.pipelineRegistry = pipelineRegistry;
        this.componentFactoryResolver = componentFactoryResolver;
        this.lazyConfig = lazyConfig;
    }
    bootstrap() {
        // Model properties cannot be linked to the Inputs of lazy loaded items
        const lazyLoadedComponents = (this.lazyConfig
            ? this.lazyConfig.filter((config) => !!config.components)
            : []).reduce((acc, config) => [...acc, ...config.components], []);
        this.itemLifecycle.whenCreate().subscribe(({ itemModel, component }) => {
            const gc$ = this.itemLifecycle.whenRemove(itemModel.value.name).pipe(take(1));
            this.runInputPipelines(itemModel, component, gc$);
            if (!lazyLoadedComponents.includes(itemModel.value.ɵclassId)) {
                this.runModelInputs(itemModel, component, gc$);
            }
        });
    }
    runModelInputs(itemModel, ref, gc$) {
        this.componentFactoryResolver.resolveComponentFactory(ref.componentType).inputs.forEach(input => {
            // Abort if there is already an "input." property with the same name
            if (itemModel.value.ɵinputProperties[input.templateName] !== undefined)
                return;
            const modelValue = itemModel.value.ɵproperties[input.templateName];
            if (modelValue === undefined)
                return;
            const source = itemModel.value.property(input.templateName, modelValue);
            const sink = this.inputSink(ref, input.propName);
            return sink(source.pipe(takeUntil(gc$)));
        });
    }
    runInputPipelines(itemModel, ref, gc$) {
        const pipelineService = ref.injector.get(PipelineService);
        parseProperties(itemModel.value.ɵinputProperties).forEach(inputPipesConfig => {
            const sourceCommand = inputPipesConfig.pipeline;
            const sourceFn = pipelineService.createSource(sourceCommand.processorName, sourceCommand.args);
            const pipeline = {
                source: sourceFn,
                sink: this.inputSink(ref, inputPipesConfig.propertyName),
            };
            pipelineService.runPipeline(pipeline, gc$);
        });
    }
    inputSink(ref, inputName) {
        return createComponentPipe().sink(ref, inputName);
    }
    getItemProviders(item) {
        return getProcessorNames(item.ɵinputProperties).map(processorName => {
            try {
                return this.pipelineRegistry.getProcessorProvider(processorName);
            }
            catch (message) {
                throw new Error(`Input '${processorName}' on ${item.name} is misconfigured. ${message}`);
            }
        });
    }
}
InputBrokerService.decorators = [
    { type: Injectable }
];
InputBrokerService.ctorParameters = () => [
    { type: ItemLifecycleService },
    { type: PipelineRegistry },
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Inject, args: [LAZY_MAP,] }, { type: Optional }] }
];
export function createInputBootstrap(Broker) {
    return Broker.bootstrap.bind(Broker);
}
//# sourceMappingURL=data:application/json;base64,