import { flatMap, flatten } from './array';
import { merge, of, combineLatest } from 'rxjs';
import { map, scan, shareReplay, distinctUntilChanged, switchMap } from 'rxjs/operators';
const treeValue = (t) => t.value;
const ɵ0 = treeValue;
/**
 * Abstract tree representation.
 */
export class Tree {
    constructor(
    /**
     * The value of this node
     */
    value, 
    /**
     * The children of this node
     */
    children) {
        this.value = value;
        this.children = children;
    }
    map(callbackfn) {
        const newChildren = this.children.map(childTree => childTree.map(callbackfn));
        return new Tree(callbackfn(this.value, this.children.map(treeValue), newChildren.map(treeValue)), newChildren);
    }
    /**
     * Flattens the tree into a flat array of tree nodes.
     *
     * The tree is flattened by in order of depth-first-preorder-traversal.
     */
    flatten() {
        return [this, ...flatMap(child => child.flatten(), this.children)];
    }
    pathTo(value) {
        if (this.value === value) {
            return [this.value];
        }
        else {
            for (const child of this.children) {
                const childPath = child.pathTo(value);
                if (childPath.length !== 0) {
                    return [this.value, ...childPath];
                }
            }
            return [];
        }
    }
    lowestCommonAncestor(left, right) {
        const leftPath = new Set(this.pathTo(left));
        return this.pathTo(right)
            .reverse()
            .find(candidate => leftPath.has(candidate));
    }
}
/**
 * @description
 * This is an operator that can be used with an Observable's `pipe`.
 *
 * The piped observable should be an observable of an array.
 *
 * The source array is mapped over with the provided callback function, and the
 * callback function should take an item (T) from the source array, and return an
 * *observable* of a new item (R).
 *
 * The result is a new observable of an array the same length as the source array
 * but with the Ts mapped to Rs.
 *
 * This is useful for mapping over the observable children of node in the model tree.
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * const children: ObservableTree<ItemModel> = this.model.children;
 * const titleProperties: Observable<Array<string>> = this.model.children.pipe(
 *   mapObservableArray(item => item.value.property<string>('title', 'Default Title'))
 * );
 * ```
 * @param callback Function that produces an *observable* element of the new Array
 */
export const mapObservableArray = function (callback) {
    return (source) => {
        return source.pipe(switchMap((tArray) => combineLatest(tArray.map(callback))));
    };
};
/**
 * An tree where each node's children are observable.
 */
export class ObservableTree {
    constructor(
    /**
     * The value of this node
     */
    value, initialChildren, insertions, removals) {
        this.value = value;
        this.insertions = insertions;
        this.removals = removals;
        // Reducers to update children state
        this.initialChildren = of((acc) => acc); // identity reducer for initial value
        this.insertUpdates = this.insertions.pipe(map(({ item, index }) => (children) => [...children.slice(0, index), item, ...children.slice(index)]));
        this.removalUpdates = this.removals.pipe(map((index) => (children) => {
            const newChildren = [...children];
            newChildren.splice(index, 1);
            return newChildren;
        }));
        // Combine reducers to a single stream
        this.reducers = merge(this.initialChildren, this.insertUpdates, this.removalUpdates);
        this.children = this.reducers.pipe(scan((currentChildren, updateFn) => updateFn(currentChildren), initialChildren), shareReplay(1));
    }
    /**
     * Find a node in the tree. Returns the result as an observable.
     *
     * If the element is found it is emitted, otherwise, the result emits undefined.
     *
     * The result observable will only emit again if the found node changes (ie: if
     * it is added or removed, or if it finds a different node).
     *
     * @param predicate predicate is called once for each node of the tree, until a
     * node is found. The predicate will be called again every time the tree changes
     * (ie: a node in the tree is added or removed). The predicate is called in order
     * of depth-first-preorder-traversal.
     */
    find(predicate) {
        return this.flatten().pipe(map(nodes => nodes.find(node => predicate(node.value))), distinctUntilChanged());
    }
    pathTo(value) {
        return this.toTree().pipe(map((tree) => tree.pathTo(value)), distinctUntilChanged());
    }
    lowestCommonAncestor(left, right) {
        return this.toTree().pipe(map((tree) => tree.lowestCommonAncestor(left, right)), distinctUntilChanged());
    }
    filter(predicate) {
        return this.flatten().pipe(map(nodes => nodes.filter(node => predicate(node.value))), distinctUntilChanged());
    }
    /**
     * Flattens a tree into a single array of nodes. The result nodes are still trees.
     *
     * The tree is flattened in order of depth-first-preorder-traversal.
     *
     * The result is returned as an observable and re-emits every time a node is added
     * or removed from the tree.
     */
    flatten() {
        return this.children.pipe(switchMap(children => (children.length === 0 ? of([]) : combineLatest(children.map(child => child.flatten())))), map(flatten), map(flat => [this, ...flat]));
    }
    /**
     * Takes a snapshot of the tree.
     */
    toTree() {
        return this.children.pipe(switchMap(children => {
            const mappedChildren$ = children.length === 0 ? of([]) : combineLatest(children.map(child => child.toTree()));
            return mappedChildren$.pipe(map((mappedChildren) => new Tree(this.value, mappedChildren)));
        }));
    }
}
/**
 * Like combineLatest in rxjs, but for a tree of observables, instead of
 * an array of observables.
 */
export function combineTree(tree) {
    // Convert children from Array<Tree<Observable<T>>> to Observable<Array<Tree<T>>>
    const children$ = tree.children.length === 0 ? of([]) : combineLatest(tree.children.map(combineTree));
    return combineLatest([tree.value, children$]).pipe(map(([value, children]) => new Tree(value, children)));
}
/**
 * Extracts a branch from a tree that starts at the root, and ends at the leaf
 * node, as determined by the predicate (returns a linked list).
 *
 * If the element is not found, the result is undefined.
 *
 * @param predicate predicate is called once for each node of the tree, until a
 * node is found. The predicate is called in order of depth-first-preorder-traversal.
 */
export const treeBranch = (tree, predicate) => {
    const walkTree = (treeInner, index, parentTree) => {
        if (predicate(treeInner, index, parentTree)) {
            return {
                value: treeInner,
            };
        }
        if (!treeInner.children) {
            return undefined;
        }
        for (let i = 0; i < treeInner.children.length; i++) {
            const foundInChild = walkTree(treeInner.children[i], i, treeInner);
            if (foundInChild) {
                return {
                    value: treeInner,
                    next: foundInChild,
                };
            }
        }
        return undefined;
    };
    return walkTree(tree);
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,