/**
 * This helper determines container objects from any other ones.
 * @param item an item to be evaluated
 * @returns true for containers and false for widgets and any other objects
 */
export const isContainer = (item) => 'name' in item && 'properties' in item && 'children' in item;
/**
 * Returns the elements of a tree with the children that meet the condition specified in a predicate function.
 * @param item an item whose children need to be filtered
 * @param predicate the filter method called for each child. It should return boolean
 */
export const filterChildren = (item, predicate) => {
    return isContainer(item)
        ? Object.assign(Object.assign({}, item), { children: item.children.map(child => filterChildren(child, predicate)).filter(predicate) }) : item;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1tb2RlbC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvbW9kZWxzL2l0ZW0tbW9kZWwtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQVUsRUFBcUIsRUFBRSxDQUMzRCxNQUFNLElBQUksSUFBSSxJQUFJLFlBQVksSUFBSSxJQUFJLElBQUksVUFBVSxJQUFJLElBQUksQ0FBQztBQUUvRDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQWlCLElBQU8sRUFBRSxTQUFtQyxFQUFLLEVBQUU7SUFDaEcsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ3RCLENBQUMsaUNBQ00sSUFBSSxLQUNQLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBRTVGLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDWCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVtLCBDb250YWluZXIgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkayc7XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgZGV0ZXJtaW5lcyBjb250YWluZXIgb2JqZWN0cyBmcm9tIGFueSBvdGhlciBvbmVzLlxuICogQHBhcmFtIGl0ZW0gYW4gaXRlbSB0byBiZSBldmFsdWF0ZWRcbiAqIEByZXR1cm5zIHRydWUgZm9yIGNvbnRhaW5lcnMgYW5kIGZhbHNlIGZvciB3aWRnZXRzIGFuZCBhbnkgb3RoZXIgb2JqZWN0c1xuICovXG5leHBvcnQgY29uc3QgaXNDb250YWluZXIgPSAoaXRlbTogSXRlbSk6IGl0ZW0gaXMgQ29udGFpbmVyID0+XG4gICduYW1lJyBpbiBpdGVtICYmICdwcm9wZXJ0aWVzJyBpbiBpdGVtICYmICdjaGlsZHJlbicgaW4gaXRlbTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50cyBvZiBhIHRyZWUgd2l0aCB0aGUgY2hpbGRyZW4gdGhhdCBtZWV0IHRoZSBjb25kaXRpb24gc3BlY2lmaWVkIGluIGEgcHJlZGljYXRlIGZ1bmN0aW9uLlxuICogQHBhcmFtIGl0ZW0gYW4gaXRlbSB3aG9zZSBjaGlsZHJlbiBuZWVkIHRvIGJlIGZpbHRlcmVkXG4gKiBAcGFyYW0gcHJlZGljYXRlIHRoZSBmaWx0ZXIgbWV0aG9kIGNhbGxlZCBmb3IgZWFjaCBjaGlsZC4gSXQgc2hvdWxkIHJldHVybiBib29sZWFuXG4gKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXJDaGlsZHJlbiA9IDxUIGV4dGVuZHMgSXRlbT4oaXRlbTogVCwgcHJlZGljYXRlOiAoY2hpbGQ6IEl0ZW0pID0+IGJvb2xlYW4pOiBUID0+IHtcbiAgcmV0dXJuIGlzQ29udGFpbmVyKGl0ZW0pXG4gICAgPyB7XG4gICAgICAgIC4uLml0ZW0sXG4gICAgICAgIGNoaWxkcmVuOiBpdGVtLmNoaWxkcmVuLm1hcChjaGlsZCA9PiBmaWx0ZXJDaGlsZHJlbihjaGlsZCwgcHJlZGljYXRlKSkuZmlsdGVyKHByZWRpY2F0ZSksXG4gICAgICB9XG4gICAgOiBpdGVtO1xufTtcbiJdfQ==