/**
 * Creates a new LinkedList with the results of calling a provided function on
 * every element in the provided LinkedList.
 *
 * @param list
 * @param fn
 */
export const mapLinkedList = (list, fn) => ({
    value: fn(list.value),
    next: list.next === undefined ? undefined : mapLinkedList(list.next, fn),
});
/**
 * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD
 * to TAIL, where the new HEAD is determined by the first "true" result of calling the predicate
 * on each node in the list.
 *
 * The search is done by iterating over each element in the linked list
 * in the order from HEAD to TAIL.
 *
 * If not found, returns undefined.
 *
 * @param list
 * @param predicate
 */
export const linkedListFind = (list, predicate) => {
    if (predicate(list.value)) {
        return list;
    }
    return list.next ? linkedListFind(list.next, predicate) : undefined;
};
/**
 * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD
 * to TAIL, where the new HEAD is determined by the first "true" result of calling the predicate
 * on each node in the list.
 *
 * The search is done by iterating over each element in the linked list
 * in the order from TAIL to HEAD.
 *
 * If not found, returns undefined.
 *
 * @param list
 * @param predicate
 */
export const linkedListFindLast = (list, predicate) => {
    const foundChild = list.next ? linkedListFindLast(list.next, predicate) : undefined;
    if (foundChild) {
        return foundChild;
    }
    return predicate(list.value) ? list : undefined;
};
/**
 * Returns a shallow copy of a portion of a linked list into a new linked list,
 * selected from HEAD (inclusive) to the first element to return true (exclusive).
 * So the new TAIL will be the parent of the first element to return true.
 *
 * The search is done by iterating over each element in the linked list in the
 * order from HEAD to TAIL.
 *
 * If not found, returns undefined.
 *
 * @param list
 * @param predicate
 */
const linkedListSliceTail = (list, predicate) => {
    if (predicate(list.value)) {
        return undefined;
    }
    return {
        value: list.value,
        next: list.next ? linkedListSliceTail(list.next, predicate) : undefined,
    };
};
const ɵ0 = linkedListSliceTail;
/**
 * Returns a shallow copy of a portion of a linked list into a linked list, selected from HEAD
 * to TAIL, where the new HEAD is determined by the first "true" result of calling the "begin"
 * predicate and the new TAIL is determined by the first "true" result of calling the "end"
 * predicate.
 *
 * If no "begin" predicate is sent, the HEAD will be the current HEAD.
 *
 * If no "end" predicate is sent, the TAIL will be the current TAIL.
 *
 * The search is done by iterating over each element in the linked list
 * in the order from HEAD to TAIL until both predicates return true.
 *
 * If not both found, returns undefined.
 *
 * @param list
 * @param predicate
 */
export const linkedListSlice = (list, begin, end) => {
    const head = begin ? linkedListFind(list, begin) : list;
    if (!head) {
        return undefined;
    }
    return end ? linkedListSliceTail(head, end) : head;
};
export const linkedListToArray = (list) => [
    list.value,
    ...(list.next ? linkedListToArray(list.next) : []),
];
export const linkedListFromArray = (arr) => arr.reduceRight((next, value) => ({ value, next }), undefined);
export const linkedListLast = (list) => (list.next ? linkedListLast(list.next) : list);
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,