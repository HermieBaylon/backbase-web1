import { Injectable } from '@angular/core';
import { serializerDeserializer } from '@backbase/communication-property';
import { BehaviorSubject, Subject, of as observableOf, merge, combineLatest } from 'rxjs';
import { map, filter, pluck, shareReplay, switchMap } from 'rxjs/operators';
import { isContainer } from './item-model-utils';
import { ItemModel } from '../models/item-model';
import { ObservableTree } from '../models/tree';
import * as i0 from "@angular/core";
export const ROOT_COMPONENT_CLASS_ID = 'RootComponent';
const DEFAULT_ROOT_NAME = 'bb-root-empty';
export const isInsert = (update) => !!(update.item && update.itemLocation);
export const isPropertyUpdate = (update) => !!(update.name && update.properties);
export const isRemovalUpdate = (update) => !!(update && 'parentName' in update && 'index' in update);
class CommunicationInputs {
    constructor(properties) {
        this.properties = properties;
    }
    static fromProperties(properties) {
        return new CommunicationInputs(new Map(Object.entries(properties)
            .filter((property) => typeof property[1] === 'string')
            .map(([propertyName, propertyValue]) => [propertyName, serializerDeserializer.fromProperty(propertyValue)])
            .filter((property) => property[1] !== undefined)));
    }
    hasInputFor(communicationDefinition) {
        return (Array.from(this.properties.values()).find(candidate => communicationDefinition.equals(candidate)) !== undefined);
    }
}
/**
 * The root container is basically the page model, but we don't assume that the
 * angular app is the entire page. It could just be a subset of the page model,
 * hence we call it "root container"
 *
 * @internal
 */
export class ӨRootContainerService {
    constructor() {
        // The websdk commands mapped to observables.
        this.propertyUpdates = new Subject();
        this.inserts = new Subject();
        this.removals = new Subject();
        this.modelUpdates = merge(this.propertyUpdates, this.inserts, this.removals);
        this.defaultValue = {
            name: DEFAULT_ROOT_NAME,
            properties: { classId: ROOT_COMPONENT_CLASS_ID },
            children: [],
        };
        this.rootContainerItem = new BehaviorSubject(this.defaultValue);
        this.model = this.rootContainerItem.pipe(filter(container => !this.isDefaultContainer(container.name)), // skip the empty state
        map(c => this.createInitialModelState(c)), shareReplay(1));
    }
    createInitialModelState({ name, properties, children }) {
        const initialRootContainerProperties = Object.assign(Object.assign({}, properties), { classId: ROOT_COMPONENT_CLASS_ID });
        return this.createModelStateNode({
            name,
            properties: initialRootContainerProperties,
            children,
        });
    }
    createModelStateNode(item) {
        // Filter property updates to just the updates for this item.
        const propertyUpdates = this.propertyUpdates.pipe(filter(update => update.name === item.name), pluck('properties'));
        // Recursively create the children.
        const childNodes = isContainer(item)
            ? item.children.map(this.createModelStateNode.bind(this))
            : [];
        let insertions;
        let removals;
        if (isContainer(item)) {
            // Filter container updates for this item (inserts and removes)
            insertions = this.inserts.pipe(filter(insert => !!insert.itemLocation && insert.itemLocation.parentName === item.name), map(insert => ({
                item: this.createModelStateNode(insert.item),
                index: insert.itemLocation ? insert.itemLocation.index : 0,
            })));
            removals = this.removals.pipe(filter((removal) => !!removal && removal.parentName === item.name), pluck('index'));
        }
        else {
            insertions = observableOf();
            removals = observableOf();
        }
        // Create the node itself.
        return new ObservableTree(new ItemModel(item.name, item.properties, propertyUpdates), childNodes, insertions, removals);
    }
    get rootName() {
        return this.rootContainerItem.getValue().name;
    }
    isDefaultContainer(name) {
        return name === DEFAULT_ROOT_NAME;
    }
    isBootstrapped() {
        return !this.isDefaultContainer(this.rootName);
    }
    updateItem(name, properties) {
        this.propertyUpdates.next({ name, properties: properties });
    }
    insertItem(item, itemLocation) {
        if (!this.isBootstrapped()) {
            this.rootContainerItem.next(item);
        }
        else {
            this.inserts.next({ item, itemLocation });
        }
    }
    removeItem(itemName, itemLocation) {
        if (this.rootName === itemName) {
            this.rootContainerItem.next(this.defaultValue);
        }
        else {
            this.removals.next(itemLocation);
        }
    }
    filter(predicate) {
        return this.model.pipe(switchMap(model => model.filter(predicate)));
    }
    getCommunicationGroupItems(groupDefinition) {
        return this.filter((item) => CommunicationInputs.fromProperties(item.ɵinputProperties).hasInputFor(groupDefinition)).pipe(map(nodes => nodes.map(node => node.value)));
    }
    // The only case where there will not be a common ancestor (i.e. return `undefined`) is if there are
    // no items with inputs in the communication group.
    commonAncestor(groupDefinition) {
        return combineLatest([
            this.model.pipe(switchMap(model => model.toTree())),
            this.getCommunicationGroupItems(groupDefinition),
        ]).pipe(map(([tree, [first, ...items]]) => {
            let lowest = first;
            for (const item of items) {
                const newLowest = tree.lowestCommonAncestor(lowest, item);
                if (newLowest === undefined) {
                    return undefined;
                }
                else {
                    lowest = newLowest;
                }
            }
            return lowest;
        }));
    }
}
ӨRootContainerService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ӨRootContainerService_Factory() { return new ӨRootContainerService(); }, token: ӨRootContainerService, providedIn: "root" });
ӨRootContainerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,