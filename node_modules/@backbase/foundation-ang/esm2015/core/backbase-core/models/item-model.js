import { distinctUntilChanged, map, pluck, scan, shareReplay, startWith } from 'rxjs/operators';
import { equal, propertiesByPrefix, propertiesAsPairs } from '../../web-sdk/properties';
import { ObservableTree } from './tree';
/**
 * @deprecated Will be removed in v7.0.0
 */
export class ItemModel {
    constructor(name, initialProperties, propertyUpdates) {
        this.name = name;
        const applyPropertyUpdate = (currentProperties, update) => {
            return Object.assign(Object.assign({}, currentProperties), update);
        };
        this.properties = propertyUpdates.pipe(startWith(initialProperties), scan(applyPropertyUpdate), shareReplay(1));
        if (initialProperties.classId === undefined) {
            throw new Error(`Missing classId property for ${name}`);
        }
        this.ɵclassId = initialProperties.classId;
        this.ɵoutputProperties = this.outputProperties(initialProperties);
        this.ɵinputProperties = this.inputProperties(initialProperties);
        this.ɵproperties = this.nonIOProperties(initialProperties);
    }
    property(propertyName, defaultValue) {
        return this.properties.pipe(pluck(propertyName), map(propertyValue => (propertyValue === undefined || propertyValue === null ? defaultValue : propertyValue)), distinctUntilChanged((a, b) => {
            if (a === undefined && b === undefined) {
                return true;
            }
            if (a === undefined) {
                return false;
            }
            if (b === undefined) {
                return false;
            }
            return equal(a, b);
        }));
    }
    outputProperties(properties) {
        return propertiesByPrefix('output.', properties);
    }
    inputProperties(properties) {
        return propertiesByPrefix('input.', properties);
    }
    nonIOProperties(properties) {
        return propertiesAsPairs(pairs => pairs.filter(([name]) => !name.startsWith('input.') && !name.startsWith('output.')), properties);
    }
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export class ItemModelTree extends ObservableTree {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvbW9kZWxzL2l0ZW0tbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUl4Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBa0NwQixZQUFZLElBQWMsRUFBRSxpQkFBNkIsRUFBRSxlQUF1QztRQUNoRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQixNQUFNLG1CQUFtQixHQUFHLENBQUMsaUJBQTZCLEVBQUUsTUFBa0IsRUFBYyxFQUFFO1lBQzVGLHVDQUFZLGlCQUFpQixHQUFLLE1BQU0sRUFBRztRQUM3QyxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEgsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDekQ7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLGlCQUFpQixDQUFDLE9BQWlCLENBQUM7UUFDcEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUlELFFBQVEsQ0FBQyxZQUFvQixFQUFFLFlBQXVCO1FBQ3BELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ3pCLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFDbkIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxhQUFhLEtBQUssU0FBUyxJQUFJLGFBQWEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFDNUcsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsSUFBSSxDQUFDLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ3RDLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ25CLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ25CLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxVQUFzQjtRQUM3QyxPQUFPLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU8sZUFBZSxDQUFDLFVBQXNCO1FBQzVDLE9BQU8sa0JBQWtCLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTyxlQUFlLENBQUMsVUFBc0I7UUFDNUMsT0FBTyxpQkFBaUIsQ0FDdEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUM1RixVQUFVLENBQ1gsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUNEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWMsU0FBUSxjQUF5QjtDQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcGVydGllcywgUHJvcGVydHkgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkayc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBwbHVjaywgc2Nhbiwgc2hhcmVSZXBsYXksIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGVxdWFsLCBwcm9wZXJ0aWVzQnlQcmVmaXgsIHByb3BlcnRpZXNBc1BhaXJzIH0gZnJvbSAnLi4vLi4vd2ViLXNkay9wcm9wZXJ0aWVzJztcbmltcG9ydCB7IE9ic2VydmFibGVUcmVlIH0gZnJvbSAnLi90cmVlJztcblxuZXhwb3J0IHR5cGUgSXRlbU5hbWUgPSBzdHJpbmc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY2xhc3MgSXRlbU1vZGVsIHtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIHBhZ2UgaW5zdGFuY2Ugb2YgQmFja2Jhc2UgSXRlbVxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogSXRlbU5hbWU7XG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIG9mIEJhY2tiYXNlIEl0ZW1cbiAgICovXG4gIHJlYWRvbmx5IHByb3BlcnRpZXM6IE9ic2VydmFibGU8UHJvcGVydGllcz47XG5cbiAgLyoqXG4gICAqIFRoZSBjbGFzc0lkIG9mIHRoZSBjb21wb25lbnQgdGhhdCB3aWxsIHJlbmRlciB0aGlzIGl0ZW0uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgybVjbGFzc0lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwcm9wZXJ0eSBkZWZpbml0aW9ucyBmb3IgdGhpcyBpdGVtLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlYWRvbmx5IMm1cHJvcGVydGllczogUHJvcGVydGllcztcblxuICAvKipcbiAgICogVGhlIGlucHV0IGhhbmRsZXJzIGZvciB0aGlzIGl0ZW0uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVhZG9ubHkgybVpbnB1dFByb3BlcnRpZXM6IFByb3BlcnRpZXM7XG5cbiAgLyoqXG4gICAqIFRoZSBvdXRwdXQgaGFuZGxlcnMgZm9yIHRoaXMgaXRlbS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWFkb25seSDJtW91dHB1dFByb3BlcnRpZXM6IFByb3BlcnRpZXM7XG5cbiAgY29uc3RydWN0b3IobmFtZTogSXRlbU5hbWUsIGluaXRpYWxQcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzLCBwcm9wZXJ0eVVwZGF0ZXM6IE9ic2VydmFibGU8UHJvcGVydGllcz4pIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgY29uc3QgYXBwbHlQcm9wZXJ0eVVwZGF0ZSA9IChjdXJyZW50UHJvcGVydGllczogUHJvcGVydGllcywgdXBkYXRlOiBQcm9wZXJ0aWVzKTogUHJvcGVydGllcyA9PiB7XG4gICAgICByZXR1cm4geyAuLi5jdXJyZW50UHJvcGVydGllcywgLi4udXBkYXRlIH07XG4gICAgfTtcblxuICAgIHRoaXMucHJvcGVydGllcyA9IHByb3BlcnR5VXBkYXRlcy5waXBlKHN0YXJ0V2l0aChpbml0aWFsUHJvcGVydGllcyksIHNjYW4oYXBwbHlQcm9wZXJ0eVVwZGF0ZSksIHNoYXJlUmVwbGF5KDEpKTtcblxuICAgIGlmIChpbml0aWFsUHJvcGVydGllcy5jbGFzc0lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBjbGFzc0lkIHByb3BlcnR5IGZvciAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgdGhpcy7JtWNsYXNzSWQgPSBpbml0aWFsUHJvcGVydGllcy5jbGFzc0lkIGFzIHN0cmluZztcbiAgICB0aGlzLsm1b3V0cHV0UHJvcGVydGllcyA9IHRoaXMub3V0cHV0UHJvcGVydGllcyhpbml0aWFsUHJvcGVydGllcyk7XG4gICAgdGhpcy7JtWlucHV0UHJvcGVydGllcyA9IHRoaXMuaW5wdXRQcm9wZXJ0aWVzKGluaXRpYWxQcm9wZXJ0aWVzKTtcbiAgICB0aGlzLsm1cHJvcGVydGllcyA9IHRoaXMubm9uSU9Qcm9wZXJ0aWVzKGluaXRpYWxQcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIHByb3BlcnR5PFQgZXh0ZW5kcyBQcm9wZXJ0eT4ocHJvcGVydHlOYW1lOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogVCk6IE9ic2VydmFibGU8VD47XG4gIHByb3BlcnR5PFQgZXh0ZW5kcyBQcm9wZXJ0eT4ocHJvcGVydHlOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQgfCB1bmRlZmluZWQ+O1xuICBwcm9wZXJ0eShwcm9wZXJ0eU5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogUHJvcGVydHkpOiBPYnNlcnZhYmxlPFByb3BlcnR5IHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5waXBlPFByb3BlcnR5IHwgdW5kZWZpbmVkLCBQcm9wZXJ0eSB8IHVuZGVmaW5lZCwgUHJvcGVydHkgfCB1bmRlZmluZWQ+KFxuICAgICAgcGx1Y2socHJvcGVydHlOYW1lKSxcbiAgICAgIG1hcChwcm9wZXJ0eVZhbHVlID0+IChwcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQgfHwgcHJvcGVydHlWYWx1ZSA9PT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IHByb3BlcnR5VmFsdWUpKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKChhLCBiKSA9PiB7XG4gICAgICAgIGlmIChhID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIG91dHB1dFByb3BlcnRpZXMocHJvcGVydGllczogUHJvcGVydGllcyk6IFByb3BlcnRpZXMge1xuICAgIHJldHVybiBwcm9wZXJ0aWVzQnlQcmVmaXgoJ291dHB1dC4nLCBwcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5wdXRQcm9wZXJ0aWVzKHByb3BlcnRpZXM6IFByb3BlcnRpZXMpOiBQcm9wZXJ0aWVzIHtcbiAgICByZXR1cm4gcHJvcGVydGllc0J5UHJlZml4KCdpbnB1dC4nLCBwcm9wZXJ0aWVzKTtcbiAgfVxuXG4gIHByaXZhdGUgbm9uSU9Qcm9wZXJ0aWVzKHByb3BlcnRpZXM6IFByb3BlcnRpZXMpOiBQcm9wZXJ0aWVzIHtcbiAgICByZXR1cm4gcHJvcGVydGllc0FzUGFpcnMoXG4gICAgICBwYWlycyA9PiBwYWlycy5maWx0ZXIoKFtuYW1lXSkgPT4gIW5hbWUuc3RhcnRzV2l0aCgnaW5wdXQuJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnb3V0cHV0LicpKSxcbiAgICAgIHByb3BlcnRpZXMsXG4gICAgKTtcbiAgfVxufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBjbGFzcyBJdGVtTW9kZWxUcmVlIGV4dGVuZHMgT2JzZXJ2YWJsZVRyZWU8SXRlbU1vZGVsPiB7fVxuIl19