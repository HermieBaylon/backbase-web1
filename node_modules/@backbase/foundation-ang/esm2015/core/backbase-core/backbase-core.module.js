import { CommonModule } from '@angular/common';
import { ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
// assets (todo: make an assets module)
import { AssetsService, CONFIG_ASSETS } from './assets/assets.service';
// bootstrap (todo: make a bootstrap module)
import { BackbaseConnector } from './bootstrap/backbase-connector.service';
// communication (todo: make a communication module)
import { ӨItemNavigationService } from './communication/item-navigation.service';
import { InputBrokerService, createInputBootstrap } from './communication/item-io/input-broker.service';
import { OutputBrokerService, createOutputBootstrap } from './communication/item-io/output-broker.service';
import { CONFIG_PIPELINE_PROCESSORS } from './communication/pipes/pipeline-registry';
import { debugProcessorConfig } from './communication/pipes/handlers/debug';
import { pluckProcessorConfig } from './communication/pipes/handlers/pluck';
import { routeParamsProcessorConfig } from './communication/pipes/handlers/route-param';
import { routeParamsMultiProcessorConfig } from './communication/pipes/handlers/route-param-multi';
import { itemNavigateProcessorConfig } from './communication/pipes/handlers/item-navigate';
import { modelProcessorConfig } from './communication/pipes/handlers/model';
import { appConfigProcessorConfig } from './communication/pipes/handlers/app-config';
import { urlProcessorConfig } from './communication/pipes/handlers/url';
import { routerNavigateProcessorConfig } from './communication/pipes/handlers/router-navigate';
// deprecated communications
import { FlowsService, CONFIG_FLOWS } from './communication/deprecated/flows.service';
import { ItemTransitionService } from './communication/deprecated/item-transition.service';
import { navigationProcessorConfig } from './communication/pipes/handlers/navigation';
// future
import { ENABLED_FEATURES_CONFIG } from '@backbase/foundation-ang/future';
import { LOG_DEPRECATIONS_CONFIG, DeprecationsService } from '@backbase/foundation-ang/future';
// models (todo: make a models module?)
import { RootItemModelService } from './models/root-item-model.service';
// rendering (todo: make a rendering module)
import { AreaComponent } from './rendering/area/area.component';
import { ChromeComponent } from './rendering/chrome/chrome.component';
import { JourneyComponent } from './rendering/chrome/journey.component';
import { RootComponent } from './rendering/root/root.component';
import { CONFIG_COMPONENT_CLASS_MAP, ItemRegistryService } from './rendering/item-registry.service';
import { ItemInjectorService } from './rendering/item-injector.service';
// routing (todo: create a separate routing module)
import { RouteComponent } from './routing/components/route.component';
import { RouterLinkDirective, RouterLinkWithHrefDirective } from './routing/directives/router-link.directive';
import { RouterLinkActiveDirective } from './routing/directives/router-link-active.directive';
import { RouterOutletDirective } from './routing/directives/router-outlet.directive';
import { OutletCollisionComponent } from './routing/components/outlet-collision.component';
import { RouterBootstrapService, createRouteConfigBootstrap } from './routing/config/router-bootstrap.service';
import { RouterNavigationService } from './routing/navigation/router-navigation.service';
import { RouteGuardsRegistryService, CONFIG_ROUTE_GUARDS } from './routing/guards/route-guards-registry.service';
import { RouterService } from './routing/navigation/router.service';
// config
import { createLogDeprecatedConfig, DEPRECATED_WITH_CONFIG, } from './core-config';
import { ItemLoaderService } from './rendering/item-loader.service';
import { LAZY_MAP } from './rendering/lazy-config';
import { CombinedComponentFactoryResolver } from './rendering/combined-component-factory-resolver';
import { memoryProcessorConfig } from './communication/pipes/handlers/memory';
import { AbstractRouterConfigService } from './routing/config/abstract-router-config.service';
import { RouterConfigService } from './routing/config/router-config.service';
const coreComponents = [
    RootComponent,
    AreaComponent,
    ChromeComponent,
    RouteComponent,
    OutletCollisionComponent,
    JourneyComponent,
];
const coreDirectives = [
    RouterLinkDirective,
    RouterLinkWithHrefDirective,
    RouterLinkActiveDirective,
    RouterOutletDirective,
];
const ɵ0 = createRouteConfigBootstrap, ɵ1 = createLogDeprecatedConfig, ɵ2 = createInputBootstrap, ɵ3 = createOutputBootstrap, ɵ5 = {
    RootComponent,
}, ɵ6 = [
    debugProcessorConfig,
    pluckProcessorConfig,
    routeParamsProcessorConfig,
    routeParamsMultiProcessorConfig,
    itemNavigateProcessorConfig,
    modelProcessorConfig,
    appConfigProcessorConfig,
    urlProcessorConfig,
    navigationProcessorConfig,
    memoryProcessorConfig,
    routerNavigateProcessorConfig,
], ɵ7 = {}, ɵ8 = [], ɵ9 = {}, ɵ10 = {};
export class BackbaseCoreModule {
    /**
     * Creates a module that will populate entryComponents with Components passed as classMap
     *
     * @usageNotes
     *
     * ### Example
     *
     * ```
     * @NgModule({
     *   imports: [
     *     BackbaseCoreModule.withConfig({
     *       classMap: {
     *         myClassId: MyComponent
     *       }
     *     })
     *   ]
     * })
     * class MyModule {}
     * ```
     */
    static withConfig(config) {
        return {
            ngModule: BackbaseCoreModule,
            providers: [
                {
                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,
                    useValue: config.classMap || {},
                    multi: true,
                },
                {
                    provide: CONFIG_COMPONENT_CLASS_MAP,
                    useValue: config.classMap || {},
                    multi: true,
                },
                {
                    provide: CONFIG_ROUTE_GUARDS,
                    multi: true,
                    useValue: config.guards || {},
                },
                {
                    provide: CONFIG_PIPELINE_PROCESSORS,
                    useValue: config.pipelineProcessors || [],
                    multi: true,
                },
            ],
        };
    }
    /**
     * Creates a configured BackbaseCoreModule.
     *
     * This should be called only once per app.
     *
     * @usageNotes
     *
     * ### Example
     *
     * ```
     * @NgModule({
     *   imports: [
     *     BackbaseCoreModule.forRoot({
     *       classMap: {
     *         myClassId: MyComponent,
     *         logDeprecations: true,
     *       }
     *     })
     *   ]
     * })
     * class AppModule {}
     * ```
     */
    static forRoot(config) {
        return {
            ngModule: BackbaseCoreModule,
            providers: [
                {
                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,
                    useValue: config.classMap || {},
                    multi: true,
                },
                {
                    provide: CONFIG_COMPONENT_CLASS_MAP,
                    useValue: config.classMap || {},
                    multi: true,
                },
                {
                    provide: CONFIG_FLOWS,
                    multi: true,
                    useValue: config.flows || [],
                },
                {
                    provide: CONFIG_ROUTE_GUARDS,
                    multi: true,
                    useValue: config.guards || {},
                },
                {
                    provide: CONFIG_ASSETS,
                    multi: false,
                    useValue: config.assets || {
                        assetsStaticItemName: '',
                    },
                },
                {
                    provide: LOG_DEPRECATIONS_CONFIG,
                    multi: false,
                    useValue: !!config.logDeprecations,
                },
                {
                    provide: ENABLED_FEATURES_CONFIG,
                    multi: false,
                    useValue: config.features || {},
                },
                {
                    provide: CONFIG_PIPELINE_PROCESSORS,
                    useValue: config.pipelineProcessors || [],
                    multi: true,
                },
                {
                    provide: LAZY_MAP,
                    useValue: config.lazyModules || undefined,
                    multi: false,
                },
            ],
        };
    }
}
BackbaseCoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule],
                declarations: [...coreComponents, ...coreDirectives],
                exports: [...coreComponents, ...coreDirectives],
                entryComponents: coreComponents,
                providers: [
                    RootItemModelService,
                    ItemRegistryService,
                    BackbaseConnector,
                    ӨItemNavigationService,
                    ItemTransitionService,
                    RouteGuardsRegistryService,
                    RouterNavigationService,
                    RouterService,
                    DeprecationsService,
                    OutputBrokerService,
                    InputBrokerService,
                    RouterBootstrapService,
                    ItemInjectorService,
                    FlowsService,
                    AssetsService,
                    ItemLoaderService,
                    CombinedComponentFactoryResolver,
                    {
                        provide: APP_BOOTSTRAP_LISTENER,
                        useFactory: ɵ0,
                        deps: [RouterBootstrapService],
                        multi: true,
                    },
                    {
                        provide: APP_BOOTSTRAP_LISTENER,
                        useFactory: ɵ1,
                        deps: [DeprecationsService, DEPRECATED_WITH_CONFIG],
                        multi: true,
                    },
                    {
                        provide: APP_BOOTSTRAP_LISTENER,
                        useFactory: ɵ2,
                        deps: [InputBrokerService],
                        multi: true,
                    },
                    {
                        provide: APP_BOOTSTRAP_LISTENER,
                        useFactory: ɵ3,
                        deps: [OutputBrokerService],
                        multi: true,
                    },
                    {
                        provide: CONFIG_COMPONENT_CLASS_MAP,
                        useValue: ɵ5,
                        multi: true,
                    },
                    {
                        provide: CONFIG_PIPELINE_PROCESSORS,
                        useValue: ɵ6,
                        multi: true,
                    },
                    {
                        provide: AbstractRouterConfigService,
                        useExisting: RouterConfigService,
                    },
                    // Defaults, overrided by forRoot and withConfig
                    {
                        provide: CONFIG_COMPONENT_CLASS_MAP,
                        useValue: ɵ7,
                        multi: true,
                    },
                    {
                        provide: CONFIG_FLOWS,
                        multi: true,
                        useValue: ɵ8,
                    },
                    {
                        provide: CONFIG_ROUTE_GUARDS,
                        multi: true,
                        useValue: ɵ9,
                    },
                    {
                        provide: DEPRECATED_WITH_CONFIG,
                        useValue: ɵ10,
                        multi: true,
                    },
                ],
            },] }
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10 };
//# sourceMappingURL=data:application/json;base64,