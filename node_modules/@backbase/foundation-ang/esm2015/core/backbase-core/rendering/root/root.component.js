import { Component, ChangeDetectionStrategy, Optional, NgZone, ViewChild, ViewContainerRef, Inject, } from '@angular/core';
import { flatMap } from 'rxjs/operators';
import { ӨRootContainerService } from '../../models/root-container.service';
import { ӨItemNavigationService } from '../../communication/item-navigation.service';
import { StepUpService } from '../../stepup/stepup.service';
import { SessionTimeoutService } from '../../session-timeout/session-timeout.service';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
export class RootComponent {
    constructor(rootContainer, zone, itemNavigation, events, stepupService, sessionTimeoutService) {
        this.rootContainer = rootContainer;
        this.zone = zone;
        this.itemNavigation = itemNavigation;
        this.events = events;
        this.stepupService = stepupService;
        this.sessionTimeoutService = sessionTimeoutService;
        this.children = this.rootContainer.model.pipe(flatMap(state => state.children));
        this.eventListener = ({ name }) => {
            // [FIXME] This zone should almost certainly be handled in the EventBus, but can't be currently
            // because we only provide an interface not a wrapper
            this.zone.run(() => {
                this.itemNavigation.navigateToItem(name, {});
            });
        };
    }
    ngOnInit() {
        if (this.events) {
            this.events.subscribe('navigation.viewItem', this.eventListener);
        }
        if (this.stepupService && this.stepupContainer) {
            this.stepupService.createStepUpComponent(this.stepupContainer);
        }
        if (this.sessionTimeoutService && this.sessionTimeoutContainer) {
            this.sessionTimeoutService.createSessionTimeoutComponent(this.sessionTimeoutContainer);
        }
    }
    ngOnDestroy() {
        if (this.events) {
            this.events.unsubscribe('navigation.viewItem', this.eventListener);
        }
    }
}
RootComponent.decorators = [
    { type: Component, args: [{
                selector: 'bb-root',
                template: `
    <bb-area [children]="children | async"></bb-area>
    <template #stepupContainer></template>
    <template #sessionTimeoutContainer></template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
RootComponent.ctorParameters = () => [
    { type: ӨRootContainerService },
    { type: NgZone },
    { type: ӨItemNavigationService },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [PUBSUB,] }] },
    { type: StepUpService, decorators: [{ type: Optional }] },
    { type: SessionTimeoutService, decorators: [{ type: Optional }] }
];
RootComponent.propDecorators = {
    stepupContainer: [{ type: ViewChild, args: ['stepupContainer', { read: ViewContainerRef, static: true },] }],
    sessionTimeoutContainer: [{ type: ViewChild, args: ['sessionTimeoutContainer', { read: ViewContainerRef, static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlL3NyYy9iYWNrYmFzZS1jb3JlL3JlbmRlcmluZy9yb290L3Jvb3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsdUJBQXVCLEVBQ3ZCLFFBQVEsRUFHUixNQUFNLEVBQ04sU0FBUyxFQUNULGdCQUFnQixFQUNoQixNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3pDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsTUFBTSxFQUFVLE1BQU0sa0NBQWtDLENBQUM7QUFXbEUsTUFBTSxPQUFPLGFBQWE7SUFVeEIsWUFDbUIsYUFBb0MsRUFDcEMsSUFBWSxFQUNaLGNBQXNDLEVBR3RDLE1BQWUsRUFDSCxhQUE2QixFQUM3QixxQkFBNkM7UUFQekQsa0JBQWEsR0FBYixhQUFhLENBQXVCO1FBQ3BDLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixtQkFBYyxHQUFkLGNBQWMsQ0FBd0I7UUFHdEMsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQUNILGtCQUFhLEdBQWIsYUFBYSxDQUFnQjtRQUM3QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXdCO1FBWm5FLGFBQVEsR0FBaUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUM3RixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQ2pDLENBQUM7UUFhTyxrQkFBYSxHQUFrQixDQUFDLEVBQUUsSUFBSSxFQUFPLEVBQUUsRUFBRTtZQUN4RCwrRkFBK0Y7WUFDL0YscURBQXFEO1lBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDakIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO0lBUkMsQ0FBQztJQVVKLFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbEU7UUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUM5QyxJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNoRTtRQUNELElBQUksSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUM5RCxJQUFJLENBQUMscUJBQXFCLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDeEY7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNwRTtJQUNILENBQUM7OztZQXRERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLFFBQVEsRUFBRTs7OztHQUlUO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFkUSxxQkFBcUI7WUFWNUIsTUFBTTtZQVdDLHNCQUFzQjs0Q0E0QjFCLFFBQVEsWUFDUixNQUFNLFNBQUMsTUFBTTtZQTVCVCxhQUFhLHVCQThCakIsUUFBUTtZQTdCSixxQkFBcUIsdUJBOEJ6QixRQUFROzs7OEJBakJWLFNBQVMsU0FBQyxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO3NDQUVyRSxTQUFTLFNBQUMseUJBQXlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIE9wdGlvbmFsLFxuICBPbkluaXQsXG4gIE9uRGVzdHJveSxcbiAgTmdab25lLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIEluamVjdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmbGF0TWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJdGVtTW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvaXRlbS1tb2RlbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlVHJlZSB9IGZyb20gJy4uLy4uL21vZGVscy90cmVlJztcbmltcG9ydCB7INOoUm9vdENvbnRhaW5lclNlcnZpY2UgfSBmcm9tICcuLi8uLi9tb2RlbHMvcm9vdC1jb250YWluZXIuc2VydmljZSc7XG5pbXBvcnQgeyDTqEl0ZW1OYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW11bmljYXRpb24vaXRlbS1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RlcFVwU2VydmljZSB9IGZyb20gJy4uLy4uL3N0ZXB1cC9zdGVwdXAuc2VydmljZSc7XG5pbXBvcnQgeyBTZXNzaW9uVGltZW91dFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXNzaW9uLXRpbWVvdXQvc2Vzc2lvbi10aW1lb3V0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUFVCU1VCLCBQdWJzdWIgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkayc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXJvb3QnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxiYi1hcmVhIFtjaGlsZHJlbl09XCJjaGlsZHJlbiB8IGFzeW5jXCI+PC9iYi1hcmVhPlxuICAgIDx0ZW1wbGF0ZSAjc3RlcHVwQ29udGFpbmVyPjwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlICNzZXNzaW9uVGltZW91dENvbnRhaW5lcj48L3RlbXBsYXRlPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUm9vdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZCgnc3RlcHVwQ29udGFpbmVyJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmLCBzdGF0aWM6IHRydWUgfSlcbiAgcmVhZG9ubHkgc3RlcHVwQ29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmIHwgdW5kZWZpbmVkO1xuICBAVmlld0NoaWxkKCdzZXNzaW9uVGltZW91dENvbnRhaW5lcicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiB0cnVlIH0pXG4gIHJlYWRvbmx5IHNlc3Npb25UaW1lb3V0Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmIHwgdW5kZWZpbmVkO1xuXG4gIHJlYWRvbmx5IGNoaWxkcmVuOiBPYnNlcnZhYmxlPEFycmF5PE9ic2VydmFibGVUcmVlPEl0ZW1Nb2RlbD4+PiA9IHRoaXMucm9vdENvbnRhaW5lci5tb2RlbC5waXBlKFxuICAgIGZsYXRNYXAoc3RhdGUgPT4gc3RhdGUuY2hpbGRyZW4pLFxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcm9vdENvbnRhaW5lcjog06hSb290Q29udGFpbmVyU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHpvbmU6IE5nWm9uZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGl0ZW1OYXZpZ2F0aW9uOiDTqEl0ZW1OYXZpZ2F0aW9uU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoUFVCU1VCKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXZlbnRzPzogUHVic3ViLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgc3RlcHVwU2VydmljZT86IFN0ZXBVcFNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSByZWFkb25seSBzZXNzaW9uVGltZW91dFNlcnZpY2U/OiBTZXNzaW9uVGltZW91dFNlcnZpY2UsXG4gICkge31cblxuICByZWFkb25seSBldmVudExpc3RlbmVyOiBFdmVudExpc3RlbmVyID0gKHsgbmFtZSB9OiBhbnkpID0+IHtcbiAgICAvLyBbRklYTUVdIFRoaXMgem9uZSBzaG91bGQgYWxtb3N0IGNlcnRhaW5seSBiZSBoYW5kbGVkIGluIHRoZSBFdmVudEJ1cywgYnV0IGNhbid0IGJlIGN1cnJlbnRseVxuICAgIC8vIGJlY2F1c2Ugd2Ugb25seSBwcm92aWRlIGFuIGludGVyZmFjZSBub3QgYSB3cmFwcGVyXG4gICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICB0aGlzLml0ZW1OYXZpZ2F0aW9uLm5hdmlnYXRlVG9JdGVtKG5hbWUsIHt9KTtcbiAgICB9KTtcbiAgfTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5ldmVudHMpIHtcbiAgICAgIHRoaXMuZXZlbnRzLnN1YnNjcmliZSgnbmF2aWdhdGlvbi52aWV3SXRlbScsIHRoaXMuZXZlbnRMaXN0ZW5lcik7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0ZXB1cFNlcnZpY2UgJiYgdGhpcy5zdGVwdXBDb250YWluZXIpIHtcbiAgICAgIHRoaXMuc3RlcHVwU2VydmljZS5jcmVhdGVTdGVwVXBDb21wb25lbnQodGhpcy5zdGVwdXBDb250YWluZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZXNzaW9uVGltZW91dFNlcnZpY2UgJiYgdGhpcy5zZXNzaW9uVGltZW91dENvbnRhaW5lcikge1xuICAgICAgdGhpcy5zZXNzaW9uVGltZW91dFNlcnZpY2UuY3JlYXRlU2Vzc2lvblRpbWVvdXRDb21wb25lbnQodGhpcy5zZXNzaW9uVGltZW91dENvbnRhaW5lcik7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZXZlbnRzKSB7XG4gICAgICB0aGlzLmV2ZW50cy51bnN1YnNjcmliZSgnbmF2aWdhdGlvbi52aWV3SXRlbScsIHRoaXMuZXZlbnRMaXN0ZW5lcik7XG4gICAgfVxuICB9XG59XG4iXX0=