import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, map, take } from 'rxjs/operators';
import { LAZY_MAP } from './lazy-config';
/**
 * ComponentRegistry configuration injection token
 */
export const CONFIG_COMPONENT_CLASS_MAP = new InjectionToken('@backbase/foundation Components Registry');
/**
 * ItemRegistryService stores a hashMap
 * of the components included into the app and
 * avaliable for usage. It's meant to be an extension
 * point which is used by a developer.
 */
export class ItemRegistryService {
    /**
     * ItemRegistryService constructor which allows to define components
     * included into application
     * @param ComponentRegistry a hashMap of the component classes to be added
     */
    constructor(classMaps, lazyConfig) {
        this.itemRegistry = new BehaviorSubject(new Map(classMaps
            ? classMaps.reduce((acc, classMap) => [...acc, ...Object.entries(classMap)], [])
            : undefined));
        this.lazyModuleConfig = (lazyConfig || []).filter(isLazyModuleConfig);
    }
    entries() {
        return Array.from(this.itemRegistry.value.entries());
    }
    add(classId, componentClass) {
        this.itemRegistry.next(new Map([...this.entries(), [classId, componentClass]]));
    }
    has(classId) {
        return this.itemRegistry.value.has(classId);
    }
    /**
     * This method allows to retrieve Component by it's classId
     * @param classId classId key to get a component class
     * @returns componentType to be used by a ComponentFactoryResolver
     */
    getComponentValue(classId) {
        return this.itemRegistry.value.get(classId);
    }
    getComponent(classId) {
        return this.itemRegistry
            .pipe(map(registry => registry.get(classId)), filter((componentClass) => componentClass !== undefined), take(1))
            .toPromise();
    }
    getModuleLoader(classId) {
        const lazyModuleConfigItem = this.lazyModuleConfig.find(config => config.module === classId);
        return lazyModuleConfigItem && lazyModuleConfigItem.loadChildren;
    }
}
ItemRegistryService.decorators = [
    { type: Injectable }
];
ItemRegistryService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [CONFIG_COMPONENT_CLASS_MAP,] }, { type: Optional }] },
    { type: Array, decorators: [{ type: Inject, args: [LAZY_MAP,] }, { type: Optional }] }
];
function isLazyModuleConfig(config) {
    return !!config.module;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1yZWdpc3RyeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZS9zcmMvYmFja2Jhc2UtY29yZS9yZW5kZXJpbmcvaXRlbS1yZWdpc3RyeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRCxPQUFPLEVBQW9DLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVEzRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLElBQUksY0FBYyxDQUMxRCwwQ0FBMEMsQ0FDM0MsQ0FBQztBQUVGOzs7OztHQUtHO0FBRUgsTUFBTSxPQUFPLG1CQUFtQjtJQUk5Qjs7OztPQUlHO0lBQ0gsWUFHRSxTQUEwQyxFQUcxQyxVQUF3QztRQUV4QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksZUFBZSxDQUNyQyxJQUFJLEdBQUcsQ0FDTCxTQUFTO1lBQ1AsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQ2QsQ0FBQyxHQUF5QyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDOUYsRUFBRSxDQUNIO1lBQ0gsQ0FBQyxDQUFDLFNBQVMsQ0FDZCxDQUNGLENBQUM7UUFFRixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsR0FBRyxDQUFDLE9BQWUsRUFBRSxjQUFtQztRQUN0RCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGlCQUFpQixDQUFDLE9BQWU7UUFDL0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFlO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFlBQVk7YUFDckIsSUFBSSxDQUNILEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDdEMsTUFBTSxDQUFDLENBQUMsY0FBYyxFQUF5QyxFQUFFLENBQUMsY0FBYyxLQUFLLFNBQVMsQ0FBQyxFQUMvRixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1I7YUFDQSxTQUFTLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQWU7UUFDN0IsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUMsQ0FBQztRQUM3RixPQUFPLG9CQUFvQixJQUFJLG9CQUFvQixDQUFDLFlBQVksQ0FBQztJQUNuRSxDQUFDOzs7WUFsRUYsVUFBVTs7OzRDQVdOLE1BQU0sU0FBQywwQkFBMEIsY0FDakMsUUFBUTtZQUlHLEtBQUssdUJBRmhCLE1BQU0sU0FBQyxRQUFRLGNBQ2YsUUFBUTs7QUFzRGIsU0FBUyxrQkFBa0IsQ0FBQyxNQUFzQjtJQUNoRCxPQUFPLENBQUMsQ0FBRSxNQUEyQixDQUFDLE1BQU0sQ0FBQztBQUMvQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvYWRDaGlsZHJlbkNhbGxiYWNrIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMYXp5Q29uZmlnSXRlbSwgTGF6eU1vZHVsZUNvbmZpZywgTEFaWV9NQVAgfSBmcm9tICcuL2xhenktY29uZmlnJztcblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50Q2xhc3M8VD4gPSBuZXcgKC4uLmFyZ3M6IEFycmF5PGFueT4pID0+IFQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50TWFwIHtcbiAgW2tleTogc3RyaW5nXTogQ29tcG9uZW50Q2xhc3M8YW55Pjtcbn1cblxuLyoqXG4gKiBDb21wb25lbnRSZWdpc3RyeSBjb25maWd1cmF0aW9uIGluamVjdGlvbiB0b2tlblxuICovXG5leHBvcnQgY29uc3QgQ09ORklHX0NPTVBPTkVOVF9DTEFTU19NQVAgPSBuZXcgSW5qZWN0aW9uVG9rZW48TWFwPHN0cmluZywgQ29tcG9uZW50Q2xhc3M8YW55Pj4+KFxuICAnQGJhY2tiYXNlL2ZvdW5kYXRpb24gQ29tcG9uZW50cyBSZWdpc3RyeScsXG4pO1xuXG4vKipcbiAqIEl0ZW1SZWdpc3RyeVNlcnZpY2Ugc3RvcmVzIGEgaGFzaE1hcFxuICogb2YgdGhlIGNvbXBvbmVudHMgaW5jbHVkZWQgaW50byB0aGUgYXBwIGFuZFxuICogYXZhbGlhYmxlIGZvciB1c2FnZS4gSXQncyBtZWFudCB0byBiZSBhbiBleHRlbnNpb25cbiAqIHBvaW50IHdoaWNoIGlzIHVzZWQgYnkgYSBkZXZlbG9wZXIuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJdGVtUmVnaXN0cnlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBpdGVtUmVnaXN0cnk6IEJlaGF2aW9yU3ViamVjdDxNYXA8c3RyaW5nLCBDb21wb25lbnRDbGFzczxhbnk+Pj47XG4gIHByaXZhdGUgcmVhZG9ubHkgbGF6eU1vZHVsZUNvbmZpZzogQXJyYXk8TGF6eU1vZHVsZUNvbmZpZz47XG5cbiAgLyoqXG4gICAqIEl0ZW1SZWdpc3RyeVNlcnZpY2UgY29uc3RydWN0b3Igd2hpY2ggYWxsb3dzIHRvIGRlZmluZSBjb21wb25lbnRzXG4gICAqIGluY2x1ZGVkIGludG8gYXBwbGljYXRpb25cbiAgICogQHBhcmFtIENvbXBvbmVudFJlZ2lzdHJ5IGEgaGFzaE1hcCBvZiB0aGUgY29tcG9uZW50IGNsYXNzZXMgdG8gYmUgYWRkZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoQ09ORklHX0NPTVBPTkVOVF9DTEFTU19NQVApXG4gICAgQE9wdGlvbmFsKClcbiAgICBjbGFzc01hcHM6IEFycmF5PENvbXBvbmVudE1hcD4gfCB1bmRlZmluZWQsXG4gICAgQEluamVjdChMQVpZX01BUClcbiAgICBAT3B0aW9uYWwoKVxuICAgIGxhenlDb25maWc6IEFycmF5PExhenlDb25maWdJdGVtPiB8IG51bGwsXG4gICkge1xuICAgIHRoaXMuaXRlbVJlZ2lzdHJ5ID0gbmV3IEJlaGF2aW9yU3ViamVjdChcbiAgICAgIG5ldyBNYXA8c3RyaW5nLCBDb21wb25lbnRDbGFzczxhbnk+PihcbiAgICAgICAgY2xhc3NNYXBzXG4gICAgICAgICAgPyBjbGFzc01hcHMucmVkdWNlKFxuICAgICAgICAgICAgICAoYWNjOiBBcnJheTxbc3RyaW5nLCBDb21wb25lbnRDbGFzczxhbnk+XT4sIGNsYXNzTWFwKSA9PiBbLi4uYWNjLCAuLi5PYmplY3QuZW50cmllcyhjbGFzc01hcCldLFxuICAgICAgICAgICAgICBbXSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICksXG4gICAgKTtcblxuICAgIHRoaXMubGF6eU1vZHVsZUNvbmZpZyA9IChsYXp5Q29uZmlnIHx8IFtdKS5maWx0ZXIoaXNMYXp5TW9kdWxlQ29uZmlnKTtcbiAgfVxuXG4gIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5pdGVtUmVnaXN0cnkudmFsdWUuZW50cmllcygpKTtcbiAgfVxuXG4gIGFkZChjbGFzc0lkOiBzdHJpbmcsIGNvbXBvbmVudENsYXNzOiBDb21wb25lbnRDbGFzczxhbnk+KSB7XG4gICAgdGhpcy5pdGVtUmVnaXN0cnkubmV4dChuZXcgTWFwKFsuLi50aGlzLmVudHJpZXMoKSwgW2NsYXNzSWQsIGNvbXBvbmVudENsYXNzXV0pKTtcbiAgfVxuXG4gIGhhcyhjbGFzc0lkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtUmVnaXN0cnkudmFsdWUuaGFzKGNsYXNzSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGFsbG93cyB0byByZXRyaWV2ZSBDb21wb25lbnQgYnkgaXQncyBjbGFzc0lkXG4gICAqIEBwYXJhbSBjbGFzc0lkIGNsYXNzSWQga2V5IHRvIGdldCBhIGNvbXBvbmVudCBjbGFzc1xuICAgKiBAcmV0dXJucyBjb21wb25lbnRUeXBlIHRvIGJlIHVzZWQgYnkgYSBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgICovXG4gIGdldENvbXBvbmVudFZhbHVlKGNsYXNzSWQ6IHN0cmluZyk6IENvbXBvbmVudENsYXNzPGFueT4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLml0ZW1SZWdpc3RyeS52YWx1ZS5nZXQoY2xhc3NJZCk7XG4gIH1cblxuICBnZXRDb21wb25lbnQoY2xhc3NJZDogc3RyaW5nKTogUHJvbWlzZTxDb21wb25lbnRDbGFzczxhbnk+PiB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbVJlZ2lzdHJ5XG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHJlZ2lzdHJ5ID0+IHJlZ2lzdHJ5LmdldChjbGFzc0lkKSksXG4gICAgICAgIGZpbHRlcigoY29tcG9uZW50Q2xhc3MpOiBjb21wb25lbnRDbGFzcyBpcyBDb21wb25lbnRDbGFzczxhbnk+ID0+IGNvbXBvbmVudENsYXNzICE9PSB1bmRlZmluZWQpLFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgZ2V0TW9kdWxlTG9hZGVyKGNsYXNzSWQ6IHN0cmluZyk6IExvYWRDaGlsZHJlbkNhbGxiYWNrIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBsYXp5TW9kdWxlQ29uZmlnSXRlbSA9IHRoaXMubGF6eU1vZHVsZUNvbmZpZy5maW5kKGNvbmZpZyA9PiBjb25maWcubW9kdWxlID09PSBjbGFzc0lkKTtcbiAgICByZXR1cm4gbGF6eU1vZHVsZUNvbmZpZ0l0ZW0gJiYgbGF6eU1vZHVsZUNvbmZpZ0l0ZW0ubG9hZENoaWxkcmVuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzTGF6eU1vZHVsZUNvbmZpZyhjb25maWc6IExhenlDb25maWdJdGVtKTogY29uZmlnIGlzIExhenlNb2R1bGVDb25maWcge1xuICByZXR1cm4gISEoY29uZmlnIGFzIExhenlNb2R1bGVDb25maWcpLm1vZHVsZTtcbn1cbiJdfQ==