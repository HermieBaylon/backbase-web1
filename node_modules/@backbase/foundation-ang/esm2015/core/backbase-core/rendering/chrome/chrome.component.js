import { Component, HostBinding, Input, ViewChild, ViewContainerRef, } from '@angular/core';
import { ItemLifecycleService } from '../item-lifecycle.service';
import { ItemInjectorService } from '../item-injector.service';
import { ReplaySubject, Subject } from 'rxjs';
import { shareReplay, takeUntil, pairwise, startWith, withLatestFrom, last, switchMap, map } from 'rxjs/operators';
import { ItemLoaderService } from '../item-loader.service';
import { CombinedComponentFactoryResolver } from '../combined-component-factory-resolver';
/**
 * ChromeComponent represents "chrome element" and
 * implements dynamic components rendering
 */
export class ChromeComponent {
    /**
     * ChromeComponent constructor
     * @param componentFactoryResolver Factory which allows chrome component to resolve items
     * @param injectors Injectors map
     * @param components Components Registry Service
     */
    constructor(itemLifecycle, itemInjector, itemLoader, componentFactoryLoader) {
        this.itemLifecycle = itemLifecycle;
        this.itemInjector = itemInjector;
        this.itemLoader = itemLoader;
        this.componentFactoryLoader = componentFactoryLoader;
        this.gc$ = new Subject();
        this.itemValue = new ReplaySubject(1);
        this.component$ = this.itemValue.pipe(switchMap(item => this.createComponent(item)), shareReplay(1));
        this.componentItemModelTuple = this.component$.pipe(withLatestFrom(this.itemValue), map(([ref, item]) => ref === undefined ? [undefined, undefined] : [ref, item]), startWith([undefined, undefined]));
    }
    /**
     * Setter (Input) for an item to be bootstrapped
     * @param item Actual item to be bootstrapped
     */
    set item(item) {
        this.name = item.value.name;
        this.itemValue.next(item);
    }
    ngOnInit() {
        // Insert component on create
        this.componentItemModelTuple
            .pipe(pairwise(), takeUntil(this.gc$))
            .subscribe(([[oldComponent, oldItemValue], [component, item]]) => {
            if (!this.vcRef || !component || !item) {
                return;
            }
            if (oldComponent && oldItemValue) {
                this.itemLifecycle.onRemove(oldItemValue, oldComponent);
            }
            this.vcRef.clear();
            this.vcRef.insert(component.hostView);
            this.itemLifecycle.onCreate(item, component);
            component.changeDetectorRef.markForCheck();
        });
    }
    ngOnDestroy() {
        // Cleanup on destroy
        this.componentItemModelTuple.pipe(takeUntil(this.gc$), last()).subscribe(([component, item]) => {
            if (item && component) {
                this.itemLifecycle.onRemove(item, component);
            }
        });
        this.gc$.next();
        this.gc$.complete();
    }
    /**
     * inner helper function which creates components
     * @param item item to be created
     */
    createComponent(item) {
        return this.itemLoader
            .loadComponent(item.value.ɵclassId)
            .then(() => this.componentFactoryLoader.resolveComponentFactory(item.value.ɵclassId))
            .then(componentFactory => {
            // FIXME: @deprecated parentInjector (no replacement)
            const injector = this.itemInjector.createInjector(this.vcRef && this.vcRef.parentInjector, item);
            // Create the component
            return componentFactory.create(injector);
        });
    }
}
ChromeComponent.decorators = [
    { type: Component, args: [{
                selector: 'bb-chrome',
                template: ` <ng-container #vc></ng-container> `
            },] }
];
ChromeComponent.ctorParameters = () => [
    { type: ItemLifecycleService },
    { type: ItemInjectorService },
    { type: ItemLoaderService },
    { type: CombinedComponentFactoryResolver }
];
ChromeComponent.propDecorators = {
    vcRef: [{ type: ViewChild, args: ['vc', { read: ViewContainerRef, static: true },] }],
    name: [{ type: HostBinding, args: ['attr.data-chrome',] }],
    item: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,