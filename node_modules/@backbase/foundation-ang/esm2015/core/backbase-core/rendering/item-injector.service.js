import { Injector, Injectable } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { ItemModelTree, ItemModel } from '../models/item-model';
import { RouterService } from '../routing/navigation/router.service';
import { FeaturesService } from '@backbase/foundation-ang/future';
import { ɵSTORE_BRANCH, ɵSTORE_DISPATCH_CHANNEL, StoreFactory, ɵStoreBroker } from '@backbase/foundation-ang/store';
import { PipelineRegistry } from '../communication/pipes/pipeline-registry';
import { InputBrokerService } from '../communication/item-io/input-broker.service';
import { OutputBrokerService } from '../communication/item-io/output-broker.service';
import { PipelineService } from '../communication/pipes/pipeline.service';
import { uniq } from '../models/array';
import { TemplateRegistry } from '../customizable/template-registry';
import { AbstractRouterConfigService } from '../routing/config/abstract-router-config.service';
export class ItemInjectorService {
    constructor(inputBroker, outputBroker) {
        this.inputBroker = inputBroker;
        this.outputBroker = outputBroker;
    }
    createInjector(parent, item) {
        const widgetProvider = {
            provide: ItemModel,
            useValue: item.value,
        };
        const containerProvider = {
            provide: ItemModelTree,
            useValue: item,
        };
        const routerServiceProvider = {
            provide: RouterService,
            deps: [Router, ActivatedRoute, ItemModel, AbstractRouterConfigService],
        };
        /**
         * @todo: consider putting *all* configured handlers on the
         * injector, instead of only handlers used based on the model.
         *
         * This would make it possible to create higher-order handlers
         */
        const communicationPipelineProviders = uniq([
            ...this.inputBroker.getItemProviders(item.value),
            ...this.outputBroker.getItemProviders(item.value),
        ]);
        const pipelineService = {
            provide: PipelineService,
            deps: [PipelineRegistry, Injector],
        };
        return Injector.create({
            providers: [
                widgetProvider,
                containerProvider,
                routerServiceProvider,
                ...communicationPipelineProviders,
                pipelineService,
                {
                    provide: ɵSTORE_BRANCH,
                    useValue: item.value.name,
                },
                {
                    provide: ɵSTORE_DISPATCH_CHANNEL,
                    useValue: item.value.name,
                },
                {
                    provide: StoreFactory,
                    useClass: StoreFactory,
                    deps: [ɵStoreBroker, ɵSTORE_BRANCH, ɵSTORE_DISPATCH_CHANNEL, FeaturesService],
                },
                {
                    provide: TemplateRegistry,
                    useClass: TemplateRegistry,
                    deps: [],
                },
            ],
            parent,
        });
    }
}
ItemInjectorService.decorators = [
    { type: Injectable }
];
ItemInjectorService.ctorParameters = () => [
    { type: InputBrokerService },
    { type: OutputBrokerService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1pbmplY3Rvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZS9zcmMvYmFja2Jhc2UtY29yZS9yZW5kZXJpbmcvaXRlbS1pbmplY3Rvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQVksVUFBVSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLHVCQUF1QixFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNwSCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNyRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDMUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRy9GLE1BQU0sT0FBTyxtQkFBbUI7SUFDOUIsWUFBNkIsV0FBK0IsRUFBbUIsWUFBaUM7UUFBbkYsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQW1CLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtJQUFHLENBQUM7SUFFcEgsY0FBYyxDQUFDLE1BQTRCLEVBQUUsSUFBbUI7UUFDOUQsTUFBTSxjQUFjLEdBQWE7WUFDL0IsT0FBTyxFQUFFLFNBQVM7WUFDbEIsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ3JCLENBQUM7UUFDRixNQUFNLGlCQUFpQixHQUFhO1lBQ2xDLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQztRQUNGLE1BQU0scUJBQXFCLEdBQW1CO1lBQzVDLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLDJCQUEyQixDQUFDO1NBQ3ZFLENBQUM7UUFFRjs7Ozs7V0FLRztRQUNILE1BQU0sOEJBQThCLEdBQTBCLElBQUksQ0FBQztZQUNqRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNoRCxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNsRCxDQUFDLENBQUM7UUFDSCxNQUFNLGVBQWUsR0FBbUI7WUFDdEMsT0FBTyxFQUFFLGVBQWU7WUFDeEIsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDO1NBQ25DLENBQUM7UUFFRixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDckIsU0FBUyxFQUFFO2dCQUNULGNBQWM7Z0JBQ2QsaUJBQWlCO2dCQUNqQixxQkFBcUI7Z0JBQ3JCLEdBQUcsOEJBQThCO2dCQUNqQyxlQUFlO2dCQUNmO29CQUNFLE9BQU8sRUFBRSxhQUFhO29CQUN0QixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO2lCQUMxQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsdUJBQXVCO29CQUNoQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJO2lCQUMxQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsWUFBWTtvQkFDckIsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLElBQUksRUFBRSxDQUFDLFlBQVksRUFBRSxhQUFhLEVBQUUsdUJBQXVCLEVBQUUsZUFBZSxDQUFDO2lCQUM5RTtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsZ0JBQWdCO29CQUN6QixRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixJQUFJLEVBQUUsRUFBRTtpQkFDVDthQUNGO1lBQ0QsTUFBTTtTQUNQLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTdERixVQUFVOzs7WUFQRixrQkFBa0I7WUFDbEIsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIFByb3ZpZGVyLCBJbmplY3RhYmxlLCBTdGF0aWNQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBJdGVtTW9kZWxUcmVlLCBJdGVtTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvaXRlbS1tb2RlbCc7XG5pbXBvcnQgeyBSb3V0ZXJTZXJ2aWNlIH0gZnJvbSAnLi4vcm91dGluZy9uYXZpZ2F0aW9uL3JvdXRlci5zZXJ2aWNlJztcblxuaW1wb3J0IHsgRmVhdHVyZXNTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2Z1dHVyZSc7XG5pbXBvcnQgeyDJtVNUT1JFX0JSQU5DSCwgybVTVE9SRV9ESVNQQVRDSF9DSEFOTkVMLCBTdG9yZUZhY3RvcnksIMm1U3RvcmVCcm9rZXIgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvc3RvcmUnO1xuaW1wb3J0IHsgUGlwZWxpbmVSZWdpc3RyeSB9IGZyb20gJy4uL2NvbW11bmljYXRpb24vcGlwZXMvcGlwZWxpbmUtcmVnaXN0cnknO1xuaW1wb3J0IHsgSW5wdXRCcm9rZXJTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbXVuaWNhdGlvbi9pdGVtLWlvL2lucHV0LWJyb2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IE91dHB1dEJyb2tlclNlcnZpY2UgfSBmcm9tICcuLi9jb21tdW5pY2F0aW9uL2l0ZW0taW8vb3V0cHV0LWJyb2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IFBpcGVsaW5lU2VydmljZSB9IGZyb20gJy4uL2NvbW11bmljYXRpb24vcGlwZXMvcGlwZWxpbmUuc2VydmljZSc7XG5pbXBvcnQgeyB1bmlxIH0gZnJvbSAnLi4vbW9kZWxzL2FycmF5JztcbmltcG9ydCB7IFRlbXBsYXRlUmVnaXN0cnkgfSBmcm9tICcuLi9jdXN0b21pemFibGUvdGVtcGxhdGUtcmVnaXN0cnknO1xuaW1wb3J0IHsgQWJzdHJhY3RSb3V0ZXJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vcm91dGluZy9jb25maWcvYWJzdHJhY3Qtcm91dGVyLWNvbmZpZy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEl0ZW1JbmplY3RvclNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGlucHV0QnJva2VyOiBJbnB1dEJyb2tlclNlcnZpY2UsIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0QnJva2VyOiBPdXRwdXRCcm9rZXJTZXJ2aWNlKSB7fVxuXG4gIGNyZWF0ZUluamVjdG9yKHBhcmVudDogSW5qZWN0b3IgfCB1bmRlZmluZWQsIGl0ZW06IEl0ZW1Nb2RlbFRyZWUpOiBJbmplY3RvciB7XG4gICAgY29uc3Qgd2lkZ2V0UHJvdmlkZXI6IFByb3ZpZGVyID0ge1xuICAgICAgcHJvdmlkZTogSXRlbU1vZGVsLFxuICAgICAgdXNlVmFsdWU6IGl0ZW0udmFsdWUsXG4gICAgfTtcbiAgICBjb25zdCBjb250YWluZXJQcm92aWRlcjogUHJvdmlkZXIgPSB7XG4gICAgICBwcm92aWRlOiBJdGVtTW9kZWxUcmVlLFxuICAgICAgdXNlVmFsdWU6IGl0ZW0sXG4gICAgfTtcbiAgICBjb25zdCByb3V0ZXJTZXJ2aWNlUHJvdmlkZXI6IFN0YXRpY1Byb3ZpZGVyID0ge1xuICAgICAgcHJvdmlkZTogUm91dGVyU2VydmljZSxcbiAgICAgIGRlcHM6IFtSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlLCBJdGVtTW9kZWwsIEFic3RyYWN0Um91dGVyQ29uZmlnU2VydmljZV0sXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEB0b2RvOiBjb25zaWRlciBwdXR0aW5nICphbGwqIGNvbmZpZ3VyZWQgaGFuZGxlcnMgb24gdGhlXG4gICAgICogaW5qZWN0b3IsIGluc3RlYWQgb2Ygb25seSBoYW5kbGVycyB1c2VkIGJhc2VkIG9uIHRoZSBtb2RlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgd291bGQgbWFrZSBpdCBwb3NzaWJsZSB0byBjcmVhdGUgaGlnaGVyLW9yZGVyIGhhbmRsZXJzXG4gICAgICovXG4gICAgY29uc3QgY29tbXVuaWNhdGlvblBpcGVsaW5lUHJvdmlkZXJzOiBBcnJheTxTdGF0aWNQcm92aWRlcj4gPSB1bmlxKFtcbiAgICAgIC4uLnRoaXMuaW5wdXRCcm9rZXIuZ2V0SXRlbVByb3ZpZGVycyhpdGVtLnZhbHVlKSxcbiAgICAgIC4uLnRoaXMub3V0cHV0QnJva2VyLmdldEl0ZW1Qcm92aWRlcnMoaXRlbS52YWx1ZSksXG4gICAgXSk7XG4gICAgY29uc3QgcGlwZWxpbmVTZXJ2aWNlOiBTdGF0aWNQcm92aWRlciA9IHtcbiAgICAgIHByb3ZpZGU6IFBpcGVsaW5lU2VydmljZSxcbiAgICAgIGRlcHM6IFtQaXBlbGluZVJlZ2lzdHJ5LCBJbmplY3Rvcl0sXG4gICAgfTtcblxuICAgIHJldHVybiBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHdpZGdldFByb3ZpZGVyLFxuICAgICAgICBjb250YWluZXJQcm92aWRlcixcbiAgICAgICAgcm91dGVyU2VydmljZVByb3ZpZGVyLFxuICAgICAgICAuLi5jb21tdW5pY2F0aW9uUGlwZWxpbmVQcm92aWRlcnMsXG4gICAgICAgIHBpcGVsaW5lU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IMm1U1RPUkVfQlJBTkNILFxuICAgICAgICAgIHVzZVZhbHVlOiBpdGVtLnZhbHVlLm5hbWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiDJtVNUT1JFX0RJU1BBVENIX0NIQU5ORUwsXG4gICAgICAgICAgdXNlVmFsdWU6IGl0ZW0udmFsdWUubmFtZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFN0b3JlRmFjdG9yeSxcbiAgICAgICAgICB1c2VDbGFzczogU3RvcmVGYWN0b3J5LFxuICAgICAgICAgIGRlcHM6IFvJtVN0b3JlQnJva2VyLCDJtVNUT1JFX0JSQU5DSCwgybVTVE9SRV9ESVNQQVRDSF9DSEFOTkVMLCBGZWF0dXJlc1NlcnZpY2VdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVGVtcGxhdGVSZWdpc3RyeSxcbiAgICAgICAgICB1c2VDbGFzczogVGVtcGxhdGVSZWdpc3RyeSxcbiAgICAgICAgICBkZXBzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwYXJlbnQsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==