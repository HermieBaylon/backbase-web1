import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
export var LifecycleEventKind;
(function (LifecycleEventKind) {
    LifecycleEventKind["Create"] = "create";
    LifecycleEventKind["Remove"] = "remove";
})(LifecycleEventKind || (LifecycleEventKind = {}));
export class ItemLifecycleService {
    constructor() {
        this.lifecycleEvents = new Subject();
    }
    onCreate(itemModel, component) {
        this.lifecycleEvents.next({
            kind: LifecycleEventKind.Create,
            itemModel,
            component,
        });
    }
    onRemove(itemModel, component) {
        this.lifecycleEvents.next({
            kind: LifecycleEventKind.Remove,
            itemModel,
            component,
        });
    }
    fromItem(name) {
        return this.lifecycleEvents.pipe(filter((lcEvent) => name === lcEvent.itemModel.value.name));
    }
    whenCreate(name) {
        const nameFilter = name ? (currentName) => currentName === name : () => true;
        return this.lifecycleEvents.pipe(filter((lcEvent) => LifecycleEventKind.Create === lcEvent.kind && nameFilter(lcEvent.itemModel.value.name)));
    }
    whenRemove(name) {
        const nameFilter = name ? (currentName) => currentName === name : () => true;
        return this.lifecycleEvents.pipe(filter((lcEvent) => LifecycleEventKind.Remove === lcEvent.kind && nameFilter(lcEvent.itemModel.value.name)));
    }
}
ItemLifecycleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ItemLifecycleService_Factory() { return new ItemLifecycleService(); }, token: ItemLifecycleService, providedIn: "root" });
ItemLifecycleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1saWZlY3ljbGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL2JhY2tiYXNlLWNvcmUvcmVuZGVyaW5nL2l0ZW0tbGlmZWN5Y2xlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFHekQsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRXhDLE1BQU0sQ0FBTixJQUFZLGtCQUdYO0FBSEQsV0FBWSxrQkFBa0I7SUFDNUIsdUNBQWlCLENBQUE7SUFDakIsdUNBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUhXLGtCQUFrQixLQUFsQixrQkFBa0IsUUFHN0I7QUFXRCxNQUFNLE9BQU8sb0JBQW9CO0lBSGpDO1FBSW1CLG9CQUFlLEdBQTRCLElBQUksT0FBTyxFQUFFLENBQUM7S0F5QzNFO0lBdkNDLFFBQVEsQ0FBQyxTQUFvQyxFQUFFLFNBQTRCO1FBQ3pFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1lBQ3hCLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxNQUFNO1lBQy9CLFNBQVM7WUFDVCxTQUFTO1NBQ1YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxTQUFvQyxFQUFFLFNBQTRCO1FBQ3pFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1lBQ3hCLElBQUksRUFBRSxrQkFBa0IsQ0FBQyxNQUFNO1lBQy9CLFNBQVM7WUFDVCxTQUFTO1NBQ1YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFZO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBdUIsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDL0csQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFhO1FBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFtQixFQUFFLEVBQUUsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDckYsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FDOUIsTUFBTSxDQUNKLENBQUMsT0FBdUIsRUFBRSxFQUFFLENBQzFCLGtCQUFrQixDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDekYsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFhO1FBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFtQixFQUFFLEVBQUUsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDckYsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FDOUIsTUFBTSxDQUNKLENBQUMsT0FBdUIsRUFBRSxFQUFFLENBQzFCLGtCQUFrQixDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDekYsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7OztZQTVDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEl0ZW1Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9pdGVtLW1vZGVsJztcbmltcG9ydCB7IE9ic2VydmFibGVUcmVlIH0gZnJvbSAnLi4vbW9kZWxzL29ic2VydmFibGUtdHJlZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgZW51bSBMaWZlY3ljbGVFdmVudEtpbmQge1xuICBDcmVhdGUgPSAnY3JlYXRlJyxcbiAgUmVtb3ZlID0gJ3JlbW92ZScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlmZWN5Y2xlRXZlbnQge1xuICBraW5kOiBMaWZlY3ljbGVFdmVudEtpbmQ7XG4gIGl0ZW1Nb2RlbDogT2JzZXJ2YWJsZVRyZWU8SXRlbU1vZGVsPjtcbiAgY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55Pjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEl0ZW1MaWZlY3ljbGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsaWZlY3ljbGVFdmVudHM6IFN1YmplY3Q8TGlmZWN5Y2xlRXZlbnQ+ID0gbmV3IFN1YmplY3QoKTtcblxuICBvbkNyZWF0ZShpdGVtTW9kZWw6IE9ic2VydmFibGVUcmVlPEl0ZW1Nb2RlbD4sIGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4pIHtcbiAgICB0aGlzLmxpZmVjeWNsZUV2ZW50cy5uZXh0KHtcbiAgICAgIGtpbmQ6IExpZmVjeWNsZUV2ZW50S2luZC5DcmVhdGUsXG4gICAgICBpdGVtTW9kZWwsXG4gICAgICBjb21wb25lbnQsXG4gICAgfSk7XG4gIH1cblxuICBvblJlbW92ZShpdGVtTW9kZWw6IE9ic2VydmFibGVUcmVlPEl0ZW1Nb2RlbD4sIGNvbXBvbmVudDogQ29tcG9uZW50UmVmPGFueT4pIHtcbiAgICB0aGlzLmxpZmVjeWNsZUV2ZW50cy5uZXh0KHtcbiAgICAgIGtpbmQ6IExpZmVjeWNsZUV2ZW50S2luZC5SZW1vdmUsXG4gICAgICBpdGVtTW9kZWwsXG4gICAgICBjb21wb25lbnQsXG4gICAgfSk7XG4gIH1cblxuICBmcm9tSXRlbShuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPExpZmVjeWNsZUV2ZW50PiB7XG4gICAgcmV0dXJuIHRoaXMubGlmZWN5Y2xlRXZlbnRzLnBpcGUoZmlsdGVyKChsY0V2ZW50OiBMaWZlY3ljbGVFdmVudCkgPT4gbmFtZSA9PT0gbGNFdmVudC5pdGVtTW9kZWwudmFsdWUubmFtZSkpO1xuICB9XG5cbiAgd2hlbkNyZWF0ZShuYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxMaWZlY3ljbGVFdmVudD4ge1xuICAgIGNvbnN0IG5hbWVGaWx0ZXIgPSBuYW1lID8gKGN1cnJlbnROYW1lOiBzdHJpbmcpID0+IGN1cnJlbnROYW1lID09PSBuYW1lIDogKCkgPT4gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5saWZlY3ljbGVFdmVudHMucGlwZShcbiAgICAgIGZpbHRlcihcbiAgICAgICAgKGxjRXZlbnQ6IExpZmVjeWNsZUV2ZW50KSA9PlxuICAgICAgICAgIExpZmVjeWNsZUV2ZW50S2luZC5DcmVhdGUgPT09IGxjRXZlbnQua2luZCAmJiBuYW1lRmlsdGVyKGxjRXZlbnQuaXRlbU1vZGVsLnZhbHVlLm5hbWUpLFxuICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgd2hlblJlbW92ZShuYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxMaWZlY3ljbGVFdmVudD4ge1xuICAgIGNvbnN0IG5hbWVGaWx0ZXIgPSBuYW1lID8gKGN1cnJlbnROYW1lOiBzdHJpbmcpID0+IGN1cnJlbnROYW1lID09PSBuYW1lIDogKCkgPT4gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5saWZlY3ljbGVFdmVudHMucGlwZShcbiAgICAgIGZpbHRlcihcbiAgICAgICAgKGxjRXZlbnQ6IExpZmVjeWNsZUV2ZW50KSA9PlxuICAgICAgICAgIExpZmVjeWNsZUV2ZW50S2luZC5SZW1vdmUgPT09IGxjRXZlbnQua2luZCAmJiBuYW1lRmlsdGVyKGxjRXZlbnQuaXRlbU1vZGVsLnZhbHVlLm5hbWUpLFxuICAgICAgKSxcbiAgICApO1xuICB9XG59XG4iXX0=