import { Compiler, Injector, Injectable, Inject, Optional, NgModuleFactory } from '@angular/core';
import { hasDuplicates } from '../models/array';
import { ItemRegistryService } from './item-registry.service';
import { CombinedComponentFactoryResolver } from './combined-component-factory-resolver';
import { LAZY_MAP } from './lazy-config';
import * as i0 from "@angular/core";
import * as i1 from "./item-registry.service";
import * as i2 from "./combined-component-factory-resolver";
import * as i3 from "./lazy-config";
export class ItemLoaderService {
    constructor(compiler, parentInjector, itemRegistry, componentFactoryResolver, 
    // @fixme: generate lazy map from the page model?
    lazyConfig) {
        this.compiler = compiler;
        this.parentInjector = parentInjector;
        this.itemRegistry = itemRegistry;
        this.componentFactoryResolver = componentFactoryResolver;
        this.lazyComponentsConfig = lazyConfig
            ? lazyConfig.filter((config) => !!config.components)
            : [];
        if (hasDuplicates(this.lazyComponentsConfig.reduce((acc, config) => [...acc, ...config.components], []))) {
            throw new Error('[LazyConfig] You have added one or more components inside multiple lazy loading bundles. ' +
                "This will make an impact on your app's performance. " +
                'Update your config to have one component included in only one bundle.');
        }
    }
    /**
     * Loads the module this class is in, and adds
     * it to the global item registry, and global component
     * resolver.
     *
     * @param classId
     */
    loadComponent(classId) {
        if (this.itemRegistry.has(classId) || this.lazyComponentsConfig.length === 0) {
            return Promise.resolve();
        }
        const foundBundle = this.lazyComponentsConfig.find(item => item.components.indexOf(classId) !== -1);
        const callback = foundBundle ? foundBundle.loadChildren : undefined;
        if (!callback) {
            return Promise.resolve();
        }
        return callback()
            .then(this.toModuleFactory.bind(this))
            .then(this.loadModule.bind(this))
            .then(this.registerModule.bind(this, classId));
    }
    toModuleFactory(loadedItem) {
        // Depending on compiler, callback can return either module factory or the module itself.
        return loadedItem instanceof NgModuleFactory ? loadedItem : this.compiler.compileModuleSync(loadedItem);
    }
    loadModule(moduleFactory) {
        return moduleFactory.create(this.parentInjector);
    }
    registerModule(classId, ngModule) {
        this.registerComponentClass(classId, ngModule);
        this.registerComponentFactoryResolver(classId, ngModule);
    }
    registerComponentClass(classId, ngModule) {
        const childRegistry = ngModule.injector.get(ItemRegistryService);
        const componentClass = childRegistry.getComponentValue(classId);
        if (!componentClass) {
            throw new Error(`@backbase/foundation No component registered for ${classId}. Did you add it to the classMap?`);
        }
        this.itemRegistry.add(classId, componentClass);
    }
    registerComponentFactoryResolver(classId, ngModule) {
        this.componentFactoryResolver.registerChildResolver(classId, ngModule.componentFactoryResolver);
    }
}
ItemLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ItemLoaderService_Factory() { return new ItemLoaderService(i0.ɵɵinject(i0.Compiler), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.ItemRegistryService), i0.ɵɵinject(i2.CombinedComponentFactoryResolver), i0.ɵɵinject(i3.LAZY_MAP, 8)); }, token: ItemLoaderService, providedIn: "root" });
ItemLoaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ItemLoaderService.ctorParameters = () => [
    { type: Compiler },
    { type: Injector },
    { type: ItemRegistryService },
    { type: CombinedComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Inject, args: [LAZY_MAP,] }, { type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,