export function equal(a, b) {
    if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    return a === b;
}
/**
 * Allow the processing of Properties as an array of pairs.
 *
 * @param process The processing to apply to the property pairs; mapping, filtering, etc.
 * @param properties
 */
export const propertiesAsPairs = (process, properties) => {
    const pairs = process(Object.entries(properties));
    return pairs.reduce((acc, [name, value]) => (Object.assign(Object.assign({}, acc), { [name]: value })), {});
};
/**
 * Returns a subset of the properties that start
 * with a given prefix, and also removes the prefix from the name
 * of the property.
 *
 * @param prefix
 * @param properties
 */
export const propertiesByPrefix = (prefix, properties) => propertiesAsPairs(pairs => pairs
    .filter(([name]) => name.startsWith(prefix))
    .map(([name, value]) => [name.substring(prefix.length), value]), properties);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUvc3JjL3dlYi1zZGsvcHJvcGVydGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUsS0FBSyxDQUFDLENBQVcsRUFBRSxDQUFXO0lBQzVDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hDLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsT0FBd0UsRUFDeEUsVUFBc0IsRUFDVixFQUFFO0lBQ2QsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUNsRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQ2pCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQ0FDbkIsR0FBRyxLQUNOLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUNiLEVBQ0YsRUFBZ0IsQ0FDakIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE1BQWMsRUFBRSxVQUFzQixFQUFjLEVBQUUsQ0FDdkYsaUJBQWlCLENBQ2YsS0FBSyxDQUFDLEVBQUUsQ0FDTixLQUFLO0tBQ0YsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMzQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBc0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFDdkYsVUFBVSxDQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wZXJ0eSwgUHJvcGVydGllcyB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy93ZWItc2RrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsKGE6IFByb3BlcnR5LCBiOiBQcm9wZXJ0eSk6IGJvb2xlYW4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiBBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbi8qKlxuICogQWxsb3cgdGhlIHByb2Nlc3Npbmcgb2YgUHJvcGVydGllcyBhcyBhbiBhcnJheSBvZiBwYWlycy5cbiAqXG4gKiBAcGFyYW0gcHJvY2VzcyBUaGUgcHJvY2Vzc2luZyB0byBhcHBseSB0byB0aGUgcHJvcGVydHkgcGFpcnM7IG1hcHBpbmcsIGZpbHRlcmluZywgZXRjLlxuICogQHBhcmFtIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3BlcnRpZXNBc1BhaXJzID0gKFxuICBwcm9jZXNzOiAocGFpcnM6IEFycmF5PFtzdHJpbmcsIFByb3BlcnR5XT4pID0+IEFycmF5PFtzdHJpbmcsIFByb3BlcnR5XT4sXG4gIHByb3BlcnRpZXM6IFByb3BlcnRpZXMsXG4pOiBQcm9wZXJ0aWVzID0+IHtcbiAgY29uc3QgcGFpcnMgPSBwcm9jZXNzKE9iamVjdC5lbnRyaWVzKHByb3BlcnRpZXMpKTtcbiAgcmV0dXJuIHBhaXJzLnJlZHVjZShcbiAgICAoYWNjLCBbbmFtZSwgdmFsdWVdKSA9PiAoe1xuICAgICAgLi4uYWNjLFxuICAgICAgW25hbWVdOiB2YWx1ZSxcbiAgICB9KSxcbiAgICB7fSBhcyBQcm9wZXJ0aWVzLFxuICApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc3Vic2V0IG9mIHRoZSBwcm9wZXJ0aWVzIHRoYXQgc3RhcnRcbiAqIHdpdGggYSBnaXZlbiBwcmVmaXgsIGFuZCBhbHNvIHJlbW92ZXMgdGhlIHByZWZpeCBmcm9tIHRoZSBuYW1lXG4gKiBvZiB0aGUgcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHByZWZpeFxuICogQHBhcmFtIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3BlcnRpZXNCeVByZWZpeCA9IChwcmVmaXg6IHN0cmluZywgcHJvcGVydGllczogUHJvcGVydGllcyk6IFByb3BlcnRpZXMgPT5cbiAgcHJvcGVydGllc0FzUGFpcnMoXG4gICAgcGFpcnMgPT5cbiAgICAgIHBhaXJzXG4gICAgICAgIC5maWx0ZXIoKFtuYW1lXSkgPT4gbmFtZS5zdGFydHNXaXRoKHByZWZpeCkpXG4gICAgICAgIC5tYXAoKFtuYW1lLCB2YWx1ZV0pOiBbc3RyaW5nLCBQcm9wZXJ0eV0gPT4gW25hbWUuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgpLCB2YWx1ZV0pLFxuICAgIHByb3BlcnRpZXMsXG4gICk7XG4iXX0=