import { InjectionToken } from '@angular/core';
const DEFAULT_RETURN_STATUS = 200;
export var MocksItem;
(function (MocksItem) {
    const placeholderPattern = /\{[^\}]*\}/g;
    function placeholdersCount(item) {
        return (item.urlPattern.match(placeholderPattern) || []).length;
    }
    function placeholderIndex(item) {
        const regex = new RegExp(placeholderPattern);
        const found = regex.exec(item.urlPattern);
        return found == null ? item.urlPattern.length : found.index;
    }
    function comparePlaceHolderCount(a, b) {
        return placeholdersCount(a) - placeholdersCount(b);
    }
    function comparePlaceholderIndex(a, b) {
        return placeholderIndex(b) - placeholderIndex(a);
    }
    function compareSpecificity(a, b) {
        return comparePlaceHolderCount(a, b) || comparePlaceholderIndex(a, b);
    }
    MocksItem.compareSpecificity = compareSpecificity;
})(MocksItem || (MocksItem = {}));
export function fromExamples(examples) {
    return examples.map(exampleItemToMockItem).sort(MocksItem.compareSpecificity);
}
function exampleItemToMockItem(example) {
    let defaultResponseItem;
    if (example.responses && example.responses.length) {
        defaultResponseItem =
            example.responses.find((response) => isSuccessStatus(response.status)) ||
                example.responses[0];
    }
    return Object.assign({ statusToReturn: defaultResponseItem ? defaultResponseItem.status : DEFAULT_RETURN_STATUS }, example);
}
export function isSuccessStatus(status) {
    return status >= 200 && status <= 299;
}
export const MOCKS_EXAMPLES = new InjectionToken(`@backbase/foundation Mocks Examples`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9kYXRhLWh0dHAvc3JjL21vY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0MsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLENBQUM7QUE0QmxDLE1BQU0sS0FBVyxTQUFTLENBd0J6QjtBQXhCRCxXQUFpQixTQUFTO0lBQ3hCLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUFDO0lBRXpDLFNBQVMsaUJBQWlCLENBQUMsSUFBZTtRQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDbEUsQ0FBQztJQUVELFNBQVMsZ0JBQWdCLENBQUMsSUFBZTtRQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDOUQsQ0FBQztJQUVELFNBQVMsdUJBQXVCLENBQUMsQ0FBWSxFQUFFLENBQVk7UUFDekQsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsU0FBUyx1QkFBdUIsQ0FBQyxDQUFZLEVBQUUsQ0FBWTtRQUN6RCxPQUFPLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxDQUFZLEVBQUUsQ0FBWTtRQUMzRCxPQUFPLHVCQUF1QixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUZlLDRCQUFrQixxQkFFakMsQ0FBQTtBQUNILENBQUMsRUF4QmdCLFNBQVMsS0FBVCxTQUFTLFFBd0J6QjtBQU9ELE1BQU0sVUFBVSxZQUFZLENBQUMsUUFBNEI7SUFDdkQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2hGLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUFDLE9BQW9CO0lBQ2pELElBQUksbUJBQXVELENBQUM7SUFDNUQsSUFBSSxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQ2pELG1CQUFtQjtZQUNqQixPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQWdDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzlGLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDeEI7SUFDRCxxQkFDSyxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxFQUM1RixPQUFPLEVBQ1Y7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFjO0lBQzVDLE9BQU8sTUFBTSxJQUFJLEdBQUcsSUFBSSxNQUFNLElBQUksR0FBRyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQWtCLHFDQUFxQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VydmljZURhdGFIdHRwQ29uZmlnIH0gZnJvbSAnLi9kYXRhLWh0dHAtY29uZmlnJztcblxuY29uc3QgREVGQVVMVF9SRVRVUk5fU1RBVFVTID0gMjAwO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tEYXRhIHtcbiAgZXhhbXBsZXM6IEFycmF5PE1vY2tFeGFtcGxlPjtcbiAgdG9rZW4/OiBJbmplY3Rpb25Ub2tlbjxTZXJ2aWNlRGF0YUh0dHBDb25maWc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vY2tEYXRhQ29uZmlnIHtcbiAgZXhhbXBsZXM6IEFycmF5PE1vY2tFeGFtcGxlPjtcbiAgY29uZmlnPzogU2VydmljZURhdGFIdHRwQ29uZmlnO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2YgdGhlIG1vY2sgcmVzcG9uc2VzIGJhc2VkIG9uIG1hdGNoaW5nIGEgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNb2NrRXhhbXBsZSB7XG4gIHVybFBhdHRlcm46IHN0cmluZztcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIHJlc3BvbnNlczogQXJyYXk8TW9ja3NJdGVtUmVzcG9uc2U8YW55Pj47XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTW9ja3NJdGVtIGV4dGVuZHMgTW9ja0V4YW1wbGUge1xuICBzdGF0dXNUb1JldHVybjogbnVtYmVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIE1vY2tzSXRlbSB7XG4gIGNvbnN0IHBsYWNlaG9sZGVyUGF0dGVybiA9IC9cXHtbXlxcfV0qXFx9L2c7XG5cbiAgZnVuY3Rpb24gcGxhY2Vob2xkZXJzQ291bnQoaXRlbTogTW9ja3NJdGVtKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKGl0ZW0udXJsUGF0dGVybi5tYXRjaChwbGFjZWhvbGRlclBhdHRlcm4pIHx8IFtdKS5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZWhvbGRlckluZGV4KGl0ZW06IE1vY2tzSXRlbSk6IG51bWJlciB7XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHBsYWNlaG9sZGVyUGF0dGVybik7XG4gICAgY29uc3QgZm91bmQgPSByZWdleC5leGVjKGl0ZW0udXJsUGF0dGVybik7XG4gICAgcmV0dXJuIGZvdW5kID09IG51bGwgPyBpdGVtLnVybFBhdHRlcm4ubGVuZ3RoIDogZm91bmQuaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlUGxhY2VIb2xkZXJDb3VudChhOiBNb2Nrc0l0ZW0sIGI6IE1vY2tzSXRlbSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyc0NvdW50KGEpIC0gcGxhY2Vob2xkZXJzQ291bnQoYik7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlUGxhY2Vob2xkZXJJbmRleChhOiBNb2Nrc0l0ZW0sIGI6IE1vY2tzSXRlbSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVySW5kZXgoYikgLSBwbGFjZWhvbGRlckluZGV4KGEpO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVTcGVjaWZpY2l0eShhOiBNb2Nrc0l0ZW0sIGI6IE1vY2tzSXRlbSk6IG51bWJlciB7XG4gICAgcmV0dXJuIGNvbXBhcmVQbGFjZUhvbGRlckNvdW50KGEsIGIpIHx8IGNvbXBhcmVQbGFjZWhvbGRlckluZGV4KGEsIGIpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9ja3NJdGVtUmVzcG9uc2U8VD4ge1xuICBzdGF0dXM6IG51bWJlcjtcbiAgYm9keT86IFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXhhbXBsZXMoZXhhbXBsZXM6IEFycmF5PE1vY2tFeGFtcGxlPik6IEFycmF5PE1vY2tzSXRlbT4ge1xuICByZXR1cm4gZXhhbXBsZXMubWFwKGV4YW1wbGVJdGVtVG9Nb2NrSXRlbSkuc29ydChNb2Nrc0l0ZW0uY29tcGFyZVNwZWNpZmljaXR5KTtcbn1cblxuZnVuY3Rpb24gZXhhbXBsZUl0ZW1Ub01vY2tJdGVtKGV4YW1wbGU6IE1vY2tFeGFtcGxlKTogTW9ja3NJdGVtIHtcbiAgbGV0IGRlZmF1bHRSZXNwb25zZUl0ZW06IE1vY2tzSXRlbVJlc3BvbnNlPGFueT4gfCB1bmRlZmluZWQ7XG4gIGlmIChleGFtcGxlLnJlc3BvbnNlcyAmJiBleGFtcGxlLnJlc3BvbnNlcy5sZW5ndGgpIHtcbiAgICBkZWZhdWx0UmVzcG9uc2VJdGVtID1cbiAgICAgIGV4YW1wbGUucmVzcG9uc2VzLmZpbmQoKHJlc3BvbnNlOiBNb2Nrc0l0ZW1SZXNwb25zZTxhbnk+KSA9PiBpc1N1Y2Nlc3NTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkgfHxcbiAgICAgIGV4YW1wbGUucmVzcG9uc2VzWzBdO1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4ueyBzdGF0dXNUb1JldHVybjogZGVmYXVsdFJlc3BvbnNlSXRlbSA/IGRlZmF1bHRSZXNwb25zZUl0ZW0uc3RhdHVzIDogREVGQVVMVF9SRVRVUk5fU1RBVFVTIH0sXG4gICAgLi4uZXhhbXBsZSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3VjY2Vzc1N0YXR1cyhzdGF0dXM6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPD0gMjk5O1xufVxuXG5leHBvcnQgY29uc3QgTU9DS1NfRVhBTVBMRVMgPSBuZXcgSW5qZWN0aW9uVG9rZW48QXJyYXk8TW9ja0RhdGE+PihgQGJhY2tiYXNlL2ZvdW5kYXRpb24gTW9ja3MgRXhhbXBsZXNgKTtcbiJdfQ==