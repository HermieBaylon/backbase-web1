import { NgModule } from '@angular/core';
import { cacheControlInterceptorProvider } from './cache-control.interceptor';
import { DATA_HTTP_CONFIG, DATA_HTTP_CUSTOM_CONFIG } from './data-http-config';
import { requestCacheInterceptorProvider } from './request-cache.interceptor';
import { PAGE_CONFIG } from '@backbase/foundation-ang/web-sdk';
import { HTTP_PARAMS_FACTORY, httpParamsFactoryFactory, EXTRA_ENCODE_URI_PARAMS } from './custom-encoder.service';
import { FutureFeaturesModule, FeaturesService } from '@backbase/foundation-ang/core';
/**
 * Returns merged data http configuration object
 * @param pageConfigService
 * @param config
 */
export function dataHttpConfigFactory(pageConfigService, config = {}) {
    return Object.assign({ headers: {}, apiRoot: pageConfigService.apiRoot }, config);
}
const ɵ0 = httpParamsFactoryFactory;
export class DataHttpModule {
    /**
     * Creates a module with http configuration for data modules.
     *
     * @usageNotes
     *
     * ### Example
     *
     * ```
     * @NgModule({
     *   imports: [
     *     DataHttpModule.forRoot({
     *       rootApi: '/custom-base-url/',
     *       headers: {
     *         'X-custom': 'foo',
     *       }
     *     })
     *   ]
     * })
     * class MyAppModule {}
     * ```
     */
    static forRoot(config = {}) {
        return {
            ngModule: DataHttpModule,
            providers: [
                requestCacheInterceptorProvider,
                cacheControlInterceptorProvider,
                {
                    provide: DATA_HTTP_CUSTOM_CONFIG,
                    useValue: config,
                },
                {
                    provide: DATA_HTTP_CONFIG,
                    useFactory: dataHttpConfigFactory,
                    deps: [PAGE_CONFIG, DATA_HTTP_CUSTOM_CONFIG],
                },
            ],
        };
    }
}
DataHttpModule.decorators = [
    { type: NgModule, args: [{
                imports: [FutureFeaturesModule.allowOptIn([EXTRA_ENCODE_URI_PARAMS])],
                providers: [
                    {
                        provide: DATA_HTTP_CONFIG,
                        useFactory: dataHttpConfigFactory,
                        deps: [PAGE_CONFIG],
                    },
                    {
                        provide: HTTP_PARAMS_FACTORY,
                        useFactory: ɵ0,
                        deps: [FeaturesService],
                    },
                ],
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1odHRwLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2RhdGEtaHR0cC9zcmMvZGF0YS1odHRwLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsdUJBQXVCLEVBQWtCLE1BQU0sb0JBQW9CLENBQUM7QUFDL0YsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUUsT0FBTyxFQUFjLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSx3QkFBd0IsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV0Rjs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUNuQyxpQkFBNkIsRUFDN0IsU0FBa0MsRUFBRTtJQUVwQyx1QkFDRSxPQUFPLEVBQUUsRUFBRSxFQUNYLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLElBQy9CLE1BQU0sRUFDVDtBQUNKLENBQUM7V0FZaUIsd0JBQXdCO0FBSzFDLE1BQU0sT0FBTyxjQUFjO0lBQ3pCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW9CRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBa0MsRUFBRTtRQUNqRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLGNBQWM7WUFDeEIsU0FBUyxFQUFFO2dCQUNULCtCQUErQjtnQkFDL0IsK0JBQStCO2dCQUMvQjtvQkFDRSxPQUFPLEVBQUUsdUJBQXVCO29CQUNoQyxRQUFRLEVBQUUsTUFBTTtpQkFDakI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjtvQkFDekIsVUFBVSxFQUFFLHFCQUFxQjtvQkFDakMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLHVCQUF1QixDQUFDO2lCQUM3QzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXRERixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO2dCQUNyRSxTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGdCQUFnQjt3QkFDekIsVUFBVSxFQUFFLHFCQUFxQjt3QkFDakMsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDO3FCQUNwQjtvQkFDRDt3QkFDRSxPQUFPLEVBQUUsbUJBQW1CO3dCQUM1QixVQUFVLElBQTBCO3dCQUNwQyxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUM7cUJBQ3hCO2lCQUNGO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjYWNoZUNvbnRyb2xJbnRlcmNlcHRvclByb3ZpZGVyIH0gZnJvbSAnLi9jYWNoZS1jb250cm9sLmludGVyY2VwdG9yJztcbmltcG9ydCB7IERBVEFfSFRUUF9DT05GSUcsIERBVEFfSFRUUF9DVVNUT01fQ09ORklHLCBEYXRhSHR0cENvbmZpZyB9IGZyb20gJy4vZGF0YS1odHRwLWNvbmZpZyc7XG5pbXBvcnQgeyByZXF1ZXN0Q2FjaGVJbnRlcmNlcHRvclByb3ZpZGVyIH0gZnJvbSAnLi9yZXF1ZXN0LWNhY2hlLmludGVyY2VwdG9yJztcbmltcG9ydCB7IFBhZ2VDb25maWcsIFBBR0VfQ09ORklHIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL3dlYi1zZGsnO1xuaW1wb3J0IHsgSFRUUF9QQVJBTVNfRkFDVE9SWSwgaHR0cFBhcmFtc0ZhY3RvcnlGYWN0b3J5LCBFWFRSQV9FTkNPREVfVVJJX1BBUkFNUyB9IGZyb20gJy4vY3VzdG9tLWVuY29kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBGdXR1cmVGZWF0dXJlc01vZHVsZSwgRmVhdHVyZXNTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuXG4vKipcbiAqIFJldHVybnMgbWVyZ2VkIGRhdGEgaHR0cCBjb25maWd1cmF0aW9uIG9iamVjdFxuICogQHBhcmFtIHBhZ2VDb25maWdTZXJ2aWNlXG4gKiBAcGFyYW0gY29uZmlnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXRhSHR0cENvbmZpZ0ZhY3RvcnkoXG4gIHBhZ2VDb25maWdTZXJ2aWNlOiBQYWdlQ29uZmlnLFxuICBjb25maWc6IFBhcnRpYWw8RGF0YUh0dHBDb25maWc+ID0ge30sXG4pOiBEYXRhSHR0cENvbmZpZyB7XG4gIHJldHVybiB7XG4gICAgaGVhZGVyczoge30sXG4gICAgYXBpUm9vdDogcGFnZUNvbmZpZ1NlcnZpY2UuYXBpUm9vdCxcbiAgICAuLi5jb25maWcsXG4gIH07XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtGdXR1cmVGZWF0dXJlc01vZHVsZS5hbGxvd09wdEluKFtFWFRSQV9FTkNPREVfVVJJX1BBUkFNU10pXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogREFUQV9IVFRQX0NPTkZJRyxcbiAgICAgIHVzZUZhY3Rvcnk6IGRhdGFIdHRwQ29uZmlnRmFjdG9yeSxcbiAgICAgIGRlcHM6IFtQQUdFX0NPTkZJR10sXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBIVFRQX1BBUkFNU19GQUNUT1JZLFxuICAgICAgdXNlRmFjdG9yeTogaHR0cFBhcmFtc0ZhY3RvcnlGYWN0b3J5LFxuICAgICAgZGVwczogW0ZlYXR1cmVzU2VydmljZV0sXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRGF0YUh0dHBNb2R1bGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG1vZHVsZSB3aXRoIGh0dHAgY29uZmlndXJhdGlvbiBmb3IgZGF0YSBtb2R1bGVzLlxuICAgKlxuICAgKiBAdXNhZ2VOb3Rlc1xuICAgKlxuICAgKiAjIyMgRXhhbXBsZVxuICAgKlxuICAgKiBgYGBcbiAgICogQE5nTW9kdWxlKHtcbiAgICogICBpbXBvcnRzOiBbXG4gICAqICAgICBEYXRhSHR0cE1vZHVsZS5mb3JSb290KHtcbiAgICogICAgICAgcm9vdEFwaTogJy9jdXN0b20tYmFzZS11cmwvJyxcbiAgICogICAgICAgaGVhZGVyczoge1xuICAgKiAgICAgICAgICdYLWN1c3RvbSc6ICdmb28nLFxuICAgKiAgICAgICB9XG4gICAqICAgICB9KVxuICAgKiAgIF1cbiAgICogfSlcbiAgICogY2xhc3MgTXlBcHBNb2R1bGUge31cbiAgICogYGBgXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IFBhcnRpYWw8RGF0YUh0dHBDb25maWc+ID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPERhdGFIdHRwTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBEYXRhSHR0cE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICByZXF1ZXN0Q2FjaGVJbnRlcmNlcHRvclByb3ZpZGVyLFxuICAgICAgICBjYWNoZUNvbnRyb2xJbnRlcmNlcHRvclByb3ZpZGVyLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogREFUQV9IVFRQX0NVU1RPTV9DT05GSUcsXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IERBVEFfSFRUUF9DT05GSUcsXG4gICAgICAgICAgdXNlRmFjdG9yeTogZGF0YUh0dHBDb25maWdGYWN0b3J5LFxuICAgICAgICAgIGRlcHM6IFtQQUdFX0NPTkZJRywgREFUQV9IVFRQX0NVU1RPTV9DT05GSUddLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=