import { HttpParams } from '@angular/common/http';
var PageParams;
(function (PageParams) {
    function equal(a, b) {
        return a.size === b.size && a.from === b.from;
    }
    PageParams.equal = equal;
    function toHttpParams(params) {
        return new HttpParams({
            fromObject: {
                from: Math.floor(params.from).toString(),
                size: Math.floor(params.size).toString(),
            },
        });
    }
    PageParams.toHttpParams = toHttpParams;
})(PageParams || (PageParams = {}));
var CursorParams;
(function (CursorParams) {
    function equal(a, b) {
        return a.size === b.size && a.cursor === b.cursor;
    }
    CursorParams.equal = equal;
    function toHttpParams(params) {
        return new HttpParams({
            fromObject: Object.assign({ from: params.cursor }, (params.size ? { size: Math.floor(params.size).toString() } : {})),
        });
    }
    CursorParams.toHttpParams = toHttpParams;
})(CursorParams || (CursorParams = {}));
export var PaginationParams;
(function (PaginationParams) {
    function equal(a, b) {
        const cursorsEqual = isCursorParams(a) && isCursorParams(b) && CursorParams.equal(a, b);
        const pagesEqual = isPageParams(a) && isPageParams(b) && PageParams.equal(a, b);
        return cursorsEqual || pagesEqual;
    }
    PaginationParams.equal = equal;
    function isPageParams(params) {
        return params.from !== undefined;
    }
    PaginationParams.isPageParams = isPageParams;
    function isCursorParams(params) {
        return params.cursor !== undefined;
    }
    PaginationParams.isCursorParams = isCursorParams;
    function toHttpParams(params) {
        return isPageParams(params) ? PageParams.toHttpParams(params) : CursorParams.toHttpParams(params);
    }
    PaginationParams.toHttpParams = toHttpParams;
})(PaginationParams || (PaginationParams = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZGF0YS1odHRwL3NyYy9wYWdpbmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBTWxELElBQVUsVUFBVSxDQVluQjtBQVpELFdBQVUsVUFBVTtJQUNsQixTQUFnQixLQUFLLENBQUMsQ0FBYSxFQUFFLENBQWE7UUFDaEQsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2hELENBQUM7SUFGZSxnQkFBSyxRQUVwQixDQUFBO0lBQ0QsU0FBZ0IsWUFBWSxDQUFDLE1BQWtCO1FBQzdDLE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsVUFBVSxFQUFFO2dCQUNWLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3hDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7YUFDekM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBUGUsdUJBQVksZUFPM0IsQ0FBQTtBQUNILENBQUMsRUFaUyxVQUFVLEtBQVYsVUFBVSxRQVluQjtBQUtELElBQVUsWUFBWSxDQVlyQjtBQVpELFdBQVUsWUFBWTtJQUNwQixTQUFnQixLQUFLLENBQUMsQ0FBZSxFQUFFLENBQWU7UUFDcEQsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3BELENBQUM7SUFGZSxrQkFBSyxRQUVwQixDQUFBO0lBQ0QsU0FBZ0IsWUFBWSxDQUFDLE1BQW9CO1FBQy9DLE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsVUFBVSxrQkFDUixJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU0sSUFDaEIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDckU7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBUGUseUJBQVksZUFPM0IsQ0FBQTtBQUNILENBQUMsRUFaUyxZQUFZLEtBQVosWUFBWSxRQVlyQjtBQUVELE1BQU0sS0FBVyxnQkFBZ0IsQ0FpQmhDO0FBakJELFdBQWlCLGdCQUFnQjtJQUMvQixTQUFnQixLQUFLLENBQUMsQ0FBbUIsRUFBRSxDQUFtQjtRQUM1RCxNQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hGLE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEYsT0FBTyxZQUFZLElBQUksVUFBVSxDQUFDO0lBQ3BDLENBQUM7SUFKZSxzQkFBSyxRQUlwQixDQUFBO0lBRUQsU0FBZ0IsWUFBWSxDQUFDLE1BQXdCO1FBQ25ELE9BQVEsTUFBcUIsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO0lBQ25ELENBQUM7SUFGZSw2QkFBWSxlQUUzQixDQUFBO0lBQ0QsU0FBZ0IsY0FBYyxDQUFDLE1BQXdCO1FBQ3JELE9BQVEsTUFBdUIsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDO0lBQ3ZELENBQUM7SUFGZSwrQkFBYyxpQkFFN0IsQ0FBQTtJQUVELFNBQWdCLFlBQVksQ0FBQyxNQUF3QjtRQUNuRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRyxDQUFDO0lBRmUsNkJBQVksZUFFM0IsQ0FBQTtBQUNILENBQUMsRUFqQmdCLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFpQmhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuZXhwb3J0IGludGVyZmFjZSBQYWdlUGFyYW1zIHtcbiAgZnJvbTogbnVtYmVyO1xuICBzaXplOiBudW1iZXI7XG59XG5uYW1lc3BhY2UgUGFnZVBhcmFtcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBlcXVhbChhOiBQYWdlUGFyYW1zLCBiOiBQYWdlUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gYi5zaXplICYmIGEuZnJvbSA9PT0gYi5mcm9tO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiB0b0h0dHBQYXJhbXMocGFyYW1zOiBQYWdlUGFyYW1zKTogSHR0cFBhcmFtcyB7XG4gICAgcmV0dXJuIG5ldyBIdHRwUGFyYW1zKHtcbiAgICAgIGZyb21PYmplY3Q6IHtcbiAgICAgICAgZnJvbTogTWF0aC5mbG9vcihwYXJhbXMuZnJvbSkudG9TdHJpbmcoKSxcbiAgICAgICAgc2l6ZTogTWF0aC5mbG9vcihwYXJhbXMuc2l6ZSkudG9TdHJpbmcoKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ3Vyc29yUGFyYW1zIHtcbiAgY3Vyc29yOiBzdHJpbmc7XG4gIHNpemU/OiBudW1iZXI7XG59XG5uYW1lc3BhY2UgQ3Vyc29yUGFyYW1zIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGVxdWFsKGE6IEN1cnNvclBhcmFtcywgYjogQ3Vyc29yUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gYi5zaXplICYmIGEuY3Vyc29yID09PSBiLmN1cnNvcjtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gdG9IdHRwUGFyYW1zKHBhcmFtczogQ3Vyc29yUGFyYW1zKTogSHR0cFBhcmFtcyB7XG4gICAgcmV0dXJuIG5ldyBIdHRwUGFyYW1zKHtcbiAgICAgIGZyb21PYmplY3Q6IHtcbiAgICAgICAgZnJvbTogcGFyYW1zLmN1cnNvcixcbiAgICAgICAgLi4uKHBhcmFtcy5zaXplID8geyBzaXplOiBNYXRoLmZsb29yKHBhcmFtcy5zaXplKS50b1N0cmluZygpIH0gOiB7fSksXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5leHBvcnQgdHlwZSBQYWdpbmF0aW9uUGFyYW1zID0gUGFnZVBhcmFtcyB8IEN1cnNvclBhcmFtcztcbmV4cG9ydCBuYW1lc3BhY2UgUGFnaW5hdGlvblBhcmFtcyB7XG4gIGV4cG9ydCBmdW5jdGlvbiBlcXVhbChhOiBQYWdpbmF0aW9uUGFyYW1zLCBiOiBQYWdpbmF0aW9uUGFyYW1zKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY3Vyc29yc0VxdWFsID0gaXNDdXJzb3JQYXJhbXMoYSkgJiYgaXNDdXJzb3JQYXJhbXMoYikgJiYgQ3Vyc29yUGFyYW1zLmVxdWFsKGEsIGIpO1xuICAgIGNvbnN0IHBhZ2VzRXF1YWwgPSBpc1BhZ2VQYXJhbXMoYSkgJiYgaXNQYWdlUGFyYW1zKGIpICYmIFBhZ2VQYXJhbXMuZXF1YWwoYSwgYik7XG4gICAgcmV0dXJuIGN1cnNvcnNFcXVhbCB8fCBwYWdlc0VxdWFsO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzUGFnZVBhcmFtcyhwYXJhbXM6IFBhZ2luYXRpb25QYXJhbXMpOiBwYXJhbXMgaXMgUGFnZVBhcmFtcyB7XG4gICAgcmV0dXJuIChwYXJhbXMgYXMgUGFnZVBhcmFtcykuZnJvbSAhPT0gdW5kZWZpbmVkO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBpc0N1cnNvclBhcmFtcyhwYXJhbXM6IFBhZ2luYXRpb25QYXJhbXMpOiBwYXJhbXMgaXMgQ3Vyc29yUGFyYW1zIHtcbiAgICByZXR1cm4gKHBhcmFtcyBhcyBDdXJzb3JQYXJhbXMpLmN1cnNvciAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHRvSHR0cFBhcmFtcyhwYXJhbXM6IFBhZ2luYXRpb25QYXJhbXMpOiBIdHRwUGFyYW1zIHtcbiAgICByZXR1cm4gaXNQYWdlUGFyYW1zKHBhcmFtcykgPyBQYWdlUGFyYW1zLnRvSHR0cFBhcmFtcyhwYXJhbXMpIDogQ3Vyc29yUGFyYW1zLnRvSHR0cFBhcmFtcyhwYXJhbXMpO1xuICB9XG59XG4iXX0=