import { HttpErrorResponse, HttpResponse, HTTP_INTERCEPTORS, } from '@angular/common/http';
import { APP_BOOTSTRAP_LISTENER, Injectable, isDevMode } from '@angular/core';
import { of as observableOf, throwError } from 'rxjs';
import { delay, dematerialize, materialize, tap } from 'rxjs/operators';
import { DataModulesManager } from './data-module-manager';
import { isSuccessStatus, MOCKS_EXAMPLES } from './mocks';
import * as i0 from "@angular/core";
import * as i1 from "./data-module-manager";
const DEFAULT_OPTIONS = {
    responseDelay: 300,
    enableMocksStorageKey: 'enableMocks',
};
export class MocksInterceptor {
    /*
     * this class is constructed in createMocksInterceptor
     function so make sure to updated it too if you have changes in the dependancy list
     */
    constructor(dataModuleManager) {
        this.dataModuleManager = dataModuleManager;
        this.options = DEFAULT_OPTIONS;
    }
    urlMatchesPattern(url, pattern) {
        const regexp = new RegExp(pattern
            .replace(/[.*+?^${}()|[\]\\]/g, '\\$&') // escape regex characters in URL pattern
            .replace(/\\{[^\}]*\}/g, '[^/]*') // convert template {placeholders} to regex
            .concat('$'));
        // fixes bug with older versions of data modules, where they could have ended up
        // with double slashes in the request URL, depending on the environment
        // by replacing multiple slashes with a single slash (except after ":" - e.g. in "http://")
        const normalUrl = url.replace(/([^:]\/)\/+/g, '$1');
        return regexp.test(normalUrl);
    }
    findRequestMock(request) {
        const urlAndMethodMatch = (item) => {
            return request.method === item.method && this.urlMatchesPattern(request.url, item.urlPattern);
        };
        return this.dataModuleManager.getMocks().find(urlAndMethodMatch);
    }
    toResponseObject(mockItem) {
        const response = mockItem.responses.find(resp => resp.status === mockItem.statusToReturn);
        if (!response) {
            return throwError(new HttpErrorResponse({
                status: 500,
                statusText: 'No Mock Defined',
            }));
        }
        if (isSuccessStatus(response.status)) {
            return observableOf(new HttpResponse(response));
        }
        else {
            return throwError(new HttpErrorResponse(response));
        }
    }
    getMockItemFromStorage(urlPattern) {
        try {
            return JSON.parse(localStorage.getItem(urlPattern) || '{}');
        }
        catch (_a) {
            console.warn(`[MOCK] Invalid json for the "${urlPattern}" local storage item`);
            return {};
        }
    }
    processRequest(request, next) {
        const mock = this.findRequestMock(request);
        if (mock) {
            return this.toResponseObject(Object.assign(Object.assign({}, mock), this.getMockItemFromStorage(mock.urlPattern)));
        }
        return next.handle(request);
    }
    intercept(request, next) {
        if (localStorage.getItem(this.options.enableMocksStorageKey) !== 'true') {
            return next.handle(request);
        }
        return this.processRequest(request, next).pipe(materialize(), delay(this.options.responseDelay), dematerialize(), tap(response => {
            // eslint-disable-next-line  no-console
            console.log('[MOCK]', request, response);
        }));
    }
}
MocksInterceptor.ɵprov = i0.ɵɵdefineInjectable({ factory: function MocksInterceptor_Factory() { return new MocksInterceptor(i0.ɵɵinject(i1.DataModulesManager)); }, token: MocksInterceptor, providedIn: "root" });
MocksInterceptor.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
MocksInterceptor.ctorParameters = () => [
    { type: DataModulesManager }
];
/**
 * Create a HTTP_INTERCEPTOR to return mock responses for data modules.
 */
export function createMocksInterceptor() {
    return [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: MocksInterceptor,
            deps: [DataModulesManager],
            multi: true,
        },
        {
            provide: APP_BOOTSTRAP_LISTENER,
            useValue: bootstrapMocksInterceptor,
            multi: true,
        },
    ];
}
export function bootstrapMocksInterceptor() {
    if (!isDevMode()) {
        console.warn('Mocks should not be enabled in a production environment.');
    }
}
/**
 * @internal
 * @deprecated
 */
export function createMockInterceptor(examples) {
    return createMocks(examples);
}
/**
 * Create mocks
 *
 * @param examples
 * @param serviceConfigToken
 */
export function createMocks(examples, serviceConfigToken) {
    return {
        provide: MOCKS_EXAMPLES,
        useValue: { examples, token: serviceConfigToken },
        multi: true,
    };
}
//# sourceMappingURL=data:application/json;base64,