export const hasProtocol = (url) => !!url.match(/^[^/:]+:\/{2,}$/);
const addTrailingSlash = (url) => url.replace(/([^\/])$/, '$1/');
const ɵ0 = addTrailingSlash;
const removeLeadingSlash = (str) => str.replace(/^[\/]+/, '');
const ɵ1 = removeLeadingSlash;
const removeTrailingSlash = (str) => str.replace(/[\/]+$/, '');
const ɵ2 = removeTrailingSlash;
/**
 * Join URL parts together into a single URL string.
 *
 * Ensures URL get joined together by a single slash.
 *
 * @internal
 * @usageNotes
 *
 * ### Example
 *
 * ```
 * joinUrl('a', 'b'); // returns 'a/b'
 * joinUrl('/a/', '/b/'); // returns '/a/b/'
 * joinUrl('http://www.example.com/', '/a/b', 'c'); // returns 'http://www.example.com/a/b/c'
 * ```
 */
export const joinUrl = (...urlParts) => {
    // Much of this is taken from https://github.com/jfromaniello/url-join/blob/master/lib/url-join.js
    if (urlParts.length < 2) {
        return urlParts[0] || '';
    }
    // If the first part is a plain protocol, we combine it with the next part.
    if (hasProtocol(urlParts[0])) {
        const first = urlParts.shift(); // it is assured by above check
        urlParts[0] = addTrailingSlash(first) + removeLeadingSlash(urlParts[0]);
    }
    const resultParts = urlParts.filter(Boolean).map((part, index) => {
        if (index > 0) {
            // Removing the starting slashes for each component but the first.
            part = removeLeadingSlash(part);
        }
        if (index < urlParts.length - 1) {
            // Removing the ending slashes for each component but the last.
            part = removeTrailingSlash(part);
        }
        return part;
    });
    // All parts now start and end without slashes (exceptions for the first and last).
    return resultParts.join('/');
};
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZGF0YS1odHRwL3NyYy91cmwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBVyxFQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXBGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFXLEVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDOztBQUVqRixNQUFNLGtCQUFrQixHQUFHLENBQUMsR0FBVyxFQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQzs7QUFFOUUsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEdBQVcsRUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRS9FOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsUUFBdUIsRUFBVSxFQUFFO0lBQzVELGtHQUFrRztJQUNsRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUMxQjtJQUVELDJFQUEyRTtJQUMzRSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM1QixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFZLENBQUMsQ0FBQywrQkFBK0I7UUFDekUsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3pFO0lBRUQsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7UUFDL0UsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2Isa0VBQWtFO1lBQ2xFLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQztRQUNELElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLCtEQUErRDtZQUMvRCxJQUFJLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDO0lBRUgsbUZBQW1GO0lBQ25GLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzUHJvdG9jb2wgPSAodXJsOiBzdHJpbmcpOiBib29sZWFuID0+ICEhdXJsLm1hdGNoKC9eW14vOl0rOlxcL3syLH0kLyk7XG5cbmNvbnN0IGFkZFRyYWlsaW5nU2xhc2ggPSAodXJsOiBzdHJpbmcpOiBzdHJpbmcgPT4gdXJsLnJlcGxhY2UoLyhbXlxcL10pJC8sICckMS8nKTtcblxuY29uc3QgcmVtb3ZlTGVhZGluZ1NsYXNoID0gKHN0cjogc3RyaW5nKTogc3RyaW5nID0+IHN0ci5yZXBsYWNlKC9eW1xcL10rLywgJycpO1xuXG5jb25zdCByZW1vdmVUcmFpbGluZ1NsYXNoID0gKHN0cjogc3RyaW5nKTogc3RyaW5nID0+IHN0ci5yZXBsYWNlKC9bXFwvXSskLywgJycpO1xuXG4vKipcbiAqIEpvaW4gVVJMIHBhcnRzIHRvZ2V0aGVyIGludG8gYSBzaW5nbGUgVVJMIHN0cmluZy5cbiAqXG4gKiBFbnN1cmVzIFVSTCBnZXQgam9pbmVkIHRvZ2V0aGVyIGJ5IGEgc2luZ2xlIHNsYXNoLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYFxuICogam9pblVybCgnYScsICdiJyk7IC8vIHJldHVybnMgJ2EvYidcbiAqIGpvaW5VcmwoJy9hLycsICcvYi8nKTsgLy8gcmV0dXJucyAnL2EvYi8nXG4gKiBqb2luVXJsKCdodHRwOi8vd3d3LmV4YW1wbGUuY29tLycsICcvYS9iJywgJ2MnKTsgLy8gcmV0dXJucyAnaHR0cDovL3d3dy5leGFtcGxlLmNvbS9hL2IvYydcbiAqIGBgYFxuICovXG5leHBvcnQgY29uc3Qgam9pblVybCA9ICguLi51cmxQYXJ0czogQXJyYXk8c3RyaW5nPik6IHN0cmluZyA9PiB7XG4gIC8vIE11Y2ggb2YgdGhpcyBpcyB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qZnJvbWFuaWVsbG8vdXJsLWpvaW4vYmxvYi9tYXN0ZXIvbGliL3VybC1qb2luLmpzXG4gIGlmICh1cmxQYXJ0cy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIHVybFBhcnRzWzBdIHx8ICcnO1xuICB9XG5cbiAgLy8gSWYgdGhlIGZpcnN0IHBhcnQgaXMgYSBwbGFpbiBwcm90b2NvbCwgd2UgY29tYmluZSBpdCB3aXRoIHRoZSBuZXh0IHBhcnQuXG4gIGlmIChoYXNQcm90b2NvbCh1cmxQYXJ0c1swXSkpIHtcbiAgICBjb25zdCBmaXJzdCA9IHVybFBhcnRzLnNoaWZ0KCkgYXMgc3RyaW5nOyAvLyBpdCBpcyBhc3N1cmVkIGJ5IGFib3ZlIGNoZWNrXG4gICAgdXJsUGFydHNbMF0gPSBhZGRUcmFpbGluZ1NsYXNoKGZpcnN0KSArIHJlbW92ZUxlYWRpbmdTbGFzaCh1cmxQYXJ0c1swXSk7XG4gIH1cblxuICBjb25zdCByZXN1bHRQYXJ0cyA9IHVybFBhcnRzLmZpbHRlcihCb29sZWFuKS5tYXAoKHBhcnQ6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgIC8vIFJlbW92aW5nIHRoZSBzdGFydGluZyBzbGFzaGVzIGZvciBlYWNoIGNvbXBvbmVudCBidXQgdGhlIGZpcnN0LlxuICAgICAgcGFydCA9IHJlbW92ZUxlYWRpbmdTbGFzaChwYXJ0KTtcbiAgICB9XG4gICAgaWYgKGluZGV4IDwgdXJsUGFydHMubGVuZ3RoIC0gMSkge1xuICAgICAgLy8gUmVtb3ZpbmcgdGhlIGVuZGluZyBzbGFzaGVzIGZvciBlYWNoIGNvbXBvbmVudCBidXQgdGhlIGxhc3QuXG4gICAgICBwYXJ0ID0gcmVtb3ZlVHJhaWxpbmdTbGFzaChwYXJ0KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnQ7XG4gIH0pO1xuXG4gIC8vIEFsbCBwYXJ0cyBub3cgc3RhcnQgYW5kIGVuZCB3aXRob3V0IHNsYXNoZXMgKGV4Y2VwdGlvbnMgZm9yIHRoZSBmaXJzdCBhbmQgbGFzdCkuXG4gIHJldHVybiByZXN1bHRQYXJ0cy5qb2luKCcvJyk7XG59O1xuIl19