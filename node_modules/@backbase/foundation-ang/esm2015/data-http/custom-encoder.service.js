import { HttpParams } from '@angular/common/http';
import { InjectionToken } from '@angular/core';
export const normalizeHttpParameter = (accum, [key, value]) => {
    if (value === undefined) {
        return accum;
    }
    if (typeof value === 'number') {
        return Object.assign(Object.assign({}, accum), { [key]: String(value) });
    }
    return Object.assign(Object.assign({}, accum), { [key]: value });
};
export const EXTRA_ENCODE_URI_PARAMS = {
    name: 'EXTRA_ENCODE_URI_PARAMS',
    description: 'Correctly encode certain symbols in data module http params (eg encode "+" to "%2B) to fix a known angular bug (#18261)',
};
/**
 * Filter undefined params, and convert numbers to strings.
 */
export const normalizeHttpParameters = (params) => Object.entries(params).reduce(normalizeHttpParameter, {});
export class CustomEncoder {
    encodeKey(key) {
        return encodeURIComponent(key);
    }
    encodeValue(value) {
        return encodeURIComponent(value);
    }
    decodeKey(key) {
        return decodeURIComponent(key);
    }
    decodeValue(value) {
        return decodeURIComponent(value);
    }
}
/**
 * Injection token for the `HttpParamsFactory` utility function.
 *
 * @usageNotes
 *
 * ### Example
 *
 * ```
 * export class MyDataService {
 *   constructor(private readonly http: HttpClient,
 *   @Inject(HTTP_PARAMS_FACTORY)
 *   private readonly toHttpParams: HttpParamsFactory,
 *   ){}
 *
 *   makeRequest(params: HttpParameters): Observable<HttpResponse<any>> {
 *     return this.http.request('get', '/api', {
 *       params: this.toHttpParams(params),
 *     });
 *   }
 * }
 * ```
 */
export const HTTP_PARAMS_FACTORY = new InjectionToken('Http Param Factory');
export const httpParamsFactoryFactory = (featuresService) => {
    // We can't type options correctly, because angular is not exporting HttpParamsOptions
    // https://github.com/angular/angular/issues/20276
    const httpParamsOptions = featuresService.isEnabled(EXTRA_ENCODE_URI_PARAMS) ? { encoder: new CustomEncoder() } : {};
    return (fromObject) => new HttpParams(Object.assign(Object.assign({}, httpParamsOptions), { fromObject: normalizeHttpParameters(fromObject) }));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWVuY29kZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2RhdGEtaHR0cC9zcmMvY3VzdG9tLWVuY29kZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXNCLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUEyQi9DLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQ3BDLEtBQStCLEVBQy9CLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBd0QsRUFDbkUsRUFBRTtJQUNGLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtRQUN2QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsdUNBQVksS0FBSyxLQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFHO0tBQzNDO0lBQ0QsdUNBQVksS0FBSyxLQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFHO0FBQ3BDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFxQjtJQUN2RCxJQUFJLEVBQUUseUJBQXlCO0lBQy9CLFdBQVcsRUFDVCx5SEFBeUg7Q0FDNUgsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxNQUE0QixFQUE0QixFQUFFLENBQ2hHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRTVELE1BQU0sT0FBTyxhQUFhO0lBQ3hCLFNBQVMsQ0FBQyxHQUFXO1FBQ25CLE9BQU8sa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFXO1FBQ25CLE9BQU8sa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLE9BQU8sa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUNGO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQUNILE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFvQixvQkFBb0IsQ0FBQyxDQUFDO0FBRS9GLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQUMsZUFBZ0MsRUFBRSxFQUFFO0lBQzNFLHNGQUFzRjtJQUN0RixrREFBa0Q7SUFDbEQsTUFBTSxpQkFBaUIsR0FBRyxlQUFlLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JILE9BQU8sQ0FBQyxVQUFnQyxFQUFjLEVBQUUsQ0FDdEQsSUFBSSxVQUFVLGlDQUFNLGlCQUFpQixLQUFFLFVBQVUsRUFBRSx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsSUFBRyxDQUFDO0FBQzlGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBQYXJhbWV0ZXJDb2RlYywgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdmFpbGFibGVGZWF0dXJlLCBGZWF0dXJlc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZnV0dXJlJztcblxuLyoqXG4gKiBPYmplY3QgdXNlZCB0byBob2xkIEh0dHAgUGFyYW1ldGVyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBQYXJhbWV0ZXJzT2JqZWN0IHtcbiAgLyoqXG4gICAqIEVhY2gga2V5IGlzIHRoZSBuYW1lIG9mIHRoZSBodHRwIHBhcmFtLiBFYWNoIHZhbHVlIGlzIHRoZSBodHRwIHBhcmFtIHZhbHVlLlxuICAgKi9cbiAgW2s6IHN0cmluZ106IHN0cmluZyB8IEFycmF5PHN0cmluZz4gfCB1bmRlZmluZWQgfCBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm9ybWFsaXplZEh0dHBQYXJhbWV0ZXJzIHtcbiAgW2s6IHN0cmluZ106IHN0cmluZyB8IEFycmF5PHN0cmluZz47XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgbWFwIG9mIGBIdHRwUGFyYW1ldGVyc09iamVjdGAgYW5kIHJldHVybiBhIHZhbGlkIGBIdHRwUGFyYW1gLlxuICpcbiAqIFRoaXMgZG9lcyAzIHRoaW5nczpcbiAqICAtIEZpbHRlciBvdXQgYHVuZGVmaW5lZGAgdmFsdWVzLlxuICogIC0gQ29udmVydCBhbGwgYG51bWJlcmAgdmFsdWVzIGludG8gYHN0cmluZ3NgLlxuICogIC0gRW5jb2RlIHZhbHVlcyB1c2luZyBhIGN1c3RvbSBlbmNvZGVyIChmaXhlcyB0aGlzIFtrbm93biBidWddKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvaXNzdWVzLzE4MjYxKSkuXG4gKi9cbmV4cG9ydCB0eXBlIEh0dHBQYXJhbXNGYWN0b3J5ID0gKHBhcmFtczogSHR0cFBhcmFtZXRlcnNPYmplY3QpID0+IEh0dHBQYXJhbXM7XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVIdHRwUGFyYW1ldGVyID0gKFxuICBhY2N1bTogTm9ybWFsaXplZEh0dHBQYXJhbWV0ZXJzLFxuICBba2V5LCB2YWx1ZV06IFtzdHJpbmcsIHN0cmluZyB8IEFycmF5PHN0cmluZz4gfCB1bmRlZmluZWQgfCBudW1iZXJdLFxuKSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFjY3VtO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHsgLi4uYWNjdW0sIFtrZXldOiBTdHJpbmcodmFsdWUpIH07XG4gIH1cbiAgcmV0dXJuIHsgLi4uYWNjdW0sIFtrZXldOiB2YWx1ZSB9O1xufTtcblxuZXhwb3J0IGNvbnN0IEVYVFJBX0VOQ09ERV9VUklfUEFSQU1TOiBBdmFpbGFibGVGZWF0dXJlID0ge1xuICBuYW1lOiAnRVhUUkFfRU5DT0RFX1VSSV9QQVJBTVMnLFxuICBkZXNjcmlwdGlvbjpcbiAgICAnQ29ycmVjdGx5IGVuY29kZSBjZXJ0YWluIHN5bWJvbHMgaW4gZGF0YSBtb2R1bGUgaHR0cCBwYXJhbXMgKGVnIGVuY29kZSBcIitcIiB0byBcIiUyQikgdG8gZml4IGEga25vd24gYW5ndWxhciBidWcgKCMxODI2MSknLFxufTtcblxuLyoqXG4gKiBGaWx0ZXIgdW5kZWZpbmVkIHBhcmFtcywgYW5kIGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdzLlxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplSHR0cFBhcmFtZXRlcnMgPSAocGFyYW1zOiBIdHRwUGFyYW1ldGVyc09iamVjdCk6IE5vcm1hbGl6ZWRIdHRwUGFyYW1ldGVycyA9PlxuICBPYmplY3QuZW50cmllcyhwYXJhbXMpLnJlZHVjZShub3JtYWxpemVIdHRwUGFyYW1ldGVyLCB7fSk7XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21FbmNvZGVyIGltcGxlbWVudHMgSHR0cFBhcmFtZXRlckNvZGVjIHtcbiAgZW5jb2RlS2V5KGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gIH1cblxuICBlbmNvZGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfVxuXG4gIGRlY29kZUtleShrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuICB9XG5cbiAgZGVjb2RlVmFsdWUodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmplY3Rpb24gdG9rZW4gZm9yIHRoZSBgSHR0cFBhcmFtc0ZhY3RvcnlgIHV0aWxpdHkgZnVuY3Rpb24uXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYFxuICogZXhwb3J0IGNsYXNzIE15RGF0YVNlcnZpY2Uge1xuICogICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGh0dHA6IEh0dHBDbGllbnQsXG4gKiAgIEBJbmplY3QoSFRUUF9QQVJBTVNfRkFDVE9SWSlcbiAqICAgcHJpdmF0ZSByZWFkb25seSB0b0h0dHBQYXJhbXM6IEh0dHBQYXJhbXNGYWN0b3J5LFxuICogICApe31cbiAqXG4gKiAgIG1ha2VSZXF1ZXN0KHBhcmFtczogSHR0cFBhcmFtZXRlcnMpOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxhbnk+PiB7XG4gKiAgICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KCdnZXQnLCAnL2FwaScsIHtcbiAqICAgICAgIHBhcmFtczogdGhpcy50b0h0dHBQYXJhbXMocGFyYW1zKSxcbiAqICAgICB9KTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBIVFRQX1BBUkFNU19GQUNUT1JZID0gbmV3IEluamVjdGlvblRva2VuPEh0dHBQYXJhbXNGYWN0b3J5PignSHR0cCBQYXJhbSBGYWN0b3J5Jyk7XG5cbmV4cG9ydCBjb25zdCBodHRwUGFyYW1zRmFjdG9yeUZhY3RvcnkgPSAoZmVhdHVyZXNTZXJ2aWNlOiBGZWF0dXJlc1NlcnZpY2UpID0+IHtcbiAgLy8gV2UgY2FuJ3QgdHlwZSBvcHRpb25zIGNvcnJlY3RseSwgYmVjYXVzZSBhbmd1bGFyIGlzIG5vdCBleHBvcnRpbmcgSHR0cFBhcmFtc09wdGlvbnNcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMjAyNzZcbiAgY29uc3QgaHR0cFBhcmFtc09wdGlvbnMgPSBmZWF0dXJlc1NlcnZpY2UuaXNFbmFibGVkKEVYVFJBX0VOQ09ERV9VUklfUEFSQU1TKSA/IHsgZW5jb2RlcjogbmV3IEN1c3RvbUVuY29kZXIoKSB9IDoge307XG4gIHJldHVybiAoZnJvbU9iamVjdDogSHR0cFBhcmFtZXRlcnNPYmplY3QpOiBIdHRwUGFyYW1zID0+XG4gICAgbmV3IEh0dHBQYXJhbXMoeyAuLi5odHRwUGFyYW1zT3B0aW9ucywgZnJvbU9iamVjdDogbm9ybWFsaXplSHR0cFBhcmFtZXRlcnMoZnJvbU9iamVjdCkgfSk7XG59O1xuIl19