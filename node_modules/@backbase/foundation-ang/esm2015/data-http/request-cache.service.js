import { Injectable } from '@angular/core';
const second = 1000;
export class RequestCacheService {
    constructor() {
        this.ttl = 1 * second;
        this.results = new Map();
    }
    get(req) {
        this.garbageCollect();
        const cached = this.results.get(this.key(req));
        if (cached === undefined) {
            return undefined;
        }
        return cached.value;
    }
    set(request, response) {
        this.results.set(this.key(request), this.value(response));
    }
    key(request) {
        return JSON.stringify({
            url: request.urlWithParams,
        });
    }
    value(response) {
        return {
            expireAt: this.expiryTime(),
            value: response,
        };
    }
    expiryTime() {
        return Date.now() + this.ttl;
    }
    isExpired(value) {
        return Date.now() > value.expireAt;
    }
    garbageCollect() {
        this.results.forEach((value, key) => {
            if (this.isExpired(value)) {
                this.results.delete(key);
            }
        });
    }
}
RequestCacheService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1jYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZGF0YS1odHRwL3NyYy9yZXF1ZXN0LWNhY2hlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVczQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFHcEIsTUFBTSxPQUFPLG1CQUFtQjtJQURoQztRQUVtQixRQUFHLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNqQixZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQTJDLENBQUM7SUE2Q2hGLENBQUM7SUEzQ0MsR0FBRyxDQUFDLEdBQXFCO1FBQ3ZCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV0QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0MsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3hCLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxHQUFHLENBQUMsT0FBeUIsRUFBRSxRQUFvQztRQUNqRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU8sR0FBRyxDQUFDLE9BQXlCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNwQixHQUFHLEVBQUUsT0FBTyxDQUFDLGFBQWE7U0FDM0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLEtBQUssQ0FBSSxRQUFrQztRQUNqRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDM0IsS0FBSyxFQUFFLFFBQVE7U0FDaEIsQ0FBQztJQUNKLENBQUM7SUFFTyxVQUFVO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDL0IsQ0FBQztJQUVPLFNBQVMsQ0FBQyxLQUE2QjtRQUM3QyxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQ3JDLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQS9DRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gSmF2YVNjcmlwdCBlcXVhbGl0eSBzdWNrcy4uIFdlIGhhdmUgdG8gdXNlIHN0cmluZ3MgZm9yIGtleXMuXG50eXBlIFJlcXVlc3RDYWNoZUtleSA9IHN0cmluZztcblxuaW50ZXJmYWNlIFJlcXVlc3RDYWNoZVZhbHVlPFQ+IHtcbiAgZXhwaXJlQXQ6IG51bWJlcjtcbiAgdmFsdWU6IE9ic2VydmFibGU8SHR0cEV2ZW50PFQ+Pjtcbn1cblxuY29uc3Qgc2Vjb25kID0gMTAwMDtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcXVlc3RDYWNoZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHR0bCA9IDEgKiBzZWNvbmQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVzdWx0cyA9IG5ldyBNYXA8UmVxdWVzdENhY2hlS2V5LCBSZXF1ZXN0Q2FjaGVWYWx1ZTxhbnk+PigpO1xuXG4gIGdldChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB8IHVuZGVmaW5lZCB7XG4gICAgdGhpcy5nYXJiYWdlQ29sbGVjdCgpO1xuXG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5yZXN1bHRzLmdldCh0aGlzLmtleShyZXEpKTtcbiAgICBpZiAoY2FjaGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlZC52YWx1ZTtcbiAgfVxuXG4gIHNldChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCByZXNwb25zZTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4pOiB2b2lkIHtcbiAgICB0aGlzLnJlc3VsdHMuc2V0KHRoaXMua2V5KHJlcXVlc3QpLCB0aGlzLnZhbHVlKHJlc3BvbnNlKSk7XG4gIH1cblxuICBwcml2YXRlIGtleShyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogUmVxdWVzdENhY2hlS2V5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdXJsOiByZXF1ZXN0LnVybFdpdGhQYXJhbXMsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHZhbHVlPFQ+KHJlc3BvbnNlOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj4pOiBSZXF1ZXN0Q2FjaGVWYWx1ZTxUPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cGlyZUF0OiB0aGlzLmV4cGlyeVRpbWUoKSxcbiAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBleHBpcnlUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIERhdGUubm93KCkgKyB0aGlzLnR0bDtcbiAgfVxuXG4gIHByaXZhdGUgaXNFeHBpcmVkKHZhbHVlOiBSZXF1ZXN0Q2FjaGVWYWx1ZTxhbnk+KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIERhdGUubm93KCkgPiB2YWx1ZS5leHBpcmVBdDtcbiAgfVxuXG4gIHByaXZhdGUgZ2FyYmFnZUNvbGxlY3QoKSB7XG4gICAgdGhpcy5yZXN1bHRzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzRXhwaXJlZCh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5yZXN1bHRzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=