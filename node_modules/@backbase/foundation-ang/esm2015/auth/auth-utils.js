export const UNKNOWN_SCHEME = 'unknown';
/**
 * See https://datatracker.ietf.org/doc/html/rfc6750#section-3
 * See https://www.rfc-editor.org/rfc/rfc7235.html#section-4.1
 * See https://www.w3.org/Protocols/rfc2616/rfc2616-sec2.html
 * See https://datatracker.ietf.org/doc/html/rfc2617#section-3.2.1
 */
export function getWwwAuthenticate(headers) {
    let currentScheme = UNKNOWN_SCHEME;
    const schemes = { [currentScheme]: {} };
    const headerName = headers.keys().find(key => key.toLowerCase() === 'www-authenticate');
    if (!headerName) {
        return schemes;
    }
    const value = headers.get(headerName).toLowerCase().trim();
    if (!value) {
        return schemes;
    }
    const matches = value.match(/(?:[^\s,"]+|"[^"]*")+/g);
    if (!matches) {
        schemes[currentScheme] = value;
        return schemes;
    }
    return matches.reduce((acc, match) => {
        const nameVal = match.split('=').map(v => v.trim());
        if (nameVal.length === 1) {
            currentScheme = nameVal[0];
            acc[currentScheme] = {};
        }
        else if (nameVal.length === 2) {
            acc[currentScheme][nameVal[0]] = nameVal[1].replace(/"/g, '');
        }
        return acc;
    }, schemes);
}
/**
 * The 401 (Unauthorized) status code indicates that the request has not
 * been applied because it lacks valid authentication credentials for
 * the target resource.  The server generating a 401 response MUST send
 * a WWW-Authenticate header field (Section 4.1) containing at least one
 * challenge applicable to the target resource.
 */
export function is401AndNotReauth(error) {
    if (error.status !== 401) {
        return false;
    }
    const bearer = getWwwAuthenticate(error.headers).bearer;
    if (!bearer) {
        return false;
    }
    if (bearer.challenge_types && bearer.challenge_types !== 'reauth') {
        return false;
    }
    return bearer.error === 'invalid_token';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2F1dGgvc3JjL2F1dGgtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQztBQUV4Qzs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxPQUFvQjtJQUNyRCxJQUFJLGFBQWEsR0FBRyxjQUFjLENBQUM7SUFDbkMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ3hDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEtBQUssa0JBQWtCLENBQUMsQ0FBQztJQUN4RixJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2YsT0FBTyxPQUFPLENBQUM7S0FDaEI7SUFDRCxNQUFNLEtBQUssR0FBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZFLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUNELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMvQixPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUNELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQXFDLEVBQUUsS0FBYSxFQUFFLEVBQUU7UUFDN0UsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNwRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUN6QjthQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDL0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQy9EO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDZCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEtBQXdCO0lBQ3hELElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7UUFDeEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDeEQsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxJQUFJLE1BQU0sQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDLGVBQWUsS0FBSyxRQUFRLEVBQUU7UUFDakUsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxlQUFlLENBQUM7QUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlLCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuZXhwb3J0IGludGVyZmFjZSBTY2hlbWUge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59XG5leHBvcnQgY29uc3QgVU5LTk9XTl9TQ0hFTUUgPSAndW5rbm93bic7XG5cbi8qKlxuICogU2VlIGh0dHBzOi8vZGF0YXRyYWNrZXIuaWV0Zi5vcmcvZG9jL2h0bWwvcmZjNjc1MCNzZWN0aW9uLTNcbiAqIFNlZSBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjNzIzNS5odG1sI3NlY3Rpb24tNC4xXG4gKiBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMi5odG1sXG4gKiBTZWUgaHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvaHRtbC9yZmMyNjE3I3NlY3Rpb24tMy4yLjFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFd3d0F1dGhlbnRpY2F0ZShoZWFkZXJzOiBIdHRwSGVhZGVycyk6IHsgW3NjaGVtZU5hbWU6IHN0cmluZ106IFNjaGVtZSB9IHtcbiAgbGV0IGN1cnJlbnRTY2hlbWUgPSBVTktOT1dOX1NDSEVNRTtcbiAgY29uc3Qgc2NoZW1lcyA9IHsgW2N1cnJlbnRTY2hlbWVdOiB7fSB9O1xuICBjb25zdCBoZWFkZXJOYW1lID0gaGVhZGVycy5rZXlzKCkuZmluZChrZXkgPT4ga2V5LnRvTG93ZXJDYXNlKCkgPT09ICd3d3ctYXV0aGVudGljYXRlJyk7XG4gIGlmICghaGVhZGVyTmFtZSkge1xuICAgIHJldHVybiBzY2hlbWVzO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gKGhlYWRlcnMuZ2V0KGhlYWRlck5hbWUpIGFzIHN0cmluZykudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc2NoZW1lcztcbiAgfVxuICBjb25zdCBtYXRjaGVzID0gdmFsdWUubWF0Y2goLyg/OlteXFxzLFwiXSt8XCJbXlwiXSpcIikrL2cpO1xuICBpZiAoIW1hdGNoZXMpIHtcbiAgICBzY2hlbWVzW2N1cnJlbnRTY2hlbWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIHNjaGVtZXM7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXMucmVkdWNlKChhY2M6IHsgW3NjaGVtZU5hbWU6IHN0cmluZ106IFNjaGVtZSB9LCBtYXRjaDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbmFtZVZhbCA9IG1hdGNoLnNwbGl0KCc9JykubWFwKHYgPT4gdi50cmltKCkpO1xuICAgIGlmIChuYW1lVmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY3VycmVudFNjaGVtZSA9IG5hbWVWYWxbMF07XG4gICAgICBhY2NbY3VycmVudFNjaGVtZV0gPSB7fTtcbiAgICB9IGVsc2UgaWYgKG5hbWVWYWwubGVuZ3RoID09PSAyKSB7XG4gICAgICBhY2NbY3VycmVudFNjaGVtZV1bbmFtZVZhbFswXV0gPSBuYW1lVmFsWzFdLnJlcGxhY2UoL1wiL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgc2NoZW1lcyk7XG59XG5cbi8qKlxuICogVGhlIDQwMSAoVW5hdXRob3JpemVkKSBzdGF0dXMgY29kZSBpbmRpY2F0ZXMgdGhhdCB0aGUgcmVxdWVzdCBoYXMgbm90XG4gKiBiZWVuIGFwcGxpZWQgYmVjYXVzZSBpdCBsYWNrcyB2YWxpZCBhdXRoZW50aWNhdGlvbiBjcmVkZW50aWFscyBmb3JcbiAqIHRoZSB0YXJnZXQgcmVzb3VyY2UuICBUaGUgc2VydmVyIGdlbmVyYXRpbmcgYSA0MDEgcmVzcG9uc2UgTVVTVCBzZW5kXG4gKiBhIFdXVy1BdXRoZW50aWNhdGUgaGVhZGVyIGZpZWxkIChTZWN0aW9uIDQuMSkgY29udGFpbmluZyBhdCBsZWFzdCBvbmVcbiAqIGNoYWxsZW5nZSBhcHBsaWNhYmxlIHRvIHRoZSB0YXJnZXQgcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpczQwMUFuZE5vdFJlYXV0aChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgaWYgKGVycm9yLnN0YXR1cyAhPT0gNDAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGJlYXJlciA9IGdldFd3d0F1dGhlbnRpY2F0ZShlcnJvci5oZWFkZXJzKS5iZWFyZXI7XG4gIGlmICghYmVhcmVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChiZWFyZXIuY2hhbGxlbmdlX3R5cGVzICYmIGJlYXJlci5jaGFsbGVuZ2VfdHlwZXMgIT09ICdyZWF1dGgnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBiZWFyZXIuZXJyb3IgPT09ICdpbnZhbGlkX3Rva2VuJztcbn1cbiJdfQ==