import { from } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
export function createAutoRefresh(authService, httpClient) {
    let refresh$;
    let refreshFailed = false;
    function refreshAndRepeat(req) {
        if (!refresh$) {
            refresh$ = from(authService.refresh()).pipe(tap(
            // after successful refresh remove reference as access token can expire again in the future
            () => (refresh$ = undefined), 
            // flag refresh failure so we will not try auto refresh again
            () => (refreshFailed = true)));
        }
        return refresh$.pipe(switchMap(() => {
            // repeat request (presume that access token is updated after refresh)
            return httpClient.request(req.clone());
        }));
    }
    return {
        failed: refreshFailed,
        refreshAndRepeat,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1yZWZyZXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvYXV0aC9zcmMvYXV0by1yZWZyZXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHeEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU9oRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsV0FBd0IsRUFBRSxVQUFzQjtJQUNoRixJQUFJLFFBQXNDLENBQUM7SUFDM0MsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBRTFCLFNBQVMsZ0JBQWdCLENBQUMsR0FBeUI7UUFDakQsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUN6QyxHQUFHO1lBQ0QsMkZBQTJGO1lBQzNGLEdBQUcsRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztZQUM1Qiw2REFBNkQ7WUFDN0QsR0FBRyxFQUFFLENBQUMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLENBQzdCLENBQ0YsQ0FBQztTQUNIO1FBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUNsQixTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2Isc0VBQXNFO1lBQ3RFLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxNQUFNLEVBQUUsYUFBYTtRQUNyQixnQkFBZ0I7S0FDakIsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXZlbnQsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQXV0aFNlcnZpY2UgfSBmcm9tICcuL2RlcHJlY2F0ZWQvYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IHRhcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9SZWZyZXNoU2VydmljZSB7XG4gIGZhaWxlZDogYm9vbGVhbjtcbiAgcmVmcmVzaEFuZFJlcGVhdDogKHJlcTogSHR0cFJlcXVlc3Q8dW5rbm93bj4pID0+IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXV0b1JlZnJlc2goYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLCBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7XG4gIGxldCByZWZyZXNoJDogT2JzZXJ2YWJsZTx2b2lkPiB8IHVuZGVmaW5lZDtcbiAgbGV0IHJlZnJlc2hGYWlsZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiByZWZyZXNoQW5kUmVwZWF0KHJlcTogSHR0cFJlcXVlc3Q8dW5rbm93bj4pOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKCFyZWZyZXNoJCkge1xuICAgICAgcmVmcmVzaCQgPSBmcm9tKGF1dGhTZXJ2aWNlLnJlZnJlc2goKSkucGlwZShcbiAgICAgICAgdGFwKFxuICAgICAgICAgIC8vIGFmdGVyIHN1Y2Nlc3NmdWwgcmVmcmVzaCByZW1vdmUgcmVmZXJlbmNlIGFzIGFjY2VzcyB0b2tlbiBjYW4gZXhwaXJlIGFnYWluIGluIHRoZSBmdXR1cmVcbiAgICAgICAgICAoKSA9PiAocmVmcmVzaCQgPSB1bmRlZmluZWQpLFxuICAgICAgICAgIC8vIGZsYWcgcmVmcmVzaCBmYWlsdXJlIHNvIHdlIHdpbGwgbm90IHRyeSBhdXRvIHJlZnJlc2ggYWdhaW5cbiAgICAgICAgICAoKSA9PiAocmVmcmVzaEZhaWxlZCA9IHRydWUpLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZnJlc2gkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xuICAgICAgICAvLyByZXBlYXQgcmVxdWVzdCAocHJlc3VtZSB0aGF0IGFjY2VzcyB0b2tlbiBpcyB1cGRhdGVkIGFmdGVyIHJlZnJlc2gpXG4gICAgICAgIHJldHVybiBodHRwQ2xpZW50LnJlcXVlc3QocmVxLmNsb25lKCkpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmFpbGVkOiByZWZyZXNoRmFpbGVkLFxuICAgIHJlZnJlc2hBbmRSZXBlYXQsXG4gIH07XG59XG4iXX0=