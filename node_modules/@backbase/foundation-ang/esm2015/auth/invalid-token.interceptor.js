import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { HttpClient, } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AuthService } from './deprecated/auth.service';
import { createAutoRefresh } from './auto-refresh';
import { is401AndNotReauth } from './auth-utils';
import { DOCUMENT } from '@angular/common';
export const INVALID_TOKEN_CONFIG = new InjectionToken('invalid-token-config');
export class InvalidTokenInterceptor {
    constructor(authService, httpClient, injectedConfig, document) {
        this.authService = authService;
        this.httpClient = httpClient;
        this.injectedConfig = injectedConfig;
        this.document = document;
        this.config = {
            enableAutoRefresh: false,
            redirectToLoginPage: true,
        };
        this.autoRefresh = createAutoRefresh(this.authService, this.httpClient);
        this.config = Object.assign(Object.assign({}, this.config), (this.injectedConfig || {}));
    }
    checkRedirect() {
        if (this.config.redirectToLoginPage) {
            this.authService.logout({ redirectUri: this.document.location.href });
        }
    }
    tryRefresh(req, err) {
        return this.autoRefresh.refreshAndRepeat(req).pipe(catchError(() => {
            this.checkRedirect();
            return throwError(err);
        }));
    }
    intercept(req, next) {
        return next.handle(req).pipe(catchError((err) => {
            if (is401AndNotReauth(err)) {
                if (this.config.enableAutoRefresh && !this.autoRefresh.failed) {
                    return this.tryRefresh(req, err);
                }
                this.checkRedirect();
            }
            return throwError(err);
        }));
    }
}
InvalidTokenInterceptor.decorators = [
    { type: Injectable }
];
InvalidTokenInterceptor.ctorParameters = () => [
    { type: AuthService },
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INVALID_TOKEN_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52YWxpZC10b2tlbi5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2F1dGgvc3JjL2ludmFsaWQtdG9rZW4uaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBS0wsVUFBVSxHQUVYLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXhELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFVM0MsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQXFCLHNCQUFzQixDQUFDLENBQUM7QUFHbkcsTUFBTSxPQUFPLHVCQUF1QjtJQU9sQyxZQUNVLFdBQXdCLEVBQ3hCLFVBQXNCLEVBQ29CLGNBQWtDLEVBQzFELFFBQWE7UUFIL0IsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNvQixtQkFBYyxHQUFkLGNBQWMsQ0FBb0I7UUFDMUQsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQVZqQyxXQUFNLEdBQWlDO1lBQzdDLGlCQUFpQixFQUFFLEtBQUs7WUFDeEIsbUJBQW1CLEVBQUUsSUFBSTtTQUMxQixDQUFDO1FBQ00sZ0JBQVcsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQVF6RSxJQUFJLENBQUMsTUFBTSxtQ0FDTixJQUFJLENBQUMsTUFBTSxHQUNYLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFTyxhQUFhO1FBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtZQUNuQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0gsQ0FBQztJQUVPLFVBQVUsQ0FBQyxHQUF5QixFQUFFLEdBQXNCO1FBQ2xFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ2hELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBeUIsRUFBRSxJQUFpQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixVQUFVLENBQUMsQ0FBQyxHQUFzQixFQUFFLEVBQUU7WUFDcEMsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7b0JBQzdELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQ2xDO2dCQUNELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN0QjtZQUNELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUEvQ0YsVUFBVTs7O1lBaEJGLFdBQVc7WUFObEIsVUFBVTs0Q0FpQ1AsUUFBUSxZQUFJLE1BQU0sU0FBQyxvQkFBb0I7NENBQ3ZDLE1BQU0sU0FBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBFdmVudCxcbiAgSHR0cEludGVyY2VwdG9yLFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBDbGllbnQsXG4gIEh0dHBFcnJvclJlc3BvbnNlLFxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4vZGVwcmVjYXRlZC9hdXRoLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBjcmVhdGVBdXRvUmVmcmVzaCB9IGZyb20gJy4vYXV0by1yZWZyZXNoJztcbmltcG9ydCB7IGlzNDAxQW5kTm90UmVhdXRoIH0gZnJvbSAnLi9hdXRoLXV0aWxzJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLy8gaW52YWxpZCB0b2tlbiBpbnRlcmNlcHRvciBjb25maWd1cmF0aW9uXG5leHBvcnQgaW50ZXJmYWNlIEludmFsaWRUb2tlbkNvbmZpZyB7XG4gIC8vIGlmIHRydWUsIHJlc3BvbnNlcyB3aXRoIDQwMSBzdGF0dXMgd2lsbCBiZSByZXBlYXRlZCBhZnRlciBzZXNzaW9uIHJlZnJlc2hcbiAgZW5hYmxlQXV0b1JlZnJlc2g/OiBib29sZWFuO1xuICAvLyByZWRpcmVjdFxuICByZWRpcmVjdFRvTG9naW5QYWdlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IElOVkFMSURfVE9LRU5fQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPEludmFsaWRUb2tlbkNvbmZpZz4oJ2ludmFsaWQtdG9rZW4tY29uZmlnJyk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbnZhbGlkVG9rZW5JbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgY29uZmlnOiBSZXF1aXJlZDxJbnZhbGlkVG9rZW5Db25maWc+ID0ge1xuICAgIGVuYWJsZUF1dG9SZWZyZXNoOiBmYWxzZSxcbiAgICByZWRpcmVjdFRvTG9naW5QYWdlOiB0cnVlLFxuICB9O1xuICBwcml2YXRlIGF1dG9SZWZyZXNoID0gY3JlYXRlQXV0b1JlZnJlc2godGhpcy5hdXRoU2VydmljZSwgdGhpcy5odHRwQ2xpZW50KTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoU2VydmljZSxcbiAgICBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChJTlZBTElEX1RPS0VOX0NPTkZJRykgcHJpdmF0ZSBpbmplY3RlZENvbmZpZzogSW52YWxpZFRva2VuQ29uZmlnLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSxcbiAgKSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIC4uLih0aGlzLmluamVjdGVkQ29uZmlnIHx8IHt9KSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1JlZGlyZWN0KCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy5yZWRpcmVjdFRvTG9naW5QYWdlKSB7XG4gICAgICB0aGlzLmF1dGhTZXJ2aWNlLmxvZ291dCh7IHJlZGlyZWN0VXJpOiB0aGlzLmRvY3VtZW50LmxvY2F0aW9uLmhyZWYgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0cnlSZWZyZXNoKHJlcTogSHR0cFJlcXVlc3Q8dW5rbm93bj4sIGVycjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICByZXR1cm4gdGhpcy5hdXRvUmVmcmVzaC5yZWZyZXNoQW5kUmVwZWF0KHJlcSkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKCkgPT4ge1xuICAgICAgICB0aGlzLmNoZWNrUmVkaXJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDx1bmtub3duPiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoKGVycjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKGlzNDAxQW5kTm90UmVhdXRoKGVycikpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlQXV0b1JlZnJlc2ggJiYgIXRoaXMuYXV0b1JlZnJlc2guZmFpbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cnlSZWZyZXNoKHJlcSwgZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jaGVja1JlZGlyZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==