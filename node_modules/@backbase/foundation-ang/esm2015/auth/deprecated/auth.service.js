import { forwardRef, Inject, Injectable, Optional } from '@angular/core';
import { LOGOUT, REAUTHENTICATE, SESSION, ɵAUTH_EVENTS, } from '@backbase/foundation-ang/web-sdk';
import { BehaviorSubject, merge } from 'rxjs';
import { distinctUntilChanged, filter, map, mapTo, pluck, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/web-sdk";
/**
 * @deprecated Will be removed in v7.0.0
 */
export class AuthService {
}
AuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthServiceImpl(i0.ɵɵinject(i1.LOGOUT, 8), i0.ɵɵinject(i1.REAUTHENTICATE, 8), i0.ɵɵinject(i1.SESSION, 8), i0.ɵɵinject(i1.ɵAUTH_EVENTS, 8)); }, token: AuthService, providedIn: "root" });
AuthService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                // eslint-disable-next-line  no-use-before-define, @typescript-eslint/no-use-before-define
                useClass: forwardRef(() => AuthServiceImpl), // Default implementation (allows mocking / replacing)
            },] }
];
export class AuthServiceImpl {
    constructor(logoutService, reauthenticateService, sessionService, authEvents) {
        this.accessTokenSubject = new BehaviorSubject(undefined);
        this.isLoadingSubject = new BehaviorSubject(true);
        /**
         * The current access token for the session, or `undefined` if there is no session.
         *
         * The first token will be emitted after the session is initialised. So if the user is logged
         * in already then the first emission will be an access token.
         *
         * This is a hot observable, so subscribing to it won't trigger anything.
         *
         * The latest value will be replayed to late subscribers.
         */
        this.accessToken = this.isLoadingSubject.pipe(filter(loading => !loading), distinctUntilChanged(), switchMap(() => this.accessTokenSubject));
        /**
         * Track whether the current user is authenticated.
         *
         * This is a hot observable, so subscribing to it won't trigger anything.
         *
         * The latest value will be replayed to late subscribers.
         */
        this.isAuthenticated = this.accessToken.pipe(map(token => !!token));
        if (!logoutService || !reauthenticateService || !sessionService || !authEvents) {
            throw new Error('In order to use the @backbase/foundation-ang/auth, please include *either* the ' +
                'WebSdkModule.forRoot(...) in your AppModule (for CDN deployment) or WebSdkApiModule ' +
                '(for CX deployment)');
        }
        this.logoutService = logoutService;
        this.reauthenticateService = reauthenticateService;
        this.sessionService = sessionService;
        this.authEvents = authEvents;
        this.handleAuthEvents();
    }
    /**
     * Redirect the user to the login page.
     *
     * @param loginOptions
     */
    login(loginOptions) {
        this.logoutService.goToLoginPage(loginOptions === null || loginOptions === void 0 ? void 0 : loginOptions.redirectUri);
    }
    /**
     * Log out the current user.
     *
     * @param logoutOptions
     */
    logout(logoutOptions) {
        return this.logoutService.logout(logoutOptions === null || logoutOptions === void 0 ? void 0 : logoutOptions.redirectUri);
    }
    /**
     * Register a set of callbacks that will be called as the user's session gets close to expiring.
     *
     * @param countdown
     */
    registerSessionCountdown(countdown) {
        this.sessionService.registerCountdown(countdown);
    }
    /**
     * Return the time to live (TTL) in seconds of the user's session.
     *
     * Returns -1 if the TTL can't be determined.
     */
    timeToLive() {
        return this.sessionService.timeToLive();
    }
    /**
     * Returns whether the user is being impersonated.
     * @returns true if the user is being impersonated.
     */
    isImpersonated() {
        return this.sessionService.isImpersonated;
    }
    /**
     * Reauthenticate the current user.
     *
     * This can be used when the backend responds with a 401 and the current user needs to
     * reauthenticate.
     *
     * @usageNotes
     *
     * You can use this service to create an interceptor which will automatically redirect the
     * user when the backend responds with a 401. Useful when the backend responds with a challenge
     * (eg: for step-up multifactor authentication):
     *
     * ```
     * import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';
     * import { from, Observable } from 'rxjs';
     * import { catchError, first, mapTo } from 'rxjs/operators';
     * import { AuthService } from '@backbase/foundation-ang/auth';
     *
     * export class ReauthenticateInterceptor implements HttpInterceptor {
     *   constructor(private readonly authService: AuthService) {}
     *   intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
     *     return next.handle(request).pipe(
     *       // When any HTTP request fails (you could check status & headers here to only catch some failures).
     *       catchError(error => {
     *         // Retreive the challenge from the server's response.
     *         const challenge: { scope: string; acrValues: string } = (error.error.challenges || []).find(
     *           c => c.scope !== undefined,
     *         );
     *         // Reauthenticate the user with the requested scope & acr values and redirect back to here.
     *         return from(
     *           this.authService.reauthenticate({
     *             scope: challenge.scope,
     *             acrValues: challenge.acrValues,
     *             redirect: true,
     *             redirectUri: location.href,
     *           }),
     *           // Retry the orignal request
     *         ).pipe(first(), mapTo(new HttpResponse({ body: error.error.data })));
     *       }),
     *     );
     *   }
     * }
     * ```
     *
     * @param reauthenticateOptions
     */
    reauthenticate(reauthenticateOptions) {
        return this.reauthenticateService.reauthenticate(reauthenticateOptions.scope, reauthenticateOptions.acrValues, reauthenticateOptions);
    }
    /**
     * Refreshes the session.
     */
    refresh() {
        return this.sessionService.refresh();
    }
    handleAuthEvents() {
        merge(this.authEvents.success.pipe(pluck('currentAccessToken')), this.authEvents.init.pipe(pluck('currentAccessToken')), this.authEvents.end.pipe(mapTo(undefined)), this.authEvents.error.pipe(mapTo(undefined)))
            .pipe(distinctUntilChanged((t1, t2) => (t1 === null || t1 === void 0 ? void 0 : t1.raw) === (t2 === null || t2 === void 0 ? void 0 : t2.raw)))
            .subscribe(token => {
            this.accessTokenSubject.next(token);
            this.isLoadingSubject.next(false);
        });
    }
}
AuthServiceImpl.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LOGOUT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [REAUTHENTICATE,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SESSION,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ɵAUTH_EVENTS,] }] }
];
//# sourceMappingURL=data:application/json;base64,