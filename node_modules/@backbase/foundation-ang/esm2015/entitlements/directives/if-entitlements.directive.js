import { ChangeDetectorRef, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { ConditionsService } from '../services/conditions.service';
/**
 * @description
 * A structural directive that conditionally includes a template based on the value of
 * an expression coerced to Boolean based on a entitlements triplets validation.
 * When the expression evaluates to true, Angular renders the template
 * Angular renders the template provided in an optional `else` clause. The default
 * template for the `else` clause is blank.
 *
 * @usageNotes
 *
 * ### Example
 * ```
 * <div *bbIfEntitlements="'ProductSummary.ProductSummary.edit'">Content to render when condition is true.</div>
 *
 * <div *bbIfEntitlements="'ProductSummary.ProductSummary.edit'; else alternative">Content to render when condition is true.</div>
 * <ng-template #alternative>
 *   <div>alternative content</div>
 * </ng-template>
 * ```
 */
export class IfEntitlementsDirective {
    constructor(conditions, templateRef, viewContainerRef, cd) {
        this.conditions = conditions;
        this.templateRef = templateRef;
        this.viewContainerRef = viewContainerRef;
        this.cd = cd;
    }
    /**
     * Entitlement to evaluate
     */
    set bbIfEntitlements(value) {
        const entitlements = value.trim();
        this.conditions.resolveEntitlements(entitlements).then(canAccess => {
            if (canAccess) {
                this.renderMainView();
            }
            else {
                this.renderAlternativeView();
            }
            this.cd.markForCheck();
        }, () => {
            console.error(`The element cannot be displayed because the identifier is invalid: "${value}"`);
            this.viewContainerRef.clear();
            this.cd.markForCheck();
        });
    }
    /**
     * Alternative template to show in the else clause
     */
    set bbIfEntitlementsElse(value) {
        this.elseTemplateRef = value;
    }
    renderMainView() {
        this.viewContainerRef.createEmbeddedView(this.templateRef);
    }
    renderAlternativeView() {
        this.viewContainerRef.clear();
        if (this.elseTemplateRef) {
            this.viewContainerRef.createEmbeddedView(this.elseTemplateRef);
        }
    }
}
IfEntitlementsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[bbIfEntitlements]',
            },] }
];
IfEntitlementsDirective.ctorParameters = () => [
    { type: ConditionsService },
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef }
];
IfEntitlementsDirective.propDecorators = {
    bbIfEntitlements: [{ type: Input }],
    bbIfEntitlementsElse: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtZW50aXRsZW1lbnRzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2VudGl0bGVtZW50cy9zcmMvZGlyZWN0aXZlcy9pZi1lbnRpdGxlbWVudHMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVuRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUlILE1BQU0sT0FBTyx1QkFBdUI7SUE4Q2xDLFlBQ1UsVUFBNkIsRUFDN0IsV0FBMkIsRUFDM0IsZ0JBQWtDLEVBQ2xDLEVBQXFCO1FBSHJCLGVBQVUsR0FBVixVQUFVLENBQW1CO1FBQzdCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUMzQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBQzVCLENBQUM7SUFoREo7O09BRUc7SUFDSCxJQUFhLGdCQUFnQixDQUFDLEtBQWE7UUFDekMsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWxDLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNwRCxTQUFTLENBQUMsRUFBRTtZQUNWLElBQUksU0FBUyxFQUFFO2dCQUNiLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN2QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQzthQUM5QjtZQUVELElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekIsQ0FBQyxFQUNELEdBQUcsRUFBRTtZQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMsdUVBQXVFLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDL0YsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekIsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFhLG9CQUFvQixDQUFDLEtBQXFCO1FBQ3JELElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVPLHFCQUFxQjtRQUMzQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDaEU7SUFDSCxDQUFDOzs7WUEvQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7YUFDL0I7OztZQXhCUSxpQkFBaUI7WUFEb0IsV0FBVztZQUFFLGdCQUFnQjtZQUFsRSxpQkFBaUI7OzsrQkFnQ3ZCLEtBQUs7bUNBd0JMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmRpdGlvbnNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29uZGl0aW9ucy5zZXJ2aWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc3RydWN0dXJhbCBkaXJlY3RpdmUgdGhhdCBjb25kaXRpb25hbGx5IGluY2x1ZGVzIGEgdGVtcGxhdGUgYmFzZWQgb24gdGhlIHZhbHVlIG9mXG4gKiBhbiBleHByZXNzaW9uIGNvZXJjZWQgdG8gQm9vbGVhbiBiYXNlZCBvbiBhIGVudGl0bGVtZW50cyB0cmlwbGV0cyB2YWxpZGF0aW9uLlxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZSwgQW5ndWxhciByZW5kZXJzIHRoZSB0ZW1wbGF0ZVxuICogQW5ndWxhciByZW5kZXJzIHRoZSB0ZW1wbGF0ZSBwcm92aWRlZCBpbiBhbiBvcHRpb25hbCBgZWxzZWAgY2xhdXNlLiBUaGUgZGVmYXVsdFxuICogdGVtcGxhdGUgZm9yIHRoZSBgZWxzZWAgY2xhdXNlIGlzIGJsYW5rLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqIGBgYFxuICogPGRpdiAqYmJJZkVudGl0bGVtZW50cz1cIidQcm9kdWN0U3VtbWFyeS5Qcm9kdWN0U3VtbWFyeS5lZGl0J1wiPkNvbnRlbnQgdG8gcmVuZGVyIHdoZW4gY29uZGl0aW9uIGlzIHRydWUuPC9kaXY+XG4gKlxuICogPGRpdiAqYmJJZkVudGl0bGVtZW50cz1cIidQcm9kdWN0U3VtbWFyeS5Qcm9kdWN0U3VtbWFyeS5lZGl0JzsgZWxzZSBhbHRlcm5hdGl2ZVwiPkNvbnRlbnQgdG8gcmVuZGVyIHdoZW4gY29uZGl0aW9uIGlzIHRydWUuPC9kaXY+XG4gKiA8bmctdGVtcGxhdGUgI2FsdGVybmF0aXZlPlxuICogICA8ZGl2PmFsdGVybmF0aXZlIGNvbnRlbnQ8L2Rpdj5cbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiSWZFbnRpdGxlbWVudHNdJyxcbn0pXG5leHBvcnQgY2xhc3MgSWZFbnRpdGxlbWVudHNEaXJlY3RpdmU8VCA9IHVua25vd24+IHtcbiAgcHJpdmF0ZSBlbHNlVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFQ+IHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBFbnRpdGxlbWVudCB0byBldmFsdWF0ZVxuICAgKi9cbiAgQElucHV0KCkgc2V0IGJiSWZFbnRpdGxlbWVudHModmFsdWU6IHN0cmluZykge1xuICAgIGNvbnN0IGVudGl0bGVtZW50cyA9IHZhbHVlLnRyaW0oKTtcblxuICAgIHRoaXMuY29uZGl0aW9ucy5yZXNvbHZlRW50aXRsZW1lbnRzKGVudGl0bGVtZW50cykudGhlbihcbiAgICAgIGNhbkFjY2VzcyA9PiB7XG4gICAgICAgIGlmIChjYW5BY2Nlc3MpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlck1haW5WaWV3KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJBbHRlcm5hdGl2ZVZpZXcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBUaGUgZWxlbWVudCBjYW5ub3QgYmUgZGlzcGxheWVkIGJlY2F1c2UgdGhlIGlkZW50aWZpZXIgaXMgaW52YWxpZDogXCIke3ZhbHVlfVwiYCk7XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuICAgICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsdGVybmF0aXZlIHRlbXBsYXRlIHRvIHNob3cgaW4gdGhlIGVsc2UgY2xhdXNlXG4gICAqL1xuICBASW5wdXQoKSBzZXQgYmJJZkVudGl0bGVtZW50c0Vsc2UodmFsdWU6IFRlbXBsYXRlUmVmPFQ+KSB7XG4gICAgdGhpcy5lbHNlVGVtcGxhdGVSZWYgPSB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyTWFpblZpZXcoKSB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyQWx0ZXJuYXRpdmVWaWV3KCkge1xuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5jbGVhcigpO1xuXG4gICAgaWYgKHRoaXMuZWxzZVRlbXBsYXRlUmVmKSB7XG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuZWxzZVRlbXBsYXRlUmVmKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbmRpdGlvbnM6IENvbmRpdGlvbnNTZXJ2aWNlLFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFQ+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7fVxufVxuIl19