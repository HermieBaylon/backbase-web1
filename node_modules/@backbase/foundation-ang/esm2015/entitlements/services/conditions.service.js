import { Injectable, Inject, Optional } from '@angular/core';
import { of, forkJoin } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { ENTITLEMENTS_CONFIG } from './providers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./providers";
var LogicalOperator;
(function (LogicalOperator) {
    LogicalOperator["AND"] = "AND";
    LogicalOperator["OR"] = "OR";
    LogicalOperator["NOT"] = "NOT";
})(LogicalOperator || (LogicalOperator = {}));
export const SUMMARY_PERMISSIONS_PATH = '/accessgroups/users/permissions/summary';
export const DATA_ITEMS_PERMISSIONS_PATH = '/accessgroups/users/data-item-permissions';
export class ConditionsService {
    constructor(http, config) {
        var _a, _b, _c;
        this.http = http;
        this.config = config;
        this.createConditions = (stringDef) => {
            const splitBySpaces = stringDef
                .trim()
                .split(' ')
                .filter((spaced) => spaced !== '');
            return this.separateLogicalOperators(['AND'].concat(splitBySpaces));
        };
        const basePath = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.accessControlBasePath) || '/access-control';
        const path = ((_b = this.config) === null || _b === void 0 ? void 0 : _b.accessControlPath) || `/client-api/v2${SUMMARY_PERMISSIONS_PATH}`;
        this.entitlements$ = this.http
            .get(`${basePath}${path}`)
            .pipe(map(EntitlementSummaryResponse => {
            if (EntitlementSummaryResponse.length && 'dataItem' in EntitlementSummaryResponse[0]) {
                return this.mapDataItemPermissions(EntitlementSummaryResponse);
            }
            else {
                return this.mapPermissionsSummary(EntitlementSummaryResponse);
            }
        }), shareReplay(1));
        this.forceResolved = ((_c = this.config) === null || _c === void 0 ? void 0 : _c.forceResolved) || false;
    }
    // map response of getUserPermissionsSummary to flat array of available entitlements
    mapPermissionsSummary(entitlementsData) {
        const entitlements = [];
        entitlementsData.forEach(entitlementData => {
            const availablePermissions = Object.entries(entitlementData.permissions).filter(([, value]) => value === true);
            availablePermissions.forEach(([privilege]) => {
                const entitlement = this.removeWhiteSpace({
                    resource: entitlementData.resource,
                    function: entitlementData.function,
                    privilege,
                });
                entitlements.push(entitlement);
            });
        });
        return entitlements;
    }
    // map response of getDataItemPermissionsContext to flat array of available entitlements
    // this endpoint can optionally be configured when needing data-item specific entitlements
    mapDataItemPermissions(entitlementsData) {
        const entitlements = [];
        entitlementsData.forEach(entitlementData => {
            entitlementData.permissions.forEach(permission => {
                permission.privileges.forEach(privilege => {
                    const entitlement = this.removeWhiteSpace({
                        dataItem: entitlementData.dataItem.id,
                        resource: permission.resource,
                        function: permission.businessFunction,
                        privilege,
                    });
                    entitlements.push(entitlement);
                });
            });
        });
        return entitlements;
    }
    resolveEntitlements(identifier) {
        if (this.forceResolved) {
            return Promise.resolve(true);
        }
        const conditions = this.createConditions(identifier);
        return this.resolveConditions(conditions).toPromise();
    }
    parseIdentifier(identifier) {
        const identifierArray = identifier.split('.').map((str) => str.trim());
        if (identifierArray.length < 3 || identifierArray.length > 4) {
            throw Error(`'${identifier}' is not valid entitlement identifier`);
        }
        if (identifierArray.length === 3) {
            return this.removeWhiteSpace({
                dataItem: undefined,
                resource: identifierArray[0],
                function: identifierArray[1],
                privilege: identifierArray[2],
            });
        }
        return this.removeWhiteSpace({
            dataItem: identifierArray[0],
            resource: identifierArray[1],
            function: identifierArray[2],
            privilege: identifierArray[3],
        });
    }
    resolveConditions(conditions) {
        if (conditions.length === 0) {
            return of(true);
        }
        const resolutions = conditions.map((condition) => this.resolveEntitlement(condition).pipe(map((value) => ({ value, logic: condition.logic }))));
        return forkJoin(resolutions).pipe(map(this.resolveResolutions));
    }
    resolveResolutions(resolutions) {
        return resolutions.reduce((final, resolution) => {
            if (resolution.logic === LogicalOperator.AND) {
                return final && resolution.value;
            }
            else if (resolution.logic === LogicalOperator.NOT) {
                return final && !resolution.value;
            }
            return final || resolution.value;
        }, true);
    }
    separateLogicalOperators(splitBySpaces) {
        const conditions = [];
        for (let i = 0; i < splitBySpaces.length; i += 2) {
            const logic = splitBySpaces[i];
            if (logic !== LogicalOperator.AND && logic !== LogicalOperator.OR) {
                throw Error(`'${logic}' is not valid logical operator`);
            }
            const identifier = splitBySpaces[i + 1];
            if (identifier.charAt(0) === '!') {
                conditions.push(Object.assign(Object.assign({}, this.parseIdentifier(identifier.substr(1))), { logic: LogicalOperator.NOT }));
            }
            else {
                conditions.push(Object.assign(Object.assign({}, this.parseIdentifier(identifier)), { logic }));
            }
        }
        return conditions;
    }
    removeWhiteSpace(item) {
        return Object.assign(Object.assign({}, item), { dataItem: item.dataItem ? item.dataItem.replace(/ /g, '') : undefined, resource: item.resource.replace(/ /g, ''), function: item.function.replace(/ /g, '') });
    }
    resolveEntitlement(entitlement) {
        return this.entitlements$.pipe(map(entitlements => entitlements.some(availableEntitlement => (entitlement.dataItem === undefined || availableEntitlement.dataItem === entitlement.dataItem) &&
            availableEntitlement.resource === entitlement.resource &&
            availableEntitlement.function === entitlement.function &&
            availableEntitlement.privilege === entitlement.privilege)));
    }
}
ConditionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConditionsService_Factory() { return new ConditionsService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ENTITLEMENTS_CONFIG, 8)); }, token: ConditionsService, providedIn: "root" });
ConditionsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ConditionsService.ctorParameters = () => [
    { type: HttpClient },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ENTITLEMENTS_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,