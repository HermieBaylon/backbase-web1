import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { Router, } from '@angular/router';
import { ConditionsService } from '../services/conditions.service';
import { Observable } from 'rxjs';
import { first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/conditions.service";
import * as i2 from "@angular/router";
export class EntitlementsGuard {
    constructor(conditions, router) {
        this.conditions = conditions;
        this.router = router;
        this.userHasEntitlements = (entitlements) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!entitlements || (yield this.conditions.resolveEntitlements(entitlements))) {
                    return true;
                }
            }
            catch (err) {
                console.error(err);
            }
            return false;
        });
    }
    resolveEntitlements(entitlements, redirectTo, route, state) {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.userHasEntitlements(entitlements)) {
                return true;
            }
            if (typeof redirectTo === 'function') {
                redirectTo = yield this.getRedirection(redirectTo, route, state);
            }
            if (redirectTo) {
                return this.router.parseUrl(redirectTo);
            }
            return false;
        });
    }
    getRedirection(getRedirectTo, route, state) {
        if (!route || !state) {
            return undefined;
        }
        const redirectTo = getRedirectTo(this.userHasEntitlements, route, state);
        if (redirectTo instanceof Observable) {
            return redirectTo.pipe(first()).toPromise();
        }
        return redirectTo;
    }
    canActivateChild(childRoute, state) {
        const { entitlements, redirectTo } = childRoute.data;
        return this.resolveEntitlements(entitlements, redirectTo, childRoute, state);
    }
    canLoad(route, segments) {
        var _a, _b;
        const entitlements = (_a = route.data) === null || _a === void 0 ? void 0 : _a.entitlements;
        const redirectTo = (_b = route.data) === null || _b === void 0 ? void 0 : _b.redirectTo;
        return this.resolveEntitlements(entitlements, redirectTo, route, segments);
    }
    canActivate(route, state) {
        const { entitlements, redirectTo } = route.data;
        return this.resolveEntitlements(entitlements, redirectTo, route, state);
    }
}
EntitlementsGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function EntitlementsGuard_Factory() { return new EntitlementsGuard(i0.ɵɵinject(i1.ConditionsService), i0.ɵɵinject(i2.Router)); }, token: EntitlementsGuard, providedIn: "root" });
EntitlementsGuard.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
EntitlementsGuard.ctorParameters = () => [
    { type: ConditionsService },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXRsZW1lbnRzLmd1YXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZW50aXRsZW1lbnRzL3NyYy9ndWFyZHMvZW50aXRsZW1lbnRzLmd1YXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFNTCxNQUFNLEdBSVAsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQVl2QyxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQStCLFVBQTZCLEVBQXFCLE1BQWM7UUFBaEUsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7UUFBcUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUU1RSx3QkFBbUIsR0FBRyxDQUFPLFlBQW9CLEVBQW9CLEVBQUU7WUFDeEYsSUFBSTtnQkFDRixJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUU7b0JBQzlFLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3BCO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUEsQ0FBQztJQVhnRyxDQUFDO0lBYW5GLG1CQUFtQixDQUNqQyxZQUFvQixFQUNwQixVQUF3QyxFQUN4QyxLQUFzQyxFQUN0QyxLQUEwQzs7WUFFMUMsSUFBSSxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDaEQsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUVELElBQUksT0FBTyxVQUFVLEtBQUssVUFBVSxFQUFFO2dCQUNwQyxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDbEU7WUFFRCxJQUFJLFVBQVUsRUFBRTtnQkFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3pDO1lBRUQsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQUE7SUFFTyxjQUFjLENBQ3BCLGFBQWlDLEVBQ2pDLEtBQXNDLEVBQ3RDLEtBQTBDO1FBRTFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDcEIsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6RSxJQUFJLFVBQVUsWUFBWSxVQUFVLEVBQUU7WUFDcEMsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDN0M7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsVUFBa0MsRUFBRSxLQUEwQjtRQUM3RSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELE9BQU8sQ0FBQyxLQUFZLEVBQUUsUUFBc0I7O1FBQzFDLE1BQU0sWUFBWSxHQUFHLE1BQUEsS0FBSyxDQUFDLElBQUksMENBQUUsWUFBWSxDQUFDO1FBQzlDLE1BQU0sVUFBVSxHQUFHLE1BQUEsS0FBSyxDQUFDLElBQUksMENBQUUsVUFBVSxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtRQUNuRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDaEQsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7OztZQW5FRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQWJRLGlCQUFpQjtZQUx4QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgQ2FuQWN0aXZhdGUsXG4gIENhbkFjdGl2YXRlQ2hpbGQsXG4gIENhbkxvYWQsXG4gIFJvdXRlLFxuICBSb3V0ZXIsXG4gIFJvdXRlclN0YXRlU25hcHNob3QsXG4gIFVybFNlZ21lbnQsXG4gIFVybFRyZWUsXG59IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb25kaXRpb25zU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbmRpdGlvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IHR5cGUgUmVzb2x2ZUVudGl0bGVtZW50cyA9IChlbnRpdGxlbWVudERlZmluaXRpb246IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbmV4cG9ydCB0eXBlIFJlZGlyZWN0aW9uRmFjdG9yeSA9IChcbiAgcmVzb2x2ZUVudGl0bGVtZW50czogUmVzb2x2ZUVudGl0bGVtZW50cyxcbiAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QgfCBSb3V0ZSxcbiAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QgfCBVcmxTZWdtZW50W10sXG4pID0+IHN0cmluZyB8IHVuZGVmaW5lZCB8IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB8IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEVudGl0bGVtZW50c0d1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQsIENhbkxvYWQge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZG9ubHkgY29uZGl0aW9uczogQ29uZGl0aW9uc1NlcnZpY2UsIHByb3RlY3RlZCByZWFkb25seSByb3V0ZXI6IFJvdXRlcikge31cblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdXNlckhhc0VudGl0bGVtZW50cyA9IGFzeW5jIChlbnRpdGxlbWVudHM6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWVudGl0bGVtZW50cyB8fCAoYXdhaXQgdGhpcy5jb25kaXRpb25zLnJlc29sdmVFbnRpdGxlbWVudHMoZW50aXRsZW1lbnRzKSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgYXN5bmMgcmVzb2x2ZUVudGl0bGVtZW50cyhcbiAgICBlbnRpdGxlbWVudHM6IHN0cmluZyxcbiAgICByZWRpcmVjdFRvPzogc3RyaW5nIHwgUmVkaXJlY3Rpb25GYWN0b3J5LFxuICAgIHJvdXRlPzogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCB8IFJvdXRlLFxuICAgIHN0YXRlPzogUm91dGVyU3RhdGVTbmFwc2hvdCB8IFVybFNlZ21lbnRbXSxcbiAgKTogUHJvbWlzZTxib29sZWFuIHwgVXJsVHJlZT4ge1xuICAgIGlmIChhd2FpdCB0aGlzLnVzZXJIYXNFbnRpdGxlbWVudHMoZW50aXRsZW1lbnRzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdFRvID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZWRpcmVjdFRvID0gYXdhaXQgdGhpcy5nZXRSZWRpcmVjdGlvbihyZWRpcmVjdFRvLCByb3V0ZSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChyZWRpcmVjdFRvKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb3V0ZXIucGFyc2VVcmwocmVkaXJlY3RUbyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSZWRpcmVjdGlvbihcbiAgICBnZXRSZWRpcmVjdFRvOiBSZWRpcmVjdGlvbkZhY3RvcnksXG4gICAgcm91dGU/OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IHwgUm91dGUsXG4gICAgc3RhdGU/OiBSb3V0ZXJTdGF0ZVNuYXBzaG90IHwgVXJsU2VnbWVudFtdLFxuICApOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIGlmICghcm91dGUgfHwgIXN0YXRlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCByZWRpcmVjdFRvID0gZ2V0UmVkaXJlY3RUbyh0aGlzLnVzZXJIYXNFbnRpdGxlbWVudHMsIHJvdXRlLCBzdGF0ZSk7XG4gICAgaWYgKHJlZGlyZWN0VG8gaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3RUby5waXBlKGZpcnN0KCkpLnRvUHJvbWlzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVkaXJlY3RUbztcbiAgfVxuXG4gIGNhbkFjdGl2YXRlQ2hpbGQoY2hpbGRSb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBQcm9taXNlPGJvb2xlYW4gfCBVcmxUcmVlPiB7XG4gICAgY29uc3QgeyBlbnRpdGxlbWVudHMsIHJlZGlyZWN0VG8gfSA9IGNoaWxkUm91dGUuZGF0YTtcbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlRW50aXRsZW1lbnRzKGVudGl0bGVtZW50cywgcmVkaXJlY3RUbywgY2hpbGRSb3V0ZSwgc3RhdGUpO1xuICB9XG5cbiAgY2FuTG9hZChyb3V0ZTogUm91dGUsIHNlZ21lbnRzOiBVcmxTZWdtZW50W10pOiBQcm9taXNlPGJvb2xlYW4gfCBVcmxUcmVlPiB7XG4gICAgY29uc3QgZW50aXRsZW1lbnRzID0gcm91dGUuZGF0YT8uZW50aXRsZW1lbnRzO1xuICAgIGNvbnN0IHJlZGlyZWN0VG8gPSByb3V0ZS5kYXRhPy5yZWRpcmVjdFRvO1xuICAgIHJldHVybiB0aGlzLnJlc29sdmVFbnRpdGxlbWVudHMoZW50aXRsZW1lbnRzLCByZWRpcmVjdFRvLCByb3V0ZSwgc2VnbWVudHMpO1xuICB9XG5cbiAgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogUHJvbWlzZTxib29sZWFuIHwgVXJsVHJlZT4ge1xuICAgIGNvbnN0IHsgZW50aXRsZW1lbnRzLCByZWRpcmVjdFRvIH0gPSByb3V0ZS5kYXRhO1xuICAgIHJldHVybiB0aGlzLnJlc29sdmVFbnRpdGxlbWVudHMoZW50aXRsZW1lbnRzLCByZWRpcmVjdFRvLCByb3V0ZSwgc3RhdGUpO1xuICB9XG59XG4iXX0=