import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @deprecated Will be removed in v7.0.0
 */
export const LOG_DEPRECATIONS_CONFIG = new InjectionToken('@backbase/foundation Log Deprecation Warnings Configuration');
/**
 * @deprecated Will be removed in v7.0.0
 * Log deprecated features.
 *
 * Deprecations will only be logged when `logDeprecations` has been
 * configured to "true" in `BackbaseCoreConfiguration`.
 *
 * @usageNotes
 *
 * ### Example
 *
 * Log a deprecated property:
 *
 * ```
 * @Component({
 *   …
 * })
 * export class MyComponent {
 *   private myOldPropertyValue: string | undefined;
 *
 *   constructor(private deprecationsService: DeprecationsService) { }
 *
 *   @Input()
 *   set myOldProperty(prop: string | undefined) {
 *     this.deprecationsService.logDeprecatedFeature("The `myOldProperty` property of MyComponent has been deprecated");
 *     this.myOldPropertyValue = prop;
 *   }
 * }
 */
export class DeprecationsService {
    constructor(logDeprecations) {
        this.logDeprecations = !!logDeprecations;
    }
    logDeprecatedFeature(warning) {
        if (!this.logDeprecations) {
            return;
        }
        console.warn('[DEPRECATED]', warning);
    }
}
DeprecationsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DeprecationsService_Factory() { return new DeprecationsService(i0.ɵɵinject(LOG_DEPRECATIONS_CONFIG, 8)); }, token: DeprecationsService, providedIn: "root" });
DeprecationsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
DeprecationsService.ctorParameters = () => [
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [LOG_DEPRECATIONS_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwcmVjYXRpb25zLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9mdXR1cmUvc3JjL2RlcHJlY2F0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTdFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3ZELDZEQUE2RCxDQUM5RCxDQUFDO0FBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0Qkc7QUFJSCxNQUFNLE9BQU8sbUJBQW1CO0lBRTlCLFlBR0UsZUFBK0I7UUFFL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsZUFBZSxDQUFDO0lBQzNDLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxPQUFlO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7WUFsQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7MENBSUksUUFBUSxZQUNSLE1BQU0sU0FBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IExPR19ERVBSRUNBVElPTlNfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPGJvb2xlYW4+KFxuICAnQGJhY2tiYXNlL2ZvdW5kYXRpb24gTG9nIERlcHJlY2F0aW9uIFdhcm5pbmdzIENvbmZpZ3VyYXRpb24nLFxuKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKiBMb2cgZGVwcmVjYXRlZCBmZWF0dXJlcy5cbiAqXG4gKiBEZXByZWNhdGlvbnMgd2lsbCBvbmx5IGJlIGxvZ2dlZCB3aGVuIGBsb2dEZXByZWNhdGlvbnNgIGhhcyBiZWVuXG4gKiBjb25maWd1cmVkIHRvIFwidHJ1ZVwiIGluIGBCYWNrYmFzZUNvcmVDb25maWd1cmF0aW9uYC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogTG9nIGEgZGVwcmVjYXRlZCBwcm9wZXJ0eTpcbiAqXG4gKiBgYGBcbiAqIEBDb21wb25lbnQoe1xuICogICDigKZcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xuICogICBwcml2YXRlIG15T2xkUHJvcGVydHlWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICpcbiAqICAgY29uc3RydWN0b3IocHJpdmF0ZSBkZXByZWNhdGlvbnNTZXJ2aWNlOiBEZXByZWNhdGlvbnNTZXJ2aWNlKSB7IH1cbiAqXG4gKiAgIEBJbnB1dCgpXG4gKiAgIHNldCBteU9sZFByb3BlcnR5KHByb3A6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICogICAgIHRoaXMuZGVwcmVjYXRpb25zU2VydmljZS5sb2dEZXByZWNhdGVkRmVhdHVyZShcIlRoZSBgbXlPbGRQcm9wZXJ0eWAgcHJvcGVydHkgb2YgTXlDb21wb25lbnQgaGFzIGJlZW4gZGVwcmVjYXRlZFwiKTtcbiAqICAgICB0aGlzLm15T2xkUHJvcGVydHlWYWx1ZSA9IHByb3A7XG4gKiAgIH1cbiAqIH1cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIERlcHJlY2F0aW9uc1NlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ0RlcHJlY2F0aW9uczogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KExPR19ERVBSRUNBVElPTlNfQ09ORklHKVxuICAgIGxvZ0RlcHJlY2F0aW9uczogYm9vbGVhbiB8IG51bGwsXG4gICkge1xuICAgIHRoaXMubG9nRGVwcmVjYXRpb25zID0gISFsb2dEZXByZWNhdGlvbnM7XG4gIH1cblxuICBsb2dEZXByZWNhdGVkRmVhdHVyZSh3YXJuaW5nOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMubG9nRGVwcmVjYXRpb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUud2FybignW0RFUFJFQ0FURURdJywgd2FybmluZyk7XG4gIH1cbn1cbiJdfQ==