import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';
import { LOG_DEPRECATIONS_CONFIG } from './deprecations.service';
import { AVAILABLE_FEATURES_CONFIG, FutureFeaturesModule, } from './future.module';
import * as i0 from "@angular/core";
import * as i1 from "./future.module";
import * as i2 from "./deprecations.service";
// @todo: separate util package that can be shared across entry points?
const flatten = (arr) => arr.reduce((acc, a) => [...acc, ...a], []);
const ɵ0 = flatten;
/**
 * @deprecated Will be removed in v7.0.0
 */
export const ENABLED_FEATURES_CONFIG = new InjectionToken('@backbase/foundation Enabled Feature Flags Configuration');
/**
 * @deprecated Will be removed in v7.0.0
 * @usageNotes
 *
 * ### Example
 *
 * Create a Feature Flag in the module that implements/uses it
 *
 * ```
 * export const FEATURE_EXAMPLE: AvailableFeature = {
 *  name: 'EXAMPLE',
 *  description: 'Describe the feature that will be enabled by this flag',
 * };
 * ```
 *
 * Check if the application has opted into the Feature Flag
 *
 * ```
 * if (featuresService.isEnabled(FEATURE_EXAMPLE)) {
 *   // Use new feature
 *   …
 * }
 * ```
 *
 * Make the feature flag available from the module that implements/uses it
 *
 * ```
 * @NgModule({
 *   imports: [
 *     FutureFeaturesModule.allowOptIn([FEATURE_EXAMPLE]),
 *     …
 *   ],
 *   …
 * })
 * export class MyModule {
 *   …
 * }
 * ```
 *
 * In the application, opt in to the new feature (and enable logging of configuration issues)
 *
 * ```
 * @NgModule({
 *   imports: [
 *     BackbaseCoreModule.forRoot({
 *       logDeprecations: true,
 *       features: {
 *          FEATURE_EXAMPLE: true,
 *       },
 *       …
 *     }),
 *     …
 *   ],
 *   …
 * })
 * export class AppModule {
 *   …
 * }
 * ```
 */
export class FeaturesService {
    constructor(availableConfigs, enabledConfigOrNull, logDeprecations) {
        this.logDeprecations = !!logDeprecations;
        const availableConfig = flatten(availableConfigs || []);
        const available = new Set(availableConfig.map(feature => feature.name));
        const enabledConfig = enabledConfigOrNull || {};
        this.enabled = new Map(Array.from(available.values()).map(token => [token, false]));
        Object.entries(enabledConfig).forEach(([name, enabled]) => {
            if (available.has(name)) {
                this.enabled.set(name, enabled);
            }
        });
        if (this.logDeprecations) {
            this.logConfigurationErrors(availableConfig, enabledConfig);
        }
    }
    isEnabled(feature) {
        const enabled = this.enabled.get(feature.name);
        if (enabled !== undefined) {
            return enabled;
        }
        throw new Error(`[FEATURE] Using unknown feature: ${feature.name}: ${feature.description}\nYou probably need to add it to the modules provided features.`);
    }
    logConfigurationErrors(availableConfig, enabledConfig) {
        const unconfiguredFeatures = availableConfig.filter(feature => enabledConfig[feature.name] === undefined);
        if (unconfiguredFeatures.length) {
            const unconfiguredFeaturesList = unconfiguredFeatures
                .map(feature => `${feature.name}: ${feature.description}`)
                .join('\n - ');
            console.warn('[DEPRECATED]', `Unconfigured features available:
          \n - ${unconfiguredFeaturesList}
          \nYou should opt-in to them in the App module as they will likely become defaults in the next major release.`);
        }
    }
}
FeaturesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FeaturesService_Factory() { return new FeaturesService(i0.ɵɵinject(i1.AVAILABLE_FEATURES_CONFIG, 8), i0.ɵɵinject(ENABLED_FEATURES_CONFIG, 8), i0.ɵɵinject(i2.LOG_DEPRECATIONS_CONFIG, 8)); }, token: FeaturesService, providedIn: i1.FutureFeaturesModule });
FeaturesService.decorators = [
    { type: Injectable, args: [{
                providedIn: FutureFeaturesModule,
            },] }
];
FeaturesService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [AVAILABLE_FEATURES_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ENABLED_FEATURES_CONFIG,] }] },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [LOG_DEPRECATIONS_CONFIG,] }] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,