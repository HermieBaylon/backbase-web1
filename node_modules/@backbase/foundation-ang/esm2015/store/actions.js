import { filter } from 'rxjs/operators';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const createChannelAction = (action, channel) => ({
    type: action.type,
    channel,
    action,
});
const isChannelAction = (action) => 'channel' in action && 'action' in action;
const ɵ0 = isChannelAction;
/**
 * @deprecated Will be removed in v7.0.0
 */
export const toChannelAction = (action) => isChannelAction(action) ? action : createChannelAction(action);
/**
 * @deprecated Will be removed in v7.0.0
 */
export const isActionForChannel = (action, channels) => {
    return !isChannelAction(action) || action.channel === undefined || channels.includes(action.channel);
};
/**
 * @deprecated Will be removed in v7.0.0
 * Stream operator to filter the `Actions` stream to only pass `Action`s that match the given `type`.
 */
export const ofType = (type) => typeof type === 'string'
    ? (actions) => actions.pipe(filter((action) => action.type === type))
    : (actions) => actions.pipe(filter((action) => action.type === type.type));
/**
 * @deprecated Will be removed in v7.0.0
 */
export { createAction, props } from '@ngrx/store';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const typePropertyIsNotAllowedMsg = 'type property is not allowed in action creators';
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL3N0b3JlL3NyYy9hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQW1DeEM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFtQixNQUFTLEVBQUUsT0FBaUIsRUFBb0IsRUFBRSxDQUFDLENBQUM7SUFDeEcsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO0lBQ2pCLE9BQU87SUFDUCxNQUFNO0NBQ1AsQ0FBQyxDQUFDO0FBRUgsTUFBTSxlQUFlLEdBQUcsQ0FBbUIsTUFBNEIsRUFBOEIsRUFBRSxDQUNyRyxTQUFTLElBQUksTUFBTSxJQUFJLFFBQVEsSUFBSSxNQUFNLENBQUM7O0FBRTVDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQW1CLE1BQTRCLEVBQW9CLEVBQUUsQ0FDbEcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRWpFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBbUIsTUFBUyxFQUFFLFFBQXdCLEVBQVcsRUFBRTtJQUNuRyxPQUFPLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZHLENBQUMsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUNwQixJQUErRSxFQUMvRSxFQUFFLENBQ0YsT0FBTyxJQUFJLEtBQUssUUFBUTtJQUN0QixDQUFDLENBQUMsQ0FBQyxPQUFtQixFQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQVMsRUFBZSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztJQUM3RyxDQUFDLENBQUMsQ0FBQyxPQUFtQixFQUFvQyxFQUFFLENBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBUyxFQUFlLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBRXBGOztHQUVHO0FBQ0gsT0FBTyxFQUFFLFlBQVksRUFBaUIsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBUWpFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsaURBQWlELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25DcmVhdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqIEEgYENoYW5uZWxgIHByb3ZpZGVzIGEgd2F5IHRvIGxpbWl0IHRoZSBzY29wZSBvZiBgQWN0aW9uYHMuIGBFZmZlY3RgcyBhbmQgYFJlZHVjZXJgcyB3aWxsIG9ubHlcbiAqIHJlc3BvbmQgdG8gYEFjdGlvbmBzIHRoYXQgbWF0Y2ggdGhlaXIgYENoYW5uZWxgLlxuICovXG5leHBvcnQgdHlwZSBDaGFubmVsID0gc3RyaW5nO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqIEFuIGBBY3Rpb25gIGRlc2NyaWJlcyBzb21lIHJlcXVlc3Qgb3IgZXZlbnQgdGhhdCBhIHN0b3JlIG1heSB3aXNoIHRvIHJlc3BvbmQgdG8sIGVpdGhlciBieVxuICogdXBkYXRpbmcgaXRzIGludGVybmFsIHN0YXRlIG9yIHRyaWdnZXJpbmcgZXh0ZXJuYWwgZWZmZWN0cyBhbmQgZGlzcGF0Y2hpbmcgZm9sbG93LXVwIGBBY3Rpb25gc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbiB7XG4gIC8qKlxuICAgKiBBbiBpZGVudGlmaWVyIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoZSBgQWN0aW9uYCBpbiB0aGUgY29udGV4dCBvZiBhIGBTdG9yZWAuXG4gICAqL1xuICB0eXBlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogQSBzdHJlYW0gb2YgYEFjdGlvbmBzIHRoYXQgYSBgUmVkdWNlcmAgb3IgYEVmZmVjdGAgbWF5IHJlc3BvbmQgdG8uXG4gKi9cbmV4cG9ydCB0eXBlIEFjdGlvbnM8ViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4gPSBPYnNlcnZhYmxlPFY+O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbm5lbEFjdGlvbjxWIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uPiBleHRlbmRzIEFjdGlvbiB7XG4gIHR5cGU6IHN0cmluZztcbiAgY2hhbm5lbDogQ2hhbm5lbCB8IHVuZGVmaW5lZDtcbiAgYWN0aW9uOiBWO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUNoYW5uZWxBY3Rpb24gPSA8ViBleHRlbmRzIEFjdGlvbj4oYWN0aW9uOiBWLCBjaGFubmVsPzogQ2hhbm5lbCk6IENoYW5uZWxBY3Rpb248Vj4gPT4gKHtcbiAgdHlwZTogYWN0aW9uLnR5cGUsXG4gIGNoYW5uZWwsXG4gIGFjdGlvbixcbn0pO1xuXG5jb25zdCBpc0NoYW5uZWxBY3Rpb24gPSA8ViBleHRlbmRzIEFjdGlvbj4oYWN0aW9uOiBWIHwgQ2hhbm5lbEFjdGlvbjxWPik6IGFjdGlvbiBpcyBDaGFubmVsQWN0aW9uPFY+ID0+XG4gICdjaGFubmVsJyBpbiBhY3Rpb24gJiYgJ2FjdGlvbicgaW4gYWN0aW9uO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHRvQ2hhbm5lbEFjdGlvbiA9IDxWIGV4dGVuZHMgQWN0aW9uPihhY3Rpb246IFYgfCBDaGFubmVsQWN0aW9uPFY+KTogQ2hhbm5lbEFjdGlvbjxWPiA9PlxuICBpc0NoYW5uZWxBY3Rpb24oYWN0aW9uKSA/IGFjdGlvbiA6IGNyZWF0ZUNoYW5uZWxBY3Rpb24oYWN0aW9uKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBpc0FjdGlvbkZvckNoYW5uZWwgPSA8ViBleHRlbmRzIEFjdGlvbj4oYWN0aW9uOiBWLCBjaGFubmVsczogQXJyYXk8Q2hhbm5lbD4pOiBib29sZWFuID0+IHtcbiAgcmV0dXJuICFpc0NoYW5uZWxBY3Rpb24oYWN0aW9uKSB8fCBhY3Rpb24uY2hhbm5lbCA9PT0gdW5kZWZpbmVkIHx8IGNoYW5uZWxzLmluY2x1ZGVzKGFjdGlvbi5jaGFubmVsKTtcbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogU3RyZWFtIG9wZXJhdG9yIHRvIGZpbHRlciB0aGUgYEFjdGlvbnNgIHN0cmVhbSB0byBvbmx5IHBhc3MgYEFjdGlvbmBzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIGB0eXBlYC5cbiAqL1xuZXhwb3J0IGNvbnN0IG9mVHlwZSA9IDxSIGV4dGVuZHMgViwgViBleHRlbmRzIEFjdGlvbiA9IEFjdGlvbj4oXG4gIHR5cGU6IHN0cmluZyB8IEFjdGlvbkNyZWF0b3I8c3RyaW5nLCBGdW5jdGlvbldpdGhQYXJhbWV0ZXJzVHlwZTxBcnJheTxhbnk+LCBSPj4sXG4pID0+XG4gIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJ1xuICAgID8gKGFjdGlvbnM6IEFjdGlvbnM8Vj4pOiBBY3Rpb25zPFI+ID0+IGFjdGlvbnMucGlwZShmaWx0ZXIoKGFjdGlvbjogVik6IGFjdGlvbiBpcyBSID0+IGFjdGlvbi50eXBlID09PSB0eXBlKSlcbiAgICA6IChhY3Rpb25zOiBBY3Rpb25zPFY+KTogQWN0aW9uczxSZXR1cm5UeXBlPHR5cGVvZiB0eXBlPj4gPT5cbiAgICAgICAgYWN0aW9ucy5waXBlKGZpbHRlcigoYWN0aW9uOiBWKTogYWN0aW9uIGlzIFIgPT4gYWN0aW9uLnR5cGUgPT09IHR5cGUudHlwZSkpO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IHsgY3JlYXRlQWN0aW9uLCBBY3Rpb25DcmVhdG9yLCBwcm9wcyB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0b3I8UCBleHRlbmRzIEFycmF5PGFueT4gPSBBcnJheTxhbnk+LCBSIGV4dGVuZHMgb2JqZWN0ID0gb2JqZWN0PiA9IFIgZXh0ZW5kcyB7IHR5cGU6IGFueSB9XG4gID8gVHlwZVByb3BlcnR5SXNOb3RBbGxvd2VkXG4gIDogRnVuY3Rpb25XaXRoUGFyYW1ldGVyc1R5cGU8UCwgUj47XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVQcm9wZXJ0eUlzTm90QWxsb3dlZE1zZyA9ICd0eXBlIHByb3BlcnR5IGlzIG5vdCBhbGxvd2VkIGluIGFjdGlvbiBjcmVhdG9ycyc7XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IHR5cGUgVHlwZVByb3BlcnR5SXNOb3RBbGxvd2VkID0gdHlwZW9mIHR5cGVQcm9wZXJ0eUlzTm90QWxsb3dlZE1zZztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCB0eXBlIEZ1bmN0aW9uV2l0aFBhcmFtZXRlcnNUeXBlPFAgZXh0ZW5kcyBBcnJheTx1bmtub3duPiwgUiA9IHZvaWQ+ID0gKC4uLmFyZ3M6IFApID0+IFI7XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeXBlZEFjdGlvbjxUIGV4dGVuZHMgc3RyaW5nPiBleHRlbmRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGU6IFQ7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IHR5cGUgRGlzYWxsb3dUeXBlUHJvcGVydHk8VD4gPSBUIGV4dGVuZHMgeyB0eXBlOiBhbnkgfSA/IFR5cGVQcm9wZXJ0eUlzTm90QWxsb3dlZCA6IFQ7XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IHR5cGUgUHJvcHNSZXR1cm5UeXBlPFQgZXh0ZW5kcyBvYmplY3Q+ID0gVCBleHRlbmRzIHsgdHlwZTogYW55IH1cbiAgPyBUeXBlUHJvcGVydHlJc05vdEFsbG93ZWRcbiAgOiB7IF9hczogJ3Byb3BzJzsgX3A6IFQgfTtcbiJdfQ==