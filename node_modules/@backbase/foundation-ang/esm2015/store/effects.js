import { isActionForChannel, createChannelAction, toChannelAction } from './actions';
import { createEffect } from '@ngrx/effects';
import { map, filter } from 'rxjs/operators';
export const METADATA_KEY = '@backbase/store effect metadata';
const setEffectActionMetadata = (sourceProto, entries) => {
    const constructor = sourceProto.constructor;
    const meta = constructor.hasOwnProperty(METADATA_KEY)
        ? constructor[METADATA_KEY]
        : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[METADATA_KEY];
    Array.prototype.push.apply(meta, entries);
};
const ɵ0 = setEffectActionMetadata;
const getEffectsMetadata = (sourceProto) => sourceProto.constructor.hasOwnProperty(METADATA_KEY) ? sourceProto.constructor[METADATA_KEY] : [];
const ɵ1 = getEffectsMetadata;
/**
 * @deprecated Will be removed in v7.0.0
 * Method decorator to mark a method as an effect. Effects can be registered with a `Store` to perform external
 * effects such as fetching data or navigating the browser.
 *
 * The decorated method must be `(actions: Observable<Action>, store?: Store) => Observable<Action>`.
 */
export const Effect = () => {
    return function (target, methodName) {
        const metadata = {
            propertyName: methodName,
        };
        setEffectActionMetadata(target, [metadata]);
    };
};
const hasEffectActionMetadata = (instance) => getEffectsMetadata(instance).length > 0;
const ɵ2 = hasEffectActionMetadata;
const outputChannel = (channel) => (source) => source.pipe(map((action) => createChannelAction(action, channel)));
const ɵ3 = outputChannel;
const ofChannel = (channels) => (source) => source.pipe(map(action => toChannelAction(action)), filter((action) => isActionForChannel(action, channels)), map(channelAction => channelAction.action));
const ɵ4 = ofChannel;
/**
 * @deprecated Will be removed in v7.0.0
 */
export const createMetaChannelEffects = (store, actions, effects, dispatchChannel, listenChannels) => {
    if (!hasEffectActionMetadata(effects)) {
        throw new Error('Effect class has no effects');
    }
    const proto = function () { };
    Object.defineProperty(proto, 'name', { value: `Effect${dispatchChannel}`, writable: false });
    const effectInstance = Object.create(proto);
    return getEffectsMetadata(effects).reduce((instance, effect) => {
        instance[effect.propertyName] = createEffect(() => effects[effect.propertyName](actions.pipe(ofChannel(listenChannels)), store).pipe(outputChannel(dispatchChannel)));
        return instance;
    }, effectInstance);
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,