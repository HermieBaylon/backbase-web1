import { Inject, InjectionToken } from '@angular/core';
import { StoreBroker } from './store-broker.service';
import { FeaturesService } from '@backbase/foundation-ang/future';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const ENFORCE_INJECTOR_FOR_CREATE_STORE = {
    name: 'ENFORCE_INJECTOR_FOR_CREATE_STORE',
    description: 'you have to provide widget injector for createStore to make sure your widget support lazy loading',
};
/**
 * @deprecated Will be removed in v7.0.0
 * Configuration token that defines the "branch" of the application state that the store is responsible for.
 *
 * @internal
 */
export const STORE_BRANCH = new InjectionToken('@backbase store branch');
/**
 * @deprecated Will be removed in v7.0.0
 * Configuration token that defines the "channel" on which the store will dispatch any events it produces.
 *
 * @internal
 */
export const STORE_DISPATCH_CHANNEL = new InjectionToken('@backbase store dispatch channel');
/**
 * @deprecated Will be removed in v7.0.0
 * Create a scoped store on a particular branch/channel
 */
export class StoreFactory {
    constructor(storeBroker, branch, dispatchChannel, featuresService) {
        this.storeBroker = storeBroker;
        this.branch = branch;
        this.dispatchChannel = dispatchChannel;
        this.featuresService = featuresService;
    }
    createStore(storeName, reducer, effects, injector) {
        if (!injector && this.featuresService.isEnabled(ENFORCE_INJECTOR_FOR_CREATE_STORE)) {
            throw new Error(ENFORCE_INJECTOR_FOR_CREATE_STORE.description);
        }
        if (!injector) {
            console.warn(ENFORCE_INJECTOR_FOR_CREATE_STORE.description);
        }
        return this.storeBroker.initStore(storeName, reducer, effects, this.branch, this.dispatchChannel, undefined, injector);
    }
}
StoreFactory.ctorParameters = () => [
    { type: StoreBroker },
    { type: undefined, decorators: [{ type: Inject, args: [STORE_BRANCH,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STORE_DISPATCH_CHANNEL,] }] },
    { type: FeaturesService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtZmFjdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvc3RvcmUvc3JjL3N0b3JlLWZhY3Rvcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUNqRSxPQUFPLEVBQVMsV0FBVyxFQUF5QixNQUFNLHdCQUF3QixDQUFDO0FBR25GLE9BQU8sRUFBb0IsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQ0FBaUMsR0FBcUI7SUFDakUsSUFBSSxFQUFFLG1DQUFtQztJQUN6QyxXQUFXLEVBQUUsbUdBQW1HO0NBQ2pILENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBYSx3QkFBd0IsQ0FBQyxDQUFDO0FBRXJGOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxjQUFjLENBQVUsa0NBQWtDLENBQUMsQ0FBQztBQUl0Rzs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sWUFBWTtJQUN2QixZQUNtQixXQUF3QixFQUNGLE1BQWtCLEVBQ1IsZUFBd0IsRUFDakUsZUFBZ0M7UUFIdkIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDRixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ1Isb0JBQWUsR0FBZixlQUFlLENBQVM7UUFDakUsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQ3ZDLENBQUM7SUE0QkosV0FBVyxDQUNULFNBQW9CLEVBQ3BCLE9BQXNCLEVBQ3RCLE9BQXdDLEVBQ3hDLFFBQW1CO1FBRW5CLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsaUNBQWlDLENBQUMsRUFBRTtZQUNsRixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hFO1FBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDN0Q7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUMvQixTQUFTLEVBQ1QsT0FBTyxFQUNQLE9BQU8sRUFDUCxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxlQUFlLEVBQ3BCLFNBQVMsRUFDVCxRQUFRLENBQ1QsQ0FBQztJQUNKLENBQUM7OztZQTNGYSxXQUFXOzRDQXFDdEIsTUFBTSxTQUFDLFlBQVk7NENBQ25CLE1BQU0sU0FBQyxzQkFBc0I7WUFuQ1AsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiwgQ2hhbm5lbCB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RvcmUsIFN0b3JlQnJva2VyLCBCcmFuY2hOYW1lLCBTdG9yZU5hbWUgfSBmcm9tICcuL3N0b3JlLWJyb2tlci5zZXJ2aWNlJztcbmltcG9ydCB7IFJlZHVjZXIgfSBmcm9tICcuL3JlZHVjZXJzJztcbmltcG9ydCB7IEVmZmVjdHNJbmplY3Rpb25Ub2tlbiB9IGZyb20gJy4vZWZmZWN0cyc7XG5pbXBvcnQgeyBBdmFpbGFibGVGZWF0dXJlLCBGZWF0dXJlc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZnV0dXJlJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY29uc3QgRU5GT1JDRV9JTkpFQ1RPUl9GT1JfQ1JFQVRFX1NUT1JFOiBBdmFpbGFibGVGZWF0dXJlID0ge1xuICBuYW1lOiAnRU5GT1JDRV9JTkpFQ1RPUl9GT1JfQ1JFQVRFX1NUT1JFJyxcbiAgZGVzY3JpcHRpb246ICd5b3UgaGF2ZSB0byBwcm92aWRlIHdpZGdldCBpbmplY3RvciBmb3IgY3JlYXRlU3RvcmUgdG8gbWFrZSBzdXJlIHlvdXIgd2lkZ2V0IHN1cHBvcnQgbGF6eSBsb2FkaW5nJyxcbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogQ29uZmlndXJhdGlvbiB0b2tlbiB0aGF0IGRlZmluZXMgdGhlIFwiYnJhbmNoXCIgb2YgdGhlIGFwcGxpY2F0aW9uIHN0YXRlIHRoYXQgdGhlIHN0b3JlIGlzIHJlc3BvbnNpYmxlIGZvci5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFNUT1JFX0JSQU5DSCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxCcmFuY2hOYW1lPignQGJhY2tiYXNlIHN0b3JlIGJyYW5jaCcpO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqIENvbmZpZ3VyYXRpb24gdG9rZW4gdGhhdCBkZWZpbmVzIHRoZSBcImNoYW5uZWxcIiBvbiB3aGljaCB0aGUgc3RvcmUgd2lsbCBkaXNwYXRjaCBhbnkgZXZlbnRzIGl0IHByb2R1Y2VzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgU1RPUkVfRElTUEFUQ0hfQ0hBTk5FTCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxDaGFubmVsPignQGJhY2tiYXNlIHN0b3JlIGRpc3BhdGNoIGNoYW5uZWwnKTtcblxuZXhwb3J0IHsgU3RvcmUgfTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKiBDcmVhdGUgYSBzY29wZWQgc3RvcmUgb24gYSBwYXJ0aWN1bGFyIGJyYW5jaC9jaGFubmVsXG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yZUZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0b3JlQnJva2VyOiBTdG9yZUJyb2tlcixcbiAgICBASW5qZWN0KFNUT1JFX0JSQU5DSCkgcHJpdmF0ZSByZWFkb25seSBicmFuY2g6IEJyYW5jaE5hbWUsXG4gICAgQEluamVjdChTVE9SRV9ESVNQQVRDSF9DSEFOTkVMKSBwcml2YXRlIHJlYWRvbmx5IGRpc3BhdGNoQ2hhbm5lbDogQ2hhbm5lbCxcbiAgICBwcml2YXRlIGZlYXR1cmVzU2VydmljZTogRmVhdHVyZXNTZXJ2aWNlLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHlvdSBoYXZlIHRvIHByb3ZpZGUgd2lkZ2V0IGluamVjdG9yIGZvciBjcmVhdGVTdG9yZSB0byBtYWtlIHN1cmUgeW91ciB3aWRnZXQgc3VwcG9ydCBsYXp5IGxvYWRpbmcuXG4gICAqIENyZWF0ZSBhIGBTdG9yZWAgdGhhdCBtYWludGFpbnMgc3RhdGUgKGBUYCkgYW5kIHJlc3BvbmRzIHRvIGBBY3Rpb25gcyAoYFZgKS5cbiAgICogQHBhcmFtIHN0b3JlTmFtZSBUaGUgbmFtZSBvZiB0aGUgc3RvcmUgLSB0aGlzIHNob3VsZCBiZSB1bmlxdWUgd2l0aGluIHRoZSBgYnJhbmNoYC5cbiAgICogQHBhcmFtIHJlZHVjZXIgVGhlIHJlZHVjZXJzIHRoYXQgdXBkYXRlIHRoZSBgU3RvcmVgcyBzdGF0ZSBiYXNlZCBvbiBgQWN0aW9uYHMgZGlzcGF0Y2hlZCB0byB0aGUgYFN0b3JlYC5cbiAgICogQHBhcmFtIGVmZmVjdHMgVGhlIGBFZmZlY3RgcyB0aGF0IHRyaWdnZXIgZXh0ZXJuYWwgZWZmZWN0cyBhbmQvb3IgcHJvZHVjZSBuZXcgYEFjdGlvbmBzIGJhc2VkIG9uIHRoZSBgQWN0aW9uYHMgZGlzcGF0Y2hlZCB0byB0aGUgYFN0b3JlYC5cbiAgICoqL1xuICBjcmVhdGVTdG9yZTxULCBWIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uPihcbiAgICBzdG9yZU5hbWU6IFN0b3JlTmFtZSxcbiAgICByZWR1Y2VyOiBSZWR1Y2VyPFQsIFY+LFxuICAgIGVmZmVjdHM6IEFycmF5PEVmZmVjdHNJbmplY3Rpb25Ub2tlbjxWPj4sXG4gICk6IFN0b3JlPFQsIFY+O1xuICAvKipcbiAgICogQ3JlYXRlIGEgYFN0b3JlYCB0aGF0IG1haW50YWlucyBzdGF0ZSAoYFRgKSBhbmQgcmVzcG9uZHMgdG8gYEFjdGlvbmBzIChgVmApLlxuICAgKiBAcGFyYW0gc3RvcmVOYW1lIFRoZSBuYW1lIG9mIHRoZSBzdG9yZSAtIHRoaXMgc2hvdWxkIGJlIHVuaXF1ZSB3aXRoaW4gdGhlIGBicmFuY2hgLlxuICAgKiBAcGFyYW0gcmVkdWNlciBUaGUgcmVkdWNlcnMgdGhhdCB1cGRhdGUgdGhlIGBTdG9yZWBzIHN0YXRlIGJhc2VkIG9uIGBBY3Rpb25gcyBkaXNwYXRjaGVkIHRvIHRoZSBgU3RvcmVgLlxuICAgKiBAcGFyYW0gZWZmZWN0cyBUaGUgYEVmZmVjdGBzIHRoYXQgdHJpZ2dlciBleHRlcm5hbCBlZmZlY3RzIGFuZC9vciBwcm9kdWNlIG5ldyBgQWN0aW9uYHMgYmFzZWQgb24gdGhlIGBBY3Rpb25gcyBkaXNwYXRjaGVkIHRvIHRoZSBgU3RvcmVgLlxuICAgKiBAcGFyYW0gaW5qZWN0b3Igd2lkZ2V0IGluamVjdG9yIGlzIHJlcXVpcmVkIHRvIHN1cHBvcnQgbGF6eSBsb2FkaW5nLlxuICAgKiovXG4gIGNyZWF0ZVN0b3JlPFQsIFYgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24+KFxuICAgIHN0b3JlTmFtZTogU3RvcmVOYW1lLFxuICAgIHJlZHVjZXI6IFJlZHVjZXI8VCwgVj4sXG4gICAgZWZmZWN0czogQXJyYXk8RWZmZWN0c0luamVjdGlvblRva2VuPFY+PixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuaWZpZWQtc2lnbmF0dXJlc1xuICAgIGluamVjdG9yOiBJbmplY3RvcixcbiAgKTogU3RvcmU8VCwgVj47XG4gIGNyZWF0ZVN0b3JlPFQsIFYgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24+KFxuICAgIHN0b3JlTmFtZTogU3RvcmVOYW1lLFxuICAgIHJlZHVjZXI6IFJlZHVjZXI8VCwgVj4sXG4gICAgZWZmZWN0czogQXJyYXk8RWZmZWN0c0luamVjdGlvblRva2VuPFY+PixcbiAgICBpbmplY3Rvcj86IEluamVjdG9yLFxuICApOiBTdG9yZTxULCBWPiB7XG4gICAgaWYgKCFpbmplY3RvciAmJiB0aGlzLmZlYXR1cmVzU2VydmljZS5pc0VuYWJsZWQoRU5GT1JDRV9JTkpFQ1RPUl9GT1JfQ1JFQVRFX1NUT1JFKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKEVORk9SQ0VfSU5KRUNUT1JfRk9SX0NSRUFURV9TVE9SRS5kZXNjcmlwdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKCFpbmplY3Rvcikge1xuICAgICAgY29uc29sZS53YXJuKEVORk9SQ0VfSU5KRUNUT1JfRk9SX0NSRUFURV9TVE9SRS5kZXNjcmlwdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RvcmVCcm9rZXIuaW5pdFN0b3JlKFxuICAgICAgc3RvcmVOYW1lLFxuICAgICAgcmVkdWNlcixcbiAgICAgIGVmZmVjdHMsXG4gICAgICB0aGlzLmJyYW5jaCxcbiAgICAgIHRoaXMuZGlzcGF0Y2hDaGFubmVsLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgaW5qZWN0b3IsXG4gICAgKTtcbiAgfVxufVxuIl19