import { Injectable, Injector, Inject } from '@angular/core';
import { ReducerManager as NgrxReducerManager, Store as NgrxStore } from '@ngrx/store';
import { Actions as NgrxActions, EffectSources as NgrxEffectsSources } from '@ngrx/effects';
import { Observable } from 'rxjs';
import { metaChannelReducer as createMetaChannelReducer } from './reducers';
import { createChannelAction } from './actions';
import { createMetaChannelEffects } from './effects';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@ngrx/effects";
/**
 * @deprecated Will be removed in v7.0.0
 */
export const InitializeStoreActionType = '[Backbase Reducer] INITIALIZE REDUCER';
/**
 * @deprecated Will be removed in v7.0.0
 * An `Action` that is dispatched to a `Store` when it is created to allow the store to initialize
 * its initial state
 */
export class InitializeStoreAction {
    constructor() {
        this.type = InitializeStoreActionType;
    }
}
/**
 * @deprecated Will be removed in v7.0.0
 * Stream operator to filter the `Actions` stream to only pass the `InitializeStoreAction`.
 * This can be used to write `Reducer`s or `Effect`s that are only run when their `Store` is
 * initially created.
 */
export const ofStoreInit = () => (source) => source.pipe(filter((action) => action.type === InitializeStoreActionType));
/**
 * @internal
 */
export class StoreBroker {
    constructor(superstore, actions, reducerManager, effectsSources, injector) {
        this.superstore = superstore;
        this.actions = actions;
        this.reducerManager = reducerManager;
        this.effectsSources = effectsSources;
        this.injector = injector;
        this.initializedStores = new Map();
    }
    initStore(storeName, reducer, effects, branchName, dispatchChannel, inputChannels = [], widgetInjector) {
        if (this.isStoreInitialized(branchName, storeName)) {
            return this.createStore(storeName, branchName, dispatchChannel);
        }
        const allInputChannels = [this.privateChannel(storeName, dispatchChannel), ...inputChannels];
        this.addReducer(storeName, branchName, reducer, allInputChannels);
        this.setStoreInitialized(branchName, storeName);
        const store = this.createStore(storeName, branchName, dispatchChannel);
        effects
            .map(token => (widgetInjector || this.injector).get(token))
            .forEach((effectInstance) => {
            this.addEffects(store, effectInstance, this.privateChannel(storeName, dispatchChannel), allInputChannels);
        });
        store.dispatch(new InitializeStoreAction());
        return store;
    }
    createStore(storeName, branchName, dispatchChannel) {
        return {
            select: (selector) => {
                return this.superstore.select(state => state[this.privateBranch(storeName, branchName)]).pipe(map(selector));
            },
            dispatch: (action) => {
                this.dispatchForStore(storeName, dispatchChannel, action);
            },
        };
    }
    /**
     * Dispatches an action scoped on a channel just for this store.
     */
    dispatchForStore(storeName, dispatchChannel, action) {
        this.dispatchOnChannel(this.privateChannel(storeName, dispatchChannel), action);
    }
    dispatchOnChannel(channel, action) {
        this.superstore.dispatch(createChannelAction(action, channel));
    }
    isStoreInitialized(branchName, storeName) {
        const storesInBranch = this.initializedStores.get(branchName);
        return !!(storesInBranch && storesInBranch.find(name => name === storeName));
    }
    setStoreInitialized(branchName, storeName) {
        let storesInBranch = this.initializedStores.get(branchName);
        if (storesInBranch === undefined) {
            storesInBranch = [];
            this.initializedStores.set(branchName, storesInBranch);
        }
        storesInBranch.push(storeName);
    }
    addReducer(storeName, branchName, reducer, inputChannels) {
        this.reducerManager.addFeature({
            key: this.privateBranch(storeName, branchName),
            reducers: createMetaChannelReducer(inputChannels)(reducer),
            reducerFactory: () => {
                throw new Error('No reducer factory');
            },
            metaReducers: [], //[createMetaChannelReducer(inputChannels)],
        });
    }
    addEffects(store, effects, dispatchChannel, listenChannels) {
        this.effectsSources.addEffects(createMetaChannelEffects(store, this.actions, effects, dispatchChannel, listenChannels));
    }
    privateBranch(storeName, branchName) {
        return `${storeName}/${branchName}`;
    }
    privateChannel(storeName, dispatchChannel) {
        return `${storeName}/${dispatchChannel}`;
    }
}
StoreBroker.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreBroker_Factory() { return new StoreBroker(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i1.ReducerManager), i0.ɵɵinject(i2.EffectSources), i0.ɵɵinject(i0.INJECTOR)); }, token: StoreBroker, providedIn: "root" });
StoreBroker.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
StoreBroker.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NgrxStore,] }] },
    { type: Observable, decorators: [{ type: Inject, args: [NgrxActions,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NgrxReducerManager,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NgrxEffectsSources,] }] },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,