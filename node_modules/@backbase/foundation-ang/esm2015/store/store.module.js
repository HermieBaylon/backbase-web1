import { NgModule } from '@angular/core';
import { EffectsModule as NgrxEffectsModule } from '@ngrx/effects';
import { StoreModule as NgrxStoreModule } from '@ngrx/store';
import { FeaturesService } from '@backbase/foundation-ang/future';
import { FutureFeaturesModule } from '@backbase/foundation-ang/future';
import { StoreBroker } from './store-broker.service';
import { ENFORCE_INJECTOR_FOR_CREATE_STORE } from './store-factory.service';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const ALLOW_NGRX_IN_ROOT = {
    name: 'ALLOW_NGRX_IN_ROOT',
    description: 'StoreModule is deprecated - use BackbaseStoreModule instead',
};
/**
 * @deprecated
 */
export class StoreModule {
    constructor(featuresService) {
        if (featuresService.isEnabled(ALLOW_NGRX_IN_ROOT)) {
            throw new Error('StoreModule is deprecated - use BackbaseStoreModule instead');
        }
    }
}
StoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    NgrxEffectsModule.forRoot([]),
                    NgrxStoreModule.forRoot({}),
                    FutureFeaturesModule.allowOptIn([ALLOW_NGRX_IN_ROOT, ENFORCE_INJECTOR_FOR_CREATE_STORE]),
                ],
                providers: [StoreBroker],
            },] }
];
StoreModule.ctorParameters = () => [
    { type: FeaturesService }
];
/**
 * @deprecated Will be removed in v7.0.0
 */
export class BackbaseStoreModule {
}
BackbaseStoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [NgrxEffectsModule, NgrxStoreModule, FutureFeaturesModule.allowOptIn([ENFORCE_INJECTOR_FOR_CREATE_STORE])],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvc3RvcmUvc3JjL3N0b3JlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLElBQUksaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFFLFdBQVcsSUFBSSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0QsT0FBTyxFQUFvQixlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDNUU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBcUI7SUFDbEQsSUFBSSxFQUFFLG9CQUFvQjtJQUMxQixXQUFXLEVBQUUsNkRBQTZEO0NBQzNFLENBQUM7QUFFRjs7R0FFRztBQVNILE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQVksZUFBZ0M7UUFDMUMsSUFBSSxlQUFlLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDakQsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ2hGO0lBQ0gsQ0FBQzs7O1lBYkYsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO29CQUM3QixlQUFlLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztvQkFDM0Isb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztpQkFDekY7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO2FBQ3pCOzs7WUF0QjBCLGVBQWU7O0FBOEIxQzs7R0FFRztBQUlILE1BQU0sT0FBTyxtQkFBbUI7OztZQUgvQixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQzthQUNwSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFZmZlY3RzTW9kdWxlIGFzIE5ncnhFZmZlY3RzTW9kdWxlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBTdG9yZU1vZHVsZSBhcyBOZ3J4U3RvcmVNb2R1bGUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBdmFpbGFibGVGZWF0dXJlLCBGZWF0dXJlc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZnV0dXJlJztcbmltcG9ydCB7IEZ1dHVyZUZlYXR1cmVzTW9kdWxlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2Z1dHVyZSc7XG5pbXBvcnQgeyBTdG9yZUJyb2tlciB9IGZyb20gJy4vc3RvcmUtYnJva2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRU5GT1JDRV9JTkpFQ1RPUl9GT1JfQ1JFQVRFX1NUT1JFIH0gZnJvbSAnLi9zdG9yZS1mYWN0b3J5LnNlcnZpY2UnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBBTExPV19OR1JYX0lOX1JPT1Q6IEF2YWlsYWJsZUZlYXR1cmUgPSB7XG4gIG5hbWU6ICdBTExPV19OR1JYX0lOX1JPT1QnLFxuICBkZXNjcmlwdGlvbjogJ1N0b3JlTW9kdWxlIGlzIGRlcHJlY2F0ZWQgLSB1c2UgQmFja2Jhc2VTdG9yZU1vZHVsZSBpbnN0ZWFkJyxcbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIE5ncnhFZmZlY3RzTW9kdWxlLmZvclJvb3QoW10pLFxuICAgIE5ncnhTdG9yZU1vZHVsZS5mb3JSb290KHt9KSxcbiAgICBGdXR1cmVGZWF0dXJlc01vZHVsZS5hbGxvd09wdEluKFtBTExPV19OR1JYX0lOX1JPT1QsIEVORk9SQ0VfSU5KRUNUT1JfRk9SX0NSRUFURV9TVE9SRV0pLFxuICBdLFxuICBwcm92aWRlcnM6IFtTdG9yZUJyb2tlcl0sXG59KVxuZXhwb3J0IGNsYXNzIFN0b3JlTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoZmVhdHVyZXNTZXJ2aWNlOiBGZWF0dXJlc1NlcnZpY2UpIHtcbiAgICBpZiAoZmVhdHVyZXNTZXJ2aWNlLmlzRW5hYmxlZChBTExPV19OR1JYX0lOX1JPT1QpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0b3JlTW9kdWxlIGlzIGRlcHJlY2F0ZWQgLSB1c2UgQmFja2Jhc2VTdG9yZU1vZHVsZSBpbnN0ZWFkJyk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW05ncnhFZmZlY3RzTW9kdWxlLCBOZ3J4U3RvcmVNb2R1bGUsIEZ1dHVyZUZlYXR1cmVzTW9kdWxlLmFsbG93T3B0SW4oW0VORk9SQ0VfSU5KRUNUT1JfRk9SX0NSRUFURV9TVE9SRV0pXSxcbn0pXG5leHBvcnQgY2xhc3MgQmFja2Jhc2VTdG9yZU1vZHVsZSB7fVxuIl19