import { isActionForChannel, toChannelAction } from './actions';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const InitializeStateActionType = '[Backbase Reducer] INITIALIZE REDUCER';
/**
 * @deprecated Will be removed in v7.0.0
 */
export class InitializeState {
    constructor() {
        this.type = InitializeStateActionType;
    }
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export const metaChannelReducer = (channels) => {
    // create a meta reducer (takes a reducer, and returns a new reducer)
    return (reducer) => {
        // create a function to initialize the state for this reducer
        const initializeState = () => reducer(undefined, new InitializeState());
        // return the new reducer, which filters actions not for this "channel"
        return (state = initializeState(), action) => {
            const channelAction = toChannelAction(action);
            if (isActionForChannel(action, channels)) {
                return reducer(state, channelAction.action);
            }
            return state;
        };
    };
};
export { createReducer, on } from '@ngrx/store';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9zdG9yZS9zcmMvcmVkdWNlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUF5QixrQkFBa0IsRUFBaUIsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RHOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsdUNBQXVDLENBQUM7QUFDakY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUE1QjtRQUNXLFNBQUksR0FBRyx5QkFBeUIsQ0FBQztJQUM1QyxDQUFDO0NBQUE7QUFXRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQ2hDLFFBQXVCLEVBQ3FDLEVBQUU7SUFDOUQscUVBQXFFO0lBQ3JFLE9BQU8sQ0FBQyxPQUFzQixFQUFnQyxFQUFFO1FBQzlELDZEQUE2RDtRQUM3RCxNQUFNLGVBQWUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksZUFBZSxFQUFPLENBQUMsQ0FBQztRQUM3RSx1RUFBdUU7UUFDdkUsT0FBTyxDQUFDLFFBQVcsZUFBZSxFQUFFLEVBQUUsTUFBNEIsRUFBSyxFQUFFO1lBQ3ZFLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5QyxJQUFJLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDeEMsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3QztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsT0FBTyxFQUFFLGFBQWEsRUFBRSxFQUFFLEVBQUUsTUFBTSxhQUFhLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25SZWR1Y2VyIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuXG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkNyZWF0b3IsIGlzQWN0aW9uRm9yQ2hhbm5lbCwgQ2hhbm5lbEFjdGlvbiwgdG9DaGFubmVsQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY29uc3QgSW5pdGlhbGl6ZVN0YXRlQWN0aW9uVHlwZSA9ICdbQmFja2Jhc2UgUmVkdWNlcl0gSU5JVElBTElaRSBSRURVQ0VSJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgY2xhc3MgSW5pdGlhbGl6ZVN0YXRlIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IEluaXRpYWxpemVTdGF0ZUFjdGlvblR5cGU7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICogR2VuZXJhdGUgYSBuZXcgc3RhdGUgKGBUYCkgYmFzZWQgb24gYSBwcmV2aW91cyBzdGF0ZSBpbiByZXNwb25zZSB0byBhbiBhY3Rpb24gKGBWYClcbiAqL1xuZXhwb3J0IHR5cGUgUmVkdWNlcjxULCBWPiA9IChzdGF0ZTogVCB8IHVuZGVmaW5lZCwgYWN0aW9uOiBWKSA9PiBUO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCB0eXBlIE1ldGFSZWR1Y2VyPFQsIFYgZXh0ZW5kcyBBY3Rpb24gPSBBY3Rpb24+ID0gKHJlZHVjZXI6IFJlZHVjZXI8VCwgVj4pID0+IFJlZHVjZXI8VCwgVj47XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG1ldGFDaGFubmVsUmVkdWNlciA9IDxULCBWIGV4dGVuZHMgQWN0aW9uID0gQWN0aW9uPihcbiAgY2hhbm5lbHM6IEFycmF5PHN0cmluZz4sXG4pOiAoKHJlZHVjZXI6IFJlZHVjZXI8VCwgVj4pID0+IFJlZHVjZXI8VCwgQ2hhbm5lbEFjdGlvbjxWPj4pID0+IHtcbiAgLy8gY3JlYXRlIGEgbWV0YSByZWR1Y2VyICh0YWtlcyBhIHJlZHVjZXIsIGFuZCByZXR1cm5zIGEgbmV3IHJlZHVjZXIpXG4gIHJldHVybiAocmVkdWNlcjogUmVkdWNlcjxULCBWPik6IFJlZHVjZXI8VCwgQ2hhbm5lbEFjdGlvbjxWPj4gPT4ge1xuICAgIC8vIGNyZWF0ZSBhIGZ1bmN0aW9uIHRvIGluaXRpYWxpemUgdGhlIHN0YXRlIGZvciB0aGlzIHJlZHVjZXJcbiAgICBjb25zdCBpbml0aWFsaXplU3RhdGUgPSAoKSA9PiByZWR1Y2VyKHVuZGVmaW5lZCwgbmV3IEluaXRpYWxpemVTdGF0ZSgpIGFzIFYpO1xuICAgIC8vIHJldHVybiB0aGUgbmV3IHJlZHVjZXIsIHdoaWNoIGZpbHRlcnMgYWN0aW9ucyBub3QgZm9yIHRoaXMgXCJjaGFubmVsXCJcbiAgICByZXR1cm4gKHN0YXRlOiBUID0gaW5pdGlhbGl6ZVN0YXRlKCksIGFjdGlvbjogViB8IENoYW5uZWxBY3Rpb248Vj4pOiBUID0+IHtcbiAgICAgIGNvbnN0IGNoYW5uZWxBY3Rpb24gPSB0b0NoYW5uZWxBY3Rpb24oYWN0aW9uKTtcbiAgICAgIGlmIChpc0FjdGlvbkZvckNoYW5uZWwoYWN0aW9uLCBjaGFubmVscykpIHtcbiAgICAgICAgcmV0dXJuIHJlZHVjZXIoc3RhdGUsIGNoYW5uZWxBY3Rpb24uYWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9O1xuICB9O1xufTtcblxuZXhwb3J0IHsgY3JlYXRlUmVkdWNlciwgb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5cbmV4cG9ydCB7IEFjdGlvblJlZHVjZXIgfTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgdHlwZSBPblJlZHVjZXI8UywgQyBleHRlbmRzIEFycmF5PEFjdGlvbkNyZWF0b3I+PiA9IChzdGF0ZTogUywgYWN0aW9uOiBBY3Rpb25UeXBlPENbbnVtYmVyXT4pID0+IFM7XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPbjxTPiB7XG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8Uz47XG4gIHR5cGVzOiBBcnJheTxzdHJpbmc+O1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCB0eXBlIEFjdGlvblR5cGU8QT4gPSBBIGV4dGVuZHMgQWN0aW9uQ3JlYXRvcjxpbmZlciBULCBpbmZlciBDPlxuICA/IFJldHVyblR5cGU8Qz4gJiB7XG4gICAgICB0eXBlOiBUO1xuICAgIH1cbiAgOiBuZXZlcjtcbiJdfQ==