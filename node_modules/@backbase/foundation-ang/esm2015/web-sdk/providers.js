import { InjectionToken } from '@angular/core';
/**
 * @deprecated Will be removed in v7.0.0. Use the `PubSubService` class instead.
 */
export const PUBSUB = new InjectionToken('web-sdk-pubsub');
/**
 * @deprecated Will be removed in v7.0.0. Use the `SetLocaleService` class instead.
 */
export const SET_LOCALE = new InjectionToken('web-sdk-set-locale');
/**
 * @deprecated Will be removed in v7.0.0
 */
export const EMBEDDED_SERVICES = new InjectionToken('embedded platform services');
/**
 * @description
 * Service to reauthenticate a user.
 *
 * @example
 * export class SigningService {
 *   constructor(
 *     @Inject(REAUTHENTICATE) private reauthenticateService: ReauthenticateService,
 *   ) {
 *     this.reauthenticate(error);
 *   }
 *
 *   private reauthenticate(error: HttpErrorResponse) {
 *     const { acrValues, scope } = this.getChallenge(error);
 *     this.reauthenticateService.reauthenticate(scope, acrValues);
 *   }
 *
 *   private getReauthChallenge(error: HttpErrorResponse) {
 *     const challenges = error.error ? error.error.challenges : [];
 *     return challenges.find(c => c.scope !== undefined);
 *   }
 * }
 */
/**
 * @deprecated Will be removed in v7.0.0
 */
export const EXTERNAL_SERVICES = new InjectionToken('external platform services');
/**
 * @deprecated Will be removed in v7.0.0
 */
export const WEBSDK_SERVICE_MAP = new InjectionToken('Web SDK Service Map');
/**
 * @deprecated Will be removed in v7.0.0
 */
export function websdkServiceFactory(webSdkServiceMap, serviceKey) {
    if (!webSdkServiceMap) {
        return undefined;
    }
    const factory = webSdkServiceMap[serviceKey];
    if (!factory) {
        return undefined;
    }
    return factory(); // TS isn't smart enough to know that factory() is T.
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function navigationFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'navigation');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function pubsubFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'eventBus');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function portalContentFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'portalContent');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function setLocaleFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'setLocale');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkay9zcmMvcHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFjL0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQVMsZ0JBQWdCLENBQUMsQ0FBQztBQUNuRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsQ0FBWSxvQkFBb0IsQ0FBQyxDQUFDO0FBdUI5RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksY0FBYyxDQUFtQiw0QkFBNEIsQ0FBQyxDQUFDO0FBRXBHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBRUg7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FBbUIsNEJBQTRCLENBQUMsQ0FBQztBQUNwRzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFtQixxQkFBcUIsQ0FBQyxDQUFDO0FBRTlGOztHQUVHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUdsQyxnQkFBOEMsRUFBRSxVQUFhO0lBQzdELElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELE9BQU8sT0FBTyxFQUFPLENBQUMsQ0FBQyxxREFBcUQ7QUFDOUUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLGdCQUFtQztJQUNuRSxPQUFPLG9CQUFvQixDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxhQUFhLENBQUMsZ0JBQW1DO0lBQy9ELE9BQU8sb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFDLGdCQUFtQztJQUN0RSxPQUFPLG9CQUFvQixDQUFDLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxnQkFBbUM7SUFDbEUsT0FBTyxvQkFBb0IsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUM3RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtcbiAgTmF2aWdhdGlvbixcbiAgUHVic3ViLFxuICBQb3J0YWxDb250ZW50LFxuICBCYWNrYmFzZUF1dGgsXG4gIEh0dHBJbnRlcmNlcHRvcnMsXG4gIFJlZnJlc2gsXG4gIFNldExvY2FsZSxcbiAgUGFnZUNvbmZpZyxcbn0gZnJvbSAnQGJhY2tiYXNlL2xpYi1iYi1wYWdlLWJvb3RzdHJhcC1jZG4nO1xuaW1wb3J0IHsgUHJvcGVydHlSZXNvbHZlciB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9lbnRpdGxlbWVudHMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjAuIFVzZSB0aGUgYFB1YlN1YlNlcnZpY2VgIGNsYXNzIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQVUJTVUIgPSBuZXcgSW5qZWN0aW9uVG9rZW48UHVic3ViPignd2ViLXNkay1wdWJzdWInKTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMC4gVXNlIHRoZSBgU2V0TG9jYWxlU2VydmljZWAgY2xhc3MgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFNFVF9MT0NBTEUgPSBuZXcgSW5qZWN0aW9uVG9rZW48U2V0TG9jYWxlPignd2ViLXNkay1zZXQtbG9jYWxlJyk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdlYlNka1NlcnZpY2VNYXAge1xuICBwYWdlQ29uZmlnPzogKCkgPT4gUGFnZUNvbmZpZztcbiAgbmF2aWdhdGlvbj86ICgpID0+IE5hdmlnYXRpb247XG4gIGV2ZW50QnVzPzogKCkgPT4gUHVic3ViO1xuICBwb3J0YWxDb250ZW50PzogKCkgPT4gUG9ydGFsQ29udGVudDtcbiAgYXV0aD86ICgpID0+IEJhY2tiYXNlQXV0aDtcbiAgaHR0cEludGVyY2VwdG9ycz86ICgpID0+IEh0dHBJbnRlcmNlcHRvcnM7XG4gIHJlZnJlc2g/OiAoKSA9PiBSZWZyZXNoO1xuICBzZXRMb2NhbGU/OiAoKSA9PiBTZXRMb2NhbGU7XG4gIGNvbmRpdGlvbnM/OiAoKSA9PiBQaWNrPFByb3BlcnR5UmVzb2x2ZXIsICdyZXNvbHZlRW50aXRsZW1lbnRzJz47XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVybmFsU2VydmljZXMge1xuICBba2V5OiBzdHJpbmddOiAoKSA9PiBhbnk7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEVNQkVEREVEX1NFUlZJQ0VTID0gbmV3IEluamVjdGlvblRva2VuPFdlYlNka1NlcnZpY2VNYXA+KCdlbWJlZGRlZCBwbGF0Zm9ybSBzZXJ2aWNlcycpO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogU2VydmljZSB0byByZWF1dGhlbnRpY2F0ZSBhIHVzZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGV4cG9ydCBjbGFzcyBTaWduaW5nU2VydmljZSB7XG4gKiAgIGNvbnN0cnVjdG9yKFxuICogICAgIEBJbmplY3QoUkVBVVRIRU5USUNBVEUpIHByaXZhdGUgcmVhdXRoZW50aWNhdGVTZXJ2aWNlOiBSZWF1dGhlbnRpY2F0ZVNlcnZpY2UsXG4gKiAgICkge1xuICogICAgIHRoaXMucmVhdXRoZW50aWNhdGUoZXJyb3IpO1xuICogICB9XG4gKlxuICogICBwcml2YXRlIHJlYXV0aGVudGljYXRlKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICogICAgIGNvbnN0IHsgYWNyVmFsdWVzLCBzY29wZSB9ID0gdGhpcy5nZXRDaGFsbGVuZ2UoZXJyb3IpO1xuICogICAgIHRoaXMucmVhdXRoZW50aWNhdGVTZXJ2aWNlLnJlYXV0aGVudGljYXRlKHNjb3BlLCBhY3JWYWx1ZXMpO1xuICogICB9XG4gKlxuICogICBwcml2YXRlIGdldFJlYXV0aENoYWxsZW5nZShlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAqICAgICBjb25zdCBjaGFsbGVuZ2VzID0gZXJyb3IuZXJyb3IgPyBlcnJvci5lcnJvci5jaGFsbGVuZ2VzIDogW107XG4gKiAgICAgcmV0dXJuIGNoYWxsZW5nZXMuZmluZChjID0+IGMuc2NvcGUgIT09IHVuZGVmaW5lZCk7XG4gKiAgIH1cbiAqIH1cbiAqL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEVYVEVSTkFMX1NFUlZJQ0VTID0gbmV3IEluamVjdGlvblRva2VuPFdlYlNka1NlcnZpY2VNYXA+KCdleHRlcm5hbCBwbGF0Zm9ybSBzZXJ2aWNlcycpO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBXRUJTREtfU0VSVklDRV9NQVAgPSBuZXcgSW5qZWN0aW9uVG9rZW48V2ViU2RrU2VydmljZU1hcD4oJ1dlYiBTREsgU2VydmljZSBNYXAnKTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjcuMC4wXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3ZWJzZGtTZXJ2aWNlRmFjdG9yeTxcbiAgSyBleHRlbmRzIGtleW9mIFdlYlNka1NlcnZpY2VNYXAsXG4gIFQgZXh0ZW5kcyBSZXR1cm5UeXBlPFJlcXVpcmVkPFdlYlNka1NlcnZpY2VNYXA+W0tdPlxuPih3ZWJTZGtTZXJ2aWNlTWFwOiBXZWJTZGtTZXJ2aWNlTWFwIHwgdW5kZWZpbmVkLCBzZXJ2aWNlS2V5OiBLKTogVCB8IHVuZGVmaW5lZCB7XG4gIGlmICghd2ViU2RrU2VydmljZU1hcCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgY29uc3QgZmFjdG9yeSA9IHdlYlNka1NlcnZpY2VNYXBbc2VydmljZUtleV07XG4gIGlmICghZmFjdG9yeSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGZhY3RvcnkoKSBhcyBUOyAvLyBUUyBpc24ndCBzbWFydCBlbm91Z2ggdG8ga25vdyB0aGF0IGZhY3RvcnkoKSBpcyBULlxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpb25GYWN0b3J5KHdlYlNka1NlcnZpY2VNYXA/OiBXZWJTZGtTZXJ2aWNlTWFwKTogTmF2aWdhdGlvbiB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiB3ZWJzZGtTZXJ2aWNlRmFjdG9yeSh3ZWJTZGtTZXJ2aWNlTWFwLCAnbmF2aWdhdGlvbicpO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2Ny4wLjBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1YnN1YkZhY3Rvcnkod2ViU2RrU2VydmljZU1hcD86IFdlYlNka1NlcnZpY2VNYXApOiBQdWJzdWIgfCB1bmRlZmluZWQge1xuICByZXR1cm4gd2Vic2RrU2VydmljZUZhY3Rvcnkod2ViU2RrU2VydmljZU1hcCwgJ2V2ZW50QnVzJyk7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9ydGFsQ29udGVudEZhY3Rvcnkod2ViU2RrU2VydmljZU1hcD86IFdlYlNka1NlcnZpY2VNYXApOiBQb3J0YWxDb250ZW50IHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHdlYnNka1NlcnZpY2VGYWN0b3J5KHdlYlNka1NlcnZpY2VNYXAsICdwb3J0YWxDb250ZW50Jyk7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY3LjAuMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TG9jYWxlRmFjdG9yeSh3ZWJTZGtTZXJ2aWNlTWFwPzogV2ViU2RrU2VydmljZU1hcCk6IFNldExvY2FsZSB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiB3ZWJzZGtTZXJ2aWNlRmFjdG9yeSh3ZWJTZGtTZXJ2aWNlTWFwLCAnc2V0TG9jYWxlJyk7XG59XG4iXX0=