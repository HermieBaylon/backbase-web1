import { NgModule, Optional } from '@angular/core';
import { PAGE_CONFIG, getPageConfig } from './page-config';
import { EXTERNAL_SERVICES, WEBSDK_SERVICE_MAP, PUBSUB, navigationFactory, pubsubFactory, portalContentFactory, SET_LOCALE, setLocaleFactory, EMBEDDED_SERVICES, } from './providers';
import { CONDITIONS } from '@backbase/foundation-ang/entitlements';
import { AUTH_EVENTS, getAuthEvents, httpInterceptorsFactory, HTTP_INTERCEPTORS, LOGIN, loginFactory, LOGOUT, logoutFactory, NAVIGATION, PORTAL_CONTENT, REAUTHENTICATE, reauthenticateFactory, REFRESH, refreshFactory, SESSION, sessionFactory, setConditionsFactory, } from './deprecated/providers';
export function getWebSdkServiceMap(externalServices, embeddedServices) {
    return Object.assign(Object.assign({}, embeddedServices), externalServices);
}
const ɵ0 = getPageConfig, ɵ1 = navigationFactory, ɵ2 = pubsubFactory, ɵ3 = portalContentFactory, ɵ4 = loginFactory, ɵ5 = logoutFactory, ɵ6 = sessionFactory, ɵ7 = reauthenticateFactory, ɵ8 = httpInterceptorsFactory, ɵ9 = refreshFactory, ɵ10 = setLocaleFactory, ɵ11 = setConditionsFactory, ɵ12 = getAuthEvents;
/**
 * Provides the following services:
 *
 * - `PageConfig`
 * - `Navigation`
 * - `Pubsub`
 * - `PortalConten`
 * - `LoginService`
 * - `LogoutService`
 * - `SessionService`
 * - `ReauthenticateService`
 * - `HttpInterceptors`
 * - `Refresh`
 * - `SetLocale`
 * - `Conditions`
 *
 * Notes:
 *  - The implementations of these services are provided via the Lean Page.
 *  - You must use the following injection tokens to any of inject these services.
 *
 * @usageNotes
 *
 * ```
 * constructor(
 *   @Inject(PAGE_CONFIG) pageConfig: PageConfig,
 *   @Inject(NAVIGATION) navigation: Navigation,
 *   @Inject(PUBSUB) pubsub: Pubsub,
 *   @Inject(PORTAL_CONTENT) portalContent: PortalContent
 *   @Inject(LOGIN) login: LoginService,
 *   @Inject(LOGOUT) logout: LogoutService,
 *   @Inject(SESSION) session: SessionService,
 *   @Inject(REAUTHENTICATE) reauthenticate: ReauthenticateService,
 *   @Inject(HTTP_INTERCEPTORS) httpInterceptors, HttpInterceptors,
 *   @Inject(REFRESH) refresh: Refresh,
 *   @Inject(SET_LOCALE) setLocale: SetLocale,
 *   @Inject(CONDITIONS) conditions: Conditions,
 * ) {}
 * ```
 */
export class WebSdkApiModule {
}
WebSdkApiModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                providers: [
                    {
                        provide: WEBSDK_SERVICE_MAP,
                        useFactory: getWebSdkServiceMap,
                        deps: [
                            [new Optional(), EXTERNAL_SERVICES],
                            [new Optional(), EMBEDDED_SERVICES],
                        ],
                    },
                    {
                        provide: PAGE_CONFIG,
                        useFactory: ɵ0,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: NAVIGATION,
                        useFactory: ɵ1,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: PUBSUB,
                        useFactory: ɵ2,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: PORTAL_CONTENT,
                        useFactory: ɵ3,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: LOGIN,
                        useFactory: ɵ4,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: LOGOUT,
                        useFactory: ɵ5,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: SESSION,
                        useFactory: ɵ6,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: REAUTHENTICATE,
                        useFactory: ɵ7,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: HTTP_INTERCEPTORS,
                        useFactory: ɵ8,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: REFRESH,
                        useFactory: ɵ9,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: SET_LOCALE,
                        useFactory: ɵ10,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: CONDITIONS,
                        useFactory: ɵ11,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                    {
                        provide: AUTH_EVENTS,
                        useFactory: ɵ12,
                        deps: [WEBSDK_SERVICE_MAP],
                    },
                ],
            },] }
];
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9, ɵ10, ɵ11, ɵ12 };
//# sourceMappingURL=data:application/json;base64,