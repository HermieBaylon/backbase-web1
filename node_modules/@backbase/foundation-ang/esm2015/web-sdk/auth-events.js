import { from, fromEventPattern, ReplaySubject } from 'rxjs';
/**
 * Convert a pubsub event to a replay subject.
 */
const fromPubsub = (eventName, pubsub) => {
    const pubsubObservable = fromEventPattern(function (handler) {
        return pubsub.subscribe(eventName, handler);
    }, function (_, unsubscribe) {
        unsubscribe();
    });
    // Subscribe now, and cache with ReplaySubject
    const pubsubReplay = new ReplaySubject(1);
    pubsubObservable.subscribe(pubsubReplay);
    return pubsubReplay;
};
const ɵ0 = fromPubsub;
/**
 * We wrap the pubsub events from web-sdk in streams.
 *
 * The main reason to do this is to ensure that we are subscribing to these
 * events *before* they emit. We'll then ensure they replay
 */
export const wrapAuthEvents = (auth, pubsub) => ({
    init: from(auth.initToken),
    success: fromPubsub('auth:success', pubsub),
    end: fromPubsub('auth:end', pubsub),
    error: fromPubsub('auth:error', pubsub),
});
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ldmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy93ZWItc2RrL3NyYy9hdXRoLWV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQW1DekU7O0dBRUc7QUFDSCxNQUFNLFVBQVUsR0FBRyxDQUFXLFNBQWlCLEVBQUUsTUFBYyxFQUFvQixFQUFFO0lBQ25GLE1BQU0sZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQ3ZDLFVBQVUsT0FBTztRQUNmLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxFQUNELFVBQVUsQ0FBQyxFQUFFLFdBQVc7UUFDdEIsV0FBVyxFQUFFLENBQUM7SUFDaEIsQ0FBQyxDQUNGLENBQUM7SUFDRiw4Q0FBOEM7SUFDOUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxhQUFhLENBQUksQ0FBQyxDQUFDLENBQUM7SUFDN0MsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQzs7QUFPRjs7Ozs7R0FLRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQWtCLEVBQUUsTUFBYyxFQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ2pGLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixPQUFPLEVBQUUsVUFBVSxDQUFjLGNBQWMsRUFBRSxNQUFNLENBQUM7SUFDeEQsR0FBRyxFQUFFLFVBQVUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDO0lBQ25DLEtBQUssRUFBRSxVQUFVLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQztDQUN4QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tLCBmcm9tRXZlbnRQYXR0ZXJuLCBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCYWNrYmFzZUF1dGggYXMgQmFja2Jhc2VBdXRoQ2RuLCBQdWJzdWIgfSBmcm9tICdAYmFja2Jhc2UvbGliLWJiLXBhZ2UtYm9vdHN0cmFwLWNkbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzVG9rZW4ge1xuICByYXc6IHN0cmluZztcbiAgcGFyc2VkOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aFN1Y2Nlc3Mge1xuICBjdXJyZW50QWNjZXNzVG9rZW46IEFjY2Vzc1Rva2VuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhFdmVudHMge1xuICAvKipcbiAgICogRW1pdHMgb25jZSBhZnRlciBhdXRob3Jpc2F0aW9uIGlzIGluaXRpYXRlZCwgdGhlbiBjb21wbGV0ZXMuXG4gICAqXG4gICAqIElmIHRoZSB1c2VyIGlzIGF1dGhvcmlzZWQsIGVtaXRzIHdpdGggQWNjZXNzVG9rZW4uXG4gICAqXG4gICAqIElmIHRoZSB1c2VyIGlzIG5vdCBhdXRob3Jpc2VkLCBlbWl0cyB3aXRoIHVuZGVmaW5lZDtcbiAgICovXG4gIGluaXQ6IE9ic2VydmFibGU8QXV0aFN1Y2Nlc3MgfCB1bmRlZmluZWQ+O1xuICAvKipcbiAgICogRW1pdHMgd2hlbiBhIHVzZXIgaXMgc3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQuXG4gICAqL1xuICBzdWNjZXNzOiBPYnNlcnZhYmxlPEF1dGhTdWNjZXNzPjtcbiAgLyoqXG4gICAqIEVtaXRzIHdoZW4gdGhlIHNlc3Npb24gZW5kcy5cbiAgICovXG4gIGVuZDogT2JzZXJ2YWJsZTx2b2lkPjtcbiAgLyoqXG4gICAqIEVtaXRzIGlmIHRoZXJlIHdhcyBhbiBlcnJvciBkdXJpbmcgYXV0aGVudGljYXRpb24uXG4gICAqL1xuICBlcnJvcjogT2JzZXJ2YWJsZTx2b2lkPjtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgcHVic3ViIGV2ZW50IHRvIGEgcmVwbGF5IHN1YmplY3QuXG4gKi9cbmNvbnN0IGZyb21QdWJzdWIgPSA8VCA9IHZvaWQ+KGV2ZW50TmFtZTogc3RyaW5nLCBwdWJzdWI6IFB1YnN1Yik6IFJlcGxheVN1YmplY3Q8VD4gPT4ge1xuICBjb25zdCBwdWJzdWJPYnNlcnZhYmxlID0gZnJvbUV2ZW50UGF0dGVybjxUPihcbiAgICBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgcmV0dXJuIHB1YnN1Yi5zdWJzY3JpYmUoZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChfLCB1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9LFxuICApO1xuICAvLyBTdWJzY3JpYmUgbm93LCBhbmQgY2FjaGUgd2l0aCBSZXBsYXlTdWJqZWN0XG4gIGNvbnN0IHB1YnN1YlJlcGxheSA9IG5ldyBSZXBsYXlTdWJqZWN0PFQ+KDEpO1xuICBwdWJzdWJPYnNlcnZhYmxlLnN1YnNjcmliZShwdWJzdWJSZXBsYXkpO1xuICByZXR1cm4gcHVic3ViUmVwbGF5O1xufTtcblxuLy8gQHRvZG86IHJlbW92ZSB3aGVuIGxlYW4gY2xpZW50IGFkZHMgdGhpc1xuZXhwb3J0IGludGVyZmFjZSBCYWNrYmFzZUF1dGggZXh0ZW5kcyBCYWNrYmFzZUF1dGhDZG4ge1xuICBpbml0VG9rZW46IFByb21pc2U8QXV0aFN1Y2Nlc3MgfCB1bmRlZmluZWQ+O1xufVxuXG4vKipcbiAqIFdlIHdyYXAgdGhlIHB1YnN1YiBldmVudHMgZnJvbSB3ZWItc2RrIGluIHN0cmVhbXMuXG4gKlxuICogVGhlIG1haW4gcmVhc29uIHRvIGRvIHRoaXMgaXMgdG8gZW5zdXJlIHRoYXQgd2UgYXJlIHN1YnNjcmliaW5nIHRvIHRoZXNlXG4gKiBldmVudHMgKmJlZm9yZSogdGhleSBlbWl0LiBXZSdsbCB0aGVuIGVuc3VyZSB0aGV5IHJlcGxheVxuICovXG5leHBvcnQgY29uc3Qgd3JhcEF1dGhFdmVudHMgPSAoYXV0aDogQmFja2Jhc2VBdXRoLCBwdWJzdWI6IFB1YnN1Yik6IEF1dGhFdmVudHMgPT4gKHtcbiAgaW5pdDogZnJvbShhdXRoLmluaXRUb2tlbiksXG4gIHN1Y2Nlc3M6IGZyb21QdWJzdWI8QXV0aFN1Y2Nlc3M+KCdhdXRoOnN1Y2Nlc3MnLCBwdWJzdWIpLFxuICBlbmQ6IGZyb21QdWJzdWIoJ2F1dGg6ZW5kJywgcHVic3ViKSxcbiAgZXJyb3I6IGZyb21QdWJzdWIoJ2F1dGg6ZXJyb3InLCBwdWJzdWIpLFxufSk7XG4iXX0=