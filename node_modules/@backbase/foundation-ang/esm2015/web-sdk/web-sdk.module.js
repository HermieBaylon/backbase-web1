import { Inject, InjectionToken, LOCALE_ID, NgModule, Optional, SkipSelf } from '@angular/core';
import { AuthKind, initialise } from '@backbase/lib-bb-page-bootstrap-cdn';
import { navigationFactory, portalContentFactory, PUBSUB, SET_LOCALE, WEBSDK_SERVICE_MAP, } from './providers';
import { PubSubService } from './pub-sub.service';
import { getPageConfig, PAGE_CONFIG } from './page-config';
import { EntitlementsModule } from '@backbase/foundation-ang/entitlements';
import { AUTH_EVENTS, getAuthEvents, HTTP_INTERCEPTORS, httpInterceptorsFactory, LOGIN, loginFactory, LOGOUT, logoutFactory, NAVIGATION, PORTAL_CONTENT, REAUTHENTICATE, reauthenticateFactory, REFRESH, refreshFactory, SESSION, sessionFactory, } from './deprecated/providers';
import { SetLocaleService } from './set-locale.service';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const WEBSDK_CONFIG = new InjectionToken('web sdk config');
/**
 * @deprecated Will be removed in v7.0.0
 */
export function setLocaleFactory(setLocale) {
    const setLocale$ = setLocale;
    return setLocale$.setLocaleLegacy;
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function bootstrapWebsdkService(config, locale) {
    const locales = config.locales || [locale];
    if (!locales.includes(locale)) {
        locales.push(locale);
    }
    const rawConfig = Object.assign(Object.assign({ apiRoot: config.apiRoot || '/api', locale, staticResourcesRoot: '/' }, config), { locales: locales.join(','), auth: Object.assign(Object.assign({ authUrl: '/auth', clientId: 'bb-web-client', realm: 'backbase', scope: 'openid' }, config.auth), { kind: AuthKind.Hybrid, loginPageUrl: '', landingPageUrl: '' }) });
    const { pageConfig, pubsub, navigation, portalContent, auth, httpInterceptors, itemRefresher, setLocale, conditions, } = initialise(rawConfig);
    return {
        pageConfig: () => pageConfig,
        navigation: () => navigation,
        eventBus: () => pubsub,
        portalContent: () => portalContent,
        auth: () => auth,
        httpInterceptors: () => httpInterceptors,
        refresh: () => itemRefresher.refresh,
        setLocale: () => setLocale,
        conditions: () => conditions,
    };
}
export class WebSdkModule {
    constructor(config, parentModule) {
        if (parentModule) {
            throw new TypeError(`WebSdkModule is imported twice. It should only be imported in the AppModule`);
        }
        if (!config) {
            throw new Error('WebSdkModule must be imported with WebSdkModule.forRoot(...)');
        }
    }
    /**
     * Add the `WebSdkModule` to your application's `AppModule` to embed the
     * web-sdk services into your application. This allows you to deploy your
     * application outside of an Experience, without the Lean Page.
     *
     * Note: Any services created via `environment.bootstrap.services` will
     * overwrite the services from this module.
     *
     * This module provides all the services from `WebSdkApiAng`.
     *
     * Importing this module will automatically enable the hybrid auth flow.
     *
     * @usageNotes
     *
     * ```
     * NgModule({
     *  declarations: [AppComponent],
     *  imports: [
     *    ...
     *    WebSdkModule.forRoot(),
     *  ],
     *  bootstrap: [AppComponent],
     * })
     * export class AppModule {}
     * ```
     */
    static forRoot(config = {}) {
        return {
            ngModule: WebSdkModule,
            providers: [
                {
                    provide: WEBSDK_CONFIG,
                    useValue: config,
                },
                {
                    provide: WEBSDK_SERVICE_MAP,
                    useFactory: bootstrapWebsdkService,
                    deps: [WEBSDK_CONFIG, LOCALE_ID],
                },
                {
                    provide: PAGE_CONFIG,
                    useFactory: getPageConfig,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: NAVIGATION,
                    useFactory: navigationFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: PORTAL_CONTENT,
                    useFactory: portalContentFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: LOGIN,
                    useFactory: loginFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: LOGOUT,
                    useFactory: logoutFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: SESSION,
                    useFactory: sessionFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: REAUTHENTICATE,
                    useFactory: reauthenticateFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useFactory: httpInterceptorsFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: REFRESH,
                    useFactory: refreshFactory,
                    deps: [WEBSDK_SERVICE_MAP],
                },
                {
                    provide: AUTH_EVENTS,
                    useFactory: getAuthEvents,
                    deps: [WEBSDK_SERVICE_MAP],
                },
            ],
        };
    }
}
WebSdkModule.decorators = [
    { type: NgModule, args: [{
                imports: [EntitlementsModule],
                providers: [
                    { provide: PUBSUB, useExisting: PubSubService },
                    {
                        provide: SET_LOCALE,
                        deps: [SetLocaleService],
                        useFactory: setLocaleFactory,
                    },
                ],
            },] }
];
WebSdkModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WEBSDK_CONFIG,] }] },
    { type: WebSdkModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,