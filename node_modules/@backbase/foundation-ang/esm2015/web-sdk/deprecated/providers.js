import { InjectionToken } from '@angular/core';
import { wrapAuthEvents } from '../auth-events';
import { websdkServiceFactory } from '../providers';
/**
 * @deprecated Will be removed in v7.0.0
 */
export const HTTP_INTERCEPTORS = new InjectionToken('web-sdk-http-interceptors');
/**
 * @deprecated Will be removed in v7.0.0
 */
export const REFRESH = new InjectionToken('web-sdk-refresh');
/**
 * @deprecated Will be removed in v7.0.0
 */
export const NAVIGATION = new InjectionToken('web-sdk-navigation');
/**
 * @deprecated Will be removed in v7.0.0
 */
export const PORTAL_CONTENT = new InjectionToken('web-sdk-portal-content');
/**
 * @deprecated Will be removed in v7.0.0
 */
export const AUTH_EVENTS = new InjectionToken('Web SDK auth event streams');
/**
 *
 * @deprecated Will be removed in v7.0.0
 *
 * @description
 * Token to get instance of LoginService.
 * Example of the use case: to implement custom login widget.
 *
 * @example
 * constructor(@Inject(LOGIN) private loginService: LoginService) {}
 */
export const LOGIN = new InjectionToken('web-sdk-login');
/**
 *
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of LogoutService.
 * Examples of the use cases: to implement custom logout widget or to logout user based on some custom logic.
 *
 * @example
 * constructor(@Inject(LOGOUT) private logoutService: LogoutService) {}
 */
export const LOGOUT = new InjectionToken('web-sdk-logout');
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of SessionService.
 * Examples of the use cases:
 * - to register custom countdown to show modal before session is over
 * - to refresh session.
 *
 * @example
 * constructor(@Inject(SESSION) private sessionService: SessionService) {}.
 */
export const SESSION = new InjectionToken('web-sdk-session');
/**
 * @deprecated Will be removed in v7.0.0
 * @description
 * Token to get instance of ReauthenticateService.
 * Examples of the use cases:
 * - to reauthenticate a user.
 *
 * @example
 * constructor(@Inject(REAUTHENTICATE) private reauthenticateService: ReauthenticateService) {}.
 */
export const REAUTHENTICATE = new InjectionToken('web-sdk-reauthenticate');
/**
 * This returns a BackbaseAuth, but with the `keysToCheck` as required, not optional.
 */
function getAuth(serviceName, keysToCheck, externalServices, optionalKeys) {
    const auth = websdkServiceFactory(externalServices, 'auth');
    if (!auth) {
        throw new Error('Authentication Service is not available.');
    }
    keysToCheck.forEach((key) => {
        if (!auth[key] && !(optionalKeys === null || optionalKeys === void 0 ? void 0 : optionalKeys.includes(key))) {
            throw new Error(`'${serviceName}' Service cannot be injected because '${key}' is not available in authentication '${auth.config.kind}' strategy.`);
        }
    });
    return auth; // this is guaranteed by the above checks
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function loginFactory(webSdkServiceMap) {
    const auth = getAuth('Login', ['login'], webSdkServiceMap);
    return {
        login: auth.login,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function logoutFactory(webSdkServiceMap) {
    const auth = getAuth('Logout', ['logout', 'goToLoginPage'], webSdkServiceMap);
    return {
        logout: auth.logout,
        goToLoginPage: auth.goToLoginPage,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function sessionFactory(webSdkServiceMap) {
    const auth = getAuth('Session', ['register', 'refresh', 'timeToLive', 'isImpersonated'], webSdkServiceMap, [
        'isImpersonated',
    ]);
    return {
        registerCountdown: auth.register,
        refresh: auth.refresh,
        timeToLive: auth.timeToLive,
        isImpersonated: auth.isImpersonated ? auth.isImpersonated() : false,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function reauthenticateFactory(webSdkServiceMap) {
    const auth = getAuth('Reauthenticate', ['reauthenticate'], webSdkServiceMap);
    return {
        reauthenticate: auth.reauthenticate,
    };
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function getAuthEvents(webSdkServices) {
    if (!webSdkServices.auth || !webSdkServices.eventBus) {
        throw new Error('Unable to listen to auth events');
    }
    // @todo: remove 'as any' when web-sdk updates BackbaseAuth
    return wrapAuthEvents(webSdkServices.auth(), webSdkServices.eventBus());
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function refreshFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'refresh');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function httpInterceptorsFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'httpInterceptors');
}
/**
 * @deprecated Will be removed in v7.0.0
 */
export function setConditionsFactory(webSdkServiceMap) {
    return websdkServiceFactory(webSdkServiceMap, 'conditions');
}
//# sourceMappingURL=data:application/json;base64,