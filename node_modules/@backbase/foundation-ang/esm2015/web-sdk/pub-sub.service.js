import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class PubSubService {
    constructor() {
        this.getListeners = (string) => this.listenersMap.get(string) || [];
        this.listenersMap = new Map();
    }
    publish(string, payload) {
        const listeners = this.getListeners(string);
        listeners.forEach(listener => {
            try {
                listener(payload);
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    subscribe(string, listener) {
        const listeners = this.getListeners(string);
        const newListeners = [...listeners, listener];
        this.listenersMap.set(string, newListeners);
        return () => {
            this.unsubscribe(string, listener);
        };
    }
    unsubscribe(string, listener) {
        const listeners = this.getListeners(string);
        const newListeners = listeners.filter(currentListener => currentListener !== listener);
        this.listenersMap.set(string, newListeners);
    }
    unsubscribeAll() {
        this.listenersMap.clear();
    }
}
PubSubService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PubSubService_Factory() { return new PubSubService(); }, token: PubSubService, providedIn: "root" });
PubSubService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PubSubService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHViLXN1Yi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvd2ViLXNkay9zcmMvcHViLXN1Yi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNDLE1BQU0sT0FBTyxhQUFhO0lBS3hCO1FBRlEsaUJBQVksR0FBRyxDQUFDLE1BQWMsRUFBOEIsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUd6RyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxFQUFzQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxPQUFPLENBQUksTUFBYyxFQUFFLE9BQVU7UUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzNCLElBQUk7Z0JBQ0YsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ25CO1lBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVMsQ0FBSSxNQUFjLEVBQUUsUUFBMkI7UUFDdEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxNQUFNLFlBQVksR0FBRyxDQUFDLEdBQUcsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM1QyxPQUFPLEdBQUcsRUFBRTtZQUNWLElBQUksQ0FBQyxXQUFXLENBQUksTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXLENBQUksTUFBYyxFQUFFLFFBQTJCO1FBQ3hELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLGVBQWUsS0FBSyxRQUFRLENBQUMsQ0FBQztRQUN2RixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7WUF4Q0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHVic3ViTGlzdGVuZXIgfSBmcm9tICcuL3B1YmxpYy1hcGknO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUHViU3ViU2VydmljZSB7XG4gIHByaXZhdGUgbGlzdGVuZXJzTWFwOiBNYXA8c3RyaW5nLCBBcnJheTxQdWJzdWJMaXN0ZW5lcjxhbnk+Pj47XG5cbiAgcHJpdmF0ZSBnZXRMaXN0ZW5lcnMgPSAoc3RyaW5nOiBzdHJpbmcpOiBBcnJheTxQdWJzdWJMaXN0ZW5lcjxhbnk+PiA9PiB0aGlzLmxpc3RlbmVyc01hcC5nZXQoc3RyaW5nKSB8fCBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxpc3RlbmVyc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBBcnJheTxQdWJzdWJMaXN0ZW5lcjxhbnk+Pj4oKTtcbiAgfVxuXG4gIHB1Ymxpc2g8VD4oc3RyaW5nOiBzdHJpbmcsIHBheWxvYWQ6IFQpOiB2b2lkIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVycyhzdHJpbmcpO1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKHBheWxvYWQpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdWJzY3JpYmU8VD4oc3RyaW5nOiBzdHJpbmcsIGxpc3RlbmVyOiBQdWJzdWJMaXN0ZW5lcjxUPik6ICgpID0+IHZvaWQge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuZ2V0TGlzdGVuZXJzKHN0cmluZyk7XG4gICAgY29uc3QgbmV3TGlzdGVuZXJzID0gWy4uLmxpc3RlbmVycywgbGlzdGVuZXJdO1xuICAgIHRoaXMubGlzdGVuZXJzTWFwLnNldChzdHJpbmcsIG5ld0xpc3RlbmVycyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmU8VD4oc3RyaW5nLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlPFQ+KHN0cmluZzogc3RyaW5nLCBsaXN0ZW5lcjogUHVic3ViTGlzdGVuZXI8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVycyhzdHJpbmcpO1xuICAgIGNvbnN0IG5ld0xpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoY3VycmVudExpc3RlbmVyID0+IGN1cnJlbnRMaXN0ZW5lciAhPT0gbGlzdGVuZXIpO1xuICAgIHRoaXMubGlzdGVuZXJzTWFwLnNldChzdHJpbmcsIG5ld0xpc3RlbmVycyk7XG4gIH1cblxuICB1bnN1YnNjcmliZUFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLmxpc3RlbmVyc01hcC5jbGVhcigpO1xuICB9XG59XG4iXX0=