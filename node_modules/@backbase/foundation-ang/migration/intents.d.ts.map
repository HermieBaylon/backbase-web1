{"version":3,"file":"intents.d.ts","sources":["intents.d.ts"],"names":[],"mappingssourcesContent":["import { InjectionToken, ModuleWithProviders } from '@angular/core';\nimport { PipelineSink, Sink, PipelineProcessorConfig, ӨItemNavigationService, ӨRootContainerService } from '@backbase/foundation-ang/core';\nexport declare function initIntents(intentBridgeService: IntentBridgeService): () => void;\n/**\n * @deprecated Will be removed in v7.0.0\n * A WA2 compatible Intent\n *\n * This is the interoperable format that is supported by both sides of the communication\n */\nexport interface Intent<T extends object = object> {\n    /** The name of the Intent used to identify it */\n    name: string;\n    /** Any extra data associated with the intent that can be used by the receiving side */\n    parameters: T;\n}\nexport declare class IntentNavigation {\n    go(url: string): void;\n}\nexport declare class IntentStorage {\n    static STORE_KEY: string;\n    get(): Intent | undefined;\n    clear(): void;\n    set(intent: Intent): void;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n * Describe the mapping of an incoming Intent to a RouteParam communication\n */\nexport interface IncomingIntentMapping<I extends Intent> {\n    /**\n     * Determine if the incoming intent can be handled by this mapper\n     *\n     * This will likely involve checking the name of the intent and that any required parameters were sent\n     */\n    guard: (intent: I) => intent is I;\n    /**\n     * Extract the value from the Intents parameters to be passed to the RouteParam communication group\n     */\n    extract: (parameters: I['parameters']) => string;\n    /**\n     * The name of the communication group that is the target of the resulting RouteParam communication\n     */\n    group: string;\n}\nexport declare const INTENT_INCOMING_MAPPING: InjectionToken<unknown>;\nexport declare class IntentBridgeService {\n    private readonly rootModel;\n    private readonly itemNavigation;\n    private readonly store;\n    private readonly handlers;\n    constructor(rootModel: ӨRootContainerService, itemNavigation: ӨItemNavigationService, store: IntentStorage, handlers: Array<IncomingIntentMapping<Intent<any>>>);\n    private handleIntentFromStorage;\n    handleIncomingIntent(): void;\n}\n/**\n * @deprecated Will be removed in v7.0.0\n * Intent Communication Transport\n *\n * Can be used in standalone development to configure communication using Intents.\n *\n * Note: This Transport does not currently support Input handling. Incoming Intents can be handled\n * by mapping them to a RouteParam by providing an `IncomingIntentMapping`\n */\nexport declare class IntentIO {\n    /**\n     * Generate a serialized communication configuration suitable for use as a Widget Output property value.\n     *\n     * @param group The name of the communication group to which the Output belongs\n     */\n    static toProperty(group: string): string;\n}\nexport declare const INTENTS_OUTGOING_MAPPING: InjectionToken<unknown>;\n/**\n * @deprecated Will be removed in v7.0.0\n * Describe the mapping of an Output to an Intent\n */\nexport interface OutgoingIntentMapping<Output, I extends Intent> {\n    /** The name of the communication group targeted by the intent output */\n    group: string;\n    /** The URL on which the target is hosted */\n    targetUrl: string;\n    /** The name of the intent that will be created from the emitted output value */\n    intent: I['name'];\n    /** Create the intent parameters based on the emitted output value */\n    parameters: (output: Output) => I['parameters'];\n}\nexport declare class IntentPipeline<Output> implements PipelineSink<Output> {\n    private readonly navigator;\n    private readonly storage;\n    private readonly outgoingMappings;\n    constructor(navigator: IntentNavigation, storage: IntentStorage, outgoingMappings: Array<OutgoingIntentMapping<Output, Intent>>);\n    sink(group: string): Sink<Output>;\n}\nexport declare function createIntentPipeline<Output>(navigator: IntentNavigation, storage: IntentStorage, creators: Array<OutgoingIntentMapping<Output, Intent>>): IntentPipeline<Output>;\nexport declare const intentProcessorConfig: PipelineProcessorConfig<'intent'>;\n/**\n * @deprecated Will be removed in v7.0.0\n */\nexport declare class IntentsBridgeModule {\n    static forRoot(config: {\n        incoming: Array<IncomingIntentMapping<Intent<any>>>;\n        outgoing: Array<OutgoingIntentMapping<any, any>>;\n    }): ModuleWithProviders<IntentsBridgeModule>;\n}\n"]}