import { InjectionToken, ModuleWithProviders } from '@angular/core';
import { PipelineSink, Sink, PipelineProcessorConfig, ӨItemNavigationService, ӨRootContainerService } from '@backbase/foundation-ang/core';
export declare function initIntents(intentBridgeService: IntentBridgeService): () => void;
/**
 * @deprecated Will be removed in v7.0.0
 * A WA2 compatible Intent
 *
 * This is the interoperable format that is supported by both sides of the communication
 */
export interface Intent<T extends object = object> {
    /** The name of the Intent used to identify it */
    name: string;
    /** Any extra data associated with the intent that can be used by the receiving side */
    parameters: T;
}
export declare class IntentNavigation {
    go(url: string): void;
}
export declare class IntentStorage {
    static STORE_KEY: string;
    get(): Intent | undefined;
    clear(): void;
    set(intent: Intent): void;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Describe the mapping of an incoming Intent to a RouteParam communication
 */
export interface IncomingIntentMapping<I extends Intent> {
    /**
     * Determine if the incoming intent can be handled by this mapper
     *
     * This will likely involve checking the name of the intent and that any required parameters were sent
     */
    guard: (intent: I) => intent is I;
    /**
     * Extract the value from the Intents parameters to be passed to the RouteParam communication group
     */
    extract: (parameters: I['parameters']) => string;
    /**
     * The name of the communication group that is the target of the resulting RouteParam communication
     */
    group: string;
}
export declare const INTENT_INCOMING_MAPPING: InjectionToken<unknown>;
export declare class IntentBridgeService {
    private readonly rootModel;
    private readonly itemNavigation;
    private readonly store;
    private readonly handlers;
    constructor(rootModel: ӨRootContainerService, itemNavigation: ӨItemNavigationService, store: IntentStorage, handlers: Array<IncomingIntentMapping<Intent<any>>>);
    private handleIntentFromStorage;
    handleIncomingIntent(): void;
}
/**
 * @deprecated Will be removed in v7.0.0
 * Intent Communication Transport
 *
 * Can be used in standalone development to configure communication using Intents.
 *
 * Note: This Transport does not currently support Input handling. Incoming Intents can be handled
 * by mapping them to a RouteParam by providing an `IncomingIntentMapping`
 */
export declare class IntentIO {
    /**
     * Generate a serialized communication configuration suitable for use as a Widget Output property value.
     *
     * @param group The name of the communication group to which the Output belongs
     */
    static toProperty(group: string): string;
}
export declare const INTENTS_OUTGOING_MAPPING: InjectionToken<unknown>;
/**
 * @deprecated Will be removed in v7.0.0
 * Describe the mapping of an Output to an Intent
 */
export interface OutgoingIntentMapping<Output, I extends Intent> {
    /** The name of the communication group targeted by the intent output */
    group: string;
    /** The URL on which the target is hosted */
    targetUrl: string;
    /** The name of the intent that will be created from the emitted output value */
    intent: I['name'];
    /** Create the intent parameters based on the emitted output value */
    parameters: (output: Output) => I['parameters'];
}
export declare class IntentPipeline<Output> implements PipelineSink<Output> {
    private readonly navigator;
    private readonly storage;
    private readonly outgoingMappings;
    constructor(navigator: IntentNavigation, storage: IntentStorage, outgoingMappings: Array<OutgoingIntentMapping<Output, Intent>>);
    sink(group: string): Sink<Output>;
}
export declare function createIntentPipeline<Output>(navigator: IntentNavigation, storage: IntentStorage, creators: Array<OutgoingIntentMapping<Output, Intent>>): IntentPipeline<Output>;
export declare const intentProcessorConfig: PipelineProcessorConfig<'intent'>;
/**
 * @deprecated Will be removed in v7.0.0
 */
export declare class IntentsBridgeModule {
    static forRoot(config: {
        incoming: Array<IncomingIntentMapping<Intent<any>>>;
        outgoing: Array<OutgoingIntentMapping<any, any>>;
    }): ModuleWithProviders<IntentsBridgeModule>;
}
