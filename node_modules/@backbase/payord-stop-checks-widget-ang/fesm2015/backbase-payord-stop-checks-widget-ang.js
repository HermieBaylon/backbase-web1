import * as i5$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, InjectionToken, Injectable, Optional, Inject, ViewChild, NgModule } from '@angular/core';
import * as i11 from '@angular/forms';
import { Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import * as i1 from '@backbase/foundation-ang/core';
import { BbTemplate, RoutableWidget, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import * as i2 from '@backbase/ui-ang/fieldset';
import { FieldsetModule } from '@backbase/ui-ang/fieldset';
import * as i3 from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
import * as i4 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i5 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i6 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i7 from '@backbase/ui-ang/currency-input';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import * as i8 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i9 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i10 from '@backbase/ui-ang/textarea';
import { TextareaModule } from '@backbase/ui-ang/textarea';
import * as i13 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i1$1 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i2$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i3$1 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i2$2 from '@backbase/payment-orders-ang';
import { toInteger, pastDateValidator, ChecksService, PaymentOrdersUiModule } from '@backbase/payment-orders-ang';
import { map, withLatestFrom, switchMap, shareReplay, pluck, take, takeUntil } from 'rxjs/operators';
import * as i1$2 from '@backbase/data-ang/arrangements';
import * as i4$1 from '@backbase/ui-ang/notification';
import { __decorate, __metadata } from 'tslib';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import { IconModule } from '@backbase/ui-ang/icon';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import { ModalModule } from '@backbase/ui-ang/modal';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';

const arrangementsPageSize = 100;
const currencyFallback = 'USD';
var RequestStatus$1;
(function (RequestStatus) {
    RequestStatus["INIT"] = "INIT";
    RequestStatus["REVIEW"] = "REVIEW";
    RequestStatus["REQUEST_IS_SUBMITTED"] = "REQUEST_IS_SUBMITTED";
    RequestStatus["EDIT_MODE"] = "EDIT_MODE";
})(RequestStatus$1 || (RequestStatus$1 = {}));
var StopCheckReason;
(function (StopCheckReason) {
    StopCheckReason["INSUFFICIENT_FUNDS"] = "Insufficient funds";
    StopCheckReason["INCORRECT_AMOUNT"] = "Incorrect amount or other details";
    StopCheckReason["LOST_OR_STOLEN"] = "Lost or stolen checks or check books";
    StopCheckReason["WRONG_ADDRESS"] = "Checks mailed to wrong address";
    StopCheckReason["DISPUTE_OVER_PURCHASES"] = "Dispute over purchases";
    StopCheckReason["LOST_IN_MAIL"] = "Lost in Mail";
    StopCheckReason["OTHER"] = "Other";
})(StopCheckReason || (StopCheckReason = {}));
var StopCheckRequestType;
(function (StopCheckRequestType) {
    StopCheckRequestType["SINGLE"] = "single";
    StopCheckRequestType["MULTIPLE"] = "multiple";
})(StopCheckRequestType || (StopCheckRequestType = {}));

function clearErrorObject(errorObject, prop) {
    if (errorObject) {
        delete errorObject[prop];
        if (!Object.keys(errorObject).length) {
            return null;
        }
        else {
            return errorObject;
        }
    }
    else {
        return null;
    }
}
function getLastCheckLessThanFirstError(firstCheckNum, lastCheckNum) {
    const restErrors = lastCheckNum.errors;
    if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(firstCheckNum.value, 10) > parseInt(lastCheckNum.value, 10)) {
        return Object.assign(lastCheckNum.errors || {}, {
            biggerThenFirstCheckNumber: true,
        });
    }
    else if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(lastCheckNum.value, 10) >= parseInt(firstCheckNum.value, 10)) {
        return clearErrorObject(restErrors, 'biggerThenFirstCheckNumber');
    }
    else {
        return restErrors;
    }
}
function getCheckRangeError(firstCheckNum, lastCheckNum, range) {
    const restErrors = lastCheckNum.errors;
    if (range === 0) {
        return restErrors;
    }
    if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) >=
            range) {
        return Object.assign(lastCheckNum.errors || {}, { checkRangeError: true });
    }
    else if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) < range) {
        return clearErrorObject(restErrors, 'checkRangeError');
    }
    else {
        return restErrors;
    }
}

class StopCheckFormComponent {
    constructor(deprecationService) {
        this.deprecationService = deprecationService;
        this._showValidation = false;
        this.id = StopCheckFormComponent._id++;
        this.hostRef = this;
        this.accountFormat = {
            length: 0,
            maskRange: [0, 0],
            segments: 0,
        };
        /**
         * Event will be triggered on form submit
         */
        this.formSubmit = new EventEmitter();
        /**
         * Custom range number to identify maximum consecutive check number range.
         * Default value `0`
         */
        this.checksRangeNumber = 0;
        /**
         * Event will be triggered on payment cancel action
         */
        this.cancelForm = new EventEmitter();
    }
    get payFromControl() {
        return this.relativeFormGroup.get('payFromAccount');
    }
    /**
     * @deprecated since version 3.9.3
     * Validation errors in form appear on blur.
     */
    set showValidation(val) {
        this.deprecationService.logDeprecatedFeature(`StopChecksFormComponent: showValidation input is deprecated since version 3.9.3,
      validation errors in form appear on blur`);
        this._showValidation = val;
    }
    get showValidation() {
        return this._showValidation;
    }
    crossFormValidation(rangeNumber) {
        return ((group) => {
            const { controls, value } = group;
            const checkNum = controls.checkNumber;
            const firstCheckNum = controls.firstCheckNumber;
            const lastCheckNum = controls.lastCheckNumber;
            const checkNumValidators = [
                Validators.required,
                Validators.pattern(/^\d+$/),
            ];
            if (value['stopRangeType'] === StopCheckRequestType.SINGLE) {
                firstCheckNum.clearValidators();
                firstCheckNum.setErrors(null);
                lastCheckNum.clearValidators();
                lastCheckNum.setErrors(null);
                checkNum.setValidators(checkNumValidators);
            }
            else {
                checkNum.clearValidators();
                checkNum.setErrors(null);
                firstCheckNum.setValidators(checkNumValidators);
                lastCheckNum.setValidators(checkNumValidators);
                lastCheckNum.setErrors(getLastCheckLessThanFirstError(firstCheckNum, lastCheckNum));
                lastCheckNum.setErrors(getCheckRangeError(firstCheckNum, lastCheckNum, rangeNumber));
            }
        });
    }
    ngOnInit() {
        var _a, _b, _c;
        // populate value to show it in edit mode
        if (this.relativeFormGroup && ((_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.value['id'])) {
            const formValue = (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.value;
            // account selector component expect account number attribute name as 'number' which is not available in edit flow
            this.selectPayFromAccount(Object.assign(Object.assign({}, formValue), { number: formValue.accountNumber }));
        }
        (_c = this.relativeFormGroup) === null || _c === void 0 ? void 0 : _c.setValidators(this.crossFormValidation(this.checksRangeNumber));
        this.relativeFormGroup.updateValueAndValidity();
    }
    onCancelForm() {
        this.cancelForm.emit();
    }
    onBlurAccount() {
        var _a, _b, _c;
        if (this.selectedAccount) {
            return;
        }
        (_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.setErrors({ required: true });
        (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.markAsTouched();
        (_c = this.payFromControl) === null || _c === void 0 ? void 0 : _c.markAsDirty();
    }
    selectPayFromAccount(account) {
        var _a, _b;
        if (this.payFromControl && account.id) {
            this.payFromControl.setValue({
                id: account.id,
                name: account.name,
                accountType: account.accountType,
                accountNumber: account.accountNumber,
                currency: account.currency,
                balance: account.balance,
            });
            this.selectedAccount = account;
            (_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
            (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.markAsDirty();
        }
    }
    onSubmit() {
        const { controls } = this.relativeFormGroup;
        for (const control in controls) {
            if (controls.hasOwnProperty(control)) {
                controls[control].markAsTouched();
                controls[control].markAsDirty();
            }
        }
        this.formSubmit.emit();
    }
    getIdByControl(controlName) {
        return `${controlName}StopChecksError${this.id}`;
    }
    getDescribedby(controlName) {
        var _a;
        const control = (_a = this.relativeFormGroup) === null || _a === void 0 ? void 0 : _a.get(controlName);
        return (control === null || control === void 0 ? void 0 : control.invalid) && (control === null || control === void 0 ? void 0 : control.touched)
            ? this.getIdByControl(controlName)
            : null;
    }
    getDescribedbyBySubmit() {
        return (Object.keys(this.relativeFormGroup.controls)
            .reduce((acc, controlName) => {
            const errorId = this.getDescribedby(controlName);
            acc += errorId ? `${errorId} ` : '';
            return acc;
        }, '')
            .trim() || null);
    }
}
StopCheckFormComponent._id = 0;
/** @nocollapse */ StopCheckFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponent, deps: [{ token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopCheckFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckFormComponent, selector: "bb-stop-check-form", inputs: { showValidation: "showValidation", relativeFormGroup: "relativeFormGroup", payFromAccounts$: "payFromAccounts$", currencies: "currencies", checksRangeNumber: "checksRangeNumber" }, outputs: { formSubmit: "formSubmit", cancelForm: "cancelForm" }, ngImport: i0, template: "<ng-container\n  bbStopCheckFormComponentCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n<ng-template bbStopCheckFormComponentCustomizable let-hostRef>\n  <form\n    autocomplete=\"off\"\n    [formGroup]=\"hostRef.relativeFormGroup\"\n    (ngSubmit)=\"hostRef.onSubmit()\"\n  >\n    <bb-fieldset-ui\n      id=\"stop-checks-form-heading-{{ id }}\"\n      heading=\"Check details\"\n      i18n-heading=\"@@initiate-stop-check.check-details-fieldset-heading\"\n    >\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <label class=\"bb-form-field\">\n            <bb-account-selector-ui\n              [markFirst]=\"true\"\n              [highlight]=\"false\"\n              [filterItems]=\"true\"\n              [closeOnSelect]=\"true\"\n              dropdownPosition=\"bottom\"\n              placeholder=\"Select check account\"\n              data-role=\"pay-from-account-selector\"\n              [selectedItems]=\"hostRef.selectedAccount\"\n              [items]=\"hostRef.payFromAccounts$ | async\"\n              [productNumberFormat]=\"hostRef.accountFormat\"\n              (blur)=\"hostRef.onBlurAccount()\"\n              (change)=\"hostRef.selectPayFromAccount($event)\"\n              i18n-placeholder=\"@@initiate-stop-check.empty.state.placeholder\"\n              [aria-describedby]=\"hostRef.getDescribedby('payFromAccount')\"\n            ></bb-account-selector-ui>\n          </label>\n\n          <bb-input-validation-message-ui\n            [messageId]=\"hostRef.getIdByControl('payFromAccount')\"\n            *ngIf=\"hostRef.payFromControl as payFromControlRef\"\n            [showErrors]=\"\n              payFromControlRef.invalid && payFromControlRef.touched\n            \"\n          >\n            <span\n              *ngIf=\"\n                hostRef.payFromControl.errors?.required ||\n                !hostRef.selectedAccount\n              \"\n              data-role=\"missing-pay-from-account\"\n              i18n=\"@@initiate-stop-check.error.required.pay-from-account\"\n            >\n              Check account is required\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <bb-input-radio-group-ui\n            horizontal=\"true\"\n            data-role=\"radio-group\"\n            formControlName=\"stopRangeType\"\n            labelClasses=\"form-check-label\"\n            aria-labelledby=\"stop-checks-form-heading-{{ id }}\"\n          >\n            <bb-input-radio-ui\n              value=\"single\"\n              label=\"Single\"\n              i18n-label=\"@@initiate-stop-check.range-type.single.label\"\n            ></bb-input-radio-ui>\n            <bb-input-radio-ui\n              value=\"multiple\"\n              label=\"Multiple\"\n              i18n-label=\"@@initiate-stop-check.radio.range-type.multiple.label\"\n            ></bb-input-radio-ui>\n          </bb-input-radio-group-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div\n          class=\"form-group col-md-12\"\n          *ngIf=\"\n            hostRef.relativeFormGroup.get('stopRangeType')?.value === 'single'\n          \"\n        >\n          <bb-input-text-ui\n            [maxLength]=\"15\"\n            [aria-invalid]=\"\n              hostRef.relativeFormGroup?.get('checkNumber').invalid\n            \"\n            [required]=\"true\"\n            formControlName=\"checkNumber\"\n            label=\"Check number\"\n            i18n-label=\"@@initiate-stop-check.check-number-label\"\n            data-role=\"check-number\"\n            [aria-describedby]=\"hostRef.getDescribedby('checkNumber')\"\n          ></bb-input-text-ui>\n\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              hostRef.relativeFormGroup?.get(\n                'checkNumber'\n              ) as checkNumberControl\n            \"\n            [messageId]=\"hostRef.getIdByControl('checkNumber')\"\n            [showErrors]=\"\n              checkNumberControl.invalid && checkNumberControl.touched\n            \"\n          >\n            <span\n              *ngIf=\"checkNumberControl.errors?.required\"\n              data-role=\"validation-error-single-check-number-required\"\n              i18n=\"\n                @@initiate-stop-check.check-number.validation-error.required\"\n            >\n              Check number is required\n            </span>\n            <span\n              *ngIf=\"checkNumberControl.errors?.pattern\"\n              data-role=\"validation-error-check-number-digits-only\"\n              i18n=\"@@initiate-stop-check.check-number.validation-error.pattern\"\n            >\n              Check number should be digits only\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <ng-container\n        *ngIf=\"\n          hostRef.relativeFormGroup.get('stopRangeType')?.value === 'multiple'\n        \"\n      >\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <bb-input-text-ui\n              [maxLength]=\"15\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('firstCheckNumber').invalid &&\n                hostRef.relativeFormGroup?.get('firstCheckNumber').touched\n              \"\n              [required]=\"true\"\n              [aria-describedby]=\"hostRef.getDescribedby('firstCheckNumber')\"\n              formControlName=\"firstCheckNumber\"\n              label=\"First check number\"\n              i18n-label=\"@@initiate-stop-check.first-check-number.label\"\n              data-role=\"from-check-number\"\n            ></bb-input-text-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'firstCheckNumber'\n                ) as firstCheckNumberControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('firstCheckNumber')\"\n              [showErrors]=\"\n                firstCheckNumberControl.invalid &&\n                firstCheckNumberControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"firstCheckNumberControl.errors?.required\"\n                data-role=\"validation-error-first-check-number-required\"\n                i18n=\"\n                  @@initiate-stop-check.first-check-number.validation-error.required\"\n              >\n                First check number is required\n              </span>\n              <span\n                *ngIf=\"firstCheckNumberControl.errors?.pattern\"\n                data-role=\"validation-error-first-check-number-digits-only\"\n                i18n=\"\n                  @@initiate-stop-check.first-check-number.validation-error.pattern\"\n              >\n                Check number should be digits only\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <bb-input-text-ui\n              [maxLength]=\"15\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('lastCheckNumber').invalid &&\n                hostRef.relativeFormGroup?.get('lastCheckNumber').touched\n              \"\n              [required]=\"true\"\n              [aria-describedby]=\"hostRef.getDescribedby('lastCheckNumber')\"\n              formControlName=\"lastCheckNumber\"\n              label=\"Last check number\"\n              i18n-label=\"@@initiate-stop-check.last-check-number.label\"\n              data-role=\"to-check-number\"\n            ></bb-input-text-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'lastCheckNumber'\n                ) as lastCheckNumberControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('lastCheckNumber')\"\n              [showErrors]=\"\n                lastCheckNumberControl.invalid && lastCheckNumberControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.required\"\n                data-role=\"validation-error-last-check-number-required\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.required\"\n              >\n                Last check number is required\n              </span>\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.pattern\"\n                data-role=\"validation-error-last-check-number-digits-only\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.pattern\"\n              >\n                Check number should be digits only\n              </span>\n              <span\n                *ngIf=\"\n                  lastCheckNumberControl.errors?.biggerThenFirstCheckNumber\n                \"\n                data-role=\"validation-error-last-check-number-higher-than-previous\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.bigger\"\n              >\n                This needs to be higher then previous check number\n              </span>\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.checkRangeError\"\n                data-role=\"validation-error-last-check-number-out-of-range\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.range\"\n              >\n                This request cannot exceed\n                {{ hostRef.checksRangeNumber }} consecutive checks\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <ng-container\n        *ngIf=\"\n          hostRef.relativeFormGroup.get('stopRangeType')?.value === 'single'\n        \"\n      >\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              #stopCheckAmountCurrencyLabel\n              id=\"stop-check-amount-currency-label{{ id }}\"\n              i18n=\"@@initiate-stop-check.check-amount\"\n            >\n              Check amount\n            </label>\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-currency-input-ui\n              [currencies]=\"hostRef.currencies\"\n              [integerLabelSrOnly]=\"true\"\n              [decimalLabelSrOnly]=\"true\"\n              [aria-labelledby]=\"stopCheckAmountCurrencyLabel.id\"\n              resultType=\"string\"\n              maxlength=\"18\"\n              formControlName=\"amountGroup\"\n            ></bb-currency-input-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              #stopCheckDateIssuedLabel\n              id=\"stop-check-date-issued-label{{ id }}\"\n              i18n=\"@@initiate-stop-check.date-issued\"\n            >\n              Date issued\n            </label>\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-input-datepicker-ui\n              #dateIssued\n              name=\"dateIssued\"\n              overrideDateFormat=\"MM/dd/y\"\n              formControlName=\"dateIssued\"\n              [aria-labelledby]=\"stopCheckDateIssuedLabel.id\"\n              [aria-describedby]=\"hostRef.getDescribedby('dateIssued')\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('dateIssued').invalid &&\n                hostRef.relativeFormGroup?.get('dateIssued').touched\n              \"\n              [placeholder]=\"'MM/DD/YYYY'\"\n              data-role=\"date-issued\"\n            ></bb-input-datepicker-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'dateIssued'\n                ) as dateIssuedControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('dateIssued')\"\n              [showErrors]=\"\n                dateIssuedControl.invalid && dateIssuedControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"dateIssuedControl.errors?.required\"\n                data-role=\"validation-error-date-issued-invalid-date-format\"\n                i18n=\"\n                  @@initiate-stop-check.date-issued.validation-error.invalid-date-format\"\n              >\n                Invalid date format\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              [attr.for]=\"payeeName.id\"\n              i18n=\"@@initiate-stop-check.payee-name\"\n              >Payee name</label\n            >\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-input-text-ui\n              #payeeName\n              [maxLength]=\"140\"\n              formControlName=\"payeeName\"\n              data-role=\"payee-name\"\n            ></bb-input-text-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <label\n            [for]=\"stopReason.id\"\n            i18n=\"@@initiate-stop-check.select-reason\"\n            >Stop reason</label\n          >\n          <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n          <bb-dropdown-single-select-ui\n            #stopReason\n            data-role=\"stop-reason\"\n            formControlName=\"stopReason\"\n          >\n            <bb-dropdown-single-select-option-ui\n              value=\"\"\n              label=\"- Select a reason -\"\n              i18n-label=\"@@initiate-stop-check.reason.select\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Insufficient_funds\"\n              label=\"Insufficient funds\"\n              i18n-label=\"@@initiate-stop-check.reason-Insufficient_funds\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Incorrect_amount_or_other_details\"\n              label=\"Incorrect amount or other details\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Incorrect_amount_or_other_details\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Lost_or_stolen_checks_or_check_books\"\n              label=\"Lost or stolen checks or check books\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Lost_or_stolen_checks_or_check\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Checks_mailed_to_wrong_address\"\n              label=\"Checks mailed to wrong address\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Checks_mailed_to_wrong_address\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Dispute_over_purchases\"\n              label=\"Dispute over purchases\"\n              i18n-label=\"@@initiate-stop-check.reason-Dispute_over_purchases\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Lost_in_mail\"\n              label=\"Lost in mail\"\n              i18n-label=\"@@initiate-stop-check.reason-Lost_in_Mail\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Other\"\n              label=\"Other\"\n              i18n-label=\"@@initiate-stop-check.reason-Other\"\n            ></bb-dropdown-single-select-option-ui>\n          </bb-dropdown-single-select-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div\n          class=\"form-group col-md-12\"\n          *ngIf=\"\n            hostRef.relativeFormGroup?.get('stopReason')?.value === 'Other'\n          \"\n        >\n          <bb-textarea-ui\n            wrap=\"hard\"\n            [rows]=\"2\"\n            [cols]=\"50\"\n            [minLength]=\"3\"\n            [maxLength]=\"140\"\n            label=\"Please specify:\"\n            [showCharCounter]=\"true\"\n            formControlName=\"otherReason\"\n            data-role=\"other-reason-text\"\n            aria-label=\"Please specify other reason\"\n            i18n-aria-label=\"@@initiate-stop-check.reason-other.aria-label\"\n            i18n-label=\"@@initiate-stop-check.reason-other.label\"\n          ></bb-textarea-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"col-md-12\">\n          <label\n            #stopChecksExpirationDateLabel\n            id=\"stop-checks-expiration-date-label-{{ id }}\"\n            i18n=\"@@initiate-stop-check.expiration-date\"\n          >\n            Stop expiration date\n          </label>\n          <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n          <bb-input-datepicker-ui\n            overrideDateFormat=\"MM/dd/y\"\n            formControlName=\"expirationDate\"\n            [aria-labelledby]=\"stopChecksExpirationDateLabel.id\"\n            [aria-describedby]=\"hostRef.getDescribedby('expirationDate')\"\n            [aria-invalid]=\"\n              hostRef.relativeFormGroup?.get('expirationDate').invalid &&\n              hostRef.relativeFormGroup?.get('expirationDate').touched\n            \"\n            [placeholder]=\"'MM/DD/YYYY'\"\n            data-role=\"expiration-date\"\n          ></bb-input-datepicker-ui>\n\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              hostRef.relativeFormGroup?.get(\n                'expirationDate'\n              ) as expirationDateControl\n            \"\n            [messageId]=\"hostRef.getIdByControl('expirationDate')\"\n            [showErrors]=\"\n              expirationDateControl.invalid && expirationDateControl.touched\n            \"\n          >\n            <span\n              *ngIf=\"expirationDateControl.errors?.pastDate\"\n              i18n=\"\n                Stop expiration date past date error text |Error past date\n                message for Stop expiration date input\n                field@@initiate-stop-check.error.pastDate.expirationDate\"\n              data-role=\"validation-error-past-date-expiration-date\"\n            >\n              Stop expiration date cannot be in the past\n            </span>\n            <span\n              *ngIf=\"expirationDateControl.errors?.invalidDateFormat\"\n              data-role=\"validation-error-expiration-date-invalid-date-format\"\n              i18n=\"\n                @@initiate-stop-check.expiration-date.validation-error.invalid-date-format\"\n            >\n              Invalid date format\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </bb-fieldset-ui>\n\n    <div class=\"bb-stop-checks-control-buttons bb-button-bar\">\n      <button\n        bbButton\n        type=\"submit\"\n        buttonSize=\"md\"\n        [attr.aria-describedby]=\"hostRef.getDescribedbyBySubmit()\"\n        class=\"bb-button-bar__button\"\n        data-role=\"continue-btn\"\n        i18n=\"@@initiate-stop-check.form-action.continue\"\n      >\n        Continue\n      </button>\n\n      <button\n        bbButton\n        type=\"button\"\n        color=\"link\"\n        buttonSize=\"md\"\n        class=\"bb-button-bar__button bb-stop-checks-control-buttons__cancel\"\n        data-role=\"cancel-btn\"\n        i18n=\"@@initiate-stop-check.form-action.cancel\"\n        (click)=\"hostRef.onCancelForm()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n\n  <ng-template #optionalField>\n    <span class=\"bb-text-support\">\n      (<ng-container i18n=\"@@initiate-stop-check.optional-field-label\"\n        >Optional</ng-container\n      >)\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.FieldsetComponent; }), selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i0.forwardRef(function () { return i3.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0.forwardRef(function () { return i4.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i5.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0.forwardRef(function () { return i5.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i0.forwardRef(function () { return i6.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i7.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0.forwardRef(function () { return i8.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i9.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i9.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0.forwardRef(function () { return i10.TextareaComponent; }), selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }], directives: [{ type: i0.forwardRef(function () { return StopCheckFormComponentCustomizableDirective; }), selector: "[bbStopCheckFormComponentCustomizable]" }, { type: i0.forwardRef(function () { return i11.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i11.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i11.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i5$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i11.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i11.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i11.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i5$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i11.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0.forwardRef(function () { return i13.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i5$1.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-check-form',
                    templateUrl: './stop-check-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DeprecationsService }]; }, propDecorators: { showValidation: [{
                type: Input
            }], relativeFormGroup: [{
                type: Input
            }], payFromAccounts$: [{
                type: Input
            }], formSubmit: [{
                type: Output
            }], currencies: [{
                type: Input
            }], checksRangeNumber: [{
                type: Input
            }], cancelForm: [{
                type: Output
            }] } });
class StopCheckFormComponentCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopCheckFormComponentCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponentCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopCheckFormComponentCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckFormComponentCustomizableDirective, selector: "[bbStopCheckFormComponentCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponentCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopCheckFormComponentCustomizable]',
                }]
        }] });

class StopCheckReviewComponent {
    constructor() {
        this.hostRef = this;
        this.showConfirmation = false;
        this.disableSubmitAction = false;
        this.showAlert = false;
        /**
         * Event will be triggered on payment reset action
         */
        this.triggerStopRequestReset = new EventEmitter();
        /**
         * Event will be triggered on payment submit action
         */
        this.triggerStopRequestSubmit = new EventEmitter();
        /**
         * Event will be triggered on payment edit action
         */
        this.triggerStopRequestEdit = new EventEmitter();
    }
    /**
     * Flag for failing request submit
     */
    set failedToSubmit(v) {
        this.showAlert = v;
    }
    submitStopRequest() {
        this.disableSubmitAction = true;
        this.triggerStopRequestSubmit.emit();
    }
    resetStopRequest() {
        this.triggerStopRequestReset.emit();
    }
    editStopRequest() {
        this.triggerStopRequestEdit.emit();
    }
    toggleConfirmationDialog() {
        this.showConfirmation = !this.showConfirmation;
    }
    hideAlert() {
        this.showAlert = false;
    }
}
/** @nocollapse */ StopCheckReviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckReviewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopCheckReviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckReviewComponent, selector: "bb-stop-check-review", inputs: { requestIsSubmitted: "requestIsSubmitted", request: "request", stopRequestIsSubmitted: "stopRequestIsSubmitted", failedToSubmit: "failedToSubmit" }, outputs: { triggerStopRequestReset: "triggerStopRequestReset", triggerStopRequestSubmit: "triggerStopRequestSubmit", triggerStopRequestEdit: "triggerStopRequestEdit" }, ngImport: i0, template: "<ng-container\n  bbStopCheckReviewComponentCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n<ng-template bbStopCheckReviewComponentCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-header-ui\n        headingType=\"h2\"\n        heading=\"Review and submit\"\n        i18n-heading=\"@@initiate-stop-check.review-request-details-header\"\n      ></bb-header-ui>\n    </div>\n\n    <bb-alert-ui\n      title=\"\"\n      modifier=\"error\"\n      [dismissible]=\"true\"\n      *ngIf=\"hostRef.showAlert\"\n      (close)=\"hostRef.hideAlert()\"\n    >\n      <span\n        data-role=\"failed-to-submit-alert\"\n        i18n=\"@@initiate-stop-check.review.failed-to-submit\"\n      >\n        Failed to submit stop check request, please try again later\n      </span>\n    </bb-alert-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      headingType=\"h3\"\n      heading=\"Check details\"\n      i18n-heading=\"@@initiate-stop-check.review-check-details-header\"\n    ></bb-header-ui>\n  </div>\n\n  <div class=\"row bb-block--xl\">\n    <div class=\"col-md-12 form-group\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review.check-account\"\n        data-role=\"check-account-label\"\n      >\n        Check account\n      </div>\n      <div>\n        <div data-role=\"account-name\">\n          {{ hostRef.request?.payFromAccount?.name }}\n        </div>\n        <div data-role=\"account-number\" class=\"bb-text-support\">\n          {{ hostRef.request?.payFromAccount?.accountNumber }}\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"col-md-6 form-group\"\n      *ngIf=\"\n        hostRef.request?.checkNumber &&\n        hostRef.request?.stopRangeType === 'single'\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review.check-number\"\n        data-role=\"check-number-label\"\n      >\n        Check number\n      </div>\n      <div data-role=\"check-number\">\n        {{ hostRef.request?.checkNumber }}\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"hostRef.request?.stopRangeType === 'multiple'\">\n      <div\n        class=\"col-md-6 form-group\"\n        *ngIf=\"hostRef.request?.firstCheckNumber\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.first-check-number\"\n          data-role=\"first-check-number-label\"\n        >\n          First check number\n        </div>\n        <div data-role=\"first-check-number\">\n          {{ hostRef.request?.firstCheckNumber }}\n        </div>\n      </div>\n\n      <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.lastCheckNumber\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.last-check-number\"\n          data-role=\"last-check-number-label\"\n        >\n          Last check number\n        </div>\n        <div data-role=\"last-check-number\">\n          {{ hostRef.request?.lastCheckNumber }}\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"hostRef.request?.stopRangeType === 'single'\">\n      <div\n        class=\"col-md-6 form-group\"\n        *ngIf=\"hostRef.request?.amountGroup?.amount\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.check-amount\"\n          data-role=\"check-amount-label\"\n        >\n          Check amount\n        </div>\n        <div>\n          <bb-amount-ui\n            [mapCurrency]=\"false\"\n            data-role=\"check-amount\"\n            [amount]=\"hostRef.request?.amountGroup?.amount\"\n            [currency]=\"hostRef.request?.amountGroup?.currency\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.dateIssued\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.check-issue-date\"\n          data-role=\"date-issued-label\"\n        >\n          Date issued\n        </div>\n        <div data-role=\"stop-request-check-issue-date\">\n          {{ hostRef.request?.dateIssued | date }}\n        </div>\n      </div>\n\n      <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.payeeName\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.payee-name\"\n          data-role=\"payee-name-label\"\n        >\n          Payee name\n        </div>\n        <div data-role=\"stop-request-payee-name\">\n          {{ hostRef.request?.payeeName }}\n        </div>\n      </div>\n    </ng-container>\n\n    <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.stopReason\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review.stop-reason-label\"\n        data-role=\"stop-reason-label\"\n      >\n        Stop reason\n      </div>\n\n      <ng-container\n        [ngSwitch]=\"hostRef.request?.stopReason\"\n        *ngIf=\"hostRef.request?.stopReason !== 'Other'\"\n      >\n        <div\n          *ngSwitchCase=\"'Insufficient_funds'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Insufficient funds\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Incorrect_amount_or_other_details'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Incorrect amount or other details\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Lost_or_stolen_checks_or_check_books'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Lost or stolen checks or check books\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Checks_mailed_to_wrong_address'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Checks mailed to wrong address\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Dispute_over_purchases'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Dispute over purchases\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Lost_in_mail'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Lost in mail\n        </div>\n      </ng-container>\n\n      <div\n        class=\"break-word\"\n        *ngIf=\"hostRef.request?.stopReason === 'Other'\"\n        data-role=\"stop-request-other-reason-text\"\n        i18n=\"@@initiate-stop-check.review.other-reason-text\"\n      >\n        {{ hostRef.request?.otherReason.trim() || hostRef.request?.stopReason }}\n      </div>\n    </div>\n\n    <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.expirationDate\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review\"\n        data-role=\"stop-request-expiration-date-label\"\n      >\n        Stop expiration date\n      </div>\n      <div data-role=\"stop-request-expiration-date-value\">\n        {{ hostRef.request?.expirationDate | date }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\" *ngIf=\"!hostRef.stopRequestIsSubmitted\">\n    <button\n      bbButton\n      data-role=\"submit-button\"\n      class=\"bb-button-bar__button\"\n      (click)=\"hostRef.submitStopRequest()\"\n      [disabled]=\"hostRef.disableSubmitAction\"\n      i18n=\"@@initiate-stop-check.review.button.submit\"\n    >\n      Submit\n    </button>\n\n    <button\n      bbButton\n      color=\"secondary\"\n      data-role=\"edit-button\"\n      class=\"bb-button-bar__button\"\n      (click)=\"hostRef.editStopRequest()\"\n      i18n=\"@@initiate-stop-check.review.button.edit\"\n    >\n      Edit\n    </button>\n\n    <button\n      bbButton\n      color=\"link\"\n      data-role=\"cancel-button\"\n      (click)=\"hostRef.toggleConfirmationDialog()\"\n      i18n=\"@@initiate-stop-check.review.button.discard\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n    >\n      Cancel\n    </button>\n  </div>\n\n  <bb-confirmation-dialog\n    confirmButtonColor=\"danger\"\n    [isOpen]=\"hostRef.showConfirmation\"\n    (confirm)=\"hostRef.resetStopRequest()\"\n    (cancel)=\"hostRef.toggleConfirmationDialog()\"\n  >\n    <span title i18n=\"@@initiate-stop-check.confirm-action-dialog.title\">\n      Discard stop check request?\n    </span>\n\n    <span\n      body\n      i18n=\"@@initiate-stop-check.confirm-action-dialog.body\"\n      data-role=\"confirmation-text\"\n    >\n      All entered information for this stop check request will be lost.\n    </span>\n\n    <span\n      cancelActionName\n      i18n=\"@@initiate-stop-check.confirm-action-dialog.button.cancel\"\n      >Keep it</span\n    >\n    <span\n      confirmActionName\n      i18n=\"@@initiate-stop-check.confirm-action-dialog.button.confirm\"\n      >Discard stop check</span\n    >\n  </bb-confirmation-dialog>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i2$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i3$1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i2$2.ӨConfirmationDialogComponent; }), selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return StopCheckReviewComponentCustomizableDirective; }), selector: "[bbStopCheckReviewComponentCustomizable]" }, { type: i0.forwardRef(function () { return i5$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i5$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i13.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i0.forwardRef(function () { return i5$1.DatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckReviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-check-review',
                    templateUrl: './stop-check-review.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { requestIsSubmitted: [{
                type: Input
            }], request: [{
                type: Input
            }], stopRequestIsSubmitted: [{
                type: Input
            }], triggerStopRequestReset: [{
                type: Output
            }], triggerStopRequestSubmit: [{
                type: Output
            }], triggerStopRequestEdit: [{
                type: Output
            }], failedToSubmit: [{
                type: Input
            }] } });
class StopCheckReviewComponentCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopCheckReviewComponentCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckReviewComponentCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopCheckReviewComponentCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckReviewComponentCustomizableDirective, selector: "[bbStopCheckReviewComponentCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckReviewComponentCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopCheckReviewComponentCustomizable]',
                }]
        }] });

// These tokens can be used to change configuration at app level
const BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN = new InjectionToken('BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN');
// These tokens can be used to change configuration at app level
const BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN = new InjectionToken('BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN');
/**
 * Access control config values
 */
const accessControlConfigDefaults = {
    resourceName: 'Payments',
    businessFunction: 'Stop Checks',
    privilege: 'create',
};
/**
 * Stop checks providers types
 */
const StopCheckConfigProvider = [
    {
        provide: BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN,
        useValue: accessControlConfigDefaults,
    },
    {
        provide: BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN,
        useValue: currencyFallback,
    },
];

const accMap = () => (source) => source.pipe(map(([arrangements, schemeName]) => arrangements.items.map((arrangement) => {
    let accountNumber = arrangement.id;
    if (schemeName !== 'ID') {
        accountNumber = arrangement[schemeName];
    }
    return {
        id: arrangement.id,
        name: arrangement.name,
        balance: arrangement.bookedBalance,
        bookedBalance: arrangement.bookedBalance,
        availableBalance: arrangement.availableBalance,
        currency: arrangement.currency,
        accountNumber: accountNumber || '',
        number: accountNumber || '',
        accountType: schemeName,
        externalTransferAllowed: arrangement.externalTransferAllowed,
        urgentTransferAllowed: arrangement.urgentTransferAllowed,
    };
})));
function arrangementItemFromService(record) {
    return {
        id: record.id,
        name: record.name || '',
        balance: record.availableBalance || record.bookedBalance || 0,
        bookedBalance: record.bookedBalance || 0,
        availableBalance: record.availableBalance,
        currency: record.currency || '',
        IBAN: record.IBAN || record.number,
        BBAN: record.BBAN,
        externalTransferAllowed: record.externalTransferAllowed,
        urgentTransferAllowed: record.urgentTransferAllowed,
        additions: record.additions,
    };
}
function arrangementListFromService(response, isLoadMore = false) {
    return {
        count: response.length,
        items: response.map(arrangementItemFromService),
        isLoadMore,
    };
}
function requestInfoToPostRequestBody(requestInfo) {
    const { payFromAccount, stopReason, otherReason, stopRangeType, checkNumber, firstCheckNumber, lastCheckNumber, dateIssued, payeeName, amountGroup, } = requestInfo;
    const reason = (otherReason && otherReason.trim()) || stopReason;
    const singleCheckRequest = stopRangeType === StopCheckRequestType.SINGLE;
    const { name, accountNumber, accountType } = payFromAccount;
    return Object.assign(Object.assign({ originatorAccount: {
            name,
            identification: accountNumber,
            schemeName: accountType,
        } }, (singleCheckRequest
        ? {
            check: Object.assign(Object.assign(Object.assign({ number: checkNumber }, (amountGroup && {
                amount: {
                    amount: amountGroup.amount,
                    currencyCode: amountGroup.currency,
                },
            })), (payeeName && { payeeName })), (dateIssued && { dateIssued })),
        }
        : {
            checkNumberRange: {
                firstNumber: firstCheckNumber,
                lastNumber: lastCheckNumber,
            },
        })), (reason && { reason }));
}

const defaultStopChecksCreatePreferences = Object.assign({ currencies: [currencyFallback], notificationDismissTime: 3, checksRangeNumber: 0, schemeName: 'BBAN' }, accessControlConfigDefaults);
class StopChecksPreferencesService {
    constructor(itemModel, accessControlToken) {
        this.itemModel = itemModel;
        this.accessControlToken = accessControlToken;
        this.accessControlConfig = Object.assign(Object.assign({}, defaultStopChecksCreatePreferences), (this.accessControlToken || {}));
        this.resourceNameSubject$ = new BehaviorSubject(undefined);
        this.businessFunctionSubject$ = new BehaviorSubject(undefined);
        this.privilegeSubject$ = new BehaviorSubject(undefined);
        this.notificationDismissTimeSubject$ = new BehaviorSubject(undefined);
        this.currenciesSubject$ = new BehaviorSubject(undefined);
        this.checksRangeNumberSubject$ = new BehaviorSubject(undefined);
        this.schemeNameSubject$ = new BehaviorSubject(undefined);
        this.schemeNameItemModel = this.getItemModelProperty('schemeName', this.accessControlConfig.schemeName);
        this.resourceNameItemModel = this.getItemModelProperty('resourceName', this.accessControlConfig.resourceName);
        this.businessFunctionItemModel = this.getItemModelProperty('businessFunction', this.accessControlConfig.businessFunction);
        this.privilegeItemModel = this.getItemModelProperty('privilege', this.accessControlConfig.privilege);
        this.notificationDismissTimeItemModel = this.getItemModelProperty('notificationDismissTime', defaultStopChecksCreatePreferences.notificationDismissTime).pipe(map(toInteger));
        this.currenciesItemModel = this.getItemModelProperty('currencies', defaultStopChecksCreatePreferences.currencies[0]).pipe(map((currencies) => currencies.split(',').map((currency) => currency.trim())));
        this.checksRangeNumberItemModel = this.getItemModelProperty('checksRangeNumber', defaultStopChecksCreatePreferences.checksRangeNumber).pipe(map(toInteger));
        this.schemeName$ = this.getProperty(this.schemeNameSubject$, this.schemeNameItemModel);
        this.resourceName$ = this.getProperty(this.resourceNameSubject$, this.resourceNameItemModel);
        this.businessFunction$ = this.getProperty(this.businessFunctionSubject$, this.businessFunctionItemModel);
        this.privilege$ = this.getProperty(this.privilegeSubject$, this.privilegeItemModel);
        this.notificationDismissTime$ = this.getProperty(this.notificationDismissTimeSubject$, this.notificationDismissTimeItemModel);
        this.currencies$ = this.getProperty(this.currenciesSubject$, this.currenciesItemModel);
        this.checksRangeNumber$ = this.getProperty(this.checksRangeNumberSubject$, this.checksRangeNumberItemModel, true);
    }
    getProperty(input$, itemModel, t) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    getItemModelProperty(name, defaultVal) {
        var _a;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(name, defaultVal)) || of(defaultVal);
    }
    setResourceName(value) {
        this.resourceNameSubject$.next(value);
    }
    setBusinessFunction(value) {
        this.businessFunctionSubject$.next(value);
    }
    setPrivilege(value) {
        this.privilegeSubject$.next(value);
    }
    setNotificationDismissTime(value) {
        this.notificationDismissTimeSubject$.next(value);
    }
    setCurrencies(value) {
        this.currenciesSubject$.next(value);
    }
    setChecksRangeNumber(value) {
        this.checksRangeNumberSubject$.next(value);
    }
}
/** @nocollapse */ StopChecksPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksPreferencesService, deps: [{ token: i1.ItemModel, optional: true }, { token: BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StopChecksPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksPreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksPreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN]
                }] }]; } });

class ApiHttpService {
    constructor(productSummaryData, stopCheckService, stopChecksPreferencesService) {
        this.productSummaryData = productSummaryData;
        this.stopCheckService = stopCheckService;
        this.stopChecksPreferencesService = stopChecksPreferencesService;
        this.debitAccountsParameters$ = of({
            debitAccount: true,
            size: arrangementsPageSize,
        }).pipe(withLatestFrom(this.stopChecksPreferencesService.resourceName$, this.stopChecksPreferencesService.businessFunction$, this.stopChecksPreferencesService.privilege$), map(([params, resourceName, businessFunction, privilege]) => (Object.assign({ resourceName,
            businessFunction,
            privilege }, params))));
        this.debitAccounts$ = this.debitAccountsParameters$.pipe(withLatestFrom(this.debitAccountsParameters$, (_, params) => params), switchMap((params) => this.productSummaryData.getArrangementsByBusinessFunction(params)), map((response) => arrangementListFromService(response)), shareReplay(1));
    }
    postStopCheckRequest(payload) {
        return this.stopCheckService.postStopChecks(requestInfoToPostRequestBody(payload));
    }
}
/** @nocollapse */ ApiHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApiHttpService, deps: [{ token: i1$2.ProductSummaryHttpService }, { token: i2$2.ChecksService }, { token: StopChecksPreferencesService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ApiHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApiHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApiHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ProductSummaryHttpService }, { type: i2$2.ChecksService }, { type: StopChecksPreferencesService }]; } });

class NavigationService {
    constructor(routerService) {
        this.routerService = routerService;
    }
    form() {
        return this.routerService.navigate(['form']);
    }
    review() {
        return this.routerService.navigate(['review']);
    }
}
/** @nocollapse */ NavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NavigationService, deps: [{ token: i1.RouterService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ NavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.RouterService }]; } });

var ActionTypes;
(function (ActionTypes) {
    ActionTypes["INIT_REQUEST"] = "[STOP CHECK] Initiate request";
    ActionTypes["REVIEW_REQUEST"] = "[STOP CHECK] Review request";
    ActionTypes["EDIT_REQUEST"] = "[STOP CHECK] Edit request";
    ActionTypes["MARK_REQUEST_AS_SUBMITTED"] = "[STOP CHECK] Mark request as submitted";
    ActionTypes["DISCARD"] = "[STOP CHECK] Discard review";
})(ActionTypes || (ActionTypes = {}));
var RequestStatus;
(function (RequestStatus) {
    RequestStatus["INIT"] = "INIT";
    RequestStatus["REVIEW"] = "REVIEW";
    RequestStatus["REQUEST_IS_SUBMITTED"] = "REQUEST_IS_SUBMITTED";
    RequestStatus["EDIT_MODE"] = "EDIT_MODE";
    RequestStatus["DISCARD"] = "DISCARD";
})(RequestStatus || (RequestStatus = {}));
const state = {
    requestInfo: {
        payFromAccount: {
            id: '',
            name: '',
            balance: 0,
            currency: '',
            accountNumber: '',
            accountType: 'BBAN',
        },
        checkNumber: '',
        firstCheckNumber: '',
        lastCheckNumber: '',
        stopRangeType: StopCheckRequestType.SINGLE,
        amountGroup: undefined,
        payeeName: '',
        dateIssued: '',
        expirationDate: '',
        stopReason: '',
        otherReason: '',
    },
    status: RequestStatus.INIT,
};

class StateService {
    constructor(navigationService) {
        this.navigationService = navigationService;
        this.store = new BehaviorSubject(state);
        this.eventDispatcher = new Subject();
        this.eventDispatcher.subscribe((data) => {
            var _a, _b, _c;
            switch (data.type) {
                case ActionTypes.INIT_REQUEST:
                    this.store.next(state);
                    break;
                case ActionTypes.DISCARD:
                    this.store.next({
                        requestInfo: state.requestInfo,
                        status: (_a = data.payload) === null || _a === void 0 ? void 0 : _a.status,
                    });
                    break;
                case ActionTypes.REVIEW_REQUEST:
                case ActionTypes.EDIT_REQUEST:
                case ActionTypes.MARK_REQUEST_AS_SUBMITTED:
                    this.store.next({
                        requestInfo: (_b = data.payload) === null || _b === void 0 ? void 0 : _b.requestInfo,
                        status: (_c = data.payload) === null || _c === void 0 ? void 0 : _c.status,
                    });
                    break;
                default:
                    break;
            }
        });
    }
    initStopCheckRequest() {
        this.eventDispatcher.next({
            type: ActionTypes.DISCARD,
            payload: {
                status: RequestStatus.DISCARD,
            },
        });
    }
    sendStopRequestToReview(data) {
        this.eventDispatcher.next({
            type: ActionTypes.REVIEW_REQUEST,
            payload: {
                requestInfo: data,
                status: RequestStatus.REVIEW,
            },
        });
        this.navigationService.review();
    }
    markStopRequestAsSubmitted(data) {
        this.eventDispatcher.next({
            type: ActionTypes.MARK_REQUEST_AS_SUBMITTED,
            payload: {
                requestInfo: data,
                status: RequestStatus.REQUEST_IS_SUBMITTED,
            },
        });
    }
    sendStopRequestToEdit(data) {
        this.eventDispatcher.next({
            type: ActionTypes.EDIT_REQUEST,
            payload: {
                requestInfo: data,
                status: RequestStatus.EDIT_MODE,
            },
        });
        this.navigationService.form();
    }
}
/** @nocollapse */ StateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StateService, deps: [{ token: NavigationService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StateService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: NavigationService }]; } });

class FormContainerComponent {
    constructor(stateService, apiService, stopChecksPreferencesService) {
        this.stateService = stateService;
        this.apiService = apiService;
        this.stopChecksPreferencesService = stopChecksPreferencesService;
        this.fb = new FormBuilder();
        this.accounts$ = this.apiService.debitAccounts$.pipe(withLatestFrom(this.stopChecksPreferencesService.schemeName$), accMap());
        this.currenciesList = this.stopChecksPreferencesService.currencies$;
        this.checksRangeNumber = this.stopChecksPreferencesService.checksRangeNumber$;
    }
    buildForm(initValue) {
        const { payFromAccount: { id, name, accountNumber, balance, currency, accountType, }, amountGroup, } = initValue;
        return this.fb.group({
            payFromAccount: this.fb.group({
                id: [id, [Validators.required]],
                name: [name, [Validators.required]],
                accountNumber: [accountNumber, [Validators.required]],
                accountType: [accountType, [Validators.required]],
                balance: [balance],
                currency: [currency],
            }),
            checkNumber: [initValue.checkNumber],
            firstCheckNumber: [initValue.firstCheckNumber],
            lastCheckNumber: [initValue.lastCheckNumber],
            stopRangeType: [initValue.stopRangeType, [Validators.required]],
            amountGroup: [amountGroup],
            payeeName: [initValue.payeeName],
            dateIssued: [initValue.dateIssued],
            expirationDate: [initValue.expirationDate, [pastDateValidator]],
            stopReason: [initValue.stopReason],
            otherReason: [initValue.otherReason],
        });
    }
    ngOnInit() {
        this.stateService.store
            .pipe(pluck('requestInfo'), take(1))
            .subscribe((requestInfo) => {
            if (requestInfo) {
                this.requestStopCheckFrom = this.buildForm(requestInfo);
            }
        });
    }
    onContinue() {
        if (this.requestStopCheckFrom && this.requestStopCheckFrom.valid) {
            this.stateService.sendStopRequestToReview(this.requestStopCheckFrom.value);
        }
    }
    onCancelForm() {
        this.stateService.initStopCheckRequest();
    }
}
/** @nocollapse */ FormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormContainerComponent, deps: [{ token: StateService }, { token: ApiHttpService }, { token: StopChecksPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ FormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FormContainerComponent, selector: "bb-form-container", ngImport: i0, template: `
    <bb-stop-check-form
      [currencies]="currenciesList | async"
      [relativeFormGroup]="requestStopCheckFrom"
      [payFromAccounts$]="accounts$"
      [checksRangeNumber]="checksRangeNumber | async"
      (formSubmit)="onContinue()"
      (cancelForm)="onCancelForm()"
    ></bb-stop-check-form>
  `, isInline: true, components: [{ type: StopCheckFormComponent, selector: "bb-stop-check-form", inputs: ["showValidation", "relativeFormGroup", "payFromAccounts$", "currencies", "checksRangeNumber"], outputs: ["formSubmit", "cancelForm"] }], pipes: { "async": i5$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-form-container',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <bb-stop-check-form
      [currencies]="currenciesList | async"
      [relativeFormGroup]="requestStopCheckFrom"
      [payFromAccounts$]="accounts$"
      [checksRangeNumber]="checksRangeNumber | async"
      (formSubmit)="onContinue()"
      (cancelForm)="onCancelForm()"
    ></bb-stop-check-form>
  `,
                }]
        }], ctorParameters: function () { return [{ type: StateService }, { type: ApiHttpService }, { type: StopChecksPreferencesService }]; } });

class ReviewContainerComponent {
    constructor(stateService, apiHttpService, stopChecksPreferencesService, notificationService) {
        this.stateService = stateService;
        this.apiHttpService = apiHttpService;
        this.stopChecksPreferencesService = stopChecksPreferencesService;
        this.notificationService = notificationService;
        this.gc$ = new Subject();
        this.isStopRequestSubmitted$ = new BehaviorSubject(false);
        this.requestInfo$ = this.stateService.store.pipe(pluck('requestInfo'));
        this.hasErrorOnSubmit$ = new BehaviorSubject(false);
        this.stopChecksPreferencesService.notificationDismissTime$
            .pipe(takeUntil(this.gc$))
            .subscribe((value) => (this.notificationDismissTimeout = value));
    }
    showNotification(success, notification) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.notificationDismissTimeout * 1000, modifier: success ? 'success' : 'error' }, notification));
    }
    responseHandler(response, requestInfo) {
        var _a;
        if (((_a = response.stopCheck) === null || _a === void 0 ? void 0 : _a.status) && requestInfo) {
            this.showNotification(true, {
                header: this.successNotificationHeader,
                message: this.successNotificationMessage,
            });
            this.markStopRequestAsSubmitted(requestInfo);
        }
        else {
            this.hasErrorOnSubmit$.next(true);
            this.showNotification(false, {
                header: this.failureNotificationHeader,
                message: this.failureNotificationMessage,
            });
        }
    }
    discardStopRequest() {
        this.stateService.initStopCheckRequest();
    }
    submitStopRequest(requestInfo) {
        this.apiHttpService
            .postStopCheckRequest(requestInfo)
            .pipe(take(1))
            .subscribe((res) => this.responseHandler(res, requestInfo), (err) => this.responseHandler(err));
    }
    markStopRequestAsSubmitted(requestInfo) {
        this.isStopRequestSubmitted$.next(true);
        this.stateService.markStopRequestAsSubmitted(requestInfo);
    }
    editStopRequest(requestInfo) {
        this.stateService.sendStopRequestToEdit(requestInfo);
    }
    ngOnDestroy() {
        this.gc$.next();
    }
}
/** @nocollapse */ ReviewContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewContainerComponent, deps: [{ token: StateService }, { token: ApiHttpService }, { token: StopChecksPreferencesService }, { token: i4$1.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ReviewContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ReviewContainerComponent, selector: "bb-review-container", viewQueries: [{ propertyName: "successNotificationHeader", first: true, predicate: ["successNotificationHeader"], descendants: true }, { propertyName: "successNotificationMessage", first: true, predicate: ["successNotificationMessage"], descendants: true }, { propertyName: "failureNotificationHeader", first: true, predicate: ["failureNotificationHeader"], descendants: true }, { propertyName: "failureNotificationMessage", first: true, predicate: ["failureNotificationMessage"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"requestInfo$ | async as requestInfo\">\n  <bb-stop-check-review\n    [request]=\"requestInfo\"\n    [failedToSubmit]=\"hasErrorOnSubmit$ | async\"\n    (triggerStopRequestEdit)=\"editStopRequest(requestInfo)\"\n    (triggerStopRequestReset)=\"discardStopRequest()\"\n    (triggerStopRequestSubmit)=\"submitStopRequest(requestInfo)\"\n    [stopRequestIsSubmitted]=\"isStopRequestSubmitted$ | async\"\n  ></bb-stop-check-review>\n</ng-container>\n\n<ng-template #successNotificationHeader>\n  <span i18n=\"@@initiate-stop-check.success-notification-header\">\n    Stop check request submitted\n  </span>\n</ng-template>\n\n<ng-template #successNotificationMessage>\n  <span i18n=\"@@initiate-stop-check.success-notification-message\">\n    We will soon update the status of your request\n  </span>\n</ng-template>\n\n<ng-template #failureNotificationHeader>\n  <span i18n=\"@@initiate-stop-check.failure-notification-header\">\n    Failed to submit stop check request\n  </span>\n</ng-template>\n\n<ng-template #failureNotificationMessage>\n  <span i18n=\"@@initiate-stop-check.failure-notification-message\">\n    Please try again later\n  </span>\n</ng-template>\n", components: [{ type: StopCheckReviewComponent, selector: "bb-stop-check-review", inputs: ["requestIsSubmitted", "request", "stopRequestIsSubmitted", "failedToSubmit"], outputs: ["triggerStopRequestReset", "triggerStopRequestSubmit", "triggerStopRequestEdit"] }], directives: [{ type: i5$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-review-container',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './review-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: StateService }, { type: ApiHttpService }, { type: StopChecksPreferencesService }, { type: i4$1.NotificationService }]; }, propDecorators: { successNotificationHeader: [{
                type: ViewChild,
                args: ['successNotificationHeader']
            }], successNotificationMessage: [{
                type: ViewChild,
                args: ['successNotificationMessage']
            }], failureNotificationHeader: [{
                type: ViewChild,
                args: ['failureNotificationHeader']
            }], failureNotificationMessage: [{
                type: ViewChild,
                args: ['failureNotificationMessage']
            }] } });

let PayordStopChecksWidgetAngComponent = class PayordStopChecksWidgetAngComponent {
    constructor(stateService, navigationService, stopChecksConfigService) {
        this.stateService = stateService;
        this.navigationService = navigationService;
        this.stopChecksConfigService = stopChecksConfigService;
        /**
         * Trigger navigation for list view widget on submit
         */
        this.navigateOnSubmit = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * Access control resource
     */
    set resourceName(value) {
        this.stopChecksConfigService.setResourceName(value);
    }
    /**
     * Access control business function
     */
    set businessFunction(value) {
        this.stopChecksConfigService.setBusinessFunction(value);
    }
    /**
     * Access control privilege
     */
    set privilege(value) {
        this.stopChecksConfigService.setPrivilege(value);
    }
    /**
     * Number of seconds to dismiss the notification
     */
    set notificationDismissTime(value) {
        this.stopChecksConfigService.setNotificationDismissTime(value);
    }
    /**
     * Comma separated list of available currencies
     */
    set currencies(value) {
        const currencies = value
            .split(',')
            .map((currency) => currency.trim());
        this.stopChecksConfigService.setCurrencies(currencies);
    }
    /**
     * Number of check number range beyond which user cannot input (0 - no limit)
     */
    set checksRangeNumber(value) {
        this.stopChecksConfigService.setChecksRangeNumber(toInteger(value));
    }
    /**
     * Initializes the component.
     *
     * @returns void
     */
    ngOnInit() {
        this.stateService.store
            .pipe(pluck('status'), takeUntil(this.destroy$))
            .subscribe((status) => {
            if (status === RequestStatus.INIT || status === RequestStatus.DISCARD) {
                this.navigationService.form();
            }
            if (status === RequestStatus.REQUEST_IS_SUBMITTED) {
                this.navigateOnSubmit.emit();
            }
        });
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
};
/** @nocollapse */ PayordStopChecksWidgetAngComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksWidgetAngComponent, deps: [{ token: StateService }, { token: NavigationService }, { token: StopChecksPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordStopChecksWidgetAngComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordStopChecksWidgetAngComponent, selector: "bb-payord-stop-checks-widget-ang", inputs: { resourceName: "resourceName", businessFunction: "businessFunction", privilege: "privilege", notificationDismissTime: "notificationDismissTime", currencies: "currencies", checksRangeNumber: "checksRangeNumber" }, outputs: { navigateOnSubmit: "navigateOnSubmit" }, providers: [
        NavigationService,
        StateService,
        ApiHttpService,
        ChecksService,
        StopChecksPreferencesService,
    ], ngImport: i0, template: ` <bb-router-outlet></bb-router-outlet> `, isInline: true, directives: [{ type: i1.RouterOutletDirective, selector: "bb-router-outlet", outputs: ["activate", "deactivate"], exportAs: ["bbOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
PayordStopChecksWidgetAngComponent = __decorate([
    RoutableWidget({
        routes: [
            { path: '', redirectTo: 'form', pathMatch: 'full' },
            { path: 'form', component: FormContainerComponent },
            { path: 'review', component: ReviewContainerComponent },
        ],
    }),
    __metadata("design:paramtypes", [StateService,
        NavigationService,
        StopChecksPreferencesService])
], PayordStopChecksWidgetAngComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksWidgetAngComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-stop-checks-widget-ang',
                    template: ` <bb-router-outlet></bb-router-outlet> `,
                    providers: [
                        NavigationService,
                        StateService,
                        ApiHttpService,
                        ChecksService,
                        StopChecksPreferencesService,
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: StateService }, { type: NavigationService }, { type: StopChecksPreferencesService }]; }, propDecorators: { navigateOnSubmit: [{
                type: Output
            }], resourceName: [{
                type: Input
            }], businessFunction: [{
                type: Input
            }], privilege: [{
                type: Input
            }], notificationDismissTime: [{
                type: Input
            }], currencies: [{
                type: Input
            }], checksRangeNumber: [{
                type: Input
            }] } });

const components = [
    FormContainerComponent,
    ReviewContainerComponent,
    StopCheckFormComponent,
    StopCheckReviewComponent,
    PayordStopChecksWidgetAngComponent,
];
const customizables = [
    StopCheckFormComponentCustomizableDirective,
    StopCheckReviewComponentCustomizableDirective,
];
const uiModules = [
    AccountSelectorModule,
    AlertModule,
    AmountModule,
    ButtonModule,
    CollapsibleModule,
    CurrencyInputModule,
    DropdownMenuModule,
    DropdownSingleSelectModule,
    FieldsetModule,
    HeaderModule,
    IconModule,
    InputCheckboxModule,
    InputRadioGroupModule,
    InputTextModule,
    InputValidationMessageModule,
    ModalModule,
    SearchBoxModule,
    TextareaModule,
    InputDatepickerModule,
];
const innerModules = [PaymentOrdersUiModule];
/**
 * Exports the UI components, directives and modules for the stop checks widget
 */
class PayordStopChecksWidgetAngModule {
}
/** @nocollapse */ PayordStopChecksWidgetAngModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksWidgetAngModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PayordStopChecksWidgetAngModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksWidgetAngModule, declarations: [FormContainerComponent,
        ReviewContainerComponent,
        StopCheckFormComponent,
        StopCheckReviewComponent,
        PayordStopChecksWidgetAngComponent, StopCheckFormComponentCustomizableDirective,
        StopCheckReviewComponentCustomizableDirective], imports: [CommonModule,
        ReactiveFormsModule, i1.BackbaseCoreModule, PaymentOrdersUiModule, AccountSelectorModule,
        AlertModule,
        AmountModule,
        ButtonModule,
        CollapsibleModule,
        CurrencyInputModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        FieldsetModule,
        HeaderModule,
        IconModule,
        InputCheckboxModule,
        InputRadioGroupModule,
        InputTextModule,
        InputValidationMessageModule,
        ModalModule,
        SearchBoxModule,
        TextareaModule,
        InputDatepickerModule], exports: [FormContainerComponent,
        ReviewContainerComponent,
        StopCheckFormComponent,
        StopCheckReviewComponent,
        PayordStopChecksWidgetAngComponent, StopCheckFormComponentCustomizableDirective,
        StopCheckReviewComponentCustomizableDirective, AccountSelectorModule,
        AlertModule,
        AmountModule,
        ButtonModule,
        CollapsibleModule,
        CurrencyInputModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        FieldsetModule,
        HeaderModule,
        IconModule,
        InputCheckboxModule,
        InputRadioGroupModule,
        InputTextModule,
        InputValidationMessageModule,
        ModalModule,
        SearchBoxModule,
        TextareaModule,
        InputDatepickerModule, PaymentOrdersUiModule] });
/** @nocollapse */ PayordStopChecksWidgetAngModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksWidgetAngModule, providers: [StopCheckConfigProvider], imports: [[
            CommonModule,
            ReactiveFormsModule,
            BackbaseCoreModule.withConfig({
                classMap: { PayordStopChecksWidgetAngComponent },
            }),
            ...innerModules,
            // UI-ANG
            ...uiModules,
        ], AccountSelectorModule,
        AlertModule,
        AmountModule,
        ButtonModule,
        CollapsibleModule,
        CurrencyInputModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        FieldsetModule,
        HeaderModule,
        IconModule,
        InputCheckboxModule,
        InputRadioGroupModule,
        InputTextModule,
        InputValidationMessageModule,
        ModalModule,
        SearchBoxModule,
        TextareaModule,
        InputDatepickerModule, PaymentOrdersUiModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksWidgetAngModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components, ...customizables],
                    entryComponents: [FormContainerComponent, ReviewContainerComponent],
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { PayordStopChecksWidgetAngComponent },
                        }),
                        ...innerModules,
                        // UI-ANG
                        ...uiModules,
                    ],
                    providers: [StopCheckConfigProvider],
                    exports: [...components, ...customizables, ...uiModules, ...innerModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ApiHttpService, BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN, BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN, NavigationService, PayordStopChecksWidgetAngComponent, PayordStopChecksWidgetAngModule, RequestStatus, StateService, StopChecksPreferencesService, defaultStopChecksCreatePreferences, FormContainerComponent as ӨFormContainerComponent, ReviewContainerComponent as ӨReviewContainerComponent, StopCheckFormComponent as ӨStopCheckFormComponent, StopCheckFormComponentCustomizableDirective as ӨStopCheckFormComponentCustomizableDirective, StopCheckReviewComponent as ӨStopCheckReviewComponent, StopCheckReviewComponentCustomizableDirective as ӨStopCheckReviewComponentCustomizableDirective };
//# sourceMappingURL=backbase-payord-stop-checks-widget-ang.js.map
