(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/fieldset'), require('@backbase/ui-ang/account-selector'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/input-radio-group'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/currency-input'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/textarea'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/amount'), require('@backbase/payment-orders-ang'), require('rxjs/operators'), require('rxjs'), require('@backbase/data-ang/arrangements'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/search-box')) :
    typeof define === 'function' && define.amd ? define('@backbase/payord-stop-checks-widget-ang', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@backbase/foundation-ang/core', '@backbase/ui-ang/fieldset', '@backbase/ui-ang/account-selector', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/input-radio-group', '@backbase/ui-ang/input-text', '@backbase/ui-ang/currency-input', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/textarea', '@backbase/ui-ang/button', '@backbase/ui-ang/header', '@backbase/ui-ang/alert', '@backbase/ui-ang/amount', '@backbase/payment-orders-ang', 'rxjs/operators', 'rxjs', '@backbase/data-ang/arrangements', '@backbase/ui-ang/notification', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/modal', '@backbase/ui-ang/search-box'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payord-stop-checks-widget-ang"] = {}), global.ng.common, global.ng.core, global.ng.forms, global.i1, global.i2, global.i3, global.i4, global.i5, global.i6, global.i7, global.i8, global.i9, global.i10, global.i13, global.i1$1, global.i2$1, global.i3$1, global.i2$2, global.rxjs.operators, global.rxjs, global.i1$2, global.i4$1, global.collapsible, global.dropdownMenu, global.icon, global.inputCheckbox, global.modal, global.searchBox));
})(this, (function (exports, i5$1, i0, i11, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i13, i1$1, i2$1, i3$1, i2$2, operators, rxjs, i1$2, i4$1, collapsible, dropdownMenu, icon, inputCheckbox, modal, searchBox) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var arrangementsPageSize = 100;
    var currencyFallback = 'USD';
    var RequestStatus;
    (function (RequestStatus) {
        RequestStatus["INIT"] = "INIT";
        RequestStatus["REVIEW"] = "REVIEW";
        RequestStatus["REQUEST_IS_SUBMITTED"] = "REQUEST_IS_SUBMITTED";
        RequestStatus["EDIT_MODE"] = "EDIT_MODE";
    })(RequestStatus || (RequestStatus = {}));
    var StopCheckReason;
    (function (StopCheckReason) {
        StopCheckReason["INSUFFICIENT_FUNDS"] = "Insufficient funds";
        StopCheckReason["INCORRECT_AMOUNT"] = "Incorrect amount or other details";
        StopCheckReason["LOST_OR_STOLEN"] = "Lost or stolen checks or check books";
        StopCheckReason["WRONG_ADDRESS"] = "Checks mailed to wrong address";
        StopCheckReason["DISPUTE_OVER_PURCHASES"] = "Dispute over purchases";
        StopCheckReason["LOST_IN_MAIL"] = "Lost in Mail";
        StopCheckReason["OTHER"] = "Other";
    })(StopCheckReason || (StopCheckReason = {}));
    var StopCheckRequestType;
    (function (StopCheckRequestType) {
        StopCheckRequestType["SINGLE"] = "single";
        StopCheckRequestType["MULTIPLE"] = "multiple";
    })(StopCheckRequestType || (StopCheckRequestType = {}));

    function clearErrorObject(errorObject, prop) {
        if (errorObject) {
            delete errorObject[prop];
            if (!Object.keys(errorObject).length) {
                return null;
            }
            else {
                return errorObject;
            }
        }
        else {
            return null;
        }
    }
    function getLastCheckLessThanFirstError(firstCheckNum, lastCheckNum) {
        var restErrors = lastCheckNum.errors;
        if (firstCheckNum.value &&
            lastCheckNum.value &&
            parseInt(firstCheckNum.value, 10) > parseInt(lastCheckNum.value, 10)) {
            return Object.assign(lastCheckNum.errors || {}, {
                biggerThenFirstCheckNumber: true,
            });
        }
        else if (firstCheckNum.value &&
            lastCheckNum.value &&
            parseInt(lastCheckNum.value, 10) >= parseInt(firstCheckNum.value, 10)) {
            return clearErrorObject(restErrors, 'biggerThenFirstCheckNumber');
        }
        else {
            return restErrors;
        }
    }
    function getCheckRangeError(firstCheckNum, lastCheckNum, range) {
        var restErrors = lastCheckNum.errors;
        if (range === 0) {
            return restErrors;
        }
        if (firstCheckNum.value &&
            lastCheckNum.value &&
            parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) >=
                range) {
            return Object.assign(lastCheckNum.errors || {}, { checkRangeError: true });
        }
        else if (firstCheckNum.value &&
            lastCheckNum.value &&
            parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) < range) {
            return clearErrorObject(restErrors, 'checkRangeError');
        }
        else {
            return restErrors;
        }
    }

    var StopCheckFormComponent = /** @class */ (function () {
        function StopCheckFormComponent(deprecationService) {
            this.deprecationService = deprecationService;
            this._showValidation = false;
            this.id = StopCheckFormComponent._id++;
            this.hostRef = this;
            this.accountFormat = {
                length: 0,
                maskRange: [0, 0],
                segments: 0,
            };
            /**
             * Event will be triggered on form submit
             */
            this.formSubmit = new i0.EventEmitter();
            /**
             * Custom range number to identify maximum consecutive check number range.
             * Default value `0`
             */
            this.checksRangeNumber = 0;
            /**
             * Event will be triggered on payment cancel action
             */
            this.cancelForm = new i0.EventEmitter();
        }
        Object.defineProperty(StopCheckFormComponent.prototype, "payFromControl", {
            get: function () {
                return this.relativeFormGroup.get('payFromAccount');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StopCheckFormComponent.prototype, "showValidation", {
            get: function () {
                return this._showValidation;
            },
            /**
             * @deprecated since version 3.9.3
             * Validation errors in form appear on blur.
             */
            set: function (val) {
                this.deprecationService.logDeprecatedFeature("StopChecksFormComponent: showValidation input is deprecated since version 3.9.3,\n      validation errors in form appear on blur");
                this._showValidation = val;
            },
            enumerable: false,
            configurable: true
        });
        StopCheckFormComponent.prototype.crossFormValidation = function (rangeNumber) {
            return (function (group) {
                var controls = group.controls, value = group.value;
                var checkNum = controls.checkNumber;
                var firstCheckNum = controls.firstCheckNumber;
                var lastCheckNum = controls.lastCheckNumber;
                var checkNumValidators = [
                    i11.Validators.required,
                    i11.Validators.pattern(/^\d+$/),
                ];
                if (value['stopRangeType'] === StopCheckRequestType.SINGLE) {
                    firstCheckNum.clearValidators();
                    firstCheckNum.setErrors(null);
                    lastCheckNum.clearValidators();
                    lastCheckNum.setErrors(null);
                    checkNum.setValidators(checkNumValidators);
                }
                else {
                    checkNum.clearValidators();
                    checkNum.setErrors(null);
                    firstCheckNum.setValidators(checkNumValidators);
                    lastCheckNum.setValidators(checkNumValidators);
                    lastCheckNum.setErrors(getLastCheckLessThanFirstError(firstCheckNum, lastCheckNum));
                    lastCheckNum.setErrors(getCheckRangeError(firstCheckNum, lastCheckNum, rangeNumber));
                }
            });
        };
        StopCheckFormComponent.prototype.ngOnInit = function () {
            var _a, _b, _c;
            // populate value to show it in edit mode
            if (this.relativeFormGroup && ((_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.value['id'])) {
                var formValue = (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.value;
                // account selector component expect account number attribute name as 'number' which is not available in edit flow
                this.selectPayFromAccount(Object.assign(Object.assign({}, formValue), { number: formValue.accountNumber }));
            }
            (_c = this.relativeFormGroup) === null || _c === void 0 ? void 0 : _c.setValidators(this.crossFormValidation(this.checksRangeNumber));
            this.relativeFormGroup.updateValueAndValidity();
        };
        StopCheckFormComponent.prototype.onCancelForm = function () {
            this.cancelForm.emit();
        };
        StopCheckFormComponent.prototype.onBlurAccount = function () {
            var _a, _b, _c;
            if (this.selectedAccount) {
                return;
            }
            (_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.setErrors({ required: true });
            (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.markAsTouched();
            (_c = this.payFromControl) === null || _c === void 0 ? void 0 : _c.markAsDirty();
        };
        StopCheckFormComponent.prototype.selectPayFromAccount = function (account) {
            var _a, _b;
            if (this.payFromControl && account.id) {
                this.payFromControl.setValue({
                    id: account.id,
                    name: account.name,
                    accountType: account.accountType,
                    accountNumber: account.accountNumber,
                    currency: account.currency,
                    balance: account.balance,
                });
                this.selectedAccount = account;
                (_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
                (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.markAsDirty();
            }
        };
        StopCheckFormComponent.prototype.onSubmit = function () {
            var controls = this.relativeFormGroup.controls;
            for (var control in controls) {
                if (controls.hasOwnProperty(control)) {
                    controls[control].markAsTouched();
                    controls[control].markAsDirty();
                }
            }
            this.formSubmit.emit();
        };
        StopCheckFormComponent.prototype.getIdByControl = function (controlName) {
            return controlName + "StopChecksError" + this.id;
        };
        StopCheckFormComponent.prototype.getDescribedby = function (controlName) {
            var _a;
            var control = (_a = this.relativeFormGroup) === null || _a === void 0 ? void 0 : _a.get(controlName);
            return (control === null || control === void 0 ? void 0 : control.invalid) && (control === null || control === void 0 ? void 0 : control.touched)
                ? this.getIdByControl(controlName)
                : null;
        };
        StopCheckFormComponent.prototype.getDescribedbyBySubmit = function () {
            var _this = this;
            return (Object.keys(this.relativeFormGroup.controls)
                .reduce(function (acc, controlName) {
                var errorId = _this.getDescribedby(controlName);
                acc += errorId ? errorId + " " : '';
                return acc;
            }, '')
                .trim() || null);
        };
        return StopCheckFormComponent;
    }());
    StopCheckFormComponent._id = 0;
    /** @nocollapse */ StopCheckFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckFormComponent, deps: [{ token: i1__namespace.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ StopCheckFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckFormComponent, selector: "bb-stop-check-form", inputs: { showValidation: "showValidation", relativeFormGroup: "relativeFormGroup", payFromAccounts$: "payFromAccounts$", currencies: "currencies", checksRangeNumber: "checksRangeNumber" }, outputs: { formSubmit: "formSubmit", cancelForm: "cancelForm" }, ngImport: i0__namespace, template: "<ng-container\n  bbStopCheckFormComponentCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n<ng-template bbStopCheckFormComponentCustomizable let-hostRef>\n  <form\n    autocomplete=\"off\"\n    [formGroup]=\"hostRef.relativeFormGroup\"\n    (ngSubmit)=\"hostRef.onSubmit()\"\n  >\n    <bb-fieldset-ui\n      id=\"stop-checks-form-heading-{{ id }}\"\n      heading=\"Check details\"\n      i18n-heading=\"@@initiate-stop-check.check-details-fieldset-heading\"\n    >\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <label class=\"bb-form-field\">\n            <bb-account-selector-ui\n              [markFirst]=\"true\"\n              [highlight]=\"false\"\n              [filterItems]=\"true\"\n              [closeOnSelect]=\"true\"\n              dropdownPosition=\"bottom\"\n              placeholder=\"Select check account\"\n              data-role=\"pay-from-account-selector\"\n              [selectedItems]=\"hostRef.selectedAccount\"\n              [items]=\"hostRef.payFromAccounts$ | async\"\n              [productNumberFormat]=\"hostRef.accountFormat\"\n              (blur)=\"hostRef.onBlurAccount()\"\n              (change)=\"hostRef.selectPayFromAccount($event)\"\n              i18n-placeholder=\"@@initiate-stop-check.empty.state.placeholder\"\n              [aria-describedby]=\"hostRef.getDescribedby('payFromAccount')\"\n            ></bb-account-selector-ui>\n          </label>\n\n          <bb-input-validation-message-ui\n            [messageId]=\"hostRef.getIdByControl('payFromAccount')\"\n            *ngIf=\"hostRef.payFromControl as payFromControlRef\"\n            [showErrors]=\"\n              payFromControlRef.invalid && payFromControlRef.touched\n            \"\n          >\n            <span\n              *ngIf=\"\n                hostRef.payFromControl.errors?.required ||\n                !hostRef.selectedAccount\n              \"\n              data-role=\"missing-pay-from-account\"\n              i18n=\"@@initiate-stop-check.error.required.pay-from-account\"\n            >\n              Check account is required\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <bb-input-radio-group-ui\n            horizontal=\"true\"\n            data-role=\"radio-group\"\n            formControlName=\"stopRangeType\"\n            labelClasses=\"form-check-label\"\n            aria-labelledby=\"stop-checks-form-heading-{{ id }}\"\n          >\n            <bb-input-radio-ui\n              value=\"single\"\n              label=\"Single\"\n              i18n-label=\"@@initiate-stop-check.range-type.single.label\"\n            ></bb-input-radio-ui>\n            <bb-input-radio-ui\n              value=\"multiple\"\n              label=\"Multiple\"\n              i18n-label=\"@@initiate-stop-check.radio.range-type.multiple.label\"\n            ></bb-input-radio-ui>\n          </bb-input-radio-group-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div\n          class=\"form-group col-md-12\"\n          *ngIf=\"\n            hostRef.relativeFormGroup.get('stopRangeType')?.value === 'single'\n          \"\n        >\n          <bb-input-text-ui\n            [maxLength]=\"15\"\n            [aria-invalid]=\"\n              hostRef.relativeFormGroup?.get('checkNumber').invalid\n            \"\n            [required]=\"true\"\n            formControlName=\"checkNumber\"\n            label=\"Check number\"\n            i18n-label=\"@@initiate-stop-check.check-number-label\"\n            data-role=\"check-number\"\n            [aria-describedby]=\"hostRef.getDescribedby('checkNumber')\"\n          ></bb-input-text-ui>\n\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              hostRef.relativeFormGroup?.get(\n                'checkNumber'\n              ) as checkNumberControl\n            \"\n            [messageId]=\"hostRef.getIdByControl('checkNumber')\"\n            [showErrors]=\"\n              checkNumberControl.invalid && checkNumberControl.touched\n            \"\n          >\n            <span\n              *ngIf=\"checkNumberControl.errors?.required\"\n              data-role=\"validation-error-single-check-number-required\"\n              i18n=\"\n                @@initiate-stop-check.check-number.validation-error.required\"\n            >\n              Check number is required\n            </span>\n            <span\n              *ngIf=\"checkNumberControl.errors?.pattern\"\n              data-role=\"validation-error-check-number-digits-only\"\n              i18n=\"@@initiate-stop-check.check-number.validation-error.pattern\"\n            >\n              Check number should be digits only\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <ng-container\n        *ngIf=\"\n          hostRef.relativeFormGroup.get('stopRangeType')?.value === 'multiple'\n        \"\n      >\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <bb-input-text-ui\n              [maxLength]=\"15\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('firstCheckNumber').invalid &&\n                hostRef.relativeFormGroup?.get('firstCheckNumber').touched\n              \"\n              [required]=\"true\"\n              [aria-describedby]=\"hostRef.getDescribedby('firstCheckNumber')\"\n              formControlName=\"firstCheckNumber\"\n              label=\"First check number\"\n              i18n-label=\"@@initiate-stop-check.first-check-number.label\"\n              data-role=\"from-check-number\"\n            ></bb-input-text-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'firstCheckNumber'\n                ) as firstCheckNumberControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('firstCheckNumber')\"\n              [showErrors]=\"\n                firstCheckNumberControl.invalid &&\n                firstCheckNumberControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"firstCheckNumberControl.errors?.required\"\n                data-role=\"validation-error-first-check-number-required\"\n                i18n=\"\n                  @@initiate-stop-check.first-check-number.validation-error.required\"\n              >\n                First check number is required\n              </span>\n              <span\n                *ngIf=\"firstCheckNumberControl.errors?.pattern\"\n                data-role=\"validation-error-first-check-number-digits-only\"\n                i18n=\"\n                  @@initiate-stop-check.first-check-number.validation-error.pattern\"\n              >\n                Check number should be digits only\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <bb-input-text-ui\n              [maxLength]=\"15\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('lastCheckNumber').invalid &&\n                hostRef.relativeFormGroup?.get('lastCheckNumber').touched\n              \"\n              [required]=\"true\"\n              [aria-describedby]=\"hostRef.getDescribedby('lastCheckNumber')\"\n              formControlName=\"lastCheckNumber\"\n              label=\"Last check number\"\n              i18n-label=\"@@initiate-stop-check.last-check-number.label\"\n              data-role=\"to-check-number\"\n            ></bb-input-text-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'lastCheckNumber'\n                ) as lastCheckNumberControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('lastCheckNumber')\"\n              [showErrors]=\"\n                lastCheckNumberControl.invalid && lastCheckNumberControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.required\"\n                data-role=\"validation-error-last-check-number-required\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.required\"\n              >\n                Last check number is required\n              </span>\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.pattern\"\n                data-role=\"validation-error-last-check-number-digits-only\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.pattern\"\n              >\n                Check number should be digits only\n              </span>\n              <span\n                *ngIf=\"\n                  lastCheckNumberControl.errors?.biggerThenFirstCheckNumber\n                \"\n                data-role=\"validation-error-last-check-number-higher-than-previous\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.bigger\"\n              >\n                This needs to be higher then previous check number\n              </span>\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.checkRangeError\"\n                data-role=\"validation-error-last-check-number-out-of-range\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.range\"\n              >\n                This request cannot exceed\n                {{ hostRef.checksRangeNumber }} consecutive checks\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <ng-container\n        *ngIf=\"\n          hostRef.relativeFormGroup.get('stopRangeType')?.value === 'single'\n        \"\n      >\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              #stopCheckAmountCurrencyLabel\n              id=\"stop-check-amount-currency-label{{ id }}\"\n              i18n=\"@@initiate-stop-check.check-amount\"\n            >\n              Check amount\n            </label>\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-currency-input-ui\n              [currencies]=\"hostRef.currencies\"\n              [integerLabelSrOnly]=\"true\"\n              [decimalLabelSrOnly]=\"true\"\n              [aria-labelledby]=\"stopCheckAmountCurrencyLabel.id\"\n              resultType=\"string\"\n              maxlength=\"18\"\n              formControlName=\"amountGroup\"\n            ></bb-currency-input-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              #stopCheckDateIssuedLabel\n              id=\"stop-check-date-issued-label{{ id }}\"\n              i18n=\"@@initiate-stop-check.date-issued\"\n            >\n              Date issued\n            </label>\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-input-datepicker-ui\n              #dateIssued\n              name=\"dateIssued\"\n              overrideDateFormat=\"MM/dd/y\"\n              formControlName=\"dateIssued\"\n              [aria-labelledby]=\"stopCheckDateIssuedLabel.id\"\n              [aria-describedby]=\"hostRef.getDescribedby('dateIssued')\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('dateIssued').invalid &&\n                hostRef.relativeFormGroup?.get('dateIssued').touched\n              \"\n              [placeholder]=\"'MM/DD/YYYY'\"\n              data-role=\"date-issued\"\n            ></bb-input-datepicker-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'dateIssued'\n                ) as dateIssuedControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('dateIssued')\"\n              [showErrors]=\"\n                dateIssuedControl.invalid && dateIssuedControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"dateIssuedControl.errors?.required\"\n                data-role=\"validation-error-date-issued-invalid-date-format\"\n                i18n=\"\n                  @@initiate-stop-check.date-issued.validation-error.invalid-date-format\"\n              >\n                Invalid date format\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              [attr.for]=\"payeeName.id\"\n              i18n=\"@@initiate-stop-check.payee-name\"\n              >Payee name</label\n            >\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-input-text-ui\n              #payeeName\n              [maxLength]=\"140\"\n              formControlName=\"payeeName\"\n              data-role=\"payee-name\"\n            ></bb-input-text-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <label\n            [for]=\"stopReason.id\"\n            i18n=\"@@initiate-stop-check.select-reason\"\n            >Stop reason</label\n          >\n          <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n          <bb-dropdown-single-select-ui\n            #stopReason\n            data-role=\"stop-reason\"\n            formControlName=\"stopReason\"\n          >\n            <bb-dropdown-single-select-option-ui\n              value=\"\"\n              label=\"- Select a reason -\"\n              i18n-label=\"@@initiate-stop-check.reason.select\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Insufficient_funds\"\n              label=\"Insufficient funds\"\n              i18n-label=\"@@initiate-stop-check.reason-Insufficient_funds\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Incorrect_amount_or_other_details\"\n              label=\"Incorrect amount or other details\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Incorrect_amount_or_other_details\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Lost_or_stolen_checks_or_check_books\"\n              label=\"Lost or stolen checks or check books\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Lost_or_stolen_checks_or_check\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Checks_mailed_to_wrong_address\"\n              label=\"Checks mailed to wrong address\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Checks_mailed_to_wrong_address\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Dispute_over_purchases\"\n              label=\"Dispute over purchases\"\n              i18n-label=\"@@initiate-stop-check.reason-Dispute_over_purchases\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Lost_in_mail\"\n              label=\"Lost in mail\"\n              i18n-label=\"@@initiate-stop-check.reason-Lost_in_Mail\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Other\"\n              label=\"Other\"\n              i18n-label=\"@@initiate-stop-check.reason-Other\"\n            ></bb-dropdown-single-select-option-ui>\n          </bb-dropdown-single-select-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div\n          class=\"form-group col-md-12\"\n          *ngIf=\"\n            hostRef.relativeFormGroup?.get('stopReason')?.value === 'Other'\n          \"\n        >\n          <bb-textarea-ui\n            wrap=\"hard\"\n            [rows]=\"2\"\n            [cols]=\"50\"\n            [minLength]=\"3\"\n            [maxLength]=\"140\"\n            label=\"Please specify:\"\n            [showCharCounter]=\"true\"\n            formControlName=\"otherReason\"\n            data-role=\"other-reason-text\"\n            aria-label=\"Please specify other reason\"\n            i18n-aria-label=\"@@initiate-stop-check.reason-other.aria-label\"\n            i18n-label=\"@@initiate-stop-check.reason-other.label\"\n          ></bb-textarea-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"col-md-12\">\n          <label\n            #stopChecksExpirationDateLabel\n            id=\"stop-checks-expiration-date-label-{{ id }}\"\n            i18n=\"@@initiate-stop-check.expiration-date\"\n          >\n            Stop expiration date\n          </label>\n          <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n          <bb-input-datepicker-ui\n            overrideDateFormat=\"MM/dd/y\"\n            formControlName=\"expirationDate\"\n            [aria-labelledby]=\"stopChecksExpirationDateLabel.id\"\n            [aria-describedby]=\"hostRef.getDescribedby('expirationDate')\"\n            [aria-invalid]=\"\n              hostRef.relativeFormGroup?.get('expirationDate').invalid &&\n              hostRef.relativeFormGroup?.get('expirationDate').touched\n            \"\n            [placeholder]=\"'MM/DD/YYYY'\"\n            data-role=\"expiration-date\"\n          ></bb-input-datepicker-ui>\n\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              hostRef.relativeFormGroup?.get(\n                'expirationDate'\n              ) as expirationDateControl\n            \"\n            [messageId]=\"hostRef.getIdByControl('expirationDate')\"\n            [showErrors]=\"\n              expirationDateControl.invalid && expirationDateControl.touched\n            \"\n          >\n            <span\n              *ngIf=\"expirationDateControl.errors?.pastDate\"\n              i18n=\"\n                Stop expiration date past date error text |Error past date\n                message for Stop expiration date input\n                field@@initiate-stop-check.error.pastDate.expirationDate\"\n              data-role=\"validation-error-past-date-expiration-date\"\n            >\n              Stop expiration date cannot be in the past\n            </span>\n            <span\n              *ngIf=\"expirationDateControl.errors?.invalidDateFormat\"\n              data-role=\"validation-error-expiration-date-invalid-date-format\"\n              i18n=\"\n                @@initiate-stop-check.expiration-date.validation-error.invalid-date-format\"\n            >\n              Invalid date format\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </bb-fieldset-ui>\n\n    <div class=\"bb-stop-checks-control-buttons bb-button-bar\">\n      <button\n        bbButton\n        type=\"submit\"\n        buttonSize=\"md\"\n        [attr.aria-describedby]=\"hostRef.getDescribedbyBySubmit()\"\n        class=\"bb-button-bar__button\"\n        data-role=\"continue-btn\"\n        i18n=\"@@initiate-stop-check.form-action.continue\"\n      >\n        Continue\n      </button>\n\n      <button\n        bbButton\n        type=\"button\"\n        color=\"link\"\n        buttonSize=\"md\"\n        class=\"bb-button-bar__button bb-stop-checks-control-buttons__cancel\"\n        data-role=\"cancel-btn\"\n        i18n=\"@@initiate-stop-check.form-action.cancel\"\n        (click)=\"hostRef.onCancelForm()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n\n  <ng-template #optionalField>\n    <span class=\"bb-text-support\">\n      (<ng-container i18n=\"@@initiate-stop-check.optional-field-label\"\n        >Optional</ng-container\n      >)\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace.FieldsetComponent; }), selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.TextareaComponent; }), selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }], directives: [{ type: i0__namespace.forwardRef(function () { return StopCheckFormComponentCustomizableDirective; }), selector: "[bbStopCheckFormComponentCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i5__namespace$1.AsyncPipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-stop-check-form',
                        templateUrl: './stop-check-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.DeprecationsService }]; }, propDecorators: { showValidation: [{
                    type: i0.Input
                }], relativeFormGroup: [{
                    type: i0.Input
                }], payFromAccounts$: [{
                    type: i0.Input
                }], formSubmit: [{
                    type: i0.Output
                }], currencies: [{
                    type: i0.Input
                }], checksRangeNumber: [{
                    type: i0.Input
                }], cancelForm: [{
                    type: i0.Output
                }] } });
    var StopCheckFormComponentCustomizableDirective = /** @class */ (function (_super) {
        __extends(StopCheckFormComponentCustomizableDirective, _super);
        function StopCheckFormComponentCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return StopCheckFormComponentCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ StopCheckFormComponentCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckFormComponentCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ StopCheckFormComponentCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckFormComponentCustomizableDirective, selector: "[bbStopCheckFormComponentCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckFormComponentCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbStopCheckFormComponentCustomizable]',
                    }]
            }] });

    var StopCheckReviewComponent = /** @class */ (function () {
        function StopCheckReviewComponent() {
            this.hostRef = this;
            this.showConfirmation = false;
            this.disableSubmitAction = false;
            this.showAlert = false;
            /**
             * Event will be triggered on payment reset action
             */
            this.triggerStopRequestReset = new i0.EventEmitter();
            /**
             * Event will be triggered on payment submit action
             */
            this.triggerStopRequestSubmit = new i0.EventEmitter();
            /**
             * Event will be triggered on payment edit action
             */
            this.triggerStopRequestEdit = new i0.EventEmitter();
        }
        Object.defineProperty(StopCheckReviewComponent.prototype, "failedToSubmit", {
            /**
             * Flag for failing request submit
             */
            set: function (v) {
                this.showAlert = v;
            },
            enumerable: false,
            configurable: true
        });
        StopCheckReviewComponent.prototype.submitStopRequest = function () {
            this.disableSubmitAction = true;
            this.triggerStopRequestSubmit.emit();
        };
        StopCheckReviewComponent.prototype.resetStopRequest = function () {
            this.triggerStopRequestReset.emit();
        };
        StopCheckReviewComponent.prototype.editStopRequest = function () {
            this.triggerStopRequestEdit.emit();
        };
        StopCheckReviewComponent.prototype.toggleConfirmationDialog = function () {
            this.showConfirmation = !this.showConfirmation;
        };
        StopCheckReviewComponent.prototype.hideAlert = function () {
            this.showAlert = false;
        };
        return StopCheckReviewComponent;
    }());
    /** @nocollapse */ StopCheckReviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckReviewComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ StopCheckReviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckReviewComponent, selector: "bb-stop-check-review", inputs: { requestIsSubmitted: "requestIsSubmitted", request: "request", stopRequestIsSubmitted: "stopRequestIsSubmitted", failedToSubmit: "failedToSubmit" }, outputs: { triggerStopRequestReset: "triggerStopRequestReset", triggerStopRequestSubmit: "triggerStopRequestSubmit", triggerStopRequestEdit: "triggerStopRequestEdit" }, ngImport: i0__namespace, template: "<ng-container\n  bbStopCheckReviewComponentCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n<ng-template bbStopCheckReviewComponentCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-header-ui\n        headingType=\"h2\"\n        heading=\"Review and submit\"\n        i18n-heading=\"@@initiate-stop-check.review-request-details-header\"\n      ></bb-header-ui>\n    </div>\n\n    <bb-alert-ui\n      title=\"\"\n      modifier=\"error\"\n      [dismissible]=\"true\"\n      *ngIf=\"hostRef.showAlert\"\n      (close)=\"hostRef.hideAlert()\"\n    >\n      <span\n        data-role=\"failed-to-submit-alert\"\n        i18n=\"@@initiate-stop-check.review.failed-to-submit\"\n      >\n        Failed to submit stop check request, please try again later\n      </span>\n    </bb-alert-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--md\">\n    <bb-header-ui\n      headingType=\"h3\"\n      heading=\"Check details\"\n      i18n-heading=\"@@initiate-stop-check.review-check-details-header\"\n    ></bb-header-ui>\n  </div>\n\n  <div class=\"row bb-block--xl\">\n    <div class=\"col-md-12 form-group\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review.check-account\"\n        data-role=\"check-account-label\"\n      >\n        Check account\n      </div>\n      <div>\n        <div data-role=\"account-name\">\n          {{ hostRef.request?.payFromAccount?.name }}\n        </div>\n        <div data-role=\"account-number\" class=\"bb-text-support\">\n          {{ hostRef.request?.payFromAccount?.accountNumber }}\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"col-md-6 form-group\"\n      *ngIf=\"\n        hostRef.request?.checkNumber &&\n        hostRef.request?.stopRangeType === 'single'\n      \"\n    >\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review.check-number\"\n        data-role=\"check-number-label\"\n      >\n        Check number\n      </div>\n      <div data-role=\"check-number\">\n        {{ hostRef.request?.checkNumber }}\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"hostRef.request?.stopRangeType === 'multiple'\">\n      <div\n        class=\"col-md-6 form-group\"\n        *ngIf=\"hostRef.request?.firstCheckNumber\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.first-check-number\"\n          data-role=\"first-check-number-label\"\n        >\n          First check number\n        </div>\n        <div data-role=\"first-check-number\">\n          {{ hostRef.request?.firstCheckNumber }}\n        </div>\n      </div>\n\n      <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.lastCheckNumber\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.last-check-number\"\n          data-role=\"last-check-number-label\"\n        >\n          Last check number\n        </div>\n        <div data-role=\"last-check-number\">\n          {{ hostRef.request?.lastCheckNumber }}\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"hostRef.request?.stopRangeType === 'single'\">\n      <div\n        class=\"col-md-6 form-group\"\n        *ngIf=\"hostRef.request?.amountGroup?.amount\"\n      >\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.check-amount\"\n          data-role=\"check-amount-label\"\n        >\n          Check amount\n        </div>\n        <div>\n          <bb-amount-ui\n            [mapCurrency]=\"false\"\n            data-role=\"check-amount\"\n            [amount]=\"hostRef.request?.amountGroup?.amount\"\n            [currency]=\"hostRef.request?.amountGroup?.currency\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n\n      <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.dateIssued\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.check-issue-date\"\n          data-role=\"date-issued-label\"\n        >\n          Date issued\n        </div>\n        <div data-role=\"stop-request-check-issue-date\">\n          {{ hostRef.request?.dateIssued | date }}\n        </div>\n      </div>\n\n      <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.payeeName\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@initiate-stop-check.review.payee-name\"\n          data-role=\"payee-name-label\"\n        >\n          Payee name\n        </div>\n        <div data-role=\"stop-request-payee-name\">\n          {{ hostRef.request?.payeeName }}\n        </div>\n      </div>\n    </ng-container>\n\n    <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.stopReason\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review.stop-reason-label\"\n        data-role=\"stop-reason-label\"\n      >\n        Stop reason\n      </div>\n\n      <ng-container\n        [ngSwitch]=\"hostRef.request?.stopReason\"\n        *ngIf=\"hostRef.request?.stopReason !== 'Other'\"\n      >\n        <div\n          *ngSwitchCase=\"'Insufficient_funds'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Insufficient funds\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Incorrect_amount_or_other_details'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Incorrect amount or other details\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Lost_or_stolen_checks_or_check_books'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Lost or stolen checks or check books\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Checks_mailed_to_wrong_address'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Checks mailed to wrong address\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Dispute_over_purchases'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Dispute over purchases\n        </div>\n\n        <div\n          *ngSwitchCase=\"'Lost_in_mail'\"\n          data-role=\"stop-request-selected-reason\"\n          i18n=\"@@initiate-stop-check.review.selected-reason\"\n        >\n          Lost in mail\n        </div>\n      </ng-container>\n\n      <div\n        class=\"break-word\"\n        *ngIf=\"hostRef.request?.stopReason === 'Other'\"\n        data-role=\"stop-request-other-reason-text\"\n        i18n=\"@@initiate-stop-check.review.other-reason-text\"\n      >\n        {{ hostRef.request?.otherReason.trim() || hostRef.request?.stopReason }}\n      </div>\n    </div>\n\n    <div class=\"col-md-6 form-group\" *ngIf=\"hostRef.request?.expirationDate\">\n      <div\n        class=\"bb-text-bold\"\n        i18n=\"@@initiate-stop-check.review\"\n        data-role=\"stop-request-expiration-date-label\"\n      >\n        Stop expiration date\n      </div>\n      <div data-role=\"stop-request-expiration-date-value\">\n        {{ hostRef.request?.expirationDate | date }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"bb-button-bar\" *ngIf=\"!hostRef.stopRequestIsSubmitted\">\n    <button\n      bbButton\n      data-role=\"submit-button\"\n      class=\"bb-button-bar__button\"\n      (click)=\"hostRef.submitStopRequest()\"\n      [disabled]=\"hostRef.disableSubmitAction\"\n      i18n=\"@@initiate-stop-check.review.button.submit\"\n    >\n      Submit\n    </button>\n\n    <button\n      bbButton\n      color=\"secondary\"\n      data-role=\"edit-button\"\n      class=\"bb-button-bar__button\"\n      (click)=\"hostRef.editStopRequest()\"\n      i18n=\"@@initiate-stop-check.review.button.edit\"\n    >\n      Edit\n    </button>\n\n    <button\n      bbButton\n      color=\"link\"\n      data-role=\"cancel-button\"\n      (click)=\"hostRef.toggleConfirmationDialog()\"\n      i18n=\"@@initiate-stop-check.review.button.discard\"\n      class=\"bb-button-bar__button bb-button-bar__button--across\"\n    >\n      Cancel\n    </button>\n  </div>\n\n  <bb-confirmation-dialog\n    confirmButtonColor=\"danger\"\n    [isOpen]=\"hostRef.showConfirmation\"\n    (confirm)=\"hostRef.resetStopRequest()\"\n    (cancel)=\"hostRef.toggleConfirmationDialog()\"\n  >\n    <span title i18n=\"@@initiate-stop-check.confirm-action-dialog.title\">\n      Discard stop check request?\n    </span>\n\n    <span\n      body\n      i18n=\"@@initiate-stop-check.confirm-action-dialog.body\"\n      data-role=\"confirmation-text\"\n    >\n      All entered information for this stop check request will be lost.\n    </span>\n\n    <span\n      cancelActionName\n      i18n=\"@@initiate-stop-check.confirm-action-dialog.button.cancel\"\n      >Keep it</span\n    >\n    <span\n      confirmActionName\n      i18n=\"@@initiate-stop-check.confirm-action-dialog.button.confirm\"\n      >Discard stop check</span\n    >\n  </bb-confirmation-dialog>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.ӨConfirmationDialogComponent; }), selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return StopCheckReviewComponentCustomizableDirective; }), selector: "[bbStopCheckReviewComponentCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace$1.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "date": i0__namespace.forwardRef(function () { return i5__namespace$1.DatePipe; }) }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckReviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-stop-check-review',
                        templateUrl: './stop-check-review.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { requestIsSubmitted: [{
                    type: i0.Input
                }], request: [{
                    type: i0.Input
                }], stopRequestIsSubmitted: [{
                    type: i0.Input
                }], triggerStopRequestReset: [{
                    type: i0.Output
                }], triggerStopRequestSubmit: [{
                    type: i0.Output
                }], triggerStopRequestEdit: [{
                    type: i0.Output
                }], failedToSubmit: [{
                    type: i0.Input
                }] } });
    var StopCheckReviewComponentCustomizableDirective = /** @class */ (function (_super) {
        __extends(StopCheckReviewComponentCustomizableDirective, _super);
        function StopCheckReviewComponentCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return StopCheckReviewComponentCustomizableDirective;
    }(i1.BbTemplate));
    /** @nocollapse */ StopCheckReviewComponentCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckReviewComponentCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ StopCheckReviewComponentCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckReviewComponentCustomizableDirective, selector: "[bbStopCheckReviewComponentCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopCheckReviewComponentCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbStopCheckReviewComponentCustomizable]',
                    }]
            }] });

    // These tokens can be used to change configuration at app level
    var BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN = new i0.InjectionToken('BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN');
    // These tokens can be used to change configuration at app level
    var BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN = new i0.InjectionToken('BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN');
    /**
     * Access control config values
     */
    var accessControlConfigDefaults = {
        resourceName: 'Payments',
        businessFunction: 'Stop Checks',
        privilege: 'create',
    };
    /**
     * Stop checks providers types
     */
    var StopCheckConfigProvider = [
        {
            provide: BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN,
            useValue: accessControlConfigDefaults,
        },
        {
            provide: BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN,
            useValue: currencyFallback,
        },
    ];

    var accMap = function () { return function (source) { return source.pipe(operators.map(function (_a) {
        var _b = __read(_a, 2), arrangements = _b[0], schemeName = _b[1];
        return arrangements.items.map(function (arrangement) {
            var accountNumber = arrangement.id;
            if (schemeName !== 'ID') {
                accountNumber = arrangement[schemeName];
            }
            return {
                id: arrangement.id,
                name: arrangement.name,
                balance: arrangement.bookedBalance,
                bookedBalance: arrangement.bookedBalance,
                availableBalance: arrangement.availableBalance,
                currency: arrangement.currency,
                accountNumber: accountNumber || '',
                number: accountNumber || '',
                accountType: schemeName,
                externalTransferAllowed: arrangement.externalTransferAllowed,
                urgentTransferAllowed: arrangement.urgentTransferAllowed,
            };
        });
    })); }; };
    function arrangementItemFromService(record) {
        return {
            id: record.id,
            name: record.name || '',
            balance: record.availableBalance || record.bookedBalance || 0,
            bookedBalance: record.bookedBalance || 0,
            availableBalance: record.availableBalance,
            currency: record.currency || '',
            IBAN: record.IBAN || record.number,
            BBAN: record.BBAN,
            externalTransferAllowed: record.externalTransferAllowed,
            urgentTransferAllowed: record.urgentTransferAllowed,
            additions: record.additions,
        };
    }
    function arrangementListFromService(response, isLoadMore) {
        if (isLoadMore === void 0) { isLoadMore = false; }
        return {
            count: response.length,
            items: response.map(arrangementItemFromService),
            isLoadMore: isLoadMore,
        };
    }
    function requestInfoToPostRequestBody(requestInfo) {
        var payFromAccount = requestInfo.payFromAccount, stopReason = requestInfo.stopReason, otherReason = requestInfo.otherReason, stopRangeType = requestInfo.stopRangeType, checkNumber = requestInfo.checkNumber, firstCheckNumber = requestInfo.firstCheckNumber, lastCheckNumber = requestInfo.lastCheckNumber, dateIssued = requestInfo.dateIssued, payeeName = requestInfo.payeeName, amountGroup = requestInfo.amountGroup;
        var reason = (otherReason && otherReason.trim()) || stopReason;
        var singleCheckRequest = stopRangeType === StopCheckRequestType.SINGLE;
        var name = payFromAccount.name, accountNumber = payFromAccount.accountNumber, accountType = payFromAccount.accountType;
        return Object.assign(Object.assign({ originatorAccount: {
                name: name,
                identification: accountNumber,
                schemeName: accountType,
            } }, (singleCheckRequest
            ? {
                check: Object.assign(Object.assign(Object.assign({ number: checkNumber }, (amountGroup && {
                    amount: {
                        amount: amountGroup.amount,
                        currencyCode: amountGroup.currency,
                    },
                })), (payeeName && { payeeName: payeeName })), (dateIssued && { dateIssued: dateIssued })),
            }
            : {
                checkNumberRange: {
                    firstNumber: firstCheckNumber,
                    lastNumber: lastCheckNumber,
                },
            })), (reason && { reason: reason }));
    }

    var ActionTypes;
    (function (ActionTypes) {
        ActionTypes["INIT_REQUEST"] = "[STOP CHECK] Initiate request";
        ActionTypes["REVIEW_REQUEST"] = "[STOP CHECK] Review request";
        ActionTypes["EDIT_REQUEST"] = "[STOP CHECK] Edit request";
        ActionTypes["MARK_REQUEST_AS_SUBMITTED"] = "[STOP CHECK] Mark request as submitted";
        ActionTypes["DISCARD"] = "[STOP CHECK] Discard review";
    })(ActionTypes || (ActionTypes = {}));
    exports.RequestStatus = void 0;
    (function (RequestStatus) {
        RequestStatus["INIT"] = "INIT";
        RequestStatus["REVIEW"] = "REVIEW";
        RequestStatus["REQUEST_IS_SUBMITTED"] = "REQUEST_IS_SUBMITTED";
        RequestStatus["EDIT_MODE"] = "EDIT_MODE";
        RequestStatus["DISCARD"] = "DISCARD";
    })(exports.RequestStatus || (exports.RequestStatus = {}));
    var state = {
        requestInfo: {
            payFromAccount: {
                id: '',
                name: '',
                balance: 0,
                currency: '',
                accountNumber: '',
                accountType: 'BBAN',
            },
            checkNumber: '',
            firstCheckNumber: '',
            lastCheckNumber: '',
            stopRangeType: StopCheckRequestType.SINGLE,
            amountGroup: undefined,
            payeeName: '',
            dateIssued: '',
            expirationDate: '',
            stopReason: '',
            otherReason: '',
        },
        status: exports.RequestStatus.INIT,
    };

    var NavigationService = /** @class */ (function () {
        function NavigationService(routerService) {
            this.routerService = routerService;
        }
        NavigationService.prototype.form = function () {
            return this.routerService.navigate(['form']);
        };
        NavigationService.prototype.review = function () {
            return this.routerService.navigate(['review']);
        };
        return NavigationService;
    }());
    /** @nocollapse */ NavigationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService, deps: [{ token: i1__namespace.RouterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NavigationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.RouterService }]; } });

    var StateService = /** @class */ (function () {
        function StateService(navigationService) {
            var _this = this;
            this.navigationService = navigationService;
            this.store = new rxjs.BehaviorSubject(state);
            this.eventDispatcher = new rxjs.Subject();
            this.eventDispatcher.subscribe(function (data) {
                var _a, _b, _c;
                switch (data.type) {
                    case ActionTypes.INIT_REQUEST:
                        _this.store.next(state);
                        break;
                    case ActionTypes.DISCARD:
                        _this.store.next({
                            requestInfo: state.requestInfo,
                            status: (_a = data.payload) === null || _a === void 0 ? void 0 : _a.status,
                        });
                        break;
                    case ActionTypes.REVIEW_REQUEST:
                    case ActionTypes.EDIT_REQUEST:
                    case ActionTypes.MARK_REQUEST_AS_SUBMITTED:
                        _this.store.next({
                            requestInfo: (_b = data.payload) === null || _b === void 0 ? void 0 : _b.requestInfo,
                            status: (_c = data.payload) === null || _c === void 0 ? void 0 : _c.status,
                        });
                        break;
                    default:
                        break;
                }
            });
        }
        StateService.prototype.initStopCheckRequest = function () {
            this.eventDispatcher.next({
                type: ActionTypes.DISCARD,
                payload: {
                    status: exports.RequestStatus.DISCARD,
                },
            });
        };
        StateService.prototype.sendStopRequestToReview = function (data) {
            this.eventDispatcher.next({
                type: ActionTypes.REVIEW_REQUEST,
                payload: {
                    requestInfo: data,
                    status: exports.RequestStatus.REVIEW,
                },
            });
            this.navigationService.review();
        };
        StateService.prototype.markStopRequestAsSubmitted = function (data) {
            this.eventDispatcher.next({
                type: ActionTypes.MARK_REQUEST_AS_SUBMITTED,
                payload: {
                    requestInfo: data,
                    status: exports.RequestStatus.REQUEST_IS_SUBMITTED,
                },
            });
        };
        StateService.prototype.sendStopRequestToEdit = function (data) {
            this.eventDispatcher.next({
                type: ActionTypes.EDIT_REQUEST,
                payload: {
                    requestInfo: data,
                    status: exports.RequestStatus.EDIT_MODE,
                },
            });
            this.navigationService.form();
        };
        return StateService;
    }());
    /** @nocollapse */ StateService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StateService, deps: [{ token: NavigationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ StateService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StateService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StateService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: NavigationService }]; } });

    var defaultStopChecksCreatePreferences = Object.assign({ currencies: [currencyFallback], notificationDismissTime: 3, checksRangeNumber: 0, schemeName: 'BBAN' }, accessControlConfigDefaults);
    var StopChecksPreferencesService = /** @class */ (function () {
        function StopChecksPreferencesService(itemModel, accessControlToken) {
            this.itemModel = itemModel;
            this.accessControlToken = accessControlToken;
            this.accessControlConfig = Object.assign(Object.assign({}, defaultStopChecksCreatePreferences), (this.accessControlToken || {}));
            this.resourceNameSubject$ = new rxjs.BehaviorSubject(undefined);
            this.businessFunctionSubject$ = new rxjs.BehaviorSubject(undefined);
            this.privilegeSubject$ = new rxjs.BehaviorSubject(undefined);
            this.notificationDismissTimeSubject$ = new rxjs.BehaviorSubject(undefined);
            this.currenciesSubject$ = new rxjs.BehaviorSubject(undefined);
            this.checksRangeNumberSubject$ = new rxjs.BehaviorSubject(undefined);
            this.schemeNameSubject$ = new rxjs.BehaviorSubject(undefined);
            this.schemeNameItemModel = this.getItemModelProperty('schemeName', this.accessControlConfig.schemeName);
            this.resourceNameItemModel = this.getItemModelProperty('resourceName', this.accessControlConfig.resourceName);
            this.businessFunctionItemModel = this.getItemModelProperty('businessFunction', this.accessControlConfig.businessFunction);
            this.privilegeItemModel = this.getItemModelProperty('privilege', this.accessControlConfig.privilege);
            this.notificationDismissTimeItemModel = this.getItemModelProperty('notificationDismissTime', defaultStopChecksCreatePreferences.notificationDismissTime).pipe(operators.map(i2$2.toInteger));
            this.currenciesItemModel = this.getItemModelProperty('currencies', defaultStopChecksCreatePreferences.currencies[0]).pipe(operators.map(function (currencies) { return currencies.split(',').map(function (currency) { return currency.trim(); }); }));
            this.checksRangeNumberItemModel = this.getItemModelProperty('checksRangeNumber', defaultStopChecksCreatePreferences.checksRangeNumber).pipe(operators.map(i2$2.toInteger));
            this.schemeName$ = this.getProperty(this.schemeNameSubject$, this.schemeNameItemModel);
            this.resourceName$ = this.getProperty(this.resourceNameSubject$, this.resourceNameItemModel);
            this.businessFunction$ = this.getProperty(this.businessFunctionSubject$, this.businessFunctionItemModel);
            this.privilege$ = this.getProperty(this.privilegeSubject$, this.privilegeItemModel);
            this.notificationDismissTime$ = this.getProperty(this.notificationDismissTimeSubject$, this.notificationDismissTimeItemModel);
            this.currencies$ = this.getProperty(this.currenciesSubject$, this.currenciesItemModel);
            this.checksRangeNumber$ = this.getProperty(this.checksRangeNumberSubject$, this.checksRangeNumberItemModel, true);
        }
        StopChecksPreferencesService.prototype.getProperty = function (input$, itemModel, t) {
            return rxjs.combineLatest([input$, itemModel]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), value = _c[0], valueIM = _c[1];
                return (value === undefined ? valueIM : value);
            }));
        };
        StopChecksPreferencesService.prototype.getItemModelProperty = function (name, defaultVal) {
            var _a;
            return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(name, defaultVal)) || rxjs.of(defaultVal);
        };
        StopChecksPreferencesService.prototype.setResourceName = function (value) {
            this.resourceNameSubject$.next(value);
        };
        StopChecksPreferencesService.prototype.setBusinessFunction = function (value) {
            this.businessFunctionSubject$.next(value);
        };
        StopChecksPreferencesService.prototype.setPrivilege = function (value) {
            this.privilegeSubject$.next(value);
        };
        StopChecksPreferencesService.prototype.setNotificationDismissTime = function (value) {
            this.notificationDismissTimeSubject$.next(value);
        };
        StopChecksPreferencesService.prototype.setCurrencies = function (value) {
            this.currenciesSubject$.next(value);
        };
        StopChecksPreferencesService.prototype.setChecksRangeNumber = function (value) {
            this.checksRangeNumberSubject$.next(value);
        };
        return StopChecksPreferencesService;
    }());
    /** @nocollapse */ StopChecksPreferencesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopChecksPreferencesService, deps: [{ token: i1__namespace.ItemModel, optional: true }, { token: BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ StopChecksPreferencesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopChecksPreferencesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StopChecksPreferencesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN]
                        }] }];
        } });

    var ApiHttpService = /** @class */ (function () {
        function ApiHttpService(productSummaryData, stopCheckService, stopChecksPreferencesService) {
            var _this = this;
            this.productSummaryData = productSummaryData;
            this.stopCheckService = stopCheckService;
            this.stopChecksPreferencesService = stopChecksPreferencesService;
            this.debitAccountsParameters$ = rxjs.of({
                debitAccount: true,
                size: arrangementsPageSize,
            }).pipe(operators.withLatestFrom(this.stopChecksPreferencesService.resourceName$, this.stopChecksPreferencesService.businessFunction$, this.stopChecksPreferencesService.privilege$), operators.map(function (_a) {
                var _b = __read(_a, 4), params = _b[0], resourceName = _b[1], businessFunction = _b[2], privilege = _b[3];
                return (Object.assign({ resourceName: resourceName, businessFunction: businessFunction, privilege: privilege }, params));
            }));
            this.debitAccounts$ = this.debitAccountsParameters$.pipe(operators.withLatestFrom(this.debitAccountsParameters$, function (_, params) { return params; }), operators.switchMap(function (params) { return _this.productSummaryData.getArrangementsByBusinessFunction(params); }), operators.map(function (response) { return arrangementListFromService(response); }), operators.shareReplay(1));
        }
        ApiHttpService.prototype.postStopCheckRequest = function (payload) {
            return this.stopCheckService.postStopChecks(requestInfoToPostRequestBody(payload));
        };
        return ApiHttpService;
    }());
    /** @nocollapse */ ApiHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApiHttpService, deps: [{ token: i1__namespace$2.ProductSummaryHttpService }, { token: i2__namespace$2.ChecksService }, { token: StopChecksPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ApiHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApiHttpService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApiHttpService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.ProductSummaryHttpService }, { type: i2__namespace$2.ChecksService }, { type: StopChecksPreferencesService }]; } });

    var FormContainerComponent = /** @class */ (function () {
        function FormContainerComponent(stateService, apiService, stopChecksPreferencesService) {
            this.stateService = stateService;
            this.apiService = apiService;
            this.stopChecksPreferencesService = stopChecksPreferencesService;
            this.fb = new i11.FormBuilder();
            this.accounts$ = this.apiService.debitAccounts$.pipe(operators.withLatestFrom(this.stopChecksPreferencesService.schemeName$), accMap());
            this.currenciesList = this.stopChecksPreferencesService.currencies$;
            this.checksRangeNumber = this.stopChecksPreferencesService.checksRangeNumber$;
        }
        FormContainerComponent.prototype.buildForm = function (initValue) {
            var _a = initValue.payFromAccount, id = _a.id, name = _a.name, accountNumber = _a.accountNumber, balance = _a.balance, currency = _a.currency, accountType = _a.accountType, amountGroup = initValue.amountGroup;
            return this.fb.group({
                payFromAccount: this.fb.group({
                    id: [id, [i11.Validators.required]],
                    name: [name, [i11.Validators.required]],
                    accountNumber: [accountNumber, [i11.Validators.required]],
                    accountType: [accountType, [i11.Validators.required]],
                    balance: [balance],
                    currency: [currency],
                }),
                checkNumber: [initValue.checkNumber],
                firstCheckNumber: [initValue.firstCheckNumber],
                lastCheckNumber: [initValue.lastCheckNumber],
                stopRangeType: [initValue.stopRangeType, [i11.Validators.required]],
                amountGroup: [amountGroup],
                payeeName: [initValue.payeeName],
                dateIssued: [initValue.dateIssued],
                expirationDate: [initValue.expirationDate, [i2$2.pastDateValidator]],
                stopReason: [initValue.stopReason],
                otherReason: [initValue.otherReason],
            });
        };
        FormContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.stateService.store
                .pipe(operators.pluck('requestInfo'), operators.take(1))
                .subscribe(function (requestInfo) {
                if (requestInfo) {
                    _this.requestStopCheckFrom = _this.buildForm(requestInfo);
                }
            });
        };
        FormContainerComponent.prototype.onContinue = function () {
            if (this.requestStopCheckFrom && this.requestStopCheckFrom.valid) {
                this.stateService.sendStopRequestToReview(this.requestStopCheckFrom.value);
            }
        };
        FormContainerComponent.prototype.onCancelForm = function () {
            this.stateService.initStopCheckRequest();
        };
        return FormContainerComponent;
    }());
    /** @nocollapse */ FormContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormContainerComponent, deps: [{ token: StateService }, { token: ApiHttpService }, { token: StopChecksPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ FormContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FormContainerComponent, selector: "bb-form-container", ngImport: i0__namespace, template: "\n    <bb-stop-check-form\n      [currencies]=\"currenciesList | async\"\n      [relativeFormGroup]=\"requestStopCheckFrom\"\n      [payFromAccounts$]=\"accounts$\"\n      [checksRangeNumber]=\"checksRangeNumber | async\"\n      (formSubmit)=\"onContinue()\"\n      (cancelForm)=\"onCancelForm()\"\n    ></bb-stop-check-form>\n  ", isInline: true, components: [{ type: StopCheckFormComponent, selector: "bb-stop-check-form", inputs: ["showValidation", "relativeFormGroup", "payFromAccounts$", "currencies", "checksRangeNumber"], outputs: ["formSubmit", "cancelForm"] }], pipes: { "async": i5__namespace$1.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-form-container',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: "\n    <bb-stop-check-form\n      [currencies]=\"currenciesList | async\"\n      [relativeFormGroup]=\"requestStopCheckFrom\"\n      [payFromAccounts$]=\"accounts$\"\n      [checksRangeNumber]=\"checksRangeNumber | async\"\n      (formSubmit)=\"onContinue()\"\n      (cancelForm)=\"onCancelForm()\"\n    ></bb-stop-check-form>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: StateService }, { type: ApiHttpService }, { type: StopChecksPreferencesService }]; } });

    var ReviewContainerComponent = /** @class */ (function () {
        function ReviewContainerComponent(stateService, apiHttpService, stopChecksPreferencesService, notificationService) {
            var _this = this;
            this.stateService = stateService;
            this.apiHttpService = apiHttpService;
            this.stopChecksPreferencesService = stopChecksPreferencesService;
            this.notificationService = notificationService;
            this.gc$ = new rxjs.Subject();
            this.isStopRequestSubmitted$ = new rxjs.BehaviorSubject(false);
            this.requestInfo$ = this.stateService.store.pipe(operators.pluck('requestInfo'));
            this.hasErrorOnSubmit$ = new rxjs.BehaviorSubject(false);
            this.stopChecksPreferencesService.notificationDismissTime$
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (value) { return (_this.notificationDismissTimeout = value); });
        }
        ReviewContainerComponent.prototype.showNotification = function (success, notification) {
            this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.notificationDismissTimeout * 1000, modifier: success ? 'success' : 'error' }, notification));
        };
        ReviewContainerComponent.prototype.responseHandler = function (response, requestInfo) {
            var _a;
            if (((_a = response.stopCheck) === null || _a === void 0 ? void 0 : _a.status) && requestInfo) {
                this.showNotification(true, {
                    header: this.successNotificationHeader,
                    message: this.successNotificationMessage,
                });
                this.markStopRequestAsSubmitted(requestInfo);
            }
            else {
                this.hasErrorOnSubmit$.next(true);
                this.showNotification(false, {
                    header: this.failureNotificationHeader,
                    message: this.failureNotificationMessage,
                });
            }
        };
        ReviewContainerComponent.prototype.discardStopRequest = function () {
            this.stateService.initStopCheckRequest();
        };
        ReviewContainerComponent.prototype.submitStopRequest = function (requestInfo) {
            var _this = this;
            this.apiHttpService
                .postStopCheckRequest(requestInfo)
                .pipe(operators.take(1))
                .subscribe(function (res) { return _this.responseHandler(res, requestInfo); }, function (err) { return _this.responseHandler(err); });
        };
        ReviewContainerComponent.prototype.markStopRequestAsSubmitted = function (requestInfo) {
            this.isStopRequestSubmitted$.next(true);
            this.stateService.markStopRequestAsSubmitted(requestInfo);
        };
        ReviewContainerComponent.prototype.editStopRequest = function (requestInfo) {
            this.stateService.sendStopRequestToEdit(requestInfo);
        };
        ReviewContainerComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
        };
        return ReviewContainerComponent;
    }());
    /** @nocollapse */ ReviewContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewContainerComponent, deps: [{ token: StateService }, { token: ApiHttpService }, { token: StopChecksPreferencesService }, { token: i4__namespace$1.NotificationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ReviewContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ReviewContainerComponent, selector: "bb-review-container", viewQueries: [{ propertyName: "successNotificationHeader", first: true, predicate: ["successNotificationHeader"], descendants: true }, { propertyName: "successNotificationMessage", first: true, predicate: ["successNotificationMessage"], descendants: true }, { propertyName: "failureNotificationHeader", first: true, predicate: ["failureNotificationHeader"], descendants: true }, { propertyName: "failureNotificationMessage", first: true, predicate: ["failureNotificationMessage"], descendants: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"requestInfo$ | async as requestInfo\">\n  <bb-stop-check-review\n    [request]=\"requestInfo\"\n    [failedToSubmit]=\"hasErrorOnSubmit$ | async\"\n    (triggerStopRequestEdit)=\"editStopRequest(requestInfo)\"\n    (triggerStopRequestReset)=\"discardStopRequest()\"\n    (triggerStopRequestSubmit)=\"submitStopRequest(requestInfo)\"\n    [stopRequestIsSubmitted]=\"isStopRequestSubmitted$ | async\"\n  ></bb-stop-check-review>\n</ng-container>\n\n<ng-template #successNotificationHeader>\n  <span i18n=\"@@initiate-stop-check.success-notification-header\">\n    Stop check request submitted\n  </span>\n</ng-template>\n\n<ng-template #successNotificationMessage>\n  <span i18n=\"@@initiate-stop-check.success-notification-message\">\n    We will soon update the status of your request\n  </span>\n</ng-template>\n\n<ng-template #failureNotificationHeader>\n  <span i18n=\"@@initiate-stop-check.failure-notification-header\">\n    Failed to submit stop check request\n  </span>\n</ng-template>\n\n<ng-template #failureNotificationMessage>\n  <span i18n=\"@@initiate-stop-check.failure-notification-message\">\n    Please try again later\n  </span>\n</ng-template>\n", components: [{ type: StopCheckReviewComponent, selector: "bb-stop-check-review", inputs: ["requestIsSubmitted", "request", "stopRequestIsSubmitted", "failedToSubmit"], outputs: ["triggerStopRequestReset", "triggerStopRequestSubmit", "triggerStopRequestEdit"] }], directives: [{ type: i5__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5__namespace$1.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ReviewContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-review-container',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        templateUrl: './review-container.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: StateService }, { type: ApiHttpService }, { type: StopChecksPreferencesService }, { type: i4__namespace$1.NotificationService }]; }, propDecorators: { successNotificationHeader: [{
                    type: i0.ViewChild,
                    args: ['successNotificationHeader']
                }], successNotificationMessage: [{
                    type: i0.ViewChild,
                    args: ['successNotificationMessage']
                }], failureNotificationHeader: [{
                    type: i0.ViewChild,
                    args: ['failureNotificationHeader']
                }], failureNotificationMessage: [{
                    type: i0.ViewChild,
                    args: ['failureNotificationMessage']
                }] } });

    exports.PayordStopChecksWidgetAngComponent = /** @class */ (function () {
        function PayordStopChecksWidgetAngComponent(stateService, navigationService, stopChecksConfigService) {
            this.stateService = stateService;
            this.navigationService = navigationService;
            this.stopChecksConfigService = stopChecksConfigService;
            /**
             * Trigger navigation for list view widget on submit
             */
            this.navigateOnSubmit = new i0.EventEmitter();
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(PayordStopChecksWidgetAngComponent.prototype, "resourceName", {
            /**
             * Access control resource
             */
            set: function (value) {
                this.stopChecksConfigService.setResourceName(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayordStopChecksWidgetAngComponent.prototype, "businessFunction", {
            /**
             * Access control business function
             */
            set: function (value) {
                this.stopChecksConfigService.setBusinessFunction(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayordStopChecksWidgetAngComponent.prototype, "privilege", {
            /**
             * Access control privilege
             */
            set: function (value) {
                this.stopChecksConfigService.setPrivilege(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayordStopChecksWidgetAngComponent.prototype, "notificationDismissTime", {
            /**
             * Number of seconds to dismiss the notification
             */
            set: function (value) {
                this.stopChecksConfigService.setNotificationDismissTime(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayordStopChecksWidgetAngComponent.prototype, "currencies", {
            /**
             * Comma separated list of available currencies
             */
            set: function (value) {
                var currencies = value
                    .split(',')
                    .map(function (currency) { return currency.trim(); });
                this.stopChecksConfigService.setCurrencies(currencies);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayordStopChecksWidgetAngComponent.prototype, "checksRangeNumber", {
            /**
             * Number of check number range beyond which user cannot input (0 - no limit)
             */
            set: function (value) {
                this.stopChecksConfigService.setChecksRangeNumber(i2$2.toInteger(value));
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Initializes the component.
         *
         * @returns void
         */
        PayordStopChecksWidgetAngComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.stateService.store
                .pipe(operators.pluck('status'), operators.takeUntil(this.destroy$))
                .subscribe(function (status) {
                if (status === exports.RequestStatus.INIT || status === exports.RequestStatus.DISCARD) {
                    _this.navigationService.form();
                }
                if (status === exports.RequestStatus.REQUEST_IS_SUBMITTED) {
                    _this.navigateOnSubmit.emit();
                }
            });
        };
        /**
         * Cleanups just before Angular destroys the component.
         *
         * @returns
         */
        PayordStopChecksWidgetAngComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return PayordStopChecksWidgetAngComponent;
    }());
    /** @nocollapse */ exports.PayordStopChecksWidgetAngComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: exports.PayordStopChecksWidgetAngComponent, deps: [{ token: StateService }, { token: NavigationService }, { token: StopChecksPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ exports.PayordStopChecksWidgetAngComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: exports.PayordStopChecksWidgetAngComponent, selector: "bb-payord-stop-checks-widget-ang", inputs: { resourceName: "resourceName", businessFunction: "businessFunction", privilege: "privilege", notificationDismissTime: "notificationDismissTime", currencies: "currencies", checksRangeNumber: "checksRangeNumber" }, outputs: { navigateOnSubmit: "navigateOnSubmit" }, providers: [
            NavigationService,
            StateService,
            ApiHttpService,
            i2$2.ChecksService,
            StopChecksPreferencesService,
        ], ngImport: i0__namespace, template: " <bb-router-outlet></bb-router-outlet> ", isInline: true, directives: [{ type: i1__namespace.RouterOutletDirective, selector: "bb-router-outlet", outputs: ["activate", "deactivate"], exportAs: ["bbOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    exports.PayordStopChecksWidgetAngComponent = __decorate([
        i1.RoutableWidget({
            routes: [
                { path: '', redirectTo: 'form', pathMatch: 'full' },
                { path: 'form', component: FormContainerComponent },
                { path: 'review', component: ReviewContainerComponent },
            ],
        }),
        __metadata("design:paramtypes", [StateService,
            NavigationService,
            StopChecksPreferencesService])
    ], exports.PayordStopChecksWidgetAngComponent);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: exports.PayordStopChecksWidgetAngComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-stop-checks-widget-ang',
                        template: " <bb-router-outlet></bb-router-outlet> ",
                        providers: [
                            NavigationService,
                            StateService,
                            ApiHttpService,
                            i2$2.ChecksService,
                            StopChecksPreferencesService,
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: StateService }, { type: NavigationService }, { type: StopChecksPreferencesService }]; }, propDecorators: { navigateOnSubmit: [{
                    type: i0.Output
                }], resourceName: [{
                    type: i0.Input
                }], businessFunction: [{
                    type: i0.Input
                }], privilege: [{
                    type: i0.Input
                }], notificationDismissTime: [{
                    type: i0.Input
                }], currencies: [{
                    type: i0.Input
                }], checksRangeNumber: [{
                    type: i0.Input
                }] } });

    var components = [
        FormContainerComponent,
        ReviewContainerComponent,
        StopCheckFormComponent,
        StopCheckReviewComponent,
        exports.PayordStopChecksWidgetAngComponent,
    ];
    var customizables = [
        StopCheckFormComponentCustomizableDirective,
        StopCheckReviewComponentCustomizableDirective,
    ];
    var uiModules = [
        i3.AccountSelectorModule,
        i2$1.AlertModule,
        i3$1.AmountModule,
        i13.ButtonModule,
        collapsible.CollapsibleModule,
        i7.CurrencyInputModule,
        dropdownMenu.DropdownMenuModule,
        i9.DropdownSingleSelectModule,
        i2.FieldsetModule,
        i1$1.HeaderModule,
        icon.IconModule,
        inputCheckbox.InputCheckboxModule,
        i5.InputRadioGroupModule,
        i6.InputTextModule,
        i4.InputValidationMessageModule,
        modal.ModalModule,
        searchBox.SearchBoxModule,
        i10.TextareaModule,
        i8.InputDatepickerModule,
    ];
    var innerModules = [i2$2.PaymentOrdersUiModule];
    /**
     * Exports the UI components, directives and modules for the stop checks widget
     */
    var PayordStopChecksWidgetAngModule = /** @class */ (function () {
        function PayordStopChecksWidgetAngModule() {
        }
        return PayordStopChecksWidgetAngModule;
    }());
    /** @nocollapse */ PayordStopChecksWidgetAngModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStopChecksWidgetAngModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PayordStopChecksWidgetAngModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStopChecksWidgetAngModule, declarations: [FormContainerComponent,
            ReviewContainerComponent,
            StopCheckFormComponent,
            StopCheckReviewComponent,
            exports.PayordStopChecksWidgetAngComponent, StopCheckFormComponentCustomizableDirective,
            StopCheckReviewComponentCustomizableDirective], imports: [i5$1.CommonModule,
            i11.ReactiveFormsModule, i1__namespace.BackbaseCoreModule, i2$2.PaymentOrdersUiModule, i3.AccountSelectorModule,
            i2$1.AlertModule,
            i3$1.AmountModule,
            i13.ButtonModule,
            collapsible.CollapsibleModule,
            i7.CurrencyInputModule,
            dropdownMenu.DropdownMenuModule,
            i9.DropdownSingleSelectModule,
            i2.FieldsetModule,
            i1$1.HeaderModule,
            icon.IconModule,
            inputCheckbox.InputCheckboxModule,
            i5.InputRadioGroupModule,
            i6.InputTextModule,
            i4.InputValidationMessageModule,
            modal.ModalModule,
            searchBox.SearchBoxModule,
            i10.TextareaModule,
            i8.InputDatepickerModule], exports: [FormContainerComponent,
            ReviewContainerComponent,
            StopCheckFormComponent,
            StopCheckReviewComponent,
            exports.PayordStopChecksWidgetAngComponent, StopCheckFormComponentCustomizableDirective,
            StopCheckReviewComponentCustomizableDirective, i3.AccountSelectorModule,
            i2$1.AlertModule,
            i3$1.AmountModule,
            i13.ButtonModule,
            collapsible.CollapsibleModule,
            i7.CurrencyInputModule,
            dropdownMenu.DropdownMenuModule,
            i9.DropdownSingleSelectModule,
            i2.FieldsetModule,
            i1$1.HeaderModule,
            icon.IconModule,
            inputCheckbox.InputCheckboxModule,
            i5.InputRadioGroupModule,
            i6.InputTextModule,
            i4.InputValidationMessageModule,
            modal.ModalModule,
            searchBox.SearchBoxModule,
            i10.TextareaModule,
            i8.InputDatepickerModule, i2$2.PaymentOrdersUiModule] });
    /** @nocollapse */ PayordStopChecksWidgetAngModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStopChecksWidgetAngModule, providers: [StopCheckConfigProvider], imports: [__spreadArray(__spreadArray([
                i5$1.CommonModule,
                i11.ReactiveFormsModule,
                i1.BackbaseCoreModule.withConfig({
                    classMap: { PayordStopChecksWidgetAngComponent: exports.PayordStopChecksWidgetAngComponent },
                })
            ], __read(innerModules)), __read(uiModules)), i3.AccountSelectorModule,
            i2$1.AlertModule,
            i3$1.AmountModule,
            i13.ButtonModule,
            collapsible.CollapsibleModule,
            i7.CurrencyInputModule,
            dropdownMenu.DropdownMenuModule,
            i9.DropdownSingleSelectModule,
            i2.FieldsetModule,
            i1$1.HeaderModule,
            icon.IconModule,
            inputCheckbox.InputCheckboxModule,
            i5.InputRadioGroupModule,
            i6.InputTextModule,
            i4.InputValidationMessageModule,
            modal.ModalModule,
            searchBox.SearchBoxModule,
            i10.TextareaModule,
            i8.InputDatepickerModule, i2$2.PaymentOrdersUiModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStopChecksWidgetAngModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(customizables)),
                        entryComponents: [FormContainerComponent, ReviewContainerComponent],
                        imports: __spreadArray(__spreadArray([
                            i5$1.CommonModule,
                            i11.ReactiveFormsModule,
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { PayordStopChecksWidgetAngComponent: exports.PayordStopChecksWidgetAngComponent },
                            })
                        ], __read(innerModules)), __read(uiModules)),
                        providers: [StopCheckConfigProvider],
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(customizables)), __read(uiModules)), __read(innerModules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ApiHttpService = ApiHttpService;
    exports.BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN = BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN;
    exports.BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN = BB_STOP_CHECK_CURRENCY_FALLBACK_TOKEN;
    exports.NavigationService = NavigationService;
    exports.PayordStopChecksWidgetAngModule = PayordStopChecksWidgetAngModule;
    exports.StateService = StateService;
    exports.StopChecksPreferencesService = StopChecksPreferencesService;
    exports.defaultStopChecksCreatePreferences = defaultStopChecksCreatePreferences;
    exports["ӨFormContainerComponent"] = FormContainerComponent;
    exports["ӨReviewContainerComponent"] = ReviewContainerComponent;
    exports["ӨStopCheckFormComponent"] = StopCheckFormComponent;
    exports["ӨStopCheckFormComponentCustomizableDirective"] = StopCheckFormComponentCustomizableDirective;
    exports["ӨStopCheckReviewComponent"] = StopCheckReviewComponent;
    exports["ӨStopCheckReviewComponentCustomizableDirective"] = StopCheckReviewComponentCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payord-stop-checks-widget-ang.umd.js.map
