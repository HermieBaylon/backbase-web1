import { ChangeDetectionStrategy, Component } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { pluck, take, withLatestFrom } from 'rxjs/operators';
import { accMap } from '../../mappers';
import { ApiHttpService } from '../../services/data.service';
import { StateService } from '../../store/state.service';
import { StopChecksPreferencesService } from '../../services/stop-checks-preferences.service';
import { pastDateValidator, } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
import * as i1 from "../../store/state.service";
import * as i2 from "../../services/data.service";
import * as i3 from "../../services/stop-checks-preferences.service";
import * as i4 from "../../components/stop-check-form/stop-check-form.component";
import * as i5 from "@angular/common";
export class FormContainerComponent {
    constructor(stateService, apiService, stopChecksPreferencesService) {
        this.stateService = stateService;
        this.apiService = apiService;
        this.stopChecksPreferencesService = stopChecksPreferencesService;
        this.fb = new FormBuilder();
        this.accounts$ = this.apiService.debitAccounts$.pipe(withLatestFrom(this.stopChecksPreferencesService.schemeName$), accMap());
        this.currenciesList = this.stopChecksPreferencesService.currencies$;
        this.checksRangeNumber = this.stopChecksPreferencesService.checksRangeNumber$;
    }
    buildForm(initValue) {
        const { payFromAccount: { id, name, accountNumber, balance, currency, accountType, }, amountGroup, } = initValue;
        return this.fb.group({
            payFromAccount: this.fb.group({
                id: [id, [Validators.required]],
                name: [name, [Validators.required]],
                accountNumber: [accountNumber, [Validators.required]],
                accountType: [accountType, [Validators.required]],
                balance: [balance],
                currency: [currency],
            }),
            checkNumber: [initValue.checkNumber],
            firstCheckNumber: [initValue.firstCheckNumber],
            lastCheckNumber: [initValue.lastCheckNumber],
            stopRangeType: [initValue.stopRangeType, [Validators.required]],
            amountGroup: [amountGroup],
            payeeName: [initValue.payeeName],
            dateIssued: [initValue.dateIssued],
            expirationDate: [initValue.expirationDate, [pastDateValidator]],
            stopReason: [initValue.stopReason],
            otherReason: [initValue.otherReason],
        });
    }
    ngOnInit() {
        this.stateService.store
            .pipe(pluck('requestInfo'), take(1))
            .subscribe((requestInfo) => {
            if (requestInfo) {
                this.requestStopCheckFrom = this.buildForm(requestInfo);
            }
        });
    }
    onContinue() {
        if (this.requestStopCheckFrom && this.requestStopCheckFrom.valid) {
            this.stateService.sendStopRequestToReview(this.requestStopCheckFrom.value);
        }
    }
    onCancelForm() {
        this.stateService.initStopCheckRequest();
    }
}
/** @nocollapse */ FormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormContainerComponent, deps: [{ token: i1.StateService }, { token: i2.ApiHttpService }, { token: i3.StopChecksPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ FormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FormContainerComponent, selector: "bb-form-container", ngImport: i0, template: `
    <bb-stop-check-form
      [currencies]="currenciesList | async"
      [relativeFormGroup]="requestStopCheckFrom"
      [payFromAccounts$]="accounts$"
      [checksRangeNumber]="checksRangeNumber | async"
      (formSubmit)="onContinue()"
      (cancelForm)="onCancelForm()"
    ></bb-stop-check-form>
  `, isInline: true, components: [{ type: i4.StopCheckFormComponent, selector: "bb-stop-check-form", inputs: ["showValidation", "relativeFormGroup", "payFromAccounts$", "currencies", "checksRangeNumber"], outputs: ["formSubmit", "cancelForm"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-form-container',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <bb-stop-check-form
      [currencies]="currenciesList | async"
      [relativeFormGroup]="requestStopCheckFrom"
      [payFromAccounts$]="accounts$"
      [checksRangeNumber]="checksRangeNumber | async"
      (formSubmit)="onContinue()"
      (cancelForm)="onCancelForm()"
    ></bb-stop-check-form>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.StateService }, { type: i2.ApiHttpService }, { type: i3.StopChecksPreferencesService }]; } });
//# sourceMappingURL=form-container.component.js.map