import { ChangeDetectionStrategy, Component, TemplateRef, ViewChild, } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { pluck, take, takeUntil } from 'rxjs/operators';
import { StopChecksPreferencesService } from '../../services/stop-checks-preferences.service';
import { ApiHttpService } from '../../services/data.service';
import { StateService } from '../../store/state.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
import * as i1 from "../../store/state.service";
import * as i2 from "../../services/data.service";
import * as i3 from "../../services/stop-checks-preferences.service";
import * as i4 from "@backbase/ui-ang/notification";
import * as i5 from "../../components/stop-check-review/stop-check-review.component";
import * as i6 from "@angular/common";
export class ReviewContainerComponent {
    constructor(stateService, apiHttpService, stopChecksPreferencesService, notificationService) {
        this.stateService = stateService;
        this.apiHttpService = apiHttpService;
        this.stopChecksPreferencesService = stopChecksPreferencesService;
        this.notificationService = notificationService;
        this.gc$ = new Subject();
        this.isStopRequestSubmitted$ = new BehaviorSubject(false);
        this.requestInfo$ = this.stateService.store.pipe(pluck('requestInfo'));
        this.hasErrorOnSubmit$ = new BehaviorSubject(false);
        this.stopChecksPreferencesService.notificationDismissTime$
            .pipe(takeUntil(this.gc$))
            .subscribe((value) => (this.notificationDismissTimeout = value));
    }
    showNotification(success, notification) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.notificationDismissTimeout * 1000, modifier: success ? 'success' : 'error' }, notification));
    }
    responseHandler(response, requestInfo) {
        var _a;
        if (((_a = response.stopCheck) === null || _a === void 0 ? void 0 : _a.status) && requestInfo) {
            this.showNotification(true, {
                header: this.successNotificationHeader,
                message: this.successNotificationMessage,
            });
            this.markStopRequestAsSubmitted(requestInfo);
        }
        else {
            this.hasErrorOnSubmit$.next(true);
            this.showNotification(false, {
                header: this.failureNotificationHeader,
                message: this.failureNotificationMessage,
            });
        }
    }
    discardStopRequest() {
        this.stateService.initStopCheckRequest();
    }
    submitStopRequest(requestInfo) {
        this.apiHttpService
            .postStopCheckRequest(requestInfo)
            .pipe(take(1))
            .subscribe((res) => this.responseHandler(res, requestInfo), (err) => this.responseHandler(err));
    }
    markStopRequestAsSubmitted(requestInfo) {
        this.isStopRequestSubmitted$.next(true);
        this.stateService.markStopRequestAsSubmitted(requestInfo);
    }
    editStopRequest(requestInfo) {
        this.stateService.sendStopRequestToEdit(requestInfo);
    }
    ngOnDestroy() {
        this.gc$.next();
    }
}
/** @nocollapse */ ReviewContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewContainerComponent, deps: [{ token: i1.StateService }, { token: i2.ApiHttpService }, { token: i3.StopChecksPreferencesService }, { token: i4.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ReviewContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ReviewContainerComponent, selector: "bb-review-container", viewQueries: [{ propertyName: "successNotificationHeader", first: true, predicate: ["successNotificationHeader"], descendants: true }, { propertyName: "successNotificationMessage", first: true, predicate: ["successNotificationMessage"], descendants: true }, { propertyName: "failureNotificationHeader", first: true, predicate: ["failureNotificationHeader"], descendants: true }, { propertyName: "failureNotificationMessage", first: true, predicate: ["failureNotificationMessage"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"requestInfo$ | async as requestInfo\">\n  <bb-stop-check-review\n    [request]=\"requestInfo\"\n    [failedToSubmit]=\"hasErrorOnSubmit$ | async\"\n    (triggerStopRequestEdit)=\"editStopRequest(requestInfo)\"\n    (triggerStopRequestReset)=\"discardStopRequest()\"\n    (triggerStopRequestSubmit)=\"submitStopRequest(requestInfo)\"\n    [stopRequestIsSubmitted]=\"isStopRequestSubmitted$ | async\"\n  ></bb-stop-check-review>\n</ng-container>\n\n<ng-template #successNotificationHeader>\n  <span i18n=\"@@initiate-stop-check.success-notification-header\">\n    Stop check request submitted\n  </span>\n</ng-template>\n\n<ng-template #successNotificationMessage>\n  <span i18n=\"@@initiate-stop-check.success-notification-message\">\n    We will soon update the status of your request\n  </span>\n</ng-template>\n\n<ng-template #failureNotificationHeader>\n  <span i18n=\"@@initiate-stop-check.failure-notification-header\">\n    Failed to submit stop check request\n  </span>\n</ng-template>\n\n<ng-template #failureNotificationMessage>\n  <span i18n=\"@@initiate-stop-check.failure-notification-message\">\n    Please try again later\n  </span>\n</ng-template>\n", components: [{ type: i5.StopCheckReviewComponent, selector: "bb-stop-check-review", inputs: ["requestIsSubmitted", "request", "stopRequestIsSubmitted", "failedToSubmit"], outputs: ["triggerStopRequestReset", "triggerStopRequestSubmit", "triggerStopRequestEdit"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ReviewContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-review-container',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './review-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.StateService }, { type: i2.ApiHttpService }, { type: i3.StopChecksPreferencesService }, { type: i4.NotificationService }]; }, propDecorators: { successNotificationHeader: [{
                type: ViewChild,
                args: ['successNotificationHeader']
            }], successNotificationMessage: [{
                type: ViewChild,
                args: ['successNotificationMessage']
            }], failureNotificationHeader: [{
                type: ViewChild,
                args: ['failureNotificationHeader']
            }], failureNotificationMessage: [{
                type: ViewChild,
                args: ['failureNotificationMessage']
            }] } });
//# sourceMappingURL=review-container.component.js.map