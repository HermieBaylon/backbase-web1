import { map } from 'rxjs/operators';
import { StopCheckRequestType } from './models/data';
export const accMap = () => (source) => source.pipe(map(([arrangements, schemeName]) => arrangements.items.map((arrangement) => {
    let accountNumber = arrangement.id;
    if (schemeName !== 'ID') {
        accountNumber = arrangement[schemeName];
    }
    return {
        id: arrangement.id,
        name: arrangement.name,
        balance: arrangement.bookedBalance,
        bookedBalance: arrangement.bookedBalance,
        availableBalance: arrangement.availableBalance,
        currency: arrangement.currency,
        accountNumber: accountNumber || '',
        number: accountNumber || '',
        accountType: schemeName,
        externalTransferAllowed: arrangement.externalTransferAllowed,
        urgentTransferAllowed: arrangement.urgentTransferAllowed,
    };
})));
export function arrangementItemFromService(record) {
    return {
        id: record.id,
        name: record.name || '',
        balance: record.availableBalance || record.bookedBalance || 0,
        bookedBalance: record.bookedBalance || 0,
        availableBalance: record.availableBalance,
        currency: record.currency || '',
        IBAN: record.IBAN || record.number,
        BBAN: record.BBAN,
        externalTransferAllowed: record.externalTransferAllowed,
        urgentTransferAllowed: record.urgentTransferAllowed,
        additions: record.additions,
    };
}
export function arrangementListFromService(response, isLoadMore = false) {
    return {
        count: response.length,
        items: response.map(arrangementItemFromService),
        isLoadMore,
    };
}
export function requestInfoToPostRequestBody(requestInfo) {
    const { payFromAccount, stopReason, otherReason, stopRangeType, checkNumber, firstCheckNumber, lastCheckNumber, dateIssued, payeeName, amountGroup, } = requestInfo;
    const reason = (otherReason && otherReason.trim()) || stopReason;
    const singleCheckRequest = stopRangeType === StopCheckRequestType.SINGLE;
    const { name, accountNumber, accountType } = payFromAccount;
    return Object.assign(Object.assign({ originatorAccount: {
            name,
            identification: accountNumber,
            schemeName: accountType,
        } }, (singleCheckRequest
        ? {
            check: Object.assign(Object.assign(Object.assign({ number: checkNumber }, (amountGroup && {
                amount: {
                    amount: amountGroup.amount,
                    currencyCode: amountGroup.currency,
                },
            })), (payeeName && { payeeName })), (dateIssued && { dateIssued })),
        }
        : {
            checkNumberRange: {
                firstNumber: firstCheckNumber,
                lastNumber: lastCheckNumber,
            },
        })), (reason && { reason }));
}
//# sourceMappingURL=mappers.js.map