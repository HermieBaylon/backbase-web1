import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output, } from '@angular/core';
import { FormGroup, Validators, } from '@angular/forms';
import { BbTemplate, DeprecationsService } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import { StopCheckRequestType } from '../../models/data';
import { getCheckRangeError, getLastCheckLessThanFirstError, } from '../../validators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@backbase/ui-ang/fieldset";
import * as i3 from "@backbase/ui-ang/account-selector";
import * as i4 from "@backbase/ui-ang/input-validation-message";
import * as i5 from "@backbase/ui-ang/input-radio-group";
import * as i6 from "@backbase/ui-ang/input-text";
import * as i7 from "@backbase/ui-ang/currency-input";
import * as i8 from "@backbase/ui-ang/input-datepicker";
import * as i9 from "@backbase/ui-ang/dropdown-single-select";
import * as i10 from "@backbase/ui-ang/textarea";
import * as i11 from "@angular/forms";
import * as i12 from "@angular/common";
import * as i13 from "@backbase/ui-ang/button";
export class StopCheckFormComponent {
    constructor(deprecationService) {
        this.deprecationService = deprecationService;
        this._showValidation = false;
        this.id = StopCheckFormComponent._id++;
        this.hostRef = this;
        this.accountFormat = {
            length: 0,
            maskRange: [0, 0],
            segments: 0,
        };
        /**
         * Event will be triggered on form submit
         */
        this.formSubmit = new EventEmitter();
        /**
         * Custom range number to identify maximum consecutive check number range.
         * Default value `0`
         */
        this.checksRangeNumber = 0;
        /**
         * Event will be triggered on payment cancel action
         */
        this.cancelForm = new EventEmitter();
    }
    get payFromControl() {
        return this.relativeFormGroup.get('payFromAccount');
    }
    /**
     * @deprecated since version 3.9.3
     * Validation errors in form appear on blur.
     */
    set showValidation(val) {
        this.deprecationService.logDeprecatedFeature(`StopChecksFormComponent: showValidation input is deprecated since version 3.9.3,
      validation errors in form appear on blur`);
        this._showValidation = val;
    }
    get showValidation() {
        return this._showValidation;
    }
    crossFormValidation(rangeNumber) {
        return ((group) => {
            const { controls, value } = group;
            const checkNum = controls.checkNumber;
            const firstCheckNum = controls.firstCheckNumber;
            const lastCheckNum = controls.lastCheckNumber;
            const checkNumValidators = [
                Validators.required,
                Validators.pattern(/^\d+$/),
            ];
            if (value['stopRangeType'] === StopCheckRequestType.SINGLE) {
                firstCheckNum.clearValidators();
                firstCheckNum.setErrors(null);
                lastCheckNum.clearValidators();
                lastCheckNum.setErrors(null);
                checkNum.setValidators(checkNumValidators);
            }
            else {
                checkNum.clearValidators();
                checkNum.setErrors(null);
                firstCheckNum.setValidators(checkNumValidators);
                lastCheckNum.setValidators(checkNumValidators);
                lastCheckNum.setErrors(getLastCheckLessThanFirstError(firstCheckNum, lastCheckNum));
                lastCheckNum.setErrors(getCheckRangeError(firstCheckNum, lastCheckNum, rangeNumber));
            }
        });
    }
    ngOnInit() {
        var _a, _b, _c;
        // populate value to show it in edit mode
        if (this.relativeFormGroup && ((_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.value['id'])) {
            const formValue = (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.value;
            // account selector component expect account number attribute name as 'number' which is not available in edit flow
            this.selectPayFromAccount(Object.assign(Object.assign({}, formValue), { number: formValue.accountNumber }));
        }
        (_c = this.relativeFormGroup) === null || _c === void 0 ? void 0 : _c.setValidators(this.crossFormValidation(this.checksRangeNumber));
        this.relativeFormGroup.updateValueAndValidity();
    }
    onCancelForm() {
        this.cancelForm.emit();
    }
    onBlurAccount() {
        var _a, _b, _c;
        if (this.selectedAccount) {
            return;
        }
        (_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.setErrors({ required: true });
        (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.markAsTouched();
        (_c = this.payFromControl) === null || _c === void 0 ? void 0 : _c.markAsDirty();
    }
    selectPayFromAccount(account) {
        var _a, _b;
        if (this.payFromControl && account.id) {
            this.payFromControl.setValue({
                id: account.id,
                name: account.name,
                accountType: account.accountType,
                accountNumber: account.accountNumber,
                currency: account.currency,
                balance: account.balance,
            });
            this.selectedAccount = account;
            (_a = this.payFromControl) === null || _a === void 0 ? void 0 : _a.markAsTouched();
            (_b = this.payFromControl) === null || _b === void 0 ? void 0 : _b.markAsDirty();
        }
    }
    onSubmit() {
        const { controls } = this.relativeFormGroup;
        for (const control in controls) {
            if (controls.hasOwnProperty(control)) {
                controls[control].markAsTouched();
                controls[control].markAsDirty();
            }
        }
        this.formSubmit.emit();
    }
    getIdByControl(controlName) {
        return `${controlName}StopChecksError${this.id}`;
    }
    getDescribedby(controlName) {
        var _a;
        const control = (_a = this.relativeFormGroup) === null || _a === void 0 ? void 0 : _a.get(controlName);
        return (control === null || control === void 0 ? void 0 : control.invalid) && (control === null || control === void 0 ? void 0 : control.touched)
            ? this.getIdByControl(controlName)
            : null;
    }
    getDescribedbyBySubmit() {
        return (Object.keys(this.relativeFormGroup.controls)
            .reduce((acc, controlName) => {
            const errorId = this.getDescribedby(controlName);
            acc += errorId ? `${errorId} ` : '';
            return acc;
        }, '')
            .trim() || null);
    }
}
StopCheckFormComponent._id = 0;
/** @nocollapse */ StopCheckFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponent, deps: [{ token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopCheckFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckFormComponent, selector: "bb-stop-check-form", inputs: { showValidation: "showValidation", relativeFormGroup: "relativeFormGroup", payFromAccounts$: "payFromAccounts$", currencies: "currencies", checksRangeNumber: "checksRangeNumber" }, outputs: { formSubmit: "formSubmit", cancelForm: "cancelForm" }, ngImport: i0, template: "<ng-container\n  bbStopCheckFormComponentCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n<ng-template bbStopCheckFormComponentCustomizable let-hostRef>\n  <form\n    autocomplete=\"off\"\n    [formGroup]=\"hostRef.relativeFormGroup\"\n    (ngSubmit)=\"hostRef.onSubmit()\"\n  >\n    <bb-fieldset-ui\n      id=\"stop-checks-form-heading-{{ id }}\"\n      heading=\"Check details\"\n      i18n-heading=\"@@initiate-stop-check.check-details-fieldset-heading\"\n    >\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <label class=\"bb-form-field\">\n            <bb-account-selector-ui\n              [markFirst]=\"true\"\n              [highlight]=\"false\"\n              [filterItems]=\"true\"\n              [closeOnSelect]=\"true\"\n              dropdownPosition=\"bottom\"\n              placeholder=\"Select check account\"\n              data-role=\"pay-from-account-selector\"\n              [selectedItems]=\"hostRef.selectedAccount\"\n              [items]=\"hostRef.payFromAccounts$ | async\"\n              [productNumberFormat]=\"hostRef.accountFormat\"\n              (blur)=\"hostRef.onBlurAccount()\"\n              (change)=\"hostRef.selectPayFromAccount($event)\"\n              i18n-placeholder=\"@@initiate-stop-check.empty.state.placeholder\"\n              [aria-describedby]=\"hostRef.getDescribedby('payFromAccount')\"\n            ></bb-account-selector-ui>\n          </label>\n\n          <bb-input-validation-message-ui\n            [messageId]=\"hostRef.getIdByControl('payFromAccount')\"\n            *ngIf=\"hostRef.payFromControl as payFromControlRef\"\n            [showErrors]=\"\n              payFromControlRef.invalid && payFromControlRef.touched\n            \"\n          >\n            <span\n              *ngIf=\"\n                hostRef.payFromControl.errors?.required ||\n                !hostRef.selectedAccount\n              \"\n              data-role=\"missing-pay-from-account\"\n              i18n=\"@@initiate-stop-check.error.required.pay-from-account\"\n            >\n              Check account is required\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <bb-input-radio-group-ui\n            horizontal=\"true\"\n            data-role=\"radio-group\"\n            formControlName=\"stopRangeType\"\n            labelClasses=\"form-check-label\"\n            aria-labelledby=\"stop-checks-form-heading-{{ id }}\"\n          >\n            <bb-input-radio-ui\n              value=\"single\"\n              label=\"Single\"\n              i18n-label=\"@@initiate-stop-check.range-type.single.label\"\n            ></bb-input-radio-ui>\n            <bb-input-radio-ui\n              value=\"multiple\"\n              label=\"Multiple\"\n              i18n-label=\"@@initiate-stop-check.radio.range-type.multiple.label\"\n            ></bb-input-radio-ui>\n          </bb-input-radio-group-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div\n          class=\"form-group col-md-12\"\n          *ngIf=\"\n            hostRef.relativeFormGroup.get('stopRangeType')?.value === 'single'\n          \"\n        >\n          <bb-input-text-ui\n            [maxLength]=\"15\"\n            [aria-invalid]=\"\n              hostRef.relativeFormGroup?.get('checkNumber').invalid\n            \"\n            [required]=\"true\"\n            formControlName=\"checkNumber\"\n            label=\"Check number\"\n            i18n-label=\"@@initiate-stop-check.check-number-label\"\n            data-role=\"check-number\"\n            [aria-describedby]=\"hostRef.getDescribedby('checkNumber')\"\n          ></bb-input-text-ui>\n\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              hostRef.relativeFormGroup?.get(\n                'checkNumber'\n              ) as checkNumberControl\n            \"\n            [messageId]=\"hostRef.getIdByControl('checkNumber')\"\n            [showErrors]=\"\n              checkNumberControl.invalid && checkNumberControl.touched\n            \"\n          >\n            <span\n              *ngIf=\"checkNumberControl.errors?.required\"\n              data-role=\"validation-error-single-check-number-required\"\n              i18n=\"\n                @@initiate-stop-check.check-number.validation-error.required\"\n            >\n              Check number is required\n            </span>\n            <span\n              *ngIf=\"checkNumberControl.errors?.pattern\"\n              data-role=\"validation-error-check-number-digits-only\"\n              i18n=\"@@initiate-stop-check.check-number.validation-error.pattern\"\n            >\n              Check number should be digits only\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n\n      <ng-container\n        *ngIf=\"\n          hostRef.relativeFormGroup.get('stopRangeType')?.value === 'multiple'\n        \"\n      >\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <bb-input-text-ui\n              [maxLength]=\"15\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('firstCheckNumber').invalid &&\n                hostRef.relativeFormGroup?.get('firstCheckNumber').touched\n              \"\n              [required]=\"true\"\n              [aria-describedby]=\"hostRef.getDescribedby('firstCheckNumber')\"\n              formControlName=\"firstCheckNumber\"\n              label=\"First check number\"\n              i18n-label=\"@@initiate-stop-check.first-check-number.label\"\n              data-role=\"from-check-number\"\n            ></bb-input-text-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'firstCheckNumber'\n                ) as firstCheckNumberControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('firstCheckNumber')\"\n              [showErrors]=\"\n                firstCheckNumberControl.invalid &&\n                firstCheckNumberControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"firstCheckNumberControl.errors?.required\"\n                data-role=\"validation-error-first-check-number-required\"\n                i18n=\"\n                  @@initiate-stop-check.first-check-number.validation-error.required\"\n              >\n                First check number is required\n              </span>\n              <span\n                *ngIf=\"firstCheckNumberControl.errors?.pattern\"\n                data-role=\"validation-error-first-check-number-digits-only\"\n                i18n=\"\n                  @@initiate-stop-check.first-check-number.validation-error.pattern\"\n              >\n                Check number should be digits only\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <bb-input-text-ui\n              [maxLength]=\"15\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('lastCheckNumber').invalid &&\n                hostRef.relativeFormGroup?.get('lastCheckNumber').touched\n              \"\n              [required]=\"true\"\n              [aria-describedby]=\"hostRef.getDescribedby('lastCheckNumber')\"\n              formControlName=\"lastCheckNumber\"\n              label=\"Last check number\"\n              i18n-label=\"@@initiate-stop-check.last-check-number.label\"\n              data-role=\"to-check-number\"\n            ></bb-input-text-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'lastCheckNumber'\n                ) as lastCheckNumberControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('lastCheckNumber')\"\n              [showErrors]=\"\n                lastCheckNumberControl.invalid && lastCheckNumberControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.required\"\n                data-role=\"validation-error-last-check-number-required\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.required\"\n              >\n                Last check number is required\n              </span>\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.pattern\"\n                data-role=\"validation-error-last-check-number-digits-only\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.pattern\"\n              >\n                Check number should be digits only\n              </span>\n              <span\n                *ngIf=\"\n                  lastCheckNumberControl.errors?.biggerThenFirstCheckNumber\n                \"\n                data-role=\"validation-error-last-check-number-higher-than-previous\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.bigger\"\n              >\n                This needs to be higher then previous check number\n              </span>\n              <span\n                *ngIf=\"lastCheckNumberControl.errors?.checkRangeError\"\n                data-role=\"validation-error-last-check-number-out-of-range\"\n                i18n=\"\n                  @@initiate-stop-check.last-check-number.validation-error.range\"\n              >\n                This request cannot exceed\n                {{ hostRef.checksRangeNumber }} consecutive checks\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <ng-container\n        *ngIf=\"\n          hostRef.relativeFormGroup.get('stopRangeType')?.value === 'single'\n        \"\n      >\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              #stopCheckAmountCurrencyLabel\n              id=\"stop-check-amount-currency-label{{ id }}\"\n              i18n=\"@@initiate-stop-check.check-amount\"\n            >\n              Check amount\n            </label>\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-currency-input-ui\n              [currencies]=\"hostRef.currencies\"\n              [integerLabelSrOnly]=\"true\"\n              [decimalLabelSrOnly]=\"true\"\n              [aria-labelledby]=\"stopCheckAmountCurrencyLabel.id\"\n              resultType=\"string\"\n              maxlength=\"18\"\n              formControlName=\"amountGroup\"\n            ></bb-currency-input-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              #stopCheckDateIssuedLabel\n              id=\"stop-check-date-issued-label{{ id }}\"\n              i18n=\"@@initiate-stop-check.date-issued\"\n            >\n              Date issued\n            </label>\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-input-datepicker-ui\n              #dateIssued\n              name=\"dateIssued\"\n              overrideDateFormat=\"MM/dd/y\"\n              formControlName=\"dateIssued\"\n              [aria-labelledby]=\"stopCheckDateIssuedLabel.id\"\n              [aria-describedby]=\"hostRef.getDescribedby('dateIssued')\"\n              [aria-invalid]=\"\n                hostRef.relativeFormGroup?.get('dateIssued').invalid &&\n                hostRef.relativeFormGroup?.get('dateIssued').touched\n              \"\n              [placeholder]=\"'MM/DD/YYYY'\"\n              data-role=\"date-issued\"\n            ></bb-input-datepicker-ui>\n\n            <bb-input-validation-message-ui\n              *ngIf=\"\n                hostRef.relativeFormGroup?.get(\n                  'dateIssued'\n                ) as dateIssuedControl\n              \"\n              [messageId]=\"hostRef.getIdByControl('dateIssued')\"\n              [showErrors]=\"\n                dateIssuedControl.invalid && dateIssuedControl.touched\n              \"\n            >\n              <span\n                *ngIf=\"dateIssuedControl.errors?.required\"\n                data-role=\"validation-error-date-issued-invalid-date-format\"\n                i18n=\"\n                  @@initiate-stop-check.date-issued.validation-error.invalid-date-format\"\n              >\n                Invalid date format\n              </span>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n\n        <div class=\"form-row\">\n          <div class=\"form-group col-md-12\">\n            <label\n              [attr.for]=\"payeeName.id\"\n              i18n=\"@@initiate-stop-check.payee-name\"\n              >Payee name</label\n            >\n            <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n            <bb-input-text-ui\n              #payeeName\n              [maxLength]=\"140\"\n              formControlName=\"payeeName\"\n              data-role=\"payee-name\"\n            ></bb-input-text-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <div class=\"form-row\">\n        <div class=\"form-group col-md-12\">\n          <label\n            [for]=\"stopReason.id\"\n            i18n=\"@@initiate-stop-check.select-reason\"\n            >Stop reason</label\n          >\n          <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n          <bb-dropdown-single-select-ui\n            #stopReason\n            data-role=\"stop-reason\"\n            formControlName=\"stopReason\"\n          >\n            <bb-dropdown-single-select-option-ui\n              value=\"\"\n              label=\"- Select a reason -\"\n              i18n-label=\"@@initiate-stop-check.reason.select\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Insufficient_funds\"\n              label=\"Insufficient funds\"\n              i18n-label=\"@@initiate-stop-check.reason-Insufficient_funds\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Incorrect_amount_or_other_details\"\n              label=\"Incorrect amount or other details\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Incorrect_amount_or_other_details\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Lost_or_stolen_checks_or_check_books\"\n              label=\"Lost or stolen checks or check books\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Lost_or_stolen_checks_or_check\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Checks_mailed_to_wrong_address\"\n              label=\"Checks mailed to wrong address\"\n              i18n-label=\"\n                @@initiate-stop-check.reason-Checks_mailed_to_wrong_address\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Dispute_over_purchases\"\n              label=\"Dispute over purchases\"\n              i18n-label=\"@@initiate-stop-check.reason-Dispute_over_purchases\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Lost_in_mail\"\n              label=\"Lost in mail\"\n              i18n-label=\"@@initiate-stop-check.reason-Lost_in_Mail\"\n            ></bb-dropdown-single-select-option-ui>\n\n            <bb-dropdown-single-select-option-ui\n              value=\"Other\"\n              label=\"Other\"\n              i18n-label=\"@@initiate-stop-check.reason-Other\"\n            ></bb-dropdown-single-select-option-ui>\n          </bb-dropdown-single-select-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div\n          class=\"form-group col-md-12\"\n          *ngIf=\"\n            hostRef.relativeFormGroup?.get('stopReason')?.value === 'Other'\n          \"\n        >\n          <bb-textarea-ui\n            wrap=\"hard\"\n            [rows]=\"2\"\n            [cols]=\"50\"\n            [minLength]=\"3\"\n            [maxLength]=\"140\"\n            label=\"Please specify:\"\n            [showCharCounter]=\"true\"\n            formControlName=\"otherReason\"\n            data-role=\"other-reason-text\"\n            aria-label=\"Please specify other reason\"\n            i18n-aria-label=\"@@initiate-stop-check.reason-other.aria-label\"\n            i18n-label=\"@@initiate-stop-check.reason-other.label\"\n          ></bb-textarea-ui>\n        </div>\n      </div>\n\n      <div class=\"form-row\">\n        <div class=\"col-md-12\">\n          <label\n            #stopChecksExpirationDateLabel\n            id=\"stop-checks-expiration-date-label-{{ id }}\"\n            i18n=\"@@initiate-stop-check.expiration-date\"\n          >\n            Stop expiration date\n          </label>\n          <ng-container [ngTemplateOutlet]=\"optionalField\"></ng-container>\n\n          <bb-input-datepicker-ui\n            overrideDateFormat=\"MM/dd/y\"\n            formControlName=\"expirationDate\"\n            [aria-labelledby]=\"stopChecksExpirationDateLabel.id\"\n            [aria-describedby]=\"hostRef.getDescribedby('expirationDate')\"\n            [aria-invalid]=\"\n              hostRef.relativeFormGroup?.get('expirationDate').invalid &&\n              hostRef.relativeFormGroup?.get('expirationDate').touched\n            \"\n            [placeholder]=\"'MM/DD/YYYY'\"\n            data-role=\"expiration-date\"\n          ></bb-input-datepicker-ui>\n\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              hostRef.relativeFormGroup?.get(\n                'expirationDate'\n              ) as expirationDateControl\n            \"\n            [messageId]=\"hostRef.getIdByControl('expirationDate')\"\n            [showErrors]=\"\n              expirationDateControl.invalid && expirationDateControl.touched\n            \"\n          >\n            <span\n              *ngIf=\"expirationDateControl.errors?.pastDate\"\n              i18n=\"\n                Stop expiration date past date error text |Error past date\n                message for Stop expiration date input\n                field@@initiate-stop-check.error.pastDate.expirationDate\"\n              data-role=\"validation-error-past-date-expiration-date\"\n            >\n              Stop expiration date cannot be in the past\n            </span>\n            <span\n              *ngIf=\"expirationDateControl.errors?.invalidDateFormat\"\n              data-role=\"validation-error-expiration-date-invalid-date-format\"\n              i18n=\"\n                @@initiate-stop-check.expiration-date.validation-error.invalid-date-format\"\n            >\n              Invalid date format\n            </span>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </bb-fieldset-ui>\n\n    <div class=\"bb-stop-checks-control-buttons bb-button-bar\">\n      <button\n        bbButton\n        type=\"submit\"\n        buttonSize=\"md\"\n        [attr.aria-describedby]=\"hostRef.getDescribedbyBySubmit()\"\n        class=\"bb-button-bar__button\"\n        data-role=\"continue-btn\"\n        i18n=\"@@initiate-stop-check.form-action.continue\"\n      >\n        Continue\n      </button>\n\n      <button\n        bbButton\n        type=\"button\"\n        color=\"link\"\n        buttonSize=\"md\"\n        class=\"bb-button-bar__button bb-stop-checks-control-buttons__cancel\"\n        data-role=\"cancel-btn\"\n        i18n=\"@@initiate-stop-check.form-action.cancel\"\n        (click)=\"hostRef.onCancelForm()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n\n  <ng-template #optionalField>\n    <span class=\"bb-text-support\">\n      (<ng-container i18n=\"@@initiate-stop-check.optional-field-label\"\n        >Optional</ng-container\n      >)\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.FieldsetComponent; }), selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i0.forwardRef(function () { return i3.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0.forwardRef(function () { return i4.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i5.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0.forwardRef(function () { return i5.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i0.forwardRef(function () { return i6.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i7.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0.forwardRef(function () { return i8.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i9.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i9.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0.forwardRef(function () { return i10.TextareaComponent; }), selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }], directives: [{ type: i0.forwardRef(function () { return StopCheckFormComponentCustomizableDirective; }), selector: "[bbStopCheckFormComponentCustomizable]" }, { type: i0.forwardRef(function () { return i11.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i11.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i11.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i12.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i11.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i11.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i11.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i12.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i11.MaxLengthValidator; }), selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i0.forwardRef(function () { return i13.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i12.AsyncPipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-check-form',
                    templateUrl: './stop-check-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DeprecationsService }]; }, propDecorators: { showValidation: [{
                type: Input
            }], relativeFormGroup: [{
                type: Input
            }], payFromAccounts$: [{
                type: Input
            }], formSubmit: [{
                type: Output
            }], currencies: [{
                type: Input
            }], checksRangeNumber: [{
                type: Input
            }], cancelForm: [{
                type: Output
            }] } });
export class StopCheckFormComponentCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopCheckFormComponentCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponentCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopCheckFormComponentCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopCheckFormComponentCustomizableDirective, selector: "[bbStopCheckFormComponentCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopCheckFormComponentCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopCheckFormComponentCustomizable]',
                }]
        }] });
//# sourceMappingURL=stop-check-form.component.js.map