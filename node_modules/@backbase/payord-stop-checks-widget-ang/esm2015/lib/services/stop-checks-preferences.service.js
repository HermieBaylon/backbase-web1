import { Inject, Injectable, Optional } from '@angular/core';
import { ItemModel } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { accessControlConfigDefaults, BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN, } from '../config.providers';
import { currencyFallback } from '../models/data';
import { toInteger, } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const defaultStopChecksCreatePreferences = Object.assign({ currencies: [currencyFallback], notificationDismissTime: 3, checksRangeNumber: 0, schemeName: 'BBAN' }, accessControlConfigDefaults);
export class StopChecksPreferencesService {
    constructor(itemModel, accessControlToken) {
        this.itemModel = itemModel;
        this.accessControlToken = accessControlToken;
        this.accessControlConfig = Object.assign(Object.assign({}, defaultStopChecksCreatePreferences), (this.accessControlToken || {}));
        this.resourceNameSubject$ = new BehaviorSubject(undefined);
        this.businessFunctionSubject$ = new BehaviorSubject(undefined);
        this.privilegeSubject$ = new BehaviorSubject(undefined);
        this.notificationDismissTimeSubject$ = new BehaviorSubject(undefined);
        this.currenciesSubject$ = new BehaviorSubject(undefined);
        this.checksRangeNumberSubject$ = new BehaviorSubject(undefined);
        this.schemeNameSubject$ = new BehaviorSubject(undefined);
        this.schemeNameItemModel = this.getItemModelProperty('schemeName', this.accessControlConfig.schemeName);
        this.resourceNameItemModel = this.getItemModelProperty('resourceName', this.accessControlConfig.resourceName);
        this.businessFunctionItemModel = this.getItemModelProperty('businessFunction', this.accessControlConfig.businessFunction);
        this.privilegeItemModel = this.getItemModelProperty('privilege', this.accessControlConfig.privilege);
        this.notificationDismissTimeItemModel = this.getItemModelProperty('notificationDismissTime', defaultStopChecksCreatePreferences.notificationDismissTime).pipe(map(toInteger));
        this.currenciesItemModel = this.getItemModelProperty('currencies', defaultStopChecksCreatePreferences.currencies[0]).pipe(map((currencies) => currencies.split(',').map((currency) => currency.trim())));
        this.checksRangeNumberItemModel = this.getItemModelProperty('checksRangeNumber', defaultStopChecksCreatePreferences.checksRangeNumber).pipe(map(toInteger));
        this.schemeName$ = this.getProperty(this.schemeNameSubject$, this.schemeNameItemModel);
        this.resourceName$ = this.getProperty(this.resourceNameSubject$, this.resourceNameItemModel);
        this.businessFunction$ = this.getProperty(this.businessFunctionSubject$, this.businessFunctionItemModel);
        this.privilege$ = this.getProperty(this.privilegeSubject$, this.privilegeItemModel);
        this.notificationDismissTime$ = this.getProperty(this.notificationDismissTimeSubject$, this.notificationDismissTimeItemModel);
        this.currencies$ = this.getProperty(this.currenciesSubject$, this.currenciesItemModel);
        this.checksRangeNumber$ = this.getProperty(this.checksRangeNumberSubject$, this.checksRangeNumberItemModel, true);
    }
    getProperty(input$, itemModel, t) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    getItemModelProperty(name, defaultVal) {
        var _a;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(name, defaultVal)) || of(defaultVal);
    }
    setResourceName(value) {
        this.resourceNameSubject$.next(value);
    }
    setBusinessFunction(value) {
        this.businessFunctionSubject$.next(value);
    }
    setPrivilege(value) {
        this.privilegeSubject$.next(value);
    }
    setNotificationDismissTime(value) {
        this.notificationDismissTimeSubject$.next(value);
    }
    setCurrencies(value) {
        this.currenciesSubject$.next(value);
    }
    setChecksRangeNumber(value) {
        this.checksRangeNumberSubject$.next(value);
    }
}
/** @nocollapse */ StopChecksPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksPreferencesService, deps: [{ token: i1.ItemModel, optional: true }, { token: BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StopChecksPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksPreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksPreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_STOP_CHECK_ACCESS_CONTROL_CONFIG_TOKEN]
                }] }]; } });
//# sourceMappingURL=stop-checks-preferences.service.js.map