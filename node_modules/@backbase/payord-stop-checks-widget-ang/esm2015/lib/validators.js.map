{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../libs/payord-stop-checks-widget-ang/src/lib/validators.ts"],"names":[],"mappings":"AAEA,SAAS,gBAAgB,CACvB,WAAoC,EACpC,IAAY;IAEZ,IAAI,WAAW,EAAE;QACf,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,WAAW,CAAC;SACpB;KACF;SAAM;QACL,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED,MAAM,UAAU,8BAA8B,CAC5C,aAA8B,EAC9B,YAA6B;IAE7B,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;IACvC,IACE,aAAa,CAAC,KAAK;QACnB,YAAY,CAAC,KAAK;QAClB,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,EACpE;QACA,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,EAAE;YAC9C,0BAA0B,EAAE,IAAI;SACjC,CAAC,CAAC;KACJ;SAAM,IACL,aAAa,CAAC,KAAK;QACnB,YAAY,CAAC,KAAK;QAClB,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,EACrE;QACA,OAAO,gBAAgB,CAAC,UAAU,EAAE,4BAA4B,CAAC,CAAC;KACnE;SAAM;QACL,OAAO,UAAU,CAAC;KACnB;AACH,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,aAA8B,EAC9B,YAA6B,EAC7B,KAAa;IAEb,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC;IAEvC,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,OAAO,UAAU,CAAC;KACnB;IAED,IACE,aAAa,CAAC,KAAK;QACnB,YAAY,CAAC,KAAK;QAClB,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC;YAClE,KAAK,EACP;QACA,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;KAC5E;SAAM,IACL,aAAa,CAAC,KAAK;QACnB,YAAY,CAAC,KAAK;QAClB,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,EAC5E;QACA,OAAO,gBAAgB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;KACxD;SAAM;QACL,OAAO,UAAU,CAAC;KACnB;AACH,CAAC","sourcesContent":["import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nfunction clearErrorObject(\n  errorObject: ValidationErrors | null,\n  prop: string\n): ValidationErrors | null {\n  if (errorObject) {\n    delete errorObject[prop];\n    if (!Object.keys(errorObject).length) {\n      return null;\n    } else {\n      return errorObject;\n    }\n  } else {\n    return null;\n  }\n}\n\nexport function getLastCheckLessThanFirstError(\n  firstCheckNum: AbstractControl,\n  lastCheckNum: AbstractControl\n): ValidationErrors | null {\n  const restErrors = lastCheckNum.errors;\n  if (\n    firstCheckNum.value &&\n    lastCheckNum.value &&\n    parseInt(firstCheckNum.value, 10) > parseInt(lastCheckNum.value, 10)\n  ) {\n    return Object.assign(lastCheckNum.errors || {}, {\n      biggerThenFirstCheckNumber: true,\n    });\n  } else if (\n    firstCheckNum.value &&\n    lastCheckNum.value &&\n    parseInt(lastCheckNum.value, 10) >= parseInt(firstCheckNum.value, 10)\n  ) {\n    return clearErrorObject(restErrors, 'biggerThenFirstCheckNumber');\n  } else {\n    return restErrors;\n  }\n}\n\nexport function getCheckRangeError(\n  firstCheckNum: AbstractControl,\n  lastCheckNum: AbstractControl,\n  range: number\n): ValidationErrors | null {\n  const restErrors = lastCheckNum.errors;\n\n  if (range === 0) {\n    return restErrors;\n  }\n\n  if (\n    firstCheckNum.value &&\n    lastCheckNum.value &&\n    parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) >=\n      range\n  ) {\n    return Object.assign(lastCheckNum.errors || {}, { checkRangeError: true });\n  } else if (\n    firstCheckNum.value &&\n    lastCheckNum.value &&\n    parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) < range\n  ) {\n    return clearErrorObject(restErrors, 'checkRangeError');\n  } else {\n    return restErrors;\n  }\n}\n"]}