{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../../../../libs/payord-stop-checks-widget-ang/src/lib/mappers.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProductSummaryItem } from '@backbase/data-ang/arrangements';\nimport {\n  SchemeName,\n  StopCheckPostRequest,\n} from '@backbase/data-ang/stop-checks';\nimport {\n  ArrangementItem,\n  ArrangementList,\n  OutputItem,\n} from '@backbase/payment-orders-ang';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { StopCheckRequestType } from './models/data';\nimport { StopCheckRequestInfo } from './models/types';\n\nexport const accMap =\n  () =>\n  (\n    source: Observable<[ArrangementList, SchemeName]>\n  ): Observable<Array<OutputItem>> =>\n    source.pipe(\n      map(([arrangements, schemeName]) =>\n        arrangements.items.map((arrangement) => {\n          let accountNumber: string | undefined = arrangement.id;\n\n          if (schemeName !== 'ID') {\n            accountNumber = arrangement[schemeName];\n          }\n          return {\n            id: arrangement.id,\n            name: arrangement.name,\n            balance: arrangement.bookedBalance,\n            bookedBalance: arrangement.bookedBalance,\n            availableBalance: arrangement.availableBalance,\n            currency: arrangement.currency,\n            accountNumber: accountNumber || '',\n            number: accountNumber || '',\n            accountType: schemeName,\n            externalTransferAllowed: arrangement.externalTransferAllowed,\n            urgentTransferAllowed: arrangement.urgentTransferAllowed,\n          };\n        })\n      )\n    );\n\nexport function arrangementItemFromService(\n  record: ProductSummaryItem\n): ArrangementItem {\n  return {\n    id: record.id,\n    name: record.name || '',\n    balance: record.availableBalance || record.bookedBalance || 0,\n    bookedBalance: record.bookedBalance || 0,\n    availableBalance: record.availableBalance,\n    currency: record.currency || '',\n    IBAN: record.IBAN || record.number,\n    BBAN: record.BBAN,\n    externalTransferAllowed: record.externalTransferAllowed,\n    urgentTransferAllowed: record.urgentTransferAllowed,\n    additions: record.additions,\n  };\n}\n\nexport function arrangementListFromService(\n  response: Array<ProductSummaryItem>,\n  isLoadMore = false\n): ArrangementList {\n  return {\n    count: response.length,\n    items: response.map(arrangementItemFromService),\n    isLoadMore,\n  };\n}\n\nexport function requestInfoToPostRequestBody(\n  requestInfo: StopCheckRequestInfo\n): StopCheckPostRequest {\n  const {\n    payFromAccount,\n    stopReason,\n    otherReason,\n    stopRangeType,\n    checkNumber,\n    firstCheckNumber,\n    lastCheckNumber,\n    dateIssued,\n    payeeName,\n    amountGroup,\n  } = requestInfo;\n\n  const reason = (otherReason && otherReason.trim()) || stopReason;\n  const singleCheckRequest = stopRangeType === StopCheckRequestType.SINGLE;\n  const { name, accountNumber, accountType } = payFromAccount;\n\n  return {\n    originatorAccount: {\n      name,\n      identification: accountNumber,\n      schemeName: accountType,\n    },\n    ...(singleCheckRequest\n      ? {\n          check: {\n            number: checkNumber,\n            ...(amountGroup && {\n              amount: {\n                amount: amountGroup.amount,\n                currencyCode: amountGroup.currency,\n              },\n            }),\n            ...(payeeName && { payeeName }),\n            ...(dateIssued && { dateIssued }),\n          },\n        }\n      : {\n          checkNumberRange: {\n            firstNumber: firstCheckNumber,\n            lastNumber: lastCheckNumber,\n          },\n        }),\n    ...(reason && { reason }),\n  };\n}\n"]}