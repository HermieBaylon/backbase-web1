{"version":3,"file":"state.service.js","sourceRoot":"","sources":["../../../../../../libs/payord-stop-checks-widget-ang/src/lib/store/state.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAGhD,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAC;AACnE,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;;;AAG5D,MAAM,OAAO,YAAY;IAIvB,YAA6B,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAHjD,UAAK,GAAG,IAAI,eAAe,CAAe,KAAK,CAAC,CAAC;QAC1D,oBAAe,GAAG,IAAI,OAAO,EAAiB,CAAC;QAGpD,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,IAAmB,EAAE,EAAE;;YACrD,QAAQ,IAAI,CAAC,IAAI,EAAE;gBACjB,KAAK,WAAW,CAAC,YAAY;oBAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACvB,MAAM;gBAER,KAAK,WAAW,CAAC,OAAO;oBACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;wBACd,WAAW,EAAE,KAAK,CAAC,WAAW;wBAC9B,MAAM,EAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM;qBAC7B,CAAC,CAAC;oBACH,MAAM;gBAER,KAAK,WAAW,CAAC,cAAc,CAAC;gBAChC,KAAK,WAAW,CAAC,YAAY,CAAC;gBAC9B,KAAK,WAAW,CAAC,yBAAyB;oBACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;wBACd,WAAW,EAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,WAAW;wBACtC,MAAM,EAAE,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM;qBAC7B,CAAC,CAAC;oBACH,MAAM;gBAER;oBACE,MAAM;aACT;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,IAAI,EAAE,WAAW,CAAC,OAAO;YACzB,OAAO,EAAE;gBACP,MAAM,EAAE,aAAa,CAAC,OAAO;aAC9B;SACF,CAAC,CAAC;IACL,CAAC;IAED,uBAAuB,CAAC,IAAiC;QACvD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,IAAI,EAAE,WAAW,CAAC,cAAc;YAChC,OAAO,EAAE;gBACP,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,aAAa,CAAC,MAAM;aAC7B;SACF,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;IAClC,CAAC;IAED,0BAA0B,CAAC,IAAiC;QAC1D,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,IAAI,EAAE,WAAW,CAAC,yBAAyB;YAC3C,OAAO,EAAE;gBACP,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,aAAa,CAAC,oBAAoB;aAC3C;SACF,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB,CAAC,IAAiC;QACrD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,IAAI,EAAE,WAAW,CAAC,YAAY;YAC9B,OAAO,EAAE;gBACP,WAAW,EAAE,IAAI;gBACjB,MAAM,EAAE,aAAa,CAAC,SAAS;aAChC;SACF,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;;6HAxEU,YAAY;iIAAZ,YAAY;4FAAZ,YAAY;kBADxB,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\n\nimport { ActionPayload, InitialState } from '../models/types';\nimport { NavigationService } from '../services/navigation.service';\nimport { ActionTypes, RequestStatus, state } from './store';\n\n@Injectable()\nexport class StateService {\n  public readonly store = new BehaviorSubject<InitialState>(state);\n  public eventDispatcher = new Subject<ActionPayload>();\n\n  constructor(private readonly navigationService: NavigationService) {\n    this.eventDispatcher.subscribe((data: ActionPayload) => {\n      switch (data.type) {\n        case ActionTypes.INIT_REQUEST:\n          this.store.next(state);\n          break;\n\n        case ActionTypes.DISCARD:\n          this.store.next({\n            requestInfo: state.requestInfo,\n            status: data.payload?.status,\n          });\n          break;\n\n        case ActionTypes.REVIEW_REQUEST:\n        case ActionTypes.EDIT_REQUEST:\n        case ActionTypes.MARK_REQUEST_AS_SUBMITTED:\n          this.store.next({\n            requestInfo: data.payload?.requestInfo,\n            status: data.payload?.status,\n          });\n          break;\n\n        default:\n          break;\n      }\n    });\n  }\n\n  initStopCheckRequest() {\n    this.eventDispatcher.next({\n      type: ActionTypes.DISCARD,\n      payload: {\n        status: RequestStatus.DISCARD,\n      },\n    });\n  }\n\n  sendStopRequestToReview(data: InitialState['requestInfo']) {\n    this.eventDispatcher.next({\n      type: ActionTypes.REVIEW_REQUEST,\n      payload: {\n        requestInfo: data,\n        status: RequestStatus.REVIEW,\n      },\n    });\n    this.navigationService.review();\n  }\n\n  markStopRequestAsSubmitted(data: InitialState['requestInfo']) {\n    this.eventDispatcher.next({\n      type: ActionTypes.MARK_REQUEST_AS_SUBMITTED,\n      payload: {\n        requestInfo: data,\n        status: RequestStatus.REQUEST_IS_SUBMITTED,\n      },\n    });\n  }\n\n  sendStopRequestToEdit(data: InitialState['requestInfo']) {\n    this.eventDispatcher.next({\n      type: ActionTypes.EDIT_REQUEST,\n      payload: {\n        requestInfo: data,\n        status: RequestStatus.EDIT_MODE,\n      },\n    });\n    this.navigationService.form();\n  }\n}\n"]}