function clearErrorObject(errorObject, prop) {
    if (errorObject) {
        delete errorObject[prop];
        if (!Object.keys(errorObject).length) {
            return null;
        }
        else {
            return errorObject;
        }
    }
    else {
        return null;
    }
}
export function getLastCheckLessThanFirstError(firstCheckNum, lastCheckNum) {
    const restErrors = lastCheckNum.errors;
    if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(firstCheckNum.value, 10) > parseInt(lastCheckNum.value, 10)) {
        return Object.assign(lastCheckNum.errors || {}, {
            biggerThenFirstCheckNumber: true,
        });
    }
    else if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(lastCheckNum.value, 10) >= parseInt(firstCheckNum.value, 10)) {
        return clearErrorObject(restErrors, 'biggerThenFirstCheckNumber');
    }
    else {
        return restErrors;
    }
}
export function getCheckRangeError(firstCheckNum, lastCheckNum, range) {
    const restErrors = lastCheckNum.errors;
    if (range === 0) {
        return restErrors;
    }
    if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) >=
            range) {
        return Object.assign(lastCheckNum.errors || {}, { checkRangeError: true });
    }
    else if (firstCheckNum.value &&
        lastCheckNum.value &&
        parseInt(lastCheckNum.value, 10) - parseInt(firstCheckNum.value, 10) < range) {
        return clearErrorObject(restErrors, 'checkRangeError');
    }
    else {
        return restErrors;
    }
}
//# sourceMappingURL=validators.js.map