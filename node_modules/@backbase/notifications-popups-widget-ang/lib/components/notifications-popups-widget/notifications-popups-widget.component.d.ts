import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { NotificationRouting } from '@backbase/notifications-common-ang';
import { NotificationsPopupsRouterService } from '../../services/notifications-popups-router.service';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
export declare class NotificationsPopupsWidgetComponent implements OnInit, OnDestroy {
    private readonly routerService;
    private readonly properties;
    /**
     * Comma-separated list of notifications origins to process (empty for all).
     */
    set originsValue(value: string);
    /**
     * Comma-separated list of notifications severity levels to process (empty for all).
     */
    set severityLevelsValue(value: string);
    /**
     * Polling interval (in seconds).
     */
    set pollingIntervalValue(value: string | number);
    /**
     * String of allowed routes for navigation (conversation-view, arrangement-view, transaction-view, party-view, etc.).
     */
    set allowedRoutesValue(value: string);
    /**
     * Auto-focus.
     */
    set autofocusValue(value: string | boolean);
    /**
     * Display See More button.
     */
    set displayShowMoreButtonInPopupValue(value: string | boolean);
    /**
     * Number of displayed lines in notification message emitter.
     */
    set popupMessageLineAmountValue(value: string | number);
    /**
     * Navigation Data emitter.
     */
    notificationRouting: EventEmitter<NotificationRouting>;
    private readonly destroy$;
    constructor(routerService: NotificationsPopupsRouterService, properties: WidgetPropertiesService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsPopupsWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NotificationsPopupsWidgetComponent, "bb-notifications-popups-widget", never, { "originsValue": "origins"; "severityLevelsValue": "severityLevels"; "pollingIntervalValue": "pollingInterval"; "allowedRoutesValue": "allowedRoutes"; "autofocusValue": "autofocus"; "displayShowMoreButtonInPopupValue": "displayShowMoreButtonInPopup"; "popupMessageLineAmountValue": "popupMessageLineAmount"; }, { "notificationRouting": "notificationRouting"; }, never, never>;
}
