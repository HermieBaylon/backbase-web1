import { AfterViewInit, OnDestroy, TemplateRef } from '@angular/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { CheckTruncation, NotificationStreamItem } from '@backbase/notifications-common-ang';
import { NotificationsPopupsDataService } from '../../services/notifications-popups-data.service';
import { NotificationsPopupsRouterService } from '../../services/notifications-popups-router.service';
import { Observable } from 'rxjs';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
/** @dynamic */
export declare class NotificationsPopupsItemComponent implements AfterViewInit, OnDestroy, CheckTruncation {
    private readonly notificationService;
    private readonly dataService;
    private readonly routerService;
    private readonly properties;
    /**
     * Notification popup item
     */
    notification: NotificationStreamItem;
    /**
     * Notification close delay timeout
     */
    notificationTimeout: number;
    /**
     * Notification header template
     */
    popupHeaderTemplate?: TemplateRef<any>;
    /**
     * Notification message template
     */
    popupMessageTemplate?: TemplateRef<any>;
    private hideNotification;
    /**
     * Routes available for navigation.
     */
    readonly allowedRoutes$: Observable<string[]>;
    /**
     * Stream of widget property with a flag that defines if notification popup should be auto-focused.
     */
    readonly autofocus$: Observable<boolean>;
    /**
     * Stream of widget property with a flag that defines if we should display Show More button.
     */
    readonly displayShowMoreButtonInPopup$: Observable<boolean>;
    /**
     * Stream of widget property with the number of lines to show as a notification message.
     */
    readonly popupMessageLineAmount$: Observable<number>;
    /**
     * The boolean flag that shows if the notification message text exceeds the number of visible lines and is truncated.
     */
    isMessageTruncated: boolean;
    /**
     * destroy$ should emit only when component is destroyed to
     * signal subscriptions to unsubscribe.
     */
    private readonly destroy$;
    constructor(notificationService: NotificationService, dataService: NotificationsPopupsDataService, routerService: NotificationsPopupsRouterService, properties: WidgetPropertiesService);
    ngAfterViewInit(): void;
    /**
     * Open notification details in external widget
     *
     * @param event Click event
     */
    openNotificationDetails(event: Event): void;
    /**
     * Set truncation status of notification message
     *
     * @param isMessageTruncated Is message truncated flag
     */
    setIsContentTruncated(isMessageTruncated: boolean): void;
    private createNotificationPopup;
    private readNotification;
    private hasRouting;
    private navigateFromPopup;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsPopupsItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NotificationsPopupsItemComponent, "bb-notifications-popups-item", never, { "notification": "notification"; "notificationTimeout": "notificationTimeout"; }, {}, never, never>;
}
export declare class NotificationsPopupsItemHeaderCustomizableDirective extends BbTemplate<NotificationsPopupsItemComponent, NotificationStreamItem | undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsPopupsItemHeaderCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NotificationsPopupsItemHeaderCustomizableDirective, "[bbNotificationsPopupsItemHeaderCustomizable]", never, {}, {}, never>;
}
export declare class NotificationsPopupsItemMessageCustomizableDirective extends BbTemplate<NotificationsPopupsItemComponent, NotificationStreamItem | undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsPopupsItemMessageCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NotificationsPopupsItemMessageCustomizableDirective, "[bbNotificationsPopupsItemMessageCustomizable]", never, {}, {}, never>;
}
