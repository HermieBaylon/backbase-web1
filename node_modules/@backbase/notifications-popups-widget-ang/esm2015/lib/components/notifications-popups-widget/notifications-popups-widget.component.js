/* eslint-disable @angular-eslint/no-input-rename */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { NotificationsPopupsDataService } from '../../services/notifications-popups-data.service';
import { NotificationsPopupsRouterService } from '../../services/notifications-popups-router.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/notifications-popups-router.service";
import * as i2 from "../../services/widget-properties.service";
import * as i3 from "../notifications-sticky-list/notifications-sticky-list.component";
import * as i4 from "../notifications-popups-list/notifications-popups-list.component";
export class NotificationsPopupsWidgetComponent {
    constructor(routerService, properties) {
        this.routerService = routerService;
        this.properties = properties;
        /**
         * Navigation Data emitter.
         */
        this.notificationRouting = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * Comma-separated list of notifications origins to process (empty for all).
     */
    set originsValue(value) {
        if (value !== undefined) {
            this.properties.setOrigins(value);
        }
    }
    /**
     * Comma-separated list of notifications severity levels to process (empty for all).
     */
    set severityLevelsValue(value) {
        if (value !== undefined) {
            this.properties.setSeverityLevels(value);
        }
    }
    /**
     * Polling interval (in seconds).
     */
    set pollingIntervalValue(value) {
        if (value !== undefined) {
            this.properties.setPollingInterval(value);
        }
    }
    /**
     * String of allowed routes for navigation (conversation-view, arrangement-view, transaction-view, party-view, etc.).
     */
    set allowedRoutesValue(value) {
        if (value !== undefined) {
            this.properties.setAllowedRoutes(value);
        }
    }
    /**
     * Auto-focus.
     */
    set autofocusValue(value) {
        if (value !== undefined) {
            this.properties.setAutofocus(value);
        }
    }
    /**
     * Display See More button.
     */
    set displayShowMoreButtonInPopupValue(value) {
        if (value !== undefined) {
            this.properties.setDisplayShowMoreButtonInPopup(value);
        }
    }
    /**
     * Number of displayed lines in notification message emitter.
     */
    set popupMessageLineAmountValue(value) {
        if (value !== undefined) {
            this.properties.setPopupMessageLineAmount(value);
        }
    }
    ngOnInit() {
        this.routerService.popupsRouting$.pipe(takeUntil(this.destroy$)).subscribe(this.notificationRouting);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
/** @nocollapse */ NotificationsPopupsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsWidgetComponent, deps: [{ token: i1.NotificationsPopupsRouterService }, { token: i2.WidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ NotificationsPopupsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsPopupsWidgetComponent, selector: "bb-notifications-popups-widget", inputs: { originsValue: ["origins", "originsValue"], severityLevelsValue: ["severityLevels", "severityLevelsValue"], pollingIntervalValue: ["pollingInterval", "pollingIntervalValue"], allowedRoutesValue: ["allowedRoutes", "allowedRoutesValue"], autofocusValue: ["autofocus", "autofocusValue"], displayShowMoreButtonInPopupValue: ["displayShowMoreButtonInPopup", "displayShowMoreButtonInPopupValue"], popupMessageLineAmountValue: ["popupMessageLineAmount", "popupMessageLineAmountValue"] }, outputs: { notificationRouting: "notificationRouting" }, providers: [NotificationsPopupsDataService, NotificationsPopupsRouterService, WidgetPropertiesService], ngImport: i0, template: `
    <bb-notifications-sticky-list></bb-notifications-sticky-list>
    <bb-notifications-popups-list></bb-notifications-popups-list>
  `, isInline: true, components: [{ type: i3.NotificationsStickyListComponent, selector: "bb-notifications-sticky-list" }, { type: i4.NotificationsPopupsListComponent, selector: "bb-notifications-popups-list" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-notifications-popups-widget',
                    template: `
    <bb-notifications-sticky-list></bb-notifications-sticky-list>
    <bb-notifications-popups-list></bb-notifications-popups-list>
  `,
                    providers: [NotificationsPopupsDataService, NotificationsPopupsRouterService, WidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationsPopupsRouterService }, { type: i2.WidgetPropertiesService }]; }, propDecorators: { originsValue: [{
                type: Input,
                args: ['origins']
            }], severityLevelsValue: [{
                type: Input,
                args: ['severityLevels']
            }], pollingIntervalValue: [{
                type: Input,
                args: ['pollingInterval']
            }], allowedRoutesValue: [{
                type: Input,
                args: ['allowedRoutes']
            }], autofocusValue: [{
                type: Input,
                args: ['autofocus']
            }], displayShowMoreButtonInPopupValue: [{
                type: Input,
                args: ['displayShowMoreButtonInPopup']
            }], popupMessageLineAmountValue: [{
                type: Input,
                args: ['popupMessageLineAmount']
            }], notificationRouting: [{
                type: Output
            }] } });
//# sourceMappingURL=notifications-popups-widget.component.js.map