import { Component, Directive, Input, TemplateRef, ViewChild } from '@angular/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { parseNotificationSeverityLevel, secondsToMilliseconds } from '../../helpers/mappers';
import { NotificationsPopupsDataService } from '../../services/notifications-popups-data.service';
import { NotificationsPopupsRouterService } from '../../services/notifications-popups-router.service';
import { map, takeUntil } from 'rxjs/operators';
import { combineLatest, Subject } from 'rxjs';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/notification";
import * as i2 from "../../services/notifications-popups-data.service";
import * as i3 from "../../services/notifications-popups-router.service";
import * as i4 from "../../services/widget-properties.service";
import * as i5 from "@backbase/notifications-common-ang";
import * as i6 from "@backbase/ui-ang/ellipsis";
import * as i7 from "@angular/common";
/** @dynamic */
export class NotificationsPopupsItemComponent {
    constructor(notificationService, dataService, routerService, properties) {
        this.notificationService = notificationService;
        this.dataService = dataService;
        this.routerService = routerService;
        this.properties = properties;
        /**
         * Notification close delay timeout
         */
        this.notificationTimeout = 0;
        /**
         * Routes available for navigation.
         */
        this.allowedRoutes$ = this.properties.allowedRoutes$;
        /**
         * Stream of widget property with a flag that defines if notification popup should be auto-focused.
         */
        this.autofocus$ = this.properties.autofocus$;
        /**
         * Stream of widget property with a flag that defines if we should display Show More button.
         */
        this.displayShowMoreButtonInPopup$ = this.properties.displayShowMoreButtonInPopup$;
        /**
         * Stream of widget property with the number of lines to show as a notification message.
         */
        this.popupMessageLineAmount$ = this.properties.popupMessageLineAmount$;
        /**
         * The boolean flag that shows if the notification message text exceeds the number of visible lines and is truncated.
         */
        this.isMessageTruncated = false;
        /**
         * destroy$ should emit only when component is destroyed to
         * signal subscriptions to unsubscribe.
         */
        this.destroy$ = new Subject();
    }
    ngAfterViewInit() {
        if (this.notification) {
            combineLatest([this.allowedRoutes$, this.displayShowMoreButtonInPopup$, this.autofocus$])
                .pipe(map(([routes, isShowMoreButtonEnabled, autofocus]) => [
                this.hasRouting(routes),
                isShowMoreButtonEnabled,
                autofocus,
            ]), takeUntil(this.destroy$))
                .subscribe((preferences) => {
                this.createNotificationPopup(preferences);
            });
        }
    }
    /**
     * Open notification details in external widget
     *
     * @param event Click event
     */
    openNotificationDetails(event) {
        event.stopPropagation();
        const routing = {
            ['where-to']: 'notification-details',
            data: this.notification,
        };
        this.readNotification(this.notification);
        this.routerService.emitPopupsRouting(routing);
        this.hideNotification();
    }
    /**
     * Set truncation status of notification message
     *
     * @param isMessageTruncated Is message truncated flag
     */
    setIsContentTruncated(isMessageTruncated) {
        this.isMessageTruncated = isMessageTruncated;
    }
    createNotificationPopup([hasRouting, isShowMoreButtonEnabled, autofocus]) {
        this.hideNotification = this.notificationService.showNotification(Object.assign(Object.assign(Object.assign({ modifier: parseNotificationSeverityLevel(this.notification.level), header: this.popupHeaderTemplate, message: this.popupMessageTemplate, ttl: secondsToMilliseconds(this.notificationTimeout), closeAction: this.readNotification.bind(this, this.notification) }, (hasRouting && {
            hostAction: this.navigateFromPopup.bind(this),
        })), (!hasRouting &&
            isShowMoreButtonEnabled && {
            hostAction: this.openNotificationDetails.bind(this),
        })), { autofocus }));
    }
    readNotification(notification) {
        this.dataService.markNotificationAsRead(notification);
    }
    hasRouting(routes) {
        const route = this.notification.routing && this.notification.routing['where-to'];
        return Boolean(this.notification.routing) && routes.some(allowedRoute => route === allowedRoute);
    }
    navigateFromPopup() {
        this.readNotification(this.notification);
        if (this.notification.routing) {
            this.routerService.emitPopupsRouting(this.notification.routing);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
/** @nocollapse */ NotificationsPopupsItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsItemComponent, deps: [{ token: i1.NotificationService }, { token: i2.NotificationsPopupsDataService }, { token: i3.NotificationsPopupsRouterService }, { token: i4.WidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ NotificationsPopupsItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsPopupsItemComponent, selector: "bb-notifications-popups-item", inputs: { notification: "notification", notificationTimeout: "notificationTimeout" }, viewQueries: [{ propertyName: "popupHeaderTemplate", first: true, predicate: ["popupHeader"], descendants: true }, { propertyName: "popupMessageTemplate", first: true, predicate: ["popupMessage"], descendants: true }], ngImport: i0, template: "<ng-template #popupHeader>\n  <ng-container\n    bbNotificationsPopupsItemHeaderCustomizable\n    [bbHostRef]=\"this\"\n    [bbTemplateContext]=\"notification\"\n  ></ng-container>\n</ng-template>\n\n<ng-template #popupMessage>\n  <ng-container bbNotificationsPopupsItemMessageCustomizable [bbHostRef]=\"this\" [bbTemplateContext]=\"notification\">\n  </ng-container>\n</ng-template>\n\n<ng-template bbNotificationsPopupsItemHeaderCustomizable let-hostRef let-notification=\"context\">\n  <span class=\"sr-only\"> {{ notification?.level || '' }}, </span>\n  <span [innerHTML]=\"notification | notificationLocalization: 'title'\"></span>\n</ng-template>\n\n<ng-template bbNotificationsPopupsItemMessageCustomizable let-hostRef let-notification=\"context\">\n  <ng-container\n    *ngTemplateOutlet=\"(hostRef.popupMessageLineAmount$ | async) ? truncatedMessageContent : messageContent\"\n  ></ng-container>\n  <bb-notifications-capability-icon [origin]=\"notification?.origin\"></bb-notifications-capability-icon>\n  <button\n    type=\"button\"\n    *ngIf=\"hostRef.isMessageTruncated && (hostRef.displayShowMoreButtonInPopup$ | async)\"\n    class=\"btn-link-text bb-text-bold bb-notification__details-button\"\n    (click)=\"hostRef.openNotificationDetails($event)\"\n    aria-label=\"See more notification details\"\n    i18n=\"Notification pop-up See more button@notification.popup.see-more.button\"\n    i18n-aria-label=\"Aria-label for See more button@@notification.popup.see-more.button.aria-label\"\n  >\n    <span>See more</span>\n  </button>\n\n  <ng-template #messageContent>\n    <div class=\"bb-block\" bbIsElementContentTruncated [hostRef]=\"hostRef\">\n      <div\n        [innerHTML]=\"\n          notification\n            | notificationLocalization: 'message'\n            | interpolateLink: notification:true:'bb-notification__message-link'\n        \"\n      ></div>\n    </div>\n  </ng-template>\n\n  <ng-template #truncatedMessageContent>\n    <bb-ellipsis-ui [tooltipTriggers]=\"''\" [lineClamp]=\"hostRef.popupMessageLineAmount$ | async\">\n      <ng-container *ngTemplateOutlet=\"messageContent\"></ng-container>\n    </bb-ellipsis-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.NotificationsCapabilityIconComponent; }), selector: "bb-notifications-capability-icon", inputs: ["origin"] }, { type: i0.forwardRef(function () { return i6.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i0.forwardRef(function () { return NotificationsPopupsItemHeaderCustomizableDirective; }), selector: "[bbNotificationsPopupsItemHeaderCustomizable]" }, { type: i0.forwardRef(function () { return NotificationsPopupsItemMessageCustomizableDirective; }), selector: "[bbNotificationsPopupsItemMessageCustomizable]" }, { type: i0.forwardRef(function () { return i7.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5.ӨIsElementContentTruncatedDirective; }), selector: "[bbIsElementContentTruncated]", inputs: ["hostRef"] }], pipes: { "notificationLocalization": i0.forwardRef(function () { return i5.ӨNotificationLocalizationPipe; }), "async": i0.forwardRef(function () { return i7.AsyncPipe; }), "interpolateLink": i0.forwardRef(function () { return i5.ӨInterpolateLinkPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-notifications-popups-item',
                    templateUrl: './notifications-popups-item.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: i2.NotificationsPopupsDataService }, { type: i3.NotificationsPopupsRouterService }, { type: i4.WidgetPropertiesService }]; }, propDecorators: { notification: [{
                type: Input
            }], notificationTimeout: [{
                type: Input
            }], popupHeaderTemplate: [{
                type: ViewChild,
                args: ['popupHeader']
            }], popupMessageTemplate: [{
                type: ViewChild,
                args: ['popupMessage']
            }] } });
export class NotificationsPopupsItemHeaderCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ NotificationsPopupsItemHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsItemHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NotificationsPopupsItemHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsPopupsItemHeaderCustomizableDirective, selector: "[bbNotificationsPopupsItemHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsItemHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbNotificationsPopupsItemHeaderCustomizable]',
                }]
        }] });
export class NotificationsPopupsItemMessageCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ NotificationsPopupsItemMessageCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsItemMessageCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NotificationsPopupsItemMessageCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NotificationsPopupsItemMessageCustomizableDirective, selector: "[bbNotificationsPopupsItemMessageCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationsPopupsItemMessageCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbNotificationsPopupsItemMessageCustomizable]',
                }]
        }] });
//# sourceMappingURL=notifications-popups-item.component.js.map