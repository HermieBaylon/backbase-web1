{"version":3,"file":"notifications-sticky-list.component.js","sourceRoot":"","sources":["../../../../../../../libs/notifications-popups-widget-ang/src/lib/components/notifications-sticky-list/notifications-sticky-list.component.ts","../../../../../../../libs/notifications-popups-widget-ang/src/lib/components/notifications-sticky-list/notifications-sticky-list.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAEjE,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAC3D,OAAO,EAAE,8BAA8B,EAAE,MAAM,kDAAkD,CAAC;AAClG,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;;;;AAO5C,MAAM,OAAO,gCAAgC;IAW3C,YAA6B,WAA2C,EAAmB,IAAgB;QAA9E,gBAAW,GAAX,WAAW,CAAgC;QAAmB,SAAI,GAAJ,IAAI,CAAY;QAL3G;;WAEG;QACM,mBAAc,GAAyC,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC;IAEE,CAAC;IAE/G;;;;OAIG;IACH,kBAAkB,CAAC,YAA6C;QAC9D,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;QAEtD,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,mCAAmC,CAAC,CAAC;QACpG,MAAM,yBAAyB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CACxD,GAAG,CAAC,CAAC,oBAA8C,EAAE,EAAE,CACrD,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CACpC,OAAO,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAC1F,CACF,CACF,CAAC;QAEF,yBAAyB,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACxD,IAAI,aAAa,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;gBAC5B,aAAa,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;aACpE;iBAAM,IAAI,aAAa,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE;gBACnC,aAAa,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;aACpE;iBAAM,IAAI,IAAI,CAAC,sBAAsB,EAAE;gBACtC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,MAAc,EAAE,YAA8B;QACtD,OAAO,YAAY,CAAC,EAAE,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,KAAqC;QAC3C,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAChC,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC,aAAa,CAAC;SACnD;IACH,CAAC;;iJA7DU,gCAAgC;qIAAhC,gCAAgC,oECX7C,qjBAgBA,+PD8Da,4CAA4C;4FAnE5C,gCAAgC;kBAJ5C,SAAS;mBAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,4CAA4C;iBAC1D;;AAoED,MAAM,OAAO,4CAA6C,SAAQ,UAKjE;;6JALY,4CAA4C;iJAA5C,4CAA4C;4FAA5C,4CAA4C;kBAHxD,SAAS;mBAAC;oBACT,QAAQ,EAAE,yCAAyC;iBACpD","sourcesContent":["import { Component, Directive, ElementRef } from '@angular/core';\nimport { NotificationItem, NotificationStreamItem } from '@backbase/notifications-common-ang';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { NotificationsPopupsDataService } from '../../services/notifications-popups-data.service';\nimport { first, map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'bb-notifications-sticky-list',\n  templateUrl: './notifications-sticky-list.component.html',\n})\nexport class NotificationsStickyListComponent {\n  /**\n   * Element that focused before notification is open, for back focus when notification is closed\n   */\n  private previousFocusedElement?: HTMLElement;\n\n  /**\n   * Notification sticky stream data\n   */\n  readonly notifications$: Observable<NotificationStreamItem[]> = this.dataService.stickyNotificationsStream$;\n\n  constructor(private readonly dataService: NotificationsPopupsDataService, private readonly elem: ElementRef) {}\n\n  /**\n   * Method to call mark notification as read request by id\n   *\n   * @param notification Notification data\n   */\n  onReadNotification(notification: NotificationStreamItem | string): void {\n    this.dataService.markNotificationAsRead(notification);\n\n    const notifications = this.elem.nativeElement.querySelectorAll('bb-notifications-sticky-list-item');\n    const deletedNotificationIndex$ = this.notifications$.pipe(\n      map((notificationElements: NotificationStreamItem[]) =>\n        notificationElements.findIndex(item =>\n          typeof notification === 'string' ? notification === item.id : notification.id === item.id,\n        ),\n      ),\n    );\n\n    deletedNotificationIndex$.pipe(first()).subscribe(index => {\n      if (notifications[index + 1]) {\n        notifications[index + 1].getElementsByTagName('button')[0].focus();\n      } else if (notifications[index - 1]) {\n        notifications[index - 1].getElementsByTagName('button')[0].focus();\n      } else if (this.previousFocusedElement) {\n        this.previousFocusedElement.focus();\n      }\n    });\n  }\n\n  /**\n   * Method to differentiate notifications by IDs.\n   *\n   * @param _index List item index\n   * @param notification Notification list item\n   * @returns Notification id\n   */\n  trackById(_index: number, notification: NotificationItem): string {\n    return notification.id;\n  }\n\n  /**\n   * Method to change focus.\n   *\n   * @param event Focus event\n   */\n  onFocus(event: { relatedTarget: HTMLElement }) {\n    if (!this.previousFocusedElement) {\n      this.previousFocusedElement = event.relatedTarget;\n    }\n  }\n}\n\n@Directive({\n  selector: '[bbNotificationsStickyListCustomizable]',\n})\nexport class NotificationsStickyListCustomizableDirective extends BbTemplate<\n  NotificationsStickyListComponent,\n  {\n    notifications: NotificationStreamItem[];\n  }\n> {}\n","<ng-container\n  bbNotificationsStickyListCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    notifications: notifications$ | async\n  }\"\n></ng-container>\n\n<ng-template bbNotificationsStickyListCustomizable let-host let-notifications=\"context.notifications\">\n  <bb-notifications-sticky-list-item\n    (focusin)=\"host.onFocus($event)\"\n    *ngFor=\"let item of notifications; trackBy: host.trackById\"\n    [notification]=\"item\"\n    (close)=\"host.onReadNotification($event)\"\n  ></bb-notifications-sticky-list-item>\n</ng-template>\n"]}