{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../../../../../libs/notifications-popups-widget-ang/src/lib/helpers/mappers.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AAErE,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;AAEzE,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAI,QAAyB,EAAE,EAAE;IAC/D,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IAED,OAAO,QAAQ,CAAC,IAAI,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,mBAA6C,EAA4B,EAAE,CACrH,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACvD,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,mBAA6C,EAA4B,EAAE,CACrH,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAEtD,4CAA4C;AAC5C,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,KAAoB,EAA4B,EAAE;IAC/F,OAAO,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAE,KAAK,CAAC,WAAW,EAA+B,CAAC;AACzF,CAAC,CAAC;AAEF,4CAA4C;AAC5C,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC,IAA8B,EAAiB,EAAE;IAC3F,OAAO,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAE,IAAI,CAAC,WAAW,EAAoB,CAAC;AAC5E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAAC,YAAmC,EAA0B,EAAE;IAC3G,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC7B,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;IAE/C,uBACE,EAAE,EAAE,GAAG,kBAAkB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,EAC3E,SAAS,EAAE,IAAI,EACf,KAAK,EAAE,YAAY,CAAC,KAAK,EACzB,OAAO,EAAE,YAAY,CAAC,OAAO,EAC7B,KAAK,EAAE,2BAA2B,CAAC,YAAY,CAAC,KAAK,CAAC,IACnD,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAC/C;AACJ,CAAC,CAAC","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { NotificationStreamItem } from '@backbase/notifications-common-ang';\nimport { SeverityLevel } from '@backbase/data-ang/notifications';\nimport { NotificationSeverityType } from '../models/notification-severity-type.model';\nimport { NotificationLocalItem } from '../models/notifications-local-item.model';\nimport { NOTIFICATION_LOCAL } from '../constants/notification-local';\n\nexport const secondsToMilliseconds = (seconds: number) => seconds * 1000;\n\nexport const fromHttpResponse = <T>(response: HttpResponse<T>) => {\n  if (response.body === null) {\n    throw new Error('Response body not set');\n  }\n\n  return response.body;\n};\n\nexport const notificationsStreamToSticky = (notificationsStream: NotificationStreamItem[]): NotificationStreamItem[] =>\n  notificationsStream.filter(item => !!item.expiresOn);\nexport const notificationsStreamToPopups = (notificationsStream: NotificationStreamItem[]): NotificationStreamItem[] =>\n  notificationsStream.filter(item => !item.expiresOn);\n\n// eslint-disable-next-line arrow-body-style\nexport const parseNotificationSeverityLevel = (level: SeverityLevel): NotificationSeverityType => {\n  return level === 'ALERT' ? 'error' : (level.toLowerCase() as NotificationSeverityType);\n};\n\n// eslint-disable-next-line arrow-body-style\nexport const severityTypeToSeverityLevel = (type: NotificationSeverityType): SeverityLevel => {\n  return type === 'error' ? 'ALERT' : (type.toUpperCase() as SeverityLevel);\n};\n\nexport const notificationLocalToStreamItem = (notification: NotificationLocalItem): NotificationStreamItem => {\n  const timestamp = Date.now();\n  const date = new Date(timestamp).toISOString();\n\n  return {\n    id: `${NOTIFICATION_LOCAL}_${timestamp + Math.floor(Math.random() * 1000)}`,\n    createdOn: date,\n    title: notification.title,\n    message: notification.message,\n    level: severityTypeToSeverityLevel(notification.level),\n    ...(notification.sticky && { expiresOn: date }),\n  };\n};\n"]}