import { NOTIFICATION_LOCAL } from '../constants/notification-local';
export const secondsToMilliseconds = (seconds) => seconds * 1000;
export const fromHttpResponse = (response) => {
    if (response.body === null) {
        throw new Error('Response body not set');
    }
    return response.body;
};
export const notificationsStreamToSticky = (notificationsStream) => notificationsStream.filter(item => !!item.expiresOn);
export const notificationsStreamToPopups = (notificationsStream) => notificationsStream.filter(item => !item.expiresOn);
// eslint-disable-next-line arrow-body-style
export const parseNotificationSeverityLevel = (level) => {
    return level === 'ALERT' ? 'error' : level.toLowerCase();
};
// eslint-disable-next-line arrow-body-style
export const severityTypeToSeverityLevel = (type) => {
    return type === 'error' ? 'ALERT' : type.toUpperCase();
};
export const notificationLocalToStreamItem = (notification) => {
    const timestamp = Date.now();
    const date = new Date(timestamp).toISOString();
    return Object.assign({ id: `${NOTIFICATION_LOCAL}_${timestamp + Math.floor(Math.random() * 1000)}`, createdOn: date, title: notification.title, message: notification.message, level: severityTypeToSeverityLevel(notification.level) }, (notification.sticky && { expiresOn: date }));
};
//# sourceMappingURL=mappers.js.map