import { Injectable, Optional } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { first, map } from 'rxjs/operators';
import { getPropertyValue, modelItemToBoolean, secondsToMilliseconds, BaseWidgetPropertiesService, shareReplayOnce, } from '@backbase/notifications-common-ang';
import { ItemModel } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const DefaultWidgetProperties = {
    allowedRoutes: [],
    autofocus: true,
    popupMessageLineAmount: 2,
    displayShowMoreButtonInPopup: false,
    origins: [],
    severityLevels: [],
    pollingInterval: 15,
};
export class WidgetPropertiesService extends BaseWidgetPropertiesService {
    constructor(itemModel) {
        super(itemModel);
        this.itemModel = itemModel;
        this.autofocus$$ = new BehaviorSubject(undefined);
        this.popupMessageLineAmount$$ = new BehaviorSubject(undefined);
        this.displayShowMoreButtonInPopup$$ = new BehaviorSubject(undefined);
        this.pollingInterval$$ = new BehaviorSubject(undefined);
        this.autofocus$ = getPropertyValue(this.autofocus$$, this.autofocus);
        this.popupMessageLineAmount$ = getPropertyValue(this.popupMessageLineAmount$$, this.popupMessageLineAmount);
        this.displayShowMoreButtonInPopup$ = getPropertyValue(this.displayShowMoreButtonInPopup$$, this.displayShowMoreButtonInPopup);
        this.pollingInterval$ = getPropertyValue(this.pollingInterval$$, this.pollingInterval);
    }
    get autofocus() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.autofocus);
        }
        return this.itemModel
            .property('autofocus', DefaultWidgetProperties.autofocus)
            .pipe(map(modelItemToBoolean), first());
    }
    get popupMessageLineAmount() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.popupMessageLineAmount);
        }
        return this.itemModel.property('popupMessageLineAmount', '').pipe(map(Number), first());
    }
    get displayShowMoreButtonInPopup() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.displayShowMoreButtonInPopup);
        }
        return this.itemModel
            .property('displayShowMoreButtonInPopup', DefaultWidgetProperties.displayShowMoreButtonInPopup)
            .pipe(map(modelItemToBoolean), first());
    }
    get pollingInterval() {
        if (!this.itemModel) {
            return this.defaultModelObservable(DefaultWidgetProperties.pollingInterval * 1000);
        }
        return this.itemModel.property('pollingInterval', DefaultWidgetProperties.pollingInterval).pipe(map(Number), map(n => n * 1000), shareReplayOnce());
    }
    setAutofocus(value) {
        this.autofocus$$.next(modelItemToBoolean(value));
    }
    setPopupMessageLineAmount(value) {
        this.popupMessageLineAmount$$.next(Number(value));
    }
    setDisplayShowMoreButtonInPopup(value) {
        this.displayShowMoreButtonInPopup$$.next(modelItemToBoolean(value));
    }
    setPollingInterval(value) {
        const pollingInterval = Number(value);
        if (!isNaN(pollingInterval) && pollingInterval > 0) {
            this.pollingInterval$$.next(secondsToMilliseconds(pollingInterval));
        }
    }
}
/** @nocollapse */ WidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ WidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=widget-properties.service.js.map