{"version":3,"file":"notifications-popups-data.service.js","sourceRoot":"","sources":["../../../../../../libs/notifications-popups-widget-ang/src/lib/services/notifications-popups-data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, NgZone } from '@angular/core';\nimport { NotificationsHttpService } from '@backbase/data-ang/notifications';\nimport { NotificationStreamItem, shareReplayOnce } from '@backbase/notifications-common-ang';\nimport { delay, delayWhen, first, map, observeOn, switchMap, take, tap } from 'rxjs/operators';\nimport { asyncScheduler, combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport {\n  enterZone,\n  leaveZone,\n  NOTIFICATIONS_BADGE_FORCE_UPDATE_EVENT,\n  NOTIFICATIONS_CREATE_LOCAL_EVENT,\n  BadgeForceUpdateEventPayload,\n} from '@backbase/notifications-common-ang';\n\nimport {\n  fromHttpResponse,\n  notificationsStreamToPopups,\n  notificationsStreamToSticky,\n  notificationLocalToStreamItem,\n} from '../helpers/mappers';\nimport { PUBSUB, Pubsub } from '@backbase/foundation-ang/web-sdk';\nimport { NotificationLocalItem } from '../models/notifications-local-item.model';\nimport { NOTIFICATION_LOCAL } from '../constants/notification-local';\nimport { WidgetPropertiesService } from './widget-properties.service';\n\nexport const DEFAULT_POLLING_INTERVAL = 15;\n\n@Injectable()\nexport class NotificationsPopupsDataService {\n  /**\n   * Sticky notifications stream\n   */\n  readonly stickyNotificationsStream$: Observable<NotificationStreamItem[]>;\n\n  /**\n   * Popup notifications stream\n   */\n  readonly popupsNotificationsStream$: Observable<NotificationStreamItem[]>;\n\n  /**\n   * Mark notification as read stream\n   */\n  readonly markNotificationAsRead$ = new Subject<NotificationStreamItem | string>();\n\n  private readonly notificationsStream$: Observable<NotificationStreamItem[]>;\n  private readonly notificationsStreamForceUpdate$ = new Subject<NotificationStreamItem[]>();\n  private readonly polling$ = new Subject<void>();\n  private readonly notificationsLocalStickySource = new Map<string, NotificationStreamItem>();\n\n  private readonly origins$ = this.properties.origins$;\n  private readonly severityLevels$ = this.properties.severityLevels$;\n  private readonly pollingInterval$ = this.properties.pollingInterval$;\n\n  constructor(\n    private readonly dataHttpService: NotificationsHttpService,\n    private readonly ngZone: NgZone,\n    private readonly properties: WidgetPropertiesService,\n    @Inject(PUBSUB) private readonly pubSub: Pubsub,\n  ) {\n    this.notificationsStream$ = this.initializeNotificationsStreamPolling();\n    this.stickyNotificationsStream$ = this.notificationsStream$.pipe(map(notificationsStreamToSticky));\n    this.popupsNotificationsStream$ = this.notificationsStream$.pipe(map(notificationsStreamToPopups));\n\n    this.markNotificationAsRead$.subscribe((payload: NotificationStreamItem | string) => {\n      this.pubSub.publish<undefined | BadgeForceUpdateEventPayload>(\n        NOTIFICATIONS_BADGE_FORCE_UPDATE_EVENT,\n        typeof payload === 'object'\n          ? {\n              origin: payload.origin,\n              level: payload.level,\n            }\n          : undefined,\n      );\n    });\n\n    this.pubSub.subscribe(NOTIFICATIONS_CREATE_LOCAL_EVENT, (notification: NotificationLocalItem) => {\n      const parsedNotification = notificationLocalToStreamItem(notification);\n\n      if (notification.sticky) {\n        this.notificationsLocalStickySource.set(parsedNotification.id, parsedNotification);\n      }\n\n      this.notificationsStream$\n        .pipe(\n          switchMap(stream => {\n            const popup = (!notification.sticky && [parsedNotification]) || [];\n            const stickies = this.notificationsLocalSticky;\n\n            return of([...stream, ...stickies, ...popup]);\n          }),\n          map(concatenatedStream => Array.from(new Map(concatenatedStream.map(item => [item.id, item])).values())),\n          take(1),\n        )\n        .subscribe(notificationsStream => this.notificationsStreamForceUpdate$.next(notificationsStream));\n    });\n  }\n\n  private get notificationsLocalSticky(): NotificationStreamItem[] {\n    return Array.from(this.notificationsLocalStickySource.values());\n  }\n\n  /**\n   * Mark notification as read\n   *\n   * @param notification Notification data\n   */\n  markNotificationAsRead(notification: NotificationStreamItem | string): void {\n    const id = typeof notification === 'string' ? notification : notification.id;\n\n    if (id.match(NOTIFICATION_LOCAL)) {\n      this.removeNotificationItemFromStream(id);\n      this.notificationsLocalStickySource.delete(id);\n    } else {\n      this.dataHttpService.putMarkAsRead({ id, markAsReadPutRequestBody: { read: true } }).subscribe(() => {\n        this.removeNotificationItemFromStream(id);\n        this.markNotificationAsRead$.next(notification);\n      });\n    }\n  }\n\n  private requestNotificationsStream(): Observable<NotificationStreamItem[]> {\n    return combineLatest([this.pollingInterval$, this.origins$, this.severityLevels$]).pipe(\n      first(),\n      switchMap(([interval, origins, levels]) =>\n        this.dataHttpService.getNotificationsStream(\n          {\n            interval,\n            ...(origins.length && { origins }),\n            ...(levels && { levels: levels.join(', ') }),\n          },\n          'response',\n        ),\n      ),\n      map(fromHttpResponse),\n    );\n  }\n\n  private removeNotificationItemFromStream(notificationId: string) {\n    this.notificationsStream$\n      .pipe(\n        first(),\n        map(notificationsStream => notificationsStream.filter(({ id }) => id !== notificationId)),\n      )\n      .subscribe(notificationsStream => this.notificationsStreamForceUpdate$.next(notificationsStream));\n  }\n\n  private initializeNotificationsStreamPolling(): Observable<NotificationStreamItem[]> {\n    const pollAndRequest$ = of(undefined).pipe(\n      tap(() => this.polling$.next()),\n      switchMap(() => this.requestNotificationsStream()),\n    );\n    const pollingNotificationsStream$ = this.polling$.pipe(\n      switchMap(() => this.pollingInterval$),\n      delayWhen(pollingInterval => of().pipe(delay(pollingInterval, leaveZone(this.ngZone, asyncScheduler)))),\n      switchMap(() => pollAndRequest$),\n      observeOn(enterZone(this.ngZone, asyncScheduler)),\n    );\n\n    return merge(\n      this.notificationsStreamForceUpdate$,\n      pollingNotificationsStream$.pipe(switchMap(stream => of([...stream, ...this.notificationsLocalSticky]))),\n      pollAndRequest$.pipe(switchMap(stream => of([...stream, ...this.notificationsLocalSticky]))),\n    ).pipe(shareReplayOnce());\n  }\n}\n"]}