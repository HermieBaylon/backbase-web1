{"version":3,"file":"widget-properties.service.js","sourceRoot":"","sources":["../../../../../../libs/notifications-popups-widget-ang/src/lib/services/widget-properties.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport {\n  getPropertyValue,\n  modelItemToBoolean,\n  secondsToMilliseconds,\n  BaseWidgetPropertiesService,\n  shareReplayOnce,\n} from '@backbase/notifications-common-ang';\nimport { ItemModel } from '@backbase/foundation-ang/core';\n\nexport interface WidgetProperties {\n  allowedRoutes: string[];\n  autofocus: boolean;\n  popupMessageLineAmount: number;\n  displayShowMoreButtonInPopup: boolean;\n  origins: string[];\n  severityLevels: string[];\n  pollingInterval: number;\n}\n\nexport const DefaultWidgetProperties: WidgetProperties = {\n  allowedRoutes: [],\n  autofocus: true,\n  popupMessageLineAmount: 2,\n  displayShowMoreButtonInPopup: false,\n  origins: [],\n  severityLevels: [],\n  pollingInterval: 15,\n};\n\n@Injectable()\nexport class WidgetPropertiesService extends BaseWidgetPropertiesService {\n  constructor(@Optional() protected readonly itemModel?: ItemModel) {\n    super(itemModel);\n  }\n\n  private readonly autofocus$$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly popupMessageLineAmount$$ = new BehaviorSubject<number | undefined>(undefined);\n  private readonly displayShowMoreButtonInPopup$$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly pollingInterval$$ = new BehaviorSubject<number | undefined>(undefined);\n\n  readonly autofocus$ = getPropertyValue(this.autofocus$$, this.autofocus);\n  readonly popupMessageLineAmount$ = getPropertyValue(this.popupMessageLineAmount$$, this.popupMessageLineAmount);\n  readonly displayShowMoreButtonInPopup$ = getPropertyValue(\n    this.displayShowMoreButtonInPopup$$,\n    this.displayShowMoreButtonInPopup,\n  );\n  readonly pollingInterval$ = getPropertyValue(this.pollingInterval$$, this.pollingInterval);\n\n  private get autofocus(): Observable<boolean> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.autofocus);\n    }\n\n    return this.itemModel\n      .property('autofocus', DefaultWidgetProperties.autofocus)\n      .pipe(map(modelItemToBoolean), first());\n  }\n\n  private get popupMessageLineAmount(): Observable<number> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.popupMessageLineAmount);\n    }\n\n    return this.itemModel.property('popupMessageLineAmount', '').pipe(map(Number), first());\n  }\n\n  private get displayShowMoreButtonInPopup(): Observable<boolean> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.displayShowMoreButtonInPopup);\n    }\n\n    return this.itemModel\n      .property('displayShowMoreButtonInPopup', DefaultWidgetProperties.displayShowMoreButtonInPopup)\n      .pipe(map(modelItemToBoolean), first());\n  }\n\n  private get pollingInterval(): Observable<number> {\n    if (!this.itemModel) {\n      return this.defaultModelObservable(DefaultWidgetProperties.pollingInterval * 1000);\n    }\n\n    return this.itemModel.property('pollingInterval', DefaultWidgetProperties.pollingInterval).pipe(\n      map(Number),\n      map(n => n * 1000),\n      shareReplayOnce(),\n    );\n  }\n\n  setAutofocus(value: string | boolean): void {\n    this.autofocus$$.next(modelItemToBoolean(value));\n  }\n\n  setPopupMessageLineAmount(value: string | number): void {\n    this.popupMessageLineAmount$$.next(Number(value));\n  }\n\n  setDisplayShowMoreButtonInPopup(value: string | boolean): void {\n    this.displayShowMoreButtonInPopup$$.next(modelItemToBoolean(value));\n  }\n\n  setPollingInterval(value: string | number): void {\n    const pollingInterval = Number(value);\n    if (!isNaN(pollingInterval) && pollingInterval > 0) {\n      this.pollingInterval$$.next(secondsToMilliseconds(pollingInterval));\n    }\n  }\n}\n"]}