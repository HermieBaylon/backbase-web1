import { ConfigFetcher } from './config-fetchers/abstract';
import { RemoteConfigContext, RemoteConfigParameters } from './remote-config.types';
export declare class RemoteConfig<T extends RemoteConfigParameters> {
    private readonly configFetcher;
    constructor(configFetcher: ConfigFetcher<T>, context: RemoteConfigContext, defaults: T);
    private static normalizeTag;
    private static normalizeContext;
    private static validateContext;
    private activatedConfig?;
    private fetchedConfig?;
    private readonly context;
    private readonly defaultConfig;
    private readonly extractedType;
    private readonly tags;
    activate(): void;
    addCustomTag(tag: string): void;
    removeCustomTag(tag: string): boolean;
    clearCustomTags(): void;
    fetch(): Promise<void>;
    fetchAndActivate(): Promise<void>;
    getValue<K extends keyof T & string>(parameterName: K): T[K] | null;
    private getDefaultValue;
    private getRawRemoteValue;
    private getRemoteValue;
    private parseRemoteValue;
}
