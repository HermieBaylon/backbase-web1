export declare enum ValueType {
    Array = "array",
    Boolean = "boolean",
    Object = "object",
    Null = "null",
    Number = "number",
    String = "string"
}
export declare type PrimitiveValueType = ValueType.Boolean | ValueType.Null | ValueType.Number | ValueType.String;
export declare class ArrayValueTypeDescriptor {
    readonly type = ValueType.Array;
}
export declare class ObjectValueTypeDescriptor {
    readonly properties: ObjectValueTypeDescriptorProperties;
    readonly type = ValueType.Object;
    constructor(properties: ObjectValueTypeDescriptorProperties);
}
export declare class PrimitiveValueTypeDescriptor {
    readonly type: PrimitiveValueType;
    constructor(type: PrimitiveValueType);
}
export declare type ValueTypeDescriptor = ArrayValueTypeDescriptor | ObjectValueTypeDescriptor | PrimitiveValueTypeDescriptor;
export interface ObjectValueTypeDescriptorProperties {
    [propertyName: string]: ValueTypeDescriptor;
}
