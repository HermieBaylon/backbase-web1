(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common/http'),exports, require('@angular/core'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('@backbase/remote-config-ang', ['@angular/core','@angular/common/http','exports', '@angular/core', '@angular/common/http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common.http,(global.backbase = global.backbase || {}, global.backbase["remote-config-ang"] = {}), global.ng.core, global.ng.common.http));
})(this, (function (ɵngcc0,ɵngcc1,exports, core, http) { 'use strict';

    var RemoteConfigFetcherService = /** @class */ (function () {
        function RemoteConfigFetcherService(http) {
            this.http = http;
        }
        RemoteConfigFetcherService.prototype.fetch = function (requestParameters) {
            return this.http
                .get(requestParameters.url, {
                headers: requestParameters.headers,
            })
                .toPromise();
        };
RemoteConfigFetcherService.ɵfac = function RemoteConfigFetcherService_Factory(t) { return new (t || RemoteConfigFetcherService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
RemoteConfigFetcherService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RemoteConfigFetcherService, factory: function (t) { return RemoteConfigFetcherService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RemoteConfigFetcherService, [{
        type: core.Injectable
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();
        return RemoteConfigFetcherService;
    }());
    RemoteConfigFetcherService.ctorParameters = function () { return [
        { type: http.HttpClient }
    ]; };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ParseSuccess = /** @class */ (function () {
        function ParseSuccess(result) {
            this.result = result;
        }
        ParseSuccess.create = function (result) {
            return new ParseSuccess(result);
        };
        return ParseSuccess;
    }());
    var ParseFailure = /** @class */ (function () {
        function ParseFailure(reason) {
            this.reason = reason;
        }
        ParseFailure.create = function (reason) {
            return new ParseFailure(reason);
        };
        return ParseFailure;
    }());

    var ValueType;
    (function (ValueType) {
        ValueType["Array"] = "array";
        ValueType["Boolean"] = "boolean";
        ValueType["Object"] = "object";
        ValueType["Null"] = "null";
        ValueType["Number"] = "number";
        ValueType["String"] = "string";
    })(ValueType || (ValueType = {}));
    var ArrayValueTypeDescriptor = /** @class */ (function () {
        function ArrayValueTypeDescriptor() {
            this.type = ValueType.Array;
        }
        return ArrayValueTypeDescriptor;
    }());
    var ObjectValueTypeDescriptor = /** @class */ (function () {
        function ObjectValueTypeDescriptor(properties) {
            this.properties = properties;
            this.type = ValueType.Object;
        }
        return ObjectValueTypeDescriptor;
    }());
    var PrimitiveValueTypeDescriptor = /** @class */ (function () {
        function PrimitiveValueTypeDescriptor(type) {
            this.type = type;
        }
        return PrimitiveValueTypeDescriptor;
    }());

    var isArray = function (arg) { return Array.isArray(arg); };
    var isBoolean = function (arg) { return typeof arg === 'boolean'; };
    var isNull = function (arg) { return arg === null; };
    var isNullOrUndefined = function (arg) { return isNull(arg) || isUndefined(arg); };
    var isNumber = function (arg) { return typeof arg === 'number'; };
    var isString = function (arg) { return typeof arg === 'string'; };
    var isObject = function (arg) { return typeof arg === 'object' && arg !== null && Array.isArray(arg) === false; };
    var isUndefined = function (arg) { return typeof arg === 'undefined'; };

    var ParseError;
    (function (ParseError) {
        ParseError["TypeMismatch"] = "TypeMismatch";
        ParseError["UnknownPropertyType"] = "UnknownPropertyType";
    })(ParseError || (ParseError = {}));
    var ValueParser = /** @class */ (function () {
        function ValueParser() {
        }
        ValueParser.prototype.parseAs = function (rawValue, valueType) {
            if (valueType instanceof ArrayValueTypeDescriptor) {
                return this.parseArray(rawValue);
            }
            if (valueType instanceof ObjectValueTypeDescriptor) {
                return this.parseObjectAs(rawValue, valueType);
            }
            return this.parsePrimitiveAs(rawValue, valueType);
        };
        ValueParser.prototype.parseArray = function (value) {
            return isArray(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
        };
        ValueParser.prototype.parseObjectAs = function (rawValue, valueType) {
            var e_1, _a;
            if (!isObject(rawValue)) {
                return ParseFailure.create(ParseError.TypeMismatch);
            }
            var objectRawValue = rawValue;
            var result = {};
            try {
                for (var _b = __values(Object.keys(valueType.properties)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var propertyName = _c.value;
                    var propertyValueType = valueType.properties[propertyName];
                    var propertyValueParseResult = this.parseAs(objectRawValue[propertyName], propertyValueType);
                    if (propertyValueParseResult instanceof ParseFailure) {
                        return ParseFailure.create(propertyValueParseResult.reason);
                    }
                    result[propertyName] = propertyValueParseResult.result;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return ParseSuccess.create(result);
        };
        ValueParser.prototype.parsePrimitiveAs = function (value, valueType) {
            if (valueType.type === ValueType.Boolean) {
                return isBoolean(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
            }
            if (valueType.type === ValueType.Number) {
                return isNumber(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
            }
            if (valueType.type === ValueType.Null) {
                return isNull(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
            }
            return isString(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
        };
        return ValueParser;
    }());

    var TypeExtractor = /** @class */ (function () {
        function TypeExtractor() {
        }
        TypeExtractor.throwInvalidSourceError = function (source) {
            throw new TypeError('[remote-config] Could not extract the types: Expected to receive an object, ' + ("but got " + typeof source));
        };
        TypeExtractor.extractObjectType = function (value) {
            var e_1, _a;
            var properties = {};
            try {
                for (var _b = __values(Object.keys(value)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var propertyName = _c.value;
                    var propertyValue = value[propertyName];
                    var propertyValueType = TypeExtractor.extractType(propertyValue);
                    if (propertyValueType) {
                        properties[propertyName] = propertyValueType;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return new ObjectValueTypeDescriptor(properties);
        };
        TypeExtractor.extractType = function (value) {
            if (isUndefined(value)) {
                return null;
            }
            if (isArray(value)) {
                return new ArrayValueTypeDescriptor();
            }
            if (isBoolean(value)) {
                return new PrimitiveValueTypeDescriptor(ValueType.Boolean);
            }
            if (isNull(value)) {
                return new PrimitiveValueTypeDescriptor(ValueType.Null);
            }
            if (isNumber(value)) {
                return new PrimitiveValueTypeDescriptor(ValueType.Number);
            }
            if (isString(value)) {
                return new PrimitiveValueTypeDescriptor(ValueType.String);
            }
            return TypeExtractor.extractObjectType(value);
        };
        TypeExtractor.prototype.extractTypes = function (source) {
            if (!isObject(source)) {
                TypeExtractor.throwInvalidSourceError(source);
            }
            return TypeExtractor.extractObjectType(source);
        };
        return TypeExtractor;
    }());

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var hasProperty = function (obj, propertyName) { return hasOwnProperty.call(obj, propertyName); };

    var trim = function (str) { return String(str || '').trim(); };

    var valueParser = new ValueParser();
    var typeExtractor = new TypeExtractor();
    var RemoteConfig = /** @class */ (function () {
        function RemoteConfig(configFetcher, context, defaults) {
            this.configFetcher = configFetcher;
            this.tags = new Set();
            var normalizedContext = RemoteConfig.normalizeContext(context);
            RemoteConfig.validateContext(normalizedContext);
            this.context = normalizedContext;
            this.defaultConfig = Object.assign({}, defaults);
            this.extractedType = typeExtractor.extractTypes(defaults);
        }
        RemoteConfig.normalizeTag = function (tag) {
            return trim(tag);
        };
        RemoteConfig.normalizeContext = function (context) {
            var appName = trim(context.appName);
            var appVersion = trim(context.appVersion);
            var projectName = trim(context.projectName);
            var serviceRoot = trim(context.serviceRoot).replace(/\/$/, '');
            return {
                appName: appName,
                appVersion: appVersion,
                projectName: projectName,
                serviceRoot: serviceRoot,
            };
        };
        RemoteConfig.validateContext = function (context) {
            if (context.appName.length === 0) {
                throw new TypeError("[remote-config] Could not instantiate Remove Config client: " + "The provided appName is empty.");
            }
            if (context.appVersion.length === 0) {
                throw new TypeError("[remote-config] Could not instantiate Remove Config client: " + "The provided appVersion is empty.");
            }
        };
        RemoteConfig.prototype.activate = function () {
            this.activatedConfig = Object.assign({}, this.fetchedConfig);
        };
        RemoteConfig.prototype.addCustomTag = function (tag) {
            var normalizedTag = RemoteConfig.normalizeTag(tag);
            if (normalizedTag.length === 0) {
                console.warn("[remote-config] Could not add the tag: " + "A tag must be a non-empty string.");
                return;
            }
            this.tags.add(normalizedTag);
        };
        RemoteConfig.prototype.removeCustomTag = function (tag) {
            var normalizedTag = RemoteConfig.normalizeTag(tag);
            if (normalizedTag.length === 0) {
                console.warn("[remote-config] Could not delete the tag: " + "A tag must be a non-empty string.");
                return false;
            }
            return this.tags.delete(normalizedTag);
        };
        RemoteConfig.prototype.clearCustomTags = function () {
            this.tags.clear();
        };
        RemoteConfig.prototype.fetch = function () {
            return __awaiter(this, void 0, void 0, function () {
                var projectName, serviceRoot, url, headers, _a, error_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            projectName = this.context.projectName;
                            serviceRoot = this.context.serviceRoot;
                            url = serviceRoot + "/client-api/v1/projects/" + projectName + "/parameters";
                            headers = {
                                'Application-Name': this.context.appName,
                                'Application-Version': this.context.appVersion,
                                'Custom-Tags': Array.from(this.tags).join(','),
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, this.configFetcher.fetch({
                                    headers: headers,
                                    url: url,
                                })];
                        case 2:
                            _a.fetchedConfig = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _b.sent();
                            console.warn("[remote-config] Could not fetch the remote config:", error_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        RemoteConfig.prototype.fetchAndActivate = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.fetch()];
                        case 1:
                            _a.sent();
                            this.activate();
                            return [2 /*return*/];
                    }
                });
            });
        };
        RemoteConfig.prototype.getValue = function (parameterName) {
            var remoteValue = this.getRemoteValue(parameterName);
            if (remoteValue instanceof ParseSuccess) {
                return remoteValue.result;
            }
            if (remoteValue instanceof ParseFailure) {
                console.warn("[remote-config] Failed to parse the remote value " +
                    ("of the parameter \"" + parameterName + "\". ") +
                    ("Reason: " + remoteValue.reason));
            }
            return this.getDefaultValue(parameterName);
        };
        RemoteConfig.prototype.getDefaultValue = function (parameterName) {
            if (hasProperty(this.defaultConfig, parameterName)) {
                var defaultValue = this.defaultConfig[parameterName];
                return isNullOrUndefined(defaultValue) ? null : defaultValue;
            }
            console.warn("[remote-config] Could not get a default value. " +
                ("The parameter '" + parameterName + "' is not present in the default config."));
            return null;
        };
        RemoteConfig.prototype.getRawRemoteValue = function (parameterName) {
            if (this.activatedConfig && hasProperty(this.activatedConfig, parameterName)) {
                return this.activatedConfig[parameterName];
            }
            return undefined;
        };
        RemoteConfig.prototype.getRemoteValue = function (parameterName) {
            var rawRemoteValue = this.getRawRemoteValue(parameterName);
            return !isUndefined(rawRemoteValue) ? this.parseRemoteValue(rawRemoteValue, parameterName) : null;
        };
        RemoteConfig.prototype.parseRemoteValue = function (rawRemoteValue, parameterName) {
            var valueType = this.extractedType.properties[parameterName];
            if (!valueType) {
                return ParseFailure.create(ParseError.UnknownPropertyType);
            }
            return valueParser.parseAs(rawRemoteValue, valueType);
        };
        return RemoteConfig;
    }());

    var RemoteConfigConfigurationToken = new core.InjectionToken('@backbase/remote-config-ang: RemoteConfigConfigurationToken');
    var RemoteConfigService = /** @class */ (function () {
        function RemoteConfigService(configuration, configFetcher) {
            this.configuration = configuration;
            this.configFetcher = configFetcher;
            this.remoteConfigClient = new RemoteConfig(this.configFetcher, {
                appName: configuration.appName,
                appVersion: configuration.appVersion,
                projectName: configuration.projectName,
                serviceRoot: configuration.serviceRoot,
            }, configuration.defaults);
            this.disabled = Boolean(configuration.disabled);
        }
        RemoteConfigService.prototype.addCustomTag = function (tag) {
            this.remoteConfigClient.addCustomTag(tag);
        };
        RemoteConfigService.prototype.clearCustomTags = function () {
            this.remoteConfigClient.clearCustomTags();
        };
        RemoteConfigService.prototype.getValue = function (parameterName) {
            return this.remoteConfigClient.getValue(parameterName);
        };
        RemoteConfigService.prototype.fetchAndActivate = function () {
            if (this.disabled) {
                return Promise.resolve();
            }
            return this.remoteConfigClient.fetchAndActivate();
        };
        RemoteConfigService.prototype.removeCustomTag = function (tag) {
            return this.remoteConfigClient.removeCustomTag(tag);
        };
RemoteConfigService.ɵfac = function RemoteConfigService_Factory(t) { return new (t || RemoteConfigService)(ɵngcc0.ɵɵinject(RemoteConfigConfigurationToken), ɵngcc0.ɵɵinject(RemoteConfigFetcherService)); };
RemoteConfigService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RemoteConfigService, factory: function (t) { return RemoteConfigService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RemoteConfigService, [{
        type: core.Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: core.Inject,
                args: [RemoteConfigConfigurationToken]
            }] }, { type: RemoteConfigFetcherService }]; }, null); })();
        return RemoteConfigService;
    }());
    RemoteConfigService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [RemoteConfigConfigurationToken,] }] },
        { type: RemoteConfigFetcherService }
    ]; };

    var RemoteConfigModule = /** @class */ (function () {
        function RemoteConfigModule() {
        }
        RemoteConfigModule.forRoot = function (configuration) {
            return {
                ngModule: RemoteConfigModule,
                providers: [
                    {
                        provide: RemoteConfigConfigurationToken,
                        useValue: configuration,
                    },
                ],
            };
        };
RemoteConfigModule.ɵfac = function RemoteConfigModule_Factory(t) { return new (t || RemoteConfigModule)(); };
RemoteConfigModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: RemoteConfigModule });
RemoteConfigModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [RemoteConfigFetcherService, RemoteConfigService], imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RemoteConfigModule, [{
        type: core.NgModule,
        args: [{
                imports: [],
                declarations: [],
                providers: [RemoteConfigFetcherService, RemoteConfigService],
                exports: []
            }]
    }], function () { return []; }, null); })();
        return RemoteConfigModule;
    }());

    var ConfigFetcher = /** @class */ (function () {
        function ConfigFetcher() {
        }
        return ConfigFetcher;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ConfigFetcher = ConfigFetcher;
    exports.RemoteConfig = RemoteConfig;
    exports.RemoteConfigConfigurationToken = RemoteConfigConfigurationToken;
    exports.RemoteConfigModule = RemoteConfigModule;
    exports.RemoteConfigService = RemoteConfigService;
    exports. ɵb   = RemoteConfigFetcherService;
    exports. ɵc   = trim;

    Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=backbase-remote-config-ang.umd.js.map