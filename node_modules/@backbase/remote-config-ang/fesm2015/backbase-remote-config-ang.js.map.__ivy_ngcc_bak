{"version":3,"file":"backbase-remote-config-ang.js","sources":["../../../../packages/remote-config-ang/src/angular/remote-config-fetcher.service.ts","../../../../packages/remote-config-ang/src/core/parser/parse-result.ts","../../../../packages/remote-config-ang/src/core/type-extractor/extracted-value-types.ts","../../../../packages/remote-config-ang/src/core/utils/is.ts","../../../../packages/remote-config-ang/src/core/parser/value-parser.ts","../../../../packages/remote-config-ang/src/core/type-extractor/type-extractor.ts","../../../../packages/remote-config-ang/src/core/utils/has-property.ts","../../../../packages/remote-config-ang/src/core/utils/trim.ts","../../../../packages/remote-config-ang/src/core/remote-config.ts","../../../../packages/remote-config-ang/src/angular/remote-config.service.ts","../../../../packages/remote-config-ang/src/angular/remote-config.module.ts","../../../../packages/remote-config-ang/src/core/config-fetchers/abstract.ts","../../../../packages/remote-config-ang/src/backbase-remote-config-ang.ts"],"sourcesContent":["import { ConfigFetcher } from '../core/config-fetchers/abstract';\nimport { RemoteConfigParameters, RemoteConfigRequestParameters } from '../core/remote-config.types';\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class RemoteConfigFetcherService<T extends RemoteConfigParameters> implements ConfigFetcher<T> {\n  constructor(private readonly http: HttpClient) {}\n\n  fetch(requestParameters: RemoteConfigRequestParameters): Promise<T> {\n    return this.http\n      .get<T>(requestParameters.url, {\n        headers: requestParameters.headers,\n      })\n      .toPromise();\n  }\n}\n","export class ParseSuccess<T> {\n  static create<T>(result: T) {\n    return new ParseSuccess(result);\n  }\n\n  constructor(readonly result: T) {}\n}\n\nexport class ParseFailure<R> {\n  static create<R>(reason: R) {\n    return new ParseFailure(reason);\n  }\n\n  constructor(readonly reason: R) {}\n}\n\nexport type ParseResult<T, R> = ParseSuccess<T> | ParseFailure<R>;\n","export enum ValueType {\n  Array = 'array',\n  Boolean = 'boolean',\n  Object = 'object',\n  Null = 'null',\n  Number = 'number',\n  String = 'string',\n}\n\nexport type PrimitiveValueType = ValueType.Boolean | ValueType.Null | ValueType.Number | ValueType.String;\n\nexport class ArrayValueTypeDescriptor {\n  readonly type = ValueType.Array;\n}\n\nexport class ObjectValueTypeDescriptor {\n  readonly type = ValueType.Object;\n\n  constructor(readonly properties: ObjectValueTypeDescriptorProperties) {}\n}\n\nexport class PrimitiveValueTypeDescriptor {\n  constructor(readonly type: PrimitiveValueType) {}\n}\n\nexport type ValueTypeDescriptor = ArrayValueTypeDescriptor | ObjectValueTypeDescriptor | PrimitiveValueTypeDescriptor;\n\nexport interface ObjectValueTypeDescriptorProperties {\n  [propertyName: string]: ValueTypeDescriptor;\n}\n","export const isArray = (arg: unknown): boolean => Array.isArray(arg);\n\nexport const isBoolean = (arg: unknown): boolean => typeof arg === 'boolean';\n\nexport const isNull = (arg: unknown): boolean => arg === null;\n\nexport const isNullOrUndefined = (arg: unknown): boolean => isNull(arg) || isUndefined(arg);\n\nexport const isNumber = (arg: unknown): boolean => typeof arg === 'number';\n\nexport const isString = (arg: unknown): boolean => typeof arg === 'string';\n\nexport const isObject = (arg: unknown): boolean =>\n  typeof arg === 'object' && arg !== null && Array.isArray(arg) === false;\n\nexport const isUndefined = (arg: unknown): boolean => typeof arg === 'undefined';\n","import {\n  ArrayValueTypeDescriptor,\n  ObjectValueTypeDescriptor,\n  PrimitiveValueTypeDescriptor,\n  ValueType,\n  ValueTypeDescriptor,\n} from '../type-extractor/extracted-value-types';\nimport { isArray, isBoolean, isNull, isNumber, isObject, isString } from '../utils/is';\nimport { ParseFailure, ParseResult, ParseSuccess } from './parse-result';\n\ninterface UnknownObject {\n  [property: string]: unknown;\n}\n\nexport enum ParseError {\n  TypeMismatch = 'TypeMismatch',\n  UnknownPropertyType = 'UnknownPropertyType',\n}\n\nexport class ValueParser {\n  parseAs<T>(rawValue: unknown, valueType: ValueTypeDescriptor): ParseResult<T, ParseError> {\n    if (valueType instanceof ArrayValueTypeDescriptor) {\n      return this.parseArray<T>(rawValue);\n    }\n\n    if (valueType instanceof ObjectValueTypeDescriptor) {\n      return this.parseObjectAs<T>(rawValue, valueType);\n    }\n\n    return this.parsePrimitiveAs<T>(rawValue, valueType);\n  }\n\n  private parseArray<T>(value: unknown): ParseResult<T, ParseError> {\n    return isArray(value) ? ParseSuccess.create(value as T) : ParseFailure.create(ParseError.TypeMismatch);\n  }\n\n  private parseObjectAs<T>(rawValue: unknown, valueType: ObjectValueTypeDescriptor): ParseResult<T, ParseError> {\n    if (!isObject(rawValue)) {\n      return ParseFailure.create(ParseError.TypeMismatch);\n    }\n\n    const objectRawValue = rawValue as UnknownObject;\n    const result = {} as UnknownObject;\n\n    for (const propertyName of Object.keys(valueType.properties)) {\n      const propertyValueType = valueType.properties[propertyName];\n      const propertyValueParseResult = this.parseAs<T>(objectRawValue[propertyName], propertyValueType);\n\n      if (propertyValueParseResult instanceof ParseFailure) {\n        return ParseFailure.create(propertyValueParseResult.reason);\n      }\n\n      result[propertyName] = propertyValueParseResult.result;\n    }\n\n    return ParseSuccess.create(result as unknown as T);\n  }\n\n  private parsePrimitiveAs<T>(value: unknown, valueType: PrimitiveValueTypeDescriptor): ParseResult<T, ParseError> {\n    if (valueType.type === ValueType.Boolean) {\n      return isBoolean(value) ? ParseSuccess.create(value as T) : ParseFailure.create(ParseError.TypeMismatch);\n    }\n\n    if (valueType.type === ValueType.Number) {\n      return isNumber(value) ? ParseSuccess.create(value as T) : ParseFailure.create(ParseError.TypeMismatch);\n    }\n\n    if (valueType.type === ValueType.Null) {\n      return isNull(value) ? ParseSuccess.create(value as T) : ParseFailure.create(ParseError.TypeMismatch);\n    }\n\n    return isString(value) ? ParseSuccess.create(value as T) : ParseFailure.create(ParseError.TypeMismatch);\n  }\n}\n","import { isArray, isBoolean, isNull, isNumber, isObject, isString, isUndefined } from '../utils/is';\nimport {\n  ArrayValueTypeDescriptor,\n  ObjectValueTypeDescriptor,\n  ObjectValueTypeDescriptorProperties,\n  PrimitiveValueTypeDescriptor,\n  ValueType,\n  ValueTypeDescriptor,\n} from './extracted-value-types';\n\nexport interface ObjectValue {\n  [property: string]: unknown;\n}\n\nexport class TypeExtractor {\n  private static throwInvalidSourceError(source: unknown) {\n    throw new TypeError(\n      '[remote-config] Could not extract the types: Expected to receive an object, ' + `but got ${typeof source}`,\n    );\n  }\n\n  private static extractObjectType(value: ObjectValue): ObjectValueTypeDescriptor {\n    const properties: ObjectValueTypeDescriptorProperties = {};\n\n    for (const propertyName of Object.keys(value)) {\n      const propertyValue = value[propertyName];\n      const propertyValueType = TypeExtractor.extractType(propertyValue);\n\n      if (propertyValueType) {\n        properties[propertyName] = propertyValueType;\n      }\n    }\n\n    return new ObjectValueTypeDescriptor(properties);\n  }\n\n  private static extractType(value: unknown): ValueTypeDescriptor | null {\n    if (isUndefined(value)) {\n      return null;\n    }\n\n    if (isArray(value)) {\n      return new ArrayValueTypeDescriptor();\n    }\n\n    if (isBoolean(value)) {\n      return new PrimitiveValueTypeDescriptor(ValueType.Boolean);\n    }\n\n    if (isNull(value)) {\n      return new PrimitiveValueTypeDescriptor(ValueType.Null);\n    }\n\n    if (isNumber(value)) {\n      return new PrimitiveValueTypeDescriptor(ValueType.Number);\n    }\n\n    if (isString(value)) {\n      return new PrimitiveValueTypeDescriptor(ValueType.String);\n    }\n\n    return TypeExtractor.extractObjectType(value as ObjectValue);\n  }\n\n  extractTypes(source: ObjectValue): ObjectValueTypeDescriptor {\n    if (!isObject(source)) {\n      TypeExtractor.throwInvalidSourceError(source);\n    }\n\n    return TypeExtractor.extractObjectType(source);\n  }\n}\n","const hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport const hasProperty = (obj: unknown, propertyName: string): boolean => hasOwnProperty.call(obj, propertyName);\n","export const trim = (str: string) => String(str || '').trim();\n","import { ConfigFetcher } from './config-fetchers/abstract';\nimport { ParseFailure, ParseResult, ParseSuccess } from './parser/parse-result';\nimport { ParseError, ValueParser } from './parser/value-parser';\nimport { RemoteConfigContext, RemoteConfigParameters } from './remote-config.types';\nimport { ObjectValueTypeDescriptor } from './type-extractor/extracted-value-types';\nimport { ObjectValue, TypeExtractor } from './type-extractor/type-extractor';\nimport { hasProperty } from './utils/has-property';\nimport { isNullOrUndefined, isUndefined } from './utils/is';\nimport { trim } from './utils/trim';\n\nconst valueParser = new ValueParser();\nconst typeExtractor = new TypeExtractor();\n\nexport class RemoteConfig<T extends RemoteConfigParameters> {\n  constructor(private readonly configFetcher: ConfigFetcher<T>, context: RemoteConfigContext, defaults: T) {\n    const normalizedContext = RemoteConfig.normalizeContext(context);\n\n    RemoteConfig.validateContext(normalizedContext);\n\n    this.context = normalizedContext;\n\n    this.defaultConfig = {\n      ...defaults,\n    };\n\n    this.extractedType = typeExtractor.extractTypes(defaults as ObjectValue);\n  }\n\n  private static normalizeTag(tag: string) {\n    return trim(tag);\n  }\n\n  private static normalizeContext(context: RemoteConfigContext): RemoteConfigContext {\n    const appName = trim(context.appName);\n    const appVersion = trim(context.appVersion);\n    const projectName = trim(context.projectName);\n    const serviceRoot = trim(context.serviceRoot).replace(/\\/$/, '');\n\n    return {\n      appName,\n      appVersion,\n      projectName,\n      serviceRoot,\n    };\n  }\n\n  private static validateContext(context: RemoteConfigContext): void {\n    if (context.appName.length === 0) {\n      throw new TypeError(\n        `[remote-config] Could not instantiate Remove Config client: ` + `The provided appName is empty.`,\n      );\n    }\n\n    if (context.appVersion.length === 0) {\n      throw new TypeError(\n        `[remote-config] Could not instantiate Remove Config client: ` + `The provided appVersion is empty.`,\n      );\n    }\n  }\n  private activatedConfig?: Partial<T>;\n\n  private fetchedConfig?: Partial<T>;\n\n  private readonly context: RemoteConfigContext;\n\n  private readonly defaultConfig: T;\n\n  private readonly extractedType: ObjectValueTypeDescriptor;\n\n  private readonly tags = new Set<string>();\n\n  activate(): void {\n    this.activatedConfig = Object.assign({}, this.fetchedConfig);\n  }\n\n  addCustomTag(tag: string): void {\n    const normalizedTag = RemoteConfig.normalizeTag(tag);\n\n    if (normalizedTag.length === 0) {\n      console.warn(`[remote-config] Could not add the tag: ` + `A tag must be a non-empty string.`);\n\n      return;\n    }\n\n    this.tags.add(normalizedTag);\n  }\n\n  removeCustomTag(tag: string): boolean {\n    const normalizedTag = RemoteConfig.normalizeTag(tag);\n\n    if (normalizedTag.length === 0) {\n      console.warn(`[remote-config] Could not delete the tag: ` + `A tag must be a non-empty string.`);\n\n      return false;\n    }\n\n    return this.tags.delete(normalizedTag);\n  }\n\n  clearCustomTags() {\n    this.tags.clear();\n  }\n\n  async fetch(): Promise<void> {\n    const projectName = this.context.projectName;\n    const serviceRoot = this.context.serviceRoot;\n\n    const url = `${serviceRoot}/client-api/v1/projects/${projectName}/parameters`;\n\n    const headers = {\n      'Application-Name': this.context.appName,\n      'Application-Version': this.context.appVersion,\n      'Custom-Tags': Array.from(this.tags).join(','),\n    };\n\n    try {\n      this.fetchedConfig = await this.configFetcher.fetch({\n        headers,\n        url,\n      });\n    } catch (error) {\n      console.warn(`[remote-config] Could not fetch the remote config:`, error);\n    }\n  }\n\n  async fetchAndActivate(): Promise<void> {\n    await this.fetch();\n    this.activate();\n  }\n\n  getValue<K extends keyof T & string>(parameterName: K): T[K] | null {\n    const remoteValue = this.getRemoteValue(parameterName);\n\n    if (remoteValue instanceof ParseSuccess) {\n      return remoteValue.result;\n    }\n\n    if (remoteValue instanceof ParseFailure) {\n      console.warn(\n        `[remote-config] Failed to parse the remote value ` +\n          `of the parameter \"${parameterName}\". ` +\n          `Reason: ${remoteValue.reason}`,\n      );\n    }\n\n    return this.getDefaultValue(parameterName);\n  }\n\n  private getDefaultValue<K extends keyof T & string>(parameterName: K): T[K] | null {\n    if (hasProperty(this.defaultConfig, parameterName)) {\n      const defaultValue = this.defaultConfig[parameterName];\n\n      return isNullOrUndefined(defaultValue) ? null : defaultValue;\n    }\n\n    console.warn(\n      `[remote-config] Could not get a default value. ` +\n        `The parameter '${parameterName}' is not present in the default config.`,\n    );\n\n    return null;\n  }\n\n  private getRawRemoteValue<K extends keyof T & string>(parameterName: K): unknown | undefined {\n    if (this.activatedConfig && hasProperty(this.activatedConfig, parameterName)) {\n      return this.activatedConfig[parameterName];\n    }\n\n    return undefined;\n  }\n\n  private getRemoteValue<K extends keyof T & string>(parameterName: K): ParseResult<T[K], ParseError> | null {\n    const rawRemoteValue = this.getRawRemoteValue(parameterName);\n\n    return !isUndefined(rawRemoteValue) ? this.parseRemoteValue(rawRemoteValue, parameterName) : null;\n  }\n\n  private parseRemoteValue<K extends keyof T & string>(\n    rawRemoteValue: unknown,\n    parameterName: K,\n  ): ParseResult<T[K], ParseError> {\n    const valueType = this.extractedType.properties[parameterName];\n\n    if (!valueType) {\n      return ParseFailure.create(ParseError.UnknownPropertyType);\n    }\n\n    return valueParser.parseAs<T[K]>(rawRemoteValue, valueType);\n  }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\nimport { RemoteConfig } from '../core/remote-config';\nimport { RemoteConfigParameters } from '../core/remote-config.types';\nimport { RemoteConfigFetcherService } from './remote-config-fetcher.service';\nimport { RemoteConfigConfiguration } from './remote-config.types';\n\nexport const RemoteConfigConfigurationToken = new InjectionToken<RemoteConfigConfiguration<any>>(\n  '@backbase/remote-config-ang: RemoteConfigConfigurationToken',\n);\n\n@Injectable()\nexport class RemoteConfigService<T extends RemoteConfigParameters> {\n  private readonly remoteConfigClient: RemoteConfig<T>;\n\n  private readonly disabled: boolean;\n\n  constructor(\n    @Inject(RemoteConfigConfigurationToken) private readonly configuration: RemoteConfigConfiguration<T>,\n    private readonly configFetcher: RemoteConfigFetcherService<T>,\n  ) {\n    this.remoteConfigClient = new RemoteConfig<T>(\n      this.configFetcher,\n      {\n        appName: configuration.appName,\n        appVersion: configuration.appVersion,\n        projectName: configuration.projectName,\n        serviceRoot: configuration.serviceRoot,\n      },\n      configuration.defaults,\n    );\n\n    this.disabled = Boolean(configuration.disabled);\n  }\n\n  addCustomTag(tag: string): void {\n    this.remoteConfigClient.addCustomTag(tag);\n  }\n\n  clearCustomTags(): void {\n    this.remoteConfigClient.clearCustomTags();\n  }\n\n  getValue<K extends keyof T & string>(parameterName: K): T[K] {\n    return this.remoteConfigClient.getValue(parameterName) as T[K];\n  }\n\n  fetchAndActivate(): Promise<void> {\n    if (this.disabled) {\n      return Promise.resolve();\n    }\n\n    return this.remoteConfigClient.fetchAndActivate();\n  }\n\n  removeCustomTag(tag: string): boolean {\n    return this.remoteConfigClient.removeCustomTag(tag);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RemoteConfigFetcherService } from './remote-config-fetcher.service';\nimport { RemoteConfigConfigurationToken, RemoteConfigService } from './remote-config.service';\nimport { RemoteConfigConfiguration } from './remote-config.types';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  providers: [RemoteConfigFetcherService, RemoteConfigService],\n  exports: [],\n})\nexport class RemoteConfigModule {\n  static forRoot<T>(configuration: RemoteConfigConfiguration<T>): ModuleWithProviders<RemoteConfigModule> {\n    return {\n      ngModule: RemoteConfigModule,\n      providers: [\n        {\n          provide: RemoteConfigConfigurationToken,\n          useValue: configuration,\n        },\n      ],\n    };\n  }\n}\n","import { RemoteConfigParameters } from '../remote-config.types';\n\nexport interface RemoteConfigRequestParameters {\n  headers: {\n    'Application-Name': string;\n    'Application-Version': string;\n    'Custom-Tags': string;\n  };\n  url: string;\n}\n\nexport abstract class ConfigFetcher<T extends RemoteConfigParameters> {\n  abstract fetch(requestParameters: RemoteConfigRequestParameters): Promise<Partial<T>>;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {RemoteConfigFetcherService as ɵb} from './angular/remote-config-fetcher.service';\nexport {RemoteConfigContext as ɵa} from './core/remote-config.types';\nexport {trim as ɵc} from './core/utils/trim';"],"names":[],"mappings":"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"}