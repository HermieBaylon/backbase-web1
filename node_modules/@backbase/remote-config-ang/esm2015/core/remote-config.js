import { __awaiter } from "tslib";
import { ParseFailure, ParseSuccess } from './parser/parse-result';
import { ParseError, ValueParser } from './parser/value-parser';
import { TypeExtractor } from './type-extractor/type-extractor';
import { hasProperty } from './utils/has-property';
import { isNullOrUndefined, isUndefined } from './utils/is';
import { trim } from './utils/trim';
const valueParser = new ValueParser();
const typeExtractor = new TypeExtractor();
export class RemoteConfig {
    constructor(configFetcher, context, defaults) {
        this.configFetcher = configFetcher;
        this.tags = new Set();
        const normalizedContext = RemoteConfig.normalizeContext(context);
        RemoteConfig.validateContext(normalizedContext);
        this.context = normalizedContext;
        this.defaultConfig = Object.assign({}, defaults);
        this.extractedType = typeExtractor.extractTypes(defaults);
    }
    static normalizeTag(tag) {
        return trim(tag);
    }
    static normalizeContext(context) {
        const appName = trim(context.appName);
        const appVersion = trim(context.appVersion);
        const projectName = trim(context.projectName);
        const serviceRoot = trim(context.serviceRoot).replace(/\/$/, '');
        return {
            appName,
            appVersion,
            projectName,
            serviceRoot,
        };
    }
    static validateContext(context) {
        if (context.appName.length === 0) {
            throw new TypeError(`[remote-config] Could not instantiate Remove Config client: ` + `The provided appName is empty.`);
        }
        if (context.appVersion.length === 0) {
            throw new TypeError(`[remote-config] Could not instantiate Remove Config client: ` + `The provided appVersion is empty.`);
        }
    }
    activate() {
        this.activatedConfig = Object.assign({}, this.fetchedConfig);
    }
    addCustomTag(tag) {
        const normalizedTag = RemoteConfig.normalizeTag(tag);
        if (normalizedTag.length === 0) {
            console.warn(`[remote-config] Could not add the tag: ` + `A tag must be a non-empty string.`);
            return;
        }
        this.tags.add(normalizedTag);
    }
    removeCustomTag(tag) {
        const normalizedTag = RemoteConfig.normalizeTag(tag);
        if (normalizedTag.length === 0) {
            console.warn(`[remote-config] Could not delete the tag: ` + `A tag must be a non-empty string.`);
            return false;
        }
        return this.tags.delete(normalizedTag);
    }
    clearCustomTags() {
        this.tags.clear();
    }
    fetch() {
        return __awaiter(this, void 0, void 0, function* () {
            const projectName = this.context.projectName;
            const serviceRoot = this.context.serviceRoot;
            const url = `${serviceRoot}/client-api/v1/projects/${projectName}/parameters`;
            const headers = {
                'Application-Name': this.context.appName,
                'Application-Version': this.context.appVersion,
                'Custom-Tags': Array.from(this.tags).join(','),
            };
            try {
                this.fetchedConfig = yield this.configFetcher.fetch({
                    headers,
                    url,
                });
            }
            catch (error) {
                console.warn(`[remote-config] Could not fetch the remote config:`, error);
            }
        });
    }
    fetchAndActivate() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.fetch();
            this.activate();
        });
    }
    getValue(parameterName) {
        const remoteValue = this.getRemoteValue(parameterName);
        if (remoteValue instanceof ParseSuccess) {
            return remoteValue.result;
        }
        if (remoteValue instanceof ParseFailure) {
            console.warn(`[remote-config] Failed to parse the remote value ` +
                `of the parameter "${parameterName}". ` +
                `Reason: ${remoteValue.reason}`);
        }
        return this.getDefaultValue(parameterName);
    }
    getDefaultValue(parameterName) {
        if (hasProperty(this.defaultConfig, parameterName)) {
            const defaultValue = this.defaultConfig[parameterName];
            return isNullOrUndefined(defaultValue) ? null : defaultValue;
        }
        console.warn(`[remote-config] Could not get a default value. ` +
            `The parameter '${parameterName}' is not present in the default config.`);
        return null;
    }
    getRawRemoteValue(parameterName) {
        if (this.activatedConfig && hasProperty(this.activatedConfig, parameterName)) {
            return this.activatedConfig[parameterName];
        }
        return undefined;
    }
    getRemoteValue(parameterName) {
        const rawRemoteValue = this.getRawRemoteValue(parameterName);
        return !isUndefined(rawRemoteValue) ? this.parseRemoteValue(rawRemoteValue, parameterName) : null;
    }
    parseRemoteValue(rawRemoteValue, parameterName) {
        const valueType = this.extractedType.properties[parameterName];
        if (!valueType) {
            return ParseFailure.create(ParseError.UnknownPropertyType);
        }
        return valueParser.parseAs(rawRemoteValue, valueType);
    }
}
//# sourceMappingURL=data:application/json;base64,