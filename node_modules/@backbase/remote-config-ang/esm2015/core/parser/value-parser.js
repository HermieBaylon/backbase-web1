import { ArrayValueTypeDescriptor, ObjectValueTypeDescriptor, ValueType, } from '../type-extractor/extracted-value-types';
import { isArray, isBoolean, isNull, isNumber, isObject, isString } from '../utils/is';
import { ParseFailure, ParseSuccess } from './parse-result';
export var ParseError;
(function (ParseError) {
    ParseError["TypeMismatch"] = "TypeMismatch";
    ParseError["UnknownPropertyType"] = "UnknownPropertyType";
})(ParseError || (ParseError = {}));
export class ValueParser {
    parseAs(rawValue, valueType) {
        if (valueType instanceof ArrayValueTypeDescriptor) {
            return this.parseArray(rawValue);
        }
        if (valueType instanceof ObjectValueTypeDescriptor) {
            return this.parseObjectAs(rawValue, valueType);
        }
        return this.parsePrimitiveAs(rawValue, valueType);
    }
    parseArray(value) {
        return isArray(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
    }
    parseObjectAs(rawValue, valueType) {
        if (!isObject(rawValue)) {
            return ParseFailure.create(ParseError.TypeMismatch);
        }
        const objectRawValue = rawValue;
        const result = {};
        for (const propertyName of Object.keys(valueType.properties)) {
            const propertyValueType = valueType.properties[propertyName];
            const propertyValueParseResult = this.parseAs(objectRawValue[propertyName], propertyValueType);
            if (propertyValueParseResult instanceof ParseFailure) {
                return ParseFailure.create(propertyValueParseResult.reason);
            }
            result[propertyName] = propertyValueParseResult.result;
        }
        return ParseSuccess.create(result);
    }
    parsePrimitiveAs(value, valueType) {
        if (valueType.type === ValueType.Boolean) {
            return isBoolean(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
        }
        if (valueType.type === ValueType.Number) {
            return isNumber(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
        }
        if (valueType.type === ValueType.Null) {
            return isNull(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
        }
        return isString(value) ? ParseSuccess.create(value) : ParseFailure.create(ParseError.TypeMismatch);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcmVtb3RlLWNvbmZpZy1hbmcvc3JjL2NvcmUvcGFyc2VyL3ZhbHVlLXBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsd0JBQXdCLEVBQ3hCLHlCQUF5QixFQUV6QixTQUFTLEdBRVYsTUFBTSx5Q0FBeUMsQ0FBQztBQUNqRCxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkYsT0FBTyxFQUFFLFlBQVksRUFBZSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU16RSxNQUFNLENBQU4sSUFBWSxVQUdYO0FBSEQsV0FBWSxVQUFVO0lBQ3BCLDJDQUE2QixDQUFBO0lBQzdCLHlEQUEyQyxDQUFBO0FBQzdDLENBQUMsRUFIVyxVQUFVLEtBQVYsVUFBVSxRQUdyQjtBQUVELE1BQU0sT0FBTyxXQUFXO0lBQ3RCLE9BQU8sQ0FBSSxRQUFpQixFQUFFLFNBQThCO1FBQzFELElBQUksU0FBUyxZQUFZLHdCQUF3QixFQUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBSSxRQUFRLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksU0FBUyxZQUFZLHlCQUF5QixFQUFFO1lBQ2xELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBSSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBSSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVPLFVBQVUsQ0FBSSxLQUFjO1FBQ2xDLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRU8sYUFBYSxDQUFJLFFBQWlCLEVBQUUsU0FBb0M7UUFDOUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN2QixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsTUFBTSxjQUFjLEdBQUcsUUFBeUIsQ0FBQztRQUNqRCxNQUFNLE1BQU0sR0FBRyxFQUFtQixDQUFDO1FBRW5DLEtBQUssTUFBTSxZQUFZLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDNUQsTUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzdELE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBSSxjQUFjLENBQUMsWUFBWSxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUVsRyxJQUFJLHdCQUF3QixZQUFZLFlBQVksRUFBRTtnQkFDcEQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzdEO1lBRUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLHdCQUF3QixDQUFDLE1BQU0sQ0FBQztTQUN4RDtRQUVELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxNQUFzQixDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVPLGdCQUFnQixDQUFJLEtBQWMsRUFBRSxTQUF1QztRQUNqRixJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLE9BQU8sRUFBRTtZQUN4QyxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDMUc7UUFFRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUN2QyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDekc7UUFFRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtZQUNyQyxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDdkc7UUFFRCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUcsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXJyYXlWYWx1ZVR5cGVEZXNjcmlwdG9yLFxuICBPYmplY3RWYWx1ZVR5cGVEZXNjcmlwdG9yLFxuICBQcmltaXRpdmVWYWx1ZVR5cGVEZXNjcmlwdG9yLFxuICBWYWx1ZVR5cGUsXG4gIFZhbHVlVHlwZURlc2NyaXB0b3IsXG59IGZyb20gJy4uL3R5cGUtZXh0cmFjdG9yL2V4dHJhY3RlZC12YWx1ZS10eXBlcyc7XG5pbXBvcnQgeyBpc0FycmF5LCBpc0Jvb2xlYW4sIGlzTnVsbCwgaXNOdW1iZXIsIGlzT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gJy4uL3V0aWxzL2lzJztcbmltcG9ydCB7IFBhcnNlRmFpbHVyZSwgUGFyc2VSZXN1bHQsIFBhcnNlU3VjY2VzcyB9IGZyb20gJy4vcGFyc2UtcmVzdWx0JztcblxuaW50ZXJmYWNlIFVua25vd25PYmplY3Qge1xuICBbcHJvcGVydHk6IHN0cmluZ106IHVua25vd247XG59XG5cbmV4cG9ydCBlbnVtIFBhcnNlRXJyb3Ige1xuICBUeXBlTWlzbWF0Y2ggPSAnVHlwZU1pc21hdGNoJyxcbiAgVW5rbm93blByb3BlcnR5VHlwZSA9ICdVbmtub3duUHJvcGVydHlUeXBlJyxcbn1cblxuZXhwb3J0IGNsYXNzIFZhbHVlUGFyc2VyIHtcbiAgcGFyc2VBczxUPihyYXdWYWx1ZTogdW5rbm93biwgdmFsdWVUeXBlOiBWYWx1ZVR5cGVEZXNjcmlwdG9yKTogUGFyc2VSZXN1bHQ8VCwgUGFyc2VFcnJvcj4ge1xuICAgIGlmICh2YWx1ZVR5cGUgaW5zdGFuY2VvZiBBcnJheVZhbHVlVHlwZURlc2NyaXB0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyYXk8VD4ocmF3VmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZVR5cGUgaW5zdGFuY2VvZiBPYmplY3RWYWx1ZVR5cGVEZXNjcmlwdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZU9iamVjdEFzPFQ+KHJhd1ZhbHVlLCB2YWx1ZVR5cGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlUHJpbWl0aXZlQXM8VD4ocmF3VmFsdWUsIHZhbHVlVHlwZSk7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlQXJyYXk8VD4odmFsdWU6IHVua25vd24pOiBQYXJzZVJlc3VsdDxULCBQYXJzZUVycm9yPiB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gUGFyc2VTdWNjZXNzLmNyZWF0ZSh2YWx1ZSBhcyBUKSA6IFBhcnNlRmFpbHVyZS5jcmVhdGUoUGFyc2VFcnJvci5UeXBlTWlzbWF0Y2gpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZU9iamVjdEFzPFQ+KHJhd1ZhbHVlOiB1bmtub3duLCB2YWx1ZVR5cGU6IE9iamVjdFZhbHVlVHlwZURlc2NyaXB0b3IpOiBQYXJzZVJlc3VsdDxULCBQYXJzZUVycm9yPiB7XG4gICAgaWYgKCFpc09iamVjdChyYXdWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBQYXJzZUZhaWx1cmUuY3JlYXRlKFBhcnNlRXJyb3IuVHlwZU1pc21hdGNoKTtcbiAgICB9XG5cbiAgICBjb25zdCBvYmplY3RSYXdWYWx1ZSA9IHJhd1ZhbHVlIGFzIFVua25vd25PYmplY3Q7XG4gICAgY29uc3QgcmVzdWx0ID0ge30gYXMgVW5rbm93bk9iamVjdDtcblxuICAgIGZvciAoY29uc3QgcHJvcGVydHlOYW1lIG9mIE9iamVjdC5rZXlzKHZhbHVlVHlwZS5wcm9wZXJ0aWVzKSkge1xuICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZVR5cGUgPSB2YWx1ZVR5cGUucHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZVBhcnNlUmVzdWx0ID0gdGhpcy5wYXJzZUFzPFQ+KG9iamVjdFJhd1ZhbHVlW3Byb3BlcnR5TmFtZV0sIHByb3BlcnR5VmFsdWVUeXBlKTtcblxuICAgICAgaWYgKHByb3BlcnR5VmFsdWVQYXJzZVJlc3VsdCBpbnN0YW5jZW9mIFBhcnNlRmFpbHVyZSkge1xuICAgICAgICByZXR1cm4gUGFyc2VGYWlsdXJlLmNyZWF0ZShwcm9wZXJ0eVZhbHVlUGFyc2VSZXN1bHQucmVhc29uKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlUGFyc2VSZXN1bHQucmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBQYXJzZVN1Y2Nlc3MuY3JlYXRlKHJlc3VsdCBhcyB1bmtub3duIGFzIFQpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVByaW1pdGl2ZUFzPFQ+KHZhbHVlOiB1bmtub3duLCB2YWx1ZVR5cGU6IFByaW1pdGl2ZVZhbHVlVHlwZURlc2NyaXB0b3IpOiBQYXJzZVJlc3VsdDxULCBQYXJzZUVycm9yPiB7XG4gICAgaWYgKHZhbHVlVHlwZS50eXBlID09PSBWYWx1ZVR5cGUuQm9vbGVhbikge1xuICAgICAgcmV0dXJuIGlzQm9vbGVhbih2YWx1ZSkgPyBQYXJzZVN1Y2Nlc3MuY3JlYXRlKHZhbHVlIGFzIFQpIDogUGFyc2VGYWlsdXJlLmNyZWF0ZShQYXJzZUVycm9yLlR5cGVNaXNtYXRjaCk7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlVHlwZS50eXBlID09PSBWYWx1ZVR5cGUuTnVtYmVyKSB7XG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpID8gUGFyc2VTdWNjZXNzLmNyZWF0ZSh2YWx1ZSBhcyBUKSA6IFBhcnNlRmFpbHVyZS5jcmVhdGUoUGFyc2VFcnJvci5UeXBlTWlzbWF0Y2gpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZVR5cGUudHlwZSA9PT0gVmFsdWVUeXBlLk51bGwpIHtcbiAgICAgIHJldHVybiBpc051bGwodmFsdWUpID8gUGFyc2VTdWNjZXNzLmNyZWF0ZSh2YWx1ZSBhcyBUKSA6IFBhcnNlRmFpbHVyZS5jcmVhdGUoUGFyc2VFcnJvci5UeXBlTWlzbWF0Y2gpO1xuICAgIH1cblxuICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBQYXJzZVN1Y2Nlc3MuY3JlYXRlKHZhbHVlIGFzIFQpIDogUGFyc2VGYWlsdXJlLmNyZWF0ZShQYXJzZUVycm9yLlR5cGVNaXNtYXRjaCk7XG4gIH1cbn1cbiJdfQ==