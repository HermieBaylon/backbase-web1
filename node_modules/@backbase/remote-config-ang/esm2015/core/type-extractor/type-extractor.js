import { isArray, isBoolean, isNull, isNumber, isObject, isString, isUndefined } from '../utils/is';
import { ArrayValueTypeDescriptor, ObjectValueTypeDescriptor, PrimitiveValueTypeDescriptor, ValueType, } from './extracted-value-types';
export class TypeExtractor {
    static throwInvalidSourceError(source) {
        throw new TypeError('[remote-config] Could not extract the types: Expected to receive an object, ' + `but got ${typeof source}`);
    }
    static extractObjectType(value) {
        const properties = {};
        for (const propertyName of Object.keys(value)) {
            const propertyValue = value[propertyName];
            const propertyValueType = TypeExtractor.extractType(propertyValue);
            if (propertyValueType) {
                properties[propertyName] = propertyValueType;
            }
        }
        return new ObjectValueTypeDescriptor(properties);
    }
    static extractType(value) {
        if (isUndefined(value)) {
            return null;
        }
        if (isArray(value)) {
            return new ArrayValueTypeDescriptor();
        }
        if (isBoolean(value)) {
            return new PrimitiveValueTypeDescriptor(ValueType.Boolean);
        }
        if (isNull(value)) {
            return new PrimitiveValueTypeDescriptor(ValueType.Null);
        }
        if (isNumber(value)) {
            return new PrimitiveValueTypeDescriptor(ValueType.Number);
        }
        if (isString(value)) {
            return new PrimitiveValueTypeDescriptor(ValueType.String);
        }
        return TypeExtractor.extractObjectType(value);
    }
    extractTypes(source) {
        if (!isObject(source)) {
            TypeExtractor.throwInvalidSourceError(source);
        }
        return TypeExtractor.extractObjectType(source);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1leHRyYWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9yZW1vdGUtY29uZmlnLWFuZy9zcmMvY29yZS90eXBlLWV4dHJhY3Rvci90eXBlLWV4dHJhY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BHLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIseUJBQXlCLEVBRXpCLDRCQUE0QixFQUM1QixTQUFTLEdBRVYsTUFBTSx5QkFBeUIsQ0FBQztBQU1qQyxNQUFNLE9BQU8sYUFBYTtJQUNoQixNQUFNLENBQUMsdUJBQXVCLENBQUMsTUFBZTtRQUNwRCxNQUFNLElBQUksU0FBUyxDQUNqQiw4RUFBOEUsR0FBRyxXQUFXLE9BQU8sTUFBTSxFQUFFLENBQzVHLENBQUM7SUFDSixDQUFDO0lBRU8sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQWtCO1FBQ2pELE1BQU0sVUFBVSxHQUF3QyxFQUFFLENBQUM7UUFFM0QsS0FBSyxNQUFNLFlBQVksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzdDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMxQyxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFbkUsSUFBSSxpQkFBaUIsRUFBRTtnQkFDckIsVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLGlCQUFpQixDQUFDO2FBQzlDO1NBQ0Y7UUFFRCxPQUFPLElBQUkseUJBQXlCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVPLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBYztRQUN2QyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxJQUFJLHdCQUF3QixFQUFFLENBQUM7U0FDdkM7UUFFRCxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQixPQUFPLElBQUksNEJBQTRCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzVEO1FBRUQsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakIsT0FBTyxJQUFJLDRCQUE0QixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN6RDtRQUVELElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0Q7UUFFRCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuQixPQUFPLElBQUksNEJBQTRCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNEO1FBRUQsT0FBTyxhQUFhLENBQUMsaUJBQWlCLENBQUMsS0FBb0IsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxZQUFZLENBQUMsTUFBbUI7UUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNyQixhQUFhLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDL0M7UUFFRCxPQUFPLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FycmF5LCBpc0Jvb2xlYW4sIGlzTnVsbCwgaXNOdW1iZXIsIGlzT2JqZWN0LCBpc1N0cmluZywgaXNVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscy9pcyc7XG5pbXBvcnQge1xuICBBcnJheVZhbHVlVHlwZURlc2NyaXB0b3IsXG4gIE9iamVjdFZhbHVlVHlwZURlc2NyaXB0b3IsXG4gIE9iamVjdFZhbHVlVHlwZURlc2NyaXB0b3JQcm9wZXJ0aWVzLFxuICBQcmltaXRpdmVWYWx1ZVR5cGVEZXNjcmlwdG9yLFxuICBWYWx1ZVR5cGUsXG4gIFZhbHVlVHlwZURlc2NyaXB0b3IsXG59IGZyb20gJy4vZXh0cmFjdGVkLXZhbHVlLXR5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RWYWx1ZSB7XG4gIFtwcm9wZXJ0eTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuZXhwb3J0IGNsYXNzIFR5cGVFeHRyYWN0b3Ige1xuICBwcml2YXRlIHN0YXRpYyB0aHJvd0ludmFsaWRTb3VyY2VFcnJvcihzb3VyY2U6IHVua25vd24pIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1tyZW1vdGUtY29uZmlnXSBDb3VsZCBub3QgZXh0cmFjdCB0aGUgdHlwZXM6IEV4cGVjdGVkIHRvIHJlY2VpdmUgYW4gb2JqZWN0LCAnICsgYGJ1dCBnb3QgJHt0eXBlb2Ygc291cmNlfWAsXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGV4dHJhY3RPYmplY3RUeXBlKHZhbHVlOiBPYmplY3RWYWx1ZSk6IE9iamVjdFZhbHVlVHlwZURlc2NyaXB0b3Ige1xuICAgIGNvbnN0IHByb3BlcnRpZXM6IE9iamVjdFZhbHVlVHlwZURlc2NyaXB0b3JQcm9wZXJ0aWVzID0ge307XG5cbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5TmFtZSBvZiBPYmplY3Qua2V5cyh2YWx1ZSkpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSB2YWx1ZVtwcm9wZXJ0eU5hbWVdO1xuICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZVR5cGUgPSBUeXBlRXh0cmFjdG9yLmV4dHJhY3RUeXBlKHByb3BlcnR5VmFsdWUpO1xuXG4gICAgICBpZiAocHJvcGVydHlWYWx1ZVR5cGUpIHtcbiAgICAgICAgcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydHlWYWx1ZVR5cGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBPYmplY3RWYWx1ZVR5cGVEZXNjcmlwdG9yKHByb3BlcnRpZXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZXh0cmFjdFR5cGUodmFsdWU6IHVua25vd24pOiBWYWx1ZVR5cGVEZXNjcmlwdG9yIHwgbnVsbCB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IEFycmF5VmFsdWVUeXBlRGVzY3JpcHRvcigpO1xuICAgIH1cblxuICAgIGlmIChpc0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IFByaW1pdGl2ZVZhbHVlVHlwZURlc2NyaXB0b3IoVmFsdWVUeXBlLkJvb2xlYW4pO1xuICAgIH1cblxuICAgIGlmIChpc051bGwodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IFByaW1pdGl2ZVZhbHVlVHlwZURlc2NyaXB0b3IoVmFsdWVUeXBlLk51bGwpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBuZXcgUHJpbWl0aXZlVmFsdWVUeXBlRGVzY3JpcHRvcihWYWx1ZVR5cGUuTnVtYmVyKTtcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IFByaW1pdGl2ZVZhbHVlVHlwZURlc2NyaXB0b3IoVmFsdWVUeXBlLlN0cmluZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFR5cGVFeHRyYWN0b3IuZXh0cmFjdE9iamVjdFR5cGUodmFsdWUgYXMgT2JqZWN0VmFsdWUpO1xuICB9XG5cbiAgZXh0cmFjdFR5cGVzKHNvdXJjZTogT2JqZWN0VmFsdWUpOiBPYmplY3RWYWx1ZVR5cGVEZXNjcmlwdG9yIHtcbiAgICBpZiAoIWlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIFR5cGVFeHRyYWN0b3IudGhyb3dJbnZhbGlkU291cmNlRXJyb3Ioc291cmNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gVHlwZUV4dHJhY3Rvci5leHRyYWN0T2JqZWN0VHlwZShzb3VyY2UpO1xuICB9XG59XG4iXX0=