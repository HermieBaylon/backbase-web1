import { Inject, Injectable, InjectionToken } from '@angular/core';
import { RemoteConfig } from '../core/remote-config';
import { RemoteConfigFetcherService } from './remote-config-fetcher.service';
export const RemoteConfigConfigurationToken = new InjectionToken('@backbase/remote-config-ang: RemoteConfigConfigurationToken');
export class RemoteConfigService {
    constructor(configuration, configFetcher) {
        this.configuration = configuration;
        this.configFetcher = configFetcher;
        this.remoteConfigClient = new RemoteConfig(this.configFetcher, {
            appName: configuration.appName,
            appVersion: configuration.appVersion,
            projectName: configuration.projectName,
            serviceRoot: configuration.serviceRoot,
        }, configuration.defaults);
        this.disabled = Boolean(configuration.disabled);
    }
    addCustomTag(tag) {
        this.remoteConfigClient.addCustomTag(tag);
    }
    clearCustomTags() {
        this.remoteConfigClient.clearCustomTags();
    }
    getValue(parameterName) {
        return this.remoteConfigClient.getValue(parameterName);
    }
    fetchAndActivate() {
        if (this.disabled) {
            return Promise.resolve();
        }
        return this.remoteConfigClient.fetchAndActivate();
    }
    removeCustomTag(tag) {
        return this.remoteConfigClient.removeCustomTag(tag);
    }
}
RemoteConfigService.decorators = [
    { type: Injectable }
];
RemoteConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [RemoteConfigConfigurationToken,] }] },
    { type: RemoteConfigFetcherService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcmVtb3RlLWNvbmZpZy1hbmcvc3JjL2FuZ3VsYXIvcmVtb3RlLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFckQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHN0UsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsSUFBSSxjQUFjLENBQzlELDZEQUE2RCxDQUM5RCxDQUFDO0FBR0YsTUFBTSxPQUFPLG1CQUFtQjtJQUs5QixZQUMyRCxhQUEyQyxFQUNuRixhQUE0QztRQURKLGtCQUFhLEdBQWIsYUFBYSxDQUE4QjtRQUNuRixrQkFBYSxHQUFiLGFBQWEsQ0FBK0I7UUFFN0QsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksWUFBWSxDQUN4QyxJQUFJLENBQUMsYUFBYSxFQUNsQjtZQUNFLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTztZQUM5QixVQUFVLEVBQUUsYUFBYSxDQUFDLFVBQVU7WUFDcEMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxXQUFXO1lBQ3RDLFdBQVcsRUFBRSxhQUFhLENBQUMsV0FBVztTQUN2QyxFQUNELGFBQWEsQ0FBQyxRQUFRLENBQ3ZCLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELFlBQVksQ0FBQyxHQUFXO1FBQ3RCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsa0JBQWtCLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELFFBQVEsQ0FBNkIsYUFBZ0I7UUFDbkQsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBUyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDMUI7UUFFRCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3BELENBQUM7SUFFRCxlQUFlLENBQUMsR0FBVztRQUN6QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7O1lBOUNGLFVBQVU7Ozs0Q0FPTixNQUFNLFNBQUMsOEJBQThCO1lBZGpDLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlbW90ZUNvbmZpZyB9IGZyb20gJy4uL2NvcmUvcmVtb3RlLWNvbmZpZyc7XG5pbXBvcnQgeyBSZW1vdGVDb25maWdQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vY29yZS9yZW1vdGUtY29uZmlnLnR5cGVzJztcbmltcG9ydCB7IFJlbW90ZUNvbmZpZ0ZldGNoZXJTZXJ2aWNlIH0gZnJvbSAnLi9yZW1vdGUtY29uZmlnLWZldGNoZXIuc2VydmljZSc7XG5pbXBvcnQgeyBSZW1vdGVDb25maWdDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9yZW1vdGUtY29uZmlnLnR5cGVzJztcblxuZXhwb3J0IGNvbnN0IFJlbW90ZUNvbmZpZ0NvbmZpZ3VyYXRpb25Ub2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxSZW1vdGVDb25maWdDb25maWd1cmF0aW9uPGFueT4+KFxuICAnQGJhY2tiYXNlL3JlbW90ZS1jb25maWctYW5nOiBSZW1vdGVDb25maWdDb25maWd1cmF0aW9uVG9rZW4nLFxuKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlbW90ZUNvbmZpZ1NlcnZpY2U8VCBleHRlbmRzIFJlbW90ZUNvbmZpZ1BhcmFtZXRlcnM+IHtcbiAgcHJpdmF0ZSByZWFkb25seSByZW1vdGVDb25maWdDbGllbnQ6IFJlbW90ZUNvbmZpZzxUPjtcblxuICBwcml2YXRlIHJlYWRvbmx5IGRpc2FibGVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUmVtb3RlQ29uZmlnQ29uZmlndXJhdGlvblRva2VuKSBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ3VyYXRpb246IFJlbW90ZUNvbmZpZ0NvbmZpZ3VyYXRpb248VD4sXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb25maWdGZXRjaGVyOiBSZW1vdGVDb25maWdGZXRjaGVyU2VydmljZTxUPixcbiAgKSB7XG4gICAgdGhpcy5yZW1vdGVDb25maWdDbGllbnQgPSBuZXcgUmVtb3RlQ29uZmlnPFQ+KFxuICAgICAgdGhpcy5jb25maWdGZXRjaGVyLFxuICAgICAge1xuICAgICAgICBhcHBOYW1lOiBjb25maWd1cmF0aW9uLmFwcE5hbWUsXG4gICAgICAgIGFwcFZlcnNpb246IGNvbmZpZ3VyYXRpb24uYXBwVmVyc2lvbixcbiAgICAgICAgcHJvamVjdE5hbWU6IGNvbmZpZ3VyYXRpb24ucHJvamVjdE5hbWUsXG4gICAgICAgIHNlcnZpY2VSb290OiBjb25maWd1cmF0aW9uLnNlcnZpY2VSb290LFxuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYXRpb24uZGVmYXVsdHMsXG4gICAgKTtcblxuICAgIHRoaXMuZGlzYWJsZWQgPSBCb29sZWFuKGNvbmZpZ3VyYXRpb24uZGlzYWJsZWQpO1xuICB9XG5cbiAgYWRkQ3VzdG9tVGFnKHRhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdGVDb25maWdDbGllbnQuYWRkQ3VzdG9tVGFnKHRhZyk7XG4gIH1cblxuICBjbGVhckN1c3RvbVRhZ3MoKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdGVDb25maWdDbGllbnQuY2xlYXJDdXN0b21UYWdzKCk7XG4gIH1cblxuICBnZXRWYWx1ZTxLIGV4dGVuZHMga2V5b2YgVCAmIHN0cmluZz4ocGFyYW1ldGVyTmFtZTogSyk6IFRbS10ge1xuICAgIHJldHVybiB0aGlzLnJlbW90ZUNvbmZpZ0NsaWVudC5nZXRWYWx1ZShwYXJhbWV0ZXJOYW1lKSBhcyBUW0tdO1xuICB9XG5cbiAgZmV0Y2hBbmRBY3RpdmF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbW90ZUNvbmZpZ0NsaWVudC5mZXRjaEFuZEFjdGl2YXRlKCk7XG4gIH1cblxuICByZW1vdmVDdXN0b21UYWcodGFnOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdGVDb25maWdDbGllbnQucmVtb3ZlQ3VzdG9tVGFnKHRhZyk7XG4gIH1cbn1cbiJdfQ==