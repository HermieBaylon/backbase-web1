import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

var GetAuthorizedUserItem;
(function (GetAuthorizedUserItem) {
    GetAuthorizedUserItem.StatusEnum = {
        ACTIVE: 'ACTIVE',
        AWAITINGREGISTRATION: 'AWAITING_REGISTRATION',
        PAUSED: 'PAUSED'
    };
})(GetAuthorizedUserItem || (GetAuthorizedUserItem = {}));

const AUTHORIZED_USER_BASE_PATH = new InjectionToken('AUTHORIZED_USER_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class AuthorizedUserConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module AuthorizedUserConfiguration');

class AuthorizedUserApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('AuthorizedUserApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: AuthorizedUserApiModule,
            providers: [{ provide: AuthorizedUserConfiguration, useFactory: configurationFactory }]
        };
    }
}
AuthorizedUserApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserApiModule, deps: [{ token: AuthorizedUserApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: AuthorizedUserConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
AuthorizedUserApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserApiModule });
AuthorizedUserApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: AuthorizedUserApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: AuthorizedUserConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class AuthorizedUserService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AuthorizedUserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postAuthorizedUser = requestParameters["postAuthorizedUser"];
        if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {
            throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, _postAuthorizedUser, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createAuthorizedUserUrl(requestParameters) {
        const _postAuthorizedUser = requestParameters["postAuthorizedUser"];
        if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {
            throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;
    }
    deleteAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteAuthorizedUserUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`;
    }
    getAuthorizedUsers(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAuthorizedUsersUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;
    }
    getPermissionsByAuthorizedUserId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPermissionsByAuthorizedUserIdUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;
    }
    updatePermissionsForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        const _putAuthorizedUserPermissions = requestParameters["putAuthorizedUserPermissions"];
        if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {
            throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, _putAuthorizedUserPermissions, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updatePermissionsForAuthorizedUserUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        const _putAuthorizedUserPermissions = requestParameters["putAuthorizedUserPermissions"];
        if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {
            throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;
    }
    updateStatusForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        const _updateAuthorizedUserStatus = requestParameters["updateAuthorizedUserStatus"];
        if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {
            throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`, _updateAuthorizedUserStatus, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateStatusForAuthorizedUserUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        const _updateAuthorizedUserStatus = requestParameters["updateAuthorizedUserStatus"];
        if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {
            throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`;
    }
}
AuthorizedUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserService, deps: [{ token: i1.HttpClient }, { token: AUTHORIZED_USER_BASE_PATH, optional: true }, { token: AuthorizedUserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuthorizedUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AUTHORIZED_USER_BASE_PATH]
                }] }, { type: AuthorizedUserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const AuthorizedUserServiceCreateAuthorizedUserMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/authorized-users",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const AuthorizedUserServiceDeleteAuthorizedUserMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const AuthorizedUserServiceGetAuthorizedUsersMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/authorized-users",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "376069ae-f628-4569-8bb0-ec1fce83ebe9",
                        "said": "53251f6b-f081-4e22-a977-93efaa47e449",
                        "firstName": "John",
                        "lastName": "Doe",
                        "email": "john.doe@email.com",
                        "mobileNumber": "+44 012345 67890",
                        "username": "john.doe.145764",
                        "status": "AWAITING_REGISTRATION",
                        "permissions": [{
                                "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "level": "BASIC-001"
                            }, {
                                "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                                "level": "PARTIAL-002"
                            }, {
                                "accountId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "level": "FULL-003"
                            }]
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const AuthorizedUserServiceGetPermissionsByAuthorizedUserIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                        "level": "BASIC-001"
                    }, {
                        "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                        "level": "PARTIAL-002"
                    }, {
                        "accountId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                        "level": "FULL-003"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const AuthorizedUserServiceUpdatePermissionsForAuthorizedUserMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const AuthorizedUserServiceUpdateStatusForAuthorizedUserMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}/status",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const AuthorizedUserServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/users/me/authorized-users",
        method: "POST",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/authorized-users",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "376069ae-f628-4569-8bb0-ec1fce83ebe9",
                        "said": "53251f6b-f081-4e22-a977-93efaa47e449",
                        "firstName": "John",
                        "lastName": "Doe",
                        "email": "john.doe@email.com",
                        "mobileNumber": "+44 012345 67890",
                        "username": "john.doe.145764",
                        "status": "AWAITING_REGISTRATION",
                        "permissions": [{
                                "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                                "level": "BASIC-001"
                            }, {
                                "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                                "level": "PARTIAL-002"
                            }, {
                                "accountId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                                "level": "FULL-003"
                            }]
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4691",
                        "level": "BASIC-001"
                    }, {
                        "accountId": "1cdb2224-8926-4b4d-a99f-1c9dfbbb4692",
                        "level": "PARTIAL-002"
                    }, {
                        "accountId": "3cdb2224-8926-4b4d-a99f-1c9dfbbb4600",
                        "level": "FULL-003"
                    }]
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}/permissions",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/users/me/authorized-users/{authorizedUserId}/status",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { AUTHORIZED_USER_BASE_PATH, AuthorizedUserApiModule, AuthorizedUserConfiguration, AuthorizedUserService, AuthorizedUserServiceCreateAuthorizedUserMocksProvider, AuthorizedUserServiceDeleteAuthorizedUserMocksProvider, AuthorizedUserServiceGetAuthorizedUsersMocksProvider, AuthorizedUserServiceGetPermissionsByAuthorizedUserIdMocksProvider, AuthorizedUserServiceMocksProvider, AuthorizedUserServiceUpdatePermissionsForAuthorizedUserMocksProvider, AuthorizedUserServiceUpdateStatusForAuthorizedUserMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, GetAuthorizedUserItem };
//# sourceMappingURL=backbase-authorized-user-http-ang.js.map
