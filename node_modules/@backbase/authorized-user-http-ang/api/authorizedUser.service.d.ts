import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AccountsAndPermissions } from '../model/models';
import { GetAuthorizedUserItem } from '../model/models';
import { PostAuthorizedUser } from '../model/models';
import { PutAuthorizedUserPermissions } from '../model/models';
import { UpdateAuthorizedUserStatus } from '../model/models';
import { AuthorizedUserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateAuthorizedUserRequestParams {
    ["postAuthorizedUser"]: PostAuthorizedUser;
}
export interface DeleteAuthorizedUserRequestParams {
    ["authorizedUserId"]: string;
}
export interface GetPermissionsByAuthorizedUserIdRequestParams {
    ["authorizedUserId"]: string;
}
export interface UpdatePermissionsForAuthorizedUserRequestParams {
    ["authorizedUserId"]: string;
    ["putAuthorizedUserPermissions"]: PutAuthorizedUserPermissions;
}
export interface UpdateStatusForAuthorizedUserRequestParams {
    ["authorizedUserId"]: string;
    ["updateAuthorizedUserStatus"]: UpdateAuthorizedUserStatus;
}
export declare class AuthorizedUserService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: AuthorizedUserConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: AuthorizedUserConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createAuthorizedUser(requestParameters: CreateAuthorizedUserRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    createAuthorizedUser(requestParameters: CreateAuthorizedUserRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    createAuthorizedUser(requestParameters: CreateAuthorizedUserRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    createAuthorizedUserUrl(requestParameters: CreateAuthorizedUserRequestParams): string;
    deleteAuthorizedUser(requestParameters: DeleteAuthorizedUserRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteAuthorizedUser(requestParameters: DeleteAuthorizedUserRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteAuthorizedUser(requestParameters: DeleteAuthorizedUserRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteAuthorizedUserUrl(requestParameters: DeleteAuthorizedUserRequestParams): string;
    getAuthorizedUsers(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<GetAuthorizedUserItem>>;
    getAuthorizedUsers(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<GetAuthorizedUserItem>>>;
    getAuthorizedUsers(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<GetAuthorizedUserItem>>>;
    getAuthorizedUsersUrl(): string;
    getPermissionsByAuthorizedUserId(requestParameters: GetPermissionsByAuthorizedUserIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<AccountsAndPermissions>>;
    getPermissionsByAuthorizedUserId(requestParameters: GetPermissionsByAuthorizedUserIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<AccountsAndPermissions>>>;
    getPermissionsByAuthorizedUserId(requestParameters: GetPermissionsByAuthorizedUserIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<AccountsAndPermissions>>>;
    getPermissionsByAuthorizedUserIdUrl(requestParameters: GetPermissionsByAuthorizedUserIdRequestParams): string;
    updatePermissionsForAuthorizedUser(requestParameters: UpdatePermissionsForAuthorizedUserRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    updatePermissionsForAuthorizedUser(requestParameters: UpdatePermissionsForAuthorizedUserRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    updatePermissionsForAuthorizedUser(requestParameters: UpdatePermissionsForAuthorizedUserRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    updatePermissionsForAuthorizedUserUrl(requestParameters: UpdatePermissionsForAuthorizedUserRequestParams): string;
    updateStatusForAuthorizedUser(requestParameters: UpdateStatusForAuthorizedUserRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    updateStatusForAuthorizedUser(requestParameters: UpdateStatusForAuthorizedUserRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    updateStatusForAuthorizedUser(requestParameters: UpdateStatusForAuthorizedUserRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    updateStatusForAuthorizedUserUrl(requestParameters: UpdateStatusForAuthorizedUserRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthorizedUserService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthorizedUserService>;
}
