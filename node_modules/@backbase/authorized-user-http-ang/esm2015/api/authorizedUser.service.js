import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { AUTHORIZED_USER_BASE_PATH } from '../variables';
import { AuthorizedUserConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class AuthorizedUserService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new AuthorizedUserConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _postAuthorizedUser = requestParameters["postAuthorizedUser"];
        if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {
            throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, _postAuthorizedUser, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createAuthorizedUserUrl(requestParameters) {
        const _postAuthorizedUser = requestParameters["postAuthorizedUser"];
        if (_postAuthorizedUser === null || _postAuthorizedUser === undefined) {
            throw new Error('Required parameter postAuthorizedUser was null or undefined when calling createAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;
    }
    deleteAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteAuthorizedUserUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling deleteAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}`;
    }
    getAuthorizedUsers(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getAuthorizedUsersUrl() {
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users`;
    }
    getPermissionsByAuthorizedUserId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPermissionsByAuthorizedUserIdUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling getPermissionsByAuthorizedUserId.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;
    }
    updatePermissionsForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        const _putAuthorizedUserPermissions = requestParameters["putAuthorizedUserPermissions"];
        if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {
            throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`, _putAuthorizedUserPermissions, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updatePermissionsForAuthorizedUserUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        const _putAuthorizedUserPermissions = requestParameters["putAuthorizedUserPermissions"];
        if (_putAuthorizedUserPermissions === null || _putAuthorizedUserPermissions === undefined) {
            throw new Error('Required parameter putAuthorizedUserPermissions was null or undefined when calling updatePermissionsForAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/permissions`;
    }
    updateStatusForAuthorizedUser(requestParameters, observe = 'body', reportProgress = false, options) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        const _updateAuthorizedUserStatus = requestParameters["updateAuthorizedUserStatus"];
        if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {
            throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`, _updateAuthorizedUserStatus, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateStatusForAuthorizedUserUrl(requestParameters) {
        const _authorizedUserId = requestParameters["authorizedUserId"];
        if (_authorizedUserId === null || _authorizedUserId === undefined) {
            throw new Error('Required parameter authorizedUserId was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        const _updateAuthorizedUserStatus = requestParameters["updateAuthorizedUserStatus"];
        if (_updateAuthorizedUserStatus === null || _updateAuthorizedUserStatus === undefined) {
            throw new Error('Required parameter updateAuthorizedUserStatus was null or undefined when calling updateStatusForAuthorizedUser.');
        }
        return `${this.configuration.basePath}/client-api/v2/users/me/authorized-users/${encodeURIComponent(String(_authorizedUserId))}/status`;
    }
}
AuthorizedUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserService, deps: [{ token: i1.HttpClient }, { token: AUTHORIZED_USER_BASE_PATH, optional: true }, { token: i2.AuthorizedUserConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AuthorizedUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AuthorizedUserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AUTHORIZED_USER_BASE_PATH]
                }] }, { type: i2.AuthorizedUserConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,