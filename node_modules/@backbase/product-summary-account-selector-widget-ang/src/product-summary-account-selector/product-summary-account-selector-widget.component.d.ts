import { OnInit, OnDestroy, EventEmitter, ChangeDetectorRef, ElementRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Observable, BehaviorSubject, Subject } from 'rxjs';
import { ProductSummaryService } from '../product-summary.service';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { ProductKindsError } from '../product-summary-error';
import { ProductSummaryAccountSelectorConfig } from '../model/providers';
import { Arrangement, ProductKind, Product, AccountState, ProductsExternalInfoService, ResponsiveContainerComponent } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
/**
 * A widget for selecting a user's Account (Retail).
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryAccountSelectorWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'account-list',
 *           properties: {
 *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 *
 * ### Communicate the selected account ID when it changes (standalone model)
 *
 * Using the `RouteParam` communication transport:
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'account-list',
 *           properties: {
 *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
 *             'output.selectedAccount': 'navigation:account-selector-product-details-container',
 *           },
 *         },
 *         {
 *           name: 'my-widget',
 *           properties: {
 *             classId: 'MyWidgetComponent',
 *             'input.selectedAccountId': RouteParam.toProperty('selectedAccount'),
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 *
 * @ngModule ProductSummaryAccountSelectorWidgetModule
 */
export declare class ProductSummaryAccountSelectorWidgetComponent extends ResponsiveContainerComponent implements OnInit, OnDestroy {
    private readonly route;
    private readonly service;
    private readonly productsExternalInfoService;
    private readonly element;
    private readonly changeDetector;
    private readonly eventBusService;
    readonly settings: ProductSummaryAccountSelectorConfig;
    readonly hostRef: ProductSummaryAccountSelectorWidgetComponent;
    /**
     * Subject for the garbage collector
     */
    gc$: Subject<void>;
    /**
     * The ID or IDs (a comma separated list) of the selected account
     * taken from the selectedAccount route param
     */
    readonly productId: Observable<string>;
    /**
     * Used to display the error occured during loading of accounts
     */
    readonly error: Observable<ProductKindsError | undefined>;
    /**
     * A method to return the alias of the given account
     */
    readonly getAlias: (account: any) => string | undefined;
    /**
     * Returns true if product has external info
     */
    readonly hasExternalInfo: (product: Arrangement) => boolean;
    private registeredRefreshAccountsListEvents;
    private readonly refreshAccountsListHandler;
    /**
     * The list of accounts to display in the dropdown.
     */
    accounts: Observable<Product[] | undefined>;
    private accountsList;
    /**
     * A selected account or a list of accounts
     */
    accountSelected: Product[] | Product | undefined;
    /**
     * The property is used to display a message about the selected account state below the account selector.
     *
     * @default undefined
     */
    selectedAccountState: AccountState | undefined;
    /**
     * Constructor
     *
     * @param route
     * @param service
     * @param productsExternalInfoService
     * @param element
     * @param changeDetector
     * @param eventBusService
     * @param settings
     */
    constructor(route: ActivatedRoute, service: ProductSummaryService, productsExternalInfoService: ProductsExternalInfoService, element: ElementRef<HTMLElement>, changeDetector: ChangeDetectorRef, eventBusService: Pubsub, settings: ProductSummaryAccountSelectorConfig);
    /**
     * Comma separated list of event names to subscribe to perform accounts refresh
     */
    set refreshAccountListEvent(value: string);
    /**
     * Select multiple accounts
     * Set to `true` to allow the bank customer to select more than one arrangement at a time.
     */
    readonly multiple: BehaviorSubject<boolean>;
    set multipleValue(value: boolean);
    /**
     * Enables bank customers to filter the arrangements that are presented in the dropdown.
     * Set to `true` to show Filter. Set to `false` to show Search.
     */
    readonly filterItems: BehaviorSubject<boolean>;
    set filterItemsValue(value: boolean);
    /**
     * Defines whether the account status is displayed for the selected account
     */
    readonly showAccountState$: BehaviorSubject<boolean>;
    set showAccountStateValue(value: boolean);
    /**
     * Emits the ID of the account selected by the bank customer as a string.
     */
    selectedAccount: EventEmitter<string>;
    /**
     * An event emitter to extend payload with product kind
     */
    selectedKind: EventEmitter<string>;
    /**
     * The method processed error messages to display in the template.
     */
    processErrorMessages: (messages: string[] | undefined) => string | undefined;
    private refreshAccountsList;
    private clearRefreshAccountsListEvents;
    private combineLatestSub;
    /**
     * @internal
     */
    ngOnInit(): void;
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @internal
     */
    ngOnDestroy(): void;
    /**
     * Maps product state to AccountState
     *
     * @param item
     */
    mapAccountState(item: Product | undefined): AccountState | undefined;
    /**
     * Event handler for the `change` event of `bb-account-selector-ui`
     * emits a string of comma-separated account ids to `selectedAccount` and `selectedKind`
     *
     * @param item
     */
    onAccountSelected(item: Product | Product[]): void;
    /**
     * Comparing given Products by `id` property.
     */
    compareProductsById(product1: Product, product2: Product): boolean;
    /**
     * Returns `true` if product alias includes `value`, otherwise `false`
     */
    isInProductAlias(value: string, product: Product): boolean;
    /**
     * Returns balance for the given product
     */
    getProductBalance(product: Product): string | number | undefined;
    /**
     * Returns sync date of external info for the given product
     */
    getExternalInfoSyncDate(product: Product): string | undefined;
    private isProduct;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryAccountSelectorWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductSummaryAccountSelectorWidgetComponent, "bb-product-summary-account-selector-widget", never, { "refreshAccountListEvent": "event.refreshAccountsList"; "multipleValue": "multiple"; "filterItemsValue": "filterItems"; "showAccountStateValue": "showAccountState"; }, { "selectedAccount": "selectedAccount"; "selectedKind": "selectedKind"; }, never, never>;
}
/**
 * This is an extension slot to be used for customizing the entire selector
 *
 * @usageNotes
 *
 * ### Customize the account selector
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorDropdownCustomizable
 *   let-hostRef
 *   let-accounts="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export declare class ProductSummaryAccountSelectorDropdownCustomizableDirective extends BbTemplate<ProductSummaryAccountSelectorWidgetComponent, ProductKind> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryAccountSelectorDropdownCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryAccountSelectorDropdownCustomizableDirective, "[bbAccountSelectorDropdownCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing an account selector item
 * This slot is used for displaying items in the dropdown list and
 * in the selected account (single-select only)
 *
 * @usageNotes
 *
 * ### Customize an account selector item
 *
 * ```html
 *  <ng-template
 *    bbAccountSelectorItemCustomizable
 *    let-hostRef
 *    let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export declare class ProductSummaryAccountSelectorItemCustomizableDirective extends BbTemplate<ProductSummaryAccountSelectorWidgetComponent, ProductKind> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryAccountSelectorItemCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryAccountSelectorItemCustomizableDirective, "[bbAccountSelectorItemCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing selected accounts
 * in multi-select mode
 *
 * @usageNotes
 *
 * ### Customize the selected accounts
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorMultiSelectedItemsCustomizable
 *   let-hostRef
 *   let-items="context.items"
 *   let-accounts="context.accounts">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export declare class ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective extends BbTemplate<ProductSummaryAccountSelectorWidgetComponent, {
    items: ProductKind[];
    accounts: Product[];
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, "[bbAccountSelectorMultiSelectedItemsCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing the loader
 *
 * @usageNotes
 *
 * ### Customize the account selector
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorLoadingCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export declare class ProductSummaryAccountSelectorLoadingCustomizableDirective extends BbTemplate<ProductSummaryAccountSelectorWidgetComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryAccountSelectorLoadingCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryAccountSelectorLoadingCustomizableDirective, "[bbAccountSelectorLoadingCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing the state of the selected account
 *
 * @usageNotes
 *
 * ### Customize the account state
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorStateCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export declare class ProductSummaryAccountSelectorStateCustomizableDirective extends BbTemplate<ProductSummaryAccountSelectorWidgetComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryAccountSelectorStateCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryAccountSelectorStateCustomizableDirective, "[bbAccountSelectorStateCustomizable]", never, {}, {}, never>;
}
