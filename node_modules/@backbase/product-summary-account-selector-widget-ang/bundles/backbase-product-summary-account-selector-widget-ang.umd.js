(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/foundation-ang/core'), require('@angular/forms'), require('@backbase/ui-ang/account-selector'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/product-item-basic-account'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/ellipsis'), require('@backbase/ui-ang/amount'), require('@backbase/product-summary-ui'), require('@backbase/product-summary-common-ang'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/arrangements'), require('@backbase/foundation-ang/web-sdk'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/product-summary-account-selector-widget-ang', ['exports', '@angular/core', '@angular/common', '@backbase/foundation-ang/core', '@angular/forms', '@backbase/ui-ang/account-selector', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/product-item-basic-account', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/ellipsis', '@backbase/ui-ang/amount', '@backbase/product-summary-ui', '@backbase/product-summary-common-ang', 'rxjs', 'rxjs/operators', '@backbase/data-ang/arrangements', '@backbase/foundation-ang/web-sdk', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["product-summary-account-selector-widget-ang"] = {}), global.ng.core, global.ng.common, global.i1$3, global.ng.forms, global.i4, global.i5, global.productItemBasicAccount, global.i7, global.i8, global.i10, global.i2, global.i1$1, global.i3, global.rxjs, global.rxjs.operators, global.i1, global.webSdk, global.ng.router));
})(this, (function (exports, i0, i3$1, i1$3, i12, i4, i5, productItemBasicAccount, i7, i8, i10, i2, i1$1, i3, rxjs, operators, i1, webSdk, i1$2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3$1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ProductKindsBadRequest = /** @class */ (function () {
        function ProductKindsBadRequest(response) {
            this.response = response;
            this.kind = 'ProductKindsBadRequest';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return ProductKindsBadRequest;
    }());
    var ProductKindsUnknownError = /** @class */ (function () {
        function ProductKindsUnknownError(response) {
            this.response = response;
            this.kind = 'ProductKindsUnknownError';
            this.messages = [response.message];
        }
        return ProductKindsUnknownError;
    }());
    var ProductKindsAccessDenied = /** @class */ (function () {
        function ProductKindsAccessDenied(response) {
            this.response = response;
            this.kind = 'ProductKindsAccessDenied';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return ProductKindsAccessDenied;
    }());
    var parseError = function (error) {
        if (error.error instanceof ErrorEvent) {
            return new ProductKindsUnknownError(error);
        }
        else {
            switch (error.status) {
                case 400:
                    return new ProductKindsBadRequest(error);
                case 403:
                    return new ProductKindsAccessDenied(error);
                case 401:
                    return new ProductKindsAccessDenied(error);
                default:
                    return new ProductKindsUnknownError(error);
            }
        }
    };

    var defaultListParams = {};
    /**
     * Service for fetching and storing accounts and properties from model.xml
     *
     * This service relies on providers from `ProductSummaryAccountSelectorWidgetModule`.
     *
     * @see ProductSummaryAccountSelectorWidgetModule
     *
     * @usageNotes
     *
     * ### Ensure the ProductSummaryAccountSelectorWidgetModule is imported to your component module
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *     ProductSummaryAccountSelectorWidgetModule,
     *   ],
     * })
     * export class MyWidgetModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ProductSummaryService],
     * })
     *  export class MyComponent {
     * ```
     */
    var ProductSummaryService = /** @class */ (function () {
        /**
         * Constructor
         *
         * @param productSummaryDataService
         */
        function ProductSummaryService(productSummaryDataService) {
            var _this = this;
            this.productSummaryDataService = productSummaryDataService;
            /**
             * Used to store the error occured during loading of accounts
             */
            this.error = new rxjs.BehaviorSubject(undefined);
            this.listParams = new rxjs.BehaviorSubject(defaultListParams);
            this.listRefresh = new rxjs.BehaviorSubject(false);
            /**
             * List of accounts fetched from the server
             */
            this.accountsList = rxjs.combineLatest([
                this.listParams.pipe(operators.distinctUntilChanged()),
                this.listRefresh,
            ]).pipe(i3.cacheRequest(function (_a) {
                var _b = __read(_a, 1), params = _b[0];
                return _this.getProductSummary(params);
            }));
        }
        /**
         * Refreshes the list of accounts
         */
        ProductSummaryService.prototype.refreshAccountsList = function () {
            this.listRefresh.next(true);
        };
        /**
         * @internal
         */
        ProductSummaryService.prototype.ngOnDestroy = function () {
            this.error.complete();
        };
        ProductSummaryService.prototype.getProductSummary = function (params) {
            var _this = this;
            return this.productSummaryDataService.getProductSummary(params).pipe(operators.map(function (res) { return _this.responseToProductList(res); }), operators.catchError(function (error) {
                _this.error.next(parseError(error));
                return rxjs.of(undefined);
            }));
        };
        ProductSummaryService.prototype.extractProducts = function (memo, _a) {
            var products = _a.products;
            return memo.concat(products);
        };
        ProductSummaryService.prototype.toProductKindList = function (res) {
            var _this = this;
            return Object.entries(res)
                .filter(function (_a) {
                var _b = __read(_a, 1), key = _b[0];
                return key !== 'aggregatedBalance';
            })
                .map(function (_a) {
                var _b = __read(_a, 2), kind = _b[0], value = _b[1];
                if (Array.isArray(value)) {
                    value.products = value.reduce(_this.extractProducts, []);
                }
                var products = [];
                if (value.products && Array.isArray(value.products)) {
                    products = value.products.filter(i3.isProductVisible).map(function (product) { return (Object.assign(Object.assign({}, product), { kind: kind })); });
                }
                return { products: products };
            });
        };
        ProductSummaryService.prototype.responseToProductList = function (res) {
            return this.toProductKindList(res).reduce(this.extractProducts, []);
        };
        return ProductSummaryService;
    }());
    ProductSummaryService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryService, deps: [{ token: i1__namespace.ProductSummaryHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ProductSummaryService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.ProductSummaryHttpService }]; } });

    // These tokens can be used to change configuration at app level
    var BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN = new i0.InjectionToken('BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN');
    var productSummaryAccountSelectorDefaults = {
        notToDisplayStateList: ['Active', 'Open'],
        states: [
            {
                stateName: 'Active',
                severity: 'info',
            },
            {
                stateName: 'Inactive',
                severity: 'warning',
            },
            {
                stateName: 'Closed',
                severity: 'error',
            },
            {
                stateName: 'Open',
                severity: 'info',
            },
        ],
    };
    var productSummaryAccountSelectorConfigProviders = [
        {
            provide: BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN,
            useValue: productSummaryAccountSelectorDefaults,
        },
    ];

    var WidgetProperty = {
        MULTIPLE: 'multiple',
        FILTER_ITEMS: 'filterItems',
        SHOW_ACCOUNT_STATE: 'showAccountState',
        EVENT_REFRESH_ACCOUNT_LIST: 'event.refreshAccountsList',
        OUTPUT_SELECTED_ACCOUNT: 'output.selectedAccount',
    };

    /**
     * Displays account overview in account selector
     *
     * @usageNotes
     *
     * ### Display details
     *
     * ```html
     * <bb-product-summary-account-selector-item
     *   [title]="'My Account'"
     *   [amount]="12345"
     *   [currency]="'EUR'"
     *   [productNumber]="'12345678'"
     *   [productNumberType]="'iban'"
     * ></bb-product-summary-account-selector-item>
     * ```
     *
     * @ngModule ProductSummaryAccountSelectorWidgetModule
     */
    var ProductSummaryAccountSelectorItemComponent = /** @class */ (function (_super) {
        __extends(ProductSummaryAccountSelectorItemComponent, _super);
        function ProductSummaryAccountSelectorItemComponent() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            /**
             * Whether to show in mobile or desktop view
             *
             * @default false
             */
            _this.isCollapsedView = false;
            /**
             * Whether to show external product information
             *
             * @default false
             */
            _this.showExternalInfo = false;
            return _this;
        }
        return ProductSummaryAccountSelectorItemComponent;
    }(productItemBasicAccount.ProductItemBasicAccountComponent));
    ProductSummaryAccountSelectorItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorItemComponent, deps: null, target: i0__namespace.ɵɵFactoryTarget.Component });
    ProductSummaryAccountSelectorItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorItemComponent, selector: "bb-product-summary-account-selector-item", inputs: { isCollapsedView: "isCollapsedView", productNumberType: "productNumberType", showExternalInfo: "showExternalInfo", externalLogo: "externalLogo", externalName: "externalName", externalSyncDate: "externalSyncDate" }, usesInheritance: true, ngImport: i0__namespace, template: "<div [class.active]=\"active\" class=\"bb-product-item bb-product-item-basic-account-ui product-item\">\n  <div class=\"bb-stack product-item-content\">\n    <div *ngIf=\"!isCollapsedView\" class=\"bb-stack__item bb-stack__item--align-top\">\n      <div class=\"bb-block bb-block--xs\"></div>\n      <bb-product-summary-account-logo\n        [logoSrc]=\"showExternalInfo && externalLogo\"\n        [productKindName]=\"type\"\n        iconColor=\"secondary\"\n      ></bb-product-summary-account-logo>\n    </div>\n    <div class=\"bb-stack__item bb-stack__item--fill bb-account-info\">\n      <bb-product-item-custom-title-ui\n        *ngIf=\"showExternalInfo && !isCollapsedView\"\n        [showExternalTitle]=\"true\"\n        [externalTitle]=\"showExternalInfo && externalName\"\n      ></bb-product-item-custom-title-ui>\n      <div class=\"bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-product-item__title\">\n          <ng-container *ngIf=\"customProductItemBasicAccountTitle; else defaultProductItemBasicAccountTitle\">\n            <ng-container\n              *ngTemplateOutlet=\"customProductItemBasicAccountTitle?.templateRef; context: hostRef\"\n            ></ng-container>\n          </ng-container>\n        </div>\n        <div *ngIf=\"isCollapsedView\" class=\"bb-stack__break bb-stack__break--up\"></div>\n        <div\n          class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-none bb-product-item__details\"\n          [ngClass]=\"{\n            'bb-stack__item--push-right': !isCollapsedView,\n            'bb-stack__item--push-left': isCollapsedView\n          }\"\n        >\n          <ng-container\n            *ngIf=\"customProductItemBasicAccountDetailsFormatter; else defaultProductItemBasicAccountDetailsFormatter\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"customProductItemBasicAccountDetailsFormatter?.templateRef; context: hostRef\"\n            ></ng-container>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultProductItemBasicAccountTitle>\n  <bb-product-item-custom-title-ui\n    [title]=\"title\"\n    [showLogo]=\"isCollapsedView\"\n    [logoSrc]=\"showExternalInfo && externalLogo\"\n    [logoKind]=\"type\"\n    [showExternalTitle]=\"showExternalInfo && isCollapsedView\"\n    [externalTitle]=\"showExternalInfo && externalName\"\n    [productNumber]=\"productNumber\"\n    [productNumberType]=\"productNumberType\"\n    [state]=\"status\"\n  ></bb-product-item-custom-title-ui>\n</ng-template>\n\n<ng-template #defaultProductItemBasicAccountDetailsFormatter>\n  <div\n    *ngIf=\"amount | bbIsDefined\"\n    [ngClass]=\"{\n      'bb-text-align-right': !isCollapsedView,\n      'bb-text-align-left': isCollapsedView\n    }\"\n  >\n    <bb-amount-ui\n      class=\"bb-highlight bb-product-item__amount\"\n      [amount]=\"amount\"\n      [currency]=\"currency\"\n      [mapCurrency]=\"showCurrencySymbol\"\n    ></bb-amount-ui>\n    <div *ngIf=\"showExternalInfo && (externalSyncDate | bbIsDefined)\" class=\"bb-text-support bb-subtitle\">\n      {{ externalSyncDate! | bbDateUpdatedAgo }}\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace$1.ProductSummaryAccountLogoComponent, selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i1__namespace$1.ProductItemCustomTitleComponent, selector: "bb-product-item-custom-title-ui", inputs: ["title", "titleInteractive", "showLogo", "logoSrc", "logoKind", "showExternalTitle", "externalTitle", "favorite", "favoriteIconColor", "productNumber", "productNumberType", "state"], outputs: ["selectCustomTitle"] }, { type: i2__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "bbIsDefined": i3__namespace$1.IsDefinedPipe, "bbDateUpdatedAgo": i3__namespace$1.DateUpdatedAgoPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-product-summary-account-selector-item',
                        templateUrl: './product-summary-account-selector-item.component.html',
                    }]
            }], propDecorators: { isCollapsedView: [{
                    type: i0.Input
                }], productNumberType: [{
                    type: i0.Input
                }], showExternalInfo: [{
                    type: i0.Input
                }], externalLogo: [{
                    type: i0.Input
                }], externalName: [{
                    type: i0.Input
                }], externalSyncDate: [{
                    type: i0.Input
                }] } });

    /**
     * A widget for selecting a user's Account (Retail).
     *
     * @usageNotes
     *
     * ### Include this widget in your `AppModule`:
     *
     * ```typescript
     * @NgModule({
     *   imports: [
     *     ProductSummaryAccountSelectorWidgetModule,
     *   ],
     *   ...
     * })
     * export class AppModule {}
     * ```
     *
     * ### Include this widget (standalone model)
     *
     * ```typescript
     * export const environment: Environment = {
     *   ...
     *   bootstrap: {
     *     pageModel: {
     *       name: 'root',
     *       properties: {},
     *       children: [
     *         {
     *           name: 'account-list',
     *           properties: {
     *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
     *           },
     *         },
     *       ],
     *     },
     *   },
     * };
     * ```
     *
     * ### Communicate the selected account ID when it changes (standalone model)
     *
     * Using the `RouteParam` communication transport:
     *
     * ```typescript
     * export const environment: Environment = {
     *   ...
     *   bootstrap: {
     *     pageModel: {
     *       name: 'root',
     *       properties: {},
     *       children: [
     *         {
     *           name: 'account-list',
     *           properties: {
     *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
     *             'output.selectedAccount': 'navigation:account-selector-product-details-container',
     *           },
     *         },
     *         {
     *           name: 'my-widget',
     *           properties: {
     *             classId: 'MyWidgetComponent',
     *             'input.selectedAccountId': RouteParam.toProperty('selectedAccount'),
     *           },
     *         },
     *       ],
     *     },
     *   },
     * };
     * ```
     *
     * @ngModule ProductSummaryAccountSelectorWidgetModule
     */
    var ProductSummaryAccountSelectorWidgetComponent = /** @class */ (function (_super) {
        __extends(ProductSummaryAccountSelectorWidgetComponent, _super);
        /**
         * Constructor
         *
         * @param route
         * @param service
         * @param productsExternalInfoService
         * @param element
         * @param changeDetector
         * @param eventBusService
         * @param settings
         */
        function ProductSummaryAccountSelectorWidgetComponent(route, service, productsExternalInfoService, element, changeDetector, eventBusService, settings) {
            var _this = _super.call(this, element, changeDetector) || this;
            _this.route = route;
            _this.service = service;
            _this.productsExternalInfoService = productsExternalInfoService;
            _this.element = element;
            _this.changeDetector = changeDetector;
            _this.eventBusService = eventBusService;
            _this.settings = settings;
            _this.hostRef = _this;
            /**
             * Subject for the garbage collector
             */
            _this.gc$ = new rxjs.Subject();
            /**
             * The ID or IDs (a comma separated list) of the selected account
             * taken from the selectedAccount route param
             */
            _this.productId = i3.getRouteParameter(_this.route, 'selectedAccount');
            /**
             * Used to display the error occured during loading of accounts
             */
            _this.error = _this.service.error;
            /**
             * A method to return the alias of the given account
             */
            _this.getAlias = i3.getAccountAlias;
            /**
             * Returns true if product has external info
             */
            _this.hasExternalInfo = i3.hasExternalInfo;
            _this.registeredRefreshAccountsListEvents = [];
            _this.refreshAccountsListHandler = _this.refreshAccountsList.bind(_this);
            /**
             * The list of accounts to display in the dropdown.
             */
            _this.accounts = new rxjs.Observable(function (subscriber) {
                var subscriptions = [];
                subscriptions.push(_this.service.accountsList.subscribe(function (products) {
                    subscriber.next(products);
                    if (products === null || products === void 0 ? void 0 : products.some(i3.hasExternalInfo)) {
                        subscriptions.push(_this.productsExternalInfoService
                            .getProductsWithExternalInfo(products)
                            .subscribe(function (productsWithExternalData) { return subscriber.next(productsWithExternalData); }, subscriber.error));
                    }
                }, subscriber.error));
                return function () { return subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); }); };
            }).pipe(operators.tap(function (accounts) { return _this.accountsList.next(accounts); }));
            _this.accountsList = new rxjs.Subject();
            /**
             * Select multiple accounts
             * Set to `true` to allow the bank customer to select more than one arrangement at a time.
             */
            _this.multiple = new rxjs.BehaviorSubject(false);
            /**
             * Enables bank customers to filter the arrangements that are presented in the dropdown.
             * Set to `true` to show Filter. Set to `false` to show Search.
             */
            _this.filterItems = new rxjs.BehaviorSubject(true);
            /**
             * Defines whether the account status is displayed for the selected account
             */
            _this.showAccountState$ = new rxjs.BehaviorSubject(true);
            /**
             * Emits the ID of the account selected by the bank customer as a string.
             */
            _this.selectedAccount = new i0.EventEmitter();
            /**
             * An event emitter to extend payload with product kind
             */
            _this.selectedKind = new i0.EventEmitter();
            /**
             * The method processed error messages to display in the template.
             */
            _this.processErrorMessages = i3.processErrorMessages;
            return _this;
        }
        Object.defineProperty(ProductSummaryAccountSelectorWidgetComponent.prototype, "refreshAccountListEvent", {
            /**
             * Comma separated list of event names to subscribe to perform accounts refresh
             */
            set: function (value) {
                var _this = this;
                this.clearRefreshAccountsListEvents();
                if (value) {
                    this.registeredRefreshAccountsListEvents = value.replace(/ /g, '').split(',');
                    this.registeredRefreshAccountsListEvents.forEach(function (eventName) {
                        _this.eventBusService.subscribe(eventName, _this.refreshAccountsListHandler);
                    });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProductSummaryAccountSelectorWidgetComponent.prototype, "multipleValue", {
            set: function (value) {
                this.multiple.next(i3.modelItemToBoolean(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProductSummaryAccountSelectorWidgetComponent.prototype, "filterItemsValue", {
            set: function (value) {
                this.filterItems.next(i3.modelItemToBoolean(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ProductSummaryAccountSelectorWidgetComponent.prototype, "showAccountStateValue", {
            set: function (value) {
                this.showAccountState$.next(i3.modelItemToBoolean(value));
            },
            enumerable: false,
            configurable: true
        });
        ProductSummaryAccountSelectorWidgetComponent.prototype.refreshAccountsList = function () {
            this.service.refreshAccountsList();
        };
        ProductSummaryAccountSelectorWidgetComponent.prototype.clearRefreshAccountsListEvents = function () {
            var _this = this;
            this.registeredRefreshAccountsListEvents.forEach(function (eventName) {
                _this.eventBusService.unsubscribe(eventName, _this.refreshAccountsListHandler);
            });
            this.registeredRefreshAccountsListEvents = [];
        };
        ProductSummaryAccountSelectorWidgetComponent.prototype.combineLatestSub = function () {
            var _this = this;
            return rxjs.combineLatest(this.accountsList, this.productId, this.multiple)
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (_c) {
                var _d = __read(_c, 3), accounts = _d[0], productId = _d[1], multiple = _d[2];
                if (accounts) {
                    _this.selectedAccountState = undefined;
                    if (multiple) {
                        var productIdArray_1 = productId.split(',');
                        _this.accountSelected = accounts
                            ? accounts.filter(function (account) { return account.id === undefined || productIdArray_1.includes(account.id); })
                            : [];
                        _this.selectedAccountState = _this.mapAccountState(_this.accountSelected[0]);
                    }
                    else {
                        _this.accountSelected = accounts ? accounts.find(function (product) { return product.id === productId; }) : undefined;
                        _this.selectedAccountState = _this.mapAccountState(_this.accountSelected);
                    }
                }
                _this.changeDetector.markForCheck();
            });
        };
        /**
         * @internal
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.ngOnInit = function () {
            this.combineLatestSub();
        };
        /**
         * Cleanups just before Angular destroys the component.
         *
         * @internal
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.ngOnDestroy = function () {
            this.clearRefreshAccountsListEvents();
            this.gc$.next();
            this.gc$.complete();
        };
        /**
         * Maps product state to AccountState
         *
         * @param item
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.mapAccountState = function (item) {
            var _this = this;
            if (item && item.state && item.state.state) {
                var productState_1 = item.state.state;
                return this.settings.states.find(function (value) { return productState_1.toLocaleLowerCase() === value.stateName.toLocaleLowerCase() &&
                    !_this.settings.notToDisplayStateList.includes(productState_1); });
            }
            return undefined;
        };
        /**
         * Event handler for the `change` event of `bb-account-selector-ui`
         * emits a string of comma-separated account ids to `selectedAccount` and `selectedKind`
         *
         * @param item
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.onAccountSelected = function (item) {
            if (!this.isProduct(item)) {
                // this checking here is because of a bug in `ng-select`.
                // `ng-select` in multi-select mode if its 'filter' was changed
                // sends "onClose" an Event object instead of the real elements
                return;
            }
            this.selectedAccountState = undefined;
            this.accountSelected = item;
            if (Array.isArray(item)) {
                this.selectedAccountState = this.mapAccountState(item[0]);
                this.selectedAccount.emit(item.map(function (account) { return account.id; }).join(','));
                this.selectedKind.emit(item.map(function (account) { return account.kind; }).join(','));
            }
            else {
                this.selectedAccountState = this.mapAccountState(item);
                this.selectedAccount.emit(item.id);
                this.selectedKind.emit(item.kind);
            }
        };
        /**
         * Comparing given Products by `id` property.
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.compareProductsById = function (product1, product2) {
            return this.isProduct(product1) && this.isProduct(product2) && product1.id === product2.id;
        };
        /**
         * Returns `true` if product alias includes `value`, otherwise `false`
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.isInProductAlias = function (value, product) {
            var searchTerm = value.toLowerCase();
            var productAlias = (this.getAlias(product) || '').toLowerCase();
            return productAlias.includes(searchTerm);
        };
        /**
         * Returns balance for the given product
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.getProductBalance = function (product) {
            var _a, _b;
            return (_b = (_a = product.bookedBalance) !== null && _a !== void 0 ? _a : product.principalAmount) !== null && _b !== void 0 ? _b : product.currentInvestmentValue;
        };
        /**
         * Returns sync date of external info for the given product
         */
        ProductSummaryAccountSelectorWidgetComponent.prototype.getExternalInfoSyncDate = function (product) {
            return i3.hasExternalInfo(product) ? product === null || product === void 0 ? void 0 : product.lastSyncDate : undefined;
        };
        ProductSummaryAccountSelectorWidgetComponent.prototype.isProduct = function (item) {
            if (Array.isArray(item) && item.length === 0) {
                return true; // handles the case with an empty array input (when all the items are unselected in multiple mode)
            }
            var product = Array.isArray(item) ? item[0] : item;
            return typeof product === 'object' && 'id' in product;
        };
        return ProductSummaryAccountSelectorWidgetComponent;
    }(i3.ResponsiveContainerComponent));
    ProductSummaryAccountSelectorWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorWidgetComponent, deps: [{ token: i1__namespace$2.ActivatedRoute }, { token: ProductSummaryService }, { token: i3__namespace$1.ProductsExternalInfoService }, { token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }, { token: webSdk.PUBSUB }, { token: BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ProductSummaryAccountSelectorWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorWidgetComponent, selector: "bb-product-summary-account-selector-widget", inputs: { refreshAccountListEvent: ["event.refreshAccountsList", "refreshAccountListEvent"], multipleValue: ["multiple", "multipleValue"], filterItemsValue: ["filterItems", "filterItemsValue"], showAccountStateValue: ["showAccountState", "showAccountStateValue"] }, outputs: { selectedAccount: "selectedAccount", selectedKind: "selectedKind" }, providers: [ProductSummaryService], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"accounts | async as accounts; else loadingTemplate\">\n  <ng-container\n    bbAccountSelectorDropdownCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"accounts\"\n>\n  </ng-container>\n</ng-container>\n\n<!-- Account Selector Dropdown template -->\n<ng-template\n  bbAccountSelectorDropdownCustomizable\n  let-hostRef\n  let-accounts=\"context\"\n>\n  <bb-account-selector-ui\n    class=\"bb-product-summary-account-selector\"\n    [items]=\"accounts\"\n    [dropdownPosition]=\"'bottom'\"\n    [selectedItems]=\"hostRef.accountSelected\"\n    [multiple]=\"hostRef.multiple | async\"\n    [closeOnSelect]=\"(hostRef.multiple | async) === false\"\n    (change)=\"hostRef.onAccountSelected($event)\"\n    [filterItems]=\"hostRef.filterItems | async\"\n    [compareItemsWith]=\"hostRef.compareProductsById.bind(hostRef)\"\n    [searchFunc]=\"hostRef.isInProductAlias.bind(hostRef)\"\n    data-role=\"accountSelector\"\n    placeholder=\"Select Account(s)\"\n    i18n-placeholder=\"Select Account(s)|Select Accounts placeholder\n      @@product-summary-account-selector.empty.state.placeholder\"\n  >\n    <ng-template\n      bbCustomSingleSelectedItemLabel\n      let-item=\"item\"\n    >\n      <ng-container\n        bbAccountSelectorItemCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"item\"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomMultiSelectedItemsLabel\n      let-items=\"items\">\n      <ng-container\n        bbAccountSelectorMultiSelectedItemsCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{items: items, accounts: accounts}\">\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomOptionItem\n      let-item=\"item\"\n      let-item$=\"item$\"\n      let-index=\"index\"\n    >\n      <ng-container *ngIf=\"hostRef.multiple | async\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-product-item__details\">\n            <bb-input-checkbox-ui\n              [id]=\"index\"\n              [ngModel]=\"item$.selected\"\n              (click)=\"$event.preventDefault()\"\n            >\n            </bb-input-checkbox-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--fill bb-ellipsis bb-ellipsis--single-line\">\n            <ng-container\n              bbAccountSelectorItemCustomizable\n              [bbHostRef]=\"hostRef\"\n              [bbTemplateContext]=\"item\"\n            >\n            </ng-container>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(hostRef.multiple | async) === false\">\n        <ng-container\n          bbAccountSelectorItemCustomizable\n          [bbHostRef]=\"hostRef\"\n          [bbTemplateContext]=\"item\"\n        >\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </bb-account-selector-ui>\n</ng-template>\n\n<!-- Product summary account selector item template -->\n<ng-template\n  bbAccountSelectorItemCustomizable\n  let-hostRef\n  let-item=\"context\"\n>\n  <bb-product-summary-account-selector-item\n    [type]=\"item?.productKindName\"\n    [title]=\"hostRef.getAlias(item)\"\n    [amount]=\"hostRef.getProductBalance(item)\"\n    [currency]=\"item?.currency\"\n    [status]=\"item?.state?.state\"\n    [productNumber]=\"item | bbProductNumberValue\"\n    [productNumberType]=\"item | bbProductNumberType\"\n    [showExternalInfo]=\"hostRef.hasExternalInfo(item)\"\n    [externalLogo]=\"item?.financialInstitution?.logo\"\n    [externalName]=\"item?.financialInstitution?.name\"\n    [externalSyncDate]=\"hostRef.getExternalInfoSyncDate(item)\"\n    [isCollapsedView]=\"hostRef.responsiveView === 'mobile'\"\n  ></bb-product-summary-account-selector-item>\n</ng-template>\n\n<!-- Product summary loading template -->\n<ng-template #loadingTemplate>\n  <ng-container\n    bbAccountSelectorLoadingCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n    <div></div>\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorLoadingCustomizable\n  let-hostRef\n>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@product.details.loadingAccounts\"\n      [text]=\"'Loading Accounts...'\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-container\n  bbAccountSelectorStateCustomizable\n  [bbHostRef]=\"hostRef\"\n>\n</ng-container>\n\n<ng-template\n  bbAccountSelectorStateCustomizable\n  let-hostRef\n>\n  <bb-account-state-ui\n    *ngIf=\"hostRef.selectedAccountState\"\n    [isDisplayingAlert]=\"(hostRef.showAccountState$ | async) && ((hostRef.multiple | async) === false)\"\n    [item]=\"hostRef.selectedAccountState\"\n  >\n  <span i18n=\"@@product-summary-account-selector.account-state.message\">\n      {hostRef.selectedAccountState?.severity, select, warning {This account is temporarily\n        inactive. For more info please contact your bank.} error {This account is permanently disabled. For more info please\n        contact your bank.}}\n  </span>\n  </bb-account-state-ui>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorMultiSelectedItemsCustomizable\n  let-hostRef\n  let-items=\"context.items\"\n  let-accounts=\"context.accounts\"\n>\n  <div class=\"bb-account-selector__selected\">\n    <div class=\"bb-account-selector__selected-accounts-number bb-text-bold\">\n      <span i18n=\"Selected Accounts|Selected Accounts multi label @@bb-product-summary-account-selector.multi.label\">\n        { items.length, plural, =1 {1 account selected} other {{{accounts.length === items.length ? 'All' : items.length}} accounts selected}}\n      </span>\n    </div>\n    <div class=\"bb-account-selector__selected-accounts bb-text-subtitle\">\n      <ng-container *ngIf=\"accounts.length === items.length; else selectedAccountsTemplate\">\n        {{ items.length }}\n        <span\n          i18n=\"\n             All Selected Accounts|All Selected Accounts label @@product-summary-account-selector.allSelectedAccounts.label\n          \"\n          class=\"bb-account-selector__selected-account\"\n        >\n          accounts\n        </span>\n      </ng-container>\n      <ng-template #selectedAccountsTemplate>\n        <bb-ellipsis-ui>\n          <ng-container *ngFor=\"let item of items; let i = index\">\n                <span class=\"bb-account-selector__selected-account\"\n                >{{ hostRef.getAlias(item)\n                  }}<span *ngIf=\"i !== items.length - 1\" class=\"bb-account-selector__selected-account-separator\">, </span>\n                </span>\n          </ng-container>\n        </bb-ellipsis-ui>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i4__namespace.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0__namespace.forwardRef(function () { return ProductSummaryAccountSelectorItemComponent; }), selector: "bb-product-summary-account-selector-item", inputs: ["isCollapsedView", "productNumberType", "showExternalInfo", "externalLogo", "externalName", "externalSyncDate"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.AccountStateComponent; }), selector: "bb-account-state-ui", inputs: ["isDisplayingAlert", "item"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i0__namespace.forwardRef(function () { return i3__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return ProductSummaryAccountSelectorDropdownCustomizableDirective; }), selector: "[bbAccountSelectorDropdownCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.CustomSingleSelectedItemLabelDirective; }), selector: "ng-template[bbCustomSingleSelectedItemLabel]" }, { type: i0__namespace.forwardRef(function () { return ProductSummaryAccountSelectorItemCustomizableDirective; }), selector: "[bbAccountSelectorItemCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.CustomMultiSelectedItemsLabelDirective; }), selector: "ng-template[bbCustomMultiSelectedItemsLabel]" }, { type: i0__namespace.forwardRef(function () { return ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective; }), selector: "[bbAccountSelectorMultiSelectedItemsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i4__namespace.CustomOptionItemDirective; }), selector: "ng-template[bbCustomOptionItem]" }, { type: i0__namespace.forwardRef(function () { return i12__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i12__namespace.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0__namespace.forwardRef(function () { return ProductSummaryAccountSelectorLoadingCustomizableDirective; }), selector: "[bbAccountSelectorLoadingCustomizable]" }, { type: i0__namespace.forwardRef(function () { return ProductSummaryAccountSelectorStateCustomizableDirective; }), selector: "[bbAccountSelectorStateCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i3__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i3__namespace.AsyncPipe; }), "bbProductNumberValue": i0__namespace.forwardRef(function () { return i3__namespace$1.ProductNumberValuePipe; }), "bbProductNumberType": i0__namespace.forwardRef(function () { return i3__namespace$1.ProductNumberTypePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-product-summary-account-selector-widget',
                        templateUrl: 'product-summary-account-selector-widget.component.html',
                        providers: [ProductSummaryService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$2.ActivatedRoute }, { type: ProductSummaryService }, { type: i3__namespace$1.ProductsExternalInfoService }, { type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN]
                        }] }];
        }, propDecorators: { refreshAccountListEvent: [{
                    type: i0.Input,
                    args: [WidgetProperty.EVENT_REFRESH_ACCOUNT_LIST]
                }], multipleValue: [{
                    type: i0.Input,
                    args: [WidgetProperty.MULTIPLE]
                }], filterItemsValue: [{
                    type: i0.Input,
                    args: [WidgetProperty.FILTER_ITEMS]
                }], showAccountStateValue: [{
                    type: i0.Input,
                    args: [WidgetProperty.SHOW_ACCOUNT_STATE]
                }], selectedAccount: [{
                    type: i0.Output
                }], selectedKind: [{
                    type: i0.Output
                }] } });
    /**
     * This is an extension slot to be used for customizing the entire selector
     *
     * @usageNotes
     *
     * ### Customize the account selector
     *
     * ```html
     * <ng-template
     *   bbAccountSelectorDropdownCustomizable
     *   let-hostRef
     *   let-accounts="context">
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryAccountSelectorWidgetModule
     */
    var ProductSummaryAccountSelectorDropdownCustomizableDirective = /** @class */ (function (_super) {
        __extends(ProductSummaryAccountSelectorDropdownCustomizableDirective, _super);
        function ProductSummaryAccountSelectorDropdownCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ProductSummaryAccountSelectorDropdownCustomizableDirective;
    }(i1$3.BbTemplate));
    ProductSummaryAccountSelectorDropdownCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorDropdownCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ProductSummaryAccountSelectorDropdownCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorDropdownCustomizableDirective, selector: "[bbAccountSelectorDropdownCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorDropdownCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountSelectorDropdownCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing an account selector item
     * This slot is used for displaying items in the dropdown list and
     * in the selected account (single-select only)
     *
     * @usageNotes
     *
     * ### Customize an account selector item
     *
     * ```html
     *  <ng-template
     *    bbAccountSelectorItemCustomizable
     *    let-hostRef
     *    let-item="context">
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryAccountSelectorWidgetModule
     */
    var ProductSummaryAccountSelectorItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(ProductSummaryAccountSelectorItemCustomizableDirective, _super);
        function ProductSummaryAccountSelectorItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ProductSummaryAccountSelectorItemCustomizableDirective;
    }(i1$3.BbTemplate));
    ProductSummaryAccountSelectorItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ProductSummaryAccountSelectorItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorItemCustomizableDirective, selector: "[bbAccountSelectorItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountSelectorItemCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing selected accounts
     * in multi-select mode
     *
     * @usageNotes
     *
     * ### Customize the selected accounts
     *
     * ```html
     * <ng-template
     *   bbAccountSelectorMultiSelectedItemsCustomizable
     *   let-hostRef
     *   let-items="context.items"
     *   let-accounts="context.accounts">
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryAccountSelectorWidgetModule
     */
    var ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective = /** @class */ (function (_super) {
        __extends(ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, _super);
        function ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective;
    }(i1$3.BbTemplate));
    ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, selector: "[bbAccountSelectorMultiSelectedItemsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountSelectorMultiSelectedItemsCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing the loader
     *
     * @usageNotes
     *
     * ### Customize the account selector
     *
     * ```html
     * <ng-template
     *   bbAccountSelectorLoadingCustomizable
     *   let-hostRef>
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryAccountSelectorWidgetModule
     */
    var ProductSummaryAccountSelectorLoadingCustomizableDirective = /** @class */ (function (_super) {
        __extends(ProductSummaryAccountSelectorLoadingCustomizableDirective, _super);
        function ProductSummaryAccountSelectorLoadingCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ProductSummaryAccountSelectorLoadingCustomizableDirective;
    }(i1$3.BbTemplate));
    ProductSummaryAccountSelectorLoadingCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorLoadingCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ProductSummaryAccountSelectorLoadingCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorLoadingCustomizableDirective, selector: "[bbAccountSelectorLoadingCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorLoadingCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountSelectorLoadingCustomizable]',
                    }]
            }] });
    /**
     * This is an extension slot to be used for customizing the state of the selected account
     *
     * @usageNotes
     *
     * ### Customize the account state
     *
     * ```html
     * <ng-template
     *   bbAccountSelectorStateCustomizable
     *   let-hostRef>
     *   Your custom template here
     * </ng-template>
     * ```
     *
     * @NgModule ProductSummaryAccountSelectorWidgetModule
     */
    var ProductSummaryAccountSelectorStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(ProductSummaryAccountSelectorStateCustomizableDirective, _super);
        function ProductSummaryAccountSelectorStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ProductSummaryAccountSelectorStateCustomizableDirective;
    }(i1$3.BbTemplate));
    ProductSummaryAccountSelectorStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ProductSummaryAccountSelectorStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorStateCustomizableDirective, selector: "[bbAccountSelectorStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountSelectorStateCustomizable]',
                    }]
            }] });

    var components = [ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorItemComponent];
    var directives = [
        ProductSummaryAccountSelectorDropdownCustomizableDirective,
        ProductSummaryAccountSelectorItemCustomizableDirective,
        ProductSummaryAccountSelectorLoadingCustomizableDirective,
        ProductSummaryAccountSelectorStateCustomizableDirective,
        ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective,
    ];
    var uiModules = [
        i1$1.ProductItemCustomModule,
        i1$1.ProductKindModule,
        i1$1.AccountStateModule,
        i4.AccountSelectorModule,
        i5.InputCheckboxModule,
        productItemBasicAccount.ProductItemBasicAccountModule,
        i7.EmptyStateModule,
        i8.LoadingIndicatorModule,
        i10.EllipsisModule,
        i1$1.ProductNumberModule,
        i2.AmountModule,
        i3.ValidationModule,
        i3.DatePipeModule,
    ];
    var services = [i3.ProductsExternalInfoService];
    /**
     * Exports the Widgets and UI components for displaying of the account selector. (Retail banking)
     *
     * The following widgets are included in this module:
     *  - `ProductSummaryAccountSelectorWidgetComponent`
     *
     * @see ProductSummaryAccountSelectorWidgetComponent
     *
     * @usageNotes
     *
     * ### Include the exported widgets in your `AppModule`:
     *
     * ```typescript
     * @NgModule({
     *   imports: [
     *     ProductSummaryAccountSelectorWidgetModule ,
     *   ],
     *   ...
     * })
     * export class AppModule {}
     * ```
     */
    var ProductSummaryAccountSelectorWidgetModule = /** @class */ (function () {
        function ProductSummaryAccountSelectorWidgetModule() {
        }
        return ProductSummaryAccountSelectorWidgetModule;
    }());
    ProductSummaryAccountSelectorWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ProductSummaryAccountSelectorWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorWidgetModule, declarations: [ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorItemComponent, ProductSummaryAccountSelectorDropdownCustomizableDirective,
            ProductSummaryAccountSelectorItemCustomizableDirective,
            ProductSummaryAccountSelectorLoadingCustomizableDirective,
            ProductSummaryAccountSelectorStateCustomizableDirective,
            ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective], imports: [i3$1.CommonModule,
            i12.FormsModule, i1__namespace$3.BackbaseCoreModule, i1$1.ProductItemCustomModule,
            i1$1.ProductKindModule,
            i1$1.AccountStateModule,
            i4.AccountSelectorModule,
            i5.InputCheckboxModule,
            productItemBasicAccount.ProductItemBasicAccountModule,
            i7.EmptyStateModule,
            i8.LoadingIndicatorModule,
            i10.EllipsisModule,
            i1$1.ProductNumberModule,
            i2.AmountModule,
            i3.ValidationModule,
            i3.DatePipeModule], exports: [ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorItemComponent, ProductSummaryAccountSelectorDropdownCustomizableDirective,
            ProductSummaryAccountSelectorItemCustomizableDirective,
            ProductSummaryAccountSelectorLoadingCustomizableDirective,
            ProductSummaryAccountSelectorStateCustomizableDirective,
            ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, i1$1.ProductItemCustomModule,
            i1$1.ProductKindModule,
            i1$1.AccountStateModule,
            i4.AccountSelectorModule,
            i5.InputCheckboxModule,
            productItemBasicAccount.ProductItemBasicAccountModule,
            i7.EmptyStateModule,
            i8.LoadingIndicatorModule,
            i10.EllipsisModule,
            i1$1.ProductNumberModule,
            i2.AmountModule,
            i3.ValidationModule,
            i3.DatePipeModule] });
    ProductSummaryAccountSelectorWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorWidgetModule, providers: __spreadArray(__spreadArray([], __read(services)), __read(productSummaryAccountSelectorConfigProviders)), imports: [__spreadArray([
                i3$1.CommonModule,
                i12.FormsModule,
                i1$3.BackbaseCoreModule.withConfig({
                    classMap: { ProductSummaryAccountSelectorWidgetComponent: ProductSummaryAccountSelectorWidgetComponent },
                })
            ], __read(uiModules)), i1$1.ProductItemCustomModule,
            i1$1.ProductKindModule,
            i1$1.AccountStateModule,
            i4.AccountSelectorModule,
            i5.InputCheckboxModule,
            productItemBasicAccount.ProductItemBasicAccountModule,
            i7.EmptyStateModule,
            i8.LoadingIndicatorModule,
            i10.EllipsisModule,
            i1$1.ProductNumberModule,
            i2.AmountModule,
            i3.ValidationModule,
            i3.DatePipeModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountSelectorWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([
                            i3$1.CommonModule,
                            i12.FormsModule,
                            i1$3.BackbaseCoreModule.withConfig({
                                classMap: { ProductSummaryAccountSelectorWidgetComponent: ProductSummaryAccountSelectorWidgetComponent },
                            })
                        ], __read(uiModules)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(uiModules)),
                        providers: __spreadArray(__spreadArray([], __read(services)), __read(productSummaryAccountSelectorConfigProviders)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN = BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN;
    exports.ProductKindsAccessDenied = ProductKindsAccessDenied;
    exports.ProductKindsBadRequest = ProductKindsBadRequest;
    exports.ProductKindsUnknownError = ProductKindsUnknownError;
    exports.ProductSummaryAccountSelectorDropdownCustomizableDirective = ProductSummaryAccountSelectorDropdownCustomizableDirective;
    exports.ProductSummaryAccountSelectorItemComponent = ProductSummaryAccountSelectorItemComponent;
    exports.ProductSummaryAccountSelectorItemCustomizableDirective = ProductSummaryAccountSelectorItemCustomizableDirective;
    exports.ProductSummaryAccountSelectorLoadingCustomizableDirective = ProductSummaryAccountSelectorLoadingCustomizableDirective;
    exports.ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective = ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective;
    exports.ProductSummaryAccountSelectorStateCustomizableDirective = ProductSummaryAccountSelectorStateCustomizableDirective;
    exports.ProductSummaryAccountSelectorWidgetComponent = ProductSummaryAccountSelectorWidgetComponent;
    exports.ProductSummaryAccountSelectorWidgetModule = ProductSummaryAccountSelectorWidgetModule;
    exports.ProductSummaryService = ProductSummaryService;
    exports.WidgetProperty = WidgetProperty;
    exports.productSummaryAccountSelectorConfigProviders = productSummaryAccountSelectorConfigProviders;
    exports.productSummaryAccountSelectorDefaults = productSummaryAccountSelectorDefaults;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-product-summary-account-selector-widget-ang.umd.js.map
