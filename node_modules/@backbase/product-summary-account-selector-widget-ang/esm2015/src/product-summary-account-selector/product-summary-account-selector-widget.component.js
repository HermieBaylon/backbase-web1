import { Component, Output, EventEmitter, Directive, Inject, Input, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Observable, combineLatest, BehaviorSubject, Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
import { ProductSummaryService } from '../product-summary.service';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import { BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN } from '../model/providers';
import { WidgetProperty } from '../model/constants';
import { modelItemToBoolean, getAccountAlias, processErrorMessages, getRouteParameter, hasExternalInfo, ResponsiveContainerComponent, } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../product-summary.service";
import * as i3 from "@backbase/product-summary-common-ang";
import * as i4 from "@backbase/ui-ang/account-selector";
import * as i5 from "@backbase/ui-ang/input-checkbox";
import * as i6 from "../product-summary-account-selector-item/product-summary-account-selector-item.component";
import * as i7 from "@backbase/ui-ang/empty-state";
import * as i8 from "@backbase/ui-ang/loading-indicator";
import * as i9 from "@backbase/product-summary-ui";
import * as i10 from "@backbase/ui-ang/ellipsis";
import * as i11 from "@angular/common";
import * as i12 from "@angular/forms";
/**
 * A widget for selecting a user's Account (Retail).
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryAccountSelectorWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'account-list',
 *           properties: {
 *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 *
 * ### Communicate the selected account ID when it changes (standalone model)
 *
 * Using the `RouteParam` communication transport:
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'account-list',
 *           properties: {
 *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
 *             'output.selectedAccount': 'navigation:account-selector-product-details-container',
 *           },
 *         },
 *         {
 *           name: 'my-widget',
 *           properties: {
 *             classId: 'MyWidgetComponent',
 *             'input.selectedAccountId': RouteParam.toProperty('selectedAccount'),
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 *
 * @ngModule ProductSummaryAccountSelectorWidgetModule
 */
export class ProductSummaryAccountSelectorWidgetComponent extends ResponsiveContainerComponent {
    /**
     * Constructor
     *
     * @param route
     * @param service
     * @param productsExternalInfoService
     * @param element
     * @param changeDetector
     * @param eventBusService
     * @param settings
     */
    constructor(route, service, productsExternalInfoService, element, changeDetector, eventBusService, settings) {
        super(element, changeDetector);
        this.route = route;
        this.service = service;
        this.productsExternalInfoService = productsExternalInfoService;
        this.element = element;
        this.changeDetector = changeDetector;
        this.eventBusService = eventBusService;
        this.settings = settings;
        this.hostRef = this;
        /**
         * Subject for the garbage collector
         */
        this.gc$ = new Subject();
        /**
         * The ID or IDs (a comma separated list) of the selected account
         * taken from the selectedAccount route param
         */
        this.productId = getRouteParameter(this.route, 'selectedAccount');
        /**
         * Used to display the error occured during loading of accounts
         */
        this.error = this.service.error;
        /**
         * A method to return the alias of the given account
         */
        this.getAlias = getAccountAlias;
        /**
         * Returns true if product has external info
         */
        this.hasExternalInfo = hasExternalInfo;
        this.registeredRefreshAccountsListEvents = [];
        this.refreshAccountsListHandler = this.refreshAccountsList.bind(this);
        /**
         * The list of accounts to display in the dropdown.
         */
        this.accounts = new Observable(subscriber => {
            const subscriptions = [];
            subscriptions.push(this.service.accountsList.subscribe(products => {
                subscriber.next(products);
                if (products === null || products === void 0 ? void 0 : products.some(hasExternalInfo)) {
                    subscriptions.push(this.productsExternalInfoService
                        .getProductsWithExternalInfo(products)
                        .subscribe(productsWithExternalData => subscriber.next(productsWithExternalData), subscriber.error));
                }
            }, subscriber.error));
            return () => subscriptions.forEach(subscription => subscription.unsubscribe());
        }).pipe(tap(accounts => this.accountsList.next(accounts)));
        this.accountsList = new Subject();
        /**
         * Select multiple accounts
         * Set to `true` to allow the bank customer to select more than one arrangement at a time.
         */
        this.multiple = new BehaviorSubject(false);
        /**
         * Enables bank customers to filter the arrangements that are presented in the dropdown.
         * Set to `true` to show Filter. Set to `false` to show Search.
         */
        this.filterItems = new BehaviorSubject(true);
        /**
         * Defines whether the account status is displayed for the selected account
         */
        this.showAccountState$ = new BehaviorSubject(true);
        /**
         * Emits the ID of the account selected by the bank customer as a string.
         */
        this.selectedAccount = new EventEmitter();
        /**
         * An event emitter to extend payload with product kind
         */
        this.selectedKind = new EventEmitter();
        /**
         * The method processed error messages to display in the template.
         */
        this.processErrorMessages = processErrorMessages;
    }
    /**
     * Comma separated list of event names to subscribe to perform accounts refresh
     */
    set refreshAccountListEvent(value) {
        this.clearRefreshAccountsListEvents();
        if (value) {
            this.registeredRefreshAccountsListEvents = value.replace(/ /g, '').split(',');
            this.registeredRefreshAccountsListEvents.forEach(eventName => {
                this.eventBusService.subscribe(eventName, this.refreshAccountsListHandler);
            });
        }
    }
    set multipleValue(value) {
        this.multiple.next(modelItemToBoolean(value));
    }
    set filterItemsValue(value) {
        this.filterItems.next(modelItemToBoolean(value));
    }
    set showAccountStateValue(value) {
        this.showAccountState$.next(modelItemToBoolean(value));
    }
    refreshAccountsList() {
        this.service.refreshAccountsList();
    }
    clearRefreshAccountsListEvents() {
        this.registeredRefreshAccountsListEvents.forEach(eventName => {
            this.eventBusService.unsubscribe(eventName, this.refreshAccountsListHandler);
        });
        this.registeredRefreshAccountsListEvents = [];
    }
    combineLatestSub() {
        return combineLatest(this.accountsList, this.productId, this.multiple)
            .pipe(takeUntil(this.gc$))
            .subscribe(([accounts, productId, multiple]) => {
            if (accounts) {
                this.selectedAccountState = undefined;
                if (multiple) {
                    const productIdArray = productId.split(',');
                    this.accountSelected = accounts
                        ? accounts.filter((account) => account.id === undefined || productIdArray.includes(account.id))
                        : [];
                    this.selectedAccountState = this.mapAccountState(this.accountSelected[0]);
                }
                else {
                    this.accountSelected = accounts ? accounts.find((product) => product.id === productId) : undefined;
                    this.selectedAccountState = this.mapAccountState(this.accountSelected);
                }
            }
            this.changeDetector.markForCheck();
        });
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.combineLatestSub();
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @internal
     */
    ngOnDestroy() {
        this.clearRefreshAccountsListEvents();
        this.gc$.next();
        this.gc$.complete();
    }
    /**
     * Maps product state to AccountState
     *
     * @param item
     */
    mapAccountState(item) {
        if (item && item.state && item.state.state) {
            const productState = item.state.state;
            return this.settings.states.find(value => productState.toLocaleLowerCase() === value.stateName.toLocaleLowerCase() &&
                !this.settings.notToDisplayStateList.includes(productState));
        }
        return undefined;
    }
    /**
     * Event handler for the `change` event of `bb-account-selector-ui`
     * emits a string of comma-separated account ids to `selectedAccount` and `selectedKind`
     *
     * @param item
     */
    onAccountSelected(item) {
        if (!this.isProduct(item)) {
            // this checking here is because of a bug in `ng-select`.
            // `ng-select` in multi-select mode if its 'filter' was changed
            // sends "onClose" an Event object instead of the real elements
            return;
        }
        this.selectedAccountState = undefined;
        this.accountSelected = item;
        if (Array.isArray(item)) {
            this.selectedAccountState = this.mapAccountState(item[0]);
            this.selectedAccount.emit(item.map(account => account.id).join(','));
            this.selectedKind.emit(item.map(account => account.kind).join(','));
        }
        else {
            this.selectedAccountState = this.mapAccountState(item);
            this.selectedAccount.emit(item.id);
            this.selectedKind.emit(item.kind);
        }
    }
    /**
     * Comparing given Products by `id` property.
     */
    compareProductsById(product1, product2) {
        return this.isProduct(product1) && this.isProduct(product2) && product1.id === product2.id;
    }
    /**
     * Returns `true` if product alias includes `value`, otherwise `false`
     */
    isInProductAlias(value, product) {
        const searchTerm = value.toLowerCase();
        const productAlias = (this.getAlias(product) || '').toLowerCase();
        return productAlias.includes(searchTerm);
    }
    /**
     * Returns balance for the given product
     */
    getProductBalance(product) {
        var _a, _b;
        return (_b = (_a = product.bookedBalance) !== null && _a !== void 0 ? _a : product.principalAmount) !== null && _b !== void 0 ? _b : product.currentInvestmentValue;
    }
    /**
     * Returns sync date of external info for the given product
     */
    getExternalInfoSyncDate(product) {
        return hasExternalInfo(product) ? product === null || product === void 0 ? void 0 : product.lastSyncDate : undefined;
    }
    isProduct(item) {
        if (Array.isArray(item) && item.length === 0) {
            return true; // handles the case with an empty array input (when all the items are unselected in multiple mode)
        }
        const product = Array.isArray(item) ? item[0] : item;
        return typeof product === 'object' && 'id' in product;
    }
}
ProductSummaryAccountSelectorWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.ProductSummaryService }, { token: i3.ProductsExternalInfoService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: PUBSUB }, { token: BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN }], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryAccountSelectorWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorWidgetComponent, selector: "bb-product-summary-account-selector-widget", inputs: { refreshAccountListEvent: ["event.refreshAccountsList", "refreshAccountListEvent"], multipleValue: ["multiple", "multipleValue"], filterItemsValue: ["filterItems", "filterItemsValue"], showAccountStateValue: ["showAccountState", "showAccountStateValue"] }, outputs: { selectedAccount: "selectedAccount", selectedKind: "selectedKind" }, providers: [ProductSummaryService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"accounts | async as accounts; else loadingTemplate\">\n  <ng-container\n    bbAccountSelectorDropdownCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"accounts\"\n>\n  </ng-container>\n</ng-container>\n\n<!-- Account Selector Dropdown template -->\n<ng-template\n  bbAccountSelectorDropdownCustomizable\n  let-hostRef\n  let-accounts=\"context\"\n>\n  <bb-account-selector-ui\n    class=\"bb-product-summary-account-selector\"\n    [items]=\"accounts\"\n    [dropdownPosition]=\"'bottom'\"\n    [selectedItems]=\"hostRef.accountSelected\"\n    [multiple]=\"hostRef.multiple | async\"\n    [closeOnSelect]=\"(hostRef.multiple | async) === false\"\n    (change)=\"hostRef.onAccountSelected($event)\"\n    [filterItems]=\"hostRef.filterItems | async\"\n    [compareItemsWith]=\"hostRef.compareProductsById.bind(hostRef)\"\n    [searchFunc]=\"hostRef.isInProductAlias.bind(hostRef)\"\n    data-role=\"accountSelector\"\n    placeholder=\"Select Account(s)\"\n    i18n-placeholder=\"Select Account(s)|Select Accounts placeholder\n      @@product-summary-account-selector.empty.state.placeholder\"\n  >\n    <ng-template\n      bbCustomSingleSelectedItemLabel\n      let-item=\"item\"\n    >\n      <ng-container\n        bbAccountSelectorItemCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"item\"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomMultiSelectedItemsLabel\n      let-items=\"items\">\n      <ng-container\n        bbAccountSelectorMultiSelectedItemsCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{items: items, accounts: accounts}\">\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomOptionItem\n      let-item=\"item\"\n      let-item$=\"item$\"\n      let-index=\"index\"\n    >\n      <ng-container *ngIf=\"hostRef.multiple | async\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-product-item__details\">\n            <bb-input-checkbox-ui\n              [id]=\"index\"\n              [ngModel]=\"item$.selected\"\n              (click)=\"$event.preventDefault()\"\n            >\n            </bb-input-checkbox-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--fill bb-ellipsis bb-ellipsis--single-line\">\n            <ng-container\n              bbAccountSelectorItemCustomizable\n              [bbHostRef]=\"hostRef\"\n              [bbTemplateContext]=\"item\"\n            >\n            </ng-container>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(hostRef.multiple | async) === false\">\n        <ng-container\n          bbAccountSelectorItemCustomizable\n          [bbHostRef]=\"hostRef\"\n          [bbTemplateContext]=\"item\"\n        >\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </bb-account-selector-ui>\n</ng-template>\n\n<!-- Product summary account selector item template -->\n<ng-template\n  bbAccountSelectorItemCustomizable\n  let-hostRef\n  let-item=\"context\"\n>\n  <bb-product-summary-account-selector-item\n    [type]=\"item?.productKindName\"\n    [title]=\"hostRef.getAlias(item)\"\n    [amount]=\"hostRef.getProductBalance(item)\"\n    [currency]=\"item?.currency\"\n    [status]=\"item?.state?.state\"\n    [productNumber]=\"item | bbProductNumberValue\"\n    [productNumberType]=\"item | bbProductNumberType\"\n    [showExternalInfo]=\"hostRef.hasExternalInfo(item)\"\n    [externalLogo]=\"item?.financialInstitution?.logo\"\n    [externalName]=\"item?.financialInstitution?.name\"\n    [externalSyncDate]=\"hostRef.getExternalInfoSyncDate(item)\"\n    [isCollapsedView]=\"hostRef.responsiveView === 'mobile'\"\n  ></bb-product-summary-account-selector-item>\n</ng-template>\n\n<!-- Product summary loading template -->\n<ng-template #loadingTemplate>\n  <ng-container\n    bbAccountSelectorLoadingCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n    <div></div>\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorLoadingCustomizable\n  let-hostRef\n>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@product.details.loadingAccounts\"\n      [text]=\"'Loading Accounts...'\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-container\n  bbAccountSelectorStateCustomizable\n  [bbHostRef]=\"hostRef\"\n>\n</ng-container>\n\n<ng-template\n  bbAccountSelectorStateCustomizable\n  let-hostRef\n>\n  <bb-account-state-ui\n    *ngIf=\"hostRef.selectedAccountState\"\n    [isDisplayingAlert]=\"(hostRef.showAccountState$ | async) && ((hostRef.multiple | async) === false)\"\n    [item]=\"hostRef.selectedAccountState\"\n  >\n  <span i18n=\"@@product-summary-account-selector.account-state.message\">\n      {hostRef.selectedAccountState?.severity, select, warning {This account is temporarily\n        inactive. For more info please contact your bank.} error {This account is permanently disabled. For more info please\n        contact your bank.}}\n  </span>\n  </bb-account-state-ui>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorMultiSelectedItemsCustomizable\n  let-hostRef\n  let-items=\"context.items\"\n  let-accounts=\"context.accounts\"\n>\n  <div class=\"bb-account-selector__selected\">\n    <div class=\"bb-account-selector__selected-accounts-number bb-text-bold\">\n      <span i18n=\"Selected Accounts|Selected Accounts multi label @@bb-product-summary-account-selector.multi.label\">\n        { items.length, plural, =1 {1 account selected} other {{{accounts.length === items.length ? 'All' : items.length}} accounts selected}}\n      </span>\n    </div>\n    <div class=\"bb-account-selector__selected-accounts bb-text-subtitle\">\n      <ng-container *ngIf=\"accounts.length === items.length; else selectedAccountsTemplate\">\n        {{ items.length }}\n        <span\n          i18n=\"\n             All Selected Accounts|All Selected Accounts label @@product-summary-account-selector.allSelectedAccounts.label\n          \"\n          class=\"bb-account-selector__selected-account\"\n        >\n          accounts\n        </span>\n      </ng-container>\n      <ng-template #selectedAccountsTemplate>\n        <bb-ellipsis-ui>\n          <ng-container *ngFor=\"let item of items; let i = index\">\n                <span class=\"bb-account-selector__selected-account\"\n                >{{ hostRef.getAlias(item)\n                  }}<span *ngIf=\"i !== items.length - 1\" class=\"bb-account-selector__selected-account-separator\">, </span>\n                </span>\n          </ng-container>\n        </bb-ellipsis-ui>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0.forwardRef(function () { return i5.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return i6.ProductSummaryAccountSelectorItemComponent; }), selector: "bb-product-summary-account-selector-item", inputs: ["isCollapsedView", "productNumberType", "showExternalInfo", "externalLogo", "externalName", "externalSyncDate"] }, { type: i0.forwardRef(function () { return i7.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i8.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i9.AccountStateComponent; }), selector: "bb-account-state-ui", inputs: ["isDisplayingAlert", "item"] }, { type: i0.forwardRef(function () { return i10.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i0.forwardRef(function () { return i11.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorDropdownCustomizableDirective; }), selector: "[bbAccountSelectorDropdownCustomizable]" }, { type: i0.forwardRef(function () { return i4.CustomSingleSelectedItemLabelDirective; }), selector: "ng-template[bbCustomSingleSelectedItemLabel]" }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorItemCustomizableDirective; }), selector: "[bbAccountSelectorItemCustomizable]" }, { type: i0.forwardRef(function () { return i4.CustomMultiSelectedItemsLabelDirective; }), selector: "ng-template[bbCustomMultiSelectedItemsLabel]" }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective; }), selector: "[bbAccountSelectorMultiSelectedItemsCustomizable]" }, { type: i0.forwardRef(function () { return i4.CustomOptionItemDirective; }), selector: "ng-template[bbCustomOptionItem]" }, { type: i0.forwardRef(function () { return i12.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i12.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorLoadingCustomizableDirective; }), selector: "[bbAccountSelectorLoadingCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorStateCustomizableDirective; }), selector: "[bbAccountSelectorStateCustomizable]" }, { type: i0.forwardRef(function () { return i11.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0.forwardRef(function () { return i11.AsyncPipe; }), "bbProductNumberValue": i0.forwardRef(function () { return i3.ProductNumberValuePipe; }), "bbProductNumberType": i0.forwardRef(function () { return i3.ProductNumberTypePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-account-selector-widget',
                    templateUrl: 'product-summary-account-selector-widget.component.html',
                    providers: [ProductSummaryService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.ProductSummaryService }, { type: i3.ProductsExternalInfoService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN]
                }] }]; }, propDecorators: { refreshAccountListEvent: [{
                type: Input,
                args: [WidgetProperty.EVENT_REFRESH_ACCOUNT_LIST]
            }], multipleValue: [{
                type: Input,
                args: [WidgetProperty.MULTIPLE]
            }], filterItemsValue: [{
                type: Input,
                args: [WidgetProperty.FILTER_ITEMS]
            }], showAccountStateValue: [{
                type: Input,
                args: [WidgetProperty.SHOW_ACCOUNT_STATE]
            }], selectedAccount: [{
                type: Output
            }], selectedKind: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing the entire selector
 *
 * @usageNotes
 *
 * ### Customize the account selector
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorDropdownCustomizable
 *   let-hostRef
 *   let-accounts="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export class ProductSummaryAccountSelectorDropdownCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorDropdownCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorDropdownCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorDropdownCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorDropdownCustomizableDirective, selector: "[bbAccountSelectorDropdownCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorDropdownCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorDropdownCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing an account selector item
 * This slot is used for displaying items in the dropdown list and
 * in the selected account (single-select only)
 *
 * @usageNotes
 *
 * ### Customize an account selector item
 *
 * ```html
 *  <ng-template
 *    bbAccountSelectorItemCustomizable
 *    let-hostRef
 *    let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export class ProductSummaryAccountSelectorItemCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorItemCustomizableDirective, selector: "[bbAccountSelectorItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorItemCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing selected accounts
 * in multi-select mode
 *
 * @usageNotes
 *
 * ### Customize the selected accounts
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorMultiSelectedItemsCustomizable
 *   let-hostRef
 *   let-items="context.items"
 *   let-accounts="context.accounts">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export class ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, selector: "[bbAccountSelectorMultiSelectedItemsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorMultiSelectedItemsCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the loader
 *
 * @usageNotes
 *
 * ### Customize the account selector
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorLoadingCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export class ProductSummaryAccountSelectorLoadingCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorLoadingCustomizableDirective, selector: "[bbAccountSelectorLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorLoadingCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the state of the selected account
 *
 * @usageNotes
 *
 * ### Customize the account state
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorStateCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
export class ProductSummaryAccountSelectorStateCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorStateCustomizableDirective, selector: "[bbAccountSelectorStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorStateCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3Itd2lkZ2V0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3Itd2lkZ2V0LWFuZy9zcmMvcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3IvcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3Itd2lkZ2V0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3Itd2lkZ2V0LWFuZy9zcmMvcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3IvcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3Itd2lkZ2V0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBR1QsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEVBRVQsTUFBTSxFQUNOLEtBQUssR0FFTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDekYsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFVLE1BQU0sa0NBQWtDLENBQUM7QUFHbEUsT0FBTyxFQUFFLHVDQUF1QyxFQUF1QyxNQUFNLG9CQUFvQixDQUFDO0FBQ2xILE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBS0wsa0JB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bEUsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUNBQXFDO2lCQUNoRDs7QUFLRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUlILE1BQU0sT0FBTyxvRUFBcUUsU0FBUSxVQUd6Rjs7a0tBSFksb0VBQW9FO3NKQUFwRSxvRUFBb0U7NEZBQXBFLG9FQUFvRTtrQkFIaEYsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbURBQW1EO2lCQUM5RDs7QUFLRDs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUlILE1BQU0sT0FBTyx5REFBMEQsU0FBUSxVQUc5RTs7dUpBSFkseURBQXlEOzJJQUF6RCx5REFBeUQ7NEZBQXpELHlEQUF5RDtrQkFIckUsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsd0NBQXdDO2lCQUNuRDs7QUFLRDs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUlILE1BQU0sT0FBTyx1REFBd0QsU0FBUSxVQUc1RTs7cUpBSFksdURBQXVEO3lJQUF2RCx1REFBdUQ7NEZBQXZELHVEQUF1RDtrQkFIbkUsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0NBQXNDO2lCQUNqRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBEaXJlY3RpdmUsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBJbmplY3QsXG4gIElucHV0LFxuICBFbGVtZW50UmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBjb21iaW5lTGF0ZXN0LCBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQcm9kdWN0U3VtbWFyeVNlcnZpY2UgfSBmcm9tICcuLi9wcm9kdWN0LXN1bW1hcnkuc2VydmljZSc7XG5pbXBvcnQgeyBQVUJTVUIsIFB1YnN1YiB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy93ZWItc2RrJztcblxuaW1wb3J0IHsgUHJvZHVjdEtpbmRzRXJyb3IgfSBmcm9tICcuLi9wcm9kdWN0LXN1bW1hcnktZXJyb3InO1xuaW1wb3J0IHsgQkJfUFJEU1VNX0FDQ09VTlRfU0VMRUNUT1JfQ09ORklHX1RPS0VOLCBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvckNvbmZpZyB9IGZyb20gJy4uL21vZGVsL3Byb3ZpZGVycyc7XG5pbXBvcnQgeyBXaWRnZXRQcm9wZXJ0eSB9IGZyb20gJy4uL21vZGVsL2NvbnN0YW50cyc7XG5pbXBvcnQge1xuICBBcnJhbmdlbWVudCxcbiAgUHJvZHVjdEtpbmQsXG4gIFByb2R1Y3QsXG4gIEFjY291bnRTdGF0ZSxcbiAgbW9kZWxJdGVtVG9Cb29sZWFuLFxuICBnZXRBY2NvdW50QWxpYXMsXG4gIHByb2Nlc3NFcnJvck1lc3NhZ2VzLFxuICBnZXRSb3V0ZVBhcmFtZXRlcixcbiAgaGFzRXh0ZXJuYWxJbmZvLFxuICBQcm9kdWN0c0V4dGVybmFsSW5mb1NlcnZpY2UsXG4gIFJlc3BvbnNpdmVDb250YWluZXJDb21wb25lbnQsXG59IGZyb20gJ0BiYWNrYmFzZS9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZyc7XG5cbi8qKlxuICogQSB3aWRnZXQgZm9yIHNlbGVjdGluZyBhIHVzZXIncyBBY2NvdW50IChSZXRhaWwpLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEluY2x1ZGUgdGhpcyB3aWRnZXQgaW4geW91ciBgQXBwTW9kdWxlYDpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JXaWRnZXRNb2R1bGUsXG4gKiAgIF0sXG4gKiAgIC4uLlxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cbiAqIGBgYFxuICpcbiAqICMjIyBJbmNsdWRlIHRoaXMgd2lkZ2V0IChzdGFuZGFsb25lIG1vZGVsKVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGV4cG9ydCBjb25zdCBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQgPSB7XG4gKiAgIC4uLlxuICogICBib290c3RyYXA6IHtcbiAqICAgICBwYWdlTW9kZWw6IHtcbiAqICAgICAgIG5hbWU6ICdyb290JyxcbiAqICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICogICAgICAgY2hpbGRyZW46IFtcbiAqICAgICAgICAge1xuICogICAgICAgICAgIG5hbWU6ICdhY2NvdW50LWxpc3QnLFxuICogICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAqICAgICAgICAgICAgIGNsYXNzSWQ6ICdQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldENvbXBvbmVudCcsXG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgfSxcbiAqICAgICAgIF0sXG4gKiAgICAgfSxcbiAqICAgfSxcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiAjIyMgQ29tbXVuaWNhdGUgdGhlIHNlbGVjdGVkIGFjY291bnQgSUQgd2hlbiBpdCBjaGFuZ2VzIChzdGFuZGFsb25lIG1vZGVsKVxuICpcbiAqIFVzaW5nIHRoZSBgUm91dGVQYXJhbWAgY29tbXVuaWNhdGlvbiB0cmFuc3BvcnQ6XG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogZXhwb3J0IGNvbnN0IGVudmlyb25tZW50OiBFbnZpcm9ubWVudCA9IHtcbiAqICAgLi4uXG4gKiAgIGJvb3RzdHJhcDoge1xuICogICAgIHBhZ2VNb2RlbDoge1xuICogICAgICAgbmFtZTogJ3Jvb3QnLFxuICogICAgICAgcHJvcGVydGllczoge30sXG4gKiAgICAgICBjaGlsZHJlbjogW1xuICogICAgICAgICB7XG4gKiAgICAgICAgICAgbmFtZTogJ2FjY291bnQtbGlzdCcsXG4gKiAgICAgICAgICAgcHJvcGVydGllczoge1xuICogICAgICAgICAgICAgY2xhc3NJZDogJ1Byb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yV2lkZ2V0Q29tcG9uZW50JyxcbiAqICAgICAgICAgICAgICdvdXRwdXQuc2VsZWN0ZWRBY2NvdW50JzogJ25hdmlnYXRpb246YWNjb3VudC1zZWxlY3Rvci1wcm9kdWN0LWRldGFpbHMtY29udGFpbmVyJyxcbiAqICAgICAgICAgICB9LFxuICogICAgICAgICB9LFxuICogICAgICAgICB7XG4gKiAgICAgICAgICAgbmFtZTogJ215LXdpZGdldCcsXG4gKiAgICAgICAgICAgcHJvcGVydGllczoge1xuICogICAgICAgICAgICAgY2xhc3NJZDogJ015V2lkZ2V0Q29tcG9uZW50JyxcbiAqICAgICAgICAgICAgICdpbnB1dC5zZWxlY3RlZEFjY291bnRJZCc6IFJvdXRlUGFyYW0udG9Qcm9wZXJ0eSgnc2VsZWN0ZWRBY2NvdW50JyksXG4gKiAgICAgICAgICAgfSxcbiAqICAgICAgICAgfSxcbiAqICAgICAgIF0sXG4gKiAgICAgfSxcbiAqICAgfSxcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBAbmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JXaWRnZXRNb2R1bGVcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3Itd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICdwcm9kdWN0LXN1bW1hcnktYWNjb3VudC1zZWxlY3Rvci13aWRnZXQuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtQcm9kdWN0U3VtbWFyeVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldENvbXBvbmVudCBleHRlbmRzIFJlc3BvbnNpdmVDb250YWluZXJDb21wb25lbnRcbiAgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHJlYWRvbmx5IGhvc3RSZWY6IFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yV2lkZ2V0Q29tcG9uZW50ID0gdGhpcztcbiAgLyoqXG4gICAqIFN1YmplY3QgZm9yIHRoZSBnYXJiYWdlIGNvbGxlY3RvclxuICAgKi9cbiAgZ2MkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgLyoqXG4gICAqIFRoZSBJRCBvciBJRHMgKGEgY29tbWEgc2VwYXJhdGVkIGxpc3QpIG9mIHRoZSBzZWxlY3RlZCBhY2NvdW50XG4gICAqIHRha2VuIGZyb20gdGhlIHNlbGVjdGVkQWNjb3VudCByb3V0ZSBwYXJhbVxuICAgKi9cbiAgcmVhZG9ubHkgcHJvZHVjdElkOiBPYnNlcnZhYmxlPHN0cmluZz4gPSBnZXRSb3V0ZVBhcmFtZXRlcih0aGlzLnJvdXRlLCAnc2VsZWN0ZWRBY2NvdW50Jyk7XG4gIC8qKlxuICAgKiBVc2VkIHRvIGRpc3BsYXkgdGhlIGVycm9yIG9jY3VyZWQgZHVyaW5nIGxvYWRpbmcgb2YgYWNjb3VudHNcbiAgICovXG4gIHJlYWRvbmx5IGVycm9yOiBPYnNlcnZhYmxlPFByb2R1Y3RLaW5kc0Vycm9yIHwgdW5kZWZpbmVkPiA9IHRoaXMuc2VydmljZS5lcnJvcjtcbiAgLyoqXG4gICAqIEEgbWV0aG9kIHRvIHJldHVybiB0aGUgYWxpYXMgb2YgdGhlIGdpdmVuIGFjY291bnRcbiAgICovXG4gIHJlYWRvbmx5IGdldEFsaWFzOiAoYWNjb3VudDogYW55KSA9PiBzdHJpbmcgfCB1bmRlZmluZWQgPSBnZXRBY2NvdW50QWxpYXM7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgcHJvZHVjdCBoYXMgZXh0ZXJuYWwgaW5mb1xuICAgKi9cbiAgcmVhZG9ubHkgaGFzRXh0ZXJuYWxJbmZvOiAocHJvZHVjdDogQXJyYW5nZW1lbnQpID0+IGJvb2xlYW4gPSBoYXNFeHRlcm5hbEluZm87XG5cbiAgcHJpdmF0ZSByZWdpc3RlcmVkUmVmcmVzaEFjY291bnRzTGlzdEV2ZW50czogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSByZWZyZXNoQWNjb3VudHNMaXN0SGFuZGxlciA9IHRoaXMucmVmcmVzaEFjY291bnRzTGlzdC5iaW5kKHRoaXMpO1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgYWNjb3VudHMgdG8gZGlzcGxheSBpbiB0aGUgZHJvcGRvd24uXG4gICAqL1xuICBwdWJsaWMgYWNjb3VudHM6IE9ic2VydmFibGU8UHJvZHVjdFtdIHwgdW5kZWZpbmVkPiA9IG5ldyBPYnNlcnZhYmxlPFByb2R1Y3RbXSB8IHVuZGVmaW5lZD4oc3Vic2NyaWJlciA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgICBzdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLnNlcnZpY2UuYWNjb3VudHNMaXN0LnN1YnNjcmliZShwcm9kdWN0cyA9PiB7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dChwcm9kdWN0cyk7XG5cbiAgICAgICAgaWYgKHByb2R1Y3RzPy5zb21lKGhhc0V4dGVybmFsSW5mbykpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICAgICAgICB0aGlzLnByb2R1Y3RzRXh0ZXJuYWxJbmZvU2VydmljZVxuICAgICAgICAgICAgICAuZ2V0UHJvZHVjdHNXaXRoRXh0ZXJuYWxJbmZvKHByb2R1Y3RzKVxuICAgICAgICAgICAgICAuc3Vic2NyaWJlKHByb2R1Y3RzV2l0aEV4dGVybmFsRGF0YSA9PiBzdWJzY3JpYmVyLm5leHQocHJvZHVjdHNXaXRoRXh0ZXJuYWxEYXRhKSwgc3Vic2NyaWJlci5lcnJvciksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSwgc3Vic2NyaWJlci5lcnJvciksXG4gICAgKTtcbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XG4gIH0pLnBpcGUodGFwKGFjY291bnRzID0+IHRoaXMuYWNjb3VudHNMaXN0Lm5leHQoYWNjb3VudHMpKSk7XG4gIHByaXZhdGUgYWNjb3VudHNMaXN0ID0gbmV3IFN1YmplY3Q8UHJvZHVjdFtdIHwgdW5kZWZpbmVkPigpO1xuICAvKipcbiAgICogQSBzZWxlY3RlZCBhY2NvdW50IG9yIGEgbGlzdCBvZiBhY2NvdW50c1xuICAgKi9cbiAgcHVibGljIGFjY291bnRTZWxlY3RlZDogUHJvZHVjdFtdIHwgUHJvZHVjdCB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIHRvIGRpc3BsYXkgYSBtZXNzYWdlIGFib3V0IHRoZSBzZWxlY3RlZCBhY2NvdW50IHN0YXRlIGJlbG93IHRoZSBhY2NvdW50IHNlbGVjdG9yLlxuICAgKlxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHB1YmxpYyBzZWxlY3RlZEFjY291bnRTdGF0ZTogQWNjb3VudFN0YXRlIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0gcm91dGVcbiAgICogQHBhcmFtIHNlcnZpY2VcbiAgICogQHBhcmFtIHByb2R1Y3RzRXh0ZXJuYWxJbmZvU2VydmljZVxuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKiBAcGFyYW0gY2hhbmdlRGV0ZWN0b3JcbiAgICogQHBhcmFtIGV2ZW50QnVzU2VydmljZVxuICAgKiBAcGFyYW0gc2V0dGluZ3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VydmljZTogUHJvZHVjdFN1bW1hcnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvZHVjdHNFeHRlcm5hbEluZm9TZXJ2aWNlOiBQcm9kdWN0c0V4dGVybmFsSW5mb1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBASW5qZWN0KFBVQlNVQikgcHJpdmF0ZSByZWFkb25seSBldmVudEJ1c1NlcnZpY2U6IFB1YnN1YixcbiAgICBASW5qZWN0KEJCX1BSRFNVTV9BQ0NPVU5UX1NFTEVDVE9SX0NPTkZJR19UT0tFTikgcmVhZG9ubHkgc2V0dGluZ3M6IFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yQ29uZmlnLFxuICApIHtcbiAgICBzdXBlcihlbGVtZW50LCBjaGFuZ2VEZXRlY3Rvcik7XG4gIH1cbiAgLyoqXG4gICAqIENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGV2ZW50IG5hbWVzIHRvIHN1YnNjcmliZSB0byBwZXJmb3JtIGFjY291bnRzIHJlZnJlc2hcbiAgICovXG4gIEBJbnB1dChXaWRnZXRQcm9wZXJ0eS5FVkVOVF9SRUZSRVNIX0FDQ09VTlRfTElTVCkgc2V0IHJlZnJlc2hBY2NvdW50TGlzdEV2ZW50KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNsZWFyUmVmcmVzaEFjY291bnRzTGlzdEV2ZW50cygpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5yZWdpc3RlcmVkUmVmcmVzaEFjY291bnRzTGlzdEV2ZW50cyA9IHZhbHVlLnJlcGxhY2UoLyAvZywgJycpLnNwbGl0KCcsJyk7XG4gICAgICB0aGlzLnJlZ2lzdGVyZWRSZWZyZXNoQWNjb3VudHNMaXN0RXZlbnRzLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgICAgdGhpcy5ldmVudEJ1c1NlcnZpY2Uuc3Vic2NyaWJlKGV2ZW50TmFtZSwgdGhpcy5yZWZyZXNoQWNjb3VudHNMaXN0SGFuZGxlcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdCBtdWx0aXBsZSBhY2NvdW50c1xuICAgKiBTZXQgdG8gYHRydWVgIHRvIGFsbG93IHRoZSBiYW5rIGN1c3RvbWVyIHRvIHNlbGVjdCBtb3JlIHRoYW4gb25lIGFycmFuZ2VtZW50IGF0IGEgdGltZS5cbiAgICovXG4gIHJlYWRvbmx5IG11bHRpcGxlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gIEBJbnB1dChXaWRnZXRQcm9wZXJ0eS5NVUxUSVBMRSkgc2V0IG11bHRpcGxlVmFsdWUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm11bHRpcGxlLm5leHQobW9kZWxJdGVtVG9Cb29sZWFuKHZhbHVlKSk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZXMgYmFuayBjdXN0b21lcnMgdG8gZmlsdGVyIHRoZSBhcnJhbmdlbWVudHMgdGhhdCBhcmUgcHJlc2VudGVkIGluIHRoZSBkcm9wZG93bi5cbiAgICogU2V0IHRvIGB0cnVlYCB0byBzaG93IEZpbHRlci4gU2V0IHRvIGBmYWxzZWAgdG8gc2hvdyBTZWFyY2guXG4gICAqL1xuICByZWFkb25seSBmaWx0ZXJJdGVtcyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG4gIEBJbnB1dChXaWRnZXRQcm9wZXJ0eS5GSUxURVJfSVRFTVMpIHNldCBmaWx0ZXJJdGVtc1ZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5maWx0ZXJJdGVtcy5uZXh0KG1vZGVsSXRlbVRvQm9vbGVhbih2YWx1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZXMgd2hldGhlciB0aGUgYWNjb3VudCBzdGF0dXMgaXMgZGlzcGxheWVkIGZvciB0aGUgc2VsZWN0ZWQgYWNjb3VudFxuICAgKi9cbiAgcmVhZG9ubHkgc2hvd0FjY291bnRTdGF0ZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KHRydWUpO1xuICBASW5wdXQoV2lkZ2V0UHJvcGVydHkuU0hPV19BQ0NPVU5UX1NUQVRFKSBzZXQgc2hvd0FjY291bnRTdGF0ZVZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5zaG93QWNjb3VudFN0YXRlJC5uZXh0KG1vZGVsSXRlbVRvQm9vbGVhbih2YWx1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIHRoZSBJRCBvZiB0aGUgYWNjb3VudCBzZWxlY3RlZCBieSB0aGUgYmFuayBjdXN0b21lciBhcyBhIHN0cmluZy5cbiAgICovXG4gIEBPdXRwdXQoKSBzZWxlY3RlZEFjY291bnQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgLyoqXG4gICAqIEFuIGV2ZW50IGVtaXR0ZXIgdG8gZXh0ZW5kIHBheWxvYWQgd2l0aCBwcm9kdWN0IGtpbmRcbiAgICovXG4gIEBPdXRwdXQoKSBzZWxlY3RlZEtpbmQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgcHJvY2Vzc2VkIGVycm9yIG1lc3NhZ2VzIHRvIGRpc3BsYXkgaW4gdGhlIHRlbXBsYXRlLlxuICAgKi9cbiAgcHJvY2Vzc0Vycm9yTWVzc2FnZXM6IChtZXNzYWdlczogc3RyaW5nW10gfCB1bmRlZmluZWQpID0+IHN0cmluZyB8IHVuZGVmaW5lZCA9IHByb2Nlc3NFcnJvck1lc3NhZ2VzO1xuXG4gIHByaXZhdGUgcmVmcmVzaEFjY291bnRzTGlzdCgpIHtcbiAgICB0aGlzLnNlcnZpY2UucmVmcmVzaEFjY291bnRzTGlzdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhclJlZnJlc2hBY2NvdW50c0xpc3RFdmVudHMoKSB7XG4gICAgdGhpcy5yZWdpc3RlcmVkUmVmcmVzaEFjY291bnRzTGlzdEV2ZW50cy5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICB0aGlzLmV2ZW50QnVzU2VydmljZS51bnN1YnNjcmliZShldmVudE5hbWUsIHRoaXMucmVmcmVzaEFjY291bnRzTGlzdEhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHRoaXMucmVnaXN0ZXJlZFJlZnJlc2hBY2NvdW50c0xpc3RFdmVudHMgPSBbXTtcbiAgfVxuXG4gIHByaXZhdGUgY29tYmluZUxhdGVzdFN1YigpIHtcbiAgICByZXR1cm4gY29tYmluZUxhdGVzdCh0aGlzLmFjY291bnRzTGlzdCwgdGhpcy5wcm9kdWN0SWQsIHRoaXMubXVsdGlwbGUpXG4gICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5nYyQpKVxuICAgICAgLnN1YnNjcmliZSgoW2FjY291bnRzLCBwcm9kdWN0SWQsIG11bHRpcGxlXTogW1Byb2R1Y3RbXSB8IHVuZGVmaW5lZCwgc3RyaW5nLCBib29sZWFuXSkgPT4ge1xuICAgICAgICBpZiAoYWNjb3VudHMpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkQWNjb3VudFN0YXRlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgY29uc3QgcHJvZHVjdElkQXJyYXkgPSBwcm9kdWN0SWQuc3BsaXQoJywnKTtcbiAgICAgICAgICAgIHRoaXMuYWNjb3VudFNlbGVjdGVkID0gYWNjb3VudHNcbiAgICAgICAgICAgICAgPyBhY2NvdW50cy5maWx0ZXIoKGFjY291bnQ6IFByb2R1Y3QpID0+IGFjY291bnQuaWQgPT09IHVuZGVmaW5lZCB8fCBwcm9kdWN0SWRBcnJheS5pbmNsdWRlcyhhY2NvdW50LmlkKSlcbiAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBY2NvdW50U3RhdGUgPSB0aGlzLm1hcEFjY291bnRTdGF0ZSh0aGlzLmFjY291bnRTZWxlY3RlZFswXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWNjb3VudFNlbGVjdGVkID0gYWNjb3VudHMgPyBhY2NvdW50cy5maW5kKChwcm9kdWN0OiBQcm9kdWN0KSA9PiBwcm9kdWN0LmlkID09PSBwcm9kdWN0SWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEFjY291bnRTdGF0ZSA9IHRoaXMubWFwQWNjb3VudFN0YXRlKHRoaXMuYWNjb3VudFNlbGVjdGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jb21iaW5lTGF0ZXN0U3ViKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFudXBzIGp1c3QgYmVmb3JlIEFuZ3VsYXIgZGVzdHJveXMgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFyUmVmcmVzaEFjY291bnRzTGlzdEV2ZW50cygpO1xuICAgIHRoaXMuZ2MkLm5leHQoKTtcbiAgICB0aGlzLmdjJC5jb21wbGV0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBNYXBzIHByb2R1Y3Qgc3RhdGUgdG8gQWNjb3VudFN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtXG4gICAqL1xuICBtYXBBY2NvdW50U3RhdGUoaXRlbTogUHJvZHVjdCB8IHVuZGVmaW5lZCk6IEFjY291bnRTdGF0ZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5zdGF0ZSAmJiBpdGVtLnN0YXRlLnN0YXRlKSB7XG4gICAgICBjb25zdCBwcm9kdWN0U3RhdGUgPSBpdGVtLnN0YXRlLnN0YXRlO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Muc3RhdGVzLmZpbmQoXG4gICAgICAgIHZhbHVlID0+XG4gICAgICAgICAgcHJvZHVjdFN0YXRlLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHZhbHVlLnN0YXRlTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpICYmXG4gICAgICAgICAgIXRoaXMuc2V0dGluZ3Mubm90VG9EaXNwbGF5U3RhdGVMaXN0LmluY2x1ZGVzKHByb2R1Y3RTdGF0ZSksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciB0aGUgYGNoYW5nZWAgZXZlbnQgb2YgYGJiLWFjY291bnQtc2VsZWN0b3ItdWlgXG4gICAqIGVtaXRzIGEgc3RyaW5nIG9mIGNvbW1hLXNlcGFyYXRlZCBhY2NvdW50IGlkcyB0byBgc2VsZWN0ZWRBY2NvdW50YCBhbmQgYHNlbGVjdGVkS2luZGBcbiAgICpcbiAgICogQHBhcmFtIGl0ZW1cbiAgICovXG4gIG9uQWNjb3VudFNlbGVjdGVkKGl0ZW06IFByb2R1Y3QgfCBQcm9kdWN0W10pIHtcbiAgICBpZiAoIXRoaXMuaXNQcm9kdWN0KGl0ZW0pKSB7XG4gICAgICAvLyB0aGlzIGNoZWNraW5nIGhlcmUgaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBgbmctc2VsZWN0YC5cbiAgICAgIC8vIGBuZy1zZWxlY3RgIGluIG11bHRpLXNlbGVjdCBtb2RlIGlmIGl0cyAnZmlsdGVyJyB3YXMgY2hhbmdlZFxuICAgICAgLy8gc2VuZHMgXCJvbkNsb3NlXCIgYW4gRXZlbnQgb2JqZWN0IGluc3RlYWQgb2YgdGhlIHJlYWwgZWxlbWVudHNcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZWxlY3RlZEFjY291bnRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFjY291bnRTZWxlY3RlZCA9IGl0ZW07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBY2NvdW50U3RhdGUgPSB0aGlzLm1hcEFjY291bnRTdGF0ZShpdGVtWzBdKTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBY2NvdW50LmVtaXQoaXRlbS5tYXAoYWNjb3VudCA9PiBhY2NvdW50LmlkKS5qb2luKCcsJykpO1xuICAgICAgdGhpcy5zZWxlY3RlZEtpbmQuZW1pdChpdGVtLm1hcChhY2NvdW50ID0+IGFjY291bnQua2luZCkuam9pbignLCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZEFjY291bnRTdGF0ZSA9IHRoaXMubWFwQWNjb3VudFN0YXRlKGl0ZW0pO1xuICAgICAgdGhpcy5zZWxlY3RlZEFjY291bnQuZW1pdChpdGVtLmlkKTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRLaW5kLmVtaXQoaXRlbS5raW5kKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcGFyaW5nIGdpdmVuIFByb2R1Y3RzIGJ5IGBpZGAgcHJvcGVydHkuXG4gICAqL1xuICBjb21wYXJlUHJvZHVjdHNCeUlkKHByb2R1Y3QxOiBQcm9kdWN0LCBwcm9kdWN0MjogUHJvZHVjdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzUHJvZHVjdChwcm9kdWN0MSkgJiYgdGhpcy5pc1Byb2R1Y3QocHJvZHVjdDIpICYmIHByb2R1Y3QxLmlkID09PSBwcm9kdWN0Mi5pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBwcm9kdWN0IGFsaWFzIGluY2x1ZGVzIGB2YWx1ZWAsIG90aGVyd2lzZSBgZmFsc2VgXG4gICAqL1xuICBpc0luUHJvZHVjdEFsaWFzKHZhbHVlOiBzdHJpbmcsIHByb2R1Y3Q6IFByb2R1Y3QpOiBib29sZWFuIHtcbiAgICBjb25zdCBzZWFyY2hUZXJtID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBwcm9kdWN0QWxpYXMgPSAodGhpcy5nZXRBbGlhcyhwcm9kdWN0KSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gcHJvZHVjdEFsaWFzLmluY2x1ZGVzKHNlYXJjaFRlcm0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYmFsYW5jZSBmb3IgdGhlIGdpdmVuIHByb2R1Y3RcbiAgICovXG4gIGdldFByb2R1Y3RCYWxhbmNlKHByb2R1Y3Q6IFByb2R1Y3QpOiBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBwcm9kdWN0LmJvb2tlZEJhbGFuY2UgPz8gcHJvZHVjdC5wcmluY2lwYWxBbW91bnQgPz8gcHJvZHVjdC5jdXJyZW50SW52ZXN0bWVudFZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgc3luYyBkYXRlIG9mIGV4dGVybmFsIGluZm8gZm9yIHRoZSBnaXZlbiBwcm9kdWN0XG4gICAqL1xuICBnZXRFeHRlcm5hbEluZm9TeW5jRGF0ZShwcm9kdWN0OiBQcm9kdWN0KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gaGFzRXh0ZXJuYWxJbmZvKHByb2R1Y3QpID8gcHJvZHVjdD8ubGFzdFN5bmNEYXRlIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1Byb2R1Y3QoaXRlbTogUHJvZHVjdCB8IFByb2R1Y3RbXSk6IGJvb2xlYW4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pICYmIGl0ZW0ubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTsgLy8gaGFuZGxlcyB0aGUgY2FzZSB3aXRoIGFuIGVtcHR5IGFycmF5IGlucHV0ICh3aGVuIGFsbCB0aGUgaXRlbXMgYXJlIHVuc2VsZWN0ZWQgaW4gbXVsdGlwbGUgbW9kZSlcbiAgICB9XG4gICAgY29uc3QgcHJvZHVjdDogUHJvZHVjdCB8IFByb2R1Y3RbXSA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtWzBdIDogaXRlbTtcbiAgICByZXR1cm4gdHlwZW9mIHByb2R1Y3QgPT09ICdvYmplY3QnICYmICdpZCcgaW4gcHJvZHVjdDtcbiAgfVxufVxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4dGVuc2lvbiBzbG90IHRvIGJlIHVzZWQgZm9yIGN1c3RvbWl6aW5nIHRoZSBlbnRpcmUgc2VsZWN0b3JcbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqICMjIyBDdXN0b21pemUgdGhlIGFjY291bnQgc2VsZWN0b3JcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctdGVtcGxhdGVcbiAqICAgYmJBY2NvdW50U2VsZWN0b3JEcm9wZG93bkN1c3RvbWl6YWJsZVxuICogICBsZXQtaG9zdFJlZlxuICogICBsZXQtYWNjb3VudHM9XCJjb250ZXh0XCI+XG4gKiAgIFlvdXIgY3VzdG9tIHRlbXBsYXRlIGhlcmVcbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqXG4gKiBATmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JXaWRnZXRNb2R1bGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiQWNjb3VudFNlbGVjdG9yRHJvcGRvd25DdXN0b21pemFibGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JEcm9wZG93bkN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yV2lkZ2V0Q29tcG9uZW50LFxuICBQcm9kdWN0S2luZFxuPiB7fVxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4dGVuc2lvbiBzbG90IHRvIGJlIHVzZWQgZm9yIGN1c3RvbWl6aW5nIGFuIGFjY291bnQgc2VsZWN0b3IgaXRlbVxuICogVGhpcyBzbG90IGlzIHVzZWQgZm9yIGRpc3BsYXlpbmcgaXRlbXMgaW4gdGhlIGRyb3Bkb3duIGxpc3QgYW5kXG4gKiBpbiB0aGUgc2VsZWN0ZWQgYWNjb3VudCAoc2luZ2xlLXNlbGVjdCBvbmx5KVxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEN1c3RvbWl6ZSBhbiBhY2NvdW50IHNlbGVjdG9yIGl0ZW1cbiAqXG4gKiBgYGBodG1sXG4gKiAgPG5nLXRlbXBsYXRlXG4gKiAgICBiYkFjY291bnRTZWxlY3Rvckl0ZW1DdXN0b21pemFibGVcbiAqICAgIGxldC1ob3N0UmVmXG4gKiAgICBsZXQtaXRlbT1cImNvbnRleHRcIj5cbiAqICAgWW91ciBjdXN0b20gdGVtcGxhdGUgaGVyZVxuICogPC9uZy10ZW1wbGF0ZT5cbiAqIGBgYFxuICpcbiAqIEBOZ01vZHVsZSBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldE1vZHVsZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJBY2NvdW50U2VsZWN0b3JJdGVtQ3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9ySXRlbUN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yV2lkZ2V0Q29tcG9uZW50LFxuICBQcm9kdWN0S2luZFxuPiB7fVxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4dGVuc2lvbiBzbG90IHRvIGJlIHVzZWQgZm9yIGN1c3RvbWl6aW5nIHNlbGVjdGVkIGFjY291bnRzXG4gKiBpbiBtdWx0aS1zZWxlY3QgbW9kZVxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEN1c3RvbWl6ZSB0aGUgc2VsZWN0ZWQgYWNjb3VudHNcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctdGVtcGxhdGVcbiAqICAgYmJBY2NvdW50U2VsZWN0b3JNdWx0aVNlbGVjdGVkSXRlbXNDdXN0b21pemFibGVcbiAqICAgbGV0LWhvc3RSZWZcbiAqICAgbGV0LWl0ZW1zPVwiY29udGV4dC5pdGVtc1wiXG4gKiAgIGxldC1hY2NvdW50cz1cImNvbnRleHQuYWNjb3VudHNcIj5cbiAqICAgWW91ciBjdXN0b20gdGVtcGxhdGUgaGVyZVxuICogPC9uZy10ZW1wbGF0ZT5cbiAqIGBgYFxuICpcbiAqIEBOZ01vZHVsZSBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldE1vZHVsZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJBY2NvdW50U2VsZWN0b3JNdWx0aVNlbGVjdGVkSXRlbXNDdXN0b21pemFibGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JNdWx0aVNlbGVjdGVkSXRlbXNDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldENvbXBvbmVudCxcbiAgeyBpdGVtczogUHJvZHVjdEtpbmRbXTsgYWNjb3VudHM6IFByb2R1Y3RbXSB9XG4+IHt9XG4vKipcbiAqIFRoaXMgaXMgYW4gZXh0ZW5zaW9uIHNsb3QgdG8gYmUgdXNlZCBmb3IgY3VzdG9taXppbmcgdGhlIGxvYWRlclxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEN1c3RvbWl6ZSB0aGUgYWNjb3VudCBzZWxlY3RvclxuICpcbiAqIGBgYGh0bWxcbiAqIDxuZy10ZW1wbGF0ZVxuICogICBiYkFjY291bnRTZWxlY3RvckxvYWRpbmdDdXN0b21pemFibGVcbiAqICAgbGV0LWhvc3RSZWY+XG4gKiAgIFlvdXIgY3VzdG9tIHRlbXBsYXRlIGhlcmVcbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqXG4gKiBATmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JXaWRnZXRNb2R1bGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiQWNjb3VudFNlbGVjdG9yTG9hZGluZ0N1c3RvbWl6YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvckxvYWRpbmdDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldENvbXBvbmVudCxcbiAgdW5kZWZpbmVkXG4+IHt9XG4vKipcbiAqIFRoaXMgaXMgYW4gZXh0ZW5zaW9uIHNsb3QgdG8gYmUgdXNlZCBmb3IgY3VzdG9taXppbmcgdGhlIHN0YXRlIG9mIHRoZSBzZWxlY3RlZCBhY2NvdW50XG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgQ3VzdG9taXplIHRoZSBhY2NvdW50IHN0YXRlXG4gKlxuICogYGBgaHRtbFxuICogPG5nLXRlbXBsYXRlXG4gKiAgIGJiQWNjb3VudFNlbGVjdG9yU3RhdGVDdXN0b21pemFibGVcbiAqICAgbGV0LWhvc3RSZWY+XG4gKiAgIFlvdXIgY3VzdG9tIHRlbXBsYXRlIGhlcmVcbiAqIDwvbmctdGVtcGxhdGU+XG4gKiBgYGBcbiAqXG4gKiBATmdNb2R1bGUgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JXaWRnZXRNb2R1bGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiQWNjb3VudFNlbGVjdG9yU3RhdGVDdXN0b21pemFibGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdFN1bW1hcnlBY2NvdW50U2VsZWN0b3JTdGF0ZUN1c3RvbWl6YWJsZURpcmVjdGl2ZSBleHRlbmRzIEJiVGVtcGxhdGU8XG4gIFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yV2lkZ2V0Q29tcG9uZW50LFxuICB1bmRlZmluZWRcbj4ge31cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJhY2NvdW50cyB8IGFzeW5jIGFzIGFjY291bnRzOyBlbHNlIGxvYWRpbmdUZW1wbGF0ZVwiPlxuICA8bmctY29udGFpbmVyXG4gICAgYmJBY2NvdW50U2VsZWN0b3JEcm9wZG93bkN1c3RvbWl6YWJsZVxuICAgIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiXG4gICAgW2JiVGVtcGxhdGVDb250ZXh0XT1cImFjY291bnRzXCJcbj5cbiAgPC9uZy1jb250YWluZXI+XG48L25nLWNvbnRhaW5lcj5cblxuPCEtLSBBY2NvdW50IFNlbGVjdG9yIERyb3Bkb3duIHRlbXBsYXRlIC0tPlxuPG5nLXRlbXBsYXRlXG4gIGJiQWNjb3VudFNlbGVjdG9yRHJvcGRvd25DdXN0b21pemFibGVcbiAgbGV0LWhvc3RSZWZcbiAgbGV0LWFjY291bnRzPVwiY29udGV4dFwiXG4+XG4gIDxiYi1hY2NvdW50LXNlbGVjdG9yLXVpXG4gICAgY2xhc3M9XCJiYi1wcm9kdWN0LXN1bW1hcnktYWNjb3VudC1zZWxlY3RvclwiXG4gICAgW2l0ZW1zXT1cImFjY291bnRzXCJcbiAgICBbZHJvcGRvd25Qb3NpdGlvbl09XCInYm90dG9tJ1wiXG4gICAgW3NlbGVjdGVkSXRlbXNdPVwiaG9zdFJlZi5hY2NvdW50U2VsZWN0ZWRcIlxuICAgIFttdWx0aXBsZV09XCJob3N0UmVmLm11bHRpcGxlIHwgYXN5bmNcIlxuICAgIFtjbG9zZU9uU2VsZWN0XT1cIihob3N0UmVmLm11bHRpcGxlIHwgYXN5bmMpID09PSBmYWxzZVwiXG4gICAgKGNoYW5nZSk9XCJob3N0UmVmLm9uQWNjb3VudFNlbGVjdGVkKCRldmVudClcIlxuICAgIFtmaWx0ZXJJdGVtc109XCJob3N0UmVmLmZpbHRlckl0ZW1zIHwgYXN5bmNcIlxuICAgIFtjb21wYXJlSXRlbXNXaXRoXT1cImhvc3RSZWYuY29tcGFyZVByb2R1Y3RzQnlJZC5iaW5kKGhvc3RSZWYpXCJcbiAgICBbc2VhcmNoRnVuY109XCJob3N0UmVmLmlzSW5Qcm9kdWN0QWxpYXMuYmluZChob3N0UmVmKVwiXG4gICAgZGF0YS1yb2xlPVwiYWNjb3VudFNlbGVjdG9yXCJcbiAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBBY2NvdW50KHMpXCJcbiAgICBpMThuLXBsYWNlaG9sZGVyPVwiU2VsZWN0IEFjY291bnQocyl8U2VsZWN0IEFjY291bnRzIHBsYWNlaG9sZGVyXG4gICAgICBAQHByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LXNlbGVjdG9yLmVtcHR5LnN0YXRlLnBsYWNlaG9sZGVyXCJcbiAgPlxuICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgYmJDdXN0b21TaW5nbGVTZWxlY3RlZEl0ZW1MYWJlbFxuICAgICAgbGV0LWl0ZW09XCJpdGVtXCJcbiAgICA+XG4gICAgICA8bmctY29udGFpbmVyXG4gICAgICAgIGJiQWNjb3VudFNlbGVjdG9ySXRlbUN1c3RvbWl6YWJsZVxuICAgICAgICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICAgICAgICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwiaXRlbVwiXG4gICAgICA+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLXRlbXBsYXRlPlxuXG4gICAgPG5nLXRlbXBsYXRlXG4gICAgICBiYkN1c3RvbU11bHRpU2VsZWN0ZWRJdGVtc0xhYmVsXG4gICAgICBsZXQtaXRlbXM9XCJpdGVtc1wiPlxuICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICBiYkFjY291bnRTZWxlY3Rvck11bHRpU2VsZWN0ZWRJdGVtc0N1c3RvbWl6YWJsZVxuICAgICAgICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICAgICAgICBbYmJUZW1wbGF0ZUNvbnRleHRdPVwie2l0ZW1zOiBpdGVtcywgYWNjb3VudHM6IGFjY291bnRzfVwiPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy10ZW1wbGF0ZT5cblxuICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgYmJDdXN0b21PcHRpb25JdGVtXG4gICAgICBsZXQtaXRlbT1cIml0ZW1cIlxuICAgICAgbGV0LWl0ZW0kPVwiaXRlbSRcIlxuICAgICAgbGV0LWluZGV4PVwiaW5kZXhcIlxuICAgID5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJob3N0UmVmLm11bHRpcGxlIHwgYXN5bmNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJiLXN0YWNrXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJiLXN0YWNrX19pdGVtIGJiLXByb2R1Y3QtaXRlbV9fZGV0YWlsc1wiPlxuICAgICAgICAgICAgPGJiLWlucHV0LWNoZWNrYm94LXVpXG4gICAgICAgICAgICAgIFtpZF09XCJpbmRleFwiXG4gICAgICAgICAgICAgIFtuZ01vZGVsXT1cIml0ZW0kLnNlbGVjdGVkXCJcbiAgICAgICAgICAgICAgKGNsaWNrKT1cIiRldmVudC5wcmV2ZW50RGVmYXVsdCgpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvYmItaW5wdXQtY2hlY2tib3gtdWk+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJiLXN0YWNrX19pdGVtIGJiLXN0YWNrX19pdGVtLS1maWxsIGJiLWVsbGlwc2lzIGJiLWVsbGlwc2lzLS1zaW5nbGUtbGluZVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICBiYkFjY291bnRTZWxlY3Rvckl0ZW1DdXN0b21pemFibGVcbiAgICAgICAgICAgICAgW2JiSG9zdFJlZl09XCJob3N0UmVmXCJcbiAgICAgICAgICAgICAgW2JiVGVtcGxhdGVDb250ZXh0XT1cIml0ZW1cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiKGhvc3RSZWYubXVsdGlwbGUgfCBhc3luYykgPT09IGZhbHNlXCI+XG4gICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICBiYkFjY291bnRTZWxlY3Rvckl0ZW1DdXN0b21pemFibGVcbiAgICAgICAgICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICAgICAgICAgIFtiYlRlbXBsYXRlQ29udGV4dF09XCJpdGVtXCJcbiAgICAgICAgPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIDwvYmItYWNjb3VudC1zZWxlY3Rvci11aT5cbjwvbmctdGVtcGxhdGU+XG5cbjwhLS0gUHJvZHVjdCBzdW1tYXJ5IGFjY291bnQgc2VsZWN0b3IgaXRlbSB0ZW1wbGF0ZSAtLT5cbjxuZy10ZW1wbGF0ZVxuICBiYkFjY291bnRTZWxlY3Rvckl0ZW1DdXN0b21pemFibGVcbiAgbGV0LWhvc3RSZWZcbiAgbGV0LWl0ZW09XCJjb250ZXh0XCJcbj5cbiAgPGJiLXByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LXNlbGVjdG9yLWl0ZW1cbiAgICBbdHlwZV09XCJpdGVtPy5wcm9kdWN0S2luZE5hbWVcIlxuICAgIFt0aXRsZV09XCJob3N0UmVmLmdldEFsaWFzKGl0ZW0pXCJcbiAgICBbYW1vdW50XT1cImhvc3RSZWYuZ2V0UHJvZHVjdEJhbGFuY2UoaXRlbSlcIlxuICAgIFtjdXJyZW5jeV09XCJpdGVtPy5jdXJyZW5jeVwiXG4gICAgW3N0YXR1c109XCJpdGVtPy5zdGF0ZT8uc3RhdGVcIlxuICAgIFtwcm9kdWN0TnVtYmVyXT1cIml0ZW0gfCBiYlByb2R1Y3ROdW1iZXJWYWx1ZVwiXG4gICAgW3Byb2R1Y3ROdW1iZXJUeXBlXT1cIml0ZW0gfCBiYlByb2R1Y3ROdW1iZXJUeXBlXCJcbiAgICBbc2hvd0V4dGVybmFsSW5mb109XCJob3N0UmVmLmhhc0V4dGVybmFsSW5mbyhpdGVtKVwiXG4gICAgW2V4dGVybmFsTG9nb109XCJpdGVtPy5maW5hbmNpYWxJbnN0aXR1dGlvbj8ubG9nb1wiXG4gICAgW2V4dGVybmFsTmFtZV09XCJpdGVtPy5maW5hbmNpYWxJbnN0aXR1dGlvbj8ubmFtZVwiXG4gICAgW2V4dGVybmFsU3luY0RhdGVdPVwiaG9zdFJlZi5nZXRFeHRlcm5hbEluZm9TeW5jRGF0ZShpdGVtKVwiXG4gICAgW2lzQ29sbGFwc2VkVmlld109XCJob3N0UmVmLnJlc3BvbnNpdmVWaWV3ID09PSAnbW9iaWxlJ1wiXG4gID48L2JiLXByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LXNlbGVjdG9yLWl0ZW0+XG48L25nLXRlbXBsYXRlPlxuXG48IS0tIFByb2R1Y3Qgc3VtbWFyeSBsb2FkaW5nIHRlbXBsYXRlIC0tPlxuPG5nLXRlbXBsYXRlICNsb2FkaW5nVGVtcGxhdGU+XG4gIDxuZy1jb250YWluZXJcbiAgICBiYkFjY291bnRTZWxlY3RvckxvYWRpbmdDdXN0b21pemFibGVcbiAgICBbYmJIb3N0UmVmXT1cImhvc3RSZWZcIlxuICA+XG4gICAgPGRpdj48L2Rpdj5cbiAgPC9uZy1jb250YWluZXI+XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGVcbiAgYmJBY2NvdW50U2VsZWN0b3JMb2FkaW5nQ3VzdG9taXphYmxlXG4gIGxldC1ob3N0UmVmXG4+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJob3N0UmVmLmVycm9yIHwgYXN5bmMgYXMgZXJyb3I7IGVsc2UgbG9hZGluZ1wiPlxuICAgIDxiYi1lbXB0eS1zdGF0ZS11aVxuICAgICAgdGl0bGU9XCJcIlxuICAgICAgW3N1YnRpdGxlXT1cImhvc3RSZWYucHJvY2Vzc0Vycm9yTWVzc2FnZXMoZXJyb3IubWVzc2FnZXMpXCJcbiAgICAgIGljb25Nb2RpZmllcj1cImVycm9yXCJcbiAgICAgIGljb25TaXplPVwieHhsXCJcbiAgICAgIGljb25Db2xvcj1cImdyYXlcIlxuICAgICAgaWNvbkNsYXNzZXM9XCJ0ZXh0LW11dGVkXCJcbiAgICA+PC9iYi1lbXB0eS1zdGF0ZS11aT5cbiAgPC9uZy1jb250YWluZXI+XG4gIDxuZy10ZW1wbGF0ZSAjbG9hZGluZz5cbiAgICA8YmItbG9hZGluZy1pbmRpY2F0b3ItdWlcbiAgICAgIGkxOG4tdGV4dD1cIkBAcHJvZHVjdC5kZXRhaWxzLmxvYWRpbmdBY2NvdW50c1wiXG4gICAgICBbdGV4dF09XCInTG9hZGluZyBBY2NvdW50cy4uLidcIlxuICAgID48L2JiLWxvYWRpbmctaW5kaWNhdG9yLXVpPlxuICA8L25nLXRlbXBsYXRlPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLWNvbnRhaW5lclxuICBiYkFjY291bnRTZWxlY3RvclN0YXRlQ3VzdG9taXphYmxlXG4gIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiXG4+XG48L25nLWNvbnRhaW5lcj5cblxuPG5nLXRlbXBsYXRlXG4gIGJiQWNjb3VudFNlbGVjdG9yU3RhdGVDdXN0b21pemFibGVcbiAgbGV0LWhvc3RSZWZcbj5cbiAgPGJiLWFjY291bnQtc3RhdGUtdWlcbiAgICAqbmdJZj1cImhvc3RSZWYuc2VsZWN0ZWRBY2NvdW50U3RhdGVcIlxuICAgIFtpc0Rpc3BsYXlpbmdBbGVydF09XCIoaG9zdFJlZi5zaG93QWNjb3VudFN0YXRlJCB8IGFzeW5jKSAmJiAoKGhvc3RSZWYubXVsdGlwbGUgfCBhc3luYykgPT09IGZhbHNlKVwiXG4gICAgW2l0ZW1dPVwiaG9zdFJlZi5zZWxlY3RlZEFjY291bnRTdGF0ZVwiXG4gID5cbiAgPHNwYW4gaTE4bj1cIkBAcHJvZHVjdC1zdW1tYXJ5LWFjY291bnQtc2VsZWN0b3IuYWNjb3VudC1zdGF0ZS5tZXNzYWdlXCI+XG4gICAgICB7aG9zdFJlZi5zZWxlY3RlZEFjY291bnRTdGF0ZT8uc2V2ZXJpdHksIHNlbGVjdCwgd2FybmluZyB7VGhpcyBhY2NvdW50IGlzIHRlbXBvcmFyaWx5XG4gICAgICAgIGluYWN0aXZlLiBGb3IgbW9yZSBpbmZvIHBsZWFzZSBjb250YWN0IHlvdXIgYmFuay59IGVycm9yIHtUaGlzIGFjY291bnQgaXMgcGVybWFuZW50bHkgZGlzYWJsZWQuIEZvciBtb3JlIGluZm8gcGxlYXNlXG4gICAgICAgIGNvbnRhY3QgeW91ciBiYW5rLn19XG4gIDwvc3Bhbj5cbiAgPC9iYi1hY2NvdW50LXN0YXRlLXVpPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlXG4gIGJiQWNjb3VudFNlbGVjdG9yTXVsdGlTZWxlY3RlZEl0ZW1zQ3VzdG9taXphYmxlXG4gIGxldC1ob3N0UmVmXG4gIGxldC1pdGVtcz1cImNvbnRleHQuaXRlbXNcIlxuICBsZXQtYWNjb3VudHM9XCJjb250ZXh0LmFjY291bnRzXCJcbj5cbiAgPGRpdiBjbGFzcz1cImJiLWFjY291bnQtc2VsZWN0b3JfX3NlbGVjdGVkXCI+XG4gICAgPGRpdiBjbGFzcz1cImJiLWFjY291bnQtc2VsZWN0b3JfX3NlbGVjdGVkLWFjY291bnRzLW51bWJlciBiYi10ZXh0LWJvbGRcIj5cbiAgICAgIDxzcGFuIGkxOG49XCJTZWxlY3RlZCBBY2NvdW50c3xTZWxlY3RlZCBBY2NvdW50cyBtdWx0aSBsYWJlbCBAQGJiLXByb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LXNlbGVjdG9yLm11bHRpLmxhYmVsXCI+XG4gICAgICAgIHsgaXRlbXMubGVuZ3RoLCBwbHVyYWwsID0xIHsxIGFjY291bnQgc2VsZWN0ZWR9IG90aGVyIHt7e2FjY291bnRzLmxlbmd0aCA9PT0gaXRlbXMubGVuZ3RoID8gJ0FsbCcgOiBpdGVtcy5sZW5ndGh9fSBhY2NvdW50cyBzZWxlY3RlZH19XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImJiLWFjY291bnQtc2VsZWN0b3JfX3NlbGVjdGVkLWFjY291bnRzIGJiLXRleHQtc3VidGl0bGVcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJhY2NvdW50cy5sZW5ndGggPT09IGl0ZW1zLmxlbmd0aDsgZWxzZSBzZWxlY3RlZEFjY291bnRzVGVtcGxhdGVcIj5cbiAgICAgICAge3sgaXRlbXMubGVuZ3RoIH19XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgaTE4bj1cIlxuICAgICAgICAgICAgIEFsbCBTZWxlY3RlZCBBY2NvdW50c3xBbGwgU2VsZWN0ZWQgQWNjb3VudHMgbGFiZWwgQEBwcm9kdWN0LXN1bW1hcnktYWNjb3VudC1zZWxlY3Rvci5hbGxTZWxlY3RlZEFjY291bnRzLmxhYmVsXG4gICAgICAgICAgXCJcbiAgICAgICAgICBjbGFzcz1cImJiLWFjY291bnQtc2VsZWN0b3JfX3NlbGVjdGVkLWFjY291bnRcIlxuICAgICAgICA+XG4gICAgICAgICAgYWNjb3VudHNcbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctdGVtcGxhdGUgI3NlbGVjdGVkQWNjb3VudHNUZW1wbGF0ZT5cbiAgICAgICAgPGJiLWVsbGlwc2lzLXVpPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXM7IGxldCBpID0gaW5kZXhcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImJiLWFjY291bnQtc2VsZWN0b3JfX3NlbGVjdGVkLWFjY291bnRcIlxuICAgICAgICAgICAgICAgID57eyBob3N0UmVmLmdldEFsaWFzKGl0ZW0pXG4gICAgICAgICAgICAgICAgICB9fTxzcGFuICpuZ0lmPVwiaSAhPT0gaXRlbXMubGVuZ3RoIC0gMVwiIGNsYXNzPVwiYmItYWNjb3VudC1zZWxlY3Rvcl9fc2VsZWN0ZWQtYWNjb3VudC1zZXBhcmF0b3JcIj4sIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvYmItZWxsaXBzaXMtdWk+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=