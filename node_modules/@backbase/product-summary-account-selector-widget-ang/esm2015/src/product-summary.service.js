import { Injectable } from '@angular/core';
import { BehaviorSubject, of, combineLatest } from 'rxjs';
import { isProductVisible, cacheRequest } from '@backbase/product-summary-common-ang';
import { parseError,
/* eslint-enable */
 } from './product-summary-error';
import { catchError, distinctUntilChanged, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/arrangements";
const defaultListParams = {};
/**
 * Service for fetching and storing accounts and properties from model.xml
 *
 * This service relies on providers from `ProductSummaryAccountSelectorWidgetModule`.
 *
 * @see ProductSummaryAccountSelectorWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryAccountSelectorWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryAccountSelectorWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
export class ProductSummaryService {
    /**
     * Constructor
     *
     * @param productSummaryDataService
     */
    constructor(productSummaryDataService) {
        this.productSummaryDataService = productSummaryDataService;
        /**
         * Used to store the error occured during loading of accounts
         */
        this.error = new BehaviorSubject(undefined);
        this.listParams = new BehaviorSubject(defaultListParams);
        this.listRefresh = new BehaviorSubject(false);
        /**
         * List of accounts fetched from the server
         */
        this.accountsList = combineLatest([
            this.listParams.pipe(distinctUntilChanged()),
            this.listRefresh,
        ]).pipe(cacheRequest(([params]) => this.getProductSummary(params)));
    }
    /**
     * Refreshes the list of accounts
     */
    refreshAccountsList() {
        this.listRefresh.next(true);
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.error.complete();
    }
    getProductSummary(params) {
        return this.productSummaryDataService.getProductSummary(params).pipe(map((res) => this.responseToProductList(res)), catchError((error) => {
            this.error.next(parseError(error));
            return of(undefined);
        }));
    }
    extractProducts(memo, { products }) {
        return memo.concat(products);
    }
    toProductKindList(res) {
        return Object.entries(res)
            .filter(([key]) => key !== 'aggregatedBalance')
            .map(([kind, value]) => {
            if (Array.isArray(value)) {
                value.products = value.reduce(this.extractProducts, []);
            }
            let products = [];
            if (value.products && Array.isArray(value.products)) {
                products = value.products.filter(isProductVisible).map((product) => (Object.assign(Object.assign({}, product), { kind })));
            }
            return { products };
        });
    }
    responseToProductList(res) {
        return this.toProductKindList(res).reduce(this.extractProducts, []);
    }
}
ProductSummaryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, deps: [{ token: i1.ProductSummaryHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1zdW1tYXJ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3Byb2R1Y3Qtc3VtbWFyeS1hY2NvdW50LXNlbGVjdG9yLXdpZGdldC1hbmcvc3JjL3Byb2R1Y3Qtc3VtbWFyeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFHdEQsT0FBTyxFQUFFLGVBQWUsRUFBYyxFQUFFLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBT3RFLE9BQU8sRUFBVyxnQkFBZ0IsRUFBZSxZQUFZLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUU1RyxPQUFPLEVBQ0wsVUFBVTtBQVVWLG1CQUFtQjtFQUNwQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUl2RSxNQUFNLGlCQUFpQixHQUFlLEVBQUUsQ0FBQztBQUV6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQStCRztBQUVILE1BQU0sT0FBTyxxQkFBcUI7SUFDaEM7Ozs7T0FJRztJQUNILFlBQTZCLHlCQUFvRDtRQUFwRCw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBRWpGOztXQUVHO1FBQ00sVUFBSyxHQUFHLElBQUksZUFBZSxDQUFnQyxTQUFTLENBQUMsQ0FBQztRQUU5RCxlQUFVLEdBQUcsSUFBSSxlQUFlLENBQWEsaUJBQWlCLENBQUMsQ0FBQztRQUNoRSxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTFEOztXQUVHO1FBQ00saUJBQVksR0FBc0MsYUFBYSxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDNUMsSUFBSSxDQUFDLFdBQVc7U0FDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBaEJnQixDQUFDO0lBa0JyRjs7T0FFRztJQUNJLG1CQUFtQjtRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRU8saUJBQWlCLENBQUMsTUFBc0M7UUFDOUQsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUNsRSxHQUFHLENBQUMsQ0FBQyxHQUFtQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDN0QsVUFBVSxDQUFDLENBQUMsS0FBd0IsRUFBRSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRU8sZUFBZSxDQUFDLElBQWUsRUFBRSxFQUFFLFFBQVEsRUFBMkI7UUFDNUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxHQUFtQjtRQUMzQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO2FBQ3ZCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxtQkFBbUIsQ0FBQzthQUM5QyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3JCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFzQixDQUFDLEVBQUU7Z0JBQ3pDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3pEO1lBQ0QsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDbkQsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFLENBQUMsaUNBQU0sT0FBTyxLQUFFLElBQUksSUFBRyxDQUFDLENBQUM7YUFDdEc7WUFDRCxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8scUJBQXFCLENBQUMsR0FBbUI7UUFDL0MsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7bUhBckVVLHFCQUFxQjt1SEFBckIscUJBQXFCOzRGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mLCBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIFByb2R1Y3RTdW1tYXJ5SHR0cFNlcnZpY2UsXG4gIFByb2R1Y3RTdW1tYXJ5LFxuICBHZXRQcm9kdWN0U3VtbWFyeVJlcXVlc3RQYXJhbXMsXG59IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hcnJhbmdlbWVudHMnO1xuaW1wb3J0IHsgUHJvZHVjdCwgaXNQcm9kdWN0VmlzaWJsZSwgUHJvZHVjdEtpbmQsIGNhY2hlUmVxdWVzdCB9IGZyb20gJ0BiYWNrYmFzZS9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZyc7XG5cbmltcG9ydCB7XG4gIHBhcnNlRXJyb3IsXG4gIFByb2R1Y3RLaW5kc0Vycm9yLFxuICAvKipcbiAgICogdGhlc2UgdW51c2VkIGltcG9ydHMgaGVyZSBiZWNhdXNlIG9mIGlzc3VlIGluIGFwaS1leHRyYWN0b3JcbiAgICogaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvcnVzaHN0YWNrL2lzc3Vlcy8yMTQwXG4gICAqL1xuICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsbm8tdW51c2VkLXZhcnMgKi9cbiAgUHJvZHVjdEtpbmRzQWNjZXNzRGVuaWVkLFxuICBQcm9kdWN0S2luZHNCYWRSZXF1ZXN0LFxuICBQcm9kdWN0S2luZHNVbmtub3duRXJyb3IsXG4gIC8qIGVzbGludC1lbmFibGUgKi9cbn0gZnJvbSAnLi9wcm9kdWN0LXN1bW1hcnktZXJyb3InO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IHR5cGUgTGlzdFBhcmFtcyA9IGFueTtcblxuY29uc3QgZGVmYXVsdExpc3RQYXJhbXM6IExpc3RQYXJhbXMgPSB7fTtcblxuLyoqXG4gKiBTZXJ2aWNlIGZvciBmZXRjaGluZyBhbmQgc3RvcmluZyBhY2NvdW50cyBhbmQgcHJvcGVydGllcyBmcm9tIG1vZGVsLnhtbFxuICpcbiAqIFRoaXMgc2VydmljZSByZWxpZXMgb24gcHJvdmlkZXJzIGZyb20gYFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yV2lkZ2V0TW9kdWxlYC5cbiAqXG4gKiBAc2VlIFByb2R1Y3RTdW1tYXJ5QWNjb3VudFNlbGVjdG9yV2lkZ2V0TW9kdWxlXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgRW5zdXJlIHRoZSBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldE1vZHVsZSBpcyBpbXBvcnRlZCB0byB5b3VyIGNvbXBvbmVudCBtb2R1bGVcbiAqXG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgLi4uXG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAuLi5cbiAqICAgICBQcm9kdWN0U3VtbWFyeUFjY291bnRTZWxlY3RvcldpZGdldE1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgTXlXaWRnZXRNb2R1bGUge31cbiAqIGBgYFxuICpcbiAqICMjIyBJbmplY3QgdGhpcyBzZXJ2aWNlIGludG8geW91ciBjb21wb25lbnRcbiAqXG4gKiBgYGB0c1xuICogQENvbXBvbmVudCh7XG4gKiAgIC4uLlxuICogICBwcm92aWRlcnM6IFtQcm9kdWN0U3VtbWFyeVNlcnZpY2VdLFxuICogfSlcbiAqICBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQge1xuICogYGBgXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm9kdWN0U3VtbWFyeVNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHByb2R1Y3RTdW1tYXJ5RGF0YVNlcnZpY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJvZHVjdFN1bW1hcnlEYXRhU2VydmljZTogUHJvZHVjdFN1bW1hcnlIdHRwU2VydmljZSkge31cblxuICAvKipcbiAgICogVXNlZCB0byBzdG9yZSB0aGUgZXJyb3Igb2NjdXJlZCBkdXJpbmcgbG9hZGluZyBvZiBhY2NvdW50c1xuICAgKi9cbiAgcmVhZG9ubHkgZXJyb3IgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFByb2R1Y3RLaW5kc0Vycm9yIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgbGlzdFBhcmFtcyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TGlzdFBhcmFtcz4oZGVmYXVsdExpc3RQYXJhbXMpO1xuICBwcml2YXRlIHJlYWRvbmx5IGxpc3RSZWZyZXNoID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgYWNjb3VudHMgZmV0Y2hlZCBmcm9tIHRoZSBzZXJ2ZXJcbiAgICovXG4gIHJlYWRvbmx5IGFjY291bnRzTGlzdDogT2JzZXJ2YWJsZTxQcm9kdWN0W10gfCB1bmRlZmluZWQ+ID0gY29tYmluZUxhdGVzdChbXG4gICAgdGhpcy5saXN0UGFyYW1zLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSksXG4gICAgdGhpcy5saXN0UmVmcmVzaCxcbiAgXSkucGlwZShjYWNoZVJlcXVlc3QoKFtwYXJhbXNdKSA9PiB0aGlzLmdldFByb2R1Y3RTdW1tYXJ5KHBhcmFtcykpKTtcblxuICAvKipcbiAgICogUmVmcmVzaGVzIHRoZSBsaXN0IG9mIGFjY291bnRzXG4gICAqL1xuICBwdWJsaWMgcmVmcmVzaEFjY291bnRzTGlzdCgpIHtcbiAgICB0aGlzLmxpc3RSZWZyZXNoLm5leHQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmVycm9yLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcml2YXRlIGdldFByb2R1Y3RTdW1tYXJ5KHBhcmFtczogR2V0UHJvZHVjdFN1bW1hcnlSZXF1ZXN0UGFyYW1zKTogT2JzZXJ2YWJsZTxQcm9kdWN0W10gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wcm9kdWN0U3VtbWFyeURhdGFTZXJ2aWNlLmdldFByb2R1Y3RTdW1tYXJ5KHBhcmFtcykucGlwZShcbiAgICAgIG1hcCgocmVzOiBQcm9kdWN0U3VtbWFyeSkgPT4gdGhpcy5yZXNwb25zZVRvUHJvZHVjdExpc3QocmVzKSksXG4gICAgICBjYXRjaEVycm9yKChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgICAgdGhpcy5lcnJvci5uZXh0KHBhcnNlRXJyb3IoZXJyb3IpKTtcbiAgICAgICAgcmV0dXJuIG9mKHVuZGVmaW5lZCk7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0UHJvZHVjdHMobWVtbzogUHJvZHVjdFtdLCB7IHByb2R1Y3RzIH06IHsgcHJvZHVjdHM6IFByb2R1Y3RbXSB9KTogUHJvZHVjdFtdIHtcbiAgICByZXR1cm4gbWVtby5jb25jYXQocHJvZHVjdHMpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b1Byb2R1Y3RLaW5kTGlzdChyZXM6IFByb2R1Y3RTdW1tYXJ5KTogUHJvZHVjdEtpbmRbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJlcylcbiAgICAgIC5maWx0ZXIoKFtrZXldKSA9PiBrZXkgIT09ICdhZ2dyZWdhdGVkQmFsYW5jZScpXG4gICAgICAubWFwKChba2luZCwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlIGFzIFByb2R1Y3RLaW5kW10pKSB7XG4gICAgICAgICAgdmFsdWUucHJvZHVjdHMgPSB2YWx1ZS5yZWR1Y2UodGhpcy5leHRyYWN0UHJvZHVjdHMsIFtdKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJvZHVjdHMgPSBbXTtcbiAgICAgICAgaWYgKHZhbHVlLnByb2R1Y3RzICYmIEFycmF5LmlzQXJyYXkodmFsdWUucHJvZHVjdHMpKSB7XG4gICAgICAgICAgcHJvZHVjdHMgPSB2YWx1ZS5wcm9kdWN0cy5maWx0ZXIoaXNQcm9kdWN0VmlzaWJsZSkubWFwKChwcm9kdWN0OiBQcm9kdWN0KSA9PiAoeyAuLi5wcm9kdWN0LCBraW5kIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBwcm9kdWN0cyB9O1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHJlc3BvbnNlVG9Qcm9kdWN0TGlzdChyZXM6IFByb2R1Y3RTdW1tYXJ5KTogUHJvZHVjdFtdIHtcbiAgICByZXR1cm4gdGhpcy50b1Byb2R1Y3RLaW5kTGlzdChyZXMpLnJlZHVjZSh0aGlzLmV4dHJhY3RQcm9kdWN0cywgW10pO1xuICB9XG59XG4iXX0=