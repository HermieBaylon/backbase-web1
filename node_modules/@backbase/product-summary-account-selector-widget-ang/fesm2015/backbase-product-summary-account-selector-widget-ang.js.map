{"version":3,"file":"backbase-product-summary-account-selector-widget-ang.js","sources":["../../../../libs/product-summary-account-selector-widget-ang/src/product-summary-error.ts","../../../../libs/product-summary-account-selector-widget-ang/src/product-summary.service.ts","../../../../libs/product-summary-account-selector-widget-ang/src/model/providers.ts","../../../../libs/product-summary-account-selector-widget-ang/src/model/constants.ts","../../../../libs/product-summary-account-selector-widget-ang/src/product-summary-account-selector-item/product-summary-account-selector-item.component.ts","../../../../libs/product-summary-account-selector-widget-ang/src/product-summary-account-selector-item/product-summary-account-selector-item.component.html","../../../../libs/product-summary-account-selector-widget-ang/src/product-summary-account-selector/product-summary-account-selector-widget.component.ts","../../../../libs/product-summary-account-selector-widget-ang/src/product-summary-account-selector/product-summary-account-selector-widget.component.html","../../../../libs/product-summary-account-selector-widget-ang/src/product-summary-account-selector-widget.module.ts","../../../../libs/product-summary-account-selector-widget-ang/backbase-product-summary-account-selector-widget-ang.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\n\nexport class ProductKindsBadRequest {\n  messages: string[];\n  kind: 'ProductKindsBadRequest' = 'ProductKindsBadRequest';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport class ProductKindsUnknownError {\n  messages: string[];\n  kind: 'ProductKindsUnknownError' = 'ProductKindsUnknownError';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = [response.message];\n  }\n}\n\nexport class ProductKindsAccessDenied {\n  messages: string[];\n  kind: 'ProductKindsAccessDenied' = 'ProductKindsAccessDenied';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport type ProductKindsError = ProductKindsAccessDenied | ProductKindsBadRequest | ProductKindsUnknownError;\n\nexport const parseError = (error: HttpErrorResponse): ProductKindsError => {\n  if (error.error instanceof ErrorEvent) {\n    return new ProductKindsUnknownError(error);\n  } else {\n    switch (error.status) {\n      case 400:\n        return new ProductKindsBadRequest(error);\n      case 403:\n        return new ProductKindsAccessDenied(error);\n      case 401:\n        return new ProductKindsAccessDenied(error);\n      default:\n        return new ProductKindsUnknownError(error);\n    }\n  }\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { BehaviorSubject, Observable, of, combineLatest } from 'rxjs';\n\nimport {\n  ProductSummaryHttpService,\n  ProductSummary,\n  GetProductSummaryRequestParams,\n} from '@backbase/data-ang/arrangements';\nimport { Product, isProductVisible, ProductKind, cacheRequest } from '@backbase/product-summary-common-ang';\n\nimport {\n  parseError,\n  ProductKindsError,\n  /**\n   * these unused imports here because of issue in api-extractor\n   * issue: https://github.com/microsoft/rushstack/issues/2140\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars,no-unused-vars */\n  ProductKindsAccessDenied,\n  ProductKindsBadRequest,\n  ProductKindsUnknownError,\n  /* eslint-enable */\n} from './product-summary-error';\nimport { catchError, distinctUntilChanged, map } from 'rxjs/operators';\n\nexport type ListParams = any;\n\nconst defaultListParams: ListParams = {};\n\n/**\n * Service for fetching and storing accounts and properties from model.xml\n *\n * This service relies on providers from `ProductSummaryAccountSelectorWidgetModule`.\n *\n * @see ProductSummaryAccountSelectorWidgetModule\n *\n * @usageNotes\n *\n * ### Ensure the ProductSummaryAccountSelectorWidgetModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ProductSummaryAccountSelectorWidgetModule,\n *   ],\n * })\n * export class MyWidgetModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ProductSummaryService],\n * })\n *  export class MyComponent {\n * ```\n */\n@Injectable()\nexport class ProductSummaryService implements OnDestroy {\n  /**\n   * Constructor\n   *\n   * @param productSummaryDataService\n   */\n  constructor(private readonly productSummaryDataService: ProductSummaryHttpService) {}\n\n  /**\n   * Used to store the error occured during loading of accounts\n   */\n  readonly error = new BehaviorSubject<ProductKindsError | undefined>(undefined);\n\n  private readonly listParams = new BehaviorSubject<ListParams>(defaultListParams);\n  private readonly listRefresh = new BehaviorSubject(false);\n\n  /**\n   * List of accounts fetched from the server\n   */\n  readonly accountsList: Observable<Product[] | undefined> = combineLatest([\n    this.listParams.pipe(distinctUntilChanged()),\n    this.listRefresh,\n  ]).pipe(cacheRequest(([params]) => this.getProductSummary(params)));\n\n  /**\n   * Refreshes the list of accounts\n   */\n  public refreshAccountsList() {\n    this.listRefresh.next(true);\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this.error.complete();\n  }\n\n  private getProductSummary(params: GetProductSummaryRequestParams): Observable<Product[] | undefined> {\n    return this.productSummaryDataService.getProductSummary(params).pipe(\n      map((res: ProductSummary) => this.responseToProductList(res)),\n      catchError((error: HttpErrorResponse) => {\n        this.error.next(parseError(error));\n        return of(undefined);\n      }),\n    );\n  }\n\n  private extractProducts(memo: Product[], { products }: { products: Product[] }): Product[] {\n    return memo.concat(products);\n  }\n\n  private toProductKindList(res: ProductSummary): ProductKind[] {\n    return Object.entries(res)\n      .filter(([key]) => key !== 'aggregatedBalance')\n      .map(([kind, value]) => {\n        if (Array.isArray(value as ProductKind[])) {\n          value.products = value.reduce(this.extractProducts, []);\n        }\n        let products = [];\n        if (value.products && Array.isArray(value.products)) {\n          products = value.products.filter(isProductVisible).map((product: Product) => ({ ...product, kind }));\n        }\n        return { products };\n      });\n  }\n\n  private responseToProductList(res: ProductSummary): Product[] {\n    return this.toProductKindList(res).reduce(this.extractProducts, []);\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { AccountState } from '@backbase/product-summary-common-ang';\n\nexport interface ProductSummaryAccountSelectorConfig {\n  notToDisplayStateList: Array<string>;\n  states: Array<AccountState>;\n}\n\n// These tokens can be used to change configuration at app level\nexport const BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN: InjectionToken<ProductSummaryAccountSelectorConfig> = new InjectionToken(\n  'BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN',\n);\n\nexport const productSummaryAccountSelectorDefaults: ProductSummaryAccountSelectorConfig = {\n  notToDisplayStateList: ['Active', 'Open'],\n  states: [\n    {\n      stateName: 'Active',\n      severity: 'info',\n    },\n    {\n      stateName: 'Inactive',\n      severity: 'warning',\n    },\n    {\n      stateName: 'Closed',\n      severity: 'error',\n    },\n    {\n      stateName: 'Open',\n      severity: 'info',\n    },\n  ],\n};\n\nexport const productSummaryAccountSelectorConfigProviders: Provider[] = [\n  {\n    provide: BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN,\n    useValue: productSummaryAccountSelectorDefaults,\n  },\n];\n","export const WidgetProperty = {\n  MULTIPLE: 'multiple',\n  FILTER_ITEMS: 'filterItems',\n  SHOW_ACCOUNT_STATE: 'showAccountState',\n  EVENT_REFRESH_ACCOUNT_LIST: 'event.refreshAccountsList',\n  OUTPUT_SELECTED_ACCOUNT: 'output.selectedAccount',\n};\n","import { Component, Input } from '@angular/core';\nimport { AccountNumberType } from '@backbase/ui-ang/account-number-pipe';\nimport { ProductItemBasicAccountComponent } from '@backbase/ui-ang/product-item-basic-account';\n\n/**\n * Displays account overview in account selector\n *\n * @usageNotes\n *\n * ### Display details\n *\n * ```html\n * <bb-product-summary-account-selector-item\n *   [title]=\"'My Account'\"\n *   [amount]=\"12345\"\n *   [currency]=\"'EUR'\"\n *   [productNumber]=\"'12345678'\"\n *   [productNumberType]=\"'iban'\"\n * ></bb-product-summary-account-selector-item>\n * ```\n *\n * @ngModule ProductSummaryAccountSelectorWidgetModule\n */\n@Component({\n  selector: 'bb-product-summary-account-selector-item',\n  templateUrl: './product-summary-account-selector-item.component.html',\n})\nexport class ProductSummaryAccountSelectorItemComponent extends ProductItemBasicAccountComponent {\n  /**\n   * Whether to show in mobile or desktop view\n   *\n   * @default false\n   */\n  @Input() isCollapsedView = false;\n  /**\n   * Account number type\n   *\n   * @default undefined\n   */\n  @Input() productNumberType: AccountNumberType | undefined;\n  /**\n   * Whether to show external product information\n   *\n   * @default false\n   */\n  @Input() showExternalInfo = false;\n  /**\n   * Product external logo\n   *\n   * @default undefined\n   */\n  @Input() externalLogo: string | undefined;\n  /**\n   * Product external name\n   *\n   * @default undefined\n   */\n  @Input() externalName: string | undefined;\n  /**\n   * Product external sync date\n   *\n   * @default undefined\n   */\n  @Input() externalSyncDate: string | undefined;\n}\n","<div [class.active]=\"active\" class=\"bb-product-item bb-product-item-basic-account-ui product-item\">\n  <div class=\"bb-stack product-item-content\">\n    <div *ngIf=\"!isCollapsedView\" class=\"bb-stack__item bb-stack__item--align-top\">\n      <div class=\"bb-block bb-block--xs\"></div>\n      <bb-product-summary-account-logo\n        [logoSrc]=\"showExternalInfo && externalLogo\"\n        [productKindName]=\"type\"\n        iconColor=\"secondary\"\n      ></bb-product-summary-account-logo>\n    </div>\n    <div class=\"bb-stack__item bb-stack__item--fill bb-account-info\">\n      <bb-product-item-custom-title-ui\n        *ngIf=\"showExternalInfo && !isCollapsedView\"\n        [showExternalTitle]=\"true\"\n        [externalTitle]=\"showExternalInfo && externalName\"\n      ></bb-product-item-custom-title-ui>\n      <div class=\"bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-product-item__title\">\n          <ng-container *ngIf=\"customProductItemBasicAccountTitle; else defaultProductItemBasicAccountTitle\">\n            <ng-container\n              *ngTemplateOutlet=\"customProductItemBasicAccountTitle?.templateRef; context: hostRef\"\n            ></ng-container>\n          </ng-container>\n        </div>\n        <div *ngIf=\"isCollapsedView\" class=\"bb-stack__break bb-stack__break--up\"></div>\n        <div\n          class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-none bb-product-item__details\"\n          [ngClass]=\"{\n            'bb-stack__item--push-right': !isCollapsedView,\n            'bb-stack__item--push-left': isCollapsedView\n          }\"\n        >\n          <ng-container\n            *ngIf=\"customProductItemBasicAccountDetailsFormatter; else defaultProductItemBasicAccountDetailsFormatter\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"customProductItemBasicAccountDetailsFormatter?.templateRef; context: hostRef\"\n            ></ng-container>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultProductItemBasicAccountTitle>\n  <bb-product-item-custom-title-ui\n    [title]=\"title\"\n    [showLogo]=\"isCollapsedView\"\n    [logoSrc]=\"showExternalInfo && externalLogo\"\n    [logoKind]=\"type\"\n    [showExternalTitle]=\"showExternalInfo && isCollapsedView\"\n    [externalTitle]=\"showExternalInfo && externalName\"\n    [productNumber]=\"productNumber\"\n    [productNumberType]=\"productNumberType\"\n    [state]=\"status\"\n  ></bb-product-item-custom-title-ui>\n</ng-template>\n\n<ng-template #defaultProductItemBasicAccountDetailsFormatter>\n  <div\n    *ngIf=\"amount | bbIsDefined\"\n    [ngClass]=\"{\n      'bb-text-align-right': !isCollapsedView,\n      'bb-text-align-left': isCollapsedView\n    }\"\n  >\n    <bb-amount-ui\n      class=\"bb-highlight bb-product-item__amount\"\n      [amount]=\"amount\"\n      [currency]=\"currency\"\n      [mapCurrency]=\"showCurrencySymbol\"\n    ></bb-amount-ui>\n    <div *ngIf=\"showExternalInfo && (externalSyncDate | bbIsDefined)\" class=\"bb-text-support bb-subtitle\">\n      {{ externalSyncDate! | bbDateUpdatedAgo }}\n    </div>\n  </div>\n</ng-template>\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  Directive,\n  ChangeDetectorRef,\n  Inject,\n  Input,\n  ElementRef,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Observable, combineLatest, BehaviorSubject, Subject, Subscription } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { ProductSummaryService } from '../product-summary.service';\nimport { PUBSUB, Pubsub } from '@backbase/foundation-ang/web-sdk';\n\nimport { ProductKindsError } from '../product-summary-error';\nimport { BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN, ProductSummaryAccountSelectorConfig } from '../model/providers';\nimport { WidgetProperty } from '../model/constants';\nimport {\n  Arrangement,\n  ProductKind,\n  Product,\n  AccountState,\n  modelItemToBoolean,\n  getAccountAlias,\n  processErrorMessages,\n  getRouteParameter,\n  hasExternalInfo,\n  ProductsExternalInfoService,\n  ResponsiveContainerComponent,\n} from '@backbase/product-summary-common-ang';\n\n/**\n * A widget for selecting a user's Account (Retail).\n *\n * @usageNotes\n *\n * ### Include this widget in your `AppModule`:\n *\n * ```typescript\n * @NgModule({\n *   imports: [\n *     ProductSummaryAccountSelectorWidgetModule,\n *   ],\n *   ...\n * })\n * export class AppModule {}\n * ```\n *\n * ### Include this widget (standalone model)\n *\n * ```typescript\n * export const environment: Environment = {\n *   ...\n *   bootstrap: {\n *     pageModel: {\n *       name: 'root',\n *       properties: {},\n *       children: [\n *         {\n *           name: 'account-list',\n *           properties: {\n *             classId: 'ProductSummaryAccountSelectorWidgetComponent',\n *           },\n *         },\n *       ],\n *     },\n *   },\n * };\n * ```\n *\n * ### Communicate the selected account ID when it changes (standalone model)\n *\n * Using the `RouteParam` communication transport:\n *\n * ```typescript\n * export const environment: Environment = {\n *   ...\n *   bootstrap: {\n *     pageModel: {\n *       name: 'root',\n *       properties: {},\n *       children: [\n *         {\n *           name: 'account-list',\n *           properties: {\n *             classId: 'ProductSummaryAccountSelectorWidgetComponent',\n *             'output.selectedAccount': 'navigation:account-selector-product-details-container',\n *           },\n *         },\n *         {\n *           name: 'my-widget',\n *           properties: {\n *             classId: 'MyWidgetComponent',\n *             'input.selectedAccountId': RouteParam.toProperty('selectedAccount'),\n *           },\n *         },\n *       ],\n *     },\n *   },\n * };\n * ```\n *\n * @ngModule ProductSummaryAccountSelectorWidgetModule\n */\n@Component({\n  selector: 'bb-product-summary-account-selector-widget',\n  templateUrl: 'product-summary-account-selector-widget.component.html',\n  providers: [ProductSummaryService],\n})\nexport class ProductSummaryAccountSelectorWidgetComponent extends ResponsiveContainerComponent\n  implements OnInit, OnDestroy {\n  readonly hostRef: ProductSummaryAccountSelectorWidgetComponent = this;\n  /**\n   * Subject for the garbage collector\n   */\n  gc$ = new Subject<void>();\n  /**\n   * The ID or IDs (a comma separated list) of the selected account\n   * taken from the selectedAccount route param\n   */\n  readonly productId: Observable<string> = getRouteParameter(this.route, 'selectedAccount');\n  /**\n   * Used to display the error occured during loading of accounts\n   */\n  readonly error: Observable<ProductKindsError | undefined> = this.service.error;\n  /**\n   * A method to return the alias of the given account\n   */\n  readonly getAlias: (account: any) => string | undefined = getAccountAlias;\n  /**\n   * Returns true if product has external info\n   */\n  readonly hasExternalInfo: (product: Arrangement) => boolean = hasExternalInfo;\n\n  private registeredRefreshAccountsListEvents: string[] = [];\n  private readonly refreshAccountsListHandler = this.refreshAccountsList.bind(this);\n  /**\n   * The list of accounts to display in the dropdown.\n   */\n  public accounts: Observable<Product[] | undefined> = new Observable<Product[] | undefined>(subscriber => {\n    const subscriptions: Subscription[] = [];\n    subscriptions.push(\n      this.service.accountsList.subscribe(products => {\n        subscriber.next(products);\n\n        if (products?.some(hasExternalInfo)) {\n          subscriptions.push(\n            this.productsExternalInfoService\n              .getProductsWithExternalInfo(products)\n              .subscribe(productsWithExternalData => subscriber.next(productsWithExternalData), subscriber.error),\n          );\n        }\n      }, subscriber.error),\n    );\n    return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n  }).pipe(tap(accounts => this.accountsList.next(accounts)));\n  private accountsList = new Subject<Product[] | undefined>();\n  /**\n   * A selected account or a list of accounts\n   */\n  public accountSelected: Product[] | Product | undefined;\n  /**\n   * The property is used to display a message about the selected account state below the account selector.\n   *\n   * @default undefined\n   */\n  public selectedAccountState: AccountState | undefined;\n\n  /**\n   * Constructor\n   *\n   * @param route\n   * @param service\n   * @param productsExternalInfoService\n   * @param element\n   * @param changeDetector\n   * @param eventBusService\n   * @param settings\n   */\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly service: ProductSummaryService,\n    private readonly productsExternalInfoService: ProductsExternalInfoService,\n    private readonly element: ElementRef<HTMLElement>,\n    private readonly changeDetector: ChangeDetectorRef,\n    @Inject(PUBSUB) private readonly eventBusService: Pubsub,\n    @Inject(BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN) readonly settings: ProductSummaryAccountSelectorConfig,\n  ) {\n    super(element, changeDetector);\n  }\n  /**\n   * Comma separated list of event names to subscribe to perform accounts refresh\n   */\n  @Input(WidgetProperty.EVENT_REFRESH_ACCOUNT_LIST) set refreshAccountListEvent(value: string) {\n    this.clearRefreshAccountsListEvents();\n    if (value) {\n      this.registeredRefreshAccountsListEvents = value.replace(/ /g, '').split(',');\n      this.registeredRefreshAccountsListEvents.forEach(eventName => {\n        this.eventBusService.subscribe(eventName, this.refreshAccountsListHandler);\n      });\n    }\n  }\n  /**\n   * Select multiple accounts\n   * Set to `true` to allow the bank customer to select more than one arrangement at a time.\n   */\n  readonly multiple = new BehaviorSubject<boolean>(false);\n  @Input(WidgetProperty.MULTIPLE) set multipleValue(value: boolean) {\n    this.multiple.next(modelItemToBoolean(value));\n  }\n  /**\n   * Enables bank customers to filter the arrangements that are presented in the dropdown.\n   * Set to `true` to show Filter. Set to `false` to show Search.\n   */\n  readonly filterItems = new BehaviorSubject<boolean>(true);\n  @Input(WidgetProperty.FILTER_ITEMS) set filterItemsValue(value: boolean) {\n    this.filterItems.next(modelItemToBoolean(value));\n  }\n\n  /**\n   * Defines whether the account status is displayed for the selected account\n   */\n  readonly showAccountState$ = new BehaviorSubject<boolean>(true);\n  @Input(WidgetProperty.SHOW_ACCOUNT_STATE) set showAccountStateValue(value: boolean) {\n    this.showAccountState$.next(modelItemToBoolean(value));\n  }\n\n  /**\n   * Emits the ID of the account selected by the bank customer as a string.\n   */\n  @Output() selectedAccount = new EventEmitter<string>();\n  /**\n   * An event emitter to extend payload with product kind\n   */\n  @Output() selectedKind = new EventEmitter<string>();\n  /**\n   * The method processed error messages to display in the template.\n   */\n  processErrorMessages: (messages: string[] | undefined) => string | undefined = processErrorMessages;\n\n  private refreshAccountsList() {\n    this.service.refreshAccountsList();\n  }\n\n  private clearRefreshAccountsListEvents() {\n    this.registeredRefreshAccountsListEvents.forEach(eventName => {\n      this.eventBusService.unsubscribe(eventName, this.refreshAccountsListHandler);\n    });\n    this.registeredRefreshAccountsListEvents = [];\n  }\n\n  private combineLatestSub() {\n    return combineLatest(this.accountsList, this.productId, this.multiple)\n      .pipe(takeUntil(this.gc$))\n      .subscribe(([accounts, productId, multiple]: [Product[] | undefined, string, boolean]) => {\n        if (accounts) {\n          this.selectedAccountState = undefined;\n          if (multiple) {\n            const productIdArray = productId.split(',');\n            this.accountSelected = accounts\n              ? accounts.filter((account: Product) => account.id === undefined || productIdArray.includes(account.id))\n              : [];\n            this.selectedAccountState = this.mapAccountState(this.accountSelected[0]);\n          } else {\n            this.accountSelected = accounts ? accounts.find((product: Product) => product.id === productId) : undefined;\n            this.selectedAccountState = this.mapAccountState(this.accountSelected);\n          }\n        }\n        this.changeDetector.markForCheck();\n      });\n  }\n\n  /**\n   * @internal\n   */\n  ngOnInit() {\n    this.combineLatestSub();\n  }\n  /**\n   * Cleanups just before Angular destroys the component.\n   *\n   * @internal\n   */\n  ngOnDestroy() {\n    this.clearRefreshAccountsListEvents();\n    this.gc$.next();\n    this.gc$.complete();\n  }\n  /**\n   * Maps product state to AccountState\n   *\n   * @param item\n   */\n  mapAccountState(item: Product | undefined): AccountState | undefined {\n    if (item && item.state && item.state.state) {\n      const productState = item.state.state;\n      return this.settings.states.find(\n        value =>\n          productState.toLocaleLowerCase() === value.stateName.toLocaleLowerCase() &&\n          !this.settings.notToDisplayStateList.includes(productState),\n      );\n    }\n    return undefined;\n  }\n  /**\n   * Event handler for the `change` event of `bb-account-selector-ui`\n   * emits a string of comma-separated account ids to `selectedAccount` and `selectedKind`\n   *\n   * @param item\n   */\n  onAccountSelected(item: Product | Product[]) {\n    if (!this.isProduct(item)) {\n      // this checking here is because of a bug in `ng-select`.\n      // `ng-select` in multi-select mode if its 'filter' was changed\n      // sends \"onClose\" an Event object instead of the real elements\n      return;\n    }\n    this.selectedAccountState = undefined;\n    this.accountSelected = item;\n    if (Array.isArray(item)) {\n      this.selectedAccountState = this.mapAccountState(item[0]);\n      this.selectedAccount.emit(item.map(account => account.id).join(','));\n      this.selectedKind.emit(item.map(account => account.kind).join(','));\n    } else {\n      this.selectedAccountState = this.mapAccountState(item);\n      this.selectedAccount.emit(item.id);\n      this.selectedKind.emit(item.kind);\n    }\n  }\n\n  /**\n   * Comparing given Products by `id` property.\n   */\n  compareProductsById(product1: Product, product2: Product): boolean {\n    return this.isProduct(product1) && this.isProduct(product2) && product1.id === product2.id;\n  }\n\n  /**\n   * Returns `true` if product alias includes `value`, otherwise `false`\n   */\n  isInProductAlias(value: string, product: Product): boolean {\n    const searchTerm = value.toLowerCase();\n    const productAlias = (this.getAlias(product) || '').toLowerCase();\n    return productAlias.includes(searchTerm);\n  }\n\n  /**\n   * Returns balance for the given product\n   */\n  getProductBalance(product: Product): string | number | undefined {\n    return product.bookedBalance ?? product.principalAmount ?? product.currentInvestmentValue;\n  }\n\n  /**\n   * Returns sync date of external info for the given product\n   */\n  getExternalInfoSyncDate(product: Product): string | undefined {\n    return hasExternalInfo(product) ? product?.lastSyncDate : undefined;\n  }\n\n  private isProduct(item: Product | Product[]): boolean {\n    if (Array.isArray(item) && item.length === 0) {\n      return true; // handles the case with an empty array input (when all the items are unselected in multiple mode)\n    }\n    const product: Product | Product[] = Array.isArray(item) ? item[0] : item;\n    return typeof product === 'object' && 'id' in product;\n  }\n}\n/**\n * This is an extension slot to be used for customizing the entire selector\n *\n * @usageNotes\n *\n * ### Customize the account selector\n *\n * ```html\n * <ng-template\n *   bbAccountSelectorDropdownCustomizable\n *   let-hostRef\n *   let-accounts=\"context\">\n *   Your custom template here\n * </ng-template>\n * ```\n *\n * @NgModule ProductSummaryAccountSelectorWidgetModule\n */\n@Directive({\n  selector: '[bbAccountSelectorDropdownCustomizable]',\n})\nexport class ProductSummaryAccountSelectorDropdownCustomizableDirective extends BbTemplate<\n  ProductSummaryAccountSelectorWidgetComponent,\n  ProductKind\n> {}\n/**\n * This is an extension slot to be used for customizing an account selector item\n * This slot is used for displaying items in the dropdown list and\n * in the selected account (single-select only)\n *\n * @usageNotes\n *\n * ### Customize an account selector item\n *\n * ```html\n *  <ng-template\n *    bbAccountSelectorItemCustomizable\n *    let-hostRef\n *    let-item=\"context\">\n *   Your custom template here\n * </ng-template>\n * ```\n *\n * @NgModule ProductSummaryAccountSelectorWidgetModule\n */\n@Directive({\n  selector: '[bbAccountSelectorItemCustomizable]',\n})\nexport class ProductSummaryAccountSelectorItemCustomizableDirective extends BbTemplate<\n  ProductSummaryAccountSelectorWidgetComponent,\n  ProductKind\n> {}\n/**\n * This is an extension slot to be used for customizing selected accounts\n * in multi-select mode\n *\n * @usageNotes\n *\n * ### Customize the selected accounts\n *\n * ```html\n * <ng-template\n *   bbAccountSelectorMultiSelectedItemsCustomizable\n *   let-hostRef\n *   let-items=\"context.items\"\n *   let-accounts=\"context.accounts\">\n *   Your custom template here\n * </ng-template>\n * ```\n *\n * @NgModule ProductSummaryAccountSelectorWidgetModule\n */\n@Directive({\n  selector: '[bbAccountSelectorMultiSelectedItemsCustomizable]',\n})\nexport class ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective extends BbTemplate<\n  ProductSummaryAccountSelectorWidgetComponent,\n  { items: ProductKind[]; accounts: Product[] }\n> {}\n/**\n * This is an extension slot to be used for customizing the loader\n *\n * @usageNotes\n *\n * ### Customize the account selector\n *\n * ```html\n * <ng-template\n *   bbAccountSelectorLoadingCustomizable\n *   let-hostRef>\n *   Your custom template here\n * </ng-template>\n * ```\n *\n * @NgModule ProductSummaryAccountSelectorWidgetModule\n */\n@Directive({\n  selector: '[bbAccountSelectorLoadingCustomizable]',\n})\nexport class ProductSummaryAccountSelectorLoadingCustomizableDirective extends BbTemplate<\n  ProductSummaryAccountSelectorWidgetComponent,\n  undefined\n> {}\n/**\n * This is an extension slot to be used for customizing the state of the selected account\n *\n * @usageNotes\n *\n * ### Customize the account state\n *\n * ```html\n * <ng-template\n *   bbAccountSelectorStateCustomizable\n *   let-hostRef>\n *   Your custom template here\n * </ng-template>\n * ```\n *\n * @NgModule ProductSummaryAccountSelectorWidgetModule\n */\n@Directive({\n  selector: '[bbAccountSelectorStateCustomizable]',\n})\nexport class ProductSummaryAccountSelectorStateCustomizableDirective extends BbTemplate<\n  ProductSummaryAccountSelectorWidgetComponent,\n  undefined\n> {}\n","<ng-container *ngIf=\"accounts | async as accounts; else loadingTemplate\">\n  <ng-container\n    bbAccountSelectorDropdownCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"accounts\"\n>\n  </ng-container>\n</ng-container>\n\n<!-- Account Selector Dropdown template -->\n<ng-template\n  bbAccountSelectorDropdownCustomizable\n  let-hostRef\n  let-accounts=\"context\"\n>\n  <bb-account-selector-ui\n    class=\"bb-product-summary-account-selector\"\n    [items]=\"accounts\"\n    [dropdownPosition]=\"'bottom'\"\n    [selectedItems]=\"hostRef.accountSelected\"\n    [multiple]=\"hostRef.multiple | async\"\n    [closeOnSelect]=\"(hostRef.multiple | async) === false\"\n    (change)=\"hostRef.onAccountSelected($event)\"\n    [filterItems]=\"hostRef.filterItems | async\"\n    [compareItemsWith]=\"hostRef.compareProductsById.bind(hostRef)\"\n    [searchFunc]=\"hostRef.isInProductAlias.bind(hostRef)\"\n    data-role=\"accountSelector\"\n    placeholder=\"Select Account(s)\"\n    i18n-placeholder=\"Select Account(s)|Select Accounts placeholder\n      @@product-summary-account-selector.empty.state.placeholder\"\n  >\n    <ng-template\n      bbCustomSingleSelectedItemLabel\n      let-item=\"item\"\n    >\n      <ng-container\n        bbAccountSelectorItemCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"item\"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomMultiSelectedItemsLabel\n      let-items=\"items\">\n      <ng-container\n        bbAccountSelectorMultiSelectedItemsCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{items: items, accounts: accounts}\">\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomOptionItem\n      let-item=\"item\"\n      let-item$=\"item$\"\n      let-index=\"index\"\n    >\n      <ng-container *ngIf=\"hostRef.multiple | async\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-product-item__details\">\n            <bb-input-checkbox-ui\n              [id]=\"index\"\n              [ngModel]=\"item$.selected\"\n              (click)=\"$event.preventDefault()\"\n            >\n            </bb-input-checkbox-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--fill bb-ellipsis bb-ellipsis--single-line\">\n            <ng-container\n              bbAccountSelectorItemCustomizable\n              [bbHostRef]=\"hostRef\"\n              [bbTemplateContext]=\"item\"\n            >\n            </ng-container>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(hostRef.multiple | async) === false\">\n        <ng-container\n          bbAccountSelectorItemCustomizable\n          [bbHostRef]=\"hostRef\"\n          [bbTemplateContext]=\"item\"\n        >\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </bb-account-selector-ui>\n</ng-template>\n\n<!-- Product summary account selector item template -->\n<ng-template\n  bbAccountSelectorItemCustomizable\n  let-hostRef\n  let-item=\"context\"\n>\n  <bb-product-summary-account-selector-item\n    [type]=\"item?.productKindName\"\n    [title]=\"hostRef.getAlias(item)\"\n    [amount]=\"hostRef.getProductBalance(item)\"\n    [currency]=\"item?.currency\"\n    [status]=\"item?.state?.state\"\n    [productNumber]=\"item | bbProductNumberValue\"\n    [productNumberType]=\"item | bbProductNumberType\"\n    [showExternalInfo]=\"hostRef.hasExternalInfo(item)\"\n    [externalLogo]=\"item?.financialInstitution?.logo\"\n    [externalName]=\"item?.financialInstitution?.name\"\n    [externalSyncDate]=\"hostRef.getExternalInfoSyncDate(item)\"\n    [isCollapsedView]=\"hostRef.responsiveView === 'mobile'\"\n  ></bb-product-summary-account-selector-item>\n</ng-template>\n\n<!-- Product summary loading template -->\n<ng-template #loadingTemplate>\n  <ng-container\n    bbAccountSelectorLoadingCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n    <div></div>\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorLoadingCustomizable\n  let-hostRef\n>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@product.details.loadingAccounts\"\n      [text]=\"'Loading Accounts...'\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-container\n  bbAccountSelectorStateCustomizable\n  [bbHostRef]=\"hostRef\"\n>\n</ng-container>\n\n<ng-template\n  bbAccountSelectorStateCustomizable\n  let-hostRef\n>\n  <bb-account-state-ui\n    *ngIf=\"hostRef.selectedAccountState\"\n    [isDisplayingAlert]=\"(hostRef.showAccountState$ | async) && ((hostRef.multiple | async) === false)\"\n    [item]=\"hostRef.selectedAccountState\"\n  >\n  <span i18n=\"@@product-summary-account-selector.account-state.message\">\n      {hostRef.selectedAccountState?.severity, select, warning {This account is temporarily\n        inactive. For more info please contact your bank.} error {This account is permanently disabled. For more info please\n        contact your bank.}}\n  </span>\n  </bb-account-state-ui>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorMultiSelectedItemsCustomizable\n  let-hostRef\n  let-items=\"context.items\"\n  let-accounts=\"context.accounts\"\n>\n  <div class=\"bb-account-selector__selected\">\n    <div class=\"bb-account-selector__selected-accounts-number bb-text-bold\">\n      <span i18n=\"Selected Accounts|Selected Accounts multi label @@bb-product-summary-account-selector.multi.label\">\n        { items.length, plural, =1 {1 account selected} other {{{accounts.length === items.length ? 'All' : items.length}} accounts selected}}\n      </span>\n    </div>\n    <div class=\"bb-account-selector__selected-accounts bb-text-subtitle\">\n      <ng-container *ngIf=\"accounts.length === items.length; else selectedAccountsTemplate\">\n        {{ items.length }}\n        <span\n          i18n=\"\n             All Selected Accounts|All Selected Accounts label @@product-summary-account-selector.allSelectedAccounts.label\n          \"\n          class=\"bb-account-selector__selected-account\"\n        >\n          accounts\n        </span>\n      </ng-container>\n      <ng-template #selectedAccountsTemplate>\n        <bb-ellipsis-ui>\n          <ng-container *ngFor=\"let item of items; let i = index\">\n                <span class=\"bb-account-selector__selected-account\"\n                >{{ hostRef.getAlias(item)\n                  }}<span *ngIf=\"i !== items.length - 1\" class=\"bb-account-selector__selected-account-separator\">, </span>\n                </span>\n          </ng-container>\n        </bb-ellipsis-ui>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccountSelectorModule } from '@backbase/ui-ang/account-selector';\nimport { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';\nimport { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';\nimport { EmptyStateModule } from '@backbase/ui-ang/empty-state';\nimport { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';\nimport { EllipsisModule } from '@backbase/ui-ang/ellipsis';\nimport { AmountModule } from '@backbase/ui-ang/amount';\nimport { ProductNumberModule } from '@backbase/product-summary-ui';\nimport { ValidationModule, DatePipeModule, ProductsExternalInfoService } from '@backbase/product-summary-common-ang';\n\nimport {\n  ProductSummaryAccountSelectorWidgetComponent,\n  ProductSummaryAccountSelectorDropdownCustomizableDirective,\n  ProductSummaryAccountSelectorItemCustomizableDirective,\n  ProductSummaryAccountSelectorLoadingCustomizableDirective,\n  ProductSummaryAccountSelectorStateCustomizableDirective,\n  ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective,\n} from './product-summary-account-selector/product-summary-account-selector-widget.component';\nimport { ProductItemCustomModule, ProductKindModule, AccountStateModule } from '@backbase/product-summary-ui';\nimport { productSummaryAccountSelectorConfigProviders } from './model/providers';\nimport { ProductSummaryAccountSelectorItemComponent } from './product-summary-account-selector-item/product-summary-account-selector-item.component';\n\nconst components = [ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorItemComponent];\nconst directives = [\n  ProductSummaryAccountSelectorDropdownCustomizableDirective,\n  ProductSummaryAccountSelectorItemCustomizableDirective,\n  ProductSummaryAccountSelectorLoadingCustomizableDirective,\n  ProductSummaryAccountSelectorStateCustomizableDirective,\n  ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective,\n];\nconst uiModules = [\n  ProductItemCustomModule,\n  ProductKindModule,\n  AccountStateModule,\n  AccountSelectorModule,\n  InputCheckboxModule,\n  ProductItemBasicAccountModule,\n  EmptyStateModule,\n  LoadingIndicatorModule,\n  EllipsisModule,\n  ProductNumberModule,\n  AmountModule,\n  ValidationModule,\n  DatePipeModule,\n];\n\nconst services = [ProductsExternalInfoService];\n\n/**\n * Exports the Widgets and UI components for displaying of the account selector. (Retail banking)\n *\n * The following widgets are included in this module:\n *  - `ProductSummaryAccountSelectorWidgetComponent`\n *\n * @see ProductSummaryAccountSelectorWidgetComponent\n *\n * @usageNotes\n *\n * ### Include the exported widgets in your `AppModule`:\n *\n * ```typescript\n * @NgModule({\n *   imports: [\n *     ProductSummaryAccountSelectorWidgetModule ,\n *   ],\n *   ...\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    BackbaseCoreModule.withConfig({\n      classMap: { ProductSummaryAccountSelectorWidgetComponent },\n    }),\n    ...uiModules,\n  ],\n  declarations: [...components, ...directives],\n  exports: [...components, ...directives, ...uiModules],\n  providers: [...services, ...productSummaryAccountSelectorConfigProviders],\n})\nexport class ProductSummaryAccountSelectorWidgetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1","i4","i2.ProductSummaryService","i3","i6.ProductSummaryAccountSelectorItemComponent","i9","i11"],"mappings":"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"}