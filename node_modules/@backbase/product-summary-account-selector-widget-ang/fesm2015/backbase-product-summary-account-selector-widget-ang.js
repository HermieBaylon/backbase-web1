import * as i0 from '@angular/core';
import { Injectable, InjectionToken, Component, Input, EventEmitter, Inject, Output, Directive, NgModule } from '@angular/core';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$3 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i12 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i4 from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
import * as i5 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import { ProductItemBasicAccountComponent, ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i7 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i8 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i10 from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';
import * as i2 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i1$1 from '@backbase/product-summary-ui';
import { ProductItemCustomModule, ProductKindModule, AccountStateModule, ProductNumberModule } from '@backbase/product-summary-ui';
import * as i3$1 from '@backbase/product-summary-common-ang';
import { cacheRequest, isProductVisible, ResponsiveContainerComponent, getRouteParameter, getAccountAlias, hasExternalInfo, processErrorMessages, modelItemToBoolean, ValidationModule, DatePipeModule, ProductsExternalInfoService } from '@backbase/product-summary-common-ang';
import { BehaviorSubject, combineLatest, of, Subject, Observable } from 'rxjs';
import { distinctUntilChanged, map, catchError, tap, takeUntil } from 'rxjs/operators';
import * as i1 from '@backbase/data-ang/arrangements';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i1$2 from '@angular/router';

class ProductKindsBadRequest {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsBadRequest';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
class ProductKindsUnknownError {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsUnknownError';
        this.messages = [response.message];
    }
}
class ProductKindsAccessDenied {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsAccessDenied';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ProductKindsUnknownError(error);
    }
    else {
        switch (error.status) {
            case 400:
                return new ProductKindsBadRequest(error);
            case 403:
                return new ProductKindsAccessDenied(error);
            case 401:
                return new ProductKindsAccessDenied(error);
            default:
                return new ProductKindsUnknownError(error);
        }
    }
};

const defaultListParams = {};
/**
 * Service for fetching and storing accounts and properties from model.xml
 *
 * This service relies on providers from `ProductSummaryAccountSelectorWidgetModule`.
 *
 * @see ProductSummaryAccountSelectorWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryAccountSelectorWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryAccountSelectorWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
class ProductSummaryService {
    /**
     * Constructor
     *
     * @param productSummaryDataService
     */
    constructor(productSummaryDataService) {
        this.productSummaryDataService = productSummaryDataService;
        /**
         * Used to store the error occured during loading of accounts
         */
        this.error = new BehaviorSubject(undefined);
        this.listParams = new BehaviorSubject(defaultListParams);
        this.listRefresh = new BehaviorSubject(false);
        /**
         * List of accounts fetched from the server
         */
        this.accountsList = combineLatest([
            this.listParams.pipe(distinctUntilChanged()),
            this.listRefresh,
        ]).pipe(cacheRequest(([params]) => this.getProductSummary(params)));
    }
    /**
     * Refreshes the list of accounts
     */
    refreshAccountsList() {
        this.listRefresh.next(true);
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.error.complete();
    }
    getProductSummary(params) {
        return this.productSummaryDataService.getProductSummary(params).pipe(map((res) => this.responseToProductList(res)), catchError((error) => {
            this.error.next(parseError(error));
            return of(undefined);
        }));
    }
    extractProducts(memo, { products }) {
        return memo.concat(products);
    }
    toProductKindList(res) {
        return Object.entries(res)
            .filter(([key]) => key !== 'aggregatedBalance')
            .map(([kind, value]) => {
            if (Array.isArray(value)) {
                value.products = value.reduce(this.extractProducts, []);
            }
            let products = [];
            if (value.products && Array.isArray(value.products)) {
                products = value.products.filter(isProductVisible).map((product) => (Object.assign(Object.assign({}, product), { kind })));
            }
            return { products };
        });
    }
    responseToProductList(res) {
        return this.toProductKindList(res).reduce(this.extractProducts, []);
    }
}
ProductSummaryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, deps: [{ token: i1.ProductSummaryHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }]; } });

// These tokens can be used to change configuration at app level
const BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN = new InjectionToken('BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN');
const productSummaryAccountSelectorDefaults = {
    notToDisplayStateList: ['Active', 'Open'],
    states: [
        {
            stateName: 'Active',
            severity: 'info',
        },
        {
            stateName: 'Inactive',
            severity: 'warning',
        },
        {
            stateName: 'Closed',
            severity: 'error',
        },
        {
            stateName: 'Open',
            severity: 'info',
        },
    ],
};
const productSummaryAccountSelectorConfigProviders = [
    {
        provide: BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN,
        useValue: productSummaryAccountSelectorDefaults,
    },
];

const WidgetProperty = {
    MULTIPLE: 'multiple',
    FILTER_ITEMS: 'filterItems',
    SHOW_ACCOUNT_STATE: 'showAccountState',
    EVENT_REFRESH_ACCOUNT_LIST: 'event.refreshAccountsList',
    OUTPUT_SELECTED_ACCOUNT: 'output.selectedAccount',
};

/**
 * Displays account overview in account selector
 *
 * @usageNotes
 *
 * ### Display details
 *
 * ```html
 * <bb-product-summary-account-selector-item
 *   [title]="'My Account'"
 *   [amount]="12345"
 *   [currency]="'EUR'"
 *   [productNumber]="'12345678'"
 *   [productNumberType]="'iban'"
 * ></bb-product-summary-account-selector-item>
 * ```
 *
 * @ngModule ProductSummaryAccountSelectorWidgetModule
 */
class ProductSummaryAccountSelectorItemComponent extends ProductItemBasicAccountComponent {
    constructor() {
        super(...arguments);
        /**
         * Whether to show in mobile or desktop view
         *
         * @default false
         */
        this.isCollapsedView = false;
        /**
         * Whether to show external product information
         *
         * @default false
         */
        this.showExternalInfo = false;
    }
}
ProductSummaryAccountSelectorItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ProductSummaryAccountSelectorItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorItemComponent, selector: "bb-product-summary-account-selector-item", inputs: { isCollapsedView: "isCollapsedView", productNumberType: "productNumberType", showExternalInfo: "showExternalInfo", externalLogo: "externalLogo", externalName: "externalName", externalSyncDate: "externalSyncDate" }, usesInheritance: true, ngImport: i0, template: "<div [class.active]=\"active\" class=\"bb-product-item bb-product-item-basic-account-ui product-item\">\n  <div class=\"bb-stack product-item-content\">\n    <div *ngIf=\"!isCollapsedView\" class=\"bb-stack__item bb-stack__item--align-top\">\n      <div class=\"bb-block bb-block--xs\"></div>\n      <bb-product-summary-account-logo\n        [logoSrc]=\"showExternalInfo && externalLogo\"\n        [productKindName]=\"type\"\n        iconColor=\"secondary\"\n      ></bb-product-summary-account-logo>\n    </div>\n    <div class=\"bb-stack__item bb-stack__item--fill bb-account-info\">\n      <bb-product-item-custom-title-ui\n        *ngIf=\"showExternalInfo && !isCollapsedView\"\n        [showExternalTitle]=\"true\"\n        [externalTitle]=\"showExternalInfo && externalName\"\n      ></bb-product-item-custom-title-ui>\n      <div class=\"bb-stack bb-stack--wrap\">\n        <div class=\"bb-stack__item bb-product-item__title\">\n          <ng-container *ngIf=\"customProductItemBasicAccountTitle; else defaultProductItemBasicAccountTitle\">\n            <ng-container\n              *ngTemplateOutlet=\"customProductItemBasicAccountTitle?.templateRef; context: hostRef\"\n            ></ng-container>\n          </ng-container>\n        </div>\n        <div *ngIf=\"isCollapsedView\" class=\"bb-stack__break bb-stack__break--up\"></div>\n        <div\n          class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-none bb-product-item__details\"\n          [ngClass]=\"{\n            'bb-stack__item--push-right': !isCollapsedView,\n            'bb-stack__item--push-left': isCollapsedView\n          }\"\n        >\n          <ng-container\n            *ngIf=\"customProductItemBasicAccountDetailsFormatter; else defaultProductItemBasicAccountDetailsFormatter\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"customProductItemBasicAccountDetailsFormatter?.templateRef; context: hostRef\"\n            ></ng-container>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #defaultProductItemBasicAccountTitle>\n  <bb-product-item-custom-title-ui\n    [title]=\"title\"\n    [showLogo]=\"isCollapsedView\"\n    [logoSrc]=\"showExternalInfo && externalLogo\"\n    [logoKind]=\"type\"\n    [showExternalTitle]=\"showExternalInfo && isCollapsedView\"\n    [externalTitle]=\"showExternalInfo && externalName\"\n    [productNumber]=\"productNumber\"\n    [productNumberType]=\"productNumberType\"\n    [state]=\"status\"\n  ></bb-product-item-custom-title-ui>\n</ng-template>\n\n<ng-template #defaultProductItemBasicAccountDetailsFormatter>\n  <div\n    *ngIf=\"amount | bbIsDefined\"\n    [ngClass]=\"{\n      'bb-text-align-right': !isCollapsedView,\n      'bb-text-align-left': isCollapsedView\n    }\"\n  >\n    <bb-amount-ui\n      class=\"bb-highlight bb-product-item__amount\"\n      [amount]=\"amount\"\n      [currency]=\"currency\"\n      [mapCurrency]=\"showCurrencySymbol\"\n    ></bb-amount-ui>\n    <div *ngIf=\"showExternalInfo && (externalSyncDate | bbIsDefined)\" class=\"bb-text-support bb-subtitle\">\n      {{ externalSyncDate! | bbDateUpdatedAgo }}\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i1$1.ProductSummaryAccountLogoComponent, selector: "bb-product-summary-account-logo", inputs: ["logoSrc", "productKindName", "defaultProductKindName", "iconColor", "iconSize", "logoSize"] }, { type: i1$1.ProductItemCustomTitleComponent, selector: "bb-product-item-custom-title-ui", inputs: ["title", "titleInteractive", "showLogo", "logoSrc", "logoKind", "showExternalTitle", "externalTitle", "favorite", "favoriteIconColor", "productNumber", "productNumberType", "state"], outputs: ["selectCustomTitle"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "bbIsDefined": i3$1.IsDefinedPipe, "bbDateUpdatedAgo": i3$1.DateUpdatedAgoPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-account-selector-item',
                    templateUrl: './product-summary-account-selector-item.component.html',
                }]
        }], propDecorators: { isCollapsedView: [{
                type: Input
            }], productNumberType: [{
                type: Input
            }], showExternalInfo: [{
                type: Input
            }], externalLogo: [{
                type: Input
            }], externalName: [{
                type: Input
            }], externalSyncDate: [{
                type: Input
            }] } });

/**
 * A widget for selecting a user's Account (Retail).
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryAccountSelectorWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'account-list',
 *           properties: {
 *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 *
 * ### Communicate the selected account ID when it changes (standalone model)
 *
 * Using the `RouteParam` communication transport:
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'account-list',
 *           properties: {
 *             classId: 'ProductSummaryAccountSelectorWidgetComponent',
 *             'output.selectedAccount': 'navigation:account-selector-product-details-container',
 *           },
 *         },
 *         {
 *           name: 'my-widget',
 *           properties: {
 *             classId: 'MyWidgetComponent',
 *             'input.selectedAccountId': RouteParam.toProperty('selectedAccount'),
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 *
 * @ngModule ProductSummaryAccountSelectorWidgetModule
 */
class ProductSummaryAccountSelectorWidgetComponent extends ResponsiveContainerComponent {
    /**
     * Constructor
     *
     * @param route
     * @param service
     * @param productsExternalInfoService
     * @param element
     * @param changeDetector
     * @param eventBusService
     * @param settings
     */
    constructor(route, service, productsExternalInfoService, element, changeDetector, eventBusService, settings) {
        super(element, changeDetector);
        this.route = route;
        this.service = service;
        this.productsExternalInfoService = productsExternalInfoService;
        this.element = element;
        this.changeDetector = changeDetector;
        this.eventBusService = eventBusService;
        this.settings = settings;
        this.hostRef = this;
        /**
         * Subject for the garbage collector
         */
        this.gc$ = new Subject();
        /**
         * The ID or IDs (a comma separated list) of the selected account
         * taken from the selectedAccount route param
         */
        this.productId = getRouteParameter(this.route, 'selectedAccount');
        /**
         * Used to display the error occured during loading of accounts
         */
        this.error = this.service.error;
        /**
         * A method to return the alias of the given account
         */
        this.getAlias = getAccountAlias;
        /**
         * Returns true if product has external info
         */
        this.hasExternalInfo = hasExternalInfo;
        this.registeredRefreshAccountsListEvents = [];
        this.refreshAccountsListHandler = this.refreshAccountsList.bind(this);
        /**
         * The list of accounts to display in the dropdown.
         */
        this.accounts = new Observable(subscriber => {
            const subscriptions = [];
            subscriptions.push(this.service.accountsList.subscribe(products => {
                subscriber.next(products);
                if (products === null || products === void 0 ? void 0 : products.some(hasExternalInfo)) {
                    subscriptions.push(this.productsExternalInfoService
                        .getProductsWithExternalInfo(products)
                        .subscribe(productsWithExternalData => subscriber.next(productsWithExternalData), subscriber.error));
                }
            }, subscriber.error));
            return () => subscriptions.forEach(subscription => subscription.unsubscribe());
        }).pipe(tap(accounts => this.accountsList.next(accounts)));
        this.accountsList = new Subject();
        /**
         * Select multiple accounts
         * Set to `true` to allow the bank customer to select more than one arrangement at a time.
         */
        this.multiple = new BehaviorSubject(false);
        /**
         * Enables bank customers to filter the arrangements that are presented in the dropdown.
         * Set to `true` to show Filter. Set to `false` to show Search.
         */
        this.filterItems = new BehaviorSubject(true);
        /**
         * Defines whether the account status is displayed for the selected account
         */
        this.showAccountState$ = new BehaviorSubject(true);
        /**
         * Emits the ID of the account selected by the bank customer as a string.
         */
        this.selectedAccount = new EventEmitter();
        /**
         * An event emitter to extend payload with product kind
         */
        this.selectedKind = new EventEmitter();
        /**
         * The method processed error messages to display in the template.
         */
        this.processErrorMessages = processErrorMessages;
    }
    /**
     * Comma separated list of event names to subscribe to perform accounts refresh
     */
    set refreshAccountListEvent(value) {
        this.clearRefreshAccountsListEvents();
        if (value) {
            this.registeredRefreshAccountsListEvents = value.replace(/ /g, '').split(',');
            this.registeredRefreshAccountsListEvents.forEach(eventName => {
                this.eventBusService.subscribe(eventName, this.refreshAccountsListHandler);
            });
        }
    }
    set multipleValue(value) {
        this.multiple.next(modelItemToBoolean(value));
    }
    set filterItemsValue(value) {
        this.filterItems.next(modelItemToBoolean(value));
    }
    set showAccountStateValue(value) {
        this.showAccountState$.next(modelItemToBoolean(value));
    }
    refreshAccountsList() {
        this.service.refreshAccountsList();
    }
    clearRefreshAccountsListEvents() {
        this.registeredRefreshAccountsListEvents.forEach(eventName => {
            this.eventBusService.unsubscribe(eventName, this.refreshAccountsListHandler);
        });
        this.registeredRefreshAccountsListEvents = [];
    }
    combineLatestSub() {
        return combineLatest(this.accountsList, this.productId, this.multiple)
            .pipe(takeUntil(this.gc$))
            .subscribe(([accounts, productId, multiple]) => {
            if (accounts) {
                this.selectedAccountState = undefined;
                if (multiple) {
                    const productIdArray = productId.split(',');
                    this.accountSelected = accounts
                        ? accounts.filter((account) => account.id === undefined || productIdArray.includes(account.id))
                        : [];
                    this.selectedAccountState = this.mapAccountState(this.accountSelected[0]);
                }
                else {
                    this.accountSelected = accounts ? accounts.find((product) => product.id === productId) : undefined;
                    this.selectedAccountState = this.mapAccountState(this.accountSelected);
                }
            }
            this.changeDetector.markForCheck();
        });
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.combineLatestSub();
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @internal
     */
    ngOnDestroy() {
        this.clearRefreshAccountsListEvents();
        this.gc$.next();
        this.gc$.complete();
    }
    /**
     * Maps product state to AccountState
     *
     * @param item
     */
    mapAccountState(item) {
        if (item && item.state && item.state.state) {
            const productState = item.state.state;
            return this.settings.states.find(value => productState.toLocaleLowerCase() === value.stateName.toLocaleLowerCase() &&
                !this.settings.notToDisplayStateList.includes(productState));
        }
        return undefined;
    }
    /**
     * Event handler for the `change` event of `bb-account-selector-ui`
     * emits a string of comma-separated account ids to `selectedAccount` and `selectedKind`
     *
     * @param item
     */
    onAccountSelected(item) {
        if (!this.isProduct(item)) {
            // this checking here is because of a bug in `ng-select`.
            // `ng-select` in multi-select mode if its 'filter' was changed
            // sends "onClose" an Event object instead of the real elements
            return;
        }
        this.selectedAccountState = undefined;
        this.accountSelected = item;
        if (Array.isArray(item)) {
            this.selectedAccountState = this.mapAccountState(item[0]);
            this.selectedAccount.emit(item.map(account => account.id).join(','));
            this.selectedKind.emit(item.map(account => account.kind).join(','));
        }
        else {
            this.selectedAccountState = this.mapAccountState(item);
            this.selectedAccount.emit(item.id);
            this.selectedKind.emit(item.kind);
        }
    }
    /**
     * Comparing given Products by `id` property.
     */
    compareProductsById(product1, product2) {
        return this.isProduct(product1) && this.isProduct(product2) && product1.id === product2.id;
    }
    /**
     * Returns `true` if product alias includes `value`, otherwise `false`
     */
    isInProductAlias(value, product) {
        const searchTerm = value.toLowerCase();
        const productAlias = (this.getAlias(product) || '').toLowerCase();
        return productAlias.includes(searchTerm);
    }
    /**
     * Returns balance for the given product
     */
    getProductBalance(product) {
        var _a, _b;
        return (_b = (_a = product.bookedBalance) !== null && _a !== void 0 ? _a : product.principalAmount) !== null && _b !== void 0 ? _b : product.currentInvestmentValue;
    }
    /**
     * Returns sync date of external info for the given product
     */
    getExternalInfoSyncDate(product) {
        return hasExternalInfo(product) ? product === null || product === void 0 ? void 0 : product.lastSyncDate : undefined;
    }
    isProduct(item) {
        if (Array.isArray(item) && item.length === 0) {
            return true; // handles the case with an empty array input (when all the items are unselected in multiple mode)
        }
        const product = Array.isArray(item) ? item[0] : item;
        return typeof product === 'object' && 'id' in product;
    }
}
ProductSummaryAccountSelectorWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetComponent, deps: [{ token: i1$2.ActivatedRoute }, { token: ProductSummaryService }, { token: i3$1.ProductsExternalInfoService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: PUBSUB }, { token: BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN }], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryAccountSelectorWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorWidgetComponent, selector: "bb-product-summary-account-selector-widget", inputs: { refreshAccountListEvent: ["event.refreshAccountsList", "refreshAccountListEvent"], multipleValue: ["multiple", "multipleValue"], filterItemsValue: ["filterItems", "filterItemsValue"], showAccountStateValue: ["showAccountState", "showAccountStateValue"] }, outputs: { selectedAccount: "selectedAccount", selectedKind: "selectedKind" }, providers: [ProductSummaryService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"accounts | async as accounts; else loadingTemplate\">\n  <ng-container\n    bbAccountSelectorDropdownCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"accounts\"\n>\n  </ng-container>\n</ng-container>\n\n<!-- Account Selector Dropdown template -->\n<ng-template\n  bbAccountSelectorDropdownCustomizable\n  let-hostRef\n  let-accounts=\"context\"\n>\n  <bb-account-selector-ui\n    class=\"bb-product-summary-account-selector\"\n    [items]=\"accounts\"\n    [dropdownPosition]=\"'bottom'\"\n    [selectedItems]=\"hostRef.accountSelected\"\n    [multiple]=\"hostRef.multiple | async\"\n    [closeOnSelect]=\"(hostRef.multiple | async) === false\"\n    (change)=\"hostRef.onAccountSelected($event)\"\n    [filterItems]=\"hostRef.filterItems | async\"\n    [compareItemsWith]=\"hostRef.compareProductsById.bind(hostRef)\"\n    [searchFunc]=\"hostRef.isInProductAlias.bind(hostRef)\"\n    data-role=\"accountSelector\"\n    placeholder=\"Select Account(s)\"\n    i18n-placeholder=\"Select Account(s)|Select Accounts placeholder\n      @@product-summary-account-selector.empty.state.placeholder\"\n  >\n    <ng-template\n      bbCustomSingleSelectedItemLabel\n      let-item=\"item\"\n    >\n      <ng-container\n        bbAccountSelectorItemCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"item\"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomMultiSelectedItemsLabel\n      let-items=\"items\">\n      <ng-container\n        bbAccountSelectorMultiSelectedItemsCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"{items: items, accounts: accounts}\">\n      </ng-container>\n    </ng-template>\n\n    <ng-template\n      bbCustomOptionItem\n      let-item=\"item\"\n      let-item$=\"item$\"\n      let-index=\"index\"\n    >\n      <ng-container *ngIf=\"hostRef.multiple | async\">\n        <div class=\"bb-stack\">\n          <div class=\"bb-stack__item bb-product-item__details\">\n            <bb-input-checkbox-ui\n              [id]=\"index\"\n              [ngModel]=\"item$.selected\"\n              (click)=\"$event.preventDefault()\"\n            >\n            </bb-input-checkbox-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--fill bb-ellipsis bb-ellipsis--single-line\">\n            <ng-container\n              bbAccountSelectorItemCustomizable\n              [bbHostRef]=\"hostRef\"\n              [bbTemplateContext]=\"item\"\n            >\n            </ng-container>\n          </div>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(hostRef.multiple | async) === false\">\n        <ng-container\n          bbAccountSelectorItemCustomizable\n          [bbHostRef]=\"hostRef\"\n          [bbTemplateContext]=\"item\"\n        >\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  </bb-account-selector-ui>\n</ng-template>\n\n<!-- Product summary account selector item template -->\n<ng-template\n  bbAccountSelectorItemCustomizable\n  let-hostRef\n  let-item=\"context\"\n>\n  <bb-product-summary-account-selector-item\n    [type]=\"item?.productKindName\"\n    [title]=\"hostRef.getAlias(item)\"\n    [amount]=\"hostRef.getProductBalance(item)\"\n    [currency]=\"item?.currency\"\n    [status]=\"item?.state?.state\"\n    [productNumber]=\"item | bbProductNumberValue\"\n    [productNumberType]=\"item | bbProductNumberType\"\n    [showExternalInfo]=\"hostRef.hasExternalInfo(item)\"\n    [externalLogo]=\"item?.financialInstitution?.logo\"\n    [externalName]=\"item?.financialInstitution?.name\"\n    [externalSyncDate]=\"hostRef.getExternalInfoSyncDate(item)\"\n    [isCollapsedView]=\"hostRef.responsiveView === 'mobile'\"\n  ></bb-product-summary-account-selector-item>\n</ng-template>\n\n<!-- Product summary loading template -->\n<ng-template #loadingTemplate>\n  <ng-container\n    bbAccountSelectorLoadingCustomizable\n    [bbHostRef]=\"hostRef\"\n  >\n    <div></div>\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorLoadingCustomizable\n  let-hostRef\n>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@product.details.loadingAccounts\"\n      [text]=\"'Loading Accounts...'\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-container\n  bbAccountSelectorStateCustomizable\n  [bbHostRef]=\"hostRef\"\n>\n</ng-container>\n\n<ng-template\n  bbAccountSelectorStateCustomizable\n  let-hostRef\n>\n  <bb-account-state-ui\n    *ngIf=\"hostRef.selectedAccountState\"\n    [isDisplayingAlert]=\"(hostRef.showAccountState$ | async) && ((hostRef.multiple | async) === false)\"\n    [item]=\"hostRef.selectedAccountState\"\n  >\n  <span i18n=\"@@product-summary-account-selector.account-state.message\">\n      {hostRef.selectedAccountState?.severity, select, warning {This account is temporarily\n        inactive. For more info please contact your bank.} error {This account is permanently disabled. For more info please\n        contact your bank.}}\n  </span>\n  </bb-account-state-ui>\n</ng-template>\n\n<ng-template\n  bbAccountSelectorMultiSelectedItemsCustomizable\n  let-hostRef\n  let-items=\"context.items\"\n  let-accounts=\"context.accounts\"\n>\n  <div class=\"bb-account-selector__selected\">\n    <div class=\"bb-account-selector__selected-accounts-number bb-text-bold\">\n      <span i18n=\"Selected Accounts|Selected Accounts multi label @@bb-product-summary-account-selector.multi.label\">\n        { items.length, plural, =1 {1 account selected} other {{{accounts.length === items.length ? 'All' : items.length}} accounts selected}}\n      </span>\n    </div>\n    <div class=\"bb-account-selector__selected-accounts bb-text-subtitle\">\n      <ng-container *ngIf=\"accounts.length === items.length; else selectedAccountsTemplate\">\n        {{ items.length }}\n        <span\n          i18n=\"\n             All Selected Accounts|All Selected Accounts label @@product-summary-account-selector.allSelectedAccounts.label\n          \"\n          class=\"bb-account-selector__selected-account\"\n        >\n          accounts\n        </span>\n      </ng-container>\n      <ng-template #selectedAccountsTemplate>\n        <bb-ellipsis-ui>\n          <ng-container *ngFor=\"let item of items; let i = index\">\n                <span class=\"bb-account-selector__selected-account\"\n                >{{ hostRef.getAlias(item)\n                  }}<span *ngIf=\"i !== items.length - 1\" class=\"bb-account-selector__selected-account-separator\">, </span>\n                </span>\n          </ng-container>\n        </bb-ellipsis-ui>\n      </ng-template>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0.forwardRef(function () { return i5.InputCheckboxComponent; }), selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorItemComponent; }), selector: "bb-product-summary-account-selector-item", inputs: ["isCollapsedView", "productNumberType", "showExternalInfo", "externalLogo", "externalName", "externalSyncDate"] }, { type: i0.forwardRef(function () { return i7.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i8.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1$1.AccountStateComponent; }), selector: "bb-account-state-ui", inputs: ["isDisplayingAlert", "item"] }, { type: i0.forwardRef(function () { return i10.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorDropdownCustomizableDirective; }), selector: "[bbAccountSelectorDropdownCustomizable]" }, { type: i0.forwardRef(function () { return i4.CustomSingleSelectedItemLabelDirective; }), selector: "ng-template[bbCustomSingleSelectedItemLabel]" }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorItemCustomizableDirective; }), selector: "[bbAccountSelectorItemCustomizable]" }, { type: i0.forwardRef(function () { return i4.CustomMultiSelectedItemsLabelDirective; }), selector: "ng-template[bbCustomMultiSelectedItemsLabel]" }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective; }), selector: "[bbAccountSelectorMultiSelectedItemsCustomizable]" }, { type: i0.forwardRef(function () { return i4.CustomOptionItemDirective; }), selector: "ng-template[bbCustomOptionItem]" }, { type: i0.forwardRef(function () { return i12.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i12.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorLoadingCustomizableDirective; }), selector: "[bbAccountSelectorLoadingCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryAccountSelectorStateCustomizableDirective; }), selector: "[bbAccountSelectorStateCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i0.forwardRef(function () { return i3.AsyncPipe; }), "bbProductNumberValue": i0.forwardRef(function () { return i3$1.ProductNumberValuePipe; }), "bbProductNumberType": i0.forwardRef(function () { return i3$1.ProductNumberTypePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-account-selector-widget',
                    templateUrl: 'product-summary-account-selector-widget.component.html',
                    providers: [ProductSummaryService],
                }]
        }], ctorParameters: function () { return [{ type: i1$2.ActivatedRoute }, { type: ProductSummaryService }, { type: i3$1.ProductsExternalInfoService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN]
                }] }]; }, propDecorators: { refreshAccountListEvent: [{
                type: Input,
                args: [WidgetProperty.EVENT_REFRESH_ACCOUNT_LIST]
            }], multipleValue: [{
                type: Input,
                args: [WidgetProperty.MULTIPLE]
            }], filterItemsValue: [{
                type: Input,
                args: [WidgetProperty.FILTER_ITEMS]
            }], showAccountStateValue: [{
                type: Input,
                args: [WidgetProperty.SHOW_ACCOUNT_STATE]
            }], selectedAccount: [{
                type: Output
            }], selectedKind: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing the entire selector
 *
 * @usageNotes
 *
 * ### Customize the account selector
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorDropdownCustomizable
 *   let-hostRef
 *   let-accounts="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
class ProductSummaryAccountSelectorDropdownCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorDropdownCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorDropdownCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorDropdownCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorDropdownCustomizableDirective, selector: "[bbAccountSelectorDropdownCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorDropdownCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorDropdownCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing an account selector item
 * This slot is used for displaying items in the dropdown list and
 * in the selected account (single-select only)
 *
 * @usageNotes
 *
 * ### Customize an account selector item
 *
 * ```html
 *  <ng-template
 *    bbAccountSelectorItemCustomizable
 *    let-hostRef
 *    let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
class ProductSummaryAccountSelectorItemCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorItemCustomizableDirective, selector: "[bbAccountSelectorItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorItemCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing selected accounts
 * in multi-select mode
 *
 * @usageNotes
 *
 * ### Customize the selected accounts
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorMultiSelectedItemsCustomizable
 *   let-hostRef
 *   let-items="context.items"
 *   let-accounts="context.accounts">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
class ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, selector: "[bbAccountSelectorMultiSelectedItemsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorMultiSelectedItemsCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the loader
 *
 * @usageNotes
 *
 * ### Customize the account selector
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorLoadingCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
class ProductSummaryAccountSelectorLoadingCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorLoadingCustomizableDirective, selector: "[bbAccountSelectorLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorLoadingCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the state of the selected account
 *
 * @usageNotes
 *
 * ### Customize the account state
 *
 * ```html
 * <ng-template
 *   bbAccountSelectorStateCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryAccountSelectorWidgetModule
 */
class ProductSummaryAccountSelectorStateCustomizableDirective extends BbTemplate {
}
ProductSummaryAccountSelectorStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryAccountSelectorStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountSelectorStateCustomizableDirective, selector: "[bbAccountSelectorStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountSelectorStateCustomizable]',
                }]
        }] });

const components = [ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorItemComponent];
const directives = [
    ProductSummaryAccountSelectorDropdownCustomizableDirective,
    ProductSummaryAccountSelectorItemCustomizableDirective,
    ProductSummaryAccountSelectorLoadingCustomizableDirective,
    ProductSummaryAccountSelectorStateCustomizableDirective,
    ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective,
];
const uiModules = [
    ProductItemCustomModule,
    ProductKindModule,
    AccountStateModule,
    AccountSelectorModule,
    InputCheckboxModule,
    ProductItemBasicAccountModule,
    EmptyStateModule,
    LoadingIndicatorModule,
    EllipsisModule,
    ProductNumberModule,
    AmountModule,
    ValidationModule,
    DatePipeModule,
];
const services = [ProductsExternalInfoService];
/**
 * Exports the Widgets and UI components for displaying of the account selector. (Retail banking)
 *
 * The following widgets are included in this module:
 *  - `ProductSummaryAccountSelectorWidgetComponent`
 *
 * @see ProductSummaryAccountSelectorWidgetComponent
 *
 * @usageNotes
 *
 * ### Include the exported widgets in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryAccountSelectorWidgetModule ,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 */
class ProductSummaryAccountSelectorWidgetModule {
}
ProductSummaryAccountSelectorWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSummaryAccountSelectorWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetModule, declarations: [ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorItemComponent, ProductSummaryAccountSelectorDropdownCustomizableDirective,
        ProductSummaryAccountSelectorItemCustomizableDirective,
        ProductSummaryAccountSelectorLoadingCustomizableDirective,
        ProductSummaryAccountSelectorStateCustomizableDirective,
        ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective], imports: [CommonModule,
        FormsModule, i1$3.BackbaseCoreModule, ProductItemCustomModule,
        ProductKindModule,
        AccountStateModule,
        AccountSelectorModule,
        InputCheckboxModule,
        ProductItemBasicAccountModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        EllipsisModule,
        ProductNumberModule,
        AmountModule,
        ValidationModule,
        DatePipeModule], exports: [ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorItemComponent, ProductSummaryAccountSelectorDropdownCustomizableDirective,
        ProductSummaryAccountSelectorItemCustomizableDirective,
        ProductSummaryAccountSelectorLoadingCustomizableDirective,
        ProductSummaryAccountSelectorStateCustomizableDirective,
        ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, ProductItemCustomModule,
        ProductKindModule,
        AccountStateModule,
        AccountSelectorModule,
        InputCheckboxModule,
        ProductItemBasicAccountModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        EllipsisModule,
        ProductNumberModule,
        AmountModule,
        ValidationModule,
        DatePipeModule] });
ProductSummaryAccountSelectorWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetModule, providers: [...services, ...productSummaryAccountSelectorConfigProviders], imports: [[
            CommonModule,
            FormsModule,
            BackbaseCoreModule.withConfig({
                classMap: { ProductSummaryAccountSelectorWidgetComponent },
            }),
            ...uiModules,
        ], ProductItemCustomModule,
        ProductKindModule,
        AccountStateModule,
        AccountSelectorModule,
        InputCheckboxModule,
        ProductItemBasicAccountModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        EllipsisModule,
        ProductNumberModule,
        AmountModule,
        ValidationModule,
        DatePipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountSelectorWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { ProductSummaryAccountSelectorWidgetComponent },
                        }),
                        ...uiModules,
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules],
                    providers: [...services, ...productSummaryAccountSelectorConfigProviders],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BB_PRDSUM_ACCOUNT_SELECTOR_CONFIG_TOKEN, ProductKindsAccessDenied, ProductKindsBadRequest, ProductKindsUnknownError, ProductSummaryAccountSelectorDropdownCustomizableDirective, ProductSummaryAccountSelectorItemComponent, ProductSummaryAccountSelectorItemCustomizableDirective, ProductSummaryAccountSelectorLoadingCustomizableDirective, ProductSummaryAccountSelectorMultiSelectedItemsCustomizableDirective, ProductSummaryAccountSelectorStateCustomizableDirective, ProductSummaryAccountSelectorWidgetComponent, ProductSummaryAccountSelectorWidgetModule, ProductSummaryService, WidgetProperty, productSummaryAccountSelectorConfigProviders, productSummaryAccountSelectorDefaults };
//# sourceMappingURL=backbase-product-summary-account-selector-widget-ang.js.map
