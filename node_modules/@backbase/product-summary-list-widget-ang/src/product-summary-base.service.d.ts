import { OnDestroy } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { GetProductSummaryRequestParams } from '@backbase/arrangement-manager-http-ang';
import { AdditionalProperties } from '@backbase/product-summary-common-ang';
import { ProductKindsError } from './product-summary-error';
import { ProductKind, TotalBalance } from './product-summary.service';
import * as i0 from "@angular/core";
export interface ProductKinds extends AdditionalProperties {
    total?: TotalBalance;
    productKinds: Array<ProductKind>;
}
/**
 * Service for fetching and storing product kinds
 *
 * This service relies on providers from `ProductSummaryListWidgetModule`.
 *
 * @see ProductSummaryListWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryListWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryListWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
export declare abstract class ProductSummaryBaseService implements OnDestroy {
    protected readonly listParams: BehaviorSubject<GetProductSummaryRequestParams>;
    protected productKindsRefresh: BehaviorSubject<boolean>;
    /**
     * Used to store the error occured during loading of accounts
     */
    readonly error: BehaviorSubject<ProductKindsError | undefined>;
    /**
     * List of accounts fetched from the server
     */
    readonly isLoading: BehaviorSubject<boolean>;
    /**
     * List of product kinds (accounts) fetched from the server
     */
    abstract readonly productKinds: Observable<ProductKinds | undefined>;
    /**
     * @internal
     */
    ngOnDestroy(): void;
    /**
     * Refreshes the list of product kinds
     * Causes refetching data
     */
    refreshProductKinds(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryBaseService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProductSummaryBaseService>;
}
