import * as i8 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, EventEmitter, Directive, Inject, Input, Output, Component, NgModule } from '@angular/core';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i4 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i6 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i7 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i10 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i1$1 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i5 from '@backbase/product-summary-ui';
import { ProductKindModule, ProductKindCollapsibleModule, ProductNeedsAttentionModule } from '@backbase/product-summary-ui';
import * as i2 from '@backbase/product-summary-common-ang';
import { isProductVisible as isProductVisible$1, ProductKindUri, cacheRequest, hasExternalInfo, processErrorMessages, ProductKindNames, ProductsExternalInfoService } from '@backbase/product-summary-common-ang';
import { BehaviorSubject, combineLatest, of, Observable, Subscription, ReplaySubject } from 'rxjs';
import { distinctUntilChanged, tap, map, catchError, switchMap } from 'rxjs/operators';
import * as i1 from '@backbase/arrangement-manager-http-ang';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';

class ProductKindsAccessDenied {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsAccessDenied';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
class ProductKindsBadRequest {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsBadRequest';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
class ProductKindsUnknownError {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsUnknownError';
        this.messages = [response.message];
    }
}
const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ProductKindsUnknownError(error);
    }
    else {
        switch (error.status) {
            case 400:
                return new ProductKindsBadRequest(error);
            case 401:
                return new ProductKindsAccessDenied(error);
            case 403:
                return new ProductKindsAccessDenied(error);
            default:
                return new ProductKindsUnknownError(error);
        }
    }
};

/**
 * Service for fetching and storing product kinds
 *
 * This service relies on providers from `ProductSummaryListWidgetModule`.
 *
 * @see ProductSummaryListWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryListWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryListWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
class ProductSummaryBaseService {
    constructor() {
        this.listParams = new BehaviorSubject({});
        this.productKindsRefresh = new BehaviorSubject(false);
        /**
         * Used to store the error occured during loading of accounts
         */
        this.error = new BehaviorSubject(undefined);
        /**
         * List of accounts fetched from the server
         */
        this.isLoading = new BehaviorSubject(false);
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.error.complete();
        this.productKindsRefresh.complete();
    }
    /**
     * Refreshes the list of product kinds
     * Causes refetching data
     */
    refreshProductKinds() {
        this.productKindsRefresh.next(true);
    }
}
ProductSummaryBaseService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryBaseService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryBaseService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryBaseService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryBaseService, decorators: [{
            type: Injectable
        }] });

const clearUndefinedProperties$1 = (obj) => JSON.parse(JSON.stringify(obj));
const aggregatedToTotalBalance = (aggregatedBalance) => ({
    aggregatedBalance: aggregatedBalance.value || '',
    currency: aggregatedBalance.currency || '',
});
const hasVisibleProducts$1 = (products) => products.some(product => product && isProductVisible$1(product));
const getProductKind = (kind) => {
    switch (kind) {
        case 'currentAccounts':
            return ProductKindUri.CURRENT_ACCOUNT;
        case 'savingsAccounts':
            return ProductKindUri.SAVINGS_ACCOUNT;
        case 'termDeposits':
            return ProductKindUri.TERM_DEPOSIT;
        case 'loans':
            return ProductKindUri.LOAN;
        case 'creditCards':
            return ProductKindUri.CREDIT_CARD;
        case 'debitCards':
            return ProductKindUri.DEBIT_CARD;
        case 'investmentAccounts':
            return ProductKindUri.INVESTMENT_ACCOUNT;
        default:
            return kind;
    }
};
const objectToProductKind$1 = (kind, productKind) => {
    const hasProducts = productKind && productKind.products && productKind.products.length > 0;
    if (hasProducts && hasVisibleProducts$1(productKind.products)) {
        const products = productKind.products;
        return Object.assign({ id: kind, name: productKind.name, aggregatedBalance: productKind.aggregatedBalance ? productKind.aggregatedBalance.value : undefined, currency: productKind.aggregatedBalance ? productKind.aggregatedBalance.currency : undefined, products: products
                .filter(isProductVisible$1)
                .map((product) => (Object.assign(Object.assign({}, product), { kind, productKindUri: getProductKind(kind) }))) }, (productKind.additions ? { additions: productKind.additions } : {}));
    }
    return undefined;
};
const arrayToProductKindList = (obj) => obj.map((element) => element && objectToProductKind$1(element.name, element)).filter(Boolean);
const flattenArray = (arr) => [].concat(...arr);
const toProductKindList$1 = (res) => {
    const products = Object.entries(res)
        .filter(([key]) => key !== 'aggregatedBalance')
        .map(([kind, value]) => {
        if (!Array.isArray(value)) {
            return objectToProductKind$1(kind, value);
        }
        return arrayToProductKindList(value);
    })
        .filter(Boolean);
    return flattenArray(products);
};
const responseToProductKinds$1 = (res) => clearUndefinedProperties$1(Object.assign({ total: res && res.aggregatedBalance ? aggregatedToTotalBalance(res.aggregatedBalance) : undefined, productKinds: res ? toProductKindList$1(res) : [] }, (res && res.additions ? { additions: res.additions } : {})));
/**
 * Service for fetching and storing product kinds
 *
 * This service relies on providers from `ProductSummaryListWidgetModule`.
 *
 * @see ProductSummaryListWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryListWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryListWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
class ProductSummaryService extends ProductSummaryBaseService {
    constructor(productSummaryDataService) {
        super();
        this.productSummaryDataService = productSummaryDataService;
        this.productKinds = combineLatest(this.listParams.pipe(distinctUntilChanged()), // [NOTE] This may require a compare function if `ListParams` isn't a primitive
        this.productKindsRefresh).pipe(tap(() => {
            this.isLoading.next(true);
        }), cacheRequest(([params]) => this.productSummaryDataService.getProductSummary(params).pipe(map((res) => responseToProductKinds$1(res)), catchError((error) => {
            this.error.next(parseError(error));
            return of(undefined);
        }))), tap(() => {
            this.isLoading.next(false);
        }));
    }
}
ProductSummaryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, deps: [{ token: i1.ProductSummaryHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }]; } });

const WidgetProperty = {
    SHOW_ICONS: 'showIcons',
    EVENT_REFRESH_ACCOUNT_LIST: 'event.refreshAccountsList',
    OUTPUT_SELECTED_ACCOUNT: 'output.selectedAccount',
};

/**
 * A widget for displaying a list of accounts
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryListWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'product-summary-account-details-widget-ang',
 *           properties: {
 *            classId: 'ProductSummaryListWidgetComponent',
 *            showIcons: true,
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 */
// Temporary template. TODO: This component is to be broken down into atomic components
class ProductSummaryListBaseComponent {
    // Temporary template. TODO: This component is to be broken down into atomic components
    /**
     * Constructor
     *
     * @param service
     * @param productsExternalInfoService
     * @param eventBusService
     */
    constructor(service, productsExternalInfoService, eventBusService) {
        this.service = service;
        this.productsExternalInfoService = productsExternalInfoService;
        this.eventBusService = eventBusService;
        /**
         * @internal
         */
        this.hostRef = this;
        /**
         * If the fetching of the product kinds failed, this property
         * holds the errors coming from the server
         */
        this.error = this.service.error;
        /**
         * Product kinds fetched from the server
         */
        this.items = new Observable(subscriber => {
            const subscriptions = [];
            subscriptions.push(this.service.productKinds.subscribe(productKinds => {
                const products = this.getProductsFromProductKinds(productKinds);
                subscriber.next(productKinds);
                if (products.some(hasExternalInfo)) {
                    subscriptions.push(this.productsExternalInfoService
                        .getProductsWithExternalInfo(products)
                        .pipe(map(items => this.addProductsToProductKinds(items, productKinds)))
                        .subscribe(subscriber));
                }
            }, subscriber.error));
            return () => subscriptions.forEach(subscription => subscription.unsubscribe());
        });
        /**
         * Defines the loading state during the loading of data.
         */
        this.isLoading = this.service.isLoading;
        this.widgetPropertiesSubscription = new Subscription();
        /**
         * Indicates whether the product kind card is expanded or collapsed.
         */
        this.isExpanded = {};
        /**
         * Defines whether to show product kind icons.
         */
        this.showIcons = new BehaviorSubject(true);
        /**
         * Output emits id from selected account as string
         */
        this.selectedAccount = new EventEmitter();
        /**
         * Output emits selected product
         */
        this.selectProduct = new EventEmitter();
        this.refreshAccountsEventNames = [];
        this.refreshAccountsHandler = this.refreshAccounts.bind(this);
        /**
         * Joins the specified error messages to display on the template
         *
         * @param messages
         */
        this.processErrorMessages = processErrorMessages;
        this.getProductsFromProductKinds = (productKinds) => productKinds
            ? productKinds.productKinds.reduce((products, kind) => products.concat(kind.products || []), [])
            : [];
        this.addProductsToProductKinds = (products, productKinds) => (Object.assign(Object.assign({}, productKinds), { productKinds: productKinds.productKinds.map(account => {
                var _a;
                return (Object.assign(Object.assign({}, account), { products: (_a = account.products) === null || _a === void 0 ? void 0 : _a.map(product => (Object.assign(Object.assign({}, product), (products.find(item => item.id === product.id) || {})))) }));
            }) }));
    }
    set showIconsValue(value) {
        this.showIcons.next(value);
    }
    /**
     * Comma separated list of event names to subscribe to perform accounts refresh
     */
    set refreshAccountListEvent(value) {
        if (value && typeof value === 'string') {
            this.refreshAccountsEventNames = value.replace(/ /g, '').split(',');
            this.handleEvents(this.refreshAccountsEventNames, this.refreshAccountsHandler, false);
            this.handleEvents(this.refreshAccountsEventNames, this.refreshAccountsHandler);
        }
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.handleEvents(this.refreshAccountsEventNames, this.refreshAccountsHandler, false);
        this.showIcons.unsubscribe();
    }
    /**
     * Emit the passed `id` to the `selectedAccount` output
     *
     * @param id
     */
    selectAccount(id) {
        this.selectedAccount.emit(id);
    }
    /**
     * Refreshes list of accounts
     */
    refreshAccounts() {
        this.service.refreshProductKinds();
    }
    /**
     * Subscribes or Unsubscribes on the passed eventNames.
     *
     * @param eventNames list of events.
     * @param listener PubsubListener to be invoced on the events.
     * @param subscribe defines whether the function subscribes or unsubscribes (default: true).
     */
    handleEvents(eventNames, listener, subscribe = true) {
        eventNames.forEach((event) => {
            if (subscribe) {
                this.eventBusService.subscribe(event, listener);
            }
            else {
                this.eventBusService.unsubscribe(event, listener);
            }
        });
    }
}
ProductSummaryListBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListBaseComponent, deps: [{ token: ProductSummaryBaseService }, { token: i2.ProductsExternalInfoService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListBaseComponent, inputs: { showIconsValue: ["showIcons", "showIconsValue"], refreshAccountListEvent: ["event.refreshAccountsList", "refreshAccountListEvent"] }, outputs: { selectedAccount: "selectedAccount", selectProduct: "selectProduct" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: ProductSummaryBaseService }, { type: i2.ProductsExternalInfoService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; }, propDecorators: { showIconsValue: [{
                type: Input,
                args: [WidgetProperty.SHOW_ICONS]
            }], refreshAccountListEvent: [{
                type: Input,
                args: [WidgetProperty.EVENT_REFRESH_ACCOUNT_LIST]
            }], selectedAccount: [{
                type: Output
            }], selectProduct: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing the entire view
 *
 * @usageNotes
 *
 * ### Customize the entire view
 *
 * ```html
 * <ng-template
 *   bbProductSummaryCustomizable
 *   let-hostRef
 *   let-items="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryCustomizableDirective extends BbTemplate {
}
ProductSummaryCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryCustomizableDirective, selector: "[bbProductSummaryCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the header of the view
 *
 * @usageNotes
 *
 * ### Customize the header
 *
 * ```html
 * <ng-template
 *   bbProductSummaryHeaderCustomizable
 *   let-hostRef
 *   let-items="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryHeaderCustomizableDirective extends BbTemplate {
}
ProductSummaryHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryHeaderCustomizableDirective, selector: "[bbProductSummaryHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryHeaderCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the body of the view
 *
 * @usageNotes
 *
 * ### Customize the body
 *
 * ```html
 * <ng-template
 *   bbProductSummaryBodyCustomizable
 *   let-hostRef
 *   let-items="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryBodyCustomizableDirective extends BbTemplate {
}
ProductSummaryBodyCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryBodyCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryBodyCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryBodyCustomizableDirective, selector: "[bbProductSummaryBodyCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryBodyCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryBodyCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing every item in the list
 *
 * @usageNotes
 *
 * ### Customize items
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemCustomizableDirective, selector: "[bbProductSummaryListItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with the `currentAccounts` productKind
 *
 * @usageNotes
 *
 * ### Customize `Current Accounts`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemCurrentAccountCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemCurrentAccountCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemCurrentAccountCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemCurrentAccountCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemCurrentAccountCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemCurrentAccountCustomizableDirective, selector: "[bbProductSummaryListItemCurrentAccountCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemCurrentAccountCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemCurrentAccountCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with the `savingsAccounts` productKind
 *
 * @usageNotes
 *
 * ### Customize `Savings Accounts`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemSavingsAccountCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemSavingsAccountCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemSavingsAccountCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemSavingsAccountCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemSavingsAccountCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemSavingsAccountCustomizableDirective, selector: "[bbProductSummaryListItemSavingsAccountCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemSavingsAccountCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemSavingsAccountCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with the `termDeposits` productKind
 *
 * @usageNotes
 *
 * ### Customize `Term Deposits`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemTermDepositCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemTermDepositCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemTermDepositCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemTermDepositCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemTermDepositCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemTermDepositCustomizableDirective, selector: "[bbProductSummaryListItemTermDepositCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemTermDepositCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemTermDepositCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with the `loans` productKind
 *
 * @usageNotes
 *
 * ### Customize `Loans`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemLoanCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemLoanCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemLoanCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemLoanCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemLoanCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemLoanCustomizableDirective, selector: "[bbProductSummaryListItemLoanCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemLoanCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemLoanCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with the `creditCards` productKind
 *
 * @usageNotes
 *
 * ### Customize `Credit Cards`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemCreditCardCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemCreditCardCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemCreditCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemCreditCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemCreditCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemCreditCardCustomizableDirective, selector: "[bbProductSummaryListItemCreditCardCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemCreditCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemCreditCardCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with the `debitCards` productKind
 *
 * @usageNotes
 *
 * ### Customize `Debit Cards`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemDebitCardCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemDebitCardCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemDebitCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemDebitCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemDebitCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemDebitCardCustomizableDirective, selector: "[bbProductSummaryListItemDebitCardCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemDebitCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemDebitCardCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with the `investmentAccounts` productKind
 *
 * @usageNotes
 *
 * ### Customize `Investment Accounts`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemInvestmentAccountCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemInvestmentAccountCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemInvestmentAccountCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemInvestmentAccountCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemInvestmentAccountCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemInvestmentAccountCustomizableDirective, selector: "[bbProductSummaryListItemInvestmentAccountCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemInvestmentAccountCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemInvestmentAccountCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing items with a custom (default) productKind
 *
 * @usageNotes
 *
 * ### Customize custom product kinds
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemOtherProductKindsCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemOtherProductKindsCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemOtherProductKindsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemOtherProductKindsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemOtherProductKindsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemOtherProductKindsCustomizableDirective, selector: "[bbProductSummaryListItemOtherProductKindsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemOtherProductKindsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemOtherProductKindsCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the loading view
 *
 * @usageNotes
 *
 * ### Customize the loading view
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListLoadingCustomizable
 *   let-hostRef>
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListLoadingCustomizableDirective extends BbTemplate {
}
ProductSummaryListLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListLoadingCustomizableDirective, selector: "[bbProductSummaryListLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListLoadingCustomizable]',
                }]
        }] });

/**
 * A widget for displaying a list of accounts
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryListWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'product-summary-account-details-widget-ang',
 *           properties: {
 *            classId: 'ProductSummaryListWidgetComponent',
 *            showIcons: true,
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 */
// Temporary template. TODO: This component is to be broken down into atomic components
class ProductSummaryListWidgetComponent extends ProductSummaryListBaseComponent {
    /**
     * Constructor
     *
     * @param service
     * @param productsExternalInfoService
     * @param eventBusService
     */
    constructor(service, productsExternalInfoService, eventBusService) {
        super(service, productsExternalInfoService, eventBusService);
        this.service = service;
        this.productsExternalInfoService = productsExternalInfoService;
        this.eventBusService = eventBusService;
    }
}
ProductSummaryListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListWidgetComponent, deps: [{ token: ProductSummaryService }, { token: i2.ProductsExternalInfoService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListWidgetComponent, selector: "bb-product-summary-list-widget", providers: [ProductSummaryService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"((isLoading | async) === false) && (items | async) as items; else loadingTemplate\">\n  <ng-container\n    bbProductSummaryCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"items\">\n  </ng-container>\n</ng-container>\n\n<!-- Product summary wrapper template -->\n<ng-template\n  bbProductSummaryCustomizable\n  let-hostRef\n  let-items=\"context\">\n  <ng-container\n    bbProductSummaryHeaderCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"items\">\n  </ng-container>\n\n  <ng-container\n    bbProductSummaryBodyCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"items\">\n  </ng-container>\n</ng-template>\n\n<!-- Product summary header template -->\n<ng-template\n  bbProductSummaryHeaderCustomizable\n  let-hostRef\n  let-items=\"context\">\n  <div\n    *ngIf=\"items.total\"\n    class=\"bb-product-summary-balance\">\n    <div class=\"bb-product-summary-balance__tooltip\">\n      <span\n        class=\"bb-product-summary-balance__title\"\n        data-role=\"label-total-validation\"\n        i18n=\"Total balance label|product summary header label@@product.summary.header.label.total.balance\"\n      >\n        Total balance\n      </span>\n      <bb-icon-ui\n        class=\"bb-text-support\"\n        data-role=\"toggle-tooltip-icon\"\n        tabindex=\"0\"\n        size=\"sm\"\n        name=\"info\"\n        aria-label=\"Toggle tooltip for Total balance\"\n        i18n-aria-label=\"Toggle tooltip for Total balance|@@product.summary.header.account.consumedAmount.aria.label.openclose\"\n        bbTooltip=\"Total balance\"\n        i18n-bbTooltip=\"Total balance|Total balance label@@product.summary.header.account.tooltip.consumedAmount\"\n        triggers=\"focus hover\"\n      ></bb-icon-ui>\n    </div>\n    <bb-amount-ui\n      data-role=\"total-validation-amount\"\n      class=\"bb-product-summary-balance__amount\"\n      [currency]=\"items.total.currency\"\n      [amount]=\"items.total.aggregatedBalance\"\n      >\n    </bb-amount-ui>\n  </div>\n</ng-template>\n\n<!-- Product summary body template -->\n<ng-template\n  bbProductSummaryBodyCustomizable\n  let-hostRef\n  let-items=\"context\"\n>\n  <ng-container *ngFor=\"let productKind of items.productKinds\">\n    <ng-container\n      *ngIf=\"productKind\"\n      bbProductSummaryListItemCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\"\n    ></ng-container>\n  </ng-container>\n</ng-template>\n\n<!-- Product summary item -->\n<ng-template\n  bbProductSummaryListItemCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <ng-container\n    [ngSwitch]=\"productKind.id\">\n\n    <!-- Current Account -->\n    <ng-container\n      *ngSwitchCase=\"'currentAccounts'\"\n      bbProductSummaryListItemCurrentAccountCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Savings Account -->\n    <ng-container\n      *ngSwitchCase=\"'savingsAccounts'\"\n      bbProductSummaryListItemSavingsAccountCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Term Deposit -->\n    <ng-container\n      *ngSwitchCase=\"'termDeposits'\"\n      bbProductSummaryListItemTermDepositCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Loan -->\n    <ng-container\n      *ngSwitchCase=\"'loans'\"\n      bbProductSummaryListItemLoanCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Credit Card -->\n    <ng-container\n      *ngSwitchCase=\"'creditCards'\"\n      bbProductSummaryListItemCreditCardCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Debit Card -->\n    <ng-container\n      *ngSwitchCase=\"'debitCards'\"\n      bbProductSummaryListItemDebitCardCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Investment Account -->\n    <ng-container\n      *ngSwitchCase=\"'investmentAccounts'\"\n      bbProductSummaryListItemInvestmentAccountCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!--\n      Other (Default):\n      This template can be used to add more custom productKinds.\n      The productKind is passed to the template so a customer can add\n      additional switch/if statements to determine what product template should be displayed\n    -->\n    <ng-container\n      *ngSwitchDefault\n      bbProductSummaryListItemOtherProductKindsCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n  </ng-container>\n</ng-template>\n\n<!-- Product summary card: Current Account -->\n<ng-template\n  bbProductSummaryListItemCurrentAccountCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"current-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Savings Account -->\n<ng-template\n  bbProductSummaryListItemSavingsAccountCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"savings-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Term Deposit -->\n<ng-template\n  bbProductSummaryListItemTermDepositCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"term-deposits\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Loan -->\n<ng-template\n  bbProductSummaryListItemLoanCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"loans\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Credit Card -->\n<ng-template\n  bbProductSummaryListItemCreditCardCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"credit-cards\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Debit Card -->\n<ng-template\n  bbProductSummaryListItemDebitCardCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"debit-cards\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Investment Account -->\n<ng-template\n  bbProductSummaryListItemInvestmentAccountCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"investment-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Other Product Kinds -->\n<ng-template\n  bbProductSummaryListItemOtherProductKindsCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"custom-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary details loading template -->\n<ng-template #loadingTemplate>\n  <ng-container bbProductSummaryListLoadingCustomizable\n    [bbHostRef]=\"hostRef\">\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbProductSummaryListLoadingCustomizable\n  let-hostRef>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@product.details.loadingAccounts\"\n      [text]=\"'Loading Accounts...'\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i5.ProductKindCollapsibleComponent, selector: "bb-product-kind-collapsible-ui", inputs: ["isExpanded", "showIcons", "iconName", "productKind"], outputs: ["selectAccount", "selectProduct", "isExpandedChange"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ProductSummaryCustomizableDirective, selector: "[bbProductSummaryCustomizable]" }, { type: ProductSummaryHeaderCustomizableDirective, selector: "[bbProductSummaryHeaderCustomizable]" }, { type: ProductSummaryBodyCustomizableDirective, selector: "[bbProductSummaryBodyCustomizable]" }, { type: i10.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: ProductSummaryListItemCustomizableDirective, selector: "[bbProductSummaryListItemCustomizable]" }, { type: i8.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: ProductSummaryListItemCurrentAccountCustomizableDirective, selector: "[bbProductSummaryListItemCurrentAccountCustomizable]" }, { type: ProductSummaryListItemSavingsAccountCustomizableDirective, selector: "[bbProductSummaryListItemSavingsAccountCustomizable]" }, { type: ProductSummaryListItemTermDepositCustomizableDirective, selector: "[bbProductSummaryListItemTermDepositCustomizable]" }, { type: ProductSummaryListItemLoanCustomizableDirective, selector: "[bbProductSummaryListItemLoanCustomizable]" }, { type: ProductSummaryListItemCreditCardCustomizableDirective, selector: "[bbProductSummaryListItemCreditCardCustomizable]" }, { type: ProductSummaryListItemDebitCardCustomizableDirective, selector: "[bbProductSummaryListItemDebitCardCustomizable]" }, { type: ProductSummaryListItemInvestmentAccountCustomizableDirective, selector: "[bbProductSummaryListItemInvestmentAccountCustomizable]" }, { type: i8.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: ProductSummaryListItemOtherProductKindsCustomizableDirective, selector: "[bbProductSummaryListItemOtherProductKindsCustomizable]" }, { type: ProductSummaryListLoadingCustomizableDirective, selector: "[bbProductSummaryListLoadingCustomizable]" }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-list-widget',
                    templateUrl: 'product-summary-list-widget.component.html',
                    providers: [ProductSummaryService],
                }]
        }], ctorParameters: function () { return [{ type: ProductSummaryService }, { type: i2.ProductsExternalInfoService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });

const clearUndefinedProperties = (obj) => JSON.parse(JSON.stringify(obj));
const getBalanceFromBalanceAggregation = (balanceAggregation, groupName) => {
    if (balanceAggregation[groupName] === undefined)
        return undefined;
    const [currency, { amount }] = Object.entries(balanceAggregation[groupName])[0];
    return {
        aggregatedBalance: amount || '',
        currency,
    };
};
const isProductVisible = (element) => element.attributes.visible === undefined || element.attributes.visible.value === 'true';
const hasVisibleProducts = (elements = []) => elements.some(isProductVisible);
const mapArrangementGroupAttributes = (arrangementGroupAttributes) => {
    const mappedAttributes = {};
    Object.entries(arrangementGroupAttributes).forEach(([key, variant]) => {
        switch (variant.type) {
            case 'BOOLEAN':
                mappedAttributes[key] = variant.value === 'true';
                break;
            case 'DECIMAL':
                mappedAttributes[key] = Number(variant.value);
                break;
            case 'NUMBER':
                mappedAttributes[key] = Number(variant.value);
                break;
            case 'INTEGER':
                mappedAttributes[key] = Number(variant.value);
                break;
            default:
                mappedAttributes[key] = variant.value;
        }
    });
    return mappedAttributes;
};
const getProductKindName = (kindUri) => {
    switch (kindUri) {
        case ProductKindUri.CURRENT_ACCOUNT:
            return ProductKindNames.CURRENT_ACCOUNT;
        case ProductKindUri.SAVINGS_ACCOUNT:
            return ProductKindNames.SAVINGS_ACCOUNT;
        case ProductKindUri.TERM_DEPOSIT:
            return ProductKindNames.TERM_DEPOSIT;
        case ProductKindUri.LOAN:
            return ProductKindNames.LOAN;
        case ProductKindUri.CREDIT_CARD:
            return ProductKindNames.CREDIT_CARD;
        case ProductKindUri.DEBIT_CARD:
            return ProductKindNames.DEBIT_CARD;
        case ProductKindUri.INVESTMENT_ACCOUNT:
            return ProductKindNames.INVESTMENT_ACCOUNT;
        default:
            return kindUri;
    }
};
const objectToProductKind = (groupName, group, balanceAggregation) => {
    var _a;
    const hasProducts = group && group.elements && group.elements.length > 0;
    const balance = balanceAggregation ? getBalanceFromBalanceAggregation(balanceAggregation, groupName) : undefined;
    if (hasProducts && hasVisibleProducts(group.elements)) {
        return {
            id: groupName,
            name: groupName,
            aggregatedBalance: balance === null || balance === void 0 ? void 0 : balance.aggregatedBalance,
            currency: balance === null || balance === void 0 ? void 0 : balance.currency,
            products: (_a = group.elements) === null || _a === void 0 ? void 0 : _a.filter(isProductVisible).map((element) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                const product = mapArrangementGroupAttributes(element.attributes);
                return Object.assign(Object.assign({}, product), { id: element.id, kind: groupName, bookedBalance: (_b = ((_a = product.bookedBalance) !== null && _a !== void 0 ? _a : product.primaryBalance)) === null || _b === void 0 ? void 0 : _b.toString(), principalAmount: (_c = product.principalAmount) !== null && _c !== void 0 ? _c : product.primaryBalance, currentInvestmentValue: (_e = ((_d = product.currentInvestmentValue) !== null && _d !== void 0 ? _d : product.primaryBalance)) === null || _e === void 0 ? void 0 : _e.toString(), availableBalance: (_g = ((_f = product.availableBalance) !== null && _f !== void 0 ? _f : product.secondaryBalance)) === null || _g === void 0 ? void 0 : _g.toString(), accruedInterest: (_h = product.accruedInterest) !== null && _h !== void 0 ? _h : product.secondaryBalance, creditLimitUsage: (_j = product.creditLimitUsage) !== null && _j !== void 0 ? _j : product.tertiaryBalance, productKindName: product.productKindUri ? getProductKindName(product.productKindUri) : undefined, state: product.state ? { state: product.state } : undefined });
            }),
        };
    }
    return undefined;
};
const toProductKindList = (groups, balanceAggregation) => {
    let product = Object.entries(groups)
        .filter(([groupName]) => groupName !== 'overdueAccounts')
        .map(([groupName, group]) => objectToProductKind(groupName, group, balanceAggregation))
        .filter(Boolean);
    const overdueProductKind = objectToProductKind('overdueAccounts', groups['overdueAccounts'], balanceAggregation);
    if (overdueProductKind) {
        product = [overdueProductKind, ...product];
    }
    return product;
};
const responseToProductKinds = (res) => {
    var _a, _b, _c;
    return clearUndefinedProperties({
        total: ((_a = res.metadata) === null || _a === void 0 ? void 0 : _a.balanceAggregations)
            ? getBalanceFromBalanceAggregation((_b = res.metadata) === null || _b === void 0 ? void 0 : _b.balanceAggregations, 'all')
            : undefined,
        productKinds: res && res.groups ? toProductKindList(res.groups, (_c = res.metadata) === null || _c === void 0 ? void 0 : _c.balanceAggregations) : [],
    });
};
/**
 * Service for fetching and storing product kinds
 *
 * This service relies on providers from `ProductSummaryListWidgetModule`.
 *
 * @see ProductSummaryListWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryListWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryListWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
class ArrangementsService extends ProductSummaryBaseService {
    constructor(arrangementViewsHttpService) {
        super();
        this.arrangementViewsHttpService = arrangementViewsHttpService;
        this.viewNameSubject = new ReplaySubject();
        this.productKinds = combineLatest([
            this.viewNameSubject,
            this.productKindsRefresh,
        ]).pipe(tap(() => {
            this.isLoading.next(true);
        }), switchMap(([viewName]) => this.arrangementViewsHttpService.getArrangementView({ viewName }).pipe(map(res => responseToProductKinds(res)), catchError((error) => {
            this.error.next(parseError(error));
            return of(undefined);
        }))), tap(() => {
            this.isLoading.next(false);
        }));
    }
    setViewName(viewName) {
        this.viewNameSubject.next(viewName);
    }
}
ArrangementsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService, deps: [{ token: i1.ArrangementViewsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ArrangementsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ArrangementViewsHttpService }]; } });

/**
 * A widget for displaying a list of accounts
 *
 * @usageNotes
 *
 * ### Include this widget in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ArrangementsListWidgetComponent,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 *
 * ### Include this widget (standalone model)
 *
 * ```typescript
 * export const environment: Environment = {
 *   ...
 *   bootstrap: {
 *     pageModel: {
 *       name: 'root',
 *       properties: {},
 *       children: [
 *         {
 *           name: 'product-summary-account-details-widget-ang',
 *           properties: {
 *            classId: 'ArrangementsListWidgetComponent',
 *            showIcons: true,
 *           },
 *         },
 *       ],
 *     },
 *   },
 * };
 * ```
 */
class ArrangementsListWidgetComponent extends ProductSummaryListBaseComponent {
    /**
     * Constructor
     *
     * @param service
     * @param productsExternalInfoService
     * @param eventBusService
     */
    constructor(service, productsExternalInfoService, eventBusService) {
        super(service, productsExternalInfoService, eventBusService);
        this.service = service;
        this.productsExternalInfoService = productsExternalInfoService;
        this.eventBusService = eventBusService;
        /**
         * Emits arrangement id when pay now is clicked
         */
        this.payNowClick = new EventEmitter();
    }
    ngOnInit() {
        if (this.viewName === undefined) {
            throw new Error('viewName is required');
        }
        else {
            this.service.setViewName(this.viewName);
        }
    }
}
ArrangementsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsListWidgetComponent, deps: [{ token: ArrangementsService }, { token: i2.ProductsExternalInfoService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Component });
ArrangementsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ArrangementsListWidgetComponent, selector: "bb-arrangements-list-widget", inputs: { viewName: "viewName" }, outputs: { payNowClick: "payNowClick" }, providers: [ArrangementsService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"((isLoading | async) === false) && (items | async) as items; else loadingTemplate\">\n  <ng-container\n    bbProductSummaryCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"items\">\n  </ng-container>\n</ng-container>\n\n<!-- Product summary wrapper template -->\n<ng-template\n  bbProductSummaryCustomizable\n  let-hostRef\n  let-items=\"context\">\n  <ng-container\n    bbProductSummaryHeaderCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"items\">\n  </ng-container>\n\n  <ng-container\n    bbProductSummaryBodyCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"items\">\n  </ng-container>\n</ng-template>\n\n<!-- Product summary header template -->\n<ng-template\n  bbProductSummaryHeaderCustomizable\n  let-hostRef\n  let-items=\"context\">\n  <div\n    *ngIf=\"items.total\"\n    class=\"bb-product-summary-balance\">\n    <div class=\"bb-product-summary-balance__tooltip\">\n      <span\n        class=\"bb-product-summary-balance__title\"\n        data-role=\"label-total-validation\"\n        i18n=\"Total balance label|product summary header label@@product.summary.header.label.total.balance\"\n      >\n        Total balance\n      </span>\n      <bb-icon-ui\n        class=\"bb-text-support\"\n        data-role=\"toggle-tooltip-icon\"\n        tabindex=\"0\"\n        size=\"sm\"\n        name=\"info\"\n        aria-label=\"Toggle tooltip for Total balance\"\n        i18n-aria-label=\"Toggle tooltip for Total balance|@@product.summary.header.account.consumedAmount.aria.label.openclose\"\n        bbTooltip=\"Total balance\"\n        i18n-bbTooltip=\"Total balance|Total balance label@@product.summary.header.account.tooltip.consumedAmount\"\n        triggers=\"focus hover\"\n      ></bb-icon-ui>\n    </div>\n    <bb-amount-ui\n      data-role=\"total-validation-amount\"\n      class=\"bb-product-summary-balance__amount\"\n      [currency]=\"items.total.currency\"\n      [amount]=\"items.total.aggregatedBalance\"\n      >\n    </bb-amount-ui>\n  </div>\n</ng-template>\n\n<!-- Product summary body template -->\n<ng-template\n  bbProductSummaryBodyCustomizable\n  let-hostRef\n  let-items=\"context\"\n>\n  <ng-container *ngFor=\"let productKind of items.productKinds\">\n    <ng-container\n      *ngIf=\"productKind\"\n      bbProductSummaryListItemCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\"\n    ></ng-container>\n  </ng-container>\n</ng-template>\n\n<!-- Product summary item -->\n<ng-template\n  bbProductSummaryListItemCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <ng-container\n    [ngSwitch]=\"productKind.id\">\n\n    <!-- Needs Attention Accounts -->\n    <ng-container\n      bbProductSummaryListItemNeedsAttentionAccountsCustomizable\n      *ngSwitchCase=\"'overdueAccounts'\"\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Current Account -->\n    <ng-container\n      *ngSwitchCase=\"'currentAccounts'\"\n      bbProductSummaryListItemCurrentAccountCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Savings Account -->\n    <ng-container\n      *ngSwitchCase=\"'savingsAccounts'\"\n      bbProductSummaryListItemSavingsAccountCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Term Deposit -->\n    <ng-container\n      *ngSwitchCase=\"'termDeposits'\"\n      bbProductSummaryListItemTermDepositCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Loan -->\n    <ng-container\n      *ngSwitchCase=\"'loans'\"\n      bbProductSummaryListItemLoanCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Credit Card -->\n    <ng-container\n      *ngSwitchCase=\"'creditCards'\"\n      bbProductSummaryListItemCreditCardCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Debit Card -->\n    <ng-container\n      *ngSwitchCase=\"'debitCards'\"\n      bbProductSummaryListItemDebitCardCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!-- Investment Account -->\n    <ng-container\n      *ngSwitchCase=\"'investmentAccounts'\"\n      bbProductSummaryListItemInvestmentAccountCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n    <!--\n      Other (Default):\n      This template can be used to add more custom productKinds.\n      The productKind is passed to the template so a customer can add\n      additional switch/if statements to determine what product template should be displayed\n    -->\n    <ng-container\n      *ngSwitchDefault\n      bbProductSummaryListItemOtherProductKindsCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"productKind\">\n    </ng-container>\n\n  </ng-container>\n</ng-template>\n\n\n<!-- Product summary card: Needs Attention Accounts -->\n<ng-template\n  bbProductSummaryListItemNeedsAttentionAccountsCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-needs-attention-ui\n    data-role=\"overdue-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n    (payNowClick)=\"hostRef.payNowClick.emit($event)\"\n  ></bb-product-needs-attention-ui>\n</ng-template>\n\n<!-- Product summary card: Current Account -->\n<ng-template\n  bbProductSummaryListItemCurrentAccountCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"current-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Savings Account -->\n<ng-template\n  bbProductSummaryListItemSavingsAccountCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"savings-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Term Deposit -->\n<ng-template\n  bbProductSummaryListItemTermDepositCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"term-deposits\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Loan -->\n<ng-template\n  bbProductSummaryListItemLoanCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"loans\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Credit Card -->\n<ng-template\n  bbProductSummaryListItemCreditCardCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"credit-cards\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Debit Card -->\n<ng-template\n  bbProductSummaryListItemDebitCardCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"debit-cards\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Investment Account -->\n<ng-template\n  bbProductSummaryListItemInvestmentAccountCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"investment-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary card: Other Product Kinds -->\n<ng-template\n  bbProductSummaryListItemOtherProductKindsCustomizable\n  let-hostRef\n  let-productKind=\"context\">\n  <bb-product-kind-collapsible-ui *ngIf=\"productKind.products.length\"\n    data-role=\"custom-accounts\"\n    [(isExpanded)]=\"hostRef.isExpanded[productKind.name]\"\n    [showIcons]=\"hostRef.showIcons | async\"\n    [productKind]=\"productKind\"\n    (selectAccount)=\"hostRef.selectAccount($event)\"\n    (selectProduct)=\"hostRef.selectProduct.emit($event)\"\n  ></bb-product-kind-collapsible-ui>\n</ng-template>\n\n<!-- Product summary details loading template -->\n<ng-template #loadingTemplate>\n  <ng-container bbProductSummaryListLoadingCustomizable\n    [bbHostRef]=\"hostRef\">\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbProductSummaryListLoadingCustomizable\n  let-hostRef>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      title=\"\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconColor=\"gray\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@product.details.loadingAccounts\"\n      [text]=\"'Loading Accounts...'\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i4.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i5.ProductNeedsAttentionComponent; }), selector: "bb-product-needs-attention-ui", inputs: ["isExpanded", "showIcons", "iconName", "productKind"], outputs: ["selectAccount", "selectProduct", "isExpandedChange", "payNowClick"] }, { type: i0.forwardRef(function () { return i5.ProductKindCollapsibleComponent; }), selector: "bb-product-kind-collapsible-ui", inputs: ["isExpanded", "showIcons", "iconName", "productKind"], outputs: ["selectAccount", "selectProduct", "isExpandedChange"] }, { type: i0.forwardRef(function () { return i6.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return i8.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return ProductSummaryCustomizableDirective; }), selector: "[bbProductSummaryCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryHeaderCustomizableDirective; }), selector: "[bbProductSummaryHeaderCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryBodyCustomizableDirective; }), selector: "[bbProductSummaryBodyCustomizable]" }, { type: i0.forwardRef(function () { return i10.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i8.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return ProductSummaryListItemCustomizableDirective; }), selector: "[bbProductSummaryListItemCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i8.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective; }), selector: "[bbProductSummaryListItemNeedsAttentionAccountsCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemCurrentAccountCustomizableDirective; }), selector: "[bbProductSummaryListItemCurrentAccountCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemSavingsAccountCustomizableDirective; }), selector: "[bbProductSummaryListItemSavingsAccountCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemTermDepositCustomizableDirective; }), selector: "[bbProductSummaryListItemTermDepositCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemLoanCustomizableDirective; }), selector: "[bbProductSummaryListItemLoanCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemCreditCardCustomizableDirective; }), selector: "[bbProductSummaryListItemCreditCardCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemDebitCardCustomizableDirective; }), selector: "[bbProductSummaryListItemDebitCardCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemInvestmentAccountCustomizableDirective; }), selector: "[bbProductSummaryListItemInvestmentAccountCustomizable]" }, { type: i0.forwardRef(function () { return i8.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return ProductSummaryListItemOtherProductKindsCustomizableDirective; }), selector: "[bbProductSummaryListItemOtherProductKindsCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryListLoadingCustomizableDirective; }), selector: "[bbProductSummaryListLoadingCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i8.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-arrangements-list-widget',
                    templateUrl: 'arrangements-list-widget.component.html',
                    providers: [ArrangementsService],
                }]
        }], ctorParameters: function () { return [{ type: ArrangementsService }, { type: i2.ProductsExternalInfoService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; }, propDecorators: { viewName: [{
                type: Input,
                args: ['viewName']
            }], payNowClick: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing items with the `overdueAccounts` productKind
 *
 * @usageNotes
 *
 * ### Customize `Needs Your Attention`
 *
 * ```html
 * <ng-template
 *   bbProductSummaryListItemNeedsAttentionAccountsCustomizable
 *   let-hostRef
 *   let-productKind="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryListWidgetModule
 */
class ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective extends BbTemplate {
}
ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective, selector: "[bbProductSummaryListItemNeedsAttentionAccountsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryListItemNeedsAttentionAccountsCustomizable]',
                }]
        }] });

const components = [ProductSummaryListWidgetComponent, ArrangementsListWidgetComponent];
const directives = [
    ProductSummaryCustomizableDirective,
    ProductSummaryHeaderCustomizableDirective,
    ProductSummaryBodyCustomizableDirective,
    ProductSummaryListItemCustomizableDirective,
    ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective,
    ProductSummaryListItemCurrentAccountCustomizableDirective,
    ProductSummaryListItemSavingsAccountCustomizableDirective,
    ProductSummaryListItemTermDepositCustomizableDirective,
    ProductSummaryListItemLoanCustomizableDirective,
    ProductSummaryListItemCreditCardCustomizableDirective,
    ProductSummaryListItemDebitCardCustomizableDirective,
    ProductSummaryListItemInvestmentAccountCustomizableDirective,
    ProductSummaryListItemOtherProductKindsCustomizableDirective,
    ProductSummaryListLoadingCustomizableDirective,
];
const uiModules = [
    ProductKindModule,
    ProductKindCollapsibleModule,
    IconModule,
    AmountModule,
    EmptyStateModule,
    LoadingIndicatorModule,
    TooltipModule,
    ProductNeedsAttentionModule,
];
/**
 * Exports the Widgets and UI components for showing a list of accounts
 *
 * The following widgets are included in this module:
 *  - `ProductSummaryListWidgetComponent`
 *  - `ArrangementsViewWidgetComponent`
 *
 * @see ProductSummaryListWidgetComponent
 * @see ArrangementsListWidgetComponent
 *
 * @usageNotes
 *
 * ### Include the exported widgets in your `AppModule`:
 *
 * ```typescript
 * @NgModule({
 *   imports: [
 *     ProductSummaryListWidgetModule,
 *   ],
 *   ...
 * })
 * export class AppModule {}
 * ```
 */
class ProductSummaryListWidgetModule {
}
ProductSummaryListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSummaryListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListWidgetModule, declarations: [ProductSummaryListWidgetComponent, ArrangementsListWidgetComponent, ProductSummaryCustomizableDirective,
        ProductSummaryHeaderCustomizableDirective,
        ProductSummaryBodyCustomizableDirective,
        ProductSummaryListItemCustomizableDirective,
        ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective,
        ProductSummaryListItemCurrentAccountCustomizableDirective,
        ProductSummaryListItemSavingsAccountCustomizableDirective,
        ProductSummaryListItemTermDepositCustomizableDirective,
        ProductSummaryListItemLoanCustomizableDirective,
        ProductSummaryListItemCreditCardCustomizableDirective,
        ProductSummaryListItemDebitCardCustomizableDirective,
        ProductSummaryListItemInvestmentAccountCustomizableDirective,
        ProductSummaryListItemOtherProductKindsCustomizableDirective,
        ProductSummaryListLoadingCustomizableDirective], imports: [CommonModule, ProductKindModule,
        ProductKindCollapsibleModule,
        IconModule,
        AmountModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        TooltipModule,
        ProductNeedsAttentionModule, i1$1.BackbaseCoreModule], exports: [ProductSummaryListWidgetComponent, ArrangementsListWidgetComponent, ProductSummaryCustomizableDirective,
        ProductSummaryHeaderCustomizableDirective,
        ProductSummaryBodyCustomizableDirective,
        ProductSummaryListItemCustomizableDirective,
        ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective,
        ProductSummaryListItemCurrentAccountCustomizableDirective,
        ProductSummaryListItemSavingsAccountCustomizableDirective,
        ProductSummaryListItemTermDepositCustomizableDirective,
        ProductSummaryListItemLoanCustomizableDirective,
        ProductSummaryListItemCreditCardCustomizableDirective,
        ProductSummaryListItemDebitCardCustomizableDirective,
        ProductSummaryListItemInvestmentAccountCustomizableDirective,
        ProductSummaryListItemOtherProductKindsCustomizableDirective,
        ProductSummaryListLoadingCustomizableDirective, ProductKindModule,
        ProductKindCollapsibleModule,
        IconModule,
        AmountModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        TooltipModule,
        ProductNeedsAttentionModule] });
ProductSummaryListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListWidgetModule, providers: [ProductsExternalInfoService], imports: [[
            CommonModule,
            ...uiModules,
            BackbaseCoreModule.withConfig({
                classMap: {
                    ProductSummaryListWidgetComponent,
                    ArrangementsListWidgetComponent,
                },
            }),
        ], ProductKindModule,
        ProductKindCollapsibleModule,
        IconModule,
        AmountModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        TooltipModule,
        ProductNeedsAttentionModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ...uiModules,
                        BackbaseCoreModule.withConfig({
                            classMap: {
                                ProductSummaryListWidgetComponent,
                                ArrangementsListWidgetComponent,
                            },
                        }),
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules],
                    providers: [ProductsExternalInfoService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ArrangementsListWidgetComponent, ArrangementsService, ProductKindsAccessDenied, ProductKindsBadRequest, ProductKindsUnknownError, ProductSummaryBaseService, ProductSummaryBodyCustomizableDirective, ProductSummaryCustomizableDirective, ProductSummaryHeaderCustomizableDirective, ProductSummaryListBaseComponent, ProductSummaryListItemCreditCardCustomizableDirective, ProductSummaryListItemCurrentAccountCustomizableDirective, ProductSummaryListItemCustomizableDirective, ProductSummaryListItemDebitCardCustomizableDirective, ProductSummaryListItemInvestmentAccountCustomizableDirective, ProductSummaryListItemLoanCustomizableDirective, ProductSummaryListItemNeedsAttentionAccountsCustomizableDirective, ProductSummaryListItemOtherProductKindsCustomizableDirective, ProductSummaryListItemSavingsAccountCustomizableDirective, ProductSummaryListItemTermDepositCustomizableDirective, ProductSummaryListLoadingCustomizableDirective, ProductSummaryListWidgetComponent, ProductSummaryListWidgetModule, ProductSummaryService, WidgetProperty };
//# sourceMappingURL=backbase-product-summary-list-widget-ang.js.map
