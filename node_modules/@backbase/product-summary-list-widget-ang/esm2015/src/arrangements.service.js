import { Injectable } from '@angular/core';
import { combineLatest, of, ReplaySubject } from 'rxjs';
import { catchError, map, switchMap, tap } from 'rxjs/operators';
import { parseError } from './product-summary-error';
import { ProductSummaryBaseService } from './product-summary-base.service';
import { ProductKindNames, ProductKindUri } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/arrangement-manager-http-ang";
const clearUndefinedProperties = (obj) => JSON.parse(JSON.stringify(obj));
const getBalanceFromBalanceAggregation = (balanceAggregation, groupName) => {
    if (balanceAggregation[groupName] === undefined)
        return undefined;
    const [currency, { amount }] = Object.entries(balanceAggregation[groupName])[0];
    return {
        aggregatedBalance: amount || '',
        currency,
    };
};
const isProductVisible = (element) => element.attributes.visible === undefined || element.attributes.visible.value === 'true';
const hasVisibleProducts = (elements = []) => elements.some(isProductVisible);
const mapArrangementGroupAttributes = (arrangementGroupAttributes) => {
    const mappedAttributes = {};
    Object.entries(arrangementGroupAttributes).forEach(([key, variant]) => {
        switch (variant.type) {
            case 'BOOLEAN':
                mappedAttributes[key] = variant.value === 'true';
                break;
            case 'DECIMAL':
                mappedAttributes[key] = Number(variant.value);
                break;
            case 'NUMBER':
                mappedAttributes[key] = Number(variant.value);
                break;
            case 'INTEGER':
                mappedAttributes[key] = Number(variant.value);
                break;
            default:
                mappedAttributes[key] = variant.value;
        }
    });
    return mappedAttributes;
};
const getProductKindName = (kindUri) => {
    switch (kindUri) {
        case ProductKindUri.CURRENT_ACCOUNT:
            return ProductKindNames.CURRENT_ACCOUNT;
        case ProductKindUri.SAVINGS_ACCOUNT:
            return ProductKindNames.SAVINGS_ACCOUNT;
        case ProductKindUri.TERM_DEPOSIT:
            return ProductKindNames.TERM_DEPOSIT;
        case ProductKindUri.LOAN:
            return ProductKindNames.LOAN;
        case ProductKindUri.CREDIT_CARD:
            return ProductKindNames.CREDIT_CARD;
        case ProductKindUri.DEBIT_CARD:
            return ProductKindNames.DEBIT_CARD;
        case ProductKindUri.INVESTMENT_ACCOUNT:
            return ProductKindNames.INVESTMENT_ACCOUNT;
        default:
            return kindUri;
    }
};
const objectToProductKind = (groupName, group, balanceAggregation) => {
    var _a;
    const hasProducts = group && group.elements && group.elements.length > 0;
    const balance = balanceAggregation ? getBalanceFromBalanceAggregation(balanceAggregation, groupName) : undefined;
    if (hasProducts && hasVisibleProducts(group.elements)) {
        return {
            id: groupName,
            name: groupName,
            aggregatedBalance: balance === null || balance === void 0 ? void 0 : balance.aggregatedBalance,
            currency: balance === null || balance === void 0 ? void 0 : balance.currency,
            products: (_a = group.elements) === null || _a === void 0 ? void 0 : _a.filter(isProductVisible).map((element) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                const product = mapArrangementGroupAttributes(element.attributes);
                return Object.assign(Object.assign({}, product), { id: element.id, kind: groupName, bookedBalance: (_b = ((_a = product.bookedBalance) !== null && _a !== void 0 ? _a : product.primaryBalance)) === null || _b === void 0 ? void 0 : _b.toString(), principalAmount: (_c = product.principalAmount) !== null && _c !== void 0 ? _c : product.primaryBalance, currentInvestmentValue: (_e = ((_d = product.currentInvestmentValue) !== null && _d !== void 0 ? _d : product.primaryBalance)) === null || _e === void 0 ? void 0 : _e.toString(), availableBalance: (_g = ((_f = product.availableBalance) !== null && _f !== void 0 ? _f : product.secondaryBalance)) === null || _g === void 0 ? void 0 : _g.toString(), accruedInterest: (_h = product.accruedInterest) !== null && _h !== void 0 ? _h : product.secondaryBalance, creditLimitUsage: (_j = product.creditLimitUsage) !== null && _j !== void 0 ? _j : product.tertiaryBalance, productKindName: product.productKindUri ? getProductKindName(product.productKindUri) : undefined, state: product.state ? { state: product.state } : undefined });
            }),
        };
    }
    return undefined;
};
const toProductKindList = (groups, balanceAggregation) => {
    let product = Object.entries(groups)
        .filter(([groupName]) => groupName !== 'overdueAccounts')
        .map(([groupName, group]) => objectToProductKind(groupName, group, balanceAggregation))
        .filter(Boolean);
    const overdueProductKind = objectToProductKind('overdueAccounts', groups['overdueAccounts'], balanceAggregation);
    if (overdueProductKind) {
        product = [overdueProductKind, ...product];
    }
    return product;
};
const responseToProductKinds = (res) => {
    var _a, _b, _c;
    return clearUndefinedProperties({
        total: ((_a = res.metadata) === null || _a === void 0 ? void 0 : _a.balanceAggregations)
            ? getBalanceFromBalanceAggregation((_b = res.metadata) === null || _b === void 0 ? void 0 : _b.balanceAggregations, 'all')
            : undefined,
        productKinds: res && res.groups ? toProductKindList(res.groups, (_c = res.metadata) === null || _c === void 0 ? void 0 : _c.balanceAggregations) : [],
    });
};
/**
 * Service for fetching and storing product kinds
 *
 * This service relies on providers from `ProductSummaryListWidgetModule`.
 *
 * @see ProductSummaryListWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryListWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryListWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
export class ArrangementsService extends ProductSummaryBaseService {
    constructor(arrangementViewsHttpService) {
        super();
        this.arrangementViewsHttpService = arrangementViewsHttpService;
        this.viewNameSubject = new ReplaySubject();
        this.productKinds = combineLatest([
            this.viewNameSubject,
            this.productKindsRefresh,
        ]).pipe(tap(() => {
            this.isLoading.next(true);
        }), switchMap(([viewName]) => this.arrangementViewsHttpService.getArrangementView({ viewName }).pipe(map(res => responseToProductKinds(res)), catchError((error) => {
            this.error.next(parseError(error));
            return of(undefined);
        }))), tap(() => {
            this.isLoading.next(false);
        }));
    }
    setViewName(viewName) {
        this.viewNameSubject.next(viewName);
    }
}
ArrangementsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService, deps: [{ token: i1.ArrangementViewsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ArrangementsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ArrangementViewsHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,