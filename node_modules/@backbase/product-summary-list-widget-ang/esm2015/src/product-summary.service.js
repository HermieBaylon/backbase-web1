import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { catchError, distinctUntilChanged, map, tap } from 'rxjs/operators';
import { cacheRequest, isProductVisible, ProductKindUri, } from '@backbase/product-summary-common-ang';
import { parseError } from './product-summary-error';
import { ProductSummaryBaseService } from './product-summary-base.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/arrangement-manager-http-ang";
const clearUndefinedProperties = (obj) => JSON.parse(JSON.stringify(obj));
const aggregatedToTotalBalance = (aggregatedBalance) => ({
    aggregatedBalance: aggregatedBalance.value || '',
    currency: aggregatedBalance.currency || '',
});
const hasVisibleProducts = (products) => products.some(product => product && isProductVisible(product));
const getProductKind = (kind) => {
    switch (kind) {
        case 'currentAccounts':
            return ProductKindUri.CURRENT_ACCOUNT;
        case 'savingsAccounts':
            return ProductKindUri.SAVINGS_ACCOUNT;
        case 'termDeposits':
            return ProductKindUri.TERM_DEPOSIT;
        case 'loans':
            return ProductKindUri.LOAN;
        case 'creditCards':
            return ProductKindUri.CREDIT_CARD;
        case 'debitCards':
            return ProductKindUri.DEBIT_CARD;
        case 'investmentAccounts':
            return ProductKindUri.INVESTMENT_ACCOUNT;
        default:
            return kind;
    }
};
const objectToProductKind = (kind, productKind) => {
    const hasProducts = productKind && productKind.products && productKind.products.length > 0;
    if (hasProducts && hasVisibleProducts(productKind.products)) {
        const products = productKind.products;
        return Object.assign({ id: kind, name: productKind.name, aggregatedBalance: productKind.aggregatedBalance ? productKind.aggregatedBalance.value : undefined, currency: productKind.aggregatedBalance ? productKind.aggregatedBalance.currency : undefined, products: products
                .filter(isProductVisible)
                .map((product) => (Object.assign(Object.assign({}, product), { kind, productKindUri: getProductKind(kind) }))) }, (productKind.additions ? { additions: productKind.additions } : {}));
    }
    return undefined;
};
const arrayToProductKindList = (obj) => obj.map((element) => element && objectToProductKind(element.name, element)).filter(Boolean);
const flattenArray = (arr) => [].concat(...arr);
const toProductKindList = (res) => {
    const products = Object.entries(res)
        .filter(([key]) => key !== 'aggregatedBalance')
        .map(([kind, value]) => {
        if (!Array.isArray(value)) {
            return objectToProductKind(kind, value);
        }
        return arrayToProductKindList(value);
    })
        .filter(Boolean);
    return flattenArray(products);
};
const responseToProductKinds = (res) => clearUndefinedProperties(Object.assign({ total: res && res.aggregatedBalance ? aggregatedToTotalBalance(res.aggregatedBalance) : undefined, productKinds: res ? toProductKindList(res) : [] }, (res && res.additions ? { additions: res.additions } : {})));
/**
 * Service for fetching and storing product kinds
 *
 * This service relies on providers from `ProductSummaryListWidgetModule`.
 *
 * @see ProductSummaryListWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryListWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryListWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ProductSummaryService],
 * })
 *  export class MyComponent {
 * ```
 */
export class ProductSummaryService extends ProductSummaryBaseService {
    constructor(productSummaryDataService) {
        super();
        this.productSummaryDataService = productSummaryDataService;
        this.productKinds = combineLatest(this.listParams.pipe(distinctUntilChanged()), // [NOTE] This may require a compare function if `ListParams` isn't a primitive
        this.productKindsRefresh).pipe(tap(() => {
            this.isLoading.next(true);
        }), cacheRequest(([params]) => this.productSummaryDataService.getProductSummary(params).pipe(map((res) => responseToProductKinds(res)), catchError((error) => {
            this.error.next(parseError(error));
            return of(undefined);
        }))), tap(() => {
            this.isLoading.next(false);
        }));
    }
}
ProductSummaryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, deps: [{ token: i1.ProductSummaryHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,