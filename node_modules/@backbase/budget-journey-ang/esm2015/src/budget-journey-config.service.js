import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import * as i0 from "@angular/core";
// eslint-disable-next-line
export const BudgetJourneyConfigurationToken = new InjectionToken('BudgetJourneyConfiguration injection token');
const configDefaults = {
    showPercentage: false,
    budgetSafeZoneLimit: 80,
    notificationDismissTime: 5,
    maxBudgets: null,
};
export class BudgetJourneyService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    get showPercentage() {
        return this._config.showPercentage;
    }
    get budgetSafeZoneLimit() {
        return this._config.budgetSafeZoneLimit;
    }
    get notificationDismissTime() {
        return this._config.notificationDismissTime;
    }
    get maxBudgets() {
        return this._config.maxBudgets;
    }
}
BudgetJourneyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetJourneyService, deps: [{ token: BudgetJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetJourneyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetJourneyService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BudgetJourneyService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BudgetJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVkZ2V0LWpvdXJuZXktY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2J1ZGdldC1qb3VybmV5L3NyYy9idWRnZXQtam91cm5leS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQXFCN0UsMkJBQTJCO0FBQzNCLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLElBQUksY0FBYyxDQUMvRCw0Q0FBNEMsQ0FDN0MsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUErQjtJQUNqRCxjQUFjLEVBQUUsS0FBSztJQUNyQixtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCLHVCQUF1QixFQUFFLENBQUM7SUFDMUIsVUFBVSxFQUFFLElBQUk7Q0FDakIsQ0FBQztBQUdGLE1BQU0sT0FBTyxvQkFBb0I7SUFHL0IsWUFHRSxNQUFrQztRQUVsQyxNQUFNLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxtQ0FBUSxjQUFjLEdBQUssTUFBTSxDQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxtQkFBbUI7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLHVCQUF1QjtRQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDakMsQ0FBQzs7a0hBOUJVLG9CQUFvQixrQkFLckIsK0JBQStCO3NIQUw5QixvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFEaEMsVUFBVTs7MEJBS04sUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQywrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1ZGdldEpvdXJuZXlDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIFNob3cgYnVkZ2V0IHZhbHVlcyBhcyBwZXJjZW50YWdlc1xuICAgKi9cbiAgc2hvd1BlcmNlbnRhZ2U6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBTZXQgYnVkZ2V0IHNhZmUgbGltaXQgdmFsdWVcbiAgICovXG4gIGJ1ZGdldFNhZmVab25lTGltaXQ6IG51bWJlcjtcbiAgLyoqXG4gICAqIE5vdGlmaWNhdGlvbiBkaXNtaXNzIHRpbWVcbiAgICovXG4gIG5vdGlmaWNhdGlvbkRpc21pc3NUaW1lOiBudW1iZXI7XG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiBidWRnZXRzIHNob3duXG4gICAqL1xuICBtYXhCdWRnZXRzOiBudW1iZXIgfCBudWxsO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCBjb25zdCBCdWRnZXRKb3VybmV5Q29uZmlndXJhdGlvblRva2VuID0gbmV3IEluamVjdGlvblRva2VuPEJ1ZGdldEpvdXJuZXlDb25maWd1cmF0aW9uPihcbiAgJ0J1ZGdldEpvdXJuZXlDb25maWd1cmF0aW9uIGluamVjdGlvbiB0b2tlbicsXG4pO1xuXG5jb25zdCBjb25maWdEZWZhdWx0czogQnVkZ2V0Sm91cm5leUNvbmZpZ3VyYXRpb24gPSB7XG4gIHNob3dQZXJjZW50YWdlOiBmYWxzZSxcbiAgYnVkZ2V0U2FmZVpvbmVMaW1pdDogODAsXG4gIG5vdGlmaWNhdGlvbkRpc21pc3NUaW1lOiA1LFxuICBtYXhCdWRnZXRzOiBudWxsLFxufTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJ1ZGdldEpvdXJuZXlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY29uZmlnOiBCdWRnZXRKb3VybmV5Q29uZmlndXJhdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQnVkZ2V0Sm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbilcbiAgICBjb25maWc6IEJ1ZGdldEpvdXJuZXlDb25maWd1cmF0aW9uLFxuICApIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fY29uZmlnID0geyAuLi5jb25maWdEZWZhdWx0cywgLi4uY29uZmlnIH07XG4gIH1cblxuICBnZXQgZGVmYXVsdHMoKTogQnVkZ2V0Sm91cm5leUNvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBjb25maWdEZWZhdWx0cztcbiAgfVxuXG4gIGdldCBzaG93UGVyY2VudGFnZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnNob3dQZXJjZW50YWdlO1xuICB9XG5cbiAgZ2V0IGJ1ZGdldFNhZmVab25lTGltaXQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmJ1ZGdldFNhZmVab25lTGltaXQ7XG4gIH1cblxuICBnZXQgbm90aWZpY2F0aW9uRGlzbWlzc1RpbWUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLm5vdGlmaWNhdGlvbkRpc21pc3NUaW1lO1xuICB9XG5cbiAgZ2V0IG1heEJ1ZGdldHMoKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5tYXhCdWRnZXRzO1xuICB9XG59XG4iXX0=