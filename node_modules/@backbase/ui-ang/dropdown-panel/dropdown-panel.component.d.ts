import { AfterContentInit, TemplateRef } from '@angular/core';
import { NgbDropdownConfig } from '@ng-bootstrap/ng-bootstrap';
import { Observable, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class DropdownMenuDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownMenuDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DropdownMenuDirective, "ng-template[bbDropdownMenu]", never, {}, {}, never>;
}
export declare class DropdownToggleDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownToggleDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DropdownToggleDirective, "ng-template[bbDropdownToggle]", never, {}, {}, never>;
}
/**
 * @name DropdownPanelComponent
 *
 * @description
 * Component incapsulating logic for showing/hiding dropdown.
 */
export declare class DropdownPanelComponent implements AfterContentInit {
    readonly isOpen: Subject<boolean>;
    /**
     * Event emitted when dropdown open/close.
     */
    readonly open: Observable<boolean>;
    /**
     * Represents dropdown panel menu template
     */
    customDropdownContent: TemplateRef<any> | undefined;
    /**
     * Represents dropdown panel toggle template
     */
    customDropdownToggle: TemplateRef<any> | undefined;
    private readonly dropdown;
    constructor(config: NgbDropdownConfig);
    changeState(state: boolean): void;
    ngAfterContentInit(): void;
    closeMenu(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DropdownPanelComponent, "bb-dropdown-panel-ui", never, {}, { "open": "open"; }, ["customDropdownContent", "customDropdownToggle"], never>;
}
