import { ChangeDetectorRef, OnInit } from '@angular/core';
import { ValidationErrors, Validator } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { ButtonColor } from '@backbase/ui-ang/button';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name InputFileComponent
 *
 * @description
 * Component that displays a file input button.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 */
export declare class InputFileComponent extends InputBaseComponent implements OnInit, Validator {
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    /**
     * Accepted file formats. Defaults to any ('*');
     */
    accept: string;
    /**
     * If set, validate according to the maximum file size in Megabytes.
     */
    maxSizeInMb: number | string | undefined;
    /**
     * Multiple/single file upload flag. Defaults to false;
     */
    multiple: boolean;
    /**
     * Button color. Defaults to 'link';
     */
    color: ButtonColor | string;
    /**
     * This Boolean attribute lets you specify that the button should have input focus when the page
     * loads, unless the user overrides it, for example by typing in a different control. Only one
     * form-associated element in a document can have this attribute specified. Defaults to false.
     */
    autofocus: boolean;
    /**
     * Button text. If set, change button text from default 'Attach file' to a custom one.
     */
    buttonText: string | undefined;
    /**
     * Size of the button. Defaults to 'md'.
     */
    buttonSize: 'sm' | 'md';
    /**
     * Button icon name. Defaults to 'attachment';
     */
    iconName: string;
    constructor(cd: ChangeDetectorRef, deprecationsService: DeprecationsService);
    ngOnInit(): void;
    onValueChange(input: HTMLInputElement): void;
    validate(): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputFileComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputFileComponent, "bb-input-file-ui", never, { "accept": "accept"; "maxSizeInMb": "maxSizeInMb"; "multiple": "multiple"; "color": "color"; "autofocus": "autofocus"; "buttonText": "buttonText"; "buttonSize": "buttonSize"; "iconName": "iconName"; }, {}, never, never>;
}
