import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import { AbstractControl, FormControl, ValidationErrors, Validator } from '@angular/forms';
import { NgbDate, NgbDateAdapter, NgbDateStruct, NgbInputDatepicker } from '@ng-bootstrap/ng-bootstrap';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { NgbDateLocaleParserFormatter } from './input-datepicker-formatter';
import { BehaviorSubject } from 'rxjs';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { DateRangeModel, DateSelectionModel, NgDateStructNullable } from './input-datepicker.model';
import * as i0 from "@angular/core";
export declare enum Key {
    Tab = 9,
    Enter = 13,
    Escape = 27,
    Space = 32,
    PageUp = 33,
    PageDown = 34,
    End = 35,
    Home = 36,
    ArrowLeft = 37,
    ArrowUp = 38,
    ArrowRight = 39,
    ArrowDown = 40
}
export declare const isDateRangeModelType: (value: any) => value is DateRangeModel;
/**
 * @name InputDatepickerComponent
 *
 * @description
 * Component that displays a datepicker
 *
 * ### Custom internalization
 * It is possible to provide a custom internalisation. To do this, a `DATEPICKER_I18` token from `@backbase/ui-ang/input-datepicker` should be provided on the module level.
 * The token should implement the [NgbDatepickerI18n](https://ng-bootstrap.github.io/#/components/datepicker/api#NgbDatepickerI18n) interface.
 *
 * ### Setting and reading the  date
 * *Note* Datepicker uses the date *with the timezone* inside its model. And hence to make it work properly in all cases there are some recommendations for setting and reading the date to and from the datepicker.
 * #### Setting the date
 * When setting the date to the datepicker the date must be provided in the format that assumes zero hours and zero minutes in the local timezone. Here are some examples of what the date setting should looks like:
 * ```
   this.minDate = new Date(2021,11,15, 0, 0).toISOString();
   ```
 *
 * or
 * ```
   this.minDate = new Date('2021-12-15T00:00').toISOString();
   ```
 *
 * Note that
 * ```
   new Date('2021-12-15').toISOString();
   ```
 *
 * generates a date in GMT0 format and that is not correct for the datepicker input date.
 * #### Reading the date
 * When a date is selected via UI (the datepicker's popup window or browser's input field) its display date is transformed to the ISO string date with the assumption that it’s zero hours and zero minutes in the current time zone. Which leads to the different ISO string values for different time zones for the same date. F.e. "Dec 15 2021" is going to be transformed to "2021-12-14T23:00:00.000Z" for the "GMT+0100 (Central European Standard Time)" time zone and to "2021-12-15T03:00:00.000Z" for "GMT-0300 (West Greenland Standard Time)" time zone. As you can see the _day_ value is different in ISO string based on the timezone. It’s going to be either 14 or 15 in the example above.
 *
 * The recommendation here is to convert the ISO string, that the datepicker returns, into the Date object and read it's day value. Here is an example:
 * ```
  private formatDate(stringDate: string): string {
    const date = new Date(stringDate);
    if (stringDate && !isNaN(date.valueOf())) {
      return `${date.getFullYear()}-${this.appendLeadingZeroes(date.getMonth() + 1)}-${this.appendLeadingZeroes(date.getDate())}`;
    }
    return '';
  }

  private appendLeadingZeroes(value: number) {
    return value > 9 ? value : `0${value}`;
  }
   ```
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * `ariaLabel` is discernible text for datepicker
 */
export declare class InputDatepickerComponent extends InputBaseComponent implements OnChanges, Validator, AfterViewInit {
    private readonly formatterHelper;
    private readonly el;
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    private readonly adapter;
    private readonly renderer2;
    private readonly domAttrService;
    /**
     * Event to trigger on date hover
     */
    focusedDate: EventEmitter<DateSelectionModel>;
    /**
     * Indicates if the datepicker should select a date range with single input (from - to).
     * Defaults to false
     */
    rangeSelection: boolean;
    /**
     * Indicates if the datepicker should a date range with split input. One for the from date and one for the to date.
     * Defaults to false
     */
    rangeSelectionSplit: boolean;
    /**
     * Indicates if the datepicker is opened when clicking input.
     * Defaults to false
     */
    clickOpen: boolean;
    /**
     * Indicates if the datepicker is opened when focusing input.
     * Defaults to false
     */
    focusOpen: boolean;
    _placement: string | undefined;
    get placement(): string | undefined;
    /**
     * Placement of a popup window
     */
    set placement(value: string | undefined);
    /**
     * Accessible description for datepicker date selection popup.
     */
    datepickerDescribedby: string;
    /**
     * Accessible label for Datepicker button.
     */
    ariaLabelForButton: string;
    /**
     * Min date for the navigation. If not provided, 'year' select box will display 10 years
     * before current month
     */
    set minDate(date: NgbDateStruct | string | undefined);
    _minDate: NgDateStructNullable | undefined;
    /**
     * Max date for the navigation. If not provided, 'year' select box will display 10 years
     * after current month
     */
    set maxDate(date: NgbDateStruct | string | undefined);
    _maxDate: NgbDateStruct | undefined | null;
    /**
     * Callback to mark a given date as disabled
     */
    markDisabled: Function | undefined;
    /**
     * Icon that is dispayed in the button.
     * Defaults to calendar
     */
    icon: string;
    /**
     * The size of the icon to be displayed.
     * Defaults to md
     */
    iconSize: string;
    /**
     * The color of the icon to be displayed
     */
    iconColor: string | undefined;
    /**
     * Color of the button.
     * Defaults to link
     */
    btnColor: string;
    /**
     * Aria label for the datepicker
     */
    ariaLabel: string;
    /**
     * Navigation pattern through dates.
     * Default to arrows
     */
    navigation: 'select' | 'arrows' | 'none';
    /**
     * The autocomplete value of enclosed input control.
     */
    autocomplete: 'string' | undefined;
    /**
     * The first day of the week
     *
     * By default the calendar uses ISO 8601 and the weekdays are is 1=Mon ... 7=Sun
     */
    firstDayOfWeek: number | undefined;
    /**
     * Indicates how many month will be shown in the picker
     */
    displayMonths: number;
    _placeholder: string | undefined;
    get placeholder(): string | undefined;
    /**
     * The placeholder for the datepicker input. Default is Locale Date Format;
     */
    set placeholder(value: string | undefined);
    /**
     * Override date format (optional). Supported formats are `yyyy/MM/dd`, `MM/dd/yyyy`, `MMMM dd, yyyy`.
     * Note, other formats might work inconsistent in different browsers.
     */
    set overrideDateFormat(value: string | undefined);
    get overrideDateFormat(): string | undefined;
    _overrideDateFormat: string | undefined;
    /**
     * The custom or locale date format that is used to display dates and placeholders
     */
    get dateFormat(): string;
    datePicker: NgbInputDatepicker | undefined;
    datePickerTo: NgbInputDatepicker | undefined;
    datePickerInput: ElementRef | undefined;
    datePickerRangeInput: ElementRef | undefined;
    datePickerInputTo: ElementRef | undefined;
    datePickerButton: ElementRef | undefined;
    datePickerButtonTo: ElementRef | undefined;
    dateInput: FormControl;
    dateInputTo: FormControl;
    parentFormControl: AbstractControl | undefined;
    hoveredDate$: BehaviorSubject<DateSelectionModel>;
    pickerHoveredDayDateTo: NgDateStructNullable;
    fromDate$: BehaviorSubject<NgDateStructNullable>;
    toDate$: BehaviorSubject<NgDateStructNullable>;
    readonly inputDateRangeSeparator = "-";
    cssClass: string;
    /**
     *  An unlisten function for disposing document click listener
     */
    unListenDocumentClick: (() => void) | undefined;
    /**
     * An unlisten function for disposing escape key listener
     */
    unListenDocumentEsc: (() => void) | undefined;
    constructor(formatterHelper: NgbDateLocaleParserFormatter, el: ElementRef, cd: ChangeDetectorRef, deprecationsService: DeprecationsService, adapter: NgbDateAdapter<string>, renderer2: Renderer2, domAttrService: DomAttributesService);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    /**
     * @description
     * Passing template date to the range template to identify when it is used in the "to" date
     * (the second HTML date input of the split datepicker).
     * Check https://ng-bootstrap.github.io/#/components/datepicker/api "dayTemplateData" for details
     */
    rangeTemplateData: () => {
        isTo: boolean;
    };
    private dateEqual;
    /****************************************
     *
     *        EVENT HANDLERS
     *
     ***************************************/
    /**
     * @description
     * Input change handler for single date
     *
     * @param element
     */
    onInputChange(element: HTMLInputElement): void;
    /**
     * Update datepicker value on input value change for same input date range selection
     *
     * @param value
     */
    onInputChangeRange(element: HTMLInputElement): void;
    /**
     * Update datepicker value on input value change for split input date range selection, from date
     *
     * @param value
     */
    onInputChangeSplitRange(element: HTMLInputElement): void;
    /**
     * Update datepicker value on input value change for split input date range selection, to date
     *
     * @param value
     */
    onInputChangeSplitRangeTo(element: HTMLInputElement): void;
    /**
     * Event handler for the native input
     */
    onInputFocus(open: boolean): void;
    /**
     * Event handler for the native input
     */
    onInputFocusTo(open: boolean): void;
    /**
     * Event handler for the picker toggle button to
     */
    onPickerTogglerClick(event: Event): void;
    /**
     * Event handler for the picker toggle button to (split range selection)
     */
    onPickerTogglerClickTo(event: Event): void;
    /**
     *
     * Set disable state for the host control
     *
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Event handler blur on internal inputs and buttons
     *
     * @param $event
     */
    onControlBlur($event: FocusEvent): void;
    /**
     * Event handler for blur on the host control
     *
     * @param $event
     */
    onBlur($event?: FocusEvent): void;
    /**
     * @description
     *
     * Event handler for closing `from` or single date picker
     *
     */
    onClosed(): void;
    /**
     * Event handler for closing picker for `to` date
     */
    onClosedTo(): void;
    /**
     * Event handler for date setting from picker for `to` date when split input range selection
     *
     * @param date
     */
    onRangeDateSelectSplitTo(date: NgbDate): void;
    /**
     * Event handler for date setting from picker for `from` date when split input range selection
     *
     * @param date
     */
    onRangeDateSelectSplit(date: NgbDate): void;
    /**
     *  Event handler for date setting from picker when single input range selection
     *
     * @param date
     */
    onRangeDateSelect(date: NgbDate): void;
    /**
     *
     * Handling day-hover from day-template on range selection.
     *
     * @param event
     */
    onDayHover(event: {
        date: NgDateStructNullable;
        isTo: boolean;
        isSelecting: boolean;
    }): void;
    /***************************************8
     *
     *  CONTROLVALUEACCESSOR OVERRIDES
     *
     **************************************/
    /**
     * Implements custom validation for the control
     *
     * @param control
     */
    validate: (control: AbstractControl) => ValidationErrors | null;
    /**
     *
     * Implements the value update for the control
     *
     * @param model
     */
    writeValue(model: DateRangeModel | string | null): void;
    /*********************************
     *
     *        PRIVATE UTILS
     *
     **********************************/
    private setSelectedDate;
    private setDatesTheSame;
    private closeDatePicker;
    private isValidRange;
    private validateSingleDate;
    /**
     * Document Event handler
     */
    handleDocumentEvent(event: KeyboardEvent | MouseEvent): void;
    /**
     * Binds event on the global document when the datepicker is not opened
     */
    bindDocumentEvents(): void;
    private validateDateRange;
    private setRangeInput;
    private copyDateElement;
    private updateRangeModel;
    private isRequired;
    private setStartDateOnPicker;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputDatepickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputDatepickerComponent, "bb-input-datepicker-ui", never, { "rangeSelection": "rangeSelection"; "rangeSelectionSplit": "rangeSelectionSplit"; "clickOpen": "clickOpen"; "focusOpen": "focusOpen"; "placement": "placement"; "datepickerDescribedby": "datepickerDescribedby"; "ariaLabelForButton": "ariaLabelForButton"; "minDate": "minDate"; "maxDate": "maxDate"; "markDisabled": "markDisabled"; "icon": "icon"; "iconSize": "iconSize"; "iconColor": "iconColor"; "btnColor": "btnColor"; "ariaLabel": "ariaLabel"; "navigation": "navigation"; "autocomplete": "autocomplete"; "firstDayOfWeek": "firstDayOfWeek"; "displayMonths": "displayMonths"; "placeholder": "placeholder"; "overrideDateFormat": "overrideDateFormat"; }, { "focusedDate": "focusedDate"; }, never, never>;
}
