import { ChangeDetectorRef, ElementRef, Renderer2, TemplateRef } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
export declare class RichTextEditorActionsDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<RichTextEditorActionsDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RichTextEditorActionsDirective, "ng-template[bbRichTextEditorActions]", never, {}, {}, never>;
}
/**
 * @name RichTextEditorComponent
 *
 * @description
 * Component that provides you input text with editing.
 *
 * @dynamic (to suppress error with resolving Document type during compilation)
 */
export declare class RichTextEditorComponent extends InputBaseComponent implements ControlValueAccessor, Validator {
    protected readonly cd: ChangeDetectorRef;
    private domAttributesService;
    protected readonly deprecationsService: DeprecationsService;
    private readonly sanitizer;
    private readonly renderer;
    private readonly document;
    /**
     * The maxLength for the rich-text-editor component.
     */
    maxLength: number;
    /**
     * The minLength for the rich-text-editor component.
     */
    minLength: number;
    /**
     * The placeholder for the rich-text-editor component. Defaults to an empty string;
     */
    placeholder: string;
    /**
     * Show/hide message length. Defaults to true;
     */
    counter: boolean;
    /**
     * Whether the rich-text-editor component is readonly.
     */
    readonly: boolean;
    /**
     * Placement of the action tooltip relative to the action button: auto | top | bottom | left | right.
     */
    actionsTooltipPlacement: string;
    actions: RichTextEditorActionsDirective | undefined;
    contentEditable: ElementRef | undefined;
    focused: boolean;
    readonly hostRef: RichTextEditorComponent;
    readonly labelId: string;
    readonly contentClassName = "bb-rich-text-editor__content";
    readonly mainAreaClassName = "bb-rich-text-editor__mainarea";
    private range?;
    value: string;
    constructor(cd: ChangeDetectorRef, domAttributesService: DomAttributesService, deprecationsService: DeprecationsService, sanitizer: DomSanitizer, renderer: Renderer2, document: Document);
    onKeyEvent($event: KeyboardEvent): void;
    onPaste(): void;
    onClickEvent($event: Event): void;
    writeValue(inputValue: string | null): void;
    callOnChange(): void;
    validate(control?: AbstractControl): ValidationErrors | null;
    labelClick(): void;
    callOnFocus(): void;
    callOnBlur(): void;
    getMessageText(content?: string): string;
    showCounter(): boolean;
    linkAdded(): void;
    private get contentEditableElement();
    private parseValue;
    private readonly replaceSpaces;
    private customRequiredValidation;
    private restoreCaretPosition;
    static ɵfac: i0.ɵɵFactoryDeclaration<RichTextEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RichTextEditorComponent, "bb-rich-text-editor-ui", never, { "maxLength": "maxLength"; "minLength": "minLength"; "placeholder": "placeholder"; "counter": "counter"; "readonly": "readonly"; "actionsTooltipPlacement": "actionsTooltipPlacement"; }, {}, ["actions"], never>;
}
