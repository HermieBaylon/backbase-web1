import { PipeTransform } from '@angular/core';
import { FeaturesService } from '@backbase/foundation-ang/future';
import { PaymentCardNumberFormat } from './constants';
import { AccountsDisplayingFormatService } from '@backbase/ui-ang/account-number-pipe';
import * as i0 from "@angular/core";
export declare class PaymentCardNumberPipe implements PipeTransform {
    private readonly accountsDisplayingFormatService;
    private readonly featuresService;
    private readonly defaultFormat;
    /**
     * @name PaymentCardNumberPipe#constructor
     * @param accountsDisplayingFormatService - AccountsDisplayingFormatService
     * @param featuresService - FeaturesService
     *
     * @internal
     */
    constructor(accountsDisplayingFormatService: AccountsDisplayingFormatService, featuresService: FeaturesService);
    /**
     * @name PaymentCardNumberPipe#transform
     * @param value - the string to transform
     * @param config - the formatting configuration
     * @param maskChar - the character to mask with, deprecated from 6.0.0
     *
     * @description
     * Formats a card number, mask it and split it into segments
     * - do not set config parameter to use with a global accountsFormat configuration
     * - use config parameter to apply a custom accountsFormat configuration
     */
    transform(value: string | number, config?: PaymentCardNumberFormat, maskChar?: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentCardNumberPipe, never>;
    static ɵpipe: i0.ɵɵPipeDeclaration<PaymentCardNumberPipe, "paymentCardNumber">;
}
