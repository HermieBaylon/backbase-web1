import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, Renderer2, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { NgbTypeaheadSelectItemEvent } from '@ng-bootstrap/ng-bootstrap';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { DomAttributesService } from '@backbase/ui-ang/services';
import * as i0 from "@angular/core";
export interface TypeaheadOptions<T> {
    ngbTypeahead: (text: Observable<string>) => Observable<Array<T>>;
    editable?: boolean;
    focusFirst?: boolean;
    showHint?: boolean;
    placement?: string;
    inputFormatter?: (item: T) => string;
    resultFormatter?: (item: T) => string;
    resultTemplate?: TemplateRef<any>;
    selectItem?: (item: NgbTypeaheadSelectItemEvent) => void;
    groupCssClasses?: string;
}
/**
 * @name SearchBoxComponent
 *
 * @description
 * Component that provides you a search input field.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - Set aria-describedby  with an element id that contains a detailed decription about the Search box.
 *  - aria-label or  aria-labelledby can be used to display the label for search box.
 *
 * If  showSearch = true , searchLabel is discernible text for search button.
 * If  showClear = true , clearLabel is discernible text for clear button.
 *
 */
export declare class SearchBoxComponent<T> extends InputBaseComponent implements AfterViewInit, DoCheck {
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    private readonly renderer;
    private readonly domAttrService;
    private readonly elem;
    /**
     * The placeholder text to display in the input.
     */
    placeholder: string;
    /**
     * The maximum length of the search text.
     */
    maxLength: string;
    /**
     * The square border for search box.
     */
    squareBorder: boolean;
    /**
     * The list of options to use when typeahead is available.
     */
    typeaheadOptions: TypeaheadOptions<T> | undefined;
    /**
     * Whether to show the search button icon before the text.
     */
    showSearch: boolean;
    /**
     * Whether to show the clear button icon after the text.
     */
    showClear: boolean;
    /**
     * The aria label used when the search button is in focus.
     */
    searchLabel: string;
    /**
     * The aria label used when the clear button is in focus.
     */
    clearLabel: string;
    /**
     * The autocomplete attribute value.
     */
    autocomplete: string;
    /**
     * The event emitter called when a search is submitted.
     */
    submit: EventEmitter<string | boolean | Object | null>;
    /**
     * The event emitter called when the clear button is clicked.
     */
    clear: EventEmitter<string>;
    valueChange: EventEmitter<any>;
    content: ElementRef | undefined;
    searchBox: ElementRef | undefined;
    inputField: ElementRef | undefined;
    readonly labelId: string;
    hasAppendContent: boolean;
    constructor(cd: ChangeDetectorRef, deprecationsService: DeprecationsService, renderer: Renderer2, domAttrService: DomAttributesService, elem: ElementRef);
    onSubmit(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    onClear(): void;
    onFocus(): void;
    onBlur(): void;
    isClearVisible(): string | boolean | Object | null;
    focusEditableElement(): void;
    getKeywordBySize(size: number | string): string;
    getSizeByKeyword(keyword: any): number | undefined;
    onSelect(event: any): void | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<SearchBoxComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SearchBoxComponent<any>, "bb-search-box-ui", never, { "placeholder": "placeholder"; "maxLength": "maxLength"; "squareBorder": "squareBorder"; "typeaheadOptions": "typeaheadOptions"; "showSearch": "showSearch"; "showClear": "showClear"; "searchLabel": "searchLabel"; "clearLabel": "clearLabel"; "autocomplete": "autocomplete"; }, { "submit": "submit"; "clear": "clear"; "valueChange": "valueChange"; }, never, ["*"]>;
}
