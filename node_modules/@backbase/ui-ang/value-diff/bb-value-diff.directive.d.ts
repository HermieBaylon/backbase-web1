import { AfterContentInit, ChangeDetectorRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { ValueDiffPosition } from './bb-value-diff.model';
import * as i0 from "@angular/core";
export declare class ValueDiffDirective implements AfterContentInit, OnDestroy {
    private readonly elRef;
    private readonly renderer;
    private readonly cdRef;
    private readonly destroyed$;
    private readonly valueChanged$;
    private readonly SROnlyOldEl;
    private readonly SROnlyNewEl;
    private _newValue;
    private _position;
    private arrow;
    /**
     * New data with which we will compare content.
     */
    set newValue(value: string);
    get newValue(): string;
    /**
     * A position where differences will be added.
     * Default value: 'before'
     */
    set position(val: ValueDiffPosition);
    get position(): ValueDiffPosition;
    /**
     * Text for screen reader to describe old value
     * Default value: 'Previous value:'
     */
    set SROnlyOld(val: string);
    /**
     * Text for screen reader to describe new value
     * Default value: 'Current value:'
     */
    set SROnlyNew(val: string);
    /**
     * Show arrow between old and new value
     * Default value: false
     */
    showArrow: boolean;
    private static isEqual;
    private get isPositionBefore();
    private get parentEl();
    constructor(elRef: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private setupContainer;
    private cleanUpContent;
    private createA11ySpan;
    private addElWithArrow;
    private getSiblingEl;
    private onValueChanged;
    static ɵfac: i0.ɵɵFactoryDeclaration<ValueDiffDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ValueDiffDirective, "[bbValueDiff]", never, { "newValue": "bbValueDiff"; "position": "position"; "SROnlyOld": "sr-only-old"; "SROnlyNew": "sr-only-new"; "showArrow": "showArrow"; }, {}, never>;
}
