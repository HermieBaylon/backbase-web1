import { ChangeDetectorRef, QueryList } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DropdownSingleSelectOptionComponent } from './dropdown-single-select-option.component';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name DropdownSingleSelectComponent
 *
 * @description
 * Component that displays a dropdown with a single select option.
 *
 * @a11y Current component provides option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - aria-label will be linked to the single select dropdown with label
 *  - set aria-labelledby with ID of another element in the DOM as dropdown's label.
 *  - set aria-describedby with ID of another element in the DOM with descriptive text about the dropdown
 *  - set aria-expanded with a boolean value based on the listbox display.
 *  - set aria-invalid to true when a selected option is not valid ans vice versa
 *  - aria-owns handles contextual relationship between a parent and its child elements,
 *    in this case between dropdown menu and dropdown items, use the id from the input binding.
 *
 */
export declare class DropdownSingleSelectComponent extends InputBaseComponent {
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    /**
     * The placeholder for the select. Defaults to an empty string;
     */
    placeholder: string;
    /**
     * This Boolean attribute determine if default option as placeholder is displayed. Defaults to false.
     */
    defaultOptionAsPlaceholder: boolean;
    /**
     * The value for the input field. It can be a list of strings or list of objects.
     * If the value is a list of objects, you have to provide the `displayAttributePath` property.
     */
    options: Array<Object | string>;
    /**
     * The child option components of type DropdownSingleSelectOptionComponent
     */
    contentOptions: QueryList<DropdownSingleSelectOptionComponent> | undefined;
    /**
     * In case the list of options is a list of objects,
     * this property will set the path to the object property which value will be used to display the option.
     * Undefined will assume the options are strings.
     * Child Nodes should be seperated by '.'
     */
    displayAttributePath: string | undefined;
    /**
     * Right corner icon name.
     * Default name 'toggle-down'
     */
    iconName: string;
    /**
     * Allowing override the option comparison algorithm for tracking identities when
     * checking for change
     */
    compareWithFn: (a: any, b: any) => boolean;
    constructor(cd: ChangeDetectorRef, deprecationsService: DeprecationsService);
    getOptionDisplayText(option: Object | string): string | Object;
    private resolvePath;
    trackByFn(index: number, item: DropdownSingleSelectOptionComponent): string | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownSingleSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DropdownSingleSelectComponent, "bb-dropdown-single-select-ui", never, { "placeholder": "placeholder"; "defaultOptionAsPlaceholder": "defaultOptionAsPlaceholder"; "options": "options"; "displayAttributePath": "displayAttributePath"; "iconName": "iconName"; "compareWithFn": "compareWithFn"; }, {}, ["contentOptions"], never>;
}
