import { ChangeDetectorRef, Renderer2 } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name AmountInputComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - set aria-describedby with ID of another element in the DOM with descriptive text about the amount input,
 *    by default it is set to div defining the type of currency
 *  - set aria-invalid with boolean value when the entered input value is not valid
 *  - set aria-labelledby with ID of another element in the DOM as input's label
 *
 * @description
 * Component that displays a text input.
 */
export declare class AmountInputComponent extends InputBaseComponent {
    private readonly locale;
    private readonly renderer;
    inputClass: string;
    /**
     * Unique ID used for the accessibility property. New value is created when component is initialized.
     *
     * @internal
     */
    readonly componentUniqueId: string;
    /**
     * Utility function for use in template
     */
    idListAttr: (...tokens: any[]) => string | undefined;
    private readonly groupSeparator;
    private readonly decimalSeparator;
    private readonly nonNumbersAndDecimalSeparatorRegex;
    private readonly endWithDecimal;
    /**
     * The format used for bignumber;
     */
    private readonly format;
    /**
     * The placeholder for the text input. Defaults to an empty string;
     */
    placeholder: string;
    /**
     * The maxLength for the text input.
     */
    maxLength: number | undefined;
    /**
     * classnames for the wrapper div
     */
    wrapperClasses: string;
    /**
     * Whether currency local should be transformed to symbol.
     * Default value true.
     */
    mapCurrency: boolean;
    /**
     * Determines currency type.
     * If nothing provided, wouldn't be displayed.
     */
    private _currency;
    private _decimals;
    set currency(value: string | undefined);
    get currency(): string | undefined;
    /**
     * The flag to wether auto add decimal part or not defaults to false
     */
    autoDecimal: boolean;
    /**
     * ElementRef for amount input
     */
    private amountEl;
    constructor(cd: ChangeDetectorRef, deprecationsService: DeprecationsService, locale: string, renderer: Renderer2);
    writeValue(model: any): void;
    private formatAmount;
    private updateAmountInput;
    private setSelection;
    correctInputValue(): void;
    /**
     * Event handler for backspace key press, and check if correct number is deleted
     */
    onBackspace(el: HTMLInputElement): void;
    onPress($event: KeyboardEvent): void;
    onInput(): void;
    private updateOutputValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AmountInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AmountInputComponent, "bb-amount-input-ui", never, { "placeholder": "placeholder"; "maxLength": "maxLength"; "wrapperClasses": "wrapperClasses"; "mapCurrency": "mapCurrency"; "currency": "currency"; "autoDecimal": "autoDecimal"; }, {}, never, never>;
}
