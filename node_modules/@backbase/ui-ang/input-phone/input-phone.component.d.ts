import { AfterViewInit, ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { NgSelectComponent } from '@ng-select/ng-select';
import * as i0 from "@angular/core";
/**
 * @name InputPhoneComponent
 *
 * @description
 * Component that displays a phone input.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * ariaLabel is discernible text for phone input
 */
export interface CountryData {
    countryCode: string;
    isoCode: string;
    countryName: string;
}
export declare type CountryList = Array<CountryData>;
export declare class InputPhoneComponent extends InputBaseComponent implements AfterViewInit {
    private readonly domAttrService;
    private readonly elem;
    private readonly renderer2;
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    /**
     * The placeholder for the phone input. Defaults to an empty string;
     */
    placeholder: string;
    /**
     * The maxLength for the phone input.
     */
    maxLength: number | undefined;
    /**
     * The minLength for the phone input.
     */
    minLength: number | undefined;
    /**
     * Whether the phone input is readonly.
     */
    readonly: boolean;
    /**
     * Aria label for the phone input
     */
    ariaLabel: string;
    /**
     * The autocomplete value of the enclosed input control.
     */
    autocomplete: 'tel' | 'on' | 'off' | undefined;
    /**
     * List of countries with its code ,iso code and flag
     */
    countryList: CountryList | undefined;
    /**
     * Dropdown Position (bottom | top | auto)
     */
    dropdownPosition: 'bottom' | 'top' | 'auto' | undefined;
    /**
     * Allow to clear selected value.
     */
    clearable: boolean;
    /**
     * Allow to search for value.
     */
    searchable: boolean;
    /**
     * Default country selected for country dropdown.
     */
    defaultCountryIsoCode: string | undefined;
    /**
     * Enable/Disable Country code dropdown
     */
    enableCountryCode: boolean;
    inputEl: ElementRef | undefined;
    /**
     * ng-select
     */
    ngSelect: NgSelectComponent | undefined;
    defaultCountryCode: string | undefined;
    defaultCountryName: string | undefined;
    countryDropdowndisabled: boolean | undefined;
    resultCount: number;
    private readonly _statusId;
    get statusId(): string;
    constructor(domAttrService: DomAttributesService, elem: ElementRef, renderer2: Renderer2, cd: ChangeDetectorRef, deprecationsService: DeprecationsService);
    private constructCountryData;
    ngAfterViewInit(): void;
    onChanges(event: CountryData): void;
    onClose(): void;
    onClear(): void;
    onFilterChange(query: string | undefined): void;
    private updateResultCount;
    searchFunc(term: string, item: CountryData): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputPhoneComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputPhoneComponent, "bb-input-phone-ui", never, { "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "readonly": "readonly"; "ariaLabel": "ariaLabel"; "autocomplete": "autocomplete"; "countryList": "countryList"; "dropdownPosition": "dropdownPosition"; "clearable": "clearable"; "searchable": "searchable"; "defaultCountryIsoCode": "defaultCountryIsoCode"; "enableCountryCode": "enableCountryCode"; }, {}, never, never>;
}
