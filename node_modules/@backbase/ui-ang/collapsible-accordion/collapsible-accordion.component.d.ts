import { AfterContentInit, EventEmitter, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export interface ICollapsible extends OnDestroy {
    toggle: () => void;
    isOpen: boolean;
    isOpenChange: EventEmitter<boolean>;
}
/**
 * @name CollapsibleAccordionComponent
 *
 * @description
 * Component that groups Collapsible components to show them in an accordion fashion.
 * It can assure that only one Collapsible panel can be opened at a time
 */
export declare class CollapsibleAccordionComponent implements AfterContentInit, OnDestroy {
    private readonly parentAccordion;
    /**
     * Assures that only one Collapsible panel can be opened at a time.
     */
    closeOthers: boolean;
    /**
     * When true displays the first panel on load.
     */
    openFirst: boolean;
    /**
     * When true the Accordion will inherit the parent Accordion behaviour.
     */
    set obeyParentAccordion(obey: boolean);
    private readonly collapsiblePanels;
    private readonly nestedAccordions;
    constructor(parentAccordion: CollapsibleAccordionComponent);
    ngOnDestroy(): void;
    registerNestedAccordion(childAccordion: CollapsibleAccordionComponent): void;
    unregisterNestedAccordion(childAccordion: CollapsibleAccordionComponent): void;
    registerNestedPanel(panel: ICollapsible): void;
    unregisterNestedPanel(panel: ICollapsible): void;
    expandAll(): void;
    collapseAll(): void;
    ngAfterContentInit(): void;
    private readonly closeOtherPanels;
    private setPanelsState;
    private setNestedAccordionsState;
    static ɵfac: i0.ɵɵFactoryDeclaration<CollapsibleAccordionComponent, [{ optional: true; skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CollapsibleAccordionComponent, "bb-collapsible-accordion-ui", never, { "closeOthers": "closeOthers"; "openFirst": "openFirst"; "obeyParentAccordion": "obeyParentAccordion"; }, {}, never, ["*"]>;
}
