import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DeprecationsService } from '@backbase/foundation-ang/core';
import { Placement } from '@ng-bootstrap/ng-bootstrap';
import * as i0 from "@angular/core";
export declare class DropdownMenuItemDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownMenuItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DropdownMenuItemDirective, "ng-template[bbDropdownMenuItem]", never, {}, {}, never>;
}
export declare class DropdownLabelDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownLabelDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DropdownLabelDirective, "ng-template[bbDropdownLabel]", never, {}, {}, never>;
}
export declare abstract class DropdownMenuToken {
    buttonEl: ElementRef | undefined;
}
/**
 * @name DropdownMenuComponent
 *
 * @description
 * Component that displays a button with a dropdown
 *
 * @a11y dropDownButtonLabel is discernible text for dropdown button.
 *
 * `aria-owns` handles contextual relationship between a parent and its child elements,
 * in this case between dropdown menu and dropdown items, it's internally handled by the component with unique ids.
 *
 * `aria-activedescendant` identifies currently active element of dropdown item. It's internally handled but
 * when `bbDropdownMenuItem`directive and [role=menuitem] is used for listing dropdown elements
 * then use [id]="option". Example:
 * ```
  <ng-template bbDropdownMenuItem>
    <button role="menuitem" [id]="option" class="dropdown-item" *ngFor="let option of [1,2,3]">
      {{ option}}
   </button>
  </ng-template>
 ```
 */
export declare class DropdownMenuComponent extends DropdownMenuToken implements AfterViewInit, OnInit {
    private readonly domAttrService;
    private readonly elem;
    private readonly renderer;
    private readonly deprecationsService;
    private readonly cdr;
    private readonly document;
    customLabel: TemplateRef<any> | undefined;
    customDropdownMenuItem: TemplateRef<any> | undefined;
    readonly dropdownDir: NgbDropdown | undefined;
    readonly dropDownToggle: ElementRef<HTMLElement> | undefined;
    readonly dropdownListElement: ElementRef<HTMLElement> | undefined;
    readonly dropdownMenuContainer: ElementRef<HTMLElement> | undefined;
    readonly dropdownMenuInnerContainer: ElementRef<HTMLElement> | undefined;
    private focusedItemIndex;
    private readonly keyActionsConfig;
    private readonly window;
    private _itemList;
    private dropdownMenuItemHeight;
    private dropdownContainerMaxHeight;
    dropdownContainerAdjustedMaxHeight: number;
    ariaActivedescendant: string | null;
    dropdownId: string;
    /**
     * The label for the button dropdown. Defaults to an empty string.
     */
    label: string;
    /**
     * The disabled state for the button dropdown. Defaults to false.
     */
    disabled: boolean;
    /**
     * If the value is an object, please provide a optionLabelKey.
     */
    options: Array<string | object>;
    /**
     * Event (Output) that emits the value of selected dropdown item.
     */
    select: EventEmitter<string | object>;
    /**
     * Icon that is displayed in the button.
     */
    icon: string | undefined;
    /**
     * The size of the icon to be displayed. Defaults to md.
     */
    iconSize: string;
    /**
     * The color of the icon to be displayed.
     */
    iconColor: string | undefined;
    /**
     * Color of the button. Defaults to primary.
     */
    btnColor: string;
    /**
     * The flag to indicate whether the dropdown button should be in a circular shape. Defaults to 'false'.
     * This will only work when there's only an icon inside the button without a text.
     */
    btnCircle: boolean;
    /**
     * Key that contains the label of the option object.
     * Mandatory when the type of option is object
     */
    optionLabelKey: string | undefined;
    /**
     * If true it will stretch the button inside to 100% width
     */
    fullWidth: boolean;
    /**
     * Whether the dropdown should be closed when clicking one of dropdown items or pressing ESC
     */
    autoClose: boolean | 'inside' | 'outside';
    /**
     * Specifies which element the dropdown should be appended to.
     */
    container: '' | 'body';
    /**
     * The position of the dropdown. Defaults to bottom-right.
     */
    position: Placement;
    /**
     * Aria label for the dropdown
     */
    ariaLabel: string | undefined;
    /**
     * The role of the dropdown menu defaults to menu
     */
    dropDownMenuRole: string | undefined;
    /**
     * ID for the dropdown menu
     */
    dropDownMenuId: string | undefined;
    /**
     * Predefined button sizes
     */
    buttonSize: 'sm' | 'md';
    /**
     * Dropdown menu (toggle) button aria label
     */
    dropDownButtonLabel: string;
    /**
     * Count of elements which is used in showing elements in the dropdown list.
     */
    visibleElementDependingOnViewport: number;
    /**
     * Add role=group onto host
     */
    role: string;
    buttonEl: ElementRef | undefined;
    constructor(domAttrService: DomAttributesService, elem: ElementRef, renderer: Renderer2, deprecationsService: DeprecationsService, cdr: ChangeDetectorRef, document: Document);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /**
     * Internal handler for clicks on dropdown items
     *
     * @param event Event
     * @param item Item that has been clicked
     */
    onClick(event: Event, item: any): void;
    /**
     * Drop down change state event handler
     *
     * @param isOpen
     */
    onOpenChange(isOpen: boolean): void;
    /**
     * Function that returns the label of the dropdown item
     *
     * @param option Item that has been clicked
     * @param labelKey Key that contains the label of the option object
     */
    getOptionLabel(option: any): string;
    onKeyUp(event: KeyboardEvent): void;
    private isLastListItemInFocus;
    private isFirstListItemInFocus;
    private focusToggle;
    private closeDropDown;
    private isDropDownOpen;
    private getItemList;
    private setItemsTabIndex;
    private focusListItem;
    private getSelectedItem;
    private adjustDropdownListToViewport;
    private defineAdjustedDropdownMenuHeight;
    private defineMaxDropdownContainerHeight;
    private doElementsExist;
    private clearStyles;
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DropdownMenuComponent, "bb-dropdown-menu-ui", never, { "label": "label"; "disabled": "disabled"; "options": "options"; "icon": "icon"; "iconSize": "iconSize"; "iconColor": "iconColor"; "btnColor": "btnColor"; "btnCircle": "btnCircle"; "optionLabelKey": "optionLabelKey"; "fullWidth": "fullWidth"; "autoClose": "autoClose"; "container": "container"; "position": "position"; "ariaLabel": "ariaLabel"; "dropDownMenuRole": "dropDownMenuRole"; "dropDownMenuId": "dropDownMenuId"; "buttonSize": "buttonSize"; "dropDownButtonLabel": "dropDownButtonLabel"; "visibleElementDependingOnViewport": "visibleElementDependingOnViewport"; "role": "role"; }, { "select": "select"; }, ["customLabel", "customDropdownMenuItem"], never>;
}
