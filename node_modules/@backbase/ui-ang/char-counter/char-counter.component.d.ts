import { OnInit, Renderer2, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name CharCounterComponent
 *
 * @description
 * Component for counting characters typed inside a form element
 */
export declare class CharCounterComponent implements OnInit, OnChanges {
    private readonly renderer;
    private readonly cd;
    /**
     * Passed value from parent input, it gives option to count
     * char event if value was programmatically changed
     */
    inputValue: string | undefined;
    /**
     * The element reference which the characters are typed in.
     */
    element: HTMLInputElement | HTMLTextAreaElement | undefined;
    /**
     * Indicator for maximum character count.
     */
    maxLength: number;
    /**
     * Whether the element should be blocked when maximum character count is reached.
     */
    set blockTyping(val: boolean);
    get blockTyping(): boolean;
    private _blockTyping;
    counter: number;
    valid: boolean;
    constructor(renderer: Renderer2, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    calculateElementValue(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CharCounterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CharCounterComponent, "bb-char-counter-ui", never, { "inputValue": "inputValue"; "element": "element"; "maxLength": "maxLength"; "blockTyping": "blockTyping"; }, {}, never, never>;
}
