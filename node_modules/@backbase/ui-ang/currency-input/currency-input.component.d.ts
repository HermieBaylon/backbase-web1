import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';
import { DomAttributesService } from '@backbase/ui-ang/services';
import * as i0 from "@angular/core";
export declare type ResultType = 'string' | 'number';
export interface CurrencyFieldsState {
    currency: boolean;
    integer: boolean;
    decimal: boolean;
}
/**
 * @name CurrencyInputComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - aria-describedby
 *  - aria-invalid
 *  - aria-labelledby
 *  - integerLabelSrOnly
 *  - decimalLabelSrOnly
 * @description
 * Component for displaying and managing currency and it amount
 *
 */
export declare class CurrencyInputComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit {
    private readonly el;
    private readonly locale;
    private domAttributeService;
    parentFormControl: NgControl;
    private currencyList;
    private currencyDisabledState;
    private currency;
    private intMaxLen;
    readonly decimalSeparator: string;
    private readonly localeSeparatorSymbols;
    private _decMaxLen;
    /**
     * Configure the maximum number of decimals.
     * When greater than the default number of decimals for the specified currency, this value will take precedence.
     * Configuring this value can affect the input placeholder.
     */
    get decMaxLen(): number | undefined;
    set decMaxLen(value: number | undefined);
    /**
     * Number of minimum currency precision. Defaults to 2.
     */
    decMinLen: number;
    /**
     * Non-configurable placeholder for the decimal input.
     * Displays a zero digit for every digit that is allowed in the decimal field.
     */
    get decPlaceholder(): string;
    readonly currControl: FormControl;
    readonly intControl: FormControl;
    readonly decControl: FormControl;
    /**
     * The placeholder for the input. Defaults to 0.
     */
    placeholder: string;
    /**
     * For set output type string/number, by default 'number', when  need work with long number
     * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'
     */
    resultType: ResultType;
    /**
     * Whether there should be only the integer part.
     * You have to keep in mind, that if you have decimal part, even ".00"
     * you will not be able to remove it
     */
    integer: boolean;
    /**
     * Whether the input is required. Defaults to false.
     */
    required: boolean;
    /**
     * Whether the input is read only. Defaults to false.
     */
    readonly: boolean;
    /**
     * Whether the input is disabled. Defaults to false.
     */
    set disabled(disabled: boolean | CurrencyFieldsState);
    get disabled(): boolean | CurrencyFieldsState;
    /**
     * Whether integer label is only visible for screen readers.
     * By default is visible if it is needed to hide change this property
     * to "true" and it will have class "sr-only"
     */
    integerLabelSrOnly: boolean;
    /**
     * By default is visible if it is needed to hide change this property
     * to "true" and it will have class "sr-only"
     * By default is hidden and accessible only for screen reader
     */
    decimalLabelSrOnly: boolean;
    /**
     * Currency list to be displayed in the dropdown.
     *
     * Note: Non-empty currency list is required for the currency symbol
     * field to be shown. Otherwise, only the amount fields will be shown.
     *
     * Additionally, If only a single currency provided, the dropdown of
     * the currency selection will be disabled and its value set to that single currency
     */
    set currencies(list: Array<string>);
    /**
     * Whether decimal text is aligned to the right.
     * By default is false
     */
    isRightAligned: boolean;
    private _integerId;
    private _decimalId;
    private _labelClasses;
    readonly currencyInputId: string;
    readonly currencyLabelId: string;
    readonly decimalInputId: string;
    readonly decimalLabelId: string;
    readonly integerInputId: string;
    readonly integerLabelId: string;
    readonly validationMessagesId: string;
    readonly idListAttr: (...tokens: any[]) => string | undefined;
    protected initialized: boolean;
    /**
     * The id for the integer input. Defaults to unique string.
     * Used to map the label to the input.
     */
    set integerId(value: string);
    get integerId(): string;
    /**
     * The id for the decimal input. Defaults to unique string.
     * Used to map the label to the input.
     */
    set decimalId(value: string);
    get decimalId(): string;
    /**
     * The label for the integer input.
     */
    integerLabel: string;
    /**
     * The label for the decimal input.
     */
    decimalLabel: string;
    /**
     * The label for the currency input.
     */
    currencyLabel: string;
    /**
     * Flag is used to allow input negative value
     */
    allowNegativeValue: boolean;
    /**
     * Aria label for the currency dropdown.
     */
    currencyListAriaLabel: string;
    /**
     * Aria label for the currency list with one item.
     */
    currencyListWithOnItemAriaLabel: string;
    ariaDescribedby: string | undefined;
    ariaLabelledby: string | undefined;
    ariaInvalid: string | undefined;
    intEl: ElementRef | undefined;
    decEl: ElementRef | undefined;
    /**
     * An event emitter for on blur actions.
     */
    blur: EventEmitter<void | FocusEvent>;
    constructor(el: ElementRef, locale: string, domAttributeService: DomAttributesService, parentFormControl: NgControl);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    decOnBlur($event: FocusEvent): void;
    get cur(): string | undefined;
    get curList(): string[];
    ngAfterViewInit(): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    onPress($event: any): void;
    onInput(): void;
    updateCurrency(currency?: string): void;
    checkValues(): boolean;
    formatDecimal(decControl: FormControl): void;
    triggerChange(): void;
    checkNumeric(numeric: any): string;
    /**
     * Formats integer to user-friendly format
     *
     * @returns Returns true in case of successful formatting, otherwise - false.
     */
    formatInteger(): boolean;
    /**
     * Event handler for backspace key press, and check if correct number is deleted
     */
    onBackspace(el: HTMLInputElement): void;
    correctInputValue($event: FocusEvent): void;
    writeValue(model: any | null): void;
    registerOnChange(fn: () => void): void;
    registerOnTouched(fn: () => void): void;
    markAsTouched($event: FocusEvent): void;
    protected setDisabled(disableState: CurrencyFieldsState): void;
    private focusDecEl;
    /**
     * Make sure that numeric value doesn't exceed max length (if set)
     * this might happen in case value is pasted to input that has extended max length
     *
     * @param numeric
     */
    private sanitizeNumericValue;
    /**
     * If currency doesn't have decimal part, decimal placeholder
     * will be set to default decMinLen
     */
    private getDecimalDigits;
    static ɵfac: i0.ɵɵFactoryDeclaration<CurrencyInputComponent, [null, null, null, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CurrencyInputComponent, "bb-currency-input-ui", never, { "decMaxLen": "decMaxLen"; "decMinLen": "decMinLen"; "placeholder": "placeholder"; "resultType": "resultType"; "integer": "integer"; "required": "required"; "readonly": "readonly"; "disabled": "disabled"; "integerLabelSrOnly": "integerLabelSrOnly"; "decimalLabelSrOnly": "decimalLabelSrOnly"; "currencies": "currencies"; "isRightAligned": "isRightAligned"; "integerId": "integerId"; "decimalId": "decimalId"; "integerLabel": "integerLabel"; "decimalLabel": "decimalLabel"; "currencyLabel": "currencyLabel"; "allowNegativeValue": "allowNegativeValue"; "currencyListAriaLabel": "currencyListAriaLabel"; "currencyListWithOnItemAriaLabel": "currencyListWithOnItemAriaLabel"; "ariaDescribedby": "aria-describedby"; "ariaLabelledby": "aria-labelledby"; "ariaInvalid": "aria-invalid"; }, { "blur": "blur"; }, never, ["[bbValidationMessage]"]>;
}
