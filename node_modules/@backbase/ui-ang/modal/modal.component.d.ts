import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, Renderer2, TemplateRef } from '@angular/core';
import { ModalDismissReasons, NgbModal, NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { ModalHeaderComponent } from './modal-templates/modal-header.component';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name ModalComponent
 *
 * @description
 * Component that displays a modal window.
 */
export declare class ModalComponent implements OnChanges, OnDestroy {
    private readonly modalService;
    private readonly renderer;
    private readonly domAttrService;
    private readonly depricatedService;
    private readonly document;
    constructor(modalService: NgbModal, renderer: Renderer2, domAttrService: DomAttributesService, depricatedService: DeprecationsService, document: any);
    private modalRef;
    readonly id: string;
    /**
     * The flag to show the dialog window.  Defaults to 'false'.
     */
    isOpen: boolean;
    /**
     * Set aria-labelledby  with an element id that contains a brief label about the modal,
     * By Default is takes the modal heading
     */
    ariaLabelledby: string | undefined;
    /**
     * Set aria-describedby  with an element id that contains a detailed decription about the modal
     */
    ariaDescribedby: string | undefined;
    /**
     * Dialog options. Defaults to empty object.
     */
    modalOptions: NgbModalOptions;
    /**
     * The event that's fired after confirm button is pressed. Can be used with
     * (click)="dialogRef.onConfirm()" where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
     */
    confirm: EventEmitter<any>;
    /**
     * The event that's fired after cancel button is pressed. Can be used with
     * (click)="dialogRef.onCancel()" where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
     */
    cancel: EventEmitter<any>;
    /**
     * Used for two way binding with the isOpen Input. If used, backdrop
     * and esc dismiss cases will be handled automatically.
     */
    isOpenChange: EventEmitter<any>;
    modalContent: TemplateRef<any> | undefined;
    modalHeader: ModalHeaderComponent | undefined;
    private emitConfirm;
    ngOnChanges(): void;
    onElementViewInit(el: ElementRef<ModalHeaderComponent>): void;
    copyAriaAttrsToElement(el: ElementRef): void;
    getDismissReason(reason: ModalDismissReasons | string): ModalDismissReasons | string;
    dismissModal(reason?: string): void;
    closeModal(reason?: string): void;
    setConfirm(flag: boolean): void;
    ngOnDestroy(): void;
    trapKeyEvent(event: KeyboardEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ModalComponent, "bb-modal-ui", never, { "isOpen": "isOpen"; "ariaLabelledby": "aria-labelledby"; "ariaDescribedby": "aria-describedby"; "modalOptions": "modalOptions"; }, { "confirm": "confirm"; "cancel": "cancel"; "isOpenChange": "isOpenChange"; }, ["modalHeader"], ["*"]>;
}
export declare class ElementViewInitDirective implements AfterViewInit {
    private readonly elem;
    bbElementViewInit: EventEmitter<ElementRef<any>>;
    constructor(elem: ElementRef);
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ElementViewInitDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ElementViewInitDirective, "[bbElementViewInit]", never, {}, { "bbElementViewInit": "bbElementViewInit"; }, never>;
}
