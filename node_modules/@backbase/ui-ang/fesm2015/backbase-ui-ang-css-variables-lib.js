import * as i0 from '@angular/core';
import { Injectable, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import { CommonModule } from '@angular/common';

// Requires Promise and Array polyfills for older browsers
let savedVariables = null;
function findStyleBlocks() {
    return document.querySelectorAll('style:not(.inserted),link[rel="stylesheet"]');
}
function getStyleBlocksTexts(styleBlocks) {
    return __awaiter(this, void 0, void 0, function* () {
        return Promise.all(Array.from(styleBlocks).map((block) => getStyleBlockText(block).catch(ignoreErrorForBlock)));
    });
}
// the error for specific block should be ignored, to enable search in other blocks
function ignoreErrorForBlock(err) {
    console.error(err);
    return '';
}
function getStyleBlockText(styleBlock) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (styleBlock.nodeName) {
            case 'STYLE':
                return getTextForStyleNode(styleBlock);
            case 'LINK':
                return getTextForLinkNode(styleBlock);
            default:
                return '';
        }
    });
}
function getTextForStyleNode(styleBlock) {
    return styleBlock.innerHTML;
}
function getTextForLinkNode(styleBlock) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = styleBlock.getAttribute('href');
        if (!url) {
            return Promise.resolve('');
        }
        return new Promise((resolve, reject) => {
            const request = new XMLHttpRequest();
            request.open('GET', url, true);
            request.overrideMimeType('text/css;');
            request.onload = function () {
                if (request.status >= 200 && request.status < 400) {
                    resolve(request.responseText);
                }
                else {
                    reject(`Error returned from: ${url}`);
                }
            };
            request.onerror = function () {
                reject(`Got nothing from: ${url}`);
            };
            request.send();
        });
    });
}
function extractVariablesListFromCssText(css) {
    return css.match(/(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*)(;|})/g);
}
function reduceVariablesList(variablesList) {
    return variablesList.reduce((variables, variable) => {
        const variablesWithValues = variable.split(/;\s*/);
        return Object.assign(Object.assign({}, variables), variablesWithValues.reduce((variableSet, variableWithValue) => {
            const splitVariable = variableWithValue.split(/:\s*/);
            // Note: For minified css files, the semicolon from last declaration statement is removed by angular cli
            // for optimization purposes. For example below will be sample code in minified css file,
            // :root{--chart-color-6:#c22327;--chart-color-2:#00a1e0}.chart-positive-color{color:#2e7d32}
            // variableWithValue will gives us something like below for '--chart-color-2':-
            // "--chart-color-2: #00a1e0}.chart-positive-color{color:#2e7d32"
            // console.log(splitVariable); // ["--chart-color-2", "#00a1e0}.chart-positive-color{color:#2e7d32"]
            // splitVariable has wrong value for --chart-color-2 variable.
            // we need to split the splitVariable further with "}" so that we can get the right value.
            const variableValue = splitVariable[1] ? splitVariable[1].split('}')[0] : splitVariable[1];
            return Object.assign(Object.assign({}, variableSet), { [splitVariable[0]]: variableValue });
        }, {}));
    }, {});
}
function getCssVariableForOldBrowsers(name) {
    return __awaiter(this, void 0, void 0, function* () {
        if (savedVariables) {
            return savedVariables[name];
        }
        const styleBlocks = findStyleBlocks();
        if (!styleBlocks || !styleBlocks.length) {
            return Promise.resolve(undefined);
        }
        const styleBlocksTexts = yield getStyleBlocksTexts(styleBlocks);
        const variablesList = extractVariablesListFromCssText(styleBlocksTexts.join(''));
        if (!variablesList || !variablesList.length) {
            return Promise.resolve(undefined);
        }
        const cssVariables = reduceVariablesList(variablesList);
        savedVariables = cssVariables;
        return cssVariables[name];
    });
}
function getCssVariableForModernBrowsers(name, elementName = ':root') {
    const element = document.querySelector(elementName);
    if (!element) {
        return '';
    }
    const computedStyle = getComputedStyle(element);
    return computedStyle.getPropertyValue(name);
}
function getCssVariable(name, elementName = ':root', searchEverywhere = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!searchEverywhere && modernCSSIsSupported()) {
            return getCssVariableForModernBrowsers(name, elementName);
        }
        return getCssVariableForOldBrowsers(name);
    });
}
function modernCSSIsSupported() {
    const CSS = window.CSS;
    return !!(CSS && CSS.supports);
}

class CssVariablesService {
    getCssVariable(name, elementName = ':root', searchEverywhere = false) {
        return getCssVariable(name, elementName, searchEverywhere);
    }
}
CssVariablesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CssVariablesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CssVariablesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CssVariablesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CssVariablesService, decorators: [{
            type: Injectable
        }] });

class CssVariablesModule {
}
CssVariablesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CssVariablesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CssVariablesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CssVariablesModule, imports: [CommonModule] });
CssVariablesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CssVariablesModule, providers: [CssVariablesService], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CssVariablesModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    providers: [CssVariablesService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CssVariablesModule, CssVariablesService };
//# sourceMappingURL=backbase-ui-ang-css-variables-lib.js.map
