import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Optional, Self, Input, NgModule } from '@angular/core';
import { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import { idListAttr } from '@backbase/ui-ang/util';
import * as i1 from '@backbase/ui-ang/services';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i3 from '@backbase/foundation-ang/future';
import * as i4 from '@backbase/ui-ang/char-counter';
import { CharCounterModule } from '@backbase/ui-ang/char-counter';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';

/**
 * @name TextareaComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that displays a text input.
 */
class TextareaComponent extends InputBaseComponent {
    constructor(cd, domAttributesService, parentFormControl, deprecationsService) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.domAttributesService = domAttributesService;
        this.parentFormControl = parentFormControl;
        this.deprecationsService = deprecationsService;
        /**
         * The placeholder for the text input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Whether the text input is readonly.
         */
        this.readonly = false;
        /**
         * Shows character counter based on `maxLength`
         */
        this.showCharCounter = false;
        /**
         * Utility function for use in template
         */
        this.idListAttr = idListAttr;
        this.charCounterId = this.domAttributesService.generateId();
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
}
TextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DomAttributesService }, { token: i2.NgControl, optional: true, self: true }, { token: i3.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
TextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TextareaComponent, selector: "bb-textarea-ui", inputs: { rows: "rows", cols: "cols", placeholder: "placeholder", maxLength: "maxLength", minLength: "minLength", readonly: "readonly", showCharCounter: "showCharCounter", wrap: "wrap" }, usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-textarea-ui\"\n  [ngClass]=\"{ 'ng-invalid': parentFormControl?.invalid, 'ng-touched': parentFormControl?.touched }\"\n>\n  <label *ngIf=\"label\" for=\"{{ id }}\" [attr.data-role]=\"'textarea-label'\">{{ label }}</label>\n  <textarea\n    #textarea\n    id=\"{{ id }}\"\n    [attr.aria-label]=\"label ? null : ariaLabel || null\"\n    [attr.aria-describedby]=\"idListAttr(ariaDescribedby, maxLength && showCharCounter ? charCounterId : null)\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [attr.aria-expanded]=\"ariaExpanded\"\n    [attr.role]=\"role\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-owns]=\"ariaOwns\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    [ngModel]=\"value\"\n    (ngModelChange)=\"onValueChange($event)\"\n    (blur)=\"onBlur()\"\n    class=\"form-control\"\n    [rows]=\"rows\"\n    [cols]=\"cols\"\n    (focus)=\"onFocus()\"\n    [disabled]=\"disabled\"\n    [readOnly]=\"readonly\"\n    [bbFocus]=\"autofocus\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [attr.maxlength]=\"maxLength\"\n    [attr.minlength]=\"minLength\"\n    [wrap]=\"wrap\"\n    [attr.data-role]=\"'textarea-text-field'\"\n  ></textarea>\n  <bb-char-counter-ui\n    [attr.id]=\"charCounterId\"\n    *ngIf=\"maxLength && showCharCounter\"\n    [element]=\"textarea\"\n    [inputValue]=\"value\"\n    [maxLength]=\"maxLength\"\n    [attr.data-role]=\"'textarea-char-counter'\"\n  >\n  </bb-char-counter-ui>\n</div>\n", components: [{ type: i4.CharCounterComponent, selector: "bb-char-counter-ui", inputs: ["inputValue", "element", "maxLength", "blockTyping"] }], directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i2.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-textarea-ui',
                    templateUrl: './textarea.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DomAttributesService }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i3.DeprecationsService }]; }, propDecorators: { rows: [{
                type: Input
            }], cols: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], readonly: [{
                type: Input
            }], showCharCounter: [{
                type: Input
            }], wrap: [{
                type: Input
            }] } });

class TextareaModule {
}
TextareaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TextareaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaModule, declarations: [TextareaComponent], imports: [CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule], exports: [TextareaComponent] });
TextareaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaModule, imports: [[CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, BaseClassesModule, CharCounterModule, FocusModule],
                    declarations: [TextareaComponent],
                    exports: [TextareaComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TextareaComponent, TextareaModule };
//# sourceMappingURL=backbase-ui-ang-textarea.js.map
