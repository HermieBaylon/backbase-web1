import * as i0 from '@angular/core';
import { Component, Input, HostBinding, ViewChild, Directive, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

/**
 * @name ButtonComponent
 *
 * @description
 * Component that displays a button.
 */
class ButtonComponent {
    constructor(elRef, renderer2) {
        this.elRef = elRef;
        this.renderer2 = renderer2;
        /**
         * This Boolean attribute lets you specify that the button should have input focus when the page
         * loads, unless the user overrides it, for example by typing in a different control.  Only one
         * form-associated element in a document can have this attribute specified.
         */
        this.autofocus = false;
        /**
         * The HTML5 button type.  Defaults to 'button'.
         */
        this.type = 'button';
        /**
         * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to
         * false.
         */
        this.disabled = false;
        /**
         * Size of the button.
         */
        this.buttonSize = 'md';
        /**
         * The color for the button.  Defaults to 'primary'.
         */
        this.color = 'primary';
        /**
         * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.
         */
        this.block = false;
    }
    moveAriaAttributes(hostEl, childEl) {
        const nodeMap = hostEl.attributes;
        // CUT every aria attribute from the host element and PASTE it into the button element
        Object.keys(nodeMap).forEach((key) => {
            const item = nodeMap.item(Number(key));
            let attrName;
            let attrVal;
            if (item) {
                attrName = item.name;
                attrVal = item.value;
                if (attrName.includes('aria')) {
                    this.renderer2.setAttribute(childEl, attrName, attrVal);
                    this.renderer2.removeAttribute(hostEl, attrName);
                }
            }
        });
    }
    ngAfterViewInit() {
        this.moveAriaAttributes(this.elRef.nativeElement, this.buttonEl && this.buttonEl.nativeElement);
    }
}
ButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
ButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ButtonComponent, selector: "bb-button-ui", inputs: { autofocus: "autofocus", type: "type", disabled: "disabled", buttonSize: "buttonSize", color: "color", block: "block" }, host: { properties: { "class.btn-block": "this.block" } }, viewQueries: [{ propertyName: "buttonEl", first: true, predicate: ["button"], descendants: true, static: true }], ngImport: i0, template: "<button\n  #button\n  [type]=\"type\"\n  class=\"btn bb-button btn-{{ color }}\"\n  [autofocus]=\"autofocus\"\n  [disabled]=\"disabled\"\n  [class.btn-block]=\"block\"\n  [ngClass]=\"buttonSize === 'sm' ? 'btn-sm' : 'btn-md'\"\n>\n  <ng-content></ng-content>\n</button>\n", directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-button-ui',
                    templateUrl: './button.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { autofocus: [{
                type: Input
            }], type: [{
                type: Input
            }], disabled: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], color: [{
                type: Input
            }], block: [{
                type: HostBinding,
                args: ['class.btn-block']
            }, {
                type: Input
            }], buttonEl: [{
                type: ViewChild,
                args: ['button', { static: true }]
            }] } });

/**
 * @name ButtonDirective
 *
 * @description
 * Directive for styling button.
 *
 * @a11y
 * The `bbButton` directive doesn't provide any specific properties for accessibility.
 * In case of necessity add `aria-*` attributes to the `button` element.
 */
class ButtonDirective {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        /**
         * Button's type atrribute with default value.
         */
        this.type = 'button';
        /**
         * The color for the button. Defaults to 'primary'.
         * If a custom string used, then a css class is going to be added. The pattern is as follows:
         * `btn-customColor`
         */
        this.color = 'primary';
        /**
         * Size of the button.
         */
        this.buttonSize = 'md';
        /**
         * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.
         */
        this.block = false;
        /**
         * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.
         * This will only work when there's only an icon inside the button without a text.
         */
        this.circle = false;
    }
    ngOnInit() {
        this.renderer.addClass(this.hostElement.nativeElement, 'btn');
        this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.color}`);
        this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.buttonSize}`);
    }
    ngOnChanges(changes) {
        if (changes.color) {
            if (changes.color.previousValue) {
                this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.color.previousValue}`);
            }
            if (changes.color.currentValue) {
                this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.color.currentValue}`);
            }
        }
        if (changes.buttonSize) {
            if (changes.buttonSize.previousValue) {
                this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.previousValue}`);
            }
            if (changes.buttonSize.currentValue) {
                this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.currentValue}`);
            }
        }
    }
}
ButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ButtonDirective, selector: "button[bbButton]", inputs: { type: "type", color: "color", buttonSize: "buttonSize", block: "block", circle: "circle" }, host: { properties: { "type": "this.type", "class.btn-block": "this.block", "class.btn-circle": "this.circle" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[bbButton]',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { type: [{
                type: HostBinding,
                args: ['type']
            }, {
                type: Input
            }], color: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], block: [{
                type: HostBinding,
                args: ['class.btn-block']
            }, {
                type: Input
            }], circle: [{
                type: HostBinding,
                args: ['class.btn-circle']
            }, {
                type: Input
            }] } });

class ButtonModule {
}
ButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonModule, declarations: [ButtonComponent, ButtonDirective], imports: [CommonModule], exports: [ButtonComponent, ButtonDirective] });
ButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [ButtonComponent, ButtonDirective],
                    exports: [ButtonComponent, ButtonDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ButtonComponent, ButtonDirective, ButtonModule };
//# sourceMappingURL=backbase-ui-ang-button.js.map
