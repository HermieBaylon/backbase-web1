import * as i0 from '@angular/core';
import { Injectable, Component, Input, EventEmitter, Inject, Output, Directive, SecurityContext, forwardRef, ContentChild, ViewChild, HostBinding, HostListener, NgModule } from '@angular/core';
import * as i6 from '@angular/forms';
import { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { browserIsMsie, getKeyCode, KEY_CODES } from '@backbase/ui-ang/util';
import * as i13 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i1 from '@backbase/ui-ang/services';
import * as i2$1 from '@backbase/foundation-ang/future';
import * as i3$2 from '@angular/platform-browser';
import * as i2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i3 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i4 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i3$1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';

class RichTextEditorActionsService {
    constructor() {
        this.exec = (command, value = undefined) => {
            document.execCommand(command, false, value);
        };
    }
}
RichTextEditorActionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RichTextEditorActionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsService, decorators: [{
            type: Injectable
        }] });

class RichTextEditorActionsComponent {
    constructor(ma) {
        this.ma = ma;
        /**
         * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to
         * false.
         */
        this.disabled = false;
        /**
         * Placement of the action tooltip relative to the action button: auto | top | bottom | left | right.
         */
        this.actionsTooltipPlacement = 'auto';
    }
    result(command, value) {
        this.ma.exec(command, value);
    }
}
RichTextEditorActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorActionsComponent, selector: "ng-component", inputs: { disabled: "disabled", actionsTooltipPlacement: "actionsTooltipPlacement" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; }, propDecorators: { disabled: [{
                type: Input
            }], actionsTooltipPlacement: [{
                type: Input
            }] } });

class RichTextEditorBoldActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorBoldActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorBoldActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorBoldActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorBoldActionComponent, selector: "bb-rich-text-editor-bold-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Bold\"\n  i18n-bbTooltip=\"Bold|Bold action @@bb-rich-text-editor-ui.rich-text-editor-actions.bold\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Bold\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.bold\"\n    [disabled]=\"disabled\"\n    (click)=\"result('bold')\"\n  >\n    <bb-icon-ui name=\"format-bold\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorBoldActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-bold-action',
                    templateUrl: './rich-text-editor-bold-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorItalicActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorItalicActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorItalicActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorItalicActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorItalicActionComponent, selector: "bb-rich-text-editor-italic-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Italic\"\n  i18n-bbTooltip=\"Italic|Italic action @@bb-rich-text-editor-ui.rich-text-editor-actions.italic\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Italic\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.italic\"\n    [disabled]=\"disabled\"\n    (click)=\"result('italic')\"\n  >\n    <bb-icon-ui name=\"format-italic\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorItalicActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-italic-action',
                    templateUrl: './rich-text-editor-italic-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorUnderlineActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorUnderlineActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorUnderlineActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorUnderlineActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorUnderlineActionComponent, selector: "bb-rich-text-editor-underline-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Underline\"\n  i18n-bbTooltip=\"Underline|Underline action @@bb-rich-text-editor-ui.rich-text-editor-actions.underline\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Underline\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.underline\"\n    [disabled]=\"disabled\"\n    (click)=\"result('underline')\"\n  >\n    <bb-icon-ui name=\"format-underlined\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorUnderlineActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-underline-action',
                    templateUrl: './rich-text-editor-underline-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorStrikethroughActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorStrikethroughActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorStrikethroughActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorStrikethroughActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorStrikethroughActionComponent, selector: "bb-rich-text-editor-strikethrough-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Strikethrough\"\n  i18n-bbTooltip=\"Strikethrough|Strikethrough action @@bb-rich-text-editor-ui.rich-text-editor-actions.strikethrough\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Strikethrough\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.strikethrough\"\n    [disabled]=\"disabled\"\n    (click)=\"result('strikeThrough')\"\n  >\n    <bb-icon-ui name=\"format-strikethrough\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorStrikethroughActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-strikethrough-action',
                    templateUrl: './rich-text-editor-strikethrough-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorOlistActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorOlistActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorOlistActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorOlistActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorOlistActionComponent, selector: "bb-rich-text-editor-olist-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Ordered List\"\n  i18n-bbTooltip=\"Ordered List|Ordered List action @@bb-rich-text-editor-ui.rich-text-editor-actions.olist\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Ordered List\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.olist\"\n    [disabled]=\"disabled\"\n    (click)=\"result('insertOrderedList')\"\n  >\n    <bb-icon-ui name=\"format-list-numbered\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorOlistActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-olist-action',
                    templateUrl: './rich-text-editor-olist-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorUlistActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorUlistActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorUlistActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorUlistActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorUlistActionComponent, selector: "bb-rich-text-editor-ulist-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Unordered List\"\n  i18n-bbTooltip=\"Unordered List|Unordered List action @@bb-rich-text-editor-ui.rich-text-editor-actions.ulist\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Unordered List\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.ulist\"\n    [disabled]=\"disabled\"\n    (click)=\"result('insertUnorderedList')\"\n  >\n    <bb-icon-ui name=\"format-list-bulleted\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorUlistActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-ulist-action',
                    templateUrl: './rich-text-editor-ulist-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorParagraphActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorParagraphActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorParagraphActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorParagraphActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorParagraphActionComponent, selector: "bb-rich-text-editor-paragraph-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Paragraph\"\n  i18n-bbTooltip=\"Paragraph|Paragraph action @@bb-rich-text-editor-ui.rich-text-editor-actions.paragraph\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Paragraph\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.paragraph\"\n    [disabled]=\"disabled\"\n    (click)=\"result('formatBlock', '<P>')\"\n  >\n    <bb-icon-ui name=\"subject\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorParagraphActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-paragraph-action',
                    templateUrl: './rich-text-editor-paragraph-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorCodeActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
}
RichTextEditorCodeActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorCodeActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorCodeActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorCodeActionComponent, selector: "bb-rich-text-editor-code-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Code\"\n  i18n-bbTooltip=\"Code|Code action @@bb-rich-text-editor-ui.rich-text-editor-actions.code\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Code\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.code\"\n    [disabled]=\"disabled\"\n    (click)=\"result('formatBlock', '<PRE>')\"\n  >\n    <bb-icon-ui name=\"code\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorCodeActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-code-action',
                    templateUrl: './rich-text-editor-code-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

/**
 * @name RichTextEditorLinkActionComponent
 *
 * @dynamic (to suppress error with resolving statics declarations during compilation)
 */
class RichTextEditorLinkActionComponent extends RichTextEditorActionsComponent {
    constructor(ma, document) {
        super(ma);
        this.document = document;
        /**
         * Event emitted after link was added
         */
        this.linkAdded = new EventEmitter();
        /**
         * Flag to determine whether the add link modal is open
         */
        this.modalOpened = false;
        /**
         * Selection link url
         */
        this.selectionUrl = '';
    }
    /**
     * Open add link modal
     */
    openModal() {
        var _a, _b, _c, _d;
        this.modalOpened = true;
        this.setSelectionData();
        if (((_a = this.selection) === null || _a === void 0 ? void 0 : _a.rangeCount) && ((_b = this.selection) === null || _b === void 0 ? void 0 : _b.rangeCount) > 0) {
            this.selectionUrl =
                ((_c = this.linkedSelection) === null || _c === void 0 ? void 0 : _c.nodeName) === 'A' && ((_d = this.linkedSelection) === null || _d === void 0 ? void 0 : _d.href) !== ''
                    ? this.linkedSelection.href
                    : 'http://';
        }
    }
    /**
     * On add link modal confirmation
     */
    onResult() {
        this.restoreSelection();
        this.selectionUrl = this.selectionUrl.replace(/\s/g, '');
        if (this.selectionUrl.length === 0) {
            this.document.execCommand('unlink', false);
        }
        else {
            this.insertLink();
        }
        this.closeModal();
    }
    /**
     * Close add link modal
     */
    closeModal() {
        this.modalOpened = false;
        this.linkAdded.emit();
    }
    setSelectionData() {
        var _a;
        this.selection = this.document.getSelection();
        this.range = (_a = this.selection) === null || _a === void 0 ? void 0 : _a.getRangeAt(0);
        this.selectionUrl = '';
    }
    restoreSelection() {
        var _a, _b;
        if (this.range) {
            (_a = this.selection) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
            (_b = this.selection) === null || _b === void 0 ? void 0 : _b.addRange(this.range);
        }
    }
    insertLink() {
        var _a;
        if (!/^(http:\/\/|https:\/\/)/.test(this.selectionUrl)) {
            this.selectionUrl = 'http://' + this.selectionUrl;
        }
        if (((_a = this.range) === null || _a === void 0 ? void 0 : _a.toString()) !== '') {
            this.document.execCommand('createLink', false, this.selectionUrl);
        }
        else {
            this.document.execCommand('insertHTML', false, this.linkElement);
        }
    }
    get linkElement() {
        var _a;
        const innerText = ((_a = this.selection) === null || _a === void 0 ? void 0 : _a.toString()) || this.selectionUrl;
        const element = this.document.createElement('a');
        element.setAttribute('href', this.selectionUrl);
        element.setAttribute('target', '_blank');
        element.innerHTML = innerText;
        return element.outerHTML;
    }
    get linkedSelection() {
        var _a, _b, _c, _d, _e, _f, _g;
        return (((_c = (_b = (_a = this.range) === null || _a === void 0 ? void 0 : _a.commonAncestorContainer) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.closest('a')) ||
            ((_g = (_f = (_e = (_d = this.range) === null || _d === void 0 ? void 0 : _d.commonAncestorContainer) === null || _e === void 0 ? void 0 : _e.children) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.closest('a')));
    }
}
RichTextEditorLinkActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorLinkActionComponent, deps: [{ token: RichTextEditorActionsService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorLinkActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorLinkActionComponent, selector: "bb-rich-text-editor-link-action", inputs: { contentClassNames: "contentClassNames" }, outputs: { linkAdded: "linkAdded" }, usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Link\"\n  i18n-bbTooltip=\"Link|Link action @@bb-rich-text-editor-ui.rich-text-editor-actions.link\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Link\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.link\"\n    [disabled]=\"disabled\"\n    (click)=\"openModal()\"\n    data-role=\"link-action\"\n  >\n    <bb-icon-ui name=\"link\"></bb-icon-ui>\n  </button>\n</span>\n\n<bb-modal-ui [isOpen]=\"modalOpened\" (cancel)=\"closeModal()\" (confirm)=\"onResult()\">\n  <form data-role=\"add-link-form\">\n    <bb-modal-header-ui\n      title=\"Add link\"\n      i18n-title=\"Add link|Add link title@@bb-rich-text-editor-ui.rich-text-editor-link-modal.title\"\n    ></bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <label\n          class=\"bb-label\"\n          for=\"link-input\"\n          i18n=\"Enter the link|Enter the link title@@bb-rich-text-editor-ui.rich-text-editor-link-modal.input-label\"\n        >\n          Enter the URL Link\n        </label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          [(ngModel)]=\"selectionUrl\"\n          name=\"url\"\n          id=\"link-input\"\n          data-role=\"link-input\"\n        />\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui #footerRef data-role=\"link-modal-footer\">\n      <ng-template bbCustomModalFooter>\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            (click)=\"onResult()\"\n            type=\"submit\"\n            data-role=\"save-link\"\n            i18n=\"Save a link|Save a link button@@bb-rich-text-editor-ui.rich-text-editor-link-modal.save-button\"\n          >\n            Save Link\n          </button>\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            (click)=\"closeModal()\"\n            color=\"secondary\"\n            data-role=\"cancel-link-saving\"\n            i18n=\"Cancel|Cancel button@@bb-rich-text-editor-ui.rich-text-editor-link-modal.cancel-button\"\n          >\n            Cancel\n          </button>\n        </div>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </form>\n</bb-modal-ui>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i3$1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3$1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3$1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3$1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3$1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorLinkActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-link-action',
                    templateUrl: './rich-text-editor-link-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { linkAdded: [{
                type: Output
            }], contentClassNames: [{
                type: Input
            }] } });

class RichTextEditorActionsDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
RichTextEditorActionsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
RichTextEditorActionsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorActionsDirective, selector: "ng-template[bbRichTextEditorActions]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbRichTextEditorActions]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * @name RichTextEditorComponent
 *
 * @description
 * Component that provides you input text with editing.
 *
 * @dynamic (to suppress error with resolving Document type during compilation)
 */
class RichTextEditorComponent extends InputBaseComponent {
    constructor(cd, domAttributesService, deprecationsService, sanitizer, renderer, document) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.domAttributesService = domAttributesService;
        this.deprecationsService = deprecationsService;
        this.sanitizer = sanitizer;
        this.renderer = renderer;
        this.document = document;
        /**
         * The maxLength for the rich-text-editor component.
         */
        this.maxLength = Infinity;
        /**
         * The minLength for the rich-text-editor component.
         */
        this.minLength = 0;
        /**
         * The placeholder for the rich-text-editor component. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Show/hide message length. Defaults to true;
         */
        this.counter = true;
        /**
         * Whether the rich-text-editor component is readonly.
         */
        this.readonly = false;
        /**
         * Placement of the action tooltip relative to the action button: auto | top | bottom | left | right.
         */
        this.actionsTooltipPlacement = 'auto';
        this.focused = false;
        this.hostRef = this;
        this.contentClassName = 'bb-rich-text-editor__content';
        this.mainAreaClassName = 'bb-rich-text-editor__mainarea';
        this.value = '';
        this.replaceSpaces = (value) => value.replace(/&nbsp;|&#160;/g, ' ');
        this.labelId = this.domAttributesService.generateId();
    }
    onKeyEvent($event) {
        if (this.contentEditable && browserIsMsie()) {
            const action = getKeyCode($event);
            if (($event.ctrlKey || $event.metaKey) && action === KEY_CODES.X) {
                this.callOnChange();
            }
            if (action === KEY_CODES.BACKSPACE || action === KEY_CODES.DELETE) {
                this.callOnChange();
            }
        }
    }
    onPaste() {
        if (this.contentEditable && browserIsMsie()) {
            this.callOnChange();
        }
    }
    onClickEvent($event) {
        var _a, _b, _c, _d;
        if ((_a = this.document.getSelection()) === null || _a === void 0 ? void 0 : _a.rangeCount) {
            this.range = (_b = this.document.getSelection()) === null || _b === void 0 ? void 0 : _b.getRangeAt(0);
        }
        if (($event === null || $event === void 0 ? void 0 : $event.target).closest('button') && ((_c = this.range) === null || _c === void 0 ? void 0 : _c.endOffset) === ((_d = this.range) === null || _d === void 0 ? void 0 : _d.startOffset)) {
            this.restoreCaretPosition(this.contentEditableElement);
            this.callOnChange();
        }
    }
    writeValue(inputValue) {
        if (this.contentEditable) {
            const finalValue = this.parseValue(inputValue || '');
            this.renderer.setProperty(this.contentEditable.nativeElement, 'innerHTML', finalValue);
            super.onValueChange(finalValue);
        }
        this.cd.markForCheck();
    }
    callOnChange() {
        const finalValue = (this.contentEditable && this.parseValue(this.contentEditable.nativeElement.innerHTML)) || '';
        super.onValueChange(finalValue);
    }
    validate(control) {
        if (control) {
            console.warn('[bb-rich-text-editor-ui]: "control" argument in "validate" method is deprecated and will be removed ' +
                'in the next major release');
        }
        const value = this.getMessageText() || null;
        const validators = [Validators.maxLength(this.maxLength), Validators.minLength(this.minLength)];
        if (this.required) {
            validators.push(this.customRequiredValidation.bind(this));
        }
        const compose = Validators.compose(validators);
        return compose && compose({ value });
    }
    labelClick() {
        if (this.contentEditable) {
            this.contentEditable.nativeElement.focus();
        }
    }
    callOnFocus() {
        super.onFocus();
        this.focused = true;
    }
    callOnBlur() {
        setTimeout(() => {
            super.onBlur();
            this.focused = false;
            this.cd.markForCheck();
        });
    }
    getMessageText(content) {
        if (content) {
            console.warn('[bb-rich-text-editor-ui]: "content" argument in "getMessageText" method is deprecated and will ' +
                'be removed in the next major release');
        }
        return this.contentEditableElement.textContent || '';
    }
    showCounter() {
        return this.counter && !!this.maxLength && Number.isFinite(this.maxLength);
    }
    linkAdded() {
        this.callOnChange();
        this.restoreCaretPosition(this.contentEditableElement);
    }
    get contentEditableElement() {
        var _a;
        return (_a = this.contentEditable) === null || _a === void 0 ? void 0 : _a.nativeElement;
    }
    parseValue(value) {
        const isHtml = /<\/?[a-z][\s\S]*>/i.test(value);
        return this.replaceSpaces(isHtml ? this.sanitizer.sanitize(SecurityContext.HTML, value) || '' : value);
    }
    customRequiredValidation() {
        const value = this.getMessageText();
        if (!value || (typeof value === 'string' && !value.trim())) {
            return {
                required: true,
            };
        }
        return null;
    }
    restoreCaretPosition(el) {
        var _a, _b;
        const emptyRange = document.createRange();
        const selection = window.getSelection();
        const isEditorSelection = !!((_b = (_a = this.range) === null || _a === void 0 ? void 0 : _a.endContainer.parentElement) === null || _b === void 0 ? void 0 : _b.closest(`.${this.contentClassName}`));
        emptyRange.selectNodeContents(el);
        emptyRange.collapse(false);
        selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
        if (isEditorSelection) {
            selection === null || selection === void 0 ? void 0 : selection.addRange(this.range);
        }
        else {
            selection === null || selection === void 0 ? void 0 : selection.addRange(emptyRange);
        }
    }
}
RichTextEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DomAttributesService }, { token: i2$1.DeprecationsService }, { token: i3$2.DomSanitizer }, { token: i0.Renderer2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorComponent, selector: "bb-rich-text-editor-ui", inputs: { maxLength: "maxLength", minLength: "minLength", placeholder: "placeholder", counter: "counter", readonly: "readonly", actionsTooltipPlacement: "actionsTooltipPlacement" }, host: { listeners: { "keydown": "onKeyEvent($event)", "keyup": "onKeyEvent($event)", "paste": "onPaste()", "mouseup": "onClickEvent($event)" }, properties: { "class.is-focused": "this.focused" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => RichTextEditorComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => RichTextEditorComponent),
            multi: true,
        },
    ], queries: [{ propertyName: "actions", first: true, predicate: RichTextEditorActionsDirective, descendants: true, static: true }], viewQueries: [{ propertyName: "contentEditable", first: true, predicate: ["contenteditable"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-rich-text-editor\">\n  <label class=\"bb-rich-text-editor__label\" [attr.id]=\"labelId\" for=\"{{ id }}\" *ngIf=\"label\" (click)=\"labelClick()\">{{\n    label\n  }}</label>\n  <div\n    tabindex=\"0\"\n    role=\"textbox\"\n    aria-label=\"bb-rich-text-editor-textbox\"\n    aria-labelledby=\"bb-rich-text-editor-textbox\"\n    class=\"form-control bb-rich-text-editor__actionbar\"\n    [ngClass]=\"{ 'bb-rich-text-editor--disabled': readonly || disabled }\"\n  >\n    <div [ngClass]=\"mainAreaClassName\">\n      <div\n        #contenteditable\n        [ngClass]=\"contentClassName\"\n        [attr.contenteditable]=\"!readonly && !disabled\"\n        [attr.placeholder]=\"placeholder\"\n        [attr.readonly]=\"readonly\"\n        [attr.aria-label]=\"ariaLabel || label\"\n        [attr.aria-labelledby]=\"ariaLabelledby ? ariaLabelledby : label ? labelId : null\"\n        [attr.aria-describedby]=\"ariaDescribedby ? ariaDescribedby : null\"\n        (input)=\"callOnChange()\"\n        (blur)=\"callOnBlur()\"\n        (focus)=\"callOnFocus()\"\n      ></div>\n      <div aria-live=\"assertive\" class=\"sr-only\">\n        <span\n          aria-atomic=\"true\"\n          role=\"log\"\n          [attr.aria-hidden]=\"getMessageText().length <= maxLength - 5\"\n          i18n=\"\n            Char counter Length Warning|String above to reached 'maxLength' characters.\n            @@bb-rich-text-editor-ui.length-warning\"\n          >You typed {{ getMessageText().length }} of {{ maxLength }} allowed characters in this field.</span\n        >\n      </div>\n\n      <ng-container *ngIf=\"actions; else defaultActions\">\n        <div class=\"bb-rich-text-editor-buttons\">\n          <ng-container *ngTemplateOutlet=\"actions.templateRef; context: hostRef\"></ng-container>\n        </div>\n      </ng-container>\n\n      <textarea id=\"{{ id }}\" class=\"bb-rich-text-editor__textarea bb-rich-text-editor__textarea--hidden\"></textarea>\n    </div>\n  </div>\n  <p\n    *ngIf=\"showCounter()\"\n    class=\"bb-rich-text-editor__char-counter\"\n    data-role=\"char-counter\"\n    [ngClass]=\"{ 'text-danger': getMessageText().length > maxLength }\"\n  >\n    <span>{{ getMessageText().length }} / {{ maxLength }}</span>\n    <span\n      *ngIf=\"getMessageText().length > maxLength\"\n      i18n=\"Limit exceeded text error@@bb-rich-text-editor-ui.limitExceeded\"\n      >, limit exceeded</span\n    >\n  </p>\n</div>\n\n<ng-template #defaultActions bbRichTextEditorActions>\n  <bb-rich-text-editor-bold-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-bold-action>\n  <bb-rich-text-editor-italic-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-italic-action>\n  <bb-rich-text-editor-underline-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-underline-action>\n  <bb-rich-text-editor-strikethrough-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  >\n  </bb-rich-text-editor-strikethrough-action>\n  <span role=\"separator\" class=\"bb-rich-text-editor__toolbar-separator\"></span>\n  <bb-rich-text-editor-olist-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-olist-action>\n  <bb-rich-text-editor-ulist-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  >\n  </bb-rich-text-editor-ulist-action>\n  <span role=\"separator\" class=\"bb-rich-text-editor__toolbar-separator\"></span>\n  <bb-rich-text-editor-paragraph-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-paragraph-action>\n  <bb-rich-text-editor-code-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-code-action>\n  <bb-rich-text-editor-link-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [contentClassNames]=\"[contentClassName, mainAreaClassName]\"\n    [disabled]=\"disabled || readonly\"\n    (linkAdded)=\"linkAdded()\"\n  ></bb-rich-text-editor-link-action>\n</ng-template>\n", components: [{ type: RichTextEditorBoldActionComponent, selector: "bb-rich-text-editor-bold-action" }, { type: RichTextEditorItalicActionComponent, selector: "bb-rich-text-editor-italic-action" }, { type: RichTextEditorUnderlineActionComponent, selector: "bb-rich-text-editor-underline-action" }, { type: RichTextEditorStrikethroughActionComponent, selector: "bb-rich-text-editor-strikethrough-action" }, { type: RichTextEditorOlistActionComponent, selector: "bb-rich-text-editor-olist-action" }, { type: RichTextEditorUlistActionComponent, selector: "bb-rich-text-editor-ulist-action" }, { type: RichTextEditorParagraphActionComponent, selector: "bb-rich-text-editor-paragraph-action" }, { type: RichTextEditorCodeActionComponent, selector: "bb-rich-text-editor-code-action" }, { type: RichTextEditorLinkActionComponent, selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }], directives: [{ type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i13.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i13.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: RichTextEditorActionsDirective, selector: "ng-template[bbRichTextEditorActions]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-ui',
                    templateUrl: './rich-text-editor.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RichTextEditorComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => RichTextEditorComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DomAttributesService }, { type: i2$1.DeprecationsService }, { type: i3$2.DomSanitizer }, { type: i0.Renderer2 }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], counter: [{
                type: Input
            }], readonly: [{
                type: Input
            }], actionsTooltipPlacement: [{
                type: Input
            }], actions: [{
                type: ContentChild,
                args: [RichTextEditorActionsDirective, { static: true }]
            }], contentEditable: [{
                type: ViewChild,
                args: ['contenteditable', { static: true }]
            }], focused: [{
                type: HostBinding,
                args: ['class.is-focused']
            }], onKeyEvent: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }, {
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onPaste: [{
                type: HostListener,
                args: ['paste']
            }], onClickEvent: [{
                type: HostListener,
                args: ['mouseup', ['$event']]
            }] } });

class RichTextEditorImageActionComponent extends RichTextEditorActionsComponent {
    constructor(ma) {
        super(ma);
    }
    onResult() {
        const url = window.prompt('Enter the image URL');
        if (url)
            super.result('insertImage', url);
    }
}
RichTextEditorImageActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorImageActionComponent, deps: [{ token: RichTextEditorActionsService }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorImageActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorImageActionComponent, selector: "bb-rich-text-editor-image-action", usesInheritance: true, ngImport: i0, template: "<span\n  bbTooltip=\"Image\"\n  i18n-bbTooltip=\"Image|Image action @@bb-rich-text-editor-ui.rich-text-editor-actions.image\"\n  container=\"body\"\n  triggers=\"hover focus\"\n  [placement]=\"actionsTooltipPlacement\"\n>\n  <button\n    bbButton\n    [circle]=\"true\"\n    color=\"link-dark\"\n    aria-label=\"Image\"\n    i18n-aria-label=\"@@bb-rich-text-editor-ui.rich-text-editor-actions.image\"\n    [disabled]=\"disabled\"\n    (click)=\"onResult()\"\n  >\n    <bb-icon-ui name=\"image\"></bb-icon-ui>\n  </button>\n</span>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorImageActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-image-action',
                    templateUrl: './rich-text-editor-image-action.component.html',
                }]
        }], ctorParameters: function () { return [{ type: RichTextEditorActionsService }]; } });

class RichTextEditorModule {
}
RichTextEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
RichTextEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorModule, declarations: [RichTextEditorComponent,
        RichTextEditorActionsDirective,
        RichTextEditorActionsComponent,
        RichTextEditorBoldActionComponent,
        RichTextEditorCodeActionComponent,
        RichTextEditorImageActionComponent,
        RichTextEditorItalicActionComponent,
        RichTextEditorLinkActionComponent,
        RichTextEditorOlistActionComponent,
        RichTextEditorParagraphActionComponent,
        RichTextEditorStrikethroughActionComponent,
        RichTextEditorUlistActionComponent,
        RichTextEditorUnderlineActionComponent], imports: [CommonModule, ButtonModule, IconModule, ModalModule, FormsModule, TooltipModule], exports: [RichTextEditorComponent,
        RichTextEditorActionsDirective,
        RichTextEditorActionsComponent,
        RichTextEditorBoldActionComponent,
        RichTextEditorCodeActionComponent,
        RichTextEditorImageActionComponent,
        RichTextEditorItalicActionComponent,
        RichTextEditorLinkActionComponent,
        RichTextEditorOlistActionComponent,
        RichTextEditorParagraphActionComponent,
        RichTextEditorStrikethroughActionComponent,
        RichTextEditorUlistActionComponent,
        RichTextEditorUnderlineActionComponent] });
RichTextEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorModule, providers: [RichTextEditorActionsService], imports: [[CommonModule, ButtonModule, IconModule, ModalModule, FormsModule, TooltipModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ButtonModule, IconModule, ModalModule, FormsModule, TooltipModule],
                    declarations: [
                        RichTextEditorComponent,
                        RichTextEditorActionsDirective,
                        RichTextEditorActionsComponent,
                        RichTextEditorBoldActionComponent,
                        RichTextEditorCodeActionComponent,
                        RichTextEditorImageActionComponent,
                        RichTextEditorItalicActionComponent,
                        RichTextEditorLinkActionComponent,
                        RichTextEditorOlistActionComponent,
                        RichTextEditorParagraphActionComponent,
                        RichTextEditorStrikethroughActionComponent,
                        RichTextEditorUlistActionComponent,
                        RichTextEditorUnderlineActionComponent,
                    ],
                    exports: [
                        RichTextEditorComponent,
                        RichTextEditorActionsDirective,
                        RichTextEditorActionsComponent,
                        RichTextEditorBoldActionComponent,
                        RichTextEditorCodeActionComponent,
                        RichTextEditorImageActionComponent,
                        RichTextEditorItalicActionComponent,
                        RichTextEditorLinkActionComponent,
                        RichTextEditorOlistActionComponent,
                        RichTextEditorParagraphActionComponent,
                        RichTextEditorStrikethroughActionComponent,
                        RichTextEditorUlistActionComponent,
                        RichTextEditorUnderlineActionComponent,
                    ],
                    providers: [RichTextEditorActionsService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { RichTextEditorActionsComponent, RichTextEditorActionsDirective, RichTextEditorBoldActionComponent, RichTextEditorCodeActionComponent, RichTextEditorComponent, RichTextEditorImageActionComponent, RichTextEditorItalicActionComponent, RichTextEditorLinkActionComponent, RichTextEditorModule, RichTextEditorOlistActionComponent, RichTextEditorParagraphActionComponent, RichTextEditorStrikethroughActionComponent, RichTextEditorUlistActionComponent, RichTextEditorUnderlineActionComponent };
//# sourceMappingURL=backbase-ui-ang-rich-text-editor.js.map
