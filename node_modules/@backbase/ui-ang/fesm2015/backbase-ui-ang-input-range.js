import * as i0 from '@angular/core';
import { Directive, Self, Input, ContentChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i1 from '@angular/forms';
import { Validators } from '@angular/forms';
import { Subject, merge } from 'rxjs';
import { tap, takeUntil } from 'rxjs/operators';

class InputRangeMinDirective {
    constructor(control) {
        this.control = control;
    }
    ngOnChanges({ bbInputRangeMin }) {
        const c = this.control;
        if (!c.control) {
            return;
        }
        if (!bbInputRangeMin.firstChange) {
            c.control.clearValidators();
        }
        if (typeof this.bbInputRangeMin === 'number') {
            c.control.setValidators(Validators.min(this.bbInputRangeMin));
        }
        c.control.updateValueAndValidity();
    }
}
InputRangeMinDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMinDirective, deps: [{ token: i1.NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive });
InputRangeMinDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeMinDirective, selector: "bb-input-number-ui[bbInputRangeMin]", inputs: { bbInputRangeMin: "bbInputRangeMin" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMinDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'bb-input-number-ui[bbInputRangeMin]',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Self
                }] }]; }, propDecorators: { bbInputRangeMin: [{
                type: Input
            }] } });
class InputRangeMaxDirective {
    constructor(control) {
        this.control = control;
    }
    ngOnChanges({ bbInputRangeMax }) {
        const c = this.control;
        if (!c.control) {
            return;
        }
        if (!bbInputRangeMax.firstChange) {
            c.control.clearValidators();
        }
        if (typeof this.bbInputRangeMax === 'number') {
            c.control.setValidators(Validators.max(this.bbInputRangeMax));
        }
        c.control.updateValueAndValidity();
    }
}
InputRangeMaxDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMaxDirective, deps: [{ token: i1.NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive });
InputRangeMaxDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeMaxDirective, selector: "bb-input-number-ui[bbInputRangeMax]", inputs: { bbInputRangeMax: "bbInputRangeMax" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMaxDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'bb-input-number-ui[bbInputRangeMax]',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Self
                }] }]; }, propDecorators: { bbInputRangeMax: [{
                type: Input
            }] } });
class InputRangeDirective {
    constructor() {
        this.destroy$$ = new Subject();
    }
    ngAfterViewInit() {
        const cMin = this.min && this.min.control && this.min.control.control;
        const cMax = this.max && this.max.control && this.max.control.control;
        if (!(cMin && cMax)) {
            return;
        }
        merge(cMin.valueChanges.pipe(tap((min) => {
            const max = cMax.value;
            if (typeof max !== 'number' || min > max) {
                cMax.patchValue(min, { emitEvent: false });
            }
        })), cMax.valueChanges.pipe(tap((max) => {
            const min = cMin.value;
            const areNumbers = typeof min === 'number' && typeof max === 'number';
            if (areNumbers && max < min) {
                cMin.patchValue(max, { emitEvent: false });
            }
        })))
            .pipe(takeUntil(this.destroy$$))
            .subscribe();
    }
    ngOnDestroy() {
        if (this.destroy$$) {
            this.destroy$$.next();
            this.destroy$$.complete();
        }
    }
}
InputRangeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
InputRangeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeDirective, selector: "[bbInputRange]", queries: [{ propertyName: "min", first: true, predicate: InputRangeMinDirective, descendants: true, static: true }, { propertyName: "max", first: true, predicate: InputRangeMaxDirective, descendants: true, static: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbInputRange]',
                }]
        }], propDecorators: { min: [{
                type: ContentChild,
                args: [InputRangeMinDirective, { static: true }]
            }], max: [{
                type: ContentChild,
                args: [InputRangeMaxDirective, { static: true }]
            }] } });

class InputRangeModule {
}
InputRangeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputRangeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeModule, declarations: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective], imports: [CommonModule], exports: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective] });
InputRangeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective],
                    declarations: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { InputRangeDirective, InputRangeMaxDirective, InputRangeMinDirective, InputRangeModule };
//# sourceMappingURL=backbase-ui-ang-input-range.js.map
