import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@ng-bootstrap/ng-bootstrap';
import { NgbPaginationConfig, NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';
import * as i2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';

/**
 * @name PaginatorComponent
 *
 * @description
 * A component that displays page numbers and allows to customize them in several ways.
 */
class PaginatorComponent {
    constructor() {
        /**
         * The current page.
         *
         * bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed.  Correct inputs by adding 1.
         */
        this.page = 1;
        /**
         * If `true`, the "First" and "Last" page links are shown.
         */
        this.boundaryLinks = false;
        /**
         * If `true`, the "Next" and "Previous" page links are shown.
         */
        this.directionLinks = false;
        /**
         * The number of items in your paginated collection.
         *
         * Note, that this is not the number of pages. Page numbers are calculated dynamically based on
         * `totalItems` and `itemsPerPage`.
         */
        this.totalItems = 0;
        /**
         * The number of items per page.
         */
        this.itemsPerPage = 10;
        /**
         * The maximum number of pages to display.
         */
        this.maxNavPages = 5;
        /**
         * An event fired when the page is changed. Will fire only if collection size is set and all values are valid.
         *
         * Event payload is the number of the newly selected page.
         *
         * bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed. Correct outputs by subtracting 1.
         */
        this.pageChange = new EventEmitter();
    }
    onPageChange(page) {
        this.pageChange.emit(page - 1);
    }
}
PaginatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaginatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaginatorComponent, selector: "bb-pagination-ui", inputs: { page: "page", boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", totalItems: "totalItems", itemsPerPage: "itemsPerPage", maxNavPages: "maxNavPages" }, outputs: { pageChange: "pageChange" }, providers: [NgbPaginationConfig], ngImport: i0, template: "<ngb-pagination\n  (pageChange)=\"onPageChange($event)\"\n  *ngIf=\"+itemsPerPage < +totalItems\"\n  [boundaryLinks]=\"boundaryLinks\"\n  [collectionSize]=\"totalItems\"\n  [directionLinks]=\"directionLinks\"\n  [maxSize]=\"maxNavPages\"\n  [pageSize]=\"itemsPerPage\"\n  [page]=\"page + 1\"\n  [rotate]=\"true\"\n  class=\"d-flex justify-content-center bb-pagination\"\n>\n  <ng-template ngbPaginationNumber let-page>\n    <span aria-hidden=\"true\">{{ page }}</span>\n    <span class=\"sr-only\" i18n=\"Link Label for Screen Reader@@bb-pagination-ui.pagination.link.number\"\n      >page {{ page }}</span\n    >\n  </ng-template>\n  <ng-template ngbPaginationFirst>\n    <bb-icon-ui data-role=\"pagination-icon-first\" size=\"md\" name=\"first-page\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationPrevious>\n    <bb-icon-ui data-role=\"pagination-icon-previous\" size=\"md\" name=\"chevron-left\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationNext>\n    <bb-icon-ui data-role=\"pagination-icon-next\" size=\"md\" name=\"chevron-right\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationLast>\n    <bb-icon-ui data-role=\"pagination-icon-last\" size=\"md\" name=\"last-page\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationEllipsis>\n    <span class=\"bb-pagination__ellipsis\" data-role=\"pagination-ellipsis\">...</span>\n  </ng-template>\n</ngb-pagination>\n", components: [{ type: i1.NgbPagination, selector: "ngb-pagination", inputs: ["page", "disabled", "boundaryLinks", "directionLinks", "ellipses", "maxSize", "pageSize", "rotate", "size", "collectionSize"], outputs: ["pageChange"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgbPaginationNumber, selector: "ng-template[ngbPaginationNumber]" }, { type: i1.NgbPaginationFirst, selector: "ng-template[ngbPaginationFirst]" }, { type: i1.NgbPaginationPrevious, selector: "ng-template[ngbPaginationPrevious]" }, { type: i1.NgbPaginationNext, selector: "ng-template[ngbPaginationNext]" }, { type: i1.NgbPaginationLast, selector: "ng-template[ngbPaginationLast]" }, { type: i1.NgbPaginationEllipsis, selector: "ng-template[ngbPaginationEllipsis]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pagination-ui',
                    templateUrl: './pagination.component.html',
                    providers: [NgbPaginationConfig],
                }]
        }], propDecorators: { page: [{
                type: Input
            }], boundaryLinks: [{
                type: Input
            }], directionLinks: [{
                type: Input
            }], totalItems: [{
                type: Input
            }], itemsPerPage: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], pageChange: [{
                type: Output
            }] } });

class PaginationModule {
}
PaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationModule, declarations: [PaginatorComponent], imports: [CommonModule, NgbPaginationModule, IconModule], exports: [PaginatorComponent] });
PaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationModule, imports: [[CommonModule, NgbPaginationModule, IconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbPaginationModule, IconModule],
                    declarations: [PaginatorComponent],
                    exports: [PaginatorComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PaginationModule, PaginatorComponent, PaginationModule as PaginatorModule };
//# sourceMappingURL=backbase-ui-ang-pagination.js.map
