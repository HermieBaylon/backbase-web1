import * as i0 from '@angular/core';
import { Component, Input, Directive, NgModule } from '@angular/core';
import * as i1 from '@backbase/ui-ang/services';
import { BrowserService, NAVIGATOR_TOKEN, navigatorFactory } from '@backbase/ui-ang/services';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';

/**
 * @name EllipsisComponent
 *
 * @description
 * Component that wraps text and shows ellipsis in case text does not fit.
 */
/** @dynamic */
class EllipsisComponent {
    constructor(browserService) {
        this.browserService = browserService;
        this.isOpen = false;
        /**
         * Specifies the events that should trigger the tooltip (space separated strings). Defaults to 'click'.
         */
        this.tooltipTriggers = 'click';
        this._lineClamp = 0;
    }
    /**
     * Specifies after what text line apply truncating
     */
    set lineClamp(value) {
        this._lineClamp = Math.max(0, Math.floor(value));
    }
    get lineClamp() {
        return this._lineClamp;
    }
    get isIE() {
        return this.browserService.browserIsMSIE();
    }
    onMouseEnter(event) {
        const target = event.target;
        if (target.offsetWidth < target.scrollWidth) {
            this.isOpen = true;
        }
    }
    onMouseLeave() {
        this.isOpen = false;
    }
}
EllipsisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisComponent, deps: [{ token: i1.BrowserService }], target: i0.ɵɵFactoryTarget.Component });
EllipsisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EllipsisComponent, selector: "bb-ellipsis-ui", inputs: { text: "text", tooltipTriggers: "tooltipTriggers", lineClamp: "lineClamp" }, providers: [BrowserService, { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory }], ngImport: i0, template: "<div\n  class=\"bb-ellipsis\"\n  [ngClass]=\"{\n    'bb-ellipsis--single-line': !lineClamp || isIE,\n    'bb-ellipsis--line-clamp': lineClamp && !isIE\n  }\"\n  [style.-webkit-line-clamp]=\"lineClamp || 'none'\"\n  [style.line-clamp]=\"lineClamp || 'none'\"\n  [bbTooltip]=\"text\"\n  [triggers]=\"tooltipTriggers\"\n  [disableTooltip]=\"!isOpen\"\n  (mouseenter)=\"onMouseEnter($event)\"\n  (mouseleave)=\"onMouseLeave()\"\n>\n  <ng-container *ngIf=\"text\">{{ text }}</ng-container>\n  <ng-container *ngIf=\"!text\"><ng-content></ng-content></ng-container>\n  <div></div>\n  <!--fix for safari: removal of display standard tooltip -->\n</div>\n", directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-ellipsis-ui',
                    templateUrl: './ellipsis.component.html',
                    providers: [BrowserService, { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory }],
                }]
        }], ctorParameters: function () { return [{ type: i1.BrowserService }]; }, propDecorators: { text: [{
                type: Input
            }], tooltipTriggers: [{
                type: Input
            }], lineClamp: [{
                type: Input,
                args: ['lineClamp']
            }] } });

class IsContentTruncatedDirective {
    constructor(elementRef, cd) {
        this.elementRef = elementRef;
        this.cd = cd;
    }
    ngAfterViewInit() {
        if (!this.hostRef.setIsContentTruncated) {
            throw new Error('"hostRef" should implement "CheckContentTruncationBehaviour" interface to set truncation status');
        }
        setTimeout(() => {
            this.setIsContentTruncatedInParentComponent();
        });
    }
    setIsContentTruncatedInParentComponent() {
        const isContentTruncated = this.isContentTruncated(this.elementRef.nativeElement);
        this.hostRef.setIsContentTruncated(isContentTruncated);
        this.cd.markForCheck();
    }
    isContentTruncated({ offsetHeight, scrollHeight }) {
        return offsetHeight < scrollHeight;
    }
}
IsContentTruncatedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IsContentTruncatedDirective, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
IsContentTruncatedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IsContentTruncatedDirective, selector: "[bbIsContentTruncated]", inputs: { hostRef: "hostRef" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IsContentTruncatedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIsContentTruncated]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { hostRef: [{
                type: Input
            }] } });

const directives = [IsContentTruncatedDirective];
class EllipsisModule {
}
EllipsisModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
EllipsisModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisModule, declarations: [EllipsisComponent, IsContentTruncatedDirective], imports: [TooltipModule, CommonModule], exports: [EllipsisComponent, IsContentTruncatedDirective] });
EllipsisModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisModule, imports: [[TooltipModule, CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [TooltipModule, CommonModule],
                    declarations: [EllipsisComponent, ...directives],
                    exports: [EllipsisComponent, ...directives],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { EllipsisComponent, EllipsisModule, IsContentTruncatedDirective };
//# sourceMappingURL=backbase-ui-ang-ellipsis.js.map
