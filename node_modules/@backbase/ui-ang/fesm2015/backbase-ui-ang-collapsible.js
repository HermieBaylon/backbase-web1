import * as i0 from '@angular/core';
import { Directive, EventEmitter, TemplateRef, Component, Optional, Host, ContentChild, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@backbase/ui-ang/collapsible-accordion';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@ng-bootstrap/ng-bootstrap';
import { NgbCollapseModule } from '@ng-bootstrap/ng-bootstrap';

class CollapsibleHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CollapsibleHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CollapsibleHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCollapsibleHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CollapsibleBodyDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CollapsibleBodyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleBodyDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CollapsibleBodyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleBodyDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCollapsibleBody]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * @name CollapsibleComponent
 *
 * @description
 * Provides an expandable details-summary/body-header view.
 */
class CollapsibleComponent {
    //TODO: review approach with such dependency on Accordion
    constructor(bbCollapsibleAccordion) {
        this.bbCollapsibleAccordion = bbCollapsibleAccordion;
        /**
         * If true, it will use the ngIf approach to create the content
         * which is less performant but removes the extra div.
         * In case of styling issues, set this to true.
         */
        this.recreateBodyContent = false;
        /**
         * Whether chevron should be displayed. Defaults to true.
         */
        this.hasChevron = true;
        this.open = false;
        /**
         * Emits the toggle content event.
         */
        this.isOpenChange = new EventEmitter();
        this.toggle = () => {
            this.isOpen = !this.isOpen;
        };
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.registerNestedPanel(this);
        }
        this.headerContext = {
            toggle: this.toggle,
            isOpen: this.isOpen,
        };
    }
    /**
     * Toggles the content.
     */
    set isOpen(v) {
        this.open = v;
        this.isOpenChange.emit(v);
        this.headerContext.isOpen = v;
    }
    get isOpen() {
        return this.open;
    }
    ngOnDestroy() {
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.unregisterNestedPanel(this);
        }
    }
}
CollapsibleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleComponent, deps: [{ token: i1.CollapsibleAccordionComponent, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CollapsibleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleComponent, selector: "bb-collapsible-ui", inputs: { recreateBodyContent: "recreateBodyContent", hasChevron: "hasChevron", isOpen: "isOpen" }, outputs: { isOpenChange: "isOpenChange" }, queries: [{ propertyName: "collapsibleHeader", first: true, predicate: CollapsibleHeaderDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: "collapsibleBody", first: true, predicate: CollapsibleBodyDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-container *ngIf=\"collapsibleHeader\">\n  <ng-container *ngTemplateOutlet=\"collapsibleHeader; context: headerContext\"> </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"collapsibleBody && !recreateBodyContent\">\n  <div [ngbCollapse]=\"!isOpen\">\n    <ng-container *ngTemplateOutlet=\"collapsibleBody; context: headerContext\"> </ng-container>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"collapsibleBody && recreateBodyContent\">\n  <ng-container *ngIf=\"!isOpen\">\n    <ng-container *ngTemplateOutlet=\"collapsibleBody; context: headerContext\"> </ng-container>\n  </ng-container>\n</ng-container>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-ui',
                    templateUrl: './collapsible.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.CollapsibleAccordionComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }]; }, propDecorators: { collapsibleHeader: [{
                type: ContentChild,
                args: [CollapsibleHeaderDirective, { read: TemplateRef, static: true }]
            }], collapsibleBody: [{
                type: ContentChild,
                args: [CollapsibleBodyDirective, { read: TemplateRef, static: true }]
            }], recreateBodyContent: [{
                type: Input
            }], hasChevron: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], isOpenChange: [{
                type: Output
            }] } });

class CollapsibleModule {
}
CollapsibleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CollapsibleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleModule, declarations: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective], imports: [CommonModule, NgbCollapseModule], exports: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective] });
CollapsibleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleModule, imports: [[CommonModule, NgbCollapseModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbCollapseModule],
                    declarations: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective],
                    exports: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CollapsibleBodyDirective, CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleModule };
//# sourceMappingURL=backbase-ui-ang-collapsible.js.map
