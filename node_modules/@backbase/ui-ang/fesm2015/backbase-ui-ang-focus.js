import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Directive, Input, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime } from 'rxjs/operators';

const isFocusable = (el) => !!el && typeof el.focus === 'function';
class FocusService {
    constructor() {
        this.focusSubject = new Subject();
        this.sub = this.focusSubject.pipe(throttleTime(0, undefined, { leading: true })).subscribe((focused) => {
            if (isFocusable(focused.nativeElement)) {
                focused.nativeElement.focus();
            }
        });
    }
    focus(el) {
        this.focusSubject.next(el);
    }
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
}
FocusService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FocusService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class FocusDirective {
    constructor(service, el) {
        this.service = service;
        this.el = el;
        this.autofocus = true;
    }
    set bbFocus(value) {
        this.autofocus = value === '' || !!value;
    }
    ngAfterViewInit() {
        if (this.autofocus) {
            this.focus();
        }
    }
    focus() {
        this.service.focus(this.el);
    }
}
FocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusDirective, deps: [{ token: FocusService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
FocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FocusDirective, selector: "[bbFocus]", inputs: { bbFocus: "bbFocus" }, exportAs: ["bbFocus"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbFocus]',
                    exportAs: 'bbFocus',
                }]
        }], ctorParameters: function () { return [{ type: FocusService }, { type: i0.ElementRef }]; }, propDecorators: { bbFocus: [{
                type: Input
            }] } });

class FocusModule {
}
FocusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FocusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusModule, declarations: [FocusDirective], imports: [CommonModule], exports: [FocusDirective] });
FocusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusModule, providers: [FocusService], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [FocusDirective],
                    providers: [FocusService],
                    exports: [FocusDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { FocusDirective, FocusModule };
//# sourceMappingURL=backbase-ui-ang-focus.js.map
