{"version":3,"file":"backbase-ui-ang-amount.js","sources":["../../../../libs/ui-ang/amount/amount.component.ts","../../../../libs/ui-ang/amount/amount.component.html","../../../../libs/ui-ang/amount/amount.module.ts","../../../../libs/ui-ang/amount/backbase-ui-ang-amount.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, Inject, Input, LOCALE_ID, OnChanges } from '@angular/core';\nimport {\n  getCurrencySymbol,\n  getLocaleNumberFormat,\n  getLocaleNumberSymbol,\n  getNumberOfCurrencyDigits,\n  NumberFormatStyle,\n  NumberSymbol,\n} from '@angular/common';\n\nimport BigNumber from 'bignumber.js';\n\ninterface AmountConfiguration {\n  currencyFormat: string;\n  decimalFormat: string;\n  percentFormat: string;\n  decimalSymbol: string;\n  groupSymbol: string;\n  minusSymbol: string;\n  plusSymbol: string;\n  percentSymbol: string;\n  currencyGroupSymbol: string;\n  currencyDecimalSymbol: string;\n}\n\n/**\n * @name AmountComponent\n *\n * @description\n * Component for representing amount in currency format .\n *\n * @dynamic (to suppress error with resolving statics declarations during compilation)\n *\n * @a11y\n * The amount component doesn't provide any specific properties for accessibility. But handles accessibility internally.\n *\n */\n@Component({\n  selector: 'bb-amount-ui',\n  templateUrl: './amount.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmountComponent implements OnChanges {\n  private static readonly placeholder = '{{}}';\n  private static readonly templates = {\n    sign: `<span class=\"sign\">${AmountComponent.placeholder}</span>`,\n    currency: `<span class=\"symbol\">${AmountComponent.placeholder}</span>`,\n    integer: `<span class=\"integer\">${AmountComponent.placeholder}</span>`,\n    separator: `<span class=\"decimal-separator\">${AmountComponent.placeholder}</span>`,\n    decimals: `<span class=\"decimals\">${AmountComponent.placeholder}</span>`,\n    percent: `<span class=\"percent\">${AmountComponent.placeholder}</span>`,\n  };\n  private static readonly abbreviationConfig = {\n    minAmount: 100000,\n    suffixes: ['K', 'M', 'B', 'T'],\n  };\n  private static readonly maxSafeIntegerLength = Number.MAX_SAFE_INTEGER.toString().length;\n  private static localeConfig: AmountConfiguration;\n\n  /**\n   * Determines currency type.\n   * If nothing provided, wouldn't be displayed.\n   */\n  @Input() currency = '';\n\n  /**\n   * If \"true\" and amount is positive adds plus sign at the beginning.\n   * Default value false.\n   */\n  @Input() showPlusSign = false;\n\n  /**\n   * Whether currency local should be transformed to symbol.\n   * Default value true.\n   */\n  @Input() mapCurrency = true;\n\n  /**\n   * Whether percent symbol should be shown.\n   * Default value false.\n   */\n  @Input() showPercent = false;\n\n  /**\n   * Whether abbreviation should be applied.\n   * Default value false.\n   */\n  @Input() abbreviate = false;\n\n  /**\n   * Overrides amount of decimals places to display.\n   * Default value undefined, which will use currency default amount of decimals\n   */\n  @Input() decimalPlaces: number | undefined;\n\n  /**\n   * Whether to display trailing zeroes.\n   * Default value true\n   */\n  @Input() trailingZeroes = true;\n\n  /**\n   * Receive amount in string format and converts into a floating-point number.\n   */\n  @Input() amount!: string | number;\n\n  abbreviationSuffix?: string;\n  amountTemplate?: string;\n\n  private _amountValue = new BigNumber(NaN);\n  private groupSymbol!: string;\n  private decimalSymbol!: string;\n  private numberFormat!: BigNumber.Format;\n\n  constructor(@Inject(LOCALE_ID) private readonly locale: string) {\n    this.setupConfiguration();\n  }\n\n  ngOnChanges() {\n    if (this.isUnsafeAmount) {\n      console.warn('[bb-amount]: the amount was passed as a non safe number, the display can be wrong');\n    }\n\n    this.updateNumberFormat();\n\n    this._amountValue = new BigNumber(this.amount);\n    this.amountTemplate = this.getAmountTemplate(this.transformedAmount);\n  }\n\n  get isNumeric(): boolean {\n    return !this._amountValue.isNaN();\n  }\n\n  private get isPositive(): boolean {\n    return this._amountValue.isPositive();\n  }\n\n  private get isZero(): boolean {\n    return this._amountValue.isZero();\n  }\n\n  private get isUnsafeAmount(): boolean {\n    return (\n      typeof this.amount === 'number' &&\n      (this.amount > Number.MAX_SAFE_INTEGER ||\n        this.amount.toString().replace(/\\D/, '').length > AmountComponent.maxSafeIntegerLength)\n    );\n  }\n\n  private get configDecimalPlaces(): number {\n    return this.decimalPlaces === undefined ? getNumberOfCurrencyDigits(this.currency) : this.decimalPlaces;\n  }\n\n  /**\n   * Currency format depends on locale and could be represented for negative and\n   * positive values differently (separated by `;` symbol).\n   * See more http://cldr.unicode.org/translation/numbers-currency/number-patterns\n   *\n   * Example:\n   * en-NL locale: '¤ #,##0.00;¤ -#,##0.00'\n   */\n  private get amountFormat(): string {\n    const { currencyFormat, decimalFormat, percentFormat, minusSymbol, plusSymbol } = AmountComponent.localeConfig;\n    let formatPattern = decimalFormat;\n\n    if (this.showPercent) {\n      formatPattern = percentFormat;\n    }\n\n    if (this.currency) {\n      if (this.showPercent) {\n        console.warn(\n          '[bb-amount]: wrong configuration, `currency` and `showPercent` were set at the same time, therefore showPercent format will be ignored',\n        );\n      }\n\n      formatPattern = currencyFormat;\n    }\n\n    const [generalPattern, negativePattern] = formatPattern.split(';');\n\n    if (this.isZero) {\n      return generalPattern;\n    } else if (this.isPositive) {\n      return this.showPlusSign ? plusSymbol + generalPattern : generalPattern;\n    } else {\n      return negativePattern || minusSymbol + generalPattern;\n    }\n  }\n\n  private get transformedAmount(): string {\n    const positiveAmount = this._amountValue.abs();\n    const configDecimalPlaces = this.configDecimalPlaces;\n    const shouldAbbreviate =\n      this.abbreviate && positiveAmount.isGreaterThanOrEqualTo(AmountComponent.abbreviationConfig.minAmount);\n\n    /**\n     * Example:\n     *\n     * {@link groupSymbol} = ','\n     * {@link decimalSymbol} = '.'\n     * {@link configDecimalPlaces} = '2'\n     *\n     * Here how regexp source looks line with config above: ([\\d,]+[.]\\d{2}).*\n     * This regexp has two selections:\n     * - selection for the group `([\\d,]+[.]\\d{2})` to match the decimal precision (no rounding)\n     * - and full string selection `.*` (used to replace full string with the group)\n     *\n     * REGEXP GROUP MATCHES ONLY THE AMOUNTS THAT HAVE TO BE UPDATED (TRIMMED)\n     *\n     * There are the cases when it does not have an effect, and it means that amount is already in appropriate format\n     */\n    const regexp = new RegExp(`([\\\\d${this.groupSymbol}]+[${this.decimalSymbol}]\\\\d{${configDecimalPlaces}}).*`, 'g');\n    const amount = shouldAbbreviate ? this.getAbbreviatedAmount(positiveAmount) : positiveAmount;\n    const amountDecimalPlaces = amount.decimalPlaces();\n    // In order to keep the precision keeping the original decimal places and replace with regexp\n    const formattedAmount = amount\n      .toFormat(amountDecimalPlaces, BigNumber.ROUND_CEIL, this.numberFormat)\n      .replace(regexp, '$1');\n\n    return this.getAmountWithZeroPaddings(formattedAmount, configDecimalPlaces, amountDecimalPlaces);\n  }\n\n  private getAmountWithZeroPaddings(\n    formattedAmount: string,\n    configDecimalPlaces: number,\n    amountDecimalPlaces: number,\n  ): string {\n    if (!this.trailingZeroes || amountDecimalPlaces >= configDecimalPlaces) {\n      return formattedAmount;\n    }\n\n    const amountOfZeros = configDecimalPlaces - amountDecimalPlaces;\n    let stringToAppend = '0'.repeat(amountOfZeros);\n\n    if (!formattedAmount.includes(this.decimalSymbol)) {\n      stringToAppend = this.decimalSymbol + stringToAppend;\n    }\n\n    return formattedAmount + stringToAppend;\n  }\n\n  private setupConfiguration() {\n    if (!AmountComponent.localeConfig) {\n      AmountComponent.localeConfig = {\n        currencyFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Currency),\n        decimalFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Decimal),\n        percentFormat: getLocaleNumberFormat(this.locale, NumberFormatStyle.Percent),\n        decimalSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.Decimal),\n        groupSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.Group),\n        currencyGroupSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup),\n        currencyDecimalSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal),\n        minusSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.MinusSign),\n        plusSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.PlusSign),\n        percentSymbol: getLocaleNumberSymbol(this.locale, NumberSymbol.PercentSign),\n      };\n    }\n  }\n\n  private updateNumberFormat(): void {\n    const { decimalSymbol, currencyDecimalSymbol, groupSymbol, currencyGroupSymbol } = AmountComponent.localeConfig;\n\n    this.groupSymbol = this.currency ? currencyGroupSymbol : groupSymbol;\n    this.decimalSymbol = this.currency ? currencyDecimalSymbol : decimalSymbol;\n    this.numberFormat = {\n      groupSeparator: this.groupSymbol,\n      decimalSeparator: this.decimalSymbol,\n      groupSize: 3,\n    };\n  }\n\n  /**\n   * Converts original amount to abbreviated\n   * Max abbreviated suffix value is 'T' (trillion) see {@link AmountComponent.abbreviationConfig}\n   */\n  private getAbbreviatedAmount(positiveAmount: BigNumber): BigNumber {\n    const suffixes = AmountComponent.abbreviationConfig.suffixes;\n    const config = { suffix: suffixes[0], amount: positiveAmount.shiftedBy(-3) };\n\n    for (let i = 1; i < suffixes.length; i++) {\n      if (!config.amount.isGreaterThanOrEqualTo(1000)) {\n        break;\n      }\n\n      config.suffix = suffixes[i];\n      config.amount = config.amount.shiftedBy(-3);\n    }\n\n    this.abbreviationSuffix = config.suffix;\n\n    return config.amount;\n  }\n\n  private getAmountTemplate(amount: string): string {\n    const { percentSymbol, minusSymbol, plusSymbol } = AmountComponent.localeConfig;\n    const signSymbol = this.isPositive ? plusSymbol : minusSymbol;\n    const currencySymbol = this.mapCurrency ? getCurrencySymbol(this.currency, 'wide', this.locale) : this.currency;\n\n    return this.amountFormat\n      .replace(signSymbol, this.fillTemplate('sign', signSymbol))\n      .replace('¤', this.fillTemplate('currency', currencySymbol))\n      .replace('%', this.fillTemplate('percent', percentSymbol))\n      .replace(/[#0,.]+/g, this.wrapAmount(amount));\n  }\n\n  private wrapAmount(amount: string): string {\n    const [integer, decimals] = amount.split(this.decimalSymbol);\n\n    return (\n      this.fillTemplate('integer', integer) +\n      (decimals ? this.fillTemplate('separator', this.decimalSymbol) + this.fillTemplate('decimals', decimals) : '')\n    );\n  }\n\n  private fillTemplate(templateKey: keyof typeof AmountComponent.templates, value: string): string {\n    return AmountComponent.templates[templateKey].replace(AmountComponent.placeholder, value);\n  }\n}\n","<span *ngIf=\"isNumeric\" data-role=\"bb-amount-value\" class=\"bb-amount\">\n  <span [innerHtml]=\"amountTemplate\" class=\"amount bb-amount__value\" data-role=\"bb-amount-value__amount\"></span>\n  <ng-container *ngIf=\"abbreviationSuffix\"\n    >&nbsp;<span class=\"sr-only\" i18n=\"Amount abbreviation long suffix@@bb-amount-ui.abbr.long\" #abbrTitle\n      >{ abbreviationSuffix, select, K {Thousand} M {Million} B {Billion} T {Trillion} }</span\n    ><abbr\n      [title]=\"abbrTitle.textContent\"\n      aria-hidden=\"true\"\n      data-role=\"bb-amount-value__abbreviation\"\n      i18n=\"Amount abbreviation short suffix@@bb-amount-ui.abbr.short\"\n      class=\"abbreviation bb-amount__abbreviation\"\n      >{ abbreviationSuffix, select, K {K} M {M} B {B} T {T} }</abbr\n    >\n  </ng-container>\n</span>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { DeprecationsService } from '@backbase/foundation-ang/future';\n\nimport { AmountComponent } from './amount.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AmountComponent],\n  exports: [AmountComponent],\n})\nexport class AmountModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}