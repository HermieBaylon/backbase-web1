import * as i0 from '@angular/core';
import { EventEmitter, Directive, Output, HostListener, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @name KeyboardClickDirective
 *
 * @description
 * Directive that add click/keydown.enter/keydown.space events on element
 * Used for adding accessibility(tab navigation events) for element
 */
class KeyboardClickDirective {
    constructor(elem) {
        this.elem = elem;
        /**
         * Stream that should be fired on click/keydown.enter/keydown.space
         */
        this.bbKeyboardClick = new EventEmitter();
        this.emit$ = new Subject();
        this.gc$ = new Subject();
        // Fix for frequent keydown event generation for spacebar in FF and IE
        this.emit$.pipe(throttleTime(100), takeUntil(this.gc$)).subscribe(this.bbKeyboardClick);
    }
    onActionKeyPressed($event) {
        // Check if the selected element is the current element itself and not its nested selectable children
        if (this.elem.nativeElement !== $event.target) {
            return;
        }
        this.emit$.next($event);
    }
    onClicked($event) {
        this.emit$.next($event);
    }
    ngOnDestroy() {
        this.gc$.next();
    }
}
KeyboardClickDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
KeyboardClickDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: { bbKeyboardClick: "bbKeyboardClick" }, host: { listeners: { "keydown.enter": "onActionKeyPressed($event)", "keydown.space": "onActionKeyPressed($event)", "click": "onClicked($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbKeyboardClick]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { bbKeyboardClick: [{
                type: Output
            }], onActionKeyPressed: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }], onClicked: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class KeyboardClickModule {
}
KeyboardClickModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
KeyboardClickModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickModule, declarations: [KeyboardClickDirective], imports: [CommonModule], exports: [KeyboardClickDirective] });
KeyboardClickModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [KeyboardClickDirective],
                    exports: [KeyboardClickDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { KeyboardClickDirective, KeyboardClickModule };
//# sourceMappingURL=backbase-ui-ang-keyboard-click-directive.js.map
