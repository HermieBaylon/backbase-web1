import * as i2 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Directive, EventEmitter, Component, ContentChild, Input, Output, Inject, ViewChild, Optional, NgModule } from '@angular/core';
import * as i4 from '@angular/cdk/a11y';
import { A11yModule } from '@angular/cdk/a11y';
import * as i1$1 from '@ng-bootstrap/ng-bootstrap';
import { NgbModalModule } from '@ng-bootstrap/ng-bootstrap';
import { getKeyCode, KEY_CODES } from '@backbase/ui-ang/util';
import * as i1 from '@backbase/ui-ang/services';
import * as i3 from '@backbase/foundation-ang/future';

class CustomModalHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomModalHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomModalHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomModalHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomModalHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomModalHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class ModalHeaderComponent {
    constructor(domAttrService) {
        this.domAttrService = domAttrService;
        this.hostRef = this;
        /**
         * Title text for the modal header. Defaults to empty string.
         */
        this.title = '';
        /**
         * The event emitted when the modal header close button is clicked.
         */
        this.close = new EventEmitter();
        this.showClose = false;
        this.headerId = this.domAttrService.generateId();
    }
    ngOnInit() {
        this.showClose = this.close.observers.length > 0;
    }
    onClose() {
        this.close.emit();
    }
}
ModalHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalHeaderComponent, deps: [{ token: i1.DomAttributesService }], target: i0.ɵɵFactoryTarget.Component });
ModalHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: { title: "title" }, outputs: { close: "close" }, queries: [{ propertyName: "customModalHeader", first: true, predicate: CustomModalHeaderDirective, descendants: true, static: true }], ngImport: i0, template: "<div class=\"modal-header\" [attr.id]=\"headerId\" [attr.data-role]=\"'modal-header'\">\n  <ng-container *ngIf=\"customModalHeader; else bbDefaultModalHeader\">\n    <ng-container *ngTemplateOutlet=\"customModalHeader?.templateRef; context: hostRef\"> </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #bbDefaultModalHeader>\n  <h3 class=\"modal-title\" [innerText]=\"title\"></h3>\n  <button *ngIf=\"showClose\" class=\"btn btn-unstyled\" (click)=\"onClose()\">\n    <i class=\"bicon bicon-clear bb-icon bb-icon--clear\" aria-hidden=\"true\"></i>\n  </button>\n</ng-template>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-modal-header-ui',
                    templateUrl: './modal-header.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }]; }, propDecorators: { customModalHeader: [{
                type: ContentChild,
                args: [CustomModalHeaderDirective, { static: true }]
            }], title: [{
                type: Input
            }], close: [{
                type: Output
            }] } });

/**
 * @name ModalComponent
 *
 * @description
 * Component that displays a modal window.
 */
class ModalComponent {
    constructor(modalService, renderer, domAttrService, depricatedService, 
    // cannot use type `Document` due to compilation issues caused by `strictMetadataEmit`
    document) {
        this.modalService = modalService;
        this.renderer = renderer;
        this.domAttrService = domAttrService;
        this.depricatedService = depricatedService;
        this.document = document;
        this.id = this.domAttrService.generateId();
        /**
         * The flag to show the dialog window.  Defaults to 'false'.
         */
        this.isOpen = false;
        /**
         * Dialog options. Defaults to empty object.
         */
        this.modalOptions = {};
        /**
         * The event that's fired after confirm button is pressed. Can be used with
         * (click)="dialogRef.onConfirm()" where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
         */
        this.confirm = new EventEmitter();
        /**
         * The event that's fired after cancel button is pressed. Can be used with
         * (click)="dialogRef.onCancel()" where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
         */
        this.cancel = new EventEmitter();
        /**
         * Used for two way binding with the isOpen Input. If used, backdrop
         * and esc dismiss cases will be handled automatically.
         */
        this.isOpenChange = new EventEmitter();
        this.emitConfirm = true;
    }
    ngOnChanges() {
        if (this.isOpen) {
            this.setConfirm(true);
            // needs to be inside setTimeout due to the
            // https://github.com/angular/angular/issues/15634
            setTimeout(() => {
                const headerId = this.modalHeader ? this.modalHeader.headerId : '';
                this.ariaLabelledby = this.ariaLabelledby || headerId;
                this.modalOptions.ariaDescribedBy = this.ariaDescribedby
                    ? this.ariaDescribedby
                    : this.modalOptions.ariaDescribedBy;
                this.modalOptions.ariaLabelledBy = this.ariaLabelledby ? this.ariaLabelledby : this.modalOptions.ariaLabelledBy;
                this.modalRef = this.modalService.open(this.modalContent, this.modalOptions);
                this.modalRef.result.then((result) => {
                    if (this.emitConfirm) {
                        this.confirm.emit(result);
                    }
                }, (reason) => this.cancel.emit(this.getDismissReason(reason)));
            }, 0);
            // remove role=document from dialog, because we need have role=dialog, bootstrap accessibility bug
            setTimeout(() => {
                const modalContent = this.document.getElementsByClassName('modal-dialog');
                const modal = this.document.getElementsByClassName('modal');
                modalContent === null || modalContent === void 0 ? void 0 : modalContent[0].removeAttribute('role');
                modal === null || modal === void 0 ? void 0 : modal[0].scrollTo(0, 0);
            }, 0);
        }
        else if (this.modalRef) {
            this.setConfirm(false);
            this.modalRef.close();
        }
    }
    onElementViewInit(el) {
        this.copyAriaAttrsToElement(el);
    }
    copyAriaAttrsToElement(el) {
        this.depricatedService.logDeprecatedFeature('`copyAriaAttrsToElement` of `ModalComponent` is deprecated.');
        const headerId = this.modalHeader ? this.modalHeader.headerId : '';
        const dialogHostNativeElement = this.modalRef['_windowCmptRef'].instance._elRef.nativeElement;
        if (headerId && !this.modalOptions.ariaLabelledBy) {
            this.renderer.setAttribute(dialogHostNativeElement, 'aria-labelledby', headerId);
        }
        if (this.ariaDescribedby && !this.modalOptions.ariaDescribedBy) {
            this.renderer.setAttribute(dialogHostNativeElement, 'aria-describedby', this.ariaDescribedby);
        }
    }
    getDismissReason(reason) {
        this.isOpenChange.emit(false);
        return reason;
    }
    dismissModal(reason) {
        if (this.modalRef)
            this.modalRef.dismiss(reason);
    }
    closeModal(reason) {
        if (this.modalRef)
            this.modalRef.close(reason);
    }
    setConfirm(flag) {
        this.emitConfirm = flag;
    }
    ngOnDestroy() {
        this.closeModal();
    }
    trapKeyEvent(event) {
        if (getKeyCode(event) !== KEY_CODES.ESCAPE) {
            event.stopPropagation();
        }
    }
}
ModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalComponent, deps: [{ token: i1$1.NgbModal }, { token: i0.Renderer2 }, { token: i1.DomAttributesService }, { token: i3.DeprecationsService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
ModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModalComponent, selector: "bb-modal-ui", inputs: { isOpen: "isOpen", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], modalOptions: "modalOptions" }, outputs: { confirm: "confirm", cancel: "cancel", isOpenChange: "isOpenChange" }, queries: [{ propertyName: "modalHeader", first: true, predicate: ModalHeaderComponent, descendants: true }], viewQueries: [{ propertyName: "modalContent", first: true, predicate: ["modalContent"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<ng-template #modalContent let-close=\"close\">\n  <div\n    class=\"modal-content-container\"\n    (keydown)=\"trapKeyEvent($event)\"\n    (keyup)=\"trapKeyEvent($event)\"\n    cdkTrapFocus\n    [cdkTrapFocusAutoCapture]=\"true\"\n    (bbElementViewInit)=\"onElementViewInit($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return i4.CdkTrapFocus; }), selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { type: i0.forwardRef(function () { return ElementViewInitDirective; }), selector: "[bbElementViewInit]", outputs: ["bbElementViewInit"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-modal-ui',
                    templateUrl: './modal.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.NgbModal }, { type: i0.Renderer2 }, { type: i1.DomAttributesService }, { type: i3.DeprecationsService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { isOpen: [{
                type: Input
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], modalOptions: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }], isOpenChange: [{
                type: Output
            }], modalContent: [{
                type: ViewChild,
                args: ['modalContent', { static: true }]
            }], modalHeader: [{
                type: ContentChild,
                args: [ModalHeaderComponent]
            }] } });
class ElementViewInitDirective {
    constructor(elem) {
        this.elem = elem;
        this.bbElementViewInit = new EventEmitter();
    }
    ngAfterViewInit() {
        this.bbElementViewInit.emit(this.elem);
    }
}
ElementViewInitDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ElementViewInitDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ElementViewInitDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ElementViewInitDirective, selector: "[bbElementViewInit]", outputs: { bbElementViewInit: "bbElementViewInit" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ElementViewInitDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbElementViewInit]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { bbElementViewInit: [{
                type: Output
            }] } });

class CustomModalFooterDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomModalFooterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomModalFooterDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomModalFooterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomModalFooterDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomModalFooter]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class ModalFooterComponent {
    constructor(modal) {
        this.modal = modal;
        this.hostRef = this;
        /**
         * The event that's fired after confirm button is pressed. Can be used with (click)="dialogRef.onConfirm()"
         * where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
         */
        this.confirm = new EventEmitter();
        /**
         * The event that's fired after cancel button is pressed. Can be used with (click)="dialogRef.onCancel()"
         * where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
         */
        this.cancel = new EventEmitter();
    }
    onCancel($event) {
        if (this.modal) {
            this.modal.dismissModal($event);
        }
        else {
            this.cancel.emit($event);
        }
    }
    onConfirm($event) {
        if (this.modal) {
            this.modal.closeModal($event);
        }
        else {
            this.confirm.emit($event);
        }
    }
}
ModalFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalFooterComponent, deps: [{ token: ModalComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ModalFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: { confirmText: "confirmText", cancelText: "cancelText" }, outputs: { confirm: "confirm", cancel: "cancel" }, queries: [{ propertyName: "customModalFooter", first: true, predicate: CustomModalFooterDirective, descendants: true, static: true }], ngImport: i0, template: "<div class=\"modal-footer\" [attr.data-role]=\"'modal-footer'\">\n  <ng-container *ngIf=\"customModalFooter; else bbDefaultModalFooter\">\n    <ng-container *ngTemplateOutlet=\"customModalFooter?.templateRef; context: hostRef\"> </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #bbDefaultModalFooter>\n  <div class=\"bb-button-bar\">\n    <button\n      (click)=\"onConfirm()\"\n      class=\"bb-button-bar__button btn btn-primary btn-md\"\n      type=\"button\"\n      data-role=\"confirm\"\n    >\n      <ng-container\n        *ngIf=\"!confirmText\"\n        i18n=\"Accept|Agree with the message presented in the dialog @@bb-dialog-ui.yes\"\n      >\n        Confirm\n      </ng-container>\n      <ng-container *ngIf=\"confirmText\">{{ confirmText }}</ng-container>\n    </button>\n    <button\n      (click)=\"onCancel()\"\n      class=\"bb-button-bar__button btn btn-secondary btn-md\"\n      type=\"button\"\n      data-role=\"cancel\"\n    >\n      <ng-container\n        *ngIf=\"!cancelText\"\n        i18n=\"Reject|Do not agree with the message presented in the dialog @@bb-dialog-ui.no\"\n      >\n        Cancel\n      </ng-container>\n      <ng-container *ngIf=\"cancelText\">{{ cancelText }}</ng-container>\n    </button>\n  </div>\n</ng-template>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalFooterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-modal-footer-ui',
                    templateUrl: './modal-footer.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ModalComponent, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { customModalFooter: [{
                type: ContentChild,
                args: [CustomModalFooterDirective, { static: true }]
            }], confirmText: [{
                type: Input
            }], cancelText: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }] } });

class CustomModalBodyDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomModalBodyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomModalBodyDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomModalBodyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomModalBodyDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomModalBody]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class ModalBodyComponent {
    constructor() {
        this.hostRef = this;
    }
}
ModalBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalBodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ModalBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModalBodyComponent, selector: "bb-modal-body-ui", queries: [{ propertyName: "customModalBody", first: true, predicate: CustomModalBodyDirective, descendants: true, static: true }], ngImport: i0, template: "<div class=\"modal-body\" [attr.data-role]=\"'modal-body'\">\n  <ng-container *ngIf=\"customModalBody; else bbDefaultModalBody\">\n    <ng-container *ngTemplateOutlet=\"customModalBody?.templateRef; context: hostRef\"> </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #bbDefaultModalBody> Custom Body </ng-template>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalBodyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-modal-body-ui',
                    templateUrl: './modal-body.component.html',
                }]
        }], propDecorators: { customModalBody: [{
                type: ContentChild,
                args: [CustomModalBodyDirective, { static: true }]
            }] } });

const components = [
    ModalComponent,
    ModalFooterComponent,
    CustomModalFooterDirective,
    ModalBodyComponent,
    CustomModalBodyDirective,
    ModalHeaderComponent,
    CustomModalHeaderDirective,
];
class ModalModule {
}
ModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalModule, declarations: [ModalComponent,
        ModalFooterComponent,
        CustomModalFooterDirective,
        ModalBodyComponent,
        CustomModalBodyDirective,
        ModalHeaderComponent,
        CustomModalHeaderDirective, ElementViewInitDirective], imports: [CommonModule, NgbModalModule, A11yModule], exports: [ModalComponent,
        ModalFooterComponent,
        CustomModalFooterDirective,
        ModalBodyComponent,
        CustomModalBodyDirective,
        ModalHeaderComponent,
        CustomModalHeaderDirective] });
ModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalModule, imports: [[CommonModule, NgbModalModule, A11yModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbModalModule, A11yModule],
                    declarations: [...components, ElementViewInitDirective],
                    exports: [...components],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CustomModalBodyDirective, CustomModalFooterDirective, CustomModalHeaderDirective, ModalBodyComponent, ModalComponent, ModalFooterComponent, ModalHeaderComponent, ModalModule };
//# sourceMappingURL=backbase-ui-ang-modal.js.map
