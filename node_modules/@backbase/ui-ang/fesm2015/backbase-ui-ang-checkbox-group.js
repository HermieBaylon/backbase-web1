import * as i0 from '@angular/core';
import { forwardRef, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import * as i2 from '@angular/forms';
import { FormGroup, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { filter, takeUntil } from 'rxjs/operators';
import { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import { BehaviorSubject, Subject, combineLatest } from 'rxjs';
import * as i1 from '@backbase/foundation-ang/future';
import * as i3 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';

/**
 * @name CheckboxGroupComponent
 *
 * @description
 * Stores a state, determines it and displays a parent checkbox for a checkboxes group.
 * Required module(s): FormsModule
 */
class CheckboxGroupComponent extends InputBaseComponent {
    constructor(cd, deprecationsService, controlContainer) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        this.controlContainer = controlContainer;
        this.indeterminate = false;
        this.skip$ = new BehaviorSubject(false);
        this.unsubscribe$ = new Subject();
    }
    ngAfterContentChecked() {
        if (this.controlContainer.control && this.control !== this.controlContainer.control) {
            this.control = this.controlContainer.control;
            this.checkState(this.control.value);
            combineLatest(this.control.valueChanges, this.skip$)
                .pipe(filter(([state, skip]) => !skip), takeUntil(this.unsubscribe$))
                .subscribe(([state]) => this.checkState(state));
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    onValueChange() {
        const setValue = (control) => {
            Object.keys(control.value).forEach((key) => control.controls[key] instanceof FormGroup
                ? setValue(control.controls[key])
                : control.controls[key].setValue(this.value));
        };
        if (this.control) {
            this.skip$.next(true);
            setValue(this.control);
            this.skip$.next(false);
        }
        super.onValueChange();
    }
    isDisabled() {
        return (!!this.control &&
            Object.keys(this.control.controls).every((key) => (this.control &&
                this.control.controls &&
                this.control.controls[key] &&
                this.control.controls[key].disabled) ||
                false));
    }
    checkState(state) {
        /**
         * @param arrayHandler - a function to iterate over a tree
         * @description iterates over a tree using an arrayHandler function
         * @return a function which recursively calls arrayHandler over a tree
         */
        const checkGroup = (arrayHandler) => {
            /**
             * @param value - primitive or tree data structure
             * @return
             * if input value is a primitive - returns value, casted to boolean,
             * if input value is a tree - returns result of recursively calling arrayHandler function over a tree
             */
            const checkValue = (value) => typeof value === 'object' && value !== null
                ? arrayHandler.call(Object.keys(value).map((key) => value[key]), checkValue)
                : !!value;
            return (value) => arrayHandler.call(Object.keys(value).map((key) => value[key]), checkValue);
        };
        const isAllChecked = checkGroup(Array.prototype.every)(state);
        const isSomeChecked = checkGroup(Array.prototype.some)(state);
        this.indeterminate = isSomeChecked && !isAllChecked;
        this.writeValue(isAllChecked);
    }
}
CheckboxGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }, { token: i2.ControlContainer }], target: i0.ɵɵFactoryTarget.Component });
CheckboxGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CheckboxGroupComponent, selector: "bb-checkbox-group-ui", providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => CheckboxGroupComponent),
            multi: true,
        },
    ], usesInheritance: true, ngImport: i0, template: "<bb-input-checkbox-ui\n  [label]=\"label\"\n  [aria-label]=\"(!label && ariaLabel) || null\"\n  [(indeterminate)]=\"indeterminate\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"isDisabled()\"\n  (change)=\"onValueChange()\"\n>\n  <ng-content *ngIf=\"!label\"></ng-content>\n</bb-input-checkbox-ui>\n", components: [{ type: i3.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-checkbox-group-ui',
                    templateUrl: './checkbox-group.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => CheckboxGroupComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }, { type: i2.ControlContainer }]; } });

class CheckboxGroupModule {
}
CheckboxGroupModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CheckboxGroupModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupModule, declarations: [CheckboxGroupComponent], imports: [CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule], exports: [CheckboxGroupComponent] });
CheckboxGroupModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupModule, imports: [[CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputCheckboxModule, FormsModule, BaseClassesModule],
                    declarations: [CheckboxGroupComponent],
                    exports: [CheckboxGroupComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CheckboxGroupComponent, CheckboxGroupModule };
//# sourceMappingURL=backbase-ui-ang-checkbox-group.js.map
