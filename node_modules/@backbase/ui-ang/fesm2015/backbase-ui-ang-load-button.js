import * as i0 from '@angular/core';
import { EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2 from '@backbase/ui-ang/button';
import { ButtonComponent, ButtonModule } from '@backbase/ui-ang/button';
import * as i1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';

/**
 * @name LoadButtonComponent
 *
 * @description
 * Component that displays a button with integrated loading indicator.
 * The component counts the next page(from) param. Set enable/disable and loading's delay states
 * of component depend on incoming parametrs.
 */
class LoadButtonComponent extends ButtonComponent {
    constructor(elementRef, renderer) {
        super(elementRef, renderer);
        this.elementRef = elementRef;
        /**
         * This Boolean attribute indicates if loading indicator should be shown instead of button content
         */
        this.isLoading = false;
        /**
         * The page to list from
         */
        this.from = 0;
        /**
         * The number of results per page
         */
        this.size = 0;
        /**
         * The type of the button
         */
        this.circle = false;
        /**
         * The total item count
         */
        this.totalCount = 0;
        /**
         * This emits new load more params to parent component
         */
        this.paramChange = new EventEmitter();
    }
    ngAfterViewInit() {
        this.moveAriaAttributes(this.elementRef.nativeElement, this.buttonComponent && this.buttonComponent.nativeElement);
    }
    isLoadMore() {
        return this.size + this.totalCount + this.from > 0;
    }
    hasMore() {
        return this.from * this.size + this.size < this.totalCount;
    }
    onLoadMore() {
        if (this.hasMore() && !this.isLoading) {
            this.paramChange.emit({
                from: this.from + 1,
            });
        }
    }
}
LoadButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
LoadButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadButtonComponent, selector: "bb-load-button-ui", inputs: { isLoading: "isLoading", from: "from", size: "size", circle: "circle", totalCount: "totalCount" }, outputs: { paramChange: "paramChange" }, viewQueries: [{ propertyName: "buttonComponent", first: true, predicate: ["button"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<button\n  class=\"bb-load-button\"\n  #button\n  bbButton\n  [color]=\"color\"\n  [buttonSize]=\"buttonSize\"\n  [autofocus]=\"autofocus\"\n  [type]=\"type\"\n  [block]=\"block\"\n  [disabled]=\"disabled || (isLoadMore() && !isLoading ? !hasMore() : false)\"\n  (click)=\"isLoadMore() ? onLoadMore() : null\"\n  [circle]=\"circle\"\n>\n  <span [ngClass]=\"{ invisible: isLoading }\" class=\"bb-load-button__content\">\n    <ng-content></ng-content>\n  </span>\n  <bb-loading-indicator-ui\n    *ngIf=\"isLoading\"\n    class=\"bb-load-button__loading-indicator\"\n    loaderSize=\"sm\"\n  ></bb-loading-indicator-ui>\n</button>\n", components: [{ type: i1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-load-button-ui',
                    templateUrl: './load-button.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { isLoading: [{
                type: Input
            }], from: [{
                type: Input
            }], size: [{
                type: Input
            }], circle: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], paramChange: [{
                type: Output
            }], buttonComponent: [{
                type: ViewChild,
                args: ['button', { static: true }]
            }] } });

class LoadButtonModule {
}
LoadButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LoadButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonModule, declarations: [LoadButtonComponent], imports: [CommonModule, ButtonModule, LoadingIndicatorModule], exports: [LoadButtonComponent] });
LoadButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonModule, imports: [[CommonModule, ButtonModule, LoadingIndicatorModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ButtonModule, LoadingIndicatorModule],
                    declarations: [LoadButtonComponent],
                    exports: [LoadButtonComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LoadButtonComponent, LoadButtonModule };
//# sourceMappingURL=backbase-ui-ang-load-button.js.map
