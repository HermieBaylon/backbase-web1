import * as i0 from '@angular/core';
import { Directive, Component, InjectionToken, Optional, Host, Self, Inject, Input, HostListener, NgModule } from '@angular/core';
import { fromEvent, Subject, EMPTY, merge } from 'rxjs';
import { shareReplay, first, debounceTime, takeUntil } from 'rxjs/operators';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { errorMessageAnimation, idListAttr } from '@backbase/ui-ang/util';
import '@angular/localize/init';
import * as i3 from '@angular/forms';

class FormSubmitDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.element = this.elementRef.nativeElement;
        this.submit = fromEvent(this.element, 'submit').pipe(shareReplay({ bufferSize: 1, refCount: true }));
    }
}
FormSubmitDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormSubmitDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
FormSubmitDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FormSubmitDirective, selector: "form[bbFormSubmit]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FormSubmitDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'form[bbFormSubmit]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

let _uniqueId = 0;
/**
 * @name ValidationMessageComponent
 *
 * @description
 * Dynamic component that displays a control validation message dependence on validation.
 */
class ValidationMessageComponent {
    constructor() {
        this.errorId = `bb-error-message-${_uniqueId++}`;
    }
}
ValidationMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationMessageComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ValidationMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ValidationMessageComponent, selector: "bb-validation-message-ui", ngImport: i0, template: "<small @errorMessageAnimation *ngIf=\"text\" [id]=\"errorId\" role=\"alert\" class=\"bb-input-validation-message\">\n  {{ text }}\n</small>\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [errorMessageAnimation] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationMessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-validation-message-ui',
                    templateUrl: 'validation-message.component.html',
                    animations: [errorMessageAnimation],
                }]
        }] });

class ControlErrorContainerDirective {
    constructor(vcr) {
        this.vcr = vcr;
    }
}
ControlErrorContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorContainerDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
ControlErrorContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ControlErrorContainerDirective, selector: "[bbControlErrorContainer]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbControlErrorContainer]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });

const BB_VALIDATION_ERRORS = new InjectionToken('BB_VALIDATION_ERRORS', {
    providedIn: 'root',
    factory: () => defaultFromErrors,
});
const BB_DYNAMIC_VALIDATION_ERROR_TMPL = new InjectionToken('BB_DYNAMIC_VALIDATION_ERROR_TMPL', {
    providedIn: 'root',
    factory: () => ValidationMessageComponent,
});
const defaultFromErrors = {
    invalid: () => $localize `:@@validation-form-invalid-error:Field is invalid`,
    required: () => $localize `:@@validation-form-required-error:Field is required`,
    minlength: ({ requiredLength }) => {
        const singleStr = $localize `:@@validation-form-minlength-error-single:
    Must be shorter then ${requiredLength} character`;
        const multipleStr = $localize `:@@validation-form-minlength-error-multiple:
    Must be shorter then ${requiredLength} characters`;
        return requiredLength === 1 ? singleStr : multipleStr;
    },
    maxlength: ({ requiredLength }) => {
        const singleStr = $localize `:@@validation-form-minlength-error-single:
    Must be at least ${requiredLength} character long`;
        const multipleStr = $localize `:@@validation-form-minlength-error-multiple:
    Must be at least ${requiredLength} characters long`;
        return requiredLength === 1 ? singleStr : multipleStr;
    },
    min: ({ min }) => $localize `:@@validation-form-min-error:Expect value to be bigger than ${min}`,
    max: ({ max }) => $localize `:@@validation-form-max-error:Expect value to be less than ${max}`,
    email: () => $localize `:@@validation-form-email-error:Not a valid email`,
};

class ValidationErrorsDirective {
    constructor(form, controlErrorContainer, control, errors, errorTmpl, resolver, vcr, hostElem, renderer) {
        this.form = form;
        this.controlErrorContainer = controlErrorContainer;
        this.control = control;
        this.errors = errors;
        this.errorTmpl = errorTmpl;
        this.resolver = resolver;
        this.vcr = vcr;
        this.hostElem = hostElem;
        this.renderer = renderer;
        this.onBlur = new Subject();
        this.destroy = new Subject();
        this.ariaAttributeName = 'aria-describedby';
        /**
         * Custom error labels object.
         *
         * Use only if you need to set custom error labels for specific control.
         * To specify custom error labels for entire form use BB_VALIDATION_ERRORS InjectionToken.
         *
         * @default `BB_VALIDATION_ERRORS`.
         */
        this.errorLabels = {};
        /**
         * Custom function to specify when errors should be shown.
         * By default will be shown when control is invalid.
         */
        this.showError = this.showErrorDefault;
        /**
         * Selector to indicate the control in which `aria-describedby` should be set.
         */
        this.inputSelector = '.form-control';
        /**
         * Input label
         */
        this.label = null;
        /**
         * Custom component for error message.
         *
         * Use only if you need to set custom component for specific control.
         * To specify custom component for all form errors use BB_DYNAMIC_ERROR_TMPL InjectionToken.
         *
         * @default `BB_DYNAMIC_ERROR_TMPL`.
         */
        this.errorComponent = this.errorTmpl;
        this.submit = this.form ? this.form.submit : EMPTY;
        if (!this.control) {
            throw Error('bbFormControl must contain a NgControl.');
        }
    }
    onElBlur() {
        this.onBlur.next();
    }
    ngOnInit() {
        const controlChanges = this.control.valueChanges ? this.control.valueChanges : EMPTY;
        merge(controlChanges, this.submit, this.onBlur.pipe(first()))
            .pipe(debounceTime(100), takeUntil(this.destroy))
            .subscribe(() => this.manageErrors());
    }
    ngOnDestroy() {
        this.destroy.next();
        this.destroy.complete();
    }
    manageErrors() {
        var _a, _b, _c;
        const controlErrors = this.control.errors;
        if (controlErrors && this.showError()) {
            const errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);
            const firstKey = Object.keys(controlErrors)[0];
            const getError = errorList[firstKey] || errorList.invalid;
            const text = getError(controlErrors[firstKey]);
            // TODO: add aria-invalid?
            if (((_a = this.ref) === null || _a === void 0 ? void 0 : _a.instance.text) !== text) {
                this.setError(text);
                this.setDescribedById((_b = this.ref) === null || _b === void 0 ? void 0 : _b.instance.errorId);
            }
        }
        else if (this.ref) {
            this.setError('');
            this.removeErrorId((_c = this.ref) === null || _c === void 0 ? void 0 : _c.instance.errorId);
        }
    }
    setDescribedById(id) {
        const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);
        if (targetEl) {
            const existingIds = targetEl.getAttribute(this.ariaAttributeName);
            const attributeVal = idListAttr(id, existingIds);
            if (attributeVal) {
                this.renderer.setAttribute(targetEl, this.ariaAttributeName, attributeVal);
            }
        }
    }
    removeErrorId(id) {
        const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);
        if (targetEl) {
            const existingIds = targetEl.getAttribute(this.ariaAttributeName) || '';
            const cleanIds = (id ? existingIds.replace(id, '') : existingIds).trim();
            if (cleanIds) {
                this.renderer.setAttribute(targetEl, this.ariaAttributeName, cleanIds);
            }
            else {
                this.renderer.removeAttribute(targetEl, this.ariaAttributeName);
            }
        }
    }
    showErrorDefault() {
        return Boolean(this.control.invalid);
    }
    setError(text) {
        var _a;
        if (!this.ref) {
            const container = ((_a = this.controlErrorContainer) === null || _a === void 0 ? void 0 : _a.vcr) || this.vcr;
            const factory = this.resolver.resolveComponentFactory(this.errorComponent);
            this.ref = container.createComponent(factory);
        }
        this.ref.instance.text = text;
        // Setup this properties in case of custom validation error component to give possibility to customise behavior.
        this.ref.instance.control = this.control;
        this.ref.instance.errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);
        this.ref.instance.label = this.label;
        this.ref.changeDetectorRef.detectChanges();
    }
}
ValidationErrorsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationErrorsDirective, deps: [{ token: FormSubmitDirective, host: true, optional: true }, { token: ControlErrorContainerDirective, optional: true }, { token: i3.NgControl, self: true }, { token: BB_VALIDATION_ERRORS }, { token: BB_DYNAMIC_VALIDATION_ERROR_TMPL }, { token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
ValidationErrorsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ValidationErrorsDirective, selector: "[bbFormControl]", inputs: { errorLabels: "errorLabels", showError: "showError", inputSelector: "inputSelector", label: "label", errorComponent: "errorComponent" }, host: { listeners: { "blur": "onElBlur()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationErrorsDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[bbFormControl]',
                }]
        }], ctorParameters: function () { return [{ type: FormSubmitDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: ControlErrorContainerDirective, decorators: [{
                    type: Optional
                }] }, { type: i3.NgControl, decorators: [{
                    type: Self
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_VALIDATION_ERRORS]
                }] }, { type: i0.Type, decorators: [{
                    type: Inject,
                    args: [BB_DYNAMIC_VALIDATION_ERROR_TMPL]
                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { errorLabels: [{
                type: Input
            }], showError: [{
                type: Input
            }], inputSelector: [{
                type: Input
            }], label: [{
                type: Input
            }], errorComponent: [{
                type: Input
            }], onElBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });

const directives = [ValidationErrorsDirective, FormSubmitDirective, ControlErrorContainerDirective];
const components = [ValidationMessageComponent];
class ControlErrorHandlerModule {
}
ControlErrorHandlerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ControlErrorHandlerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerModule, declarations: [ValidationErrorsDirective, FormSubmitDirective, ControlErrorContainerDirective, ValidationMessageComponent], imports: [CommonModule], exports: [ValidationErrorsDirective, FormSubmitDirective, ControlErrorContainerDirective, ValidationMessageComponent] });
ControlErrorHandlerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [...directives, ...components],
                    exports: [...directives, ...components],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BB_DYNAMIC_VALIDATION_ERROR_TMPL, BB_VALIDATION_ERRORS, ControlErrorContainerDirective, ControlErrorHandlerModule, FormSubmitDirective, ValidationErrorsDirective, ValidationMessageComponent };
//# sourceMappingURL=backbase-ui-ang-control-error-handler.js.map
