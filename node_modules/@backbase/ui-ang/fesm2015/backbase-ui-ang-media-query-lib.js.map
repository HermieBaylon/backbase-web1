{"version":3,"file":"backbase-ui-ang-media-query-lib.js","sources":["../../../../libs/ui-ang/media-query-lib/media-query.service.ts","../../../../libs/ui-ang/media-query-lib/media-query.module.ts","../../../../libs/ui-ang/media-query-lib/backbase-ui-ang-media-query-lib.ts"],"sourcesContent":["import { Inject, Injectable, NgZone, Optional } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { switchMap } from 'rxjs/operators';\nimport { from, Observable, of } from 'rxjs';\n\nimport { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';\n\nexport type MediaBreakpoints = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/**\n * @name MediaQueryService\n *\n * @dynamic (to suppress error with resolving Document type during compilation)\n *\n * @description\n * MediaQueryService is a utility for evaluating media queries and reacting to their changing.\n *\n * @example\n * import { MediaQueryService } from '@backbase/foundation-ang/ui';\n *\n * @Component({...})\n * class MyComponent {\n *\n *   constructor(private readonly mediaQueryService: MediaQueryService) {}\n *\n *   // with standard grid breakpoint\n *   readonly isStandardMdMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'md');\n *   // custom value\n *   readonly isCustomMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 500);\n */\n@Injectable()\nexport class MediaQueryService {\n  constructor(\n    @Inject(DOCUMENT) private readonly document: Document,\n    @Optional() private readonly cssVariablesService: CssVariablesService,\n    private readonly ngZone: NgZone,\n  ) {}\n\n  /**\n   * Observe media changes for current window.\n   *\n   * @param value - breakpoint value (could be custom number/standard grid breakpoint)\n   * @param type - breakpoint type\n   */\n  isMediaBreakpointMatches(type: 'max-width' | 'min-width', value: MediaBreakpoints | number): Observable<boolean> {\n    const isCustomBreakpoint = typeof value === 'number';\n\n    if (!isCustomBreakpoint && !this.cssVariablesService) {\n      throw new Error('In order to use media breakpoints, please add provider for CssVariablesService.');\n    }\n\n    const mediaBreakpointValue$ = isCustomBreakpoint\n      ? of(`${value}px`)\n      : from(this.cssVariablesService.getCssVariable(`--breakpoint-${value}`));\n\n    return mediaBreakpointValue$.pipe(\n      switchMap((mediaWidth) => {\n        const mediaQueryList = (this.document.defaultView as Window).matchMedia(`(${type}: ${mediaWidth})`);\n\n        return this.getMediaBreakpoints(mediaQueryList);\n      }),\n    );\n  }\n\n  private getMediaBreakpoints(mediaQueryList: MediaQueryList): Observable<boolean> {\n    return new Observable<boolean>((observer) => {\n      /**\n       *   MediaQueryList inherited form EventTarget in some browsers.\n       *   Therefore methods like `addEventListener` or `removeEventListener` doesn't work in Safari and IE.\n       *   For more details see:\n       *   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility\n       */\n      const isFunctionAvailable = Boolean(mediaQueryList.addEventListener);\n      const mediaListener = ({ matches }: MediaQueryListEvent) => {\n        observer.next(matches);\n\n        /**\n         * Safari and IE does not inherit Event interface.\n         * It means that on media match, event will not be dispatched and Angular will not update UI.\n         * Simulating async event to cover this gap.\n         */\n        if (this.ngZone.isStable) {\n          this.ngZone.run(() => Promise.resolve());\n        }\n      };\n\n      // emit initial match\n      observer.next(mediaQueryList.matches);\n\n      if (isFunctionAvailable) {\n        mediaQueryList.addEventListener('change', mediaListener);\n      } else {\n        mediaQueryList.addListener(mediaListener);\n      }\n\n      return () => {\n        if (isFunctionAvailable) {\n          mediaQueryList.removeEventListener('change', mediaListener);\n        } else {\n          mediaQueryList.removeListener(mediaListener);\n        }\n      };\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';\nimport { MediaQueryService } from './media-query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [CssVariablesService, MediaQueryService],\n})\nexport class MediaQueryModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}