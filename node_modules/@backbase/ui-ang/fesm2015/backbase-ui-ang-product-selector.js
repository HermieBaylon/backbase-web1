import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Input, ViewChild, ContentChildren, HostListener, NgModule } from '@angular/core';
import * as i3 from '@ng-bootstrap/ng-bootstrap';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i1 from '@backbase/foundation-ang/core';
import * as i4 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';

/**
 * @name ProductSelectorComponent
 *
 * @description
 * A dropdown component that displays items in a pre-defined format.
 *
 * @a11y
 * Every items from list in custom templates need have
 * role="option" attribute, for detection by Screen Reader like option.
 *
 * Every items from list in custom templates need have  #listItem,
 * for keyBoard accessibility(navigate with keyUp/keyDown)
 */
class ProductSelectorComponent {
    constructor(deprecationsService) {
        this.deprecationsService = deprecationsService;
        /**
         * Focused item index from product selector list
         */
        this.focusedItemIndex = -1;
        /**
         * State of focus on product selector element
         */
        this.focusState = '';
        /**
         * Open/close state of dropDown menu
         */
        this.isOpen = false;
        /**
         * Whether the dropdown should be closed when clicking one of dropdown items or pressing ESC
         */
        this.autoClose = true;
        /**
         * The relative position where the dropdown menu will be open
         */
        this.position = 'bottom';
        /**
         * Specifies which element the dropdown should be appended to.
         */
        this.container = '';
        this.isIE = navigator.userAgent.indexOf('MSIE ') > -1 || navigator.userAgent.indexOf('Trident/') > -1;
    }
    onKeyEvent(event) {
        if (this.isOpen) {
            switch (this.isIE ? event.keyCode : event.key) {
                case 40:
                case 'ArrowDown':
                    this.focusedItemIndex = Math.min(this.focusedItemIndex + 1, this.listItems.length - 1);
                    this.focusItem();
                    break;
                case 38:
                case 'ArrowUp':
                    this.focusedItemIndex = Math.max(this.focusedItemIndex - 1, 0);
                    this.focusItem();
                    break;
                default:
                    return;
            }
            event.preventDefault();
        }
    }
    close() {
        if (this.bbDropdown && this.autoClose && this.bbDropdown.isOpen()) {
            this.bbDropdown.close();
        }
    }
    open() {
        if (this.bbDropdown && !this.bbDropdown.isOpen()) {
            this.bbDropdown.open();
        }
    }
    onClose() {
        if (this.autoClose) {
            this.close();
            this.dropdownToggle.nativeElement.focus();
        }
    }
    focusItem() {
        this.listItems.forEach((el, index) => {
            if (index === this.focusedItemIndex) {
                el.nativeElement.tabIndex = 0;
                el.nativeElement.focus();
            }
        });
    }
    /**
     * Event handler for change open/close state in dropdown menu
     */
    onOpenChange($event) {
        this.isOpen = $event;
        if (!this.isOpen) {
            this.focusedItemIndex = -1;
        }
    }
    /**
     * Event handler for blur dropdown menu
     */
    onBlur() {
        if (this.bbDropdown && this.bbDropdown.isOpen()) {
            this.bbDropdown.close();
        }
    }
}
ProductSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorComponent, deps: [{ token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
ProductSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: { autoClose: "autoClose", position: "position", container: "container" }, host: { listeners: { "window:keydown": "onKeyEvent($event)" } }, queries: [{ propertyName: "listItems", predicate: ["listItem"] }], viewQueries: [{ propertyName: "bbDropdown", first: true, predicate: ["bbDropdown"], descendants: true, static: true }, { propertyName: "dropdownToggle", first: true, predicate: ["dropdownToggle"], descendants: true }], ngImport: i0, template: "<div class=\"bb-product-selector\">\n  <div\n    ngbDropdown\n    #bbDropdown=\"ngbDropdown\"\n    [autoClose]=\"autoClose\"\n    [container]=\"container\"\n    (blur)=\"onBlur()\"\n    (openChange)=\"onOpenChange($event)\"\n    [placement]=\"position\"\n    class=\"bb-product-selector__dropdown\"\n  >\n    <button\n      ngbDropdownToggle\n      #dropdownToggle\n      bbButton\n      color=\"unstyled\"\n      class=\"bb-product-selector__item\"\n      [attr.data-role]=\"'product-selector-expand-button'\"\n      type=\"button\"\n    >\n      <div class=\"bb-product-selector__item-content\" [attr.data-role]=\"'product-selector-selected-content'\">\n        <ng-content select=\"[bbDropdownToggle]\"></ng-content>\n      </div>\n      <bb-icon-ui cropped class=\"bb-product-selector__icon\" [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n    </button>\n    <div\n      ngbDropdownMenu\n      class=\"bb-product-selector__dropdown-menu-panel\"\n      role=\"menu\"\n      (click)=\"onClose()\"\n      [attr.data-role]=\"'product-selector-dropdown-menu'\"\n    >\n      <div class=\"bb-product-selector__dropdown-menu\">\n        <ng-content select=\"[bbDropdownMenu]\"></ng-content>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i3.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-selector-ui',
                    templateUrl: './product-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.DeprecationsService }]; }, propDecorators: { autoClose: [{
                type: Input
            }], position: [{
                type: Input
            }], container: [{
                type: Input
            }], bbDropdown: [{
                type: ViewChild,
                args: ['bbDropdown', { static: true }]
            }], dropdownToggle: [{
                type: ViewChild,
                args: ['dropdownToggle']
            }], listItems: [{
                type: ContentChildren,
                args: ['listItem']
            }], onKeyEvent: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }] } });

class ProductSelectorModule {
}
ProductSelectorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSelectorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorModule, declarations: [ProductSelectorComponent], imports: [CommonModule, NgbDropdownModule, IconModule, ButtonModule], exports: [ProductSelectorComponent] });
ProductSelectorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorModule, imports: [[CommonModule, NgbDropdownModule, IconModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbDropdownModule, IconModule, ButtonModule],
                    declarations: [ProductSelectorComponent],
                    exports: [ProductSelectorComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ProductSelectorComponent, ProductSelectorModule };
//# sourceMappingURL=backbase-ui-ang-product-selector.js.map
