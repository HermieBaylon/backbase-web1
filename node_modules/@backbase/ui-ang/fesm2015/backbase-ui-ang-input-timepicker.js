import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, forwardRef, Component, Input, HostBinding, ViewChild, NgModule } from '@angular/core';
import * as i4 from '@angular/forms';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i3 from '@ng-bootstrap/ng-bootstrap';
import { NgbTimeAdapter, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { defaultSize, InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import * as i1 from '@backbase/ui-ang/services';
import * as i2 from '@backbase/foundation-ang/future';

class TimepickerStringAdapter extends NgbTimeAdapter {
    fromModel(value) {
        if (value) {
            const [hour, minute, second] = value.split(':').map((str) => parseInt(str, 10));
            return { hour, minute, second };
        }
        return null;
    }
    toModel(time) {
        if (!time) {
            // eslint-disable-next-line
            return null;
        }
        return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}`;
    }
}
TimepickerStringAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimepickerStringAdapter, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
TimepickerStringAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimepickerStringAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimepickerStringAdapter, decorators: [{
            type: Injectable
        }] });

const SIZE_MEDIUM = defaultSize;
const SIZE_SMALL = SIZE_MEDIUM / 2;
const SIZE_LARGE = SIZE_MEDIUM * 2;
const KEYWORD_SMALL = 'small';
const KEYWORD_MEDIUM = 'medium';
const KEYWORD_LARGE = 'large';
/**
 * @name InputTimepickerComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that displays a timepicker.
 */
class InputTimepickerComponent extends InputBaseComponent {
    /**
     * @deprecated since version 4
     */
    constructor(cd, domAttrService, elem, renderer2, deprecationsService) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        this.deprecationsService = deprecationsService;
        /**
         * The number of hours to add/subtract when clicking hour spinners.
         */
        this.hourStep = 1;
        /**
         * Whether to display 12H or 24H mode.
         */
        this.clock = '24h';
        /**
         * The number of minutes to add/subtract when clicking minute spinners.
         */
        this.minuteStep = 1;
        /**
         * If true, the timepicker is readonly and can't be changed.
         */
        this.readonly = false;
        /**
         * If true, it is possible to select seconds.
         */
        this.seconds = false;
        /**
         * The number of seconds to add/subtract when clicking second spinners.
         */
        this.secondStep = 1;
        this.cssClass = 'bb-input-timepicker';
    }
    get meridian() {
        return this.clock === '12h';
    }
    getKeywordBySize(size) {
        if (size <= SIZE_SMALL) {
            return KEYWORD_SMALL;
        }
        else if (size >= SIZE_LARGE) {
            return KEYWORD_LARGE;
        }
        else {
            return KEYWORD_MEDIUM;
        }
    }
    getSizeByKeyword(keyword) {
        const sizeKeywords = {
            [KEYWORD_SMALL]: SIZE_SMALL,
            [KEYWORD_MEDIUM]: SIZE_MEDIUM,
            [KEYWORD_LARGE]: SIZE_LARGE,
        };
        return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;
    }
    validate(control) {
        const value = control.value;
        if (!value) {
            /* eslint-disable-next-line  no-null/no-null */
            return null;
        }
        if (this.min && this.max) {
            const valid = this.min <= value && value <= this.max;
            return valid ? null : { minMaxTime: true };
        }
        else if (this.min) {
            return this.min <= value ? null : { minTime: true };
        }
        else if (this.max) {
            return value <= this.max ? null : { maxTime: true };
        }
        return null;
    }
    ngAfterViewInit() {
        if (!this.ariaLabel && this.inputEl) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl.nativeElement, this.renderer2);
        }
    }
}
InputTimepickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputTimepickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputTimepickerComponent, selector: "bb-input-timepicker-ui", inputs: { hourStep: "hourStep", clock: "clock", minuteStep: "minuteStep", readonly: "readonly", seconds: "seconds", secondStep: "secondStep", min: "min", max: "max", autocomplete: "autocomplete" }, host: { properties: { "attr.class": "this.cssClass" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputTimepickerComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => InputTimepickerComponent),
            multi: true,
        },
        { provide: NgbTimeAdapter, useClass: TimepickerStringAdapter },
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["timepicker"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ngb-timepicker\n  #timepicker\n  id=\"{{ id }}\"\n  class=\"bb-input-timepicker\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [readonlyInputs]=\"readonly\"\n  [disabled]=\"disabled\"\n  [spinners]=\"false\"\n  [hourStep]=\"hourStep\"\n  [meridian]=\"meridian\"\n  [minuteStep]=\"minuteStep\"\n  [seconds]=\"seconds\"\n  [secondStep]=\"secondStep\"\n  [size]=\"getKeywordBySize(size)\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  data-role=\"timepicker\"\n  [attr.autcomplete]=\"autocomplete\"\n>\n</ngb-timepicker>\n", components: [{ type: i3.NgbTimepicker, selector: "ngb-timepicker", inputs: ["meridian", "spinners", "seconds", "hourStep", "minuteStep", "secondStep", "readonlyInputs", "size"] }], directives: [{ type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-timepicker-ui',
                    templateUrl: './input-timepicker.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputTimepickerComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => InputTimepickerComponent),
                            multi: true,
                        },
                        { provide: NgbTimeAdapter, useClass: TimepickerStringAdapter },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.DeprecationsService }]; }, propDecorators: { hourStep: [{
                type: Input
            }], clock: [{
                type: Input
            }], minuteStep: [{
                type: Input
            }], readonly: [{
                type: Input
            }], seconds: [{
                type: Input
            }], secondStep: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], cssClass: [{
                type: HostBinding,
                args: ['attr.class']
            }], inputEl: [{
                type: ViewChild,
                args: ['timepicker']
            }] } });

class InputTimepickerModule {
}
InputTimepickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputTimepickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerModule, declarations: [InputTimepickerComponent], imports: [CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule], exports: [InputTimepickerComponent] });
InputTimepickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerModule, providers: [TimepickerStringAdapter], imports: [[CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule, BaseClassesModule],
                    declarations: [InputTimepickerComponent],
                    exports: [InputTimepickerComponent],
                    providers: [TimepickerStringAdapter],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { InputTimepickerComponent, InputTimepickerModule };
//# sourceMappingURL=backbase-ui-ang-input-timepicker.js.map
