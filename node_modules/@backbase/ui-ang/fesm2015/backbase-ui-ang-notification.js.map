{"version":3,"file":"backbase-ui-ang-notification.js","sources":["../../../../libs/ui-ang/notification/append-to-dom.service.ts","../../../../libs/ui-ang/notification/notification.config.ts","../../../../libs/ui-ang/notification/notification.component.ts","../../../../libs/ui-ang/notification/notification.component.html","../../../../libs/ui-ang/notification/notification.service.ts","../../../../libs/ui-ang/notification/notification.module.ts","../../../../libs/ui-ang/notification/backbase-ui-ang-notification.ts"],"sourcesContent":["import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  Injectable,\n  Injector,\n  Type,\n} from '@angular/core';\nimport { NotificationComponent } from './notification.component';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppendToDomService {\n  constructor(\n    private readonly componentFactoryResolver: ComponentFactoryResolver,\n    private readonly appRef: ApplicationRef,\n    private readonly injector: Injector,\n  ) {}\n\n  appendComponentToRoot(\n    component: Type<NotificationComponent>,\n    autofocus = true,\n    projectables: any[] = [],\n    root: Node = document.body,\n  ): {\n    componentInstance: any;\n    unmountComponent: () => void;\n  } {\n    // 1. Create a component reference from the component\n    const componentRef = this.componentFactoryResolver\n      .resolveComponentFactory(component)\n      .create(this.injector, [projectables]);\n\n    // 2. Attach component to the appRef so that it's inside the ng component tree\n    this.appRef.attachView(componentRef.hostView);\n\n    // 3. Get DOM element from component\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n    // 4. Append notification list if missing\n    const listElement = this.generateListElement(root);\n\n    // 5. Add item class\n    domElem.setAttribute('class', 'bb-notification-list__item');\n\n    // 6. Set role='status' if autofocus is set to true and role='alert' if autofocus is set to false\n    if (autofocus) {\n      domElem?.firstElementChild?.setAttribute('role', 'status');\n    } else {\n      componentRef.instance.autofocus = false;\n      // For Firefox and NVDA role should be set to list element\n      if (navigator.userAgent.indexOf('Firefox') > -1) {\n        listElement.setAttribute('role', 'alert');\n      } else {\n        domElem?.firstElementChild?.setAttribute('role', 'alert');\n      }\n    }\n\n    // 7. Append new element to list of elements and push old ones down.\n    if (listElement) {\n      listElement.insertBefore(domElem, listElement.firstChild);\n    }\n\n    return {\n      componentInstance: componentRef.instance,\n      unmountComponent: () => {\n        this.destroyElement(componentRef);\n      },\n    };\n  }\n\n  private generateListElement(root: Node): Element {\n    let listElement = document.getElementsByClassName('bb-notification-list')[0];\n    if (!listElement) {\n      listElement = document.createElement('div');\n      listElement.setAttribute('class', 'bb-notification-list');\n      root.appendChild(listElement);\n    }\n\n    return listElement;\n  }\n\n  /*\n    This method is a hack to make notifications visible to screen readers\n    (NVDA and VoiceOver) when a modal window (role=\"dialog\") is opened.\n    aria-label=\"polite\" on the list element and role=\"status\" with\n    aria-atomic=\"true\" on notification element don't resolve the issue.\n    Any better ideas are welcome.\n   */\n  private checkAndDestroyListElement() {\n    const listElement = document.getElementsByClassName('bb-notification-list')[0];\n    // don't remove list element if there are any remaining notifications\n    if (!listElement || listElement.childElementCount > 0) {\n      return;\n    }\n    listElement.remove();\n  }\n\n  private destroyElement(componentRef: ComponentRef<any>) {\n    componentRef.instance.beforeDestroy();\n    this.appRef.detachView(componentRef.hostView);\n    componentRef.destroy();\n    // is required to make notifications visible to screen readers when any modal window is opened\n    this.checkAndDestroyListElement();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * A configuration service for the [NotificationComponent] component.\n *\n * You can inject this service, typically in your root component, and customize its properties\n * to provide default values for all alerts used in the application.\n */\n@Injectable({ providedIn: 'root' })\nexport class BBNotificationConfig {\n  animation = true;\n}\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { getBemModifiers, fadeSlideAnimation } from '@backbase/ui-ang/util';\nimport { BBNotificationConfig } from './notification.config';\n\nexport type NotificationType = 'success' | 'info' | 'warning' | 'error' | 'alert';\n\n/**\n * @name NotificationComponent\n *\n * @description\n * Component that displays a notification.\n */\n// @dynamic to suppress error with resolving Document type during compilation\n@Component({\n  selector: 'bb-notification-ui',\n  templateUrl: './notification.component.html',\n  animations: [fadeSlideAnimation],\n})\nexport class NotificationComponent implements OnInit, AfterViewInit {\n  /**\n   * The header for the notification.\n   */\n  @Input() header: TemplateRef<any> | string | undefined;\n  /**\n   * The message template for the notification. Defaults to an empty string\n   */\n  @Input() message: TemplateRef<any> | string = '';\n  /**\n   * The primary action template for the notification.\n   */\n  @Input() primaryActionTemplate: TemplateRef<any> | undefined;\n  /**\n   * The secondary action template for the notification.\n   */\n  @Input() secondaryActionTemplate: TemplateRef<any> | undefined;\n  /**\n   * The type modifier for the notification. Defaults to 'info'\n   *\n   * This property will be used to add additional class names to the wrapper div of the notification\n   * in the following format: `bb-notification--<<modifier>>`\n   *\n   */\n  @Input() modifier: NotificationType = 'info';\n  /**\n   * Whether the notification is dismissible. Defaults to `true`.\n   *\n   *\n   * If `true` then an additional class name is added to the wrapper div of the notification in the following format\n   * `bb-notification--dismissible`\n   */\n  @Input() dismissible = true;\n  /**\n   * The text for the primary action button.\n   * Will throw an error if unset and primary action set.\n   */\n  @Input() primaryActionText: string | undefined;\n  /**\n   * A callback function for the primary action. Required to show the button.\n   */\n  @Input() primaryAction: Function | undefined;\n  /**\n   * The text for the secondary action button.\n   * Will throw an error if unset and secondary action set.\n   */\n  @Input() secondaryActionText: string | undefined;\n  /**\n   * A callback function for the secondary action. Required to show the button.\n   */\n  @Input() secondaryAction: Function | undefined;\n  /**\n   * The callback function for the manually close event.\n   */\n  @Input() closeAction: Function | undefined = undefined;\n  /**\n   * The callback function for the host click event.\n   */\n  @Input() hostAction: Function | undefined = undefined;\n  /**\n   * The context for notification header template.\n   */\n  @Input() headerContext: any;\n  /**\n   * The context for notification message template.\n   */\n  @Input() messageContext: any;\n  /**\n   * If `true`, notification opening and closing will be animated.\n   * Animation is triggered only when the `.hide()` or `.show()` functions are called\n   */\n  @Input() animation: boolean;\n  /**\n   * Notification manually close event stream.\n   */\n  @Output() close = new EventEmitter();\n  @ViewChild('notificationContent') notificationContent!: ElementRef;\n  @ViewChild('defaultNotificationHeaderTemplate', { static: true }) defaultHeaderTemplate: TemplateRef<any> | undefined;\n  @ViewChild('defaultNotificationMessageTemplate', { static: true }) defaultMessageTemplate:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('defaultPrimaryActionsTemplate', { static: true }) defaultPrimaryActionsTemplate:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('defaultSecondaryActionsTemplate', { static: true }) defaultSecondaryActionsTemplate:\n    | TemplateRef<any>\n    | undefined;\n\n  /**\n   * Notification icon color.\n   */\n  iconColor: string | undefined;\n\n  /**\n   * Autofocus will cause the component to be focused on the first rendering.\n   */\n  autofocus = true;\n\n  /**\n   * Element that focused before notification is open, for back focus when notification is closed.\n   */\n  previousFocusedElement!: HTMLElement;\n\n  protected bemBlock = 'bb-notification';\n  protected bemModifiers = [() => (this.dismissible ? 'dismissible' : ''), () => this.modifier];\n\n  get dynamicClassNames() {\n    return getBemModifiers(this.bemBlock, this.bemModifiers);\n  }\n\n  @HostBinding('@.disabled') get noAnimation() {\n    return !this.animation;\n  }\n\n  @HostBinding('@fadeSlideInOut') get animated() {\n    return this.animation;\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  onKeyEvent(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'Escape':\n        this.onNotificationClose();\n        break;\n      default:\n        return;\n    }\n    event.preventDefault();\n  }\n\n  constructor(@Inject(DOCUMENT) private document: Document, private elem: ElementRef, config: BBNotificationConfig) {\n    this.animation = config.animation;\n  }\n\n  ngOnInit() {\n    if (this.hasPrimaryAction() && typeof this.primaryActionText === 'undefined') {\n      throw new Error(\n        `\"primaryActionText\" input is required when a primaryAction is set in \"${this.constructor.name}\"`,\n      );\n    }\n    if (this.hasSecondaryAction() && typeof this.secondaryActionText === 'undefined') {\n      throw new Error(\n        `\"secondaryActionText\" input is required when a secondaryAction is set in \"${this.constructor.name}\"`,\n      );\n    }\n    this.iconColor = this.modifier === 'error' ? 'danger' : this.modifier;\n  }\n\n  ngAfterViewInit(): void {\n    if (document.activeElement instanceof HTMLElement) {\n      this.previousFocusedElement = document.activeElement;\n    }\n  }\n\n  get hostTabIndex() {\n    return this.hostAction ? 0 : -1;\n  }\n\n  onNotificationClick() {\n    if (this.hostAction) {\n      this.hostAction();\n      this.close.emit();\n    }\n  }\n\n  onNotificationClose() {\n    if (this.closeAction) {\n      this.closeAction();\n    }\n    this.close.emit();\n  }\n\n  beforeDestroy() {\n    const notificationList = this.document.querySelector('.bb-notification-list');\n    const isNotificationListFocused = notificationList && notificationList.contains(this.document.activeElement);\n\n    if (notificationList && isNotificationListFocused) {\n      const notificationBtns = notificationList.querySelectorAll<HTMLElement>('.bb-notification__close');\n\n      const currentIndex = Array.from(notificationList.children).findIndex(\n        (listElement) => listElement === this.elem.nativeElement,\n      );\n\n      const nextElementToFocus =\n        notificationBtns[currentIndex + 1] || notificationBtns[currentIndex - 1] || this.previousFocusedElement;\n\n      if (nextElementToFocus) {\n        nextElementToFocus.focus();\n      }\n    }\n  }\n\n  onPrimaryPress() {\n    if (this.primaryAction) {\n      this.primaryAction();\n      this.onNotificationClose();\n    }\n  }\n\n  onSecondaryPress() {\n    if (this.secondaryAction) {\n      this.secondaryAction();\n      this.onNotificationClose();\n    }\n  }\n\n  getHeaderTemplate(): TemplateRef<any> | undefined {\n    if (this.header instanceof TemplateRef) {\n      return this.header;\n    }\n\n    return this.defaultHeaderTemplate;\n  }\n\n  getMessageTemplate(): TemplateRef<any> | undefined {\n    if (this.message instanceof TemplateRef) {\n      return this.message;\n    }\n\n    return this.defaultMessageTemplate;\n  }\n\n  hasButtonRow(): boolean {\n    return this.hasPrimaryAction() || this.hasSecondaryAction();\n  }\n\n  hasPrimaryAction(): boolean {\n    return this.primaryAction !== undefined;\n  }\n\n  hasSecondaryAction(): boolean {\n    return this.secondaryAction !== undefined;\n  }\n}\n","<div\n  class=\"bb-notification\"\n  [ngClass]=\"dynamicClassNames\"\n  data-role=\"notification-alert\"\n  #notificationContent\n  [bbFocus]=\"autofocus\"\n  [attr.tabindex]=\"hostTabIndex\"\n  (bbKeyboardClick)=\"onNotificationClick()\"\n>\n  <bb-icon-ui\n    [name]=\"modifier\"\n    [color]=\"iconColor\"\n    class=\"bb-notification__icon\"\n    [attr.data-role]=\"'notification-icon'\"\n  ></bb-icon-ui>\n  <div class=\"bb-notification__body\">\n    <div class=\"bb-notification__title\" data-role=\"notification-heading\">\n      <ng-container *ngTemplateOutlet=\"getHeaderTemplate(); context: headerContext\"></ng-container>\n    </div>\n    <div data-role=\"notification-message\" class=\"bb-text-support\">\n      <ng-container *ngTemplateOutlet=\"getMessageTemplate(); context: messageContext\"></ng-container>\n    </div>\n    <div\n      data-role=\"notification-actions\"\n      *ngIf=\"primaryActionTemplate || primaryActionText || secondaryActionTemplate || secondaryActionText\"\n    >\n      <div class=\"bb-button-bar\">\n        <button\n          *ngIf=\"hasPrimaryAction()\"\n          bbButton\n          type=\"button\"\n          data-role=\"notification-primary-button\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onPrimaryPress()\"\n        >\n          <ng-container *ngIf=\"primaryActionTemplate; else defaultPrimaryActionsTemplate\">\n            <ng-container *ngTemplateOutlet=\"primaryActionTemplate; context: this\"></ng-container>\n          </ng-container>\n        </button>\n        <button\n          bbButton\n          color=\"secondary\"\n          *ngIf=\"hasSecondaryAction()\"\n          data-role=\"notification-secondary-button\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onSecondaryPress()\"\n        >\n          <ng-container *ngIf=\"secondaryActionTemplate; else defaultSecondaryActionsTemplate\">\n            <ng-container *ngTemplateOutlet=\"secondaryActionTemplate; context: this\"></ng-container>\n          </ng-container>\n        </button>\n      </div>\n    </div>\n  </div>\n  <button\n    *ngIf=\"dismissible\"\n    (click)=\"onNotificationClose()\"\n    type=\"button\"\n    data-role=\"notification-close-button\"\n    class=\"bb-notification__close close\"\n    aria-label=\"Close\"\n    i18n-aria-label=\"Close notification button| Text for the close notification button @@bb-notification-ui.close\"\n  >\n    <bb-icon-ui name=\"times\"></bb-icon-ui>\n  </button>\n</div>\n\n<ng-template #defaultNotificationHeaderTemplate>\n  <div [ngClass]=\"{ 'bb-block bb-block--sm': !!header }\">\n    {{ header }}\n  </div>\n</ng-template>\n\n<ng-template #defaultNotificationMessageTemplate>\n  {{ message }}\n</ng-template>\n\n<ng-template #defaultPrimaryActionsTemplate>\n  {{ primaryActionText }}\n</ng-template>\n\n<ng-template #defaultSecondaryActionsTemplate>\n  {{ secondaryActionText }}\n</ng-template>\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { NotificationComponent, NotificationType } from './notification.component';\nimport { AppendToDomService } from './append-to-dom.service';\nimport { Subject, Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nexport interface Notification {\n  /**\n   * The header for the notification.\n   */\n  header?: string | TemplateRef<any>;\n  /**\n   * The message template for the notification. Defaults to an empty string\n   */\n  message: string | TemplateRef<any>;\n  /**\n   * The type modifier for the notification. Defaults to 'info'\n   */\n  modifier?: NotificationType;\n  /**\n   * Whether the notification is dismissible. Defaults to true\n   */\n  dismissible?: boolean;\n  /**\n   * The time the notification will appear for in ms.\n   * 0 will result in the notifaction remaining open.\n   */\n  ttl?: number;\n  /**\n   * The text for the primary action button.\n   * Will throw an error if unset and primary action set.\n   */\n  primaryActionText?: string;\n  /**\n   * A callback function for the primary action.\n   * Required to show the button.\n   */\n  primaryAction?: Function;\n  /**\n   * The text for the secondary action button.\n   * Will throw an error if unset and secondary action set.\n   */\n  secondaryActionText?: string;\n  /**\n   * A callback function for the secondary action.\n   * Required to show the button.\n   */\n  secondaryAction?: Function;\n  /**\n   * A callback function for the manually close action.\n   */\n  closeAction?: Function;\n  /**\n   * A callback function for the host click action.\n   */\n  hostAction?: Function;\n  /**\n   * The context for notification header template.\n   */\n  headerContext?: any;\n  /**\n   * The context for notification message template.\n   */\n  messageContext?: any;\n  /**\n   * The primary action template for the notification.\n   */\n  primaryActionTemplate?: TemplateRef<any>;\n  /**\n   * The secondary action template for the notification.\n   */\n  secondaryActionTemplate?: TemplateRef<any>;\n  /**\n   * Autofocus will cause the component to be focused on the first rendering.\n   */\n  autofocus?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  constructor(private readonly appendtoDomService: AppendToDomService) {}\n\n  showNotification({\n    header,\n    message,\n    dismissible = true,\n    ttl = 3000,\n    modifier = 'info',\n    headerContext = {},\n    messageContext = {},\n    primaryActionText,\n    primaryAction,\n    secondaryActionText,\n    secondaryAction,\n    closeAction,\n    hostAction,\n    primaryActionTemplate,\n    secondaryActionTemplate,\n    autofocus = true,\n  }: Notification): () => void {\n    const res = this.appendtoDomService.appendComponentToRoot(NotificationComponent, autofocus);\n\n    const componentInstance = res.componentInstance as NotificationComponent;\n    componentInstance.message = message;\n    componentInstance.modifier = modifier;\n    componentInstance.dismissible = dismissible;\n    componentInstance.header = header;\n    componentInstance.primaryActionText = primaryActionText;\n    componentInstance.primaryAction = primaryAction;\n    componentInstance.secondaryActionText = secondaryActionText;\n    componentInstance.secondaryAction = secondaryAction;\n    componentInstance.closeAction = closeAction;\n    componentInstance.hostAction = hostAction;\n    componentInstance.headerContext = headerContext;\n    componentInstance.messageContext = messageContext;\n    componentInstance.primaryActionTemplate = primaryActionTemplate;\n    componentInstance.secondaryActionTemplate = secondaryActionTemplate;\n\n    return this.createHideNotificationFunction(res.unmountComponent, ttl, componentInstance.close);\n  }\n\n  private createHideNotificationFunction(\n    hideFn: () => void,\n    ttl: number = 0,\n    closeStream: Observable<any>,\n  ): () => void {\n    const hideSubject = new Subject<any>();\n    const hideNotification = () => {\n      hideSubject.next();\n    };\n    const closeSubscription = closeStream.subscribe(hideNotification);\n\n    const hideSubscription = hideSubject.pipe(first()).subscribe(() => {\n      hideFn();\n      hideSubscription.unsubscribe();\n      closeSubscription.unsubscribe();\n    });\n\n    if (ttl > 0) {\n      setTimeout(hideNotification, ttl);\n    }\n\n    return hideNotification;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\nimport { IconModule } from '@backbase/ui-ang/icon';\n\nimport { NotificationComponent } from './notification.component';\nimport { ButtonModule } from '@backbase/ui-ang/button';\nimport { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';\nimport { FocusModule } from '@backbase/ui-ang/focus';\n\n@NgModule({\n  imports: [CommonModule, NgbAlertModule, IconModule, ButtonModule, KeyboardClickModule, FocusModule],\n  declarations: [NotificationComponent],\n  exports: [NotificationComponent],\n  entryComponents: [NotificationComponent],\n})\nexport class NotificationModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.BBNotificationConfig","i1.AppendToDomService"],"mappings":"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"}