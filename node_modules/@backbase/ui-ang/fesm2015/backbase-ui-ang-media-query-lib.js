import * as i0 from '@angular/core';
import { Injectable, Inject, Optional, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { switchMap } from 'rxjs/operators';
import { of, from, Observable } from 'rxjs';
import * as i1 from '@backbase/ui-ang/css-variables-lib';
import { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';

/**
 * @name MediaQueryService
 *
 * @dynamic (to suppress error with resolving Document type during compilation)
 *
 * @description
 * MediaQueryService is a utility for evaluating media queries and reacting to their changing.
 *
 * @example
 * import { MediaQueryService } from '@backbase/foundation-ang/ui';
 *
 * @Component({...})
 * class MyComponent {
 *
 *   constructor(private readonly mediaQueryService: MediaQueryService) {}
 *
 *   // with standard grid breakpoint
 *   readonly isStandardMdMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'md');
 *   // custom value
 *   readonly isCustomMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 500);
 */
class MediaQueryService {
    constructor(document, cssVariablesService, ngZone) {
        this.document = document;
        this.cssVariablesService = cssVariablesService;
        this.ngZone = ngZone;
    }
    /**
     * Observe media changes for current window.
     *
     * @param value - breakpoint value (could be custom number/standard grid breakpoint)
     * @param type - breakpoint type
     */
    isMediaBreakpointMatches(type, value) {
        const isCustomBreakpoint = typeof value === 'number';
        if (!isCustomBreakpoint && !this.cssVariablesService) {
            throw new Error('In order to use media breakpoints, please add provider for CssVariablesService.');
        }
        const mediaBreakpointValue$ = isCustomBreakpoint
            ? of(`${value}px`)
            : from(this.cssVariablesService.getCssVariable(`--breakpoint-${value}`));
        return mediaBreakpointValue$.pipe(switchMap((mediaWidth) => {
            const mediaQueryList = this.document.defaultView.matchMedia(`(${type}: ${mediaWidth})`);
            return this.getMediaBreakpoints(mediaQueryList);
        }));
    }
    getMediaBreakpoints(mediaQueryList) {
        return new Observable((observer) => {
            /**
             *   MediaQueryList inherited form EventTarget in some browsers.
             *   Therefore methods like `addEventListener` or `removeEventListener` doesn't work in Safari and IE.
             *   For more details see:
             *   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility
             */
            const isFunctionAvailable = Boolean(mediaQueryList.addEventListener);
            const mediaListener = ({ matches }) => {
                observer.next(matches);
                /**
                 * Safari and IE does not inherit Event interface.
                 * It means that on media match, event will not be dispatched and Angular will not update UI.
                 * Simulating async event to cover this gap.
                 */
                if (this.ngZone.isStable) {
                    this.ngZone.run(() => Promise.resolve());
                }
            };
            // emit initial match
            observer.next(mediaQueryList.matches);
            if (isFunctionAvailable) {
                mediaQueryList.addEventListener('change', mediaListener);
            }
            else {
                mediaQueryList.addListener(mediaListener);
            }
            return () => {
                if (isFunctionAvailable) {
                    mediaQueryList.removeEventListener('change', mediaListener);
                }
                else {
                    mediaQueryList.removeListener(mediaListener);
                }
            };
        });
    }
}
MediaQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryService, deps: [{ token: DOCUMENT }, { token: i1.CssVariablesService, optional: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
MediaQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.CssVariablesService, decorators: [{
                    type: Optional
                }] }, { type: i0.NgZone }]; } });

class MediaQueryModule {
}
MediaQueryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MediaQueryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryModule, imports: [CommonModule] });
MediaQueryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryModule, providers: [CssVariablesService, MediaQueryService], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    providers: [CssVariablesService, MediaQueryService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MediaQueryModule, MediaQueryService };
//# sourceMappingURL=backbase-ui-ang-media-query-lib.js.map
