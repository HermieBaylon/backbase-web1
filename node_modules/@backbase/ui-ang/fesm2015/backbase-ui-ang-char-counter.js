import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Input, NgModule } from '@angular/core';

/**
 * @name CharCounterComponent
 *
 * @description
 * Component for counting characters typed inside a form element
 */
class CharCounterComponent {
    constructor(renderer, cd) {
        this.renderer = renderer;
        this.cd = cd;
        /**
         * Indicator for maximum character count.
         */
        this.maxLength = 150;
        this._blockTyping = false;
        this.counter = 0;
        this.valid = true;
    }
    /**
     * Whether the element should be blocked when maximum character count is reached.
     */
    set blockTyping(val) {
        this._blockTyping = val;
        if (this.blockTyping && this.element) {
            this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());
        }
        else {
            this.renderer.removeAttribute(this.element, 'maxlength');
        }
    }
    get blockTyping() {
        return this._blockTyping;
    }
    ngOnInit() {
        if (this.blockTyping && this.element) {
            this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());
        }
        // Cover by setTimeout for handling value change in input/textarea
        // This change cannot be checked by lifecycle hooks.
        setTimeout(() => {
            this.calculateElementValue();
        }, 0);
        this.renderer.listen(this.element, 'input', () => this.calculateElementValue());
    }
    ngOnChanges(changes) {
        const { inputValue } = changes;
        if (inputValue && inputValue.previousValue !== inputValue.currentValue) {
            this.counter = inputValue.currentValue.length;
            this.valid = this.counter <= this.maxLength;
        }
    }
    // It should be deprecated, because it doesn't allow to count
    // value that was updated programmatically, for instance by patchValue
    calculateElementValue() {
        this.counter = this.element ? this.element.value.length : 0;
        this.valid = this.counter <= this.maxLength;
        this.cd.detectChanges();
    }
}
CharCounterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CharCounterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CharCounterComponent, selector: "bb-char-counter-ui", inputs: { inputValue: "inputValue", element: "element", maxLength: "maxLength", blockTyping: "blockTyping" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"bb-char-counter\" [class.bb-char-counter--invalid]=\"!valid\">\n  <div [ngSwitch]=\"true\" aria-live=\"assertive\" class=\"sr-only\" aria-atomic=\"true\" role=\"log\">\n    <div\n      *ngSwitchCase=\"counter > maxLength - 4 && counter !== maxLength\"\n      i18n=\"\n        Above to reach Max Length Error|String is almost has 'maxLength' characters.\n        @@bb-char-counter-ui.pre-max-length-warning\"\n    >\n      You can type only {{ maxLength - counter }} more characters in this field.\n    </div>\n    <div\n      *ngSwitchCase=\"counter === maxLength\"\n      [attr.data-role]=\"'char-counter-error-message'\"\n      i18n=\"Max Length Error|String is more than 'maxLength' characters. @@bb-char-counter-ui.max-length-warning\"\n    >\n      Limit reached. You can only use {{ maxLength }} characters in this field.\n    </div>\n  </div>\n\n  <div *ngIf=\"element\" [attr.data-role]=\"'char-counter-current-max'\">{{ counter }}/{{ maxLength }}</div>\n</div>\n", directives: [{ type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-char-counter-ui',
                    templateUrl: './char-counter.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { inputValue: [{
                type: Input
            }], element: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], blockTyping: [{
                type: Input
            }] } });

class CharCounterModule {
}
CharCounterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CharCounterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterModule, declarations: [CharCounterComponent], imports: [CommonModule], exports: [CharCounterComponent] });
CharCounterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [CharCounterComponent],
                    exports: [CharCounterComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CharCounterComponent, CharCounterModule };
//# sourceMappingURL=backbase-ui-ang-char-counter.js.map
