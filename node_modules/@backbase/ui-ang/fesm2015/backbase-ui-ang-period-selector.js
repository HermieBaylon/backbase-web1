import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule, DatePipe } from '@angular/common';
import * as i2 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i3 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';

/**
 * @name PeriodSelectorComponent
 *
 * @description
 * Component that selects a period.
 */
class PeriodSelectorComponent {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.combinedFormatters = {
            title: (date) => this.datePipe.transform(date, 'MMMM') || '',
            start: (date) => this.datePipe.transform(date, 'mediumDate') || '',
            end: (date) => this.datePipe.transform(date, 'mediumDate') || '',
        };
        /**
         * Period step
         */
        this.period = 'month';
        /**
         * EventEmitter for triggering a periodChange event.
         */
        this.periodChange = new EventEmitter();
    }
    /**
     * Custom date period formatter.
     */
    set periodFormatters(formatters) {
        this.combinedFormatters = Object.assign(this.combinedFormatters, formatters);
    }
    get isLastPeriod() {
        if (!this.periodStart) {
            return true;
        }
        const now = new Date();
        return now.getFullYear() === this.periodStart.getFullYear() && now.getMonth() === this.periodStart.getMonth();
    }
    ngOnInit() {
        if (typeof this.periodStart === 'undefined' || typeof this.periodEnd === 'undefined') {
            throw new Error('`periodStart`, and `periodEnd` inputs are required in `bb-period-selector-ui` component');
        }
        this.setFormattedValues();
    }
    setFormattedValues() {
        this.formattedTitle = this.combinedFormatters.title(this.periodStart);
        this.formattedStart = this.combinedFormatters.start(this.periodStart);
        this.formattedEnd = this.combinedFormatters.end(this.periodEnd);
    }
    changePeriod(next) {
        if (!this.periodStart || (next && this.isLastPeriod)) {
            return;
        }
        this.periodStart.setMonth(this.periodStart.getMonth() + (next ? 1 : -1));
        this.periodEnd = this.isLastPeriod
            ? new Date(this.periodStart.getFullYear(), this.periodStart.getMonth(), new Date().getDate(), 23, 59, 59, 999)
            : new Date(this.periodStart.getFullYear(), this.periodStart.getMonth() + 1, 0, 23, 59, 59, 999);
        this.setFormattedValues();
        this.periodChange.emit({
            start: this.periodStart,
            end: this.periodEnd,
        });
    }
}
PeriodSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorComponent, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
PeriodSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PeriodSelectorComponent, selector: "bb-period-selector-ui", inputs: { periodStart: "periodStart", periodEnd: "periodEnd", periodFormatters: "periodFormatters", period: "period" }, outputs: { periodChange: "periodChange" }, ngImport: i0, template: "<div class=\"bb-period-selector\">\n  <div>\n    <button bbButton circle=\"\u201Ctrue\u201D\" (click)=\"changePeriod(false)\" color=\"link-dark\" size=\"sm\">\n      <bb-icon-ui size=\"md\" name=\"chevron-left\"></bb-icon-ui>\n    </button>\n  </div>\n  <div class=\"bb-period-selector__date\">\n    <div class=\"bb-period-selector__month\">{{ formattedTitle }}</div>\n    <div class=\"bb-period-selector__period\">\n      <time>{{ formattedStart }}</time> - <time>{{ formattedEnd }}</time>\n    </div>\n  </div>\n  <div>\n    <button\n      bbButton\n      [circle]=\"true\"\n      (click)=\"changePeriod(true)\"\n      [ngClass]=\"{ disabled: isLastPeriod }\"\n      color=\"link-dark\"\n      size=\"sm\"\n    >\n      <bb-icon-ui size=\"md\" name=\"chevron-right\"></bb-icon-ui>\n    </button>\n  </div>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-period-selector-ui',
                    templateUrl: './period-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; }, propDecorators: { periodStart: [{
                type: Input
            }], periodEnd: [{
                type: Input
            }], periodFormatters: [{
                type: Input
            }], period: [{
                type: Input
            }], periodChange: [{
                type: Output
            }] } });

class PeriodSelectorModule {
}
PeriodSelectorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PeriodSelectorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorModule, declarations: [PeriodSelectorComponent], imports: [CommonModule, IconModule, ButtonModule], exports: [PeriodSelectorComponent] });
PeriodSelectorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorModule, providers: [DatePipe], imports: [[CommonModule, IconModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, IconModule, ButtonModule],
                    declarations: [PeriodSelectorComponent],
                    exports: [PeriodSelectorComponent],
                    providers: [DatePipe],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PeriodSelectorComponent, PeriodSelectorModule };
//# sourceMappingURL=backbase-ui-ang-period-selector.js.map
