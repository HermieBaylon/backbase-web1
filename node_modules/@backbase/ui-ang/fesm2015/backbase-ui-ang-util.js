import { style, useAnimation, animation, animate, trigger, transition, query, group } from '@angular/animations';

const timing = '200ms ease-in';
const optional = { optional: true };
const distances = {
    normalX: 'translateX(0%)',
    right: 'translateX(100%)',
    left: 'translateX(-100%)',
    normalY: 'translateY(0%)',
    bottom: 'translateY(100%)',
};
const resetAnimatableView = {
    position: 'absolute',
    height: '100%',
    width: '100%',
    display: 'block',
    top: 0,
};
function resetableTransform(from) {
    return style(Object.assign(Object.assign({}, resetAnimatableView), { transform: from }));
}
function slide2D(from, to) {
    return useAnimation(animation([resetableTransform(from), animate(timing, style({ transform: to }))]));
}
// An example for slide up/down animation
const slideUpAnimation = trigger('slideUp', [
    transition(':enter', [slide2D(distances.bottom, distances.normalY)]),
    transition(':leave', [slide2D(distances.normalY, distances.bottom)]),
]);
// An example for slide left/right animation
const slideXAnimation = trigger('slideX', [
    transition('void => isLeft', [slide2D(distances.right, distances.normalX)]),
    transition('void => isRight', [slide2D(distances.left, distances.normalX)]),
    transition('isRight => void', [slide2D(distances.normalX, distances.left)]),
    transition('isLeft => void', [slide2D(distances.normalX, distances.right)]),
]);
// An example to animate tabs
const tabsAnim = trigger('tabsAnimation', [
    // Previous, slide left to right to show left tab
    transition(':decrement', [
        // set new tab X location to be -100%
        query(':enter', resetableTransform(distances.left)),
        group([
            // slide existing page from 0% to 100% to the right
            query(':leave', animate(timing, resetableTransform(distances.right)), optional),
            // slide new page from -100% to 0% to the right
            query(':enter', animate(timing, style({
                opacity: 1,
                transform: distances.normalX,
            })), optional),
        ]),
    ]),
    // Next, slide right to left to show right page
    transition(':increment', [
        // set new page X location to be 100%
        query(':enter', resetableTransform(distances.right)),
        group([
            // slide existing page from 0% to -100% to the left
            query(':leave', animate(timing, resetableTransform(distances.left))),
            // slide new page from 100% to 0% to the left
            query(':enter', animate(timing, style({
                opacity: 1,
                transform: distances.normalX,
            }))),
        ]),
    ]),
]);
// Used to animate bb-notification
const fadeSlideAnimation = trigger('fadeSlideInOut', [
    transition(':enter', [
        style({ opacity: 0, display: 'block', transform: 'translateY(-10px)' }),
        animate(timing, style({ opacity: 1, transform: 'translateY(0)' })),
    ]),
    transition(':leave', [
        style({ display: 'block' }),
        animate(timing, style({ opacity: 0, transform: 'translateY(-10px)' })),
    ]),
]);
// An example for fadi in/out animation
const fadeInAnimation = trigger('fadeIn', [
    transition(':enter', [
        style({
            opacity: 0,
        }),
        animate(timing, style({ opacity: 1 })),
    ]),
    transition(':leave', [animate(timing, style({ opacity: 0 }))]),
]);
// An example to animate router
const routerAnim = trigger('routeAnimations', [
    transition('* <=> *', [
        style({ position: 'relative' }),
        query(':enter, :leave', [
            style(Object.assign(Object.assign({}, resetAnimatableView), { transform: 'translateY(-50px)', opacity: 0 })),
        ], optional),
        query(':enter', [animate(timing, style({ transform: distances.normalY, opacity: 1 }))], optional),
    ]),
]);
const errorMessageAnimation = trigger('errorMessageAnimation', [
    transition('void => *', [style({ opacity: 0, height: '0px' }), animate(150, style({ opacity: 1, height: '*' }))]),
]);

/**
 * Convert a list of ID references for `aria-` attributes to an attribute value
 */
const idListAttr = (...tokens) => tokens.filter(Boolean).join(' ').trim() || undefined;

/**
 * Used to annotate an example component with documentation-related metadata.
 *
 * For now, only supports a simple boolean flag that signifies whether a component has been migrated
 * to Theme 2.0 or not.
 */
function BackbaseDocs(docs) {
    return function (constructor) {
        constructor.prototype._backbaseDocs = {
            isTheme2Stable: docs.isTheme2Stable,
        };
    };
}

/**
 * Avoid any leading or trailing "-" characters, avoid adjacent dash characters
 */
const escapeBemModifier = (str) => str.replace(/^[^a-z]+|[^a-z]+$/gi, '').replace(/[^a-z]+/gi, '-');
/**
 * Safely create BEM modifier class names for a BEM block:
 *
 * Example usage:
 *
 *     const iconComponent = { size: 'extra small', animate: false };
 *     getBemModifiers('bb-icon', [
 *       () => iconComponent.size,
 *       () => iconComponent.animate ? 'animate' : undefined
 *     ]);
 *
 * The above will result in: "bb-icon--extra-small"
 */
const getBemModifiers = (blockOrElement, modifierFunctions) => modifierFunctions
    .map((fn) => fn())
    .filter(Boolean)
    .map(escapeBemModifier)
    .map((modifier) => `${blockOrElement}--${modifier}`);

/* eslint-disable */
var KEY_CODES;
(function (KEY_CODES) {
    KEY_CODES["UP"] = "ArrowUp";
    KEY_CODES["DOWN"] = "ArrowDown";
    KEY_CODES["ENTER"] = "Enter";
    KEY_CODES["SPACE"] = " ";
    KEY_CODES["TAB"] = "Tab";
    KEY_CODES["BACKSPACE"] = "Backspace";
    KEY_CODES["DELETE"] = "Delete";
    KEY_CODES["ESCAPE"] = "Escape";
    KEY_CODES["X"] = "x";
    KEY_CODES["V"] = "v";
    KEY_CODES["LEFT"] = "ArrowLeft";
    KEY_CODES["RIGHT"] = "ArrowRight";
})(KEY_CODES || (KEY_CODES = {}));
const KEY_CODE_TO_CODE = {
    9: KEY_CODES.TAB,
    38: KEY_CODES.UP,
    40: KEY_CODES.DOWN,
    32: KEY_CODES.SPACE,
    13: KEY_CODES.ENTER,
    46: KEY_CODES.DELETE,
    8: KEY_CODES.BACKSPACE,
    27: KEY_CODES.ESCAPE,
    88: KEY_CODES.X,
    86: KEY_CODES.V,
};
function browserIsMsie() {
    return navigator.userAgent.indexOf('MSIE') > -1 || navigator.userAgent.indexOf('Trident/') > -1;
}
function getKeyCode(event) {
    // NOTE: detect IE
    if (browserIsMsie()) {
        return KEY_CODE_TO_CODE[event.keyCode];
    }
    return event.code;
}

/**
 * @name segment
 * @inner
 * @param value - the string to segment
 * @param segmentsSize - the size (or array of sizes) the segments should have
 * @param separator - the character to separate the segments with
 *
 * @description
 * Split a string into segments of specified segmentsSize(s)
 */
function segment(value, segmentsSize = 0, separator = ' ') {
    const segmentSizes = Array.isArray(segmentsSize) ? segmentsSize : [segmentsSize];
    const segments = [];
    for (let i = 0, chunk; i < value.length; i += chunk.length) {
        chunk = value.slice(i, i + segmentSizes[segments.length % segmentSizes.length] || Infinity);
        segments.push(chunk);
    }
    return segments.join(separator);
}

let _id = 0;
function getDynamicId() {
    return `${_id++}`;
}

/**
 * Generated bundle index. Do not edit.
 */

export { BackbaseDocs, KEY_CODES, KEY_CODE_TO_CODE, browserIsMsie, errorMessageAnimation, escapeBemModifier, fadeInAnimation, fadeSlideAnimation, getBemModifiers, getDynamicId, getKeyCode, idListAttr, resetableTransform, routerAnim, segment, slide2D, slideUpAnimation, slideXAnimation, tabsAnim };
//# sourceMappingURL=backbase-ui-ang-util.js.map
