import * as i0 from '@angular/core';
import { Component, ViewChild, EventEmitter, Input, Output, ContentChildren, NgModule } from '@angular/core';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

/**
 * TabComponent represents Tab item
 * that should be used inside tab group component
 */
class TabComponent {
    /**
     * Getter for the template attached to this component
     */
    get template() {
        return this.defaultTemplate;
    }
}
TabComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TabComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TabComponent, selector: "bb-tab-ui", viewQueries: [{ propertyName: "defaultTemplate", first: true, predicate: ["tabItemTemplate"], descendants: true, static: true }], ngImport: i0, template: "<ng-template #tabItemTemplate>\n  <ng-content></ng-content>\n</ng-template>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tab-ui',
                    templateUrl: './tab.component.html',
                }]
        }], propDecorators: { defaultTemplate: [{
                type: ViewChild,
                args: ['tabItemTemplate', { static: true }]
            }] } });

/**
 * TabGroupComponent represents component that is used
 * as a wrapper for tab item components. It tracks user interaction and
 * notifies parent upon selection change
 */
class TabGroupComponent {
    constructor() {
        /**
         * Event (Output) that emits new value once tab item selection has changed.
         * As a parameter it provides index of newly selected item
         */
        this.select = new EventEmitter();
        /**
         * Keeps track of currently active tab item index
         */
        this.activeIndexValue = 0;
    }
    /**
     * Setter (Input) for initial tab item selection
     *
     * @param initialSelection Index of initially selected tab item
     */
    set initialSelection(initSelection) {
        this.activeIndexValue = initSelection || 0;
    }
    /**
     * Getter for index of currently active tab item
     */
    get activeIndex() {
        return this.activeIndexValue;
    }
    /**
     * Internal handler for clicks on tab items
     *
     * @param index Index of element that has been clicked
     */
    onClick(event, index) {
        event.preventDefault();
        if (this.activeIndex === index) {
            return;
        }
        this.activeIndexValue = index;
        this.select.emit(index);
    }
}
TabGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TabGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TabGroupComponent, selector: "bb-tab-group-ui", inputs: { initialSelection: "initialSelection" }, outputs: { select: "select" }, queries: [{ propertyName: "items", predicate: TabComponent }], ngImport: i0, template: "<div class=\"nav nav-tabs\" role=\"tablist\">\n  <div *ngFor=\"let item of items; let i = index\" class=\"nav-item\">\n    <a href=\"#\" class=\"nav-link\" role=\"tab\" [ngClass]=\"{ active: i === activeIndex }\" (click)=\"onClick($event, i)\">\n      <ng-container *ngTemplateOutlet=\"item.template\"></ng-container>\n    </a>\n  </div>\n</div>\n", directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tab-group-ui',
                    templateUrl: './tab-group.component.html',
                }]
        }], propDecorators: { initialSelection: [{
                type: Input
            }], select: [{
                type: Output
            }], items: [{
                type: ContentChildren,
                args: [TabComponent]
            }] } });

class TabModule {
}
TabModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TabModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabModule, declarations: [TabGroupComponent, TabComponent], imports: [CommonModule], exports: [TabGroupComponent, TabComponent] });
TabModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [TabGroupComponent, TabComponent],
                    exports: [TabGroupComponent, TabComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TabComponent, TabGroupComponent, TabModule };
//# sourceMappingURL=backbase-ui-ang-tab.js.map
