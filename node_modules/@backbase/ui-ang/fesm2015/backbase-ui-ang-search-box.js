import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, forwardRef, Component, Input, Output, ViewChild, NgModule } from '@angular/core';
import * as i6 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import * as i7 from '@ng-bootstrap/ng-bootstrap';
import { NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';
import { defaultSize, InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import * as i1 from '@backbase/foundation-ang/future';
import * as i2 from '@backbase/ui-ang/services';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i8 from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';

const SIZE_MEDIUM = defaultSize;
const SIZE_SMALL = SIZE_MEDIUM / 2;
const KEYWORD_SMALL = 'sm';
const KEYWORD_MEDIUM = 'md';
/**
 * @name SearchBoxComponent
 *
 * @description
 * Component that provides you a search input field.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - Set aria-describedby  with an element id that contains a detailed decription about the Search box.
 *  - aria-label or  aria-labelledby can be used to display the label for search box.
 *
 * If  showSearch = true , searchLabel is discernible text for search button.
 * If  showClear = true , clearLabel is discernible text for clear button.
 *
 */
class SearchBoxComponent extends InputBaseComponent {
    constructor(cd, deprecationsService, renderer, domAttrService, elem) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        this.renderer = renderer;
        this.domAttrService = domAttrService;
        this.elem = elem;
        /**
         * The placeholder text to display in the input.
         */
        this.placeholder = '';
        /**
         * The maximum length of the search text.
         */
        this.maxLength = '140';
        /**
         * The square border for search box.
         */
        this.squareBorder = false;
        /**
         * Whether to show the search button icon before the text.
         */
        this.showSearch = false;
        /**
         * Whether to show the clear button icon after the text.
         */
        this.showClear = false;
        /**
         * The aria label used when the search button is in focus.
         */
        this.searchLabel = 'Search button';
        /**
         * The aria label used when the clear button is in focus.
         */
        this.clearLabel = 'Clear button';
        /**
         * The autocomplete attribute value.
         */
        this.autocomplete = '';
        /**
         * The event emitter called when a search is submitted.
         */
        this.submit = new EventEmitter();
        /**
         * The event emitter called when the clear button is clicked.
         */
        this.clear = new EventEmitter();
        this.valueChange = this._valueChange;
        this.labelId = `bb_searchbox_label_${this.id}`;
        this.hasAppendContent = true;
    }
    onSubmit() {
        this.submit.emit(this.value);
    }
    ngAfterViewInit() {
        var _a;
        this.domAttrService.moveAriaAttributes(this.elem.nativeElement, (_a = this.inputField) === null || _a === void 0 ? void 0 : _a.nativeElement, this.renderer);
        if (this.inputField !== undefined) {
            this.inputField.nativeElement.removeAttribute('aria-multiline');
        }
        if (this.content === undefined) {
            return;
        }
        this.hasAppendContent = this.content.nativeElement && this.content.nativeElement.children.length > 0;
        this.cd.detectChanges();
    }
    ngDoCheck() {
        var _a;
        if (this.searchBox) {
            const listBoxElem = (_a = this.searchBox.nativeElement) === null || _a === void 0 ? void 0 : _a.querySelector('[role="listbox"]:not([aria-labelledby])');
            if (listBoxElem) {
                this.renderer.setAttribute(listBoxElem, 'aria-labelledby', this.labelId);
            }
        }
    }
    onClear() {
        this.value = '';
        if (this.inputField !== undefined) {
            this.inputField.nativeElement.focus();
        }
        this.clear.emit();
    }
    onFocus() {
        if (this.searchBox === undefined) {
            return;
        }
        this.searchBox.nativeElement.classList.add('bb-focus');
        super.onFocus();
    }
    onBlur() {
        if (this.searchBox === undefined) {
            return;
        }
        this.searchBox.nativeElement.classList.remove('bb-focus');
        super.onBlur();
    }
    isClearVisible() {
        return this.showClear && this.value;
    }
    focusEditableElement() {
        if (this.searchBox) {
            this.searchBox.nativeElement.focus();
        }
    }
    getKeywordBySize(size) {
        if (size <= SIZE_SMALL) {
            return KEYWORD_SMALL;
        }
        else {
            return KEYWORD_MEDIUM;
        }
    }
    getSizeByKeyword(keyword) {
        const sizeKeywords = {
            [KEYWORD_SMALL]: SIZE_SMALL,
            [KEYWORD_MEDIUM]: SIZE_MEDIUM,
        };
        return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;
    }
    onSelect(event) {
        var _a, _b;
        return (_b = (_a = this.typeaheadOptions) === null || _a === void 0 ? void 0 : _a.selectItem) === null || _b === void 0 ? void 0 : _b.call(_a, event);
    }
}
SearchBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }, { token: i0.Renderer2 }, { token: i2.DomAttributesService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
SearchBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SearchBoxComponent, selector: "bb-search-box-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", squareBorder: "squareBorder", typeaheadOptions: "typeaheadOptions", showSearch: "showSearch", showClear: "showClear", searchLabel: "searchLabel", clearLabel: "clearLabel", autocomplete: "autocomplete" }, outputs: { submit: "submit", clear: "clear", valueChange: "valueChange" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => SearchBoxComponent),
        },
    ], viewQueries: [{ propertyName: "content", first: true, predicate: ["content"], descendants: true }, { propertyName: "searchBox", first: true, predicate: ["searchBox"], descendants: true, static: true }, { propertyName: "inputField", first: true, predicate: ["inputField"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\" [attr.id]=\"labelId\" (click)=\"onFocus()\">{{ label }}</label>\n<div\n  #searchBox\n  role=\"search\"\n  class=\"bb-search-box input-group\"\n  [ngClass]=\"[\n    squareBorder ? 'rounded' : '',\n    showSearch ? 'bb-search-box--has-search bb-search-box-search' : '',\n    showSearch || showClear ? 'bb-search-box-visible' : '',\n    isClearVisible() ? 'bb-search-box--has-clear' : '',\n    typeaheadOptions && typeaheadOptions.groupCssClasses ? typeaheadOptions.groupCssClasses : '',\n    getKeywordBySize(size) ? 'bb-search-box--' + getKeywordBySize(size) : ''\n  ]\"\n>\n  <div class=\"bb-search-box__search-button input-group-prepend\" *ngIf=\"showSearch\">\n    <button\n      bbButton\n      [attr.data-role]=\"'bb-search-button'\"\n      (click)=\"onSubmit()\"\n      color=\"link\"\n      [buttonSize]=\"getKeywordBySize(size)\"\n      [attr.aria-label]=\"searchLabel\"\n      [disabled]=\"disabled\"\n    >\n      <bb-icon-ui name=\"search\" [size]=\"size\"></bb-icon-ui>\n    </button>\n  </div>\n  <ng-container *ngIf=\"typeaheadOptions; else simpleSearch\">\n    <input\n      #inputField\n      type=\"search\"\n      id=\"{{ id }}\"\n      class=\"bb-search-box__input form-control\"\n      [ngClass]=\"[size ? 'form-control-' + getKeywordBySize(size) : '']\"\n      [placeholder]=\"placeholder\"\n      [readOnly]=\"readonly\"\n      [disabled]=\"disabled\"\n      [attr.aria-autocomplete]=\"ariaAutocomplete\"\n      [attr.aria-controls]=\"ariaControls\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-describedby]=\"ariaDescribedby\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-expanded]=\"ariaExpanded\"\n      [attr.role]=\"role\"\n      [attr.aria-invalid]=\"ariaInvalid\"\n      [attr.aria-owns]=\"ariaOwns\"\n      [attr.aria-activedescendant]=\"ariaActivedescendant\"\n      [attr.maxlength]=\"maxLength\"\n      [ngModel]=\"value\"\n      (ngModelChange)=\"onValueChange($event)\"\n      [ngbTypeahead]=\"typeaheadOptions?.ngbTypeahead\"\n      [editable]=\"typeaheadOptions?.editable !== false\"\n      [focusFirst]=\"typeaheadOptions?.focusFirst !== false\"\n      [showHint]=\"typeaheadOptions?.showHint === true\"\n      [placement]=\"typeaheadOptions?.placement || 'bottom-left'\"\n      [inputFormatter]=\"typeaheadOptions?.inputFormatter\"\n      [resultFormatter]=\"typeaheadOptions?.resultFormatter\"\n      [resultTemplate]=\"typeaheadOptions?.resultTemplate\"\n      [required]=\"required\"\n      [bbFocus]=\"autofocus\"\n      (selectItem)=\"onSelect($event)\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (keyup.enter)=\"onSubmit()\"\n      [attr.data-role]=\"'search-input'\"\n      [autocomplete]=\"autocomplete\"\n    />\n  </ng-container>\n\n  <div class=\"bb-search-box__clear-button input-group-append\" *ngIf=\"isClearVisible()\">\n    <button\n      bbButton\n      [attr.data-role]=\"'bb-clear-button'\"\n      (click)=\"onClear()\"\n      color=\"link\"\n      [attr.aria-label]=\"clearLabel\"\n      [buttonSize]=\"getKeywordBySize(size)\"\n      [disabled]=\"disabled\"\n    >\n      <bb-icon-ui name=\"cancel\" size=\"sm\"></bb-icon-ui>\n    </button>\n  </div>\n  <div *ngIf=\"hasAppendContent\" class=\"bb-search-box__append-content input-group-append\" #content>\n    <ng-content></ng-content>\n  </div>\n</div>\n\n<ng-template #simpleSearch>\n  <input\n    #inputField\n    type=\"search\"\n    [attr.id]=\"id\"\n    [attr.aria-autocomplete]=\"ariaAutocomplete\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-describedby]=\"ariaDescribedby\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [attr.aria-expanded]=\"ariaExpanded\"\n    [attr.role]=\"role\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-owns]=\"ariaOwns\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    class=\"bb-search-box__simple-input form-control\"\n    [placeholder]=\"placeholder\"\n    [attr.maxlength]=\"maxLength\"\n    [ngModel]=\"value\"\n    [readOnly]=\"readonly\"\n    [required]=\"required\"\n    [disabled]=\"disabled\"\n    [bbFocus]=\"autofocus\"\n    (ngModelChange)=\"onValueChange($event)\"\n    (keyup.enter)=\"onSubmit()\"\n    (focus)=\"onFocus()\"\n    (blur)=\"onBlur()\"\n    [attr.data-role]=\"'search-input'\"\n    [ngClass]=\"[size ? 'form-control-' + getKeywordBySize(size) : '']\"\n    [autocomplete]=\"autocomplete\"\n  />\n</ng-template>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.NgbTypeahead, selector: "input[ngbTypeahead]", inputs: ["autocomplete", "placement", "container", "editable", "focusFirst", "showHint", "inputFormatter", "ngbTypeahead", "resultFormatter", "resultTemplate", "popupClass"], outputs: ["selectItem"], exportAs: ["ngbTypeahead"] }, { type: i6.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-search-box-ui',
                    templateUrl: './search-box.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => SearchBoxComponent),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }, { type: i0.Renderer2 }, { type: i2.DomAttributesService }, { type: i0.ElementRef }]; }, propDecorators: { placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], squareBorder: [{
                type: Input
            }], typeaheadOptions: [{
                type: Input
            }], showSearch: [{
                type: Input
            }], showClear: [{
                type: Input
            }], searchLabel: [{
                type: Input
            }], clearLabel: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], submit: [{
                type: Output
            }], clear: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], content: [{
                type: ViewChild,
                args: ['content']
            }], searchBox: [{
                type: ViewChild,
                args: ['searchBox', { static: true }]
            }], inputField: [{
                type: ViewChild,
                args: ['inputField']
            }] } });

class SearchBoxModule {
}
SearchBoxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SearchBoxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxModule, declarations: [SearchBoxComponent], imports: [CommonModule, NgbTypeaheadModule, ButtonModule, IconModule, FormsModule, BaseClassesModule, FocusModule], exports: [SearchBoxComponent] });
SearchBoxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxModule, imports: [[CommonModule, NgbTypeaheadModule, ButtonModule, IconModule, FormsModule, BaseClassesModule, FocusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbTypeaheadModule, ButtonModule, IconModule, FormsModule, BaseClassesModule, FocusModule],
                    declarations: [SearchBoxComponent],
                    exports: [SearchBoxComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { SearchBoxComponent, SearchBoxModule };
//# sourceMappingURL=backbase-ui-ang-search-box.js.map
