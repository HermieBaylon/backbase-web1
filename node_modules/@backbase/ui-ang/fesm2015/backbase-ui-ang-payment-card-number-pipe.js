import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Pipe, NgModule } from '@angular/core';
import * as i2 from '@backbase/foundation-ang/future';
import { FutureFeaturesModule } from '@backbase/foundation-ang/future';
import { segment } from '@backbase/ui-ang/util';
import * as i1 from '@backbase/ui-ang/account-number-pipe';

/**
 * Default payment card number format.
 */
const DefaultPaymentCardNumberFormat = {
    length: 16,
    maskRange: [0, 12],
    segments: 4,
};
/**
 * Lookup object containing payment card number formats for common payment card
 * vendors.
 */
const PaymentCardNumberVendors = {
    mastercard: {
        length: 16,
        maskRange: [0, 12],
        segments: 4,
    },
    visa: {
        length: 16,
        maskRange: [0, 12],
        segments: 4,
    },
    'visa-debit': {
        length: 16,
        maskRange: [0, 12],
        segments: 4,
    },
    'diners-club': {
        length: 16,
        maskRange: [0, 12],
        segments: 4,
    },
    'american-express': {
        length: 15,
        maskRange: [0, 11],
        segments: [4, 6, 5],
    },
};
/**
 * A feature flag that enables numbers masking synchronization with backend
 * If set FE should not apply any masking and rely on the backend masking behavior
 *
 * @internal
 */
const SYNCHRONIZE_NUMBERS_MASKING = {
    name: 'SYNCHRONIZE_NUMBERS_MASKING',
    description: 'Enables accounts masking synchronization with backend',
};

/**
 * @name pad
 * @inner
 * @param value - the string to pad
 * @param length - the length to pad the string to
 * @param ch - the character to pad the string width
 * @param leftPad - whether to pad left (true) or pad right (false)
 *
 * @description
 * Pad a string to specified length with specified character
 */
function pad(value, length, ch = '0', leftPad = true) {
    const paddingSize = Math.max(length - value.length, 0);
    const padding = ch.repeat(paddingSize);
    return leftPad ? padding + value : value + padding;
}
/**
 * @name mask
 * @inner
 * @param value - the string to mask
 * @param indexStart - the index to start masking from
 * @param indexEnd - the index to end masking
 * @param maskChar - the character to mask with
 *
 * @description
 * Mask part of a string with specified character
 */
function mask(value, [indexStart, indexEnd], maskChar = '*') {
    let maskedString = '';
    if (indexEnd < 0) {
        const charsToShow = value.slice(indexEnd);
        maskedString = maskChar.repeat(value.length - charsToShow.length) + charsToShow;
    }
    else {
        const maskStr = maskChar.repeat(indexEnd - indexStart);
        maskedString = value.substring(0, indexStart) + maskStr + value.substring(indexEnd);
    }
    return maskedString;
}
class PaymentCardNumberPipe {
    /**
     * @name PaymentCardNumberPipe#constructor
     * @param accountsDisplayingFormatService - AccountsDisplayingFormatService
     * @param featuresService - FeaturesService
     *
     * @internal
     */
    constructor(accountsDisplayingFormatService, featuresService) {
        this.accountsDisplayingFormatService = accountsDisplayingFormatService;
        this.featuresService = featuresService;
        this.defaultFormat = this.accountsDisplayingFormatService.getDefaultFormat('cardNumber');
    }
    /**
     * @name PaymentCardNumberPipe#transform
     * @param value - the string to transform
     * @param config - the formatting configuration
     * @param maskChar - the character to mask with, deprecated from 6.0.0
     *
     * @description
     * Formats a card number, mask it and split it into segments
     * - do not set config parameter to use with a global accountsFormat configuration
     * - use config parameter to apply a custom accountsFormat configuration
     */
    transform(value, config, maskChar = '•') {
        const displayingFormat = config !== null && config !== void 0 ? config : this.defaultFormat;
        let formattedNumber = value.toString();
        if (config && !this.featuresService.isEnabled(SYNCHRONIZE_NUMBERS_MASKING)) {
            formattedNumber = pad(formattedNumber, config.length, maskChar);
            formattedNumber = mask(formattedNumber, config.maskRange, maskChar);
        }
        return segment(formattedNumber, displayingFormat.segments);
    }
}
PaymentCardNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipe, deps: [{ token: i1.AccountsDisplayingFormatService }, { token: i2.FeaturesService }], target: i0.ɵɵFactoryTarget.Pipe });
PaymentCardNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipe, name: "paymentCardNumber" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'paymentCardNumber',
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountsDisplayingFormatService }, { type: i2.FeaturesService }]; } });

class PaymentCardNumberModule {
}
PaymentCardNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PaymentCardNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberModule, declarations: [PaymentCardNumberPipe], imports: [CommonModule, i2.FutureFeaturesModule], exports: [PaymentCardNumberPipe] });
PaymentCardNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberModule, imports: [[CommonModule, FutureFeaturesModule.allowOptIn([SYNCHRONIZE_NUMBERS_MASKING])]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FutureFeaturesModule.allowOptIn([SYNCHRONIZE_NUMBERS_MASKING])],
                    declarations: [PaymentCardNumberPipe],
                    exports: [PaymentCardNumberPipe],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DefaultPaymentCardNumberFormat, PaymentCardNumberModule, PaymentCardNumberPipe, SYNCHRONIZE_NUMBERS_MASKING };
//# sourceMappingURL=backbase-ui-ang-payment-card-number-pipe.js.map
