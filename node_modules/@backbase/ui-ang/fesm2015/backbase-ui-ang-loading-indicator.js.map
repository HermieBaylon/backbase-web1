{"version":3,"file":"backbase-ui-ang-loading-indicator.js","sources":["../../../../libs/ui-ang/loading-indicator/loading-indicator.component.ts","../../../../libs/ui-ang/loading-indicator/loading-indicator.component.html","../../../../libs/ui-ang/loading-indicator/loading-indicator.module.ts","../../../../libs/ui-ang/loading-indicator/backbase-ui-ang-loading-indicator.ts"],"sourcesContent":["import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, OnInit } from '@angular/core';\n\nexport type LoadingIndicatorSize = 'lg' | 'md' | 'sm';\n\n/**\n * @name LoadingIndicatorComponent\n *\n * @description\n * Component that displays a loading spinner and message.\n */\n@Component({\n  selector: 'bb-loading-indicator-ui',\n  templateUrl: './loading-indicator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoadingIndicatorComponent implements OnInit {\n  /**\n   * The text to display under the loading indicator.\n   */\n  @Input() text: string | undefined;\n  /**\n   * The size of the loading indicator.\n   * Defaults to 'md'.\n   */\n  @Input() loaderSize: LoadingIndicatorSize = 'md';\n  /**\n   * Delay in milliseconds before the loading indicator display.\n   * Default to 0.\n   */\n  @Input() showDelay = 0;\n  /**\n   * Defines whether gray background should be displayed.\n   * Default to false (background hidden).\n   */\n  @Input() hasBackground = false;\n  /**\n   * Define if spinner should be shown inline without any default padding and margin.\n   * Default to false (show default padding and margin).\n   */\n  @Input() inline = false;\n\n  showLoadingState = false;\n\n  constructor(private readonly ref: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    setTimeout(() => {\n      this.showLoadingState = true;\n      this.ref.markForCheck();\n    }, this.showDelay);\n  }\n}\n","<ng-container *ngIf=\"!inline; else inlineLoading\">\n  <div\n    *ngIf=\"showLoadingState\"\n    [ngClass]=\"{ jumbotron: hasBackground }\"\n    data-role=\"loading-indicator\"\n    class=\"bb-state-container\"\n  >\n    <ng-container *ngTemplateOutlet=\"loadingIndicator\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-template #inlineLoading>\n  <ng-container *ngIf=\"showLoadingState\">\n    <ng-container *ngTemplateOutlet=\"loadingIndicator\"></ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #loadingIndicator>\n  <div\n    data-role=\"loading-indicator-wrapper\"\n    class=\"bb-loading-indicator bb-loading-indicator--{{ loaderSize }}\"\n    [ngClass]=\"{ 'bb-loading-indicator--inline': inline }\"\n  >\n    <svg\n      aria-label=\"Loading indicator\"\n      i18n-aria-label=\"Loading indicator| Label for the loading indicator @@bb-loading-indicator-ui.indicator\"\n      class=\"bb-loading-indicator__circle\"\n      preserveAspectRatio=\"xMinYMin meet\"\n    >\n      <circle class=\"bb-loading-indicator__path\" r=\"40%\" cx=\"50%\" cy=\"50%\" fill=\"none\" stroke=\"currentColor\"></circle>\n    </svg>\n    <div *ngIf=\"text\" data-role=\"loading-indicator-text\" class=\"bb-loading-indicator__text\">{{ text }}</div>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { LoadingIndicatorComponent } from './loading-indicator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [LoadingIndicatorComponent],\n  exports: [LoadingIndicatorComponent],\n})\nexport class LoadingIndicatorModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}