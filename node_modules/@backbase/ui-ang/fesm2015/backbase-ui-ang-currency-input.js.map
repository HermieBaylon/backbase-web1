{"version":3,"file":"backbase-ui-ang-currency-input.js","sources":["../../../../libs/ui-ang/currency-input/currency-input.component.ts","../../../../libs/ui-ang/currency-input/currency-input.component.html","../../../../libs/ui-ang/currency-input/currency-input.module.ts","../../../../libs/ui-ang/currency-input/backbase-ui-ang-currency-input.ts"],"sourcesContent":["import { DecimalPipe, getLocaleNumberSymbol, getNumberOfCurrencyDigits, NumberSymbol } from '@angular/common';\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  OnInit,\n  Optional,\n  Output,\n  Self,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport BigNumber from 'bignumber.js';\nimport { getInputNextId } from '@backbase/ui-ang/base-classes';\nimport { DomAttributesService } from '@backbase/ui-ang/services';\nimport { idListAttr } from '@backbase/ui-ang/util';\n\nexport type ResultType = 'string' | 'number';\nconst defaultIntLength = 13;\nconst defaultDecimalPrecision = 2;\n\nexport interface CurrencyFieldsState {\n  currency: boolean;\n  integer: boolean;\n  decimal: boolean;\n}\n\n/**\n * @name CurrencyInputComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - aria-describedby\n *  - aria-invalid\n *  - aria-labelledby\n *  - integerLabelSrOnly\n *  - decimalLabelSrOnly\n * @description\n * Component for displaying and managing currency and it amount\n *\n */\n@Component({\n  selector: 'bb-currency-input-ui',\n  templateUrl: './currency-input.component.html',\n  providers: [DecimalPipe],\n})\nexport class CurrencyInputComponent implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit {\n  private currencyList: Array<string> = [];\n  private currencyDisabledState: CurrencyFieldsState = {\n    currency: false,\n    integer: false,\n    decimal: false,\n  };\n  private currency: string | undefined;\n  private intMaxLen: number | undefined;\n  readonly decimalSeparator: string = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);\n  private readonly localeSeparatorSymbols = [\n    this.decimalSeparator,\n    getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup),\n  ];\n\n  private _decMaxLen: number | undefined;\n\n  /**\n   * Configure the maximum number of decimals.\n   * When greater than the default number of decimals for the specified currency, this value will take precedence.\n   * Configuring this value can affect the input placeholder.\n   */\n  @Input()\n  get decMaxLen(): number | undefined {\n    return typeof this._decMaxLen === 'number' ? this._decMaxLen : this.getDecimalDigits(this.currency || '');\n  }\n\n  set decMaxLen(value: number | undefined) {\n    this._decMaxLen = value;\n  }\n\n  /**\n   * Number of minimum currency precision. Defaults to 2.\n   */\n  @Input() decMinLen = defaultDecimalPrecision;\n\n  /**\n   * Non-configurable placeholder for the decimal input.\n   * Displays a zero digit for every digit that is allowed in the decimal field.\n   */\n  get decPlaceholder(): string {\n    return '0'.repeat(this.decMaxLen || 0);\n  }\n\n  readonly currControl = new FormControl();\n  readonly intControl = new FormControl();\n  readonly decControl = new FormControl();\n\n  /**\n   * The placeholder for the input. Defaults to 0.\n   */\n  @Input() placeholder = '0';\n  /**\n   * For set output type string/number, by default 'number', when  need work with long number\n   * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'\n   */\n  @Input() resultType: ResultType = 'number';\n  /**\n   * Whether there should be only the integer part.\n   * You have to keep in mind, that if you have decimal part, even \".00\"\n   * you will not be able to remove it\n   */\n  @Input() integer = false;\n\n  /**\n   * Whether the input is required. Defaults to false.\n   */\n  @Input() required = false;\n\n  /**\n   * Whether the input is read only. Defaults to false.\n   */\n  @Input() readonly = false;\n\n  /**\n   * Whether the input is disabled. Defaults to false.\n   */\n  @Input()\n  set disabled(disabled: boolean | CurrencyFieldsState) {\n    if (typeof disabled === 'boolean') {\n      this.currencyDisabledState = {\n        currency: disabled,\n        integer: disabled,\n        decimal: disabled,\n      };\n    } else {\n      this.currencyDisabledState = disabled;\n    }\n  }\n\n  get disabled() {\n    return this.currencyDisabledState;\n  }\n\n  /**\n   * Whether integer label is only visible for screen readers.\n   * By default is visible if it is needed to hide change this property\n   * to \"true\" and it will have class \"sr-only\"\n   */\n  @Input() integerLabelSrOnly = false;\n  /**\n   * By default is visible if it is needed to hide change this property\n   * to \"true\" and it will have class \"sr-only\"\n   * By default is hidden and accessible only for screen reader\n   */\n  @Input() decimalLabelSrOnly = false;\n\n  /**\n   * Currency list to be displayed in the dropdown.\n   *\n   * Note: Non-empty currency list is required for the currency symbol\n   * field to be shown. Otherwise, only the amount fields will be shown.\n   *\n   * Additionally, If only a single currency provided, the dropdown of\n   * the currency selection will be disabled and its value set to that single currency\n   */\n\n  @Input()\n  set currencies(list: Array<string>) {\n    this.currencyList = list;\n    if (this.currencyList && this.currencyList.length > 1) {\n      this.currControl.enable();\n    } else {\n      this.currControl.disable();\n    }\n    // if currency is not set, use first item from the list\n    if (this.currencyList && (this.currency === undefined || this.currencyList.indexOf(this.currency) === -1)) {\n      // [FIXME] Nothing guarantees that the currencyList isn't empty\n      this.updateCurrency(this.currencyList[0]);\n    }\n  }\n\n  /**\n   * Whether decimal text is aligned to the right.\n   * By default is false\n   */\n  @Input() isRightAligned = false;\n\n  private _integerId = getInputNextId();\n  private _decimalId = getInputNextId();\n  private _labelClasses: string | undefined;\n\n  public readonly currencyInputId: string;\n  public readonly currencyLabelId: string;\n  public readonly decimalInputId: string;\n  public readonly decimalLabelId: string;\n  public readonly integerInputId: string;\n  public readonly integerLabelId: string;\n  public readonly validationMessagesId: string;\n  public readonly idListAttr = idListAttr;\n\n  protected initialized = false;\n\n  /**\n   * The id for the integer input. Defaults to unique string.\n   * Used to map the label to the input.\n   */\n  @Input()\n  set integerId(value: string) {\n    this._integerId = value;\n  }\n\n  get integerId() {\n    return this._integerId;\n  }\n\n  /**\n   * The id for the decimal input. Defaults to unique string.\n   * Used to map the label to the input.\n   */\n  @Input()\n  set decimalId(value: string) {\n    this._decimalId = value;\n  }\n\n  get decimalId() {\n    return this._decimalId;\n  }\n\n  /**\n   * The label for the integer input.\n   */\n  @Input() integerLabel = '';\n  /**\n   * The label for the decimal input.\n   */\n  @Input() decimalLabel = '';\n  /**\n   * The label for the currency input.\n   */\n  @Input() currencyLabel = '';\n\n  /**\n   * Flag is used to allow input negative value\n   */\n  @Input() allowNegativeValue = false;\n  /**\n   * Aria label for the currency dropdown.\n   */\n  @Input() currencyListAriaLabel = 'Currency List Dropdown';\n  /**\n   * Aria label for the currency list with one item.\n   */\n  @Input() currencyListWithOnItemAriaLabel = 'Currency';\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('aria-describedby') ariaDescribedby: string | undefined;\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('aria-labelledby') ariaLabelledby: string | undefined;\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('aria-invalid') ariaInvalid: string | undefined;\n\n  @ViewChild('integerInput', { static: true }) intEl: ElementRef | undefined;\n  @ViewChild('decimalsInput') decEl: ElementRef | undefined;\n\n  /**\n   * An event emitter for on blur actions.\n   */\n  @Output() blur = new EventEmitter<FocusEvent | void>();\n\n  constructor(\n    private readonly el: ElementRef,\n    @Inject(LOCALE_ID) private readonly locale: string,\n    private domAttributeService: DomAttributesService,\n    @Optional() @Self() public parentFormControl: NgControl,\n  ) {\n    this.currencyInputId = this.domAttributeService.generateId();\n    this.currencyLabelId = this.domAttributeService.generateId();\n    this.decimalInputId = this.domAttributeService.generateId();\n    this.decimalLabelId = this.domAttributeService.generateId();\n    this.integerInputId = this.domAttributeService.generateId();\n    this.integerLabelId = this.domAttributeService.generateId();\n    this.validationMessagesId = this.domAttributeService.generateId();\n\n    BigNumber.config({\n      FORMAT: {\n        // grouping separator of the integer part\n        groupSeparator: getLocaleNumberSymbol(this.locale, NumberSymbol.Group),\n        // primary grouping size of the integer part\n        groupSize: 3,\n      },\n    });\n    if (this.parentFormControl != null) {\n      // Setting the value accessor directly (instead of using\n      // the providers) to avoid running into a circular import.\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit() {\n    this.initialized = true;\n    if (!this.integerLabel || !this.decimalLabel) {\n      console.warn(\n        `\n          Found an input from '\n          ${this.constructor.name}\n          ' without 'label' or 'aria-label' attribute, please provide one of them\n        `,\n      );\n    }\n\n    this.setDisabled(this.currencyDisabledState);\n\n    this.formatInteger();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.disabled) {\n      this.setDisabled(this.currencyDisabledState);\n    }\n  }\n\n  decOnBlur($event: FocusEvent) {\n    this.markAsTouched($event);\n    this.formatDecimal(this.decControl);\n  }\n\n  get cur() {\n    return this.currency;\n  }\n\n  get curList() {\n    return this.currencyList;\n  }\n\n  ngAfterViewInit(): void {\n    const len = this.el.nativeElement.getAttribute('maxlength');\n    this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;\n  }\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  onPress($event: any) {\n    this.focusDecEl($event.key);\n\n    const keyCode = $event.keyCode || $event.which;\n    const key = String.fromCharCode(keyCode);\n\n    // allow to enter 'minus' only at the first position and if correspondent flag is enabled\n    const isLeadingMinusPosition =\n      this.allowNegativeValue && this.intEl && this.intEl.nativeElement.selectionStart === 0 && key === '-';\n\n    // regexp is used here to support both of regular keyboard's numbers and numpad's numbers\n    if (!(isLeadingMinusPosition || /^\\d$/.test(key)) && $event.keyCode !== 8 && $event.keyCode !== 9) {\n      $event.preventDefault();\n    }\n  }\n\n  onInput() {\n    const isFormatted = this.formatInteger();\n    if (isFormatted) {\n      this.triggerChange();\n    }\n  }\n\n  updateCurrency(currency?: string) {\n    this.currency = currency || this.currControl.value;\n    this.triggerChange();\n  }\n\n  checkValues() {\n    if (this.currency === undefined) {\n      return true;\n    }\n    if (!this.decControl.value && !this.intControl.value) {\n      this.onChange(null);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  formatDecimal(decControl: FormControl) {\n    const { value } = decControl;\n    if (value && this.decMaxLen && value.lenght < this.decMaxLen) {\n      const updatedValue = String(value).padEnd(this.decMaxLen, '0');\n      decControl.patchValue(updatedValue);\n    }\n  }\n\n  triggerChange() {\n    if (this.checkValues()) {\n      return;\n    }\n\n    const int: string = this.intControl.value || '0';\n\n    if (this.resultType === 'string') {\n      const currencyGroupSymbol = new RegExp(`\\\\${this.localeSeparatorSymbols[1]}`, 'g');\n      const whole: string = int.replace(currencyGroupSymbol, '');\n      const dec: string = this.decControl.value || '0';\n      const newAmount = whole + (dec !== '0' ? '.' + dec : '');\n      this.onChange({\n        currency: this.currency,\n        amount: newAmount,\n      });\n    } else {\n      const whole: number = parseInt(int.replace(/[^-\\d]/g, ''), 10);\n      const dec = parseFloat('0.' + this.decControl.value) || 0;\n      const sign = whole < 0 ? -1 : 1;\n      const newAmount = (Math.abs(whole) + dec) * sign;\n      this.onChange({\n        currency: this.currency,\n        amount: newAmount,\n      });\n    }\n  }\n\n  checkNumeric(numeric: any): string {\n    // removed all dashes except the first one\n    if (numeric.length > 0) {\n      numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');\n    }\n\n    numeric = this.sanitizeNumericValue(numeric);\n\n    return numeric === '' ? numeric : new BigNumber(numeric || 0).toFormat();\n  }\n\n  /**\n   * Formats integer to user-friendly format\n   *\n   * @returns Returns true in case of successful formatting, otherwise - false.\n   */\n  formatInteger(): boolean {\n    // The behavior of `formatInteger` is dependent on some component inputs,\n    // so don't format anything until the configuration is available.\n\n    if (!this.initialized || !this.intEl) {\n      return false;\n    }\n    if (!this.intControl.value) {\n      this.intControl.setValue('');\n\n      return true;\n    }\n    const offset = this.intEl.nativeElement.selectionStart - this.intControl.value.length;\n\n    const numeric: string = this.intControl.value.replace(this.allowNegativeValue ? /[^-\\d]/g : /\\D/g, '');\n    if (numeric === '-') {\n      this.intControl.setValue('-', { emitEvent: false });\n\n      return false;\n    }\n    const newVal = this.checkNumeric(numeric);\n    // extend maxlength (if set) with the amount of special chars\n    if (this.intMaxLen) {\n      const specialCount = newVal.replace(/\\d/g, '').length;\n      this.intEl.nativeElement.setAttribute('maxlength', '' + (this.intMaxLen + specialCount));\n    }\n\n    this.intControl.setValue(newVal);\n    const newLen = this.intControl.value.length;\n    const newPos = Math.max(offset + newLen, 0);\n    if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {\n      this.intEl.nativeElement.selectionStart = newPos;\n      this.intEl.nativeElement.selectionEnd = newPos;\n    }\n\n    return true;\n  }\n\n  /**\n   * Event handler for backspace key press, and check if correct number is deleted\n   */\n  onBackspace(el: HTMLInputElement) {\n    if (el.selectionStart) {\n      const selectionStartPosition = el.selectionStart - 1;\n      const value = el.value[selectionStartPosition];\n\n      if (this.localeSeparatorSymbols.includes(value)) {\n        el.setSelectionRange(selectionStartPosition, selectionStartPosition);\n      }\n    }\n  }\n\n  // method is used to correct rendered input's value if user entered '-' and left the field\n  correctInputValue($event: FocusEvent) {\n    this.markAsTouched($event);\n    const numeric = this.intControl.value;\n    if (numeric !== '-') {\n      return;\n    }\n    this.intControl.setValue('', { emitEvent: false });\n  }\n\n  writeValue(model: any | null): void {\n    if (!model) {\n      return;\n    }\n    // currency cannot be set to nothing\n    if (model.currency) {\n      this.currency = model.currency;\n      this.currControl.setValue(model.currency);\n    }\n\n    if (typeof model.amount === 'string' || typeof model.amount === 'number') {\n      const [whole, decimals] = ('' + model.amount).split('.');\n      this.intControl.setValue(whole);\n      this.decControl.setValue(decimals);\n    } else {\n      this.intControl.setValue('');\n      this.decControl.setValue('');\n    }\n\n    this.formatInteger();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  markAsTouched($event: FocusEvent) {\n    this.blur.emit($event);\n    this.onTouched();\n  }\n\n  protected setDisabled(disableState: CurrencyFieldsState) {\n    if (disableState.currency) {\n      this.currControl.disable();\n    } else {\n      this.currControl.enable();\n    }\n    if (disableState.integer) {\n      this.intControl.disable();\n    } else {\n      this.intControl.enable();\n    }\n    if (disableState.decimal) {\n      this.decControl.disable();\n    } else {\n      this.decControl.enable();\n    }\n  }\n\n  private focusDecEl(key: string): void {\n    if (this.decEl && ['.', ','].indexOf(key) !== -1) {\n      this.decEl.nativeElement.focus();\n    }\n  }\n\n  /**\n   * Make sure that numeric value doesn't exceed max length (if set)\n   * this might happen in case value is pasted to input that has extended max length\n   *\n   * @param numeric\n   */\n  private sanitizeNumericValue(numeric: string): string {\n    if (this.intMaxLen && numeric) {\n      return numeric.slice(0, this.intMaxLen);\n    }\n\n    return numeric;\n  }\n\n  /**\n   * If currency doesn't have decimal part, decimal placeholder\n   * will be set to default decMinLen\n   */\n  private getDecimalDigits(currency: string) {\n    return getNumberOfCurrencyDigits(currency) === 0 ? this.decMinLen : getNumberOfCurrencyDigits(currency);\n  }\n}\n","<div class=\"bb-currency-input\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div *ngIf=\"curList && curList.length\" class=\"bb-currency-input__currency-selector selector bb-stack__item\">\n      <label\n        class=\"sr-only\"\n        *ngIf=\"currencyListAriaLabel || currencyListWithOnItemAriaLabel\"\n        for=\"{{ currencyInputId }}\"\n        [attr.aria-label]=\"currencyListWithOnItemAriaLabel\"\n        id=\"{{ currencyLabelId }}\"\n        [attr.data-role]=\"'currency-input-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!currencyListAriaLabel || !!currencyListWithOnItemAriaLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ curList && curList.length > 1 ? currencyListAriaLabel : currencyListWithOnItemAriaLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Currency label | Label for currency code dropdown of the Currency Input component\n              @@bb-currency-input-ui.currency-input-label\"\n            >Currency</ng-container\n          >\n        </ng-container>\n      </label>\n      <ng-container [ngSwitch]=\"readonly || (curList && curList.length === 1)\">\n        <input\n          *ngSwitchCase=\"true\"\n          type=\"text\"\n          (blur)=\"markAsTouched($event)\"\n          [id]=\"currencyInputId\"\n          [readonly]=\"true\"\n          [required]=\"required\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          class=\"form-control bb-text-align-center\"\n          value=\"{{ cur }}\"\n          [attr.data-role]=\"'currency-input-currency-readonly'\"\n        />\n        <bb-dropdown-single-select-ui\n          *ngSwitchDefault\n          [id]=\"currencyInputId\"\n          class=\"bb-block\"\n          [placeholder]=\"curList[0]\"\n          [options]=\"curList\"\n          [readonly]=\"readonly\"\n          [required]=\"required\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          (change)=\"updateCurrency(); markAsTouched($event)\"\n          [formControl]=\"currControl\"\n          [attr.data-role]=\"'currency-input-currency-selector'\"\n        ></bb-dropdown-single-select-ui>\n      </ng-container>\n    </div>\n\n    <div\n      class=\"bb-currency-input__integer bb-stack__item bb-stack__item--spacing-sm\"\n      [class.ng-touched]=\"intControl.touched || decControl.touched || parentFormControl?.touched\"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!integerLabel || integerLabelSrOnly\"\n        for=\"{{ integerInputId }}\"\n        id=\"{{ integerLabelId }}\"\n        [attr.data-role]=\"'currency-input-integer-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!integerLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ integerLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Integer label | Label for integer part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.integer-input-label\"\n            >Integer</ng-container\n          >\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ integerInputId }}\"\n        [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, integerLabelId)\"\n        name=\"integer\"\n        type=\"text\"\n        size=\"5\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keydown.backspace)=\"onBackspace(integerInput)\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"onInput()\"\n        (blur)=\"correctInputValue($event)\"\n        [formControl]=\"intControl\"\n        class=\"form-control bb-text-align-right\"\n        placeholder=\"{{ placeholder }}\"\n        #integerInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'currency-input-integer-input'\"\n      />\n    </div>\n\n    <span *ngIf=\"!integer && decMaxLen\" class=\"bb-stack__item bb-stack__item--spacing-sm\">{{ decimalSeparator }}</span>\n\n    <div\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-currency-input__decimal\"\n      [class.ng-touched]=\"intControl.touched || decControl.touched || parentFormControl?.touched\"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!decimalLabel || decimalLabelSrOnly\"\n        for=\"{{ decimalInputId }}\"\n        id=\"{{ decimalLabelId }}\"\n        [attr.data-role]=\"'currency-input-decimal-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!decimalLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ decimalLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Decimal label | Label for decimal part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.decimal-input-label\"\n          >\n            Decimals\n          </ng-container>\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ decimalInputId }}\"\n        [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, decimalLabelId)\"\n        name=\"decimals\"\n        type=\"text\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"triggerChange()\"\n        (blur)=\"decOnBlur($event)\"\n        [formControl]=\"decControl\"\n        class=\"form-control\"\n        [ngClass]=\"{ 'bb-text-align-right': isRightAligned }\"\n        maxlength=\"{{ decMaxLen }}\"\n        placeholder=\"{{ decPlaceholder }}\"\n        #decimalsInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'input-currency-decimals'\"\n      />\n    </div>\n  </div>\n  <div\n    class=\"bb-input-validation-message\"\n    aria-live=\"assertive\"\n    [id]=\"validationMessagesId\"\n    [attr.data-role]=\"'currency-input-validation-message'\"\n  >\n    <ng-content select=\"[bbValidationMessage]\"></ng-content>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CurrencyInputComponent } from './currency-input.component';\nimport { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';\nimport { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, DropdownSingleSelectModule],\n  declarations: [CurrencyInputComponent],\n  exports: [\n    CurrencyInputComponent,\n\n    // exporting validation message as it can be injected into the component template\n    InputValidationMessageModule,\n\n    /**\n     * @deprecated\n     * Exporting `FormsModule` is deprecated\n     **/\n    FormsModule,\n  ],\n})\nexport class CurrencyInputModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}