import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Pipe, NgModule } from '@angular/core';
import { segment } from '@backbase/ui-ang/util';

/**
 * Account numbers displaying format
 */
const DefaultAccountsDisplayingFormat = {
    segments: 4,
};
/**
 * Accounts displaying format Token
 */
const ACCOUNTS_DISPLAYING_FORMAT = new InjectionToken('ACCOUNTS_DISPLAYING_FORMAT_TOKEN');

/**
 * A configuration service for account numbers displaying format
 */
class AccountsDisplayingFormatService {
    /**
     * @name AccountsDisplayingFormatService#constructor
     * @param accountsDisplayingFormat - (Optional) AccountsDisplayingFormatConfiguration
     *
     * @internal
     */
    constructor(accountsDisplayingFormat) {
        this.accountsDisplayingFormat = accountsDisplayingFormat;
    }
    /**
     * @name AccountsDisplayingFormatService#getDefaultFormat
     * @param attributeType - numbers format attributeType
     * @param cardProviderName - card provider name
     *
     * @description
     * Gets default account numbers format per attribute type
     */
    getDefaultFormat(attributeType, cardProviderName) {
        var _a, _b;
        if (attributeType === 'cardNumber') {
            return this.getCardNumberFormat(cardProviderName);
        }
        return (_b = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a[attributeType]) !== null && _b !== void 0 ? _b : DefaultAccountsDisplayingFormat;
    }
    getCardNumberFormat(cardProviderName) {
        var _a;
        const cardNumber = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a.cardNumber;
        const providersConfiguration = Object.entries((cardNumber === null || cardNumber === void 0 ? void 0 : cardNumber.cardProviders) || {}).reduce((configuration, entry) => (Object.assign(Object.assign({}, configuration), { [entry[0].toLowerCase()]: entry[1] })), {});
        if (cardProviderName && providersConfiguration[cardProviderName.toLowerCase()]) {
            return providersConfiguration[cardProviderName.toLowerCase()];
        }
        return cardNumber !== null && cardNumber !== void 0 ? cardNumber : DefaultAccountsDisplayingFormat;
    }
}
AccountsDisplayingFormatService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDisplayingFormatService, deps: [{ token: ACCOUNTS_DISPLAYING_FORMAT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountsDisplayingFormatService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDisplayingFormatService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDisplayingFormatService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNTS_DISPLAYING_FORMAT]
                }] }]; } });

/**
 * Formats account numbers, applies different format configurations per number type
 */
class AccountNumberPipe {
    /**
     * @name AccountNumberPipe#constructor
     * @param accountsDisplayingFormatService - AccountsDisplayingFormatService
     *
     * @internal
     */
    constructor(accountsDisplayingFormatService) {
        this.accountsDisplayingFormatService = accountsDisplayingFormatService;
    }
    /**
     * @name AccountNumberPipe#transform
     * @param value - the string to transform
     * @param configuration - type of the value (iban, bban or number) or a custom numbers format
     * @param cardProviderName - card provider name
     *
     * @description
     * Formats account numbers
     *
     * to use with a global accountsFormat configuration
     * - '12345678' | bbAccountNumber:'iban'
     * to apply a custom configuration
     * - '12345678' | bbAccountNumber:{ segments: [2, 4, 2] }
     * to apply a 'visa' card number configuration
     * - '12345678' | bbAccountNumber:'cardNumber':'visa'
     */
    transform(value, configuration, cardProviderName) {
        const accountNumber = value.toString();
        const displayingFormat = typeof configuration === 'object'
            ? configuration
            : this.accountsDisplayingFormatService.getDefaultFormat(configuration, cardProviderName);
        return segment(accountNumber, displayingFormat.segments);
    }
}
AccountNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipe, deps: [{ token: AccountsDisplayingFormatService }], target: i0.ɵɵFactoryTarget.Pipe });
AccountNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipe, name: "bbAccountNumber" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbAccountNumber',
                }]
        }], ctorParameters: function () { return [{ type: AccountsDisplayingFormatService }]; } });

class AccountNumberPipeModule {
}
AccountNumberPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountNumberPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeModule, declarations: [AccountNumberPipe], exports: [AccountNumberPipe] });
AccountNumberPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AccountNumberPipe],
                    exports: [AccountNumberPipe],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ACCOUNTS_DISPLAYING_FORMAT, AccountNumberPipe, AccountNumberPipeModule, AccountsDisplayingFormatService };
//# sourceMappingURL=backbase-ui-ang-account-number-pipe.js.map
