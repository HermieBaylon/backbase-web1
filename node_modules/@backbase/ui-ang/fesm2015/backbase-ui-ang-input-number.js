import * as i0 from '@angular/core';
import { Directive, Input, HostListener, Component, ChangeDetectionStrategy, Self, Optional, ViewChild, NgModule } from '@angular/core';
import { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import * as i1 from '@backbase/ui-ang/services';
import * as i2 from '@backbase/foundation-ang/future';
import * as i3 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';

class DigitOnlyDirective {
    constructor(el) {
        this.el = el;
        this.navigationKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'Escape',
            'Enter',
            'Home',
            'End',
            'ArrowLeft',
            'ArrowRight',
            'Clear',
            'Copy',
            'Paste',
        ];
        this.isEnabled = true;
        this.allowNegativeSign = false;
        this.inputElement = el.nativeElement;
    }
    /* eslint-disable complexity */
    onKeyDown(e) {
        const array = ['KeyA', 'KeyC', 'KeyV', 'KeyX'];
        const matchPattern = this.allowNegativeSign ? /^-|\d$/ : /^\d$/;
        if (!this.isEnabled ||
            this.navigationKeys.indexOf(e.key) > -1 ||
            (array.includes(e.code) && (e.ctrlKey || e.metaKey))) {
            this.previousKey = e.key;
            return;
        }
        const preventEventDefault = 
        // it is other than pattern
        !matchPattern.test(e.key) ||
            // try to add negative when there is already a value
            (e.key === '-' && this.inputElement.value.indexOf('-') > -1) ||
            // try to add negative sign when you hit negative sign just before
            (e.key === '-' && this.previousKey === '-');
        if (!this.inputElement.value && this.previousKey !== '-') {
            this.inputElement.value = '';
        }
        this.previousKey = e.key;
        if (preventEventDefault) {
            e.preventDefault();
        }
    }
}
DigitOnlyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DigitOnlyDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
DigitOnlyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DigitOnlyDirective, selector: "[bbDigitOnly]", inputs: { isEnabled: ["bbDigitOnly", "isEnabled"], allowNegativeSign: "allowNegativeSign" }, host: { listeners: { "keydown": "onKeyDown($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DigitOnlyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDigitOnly]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { isEnabled: [{
                type: Input,
                args: ['bbDigitOnly']
            }], allowNegativeSign: [{
                type: Input
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

/**
 * @name InputNumberComponent
 *
 * @description
 * Component that displays a text input.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 */
class InputNumberComponent extends InputBaseComponent {
    constructor(domAttrService, elem, renderer2, cd, deprecationsService, parentFormControl) {
        super(cd, deprecationsService);
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        this.parentFormControl = parentFormControl;
        /**
         * The placeholder for the number input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Whether the number input is readonly.
         */
        this.readonly = false;
        /**
         * Aria label for the number input
         */
        this.ariaLabel = 'Number Input';
        /**
         * If `true` then the under-laying input control will behave as a default number input
         */
        this.allowNonDigits = false;
        /**
         * If `true` then the under-laying input control will allow negative sign as well.
         * Known issue is that it is possible to insert the negative sign anywhere in the field, not only at the beginning.
         * Inserting the negative sign after a digit will render the value empty.
         */
        this.allowNegativeSign = false;
        /* eslint-disable-next-line no-null/no-null */
        this.oldInputValue = null;
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
    onInput(inputNumber) {
        if (!inputNumber.value && this.oldInputValue !== null) {
            inputNumber.value = this.oldInputValue;
            this.onValueChange(inputNumber.value);
        }
        /* eslint-disable-next-line no-null/no-null */
        this.oldInputValue = null;
    }
    onPaste(inputNumber) {
        this.oldInputValue = inputNumber.value;
    }
    ngAfterViewInit() {
        if (!this.ariaLabel) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);
        }
    }
}
InputNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }, { token: i3.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
InputNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputNumberComponent, selector: "bb-input-number-ui", inputs: { placeholder: "placeholder", max: "max", min: "min", step: "step", readonly: "readonly", autocomplete: "autocomplete", ariaLabel: "ariaLabel", allowNonDigits: "allowNonDigits", allowNegativeSign: "allowNegativeSign" }, viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputNumber"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\">{{ label }}</label>\n<input\n  #inputNumber\n  [bbDigitOnly]=\"!allowNonDigits || allowNegativeSign\"\n  [allowNegativeSign]=\"allowNegativeSign\"\n  id=\"{{ id }}\"\n  [attr.aria-autocomplete]=\"ariaAutocomplete\"\n  [attr.aria-controls]=\"ariaControls\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  (blur)=\"onBlur()\"\n  type=\"number\"\n  class=\"form-control\"\n  (focus)=\"onFocus()\"\n  (input)=\"onInput(inputNumber)\"\n  (paste)=\"onPaste(inputNumber)\"\n  [disabled]=\"disabled\"\n  [readOnly]=\"readonly\"\n  [placeholder]=\"placeholder\"\n  [required]=\"required\"\n  [attr.min]=\"min\"\n  [attr.max]=\"max\"\n  [attr.size]=\"size\"\n  [attr.step]=\"step\"\n  [bbFocus]=\"autofocus\"\n  [attr.autocomplete]=\"autocomplete\"\n/>\n", directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i3.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { type: i3.MaxValidator, selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]", inputs: ["max"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: DigitOnlyDirective, selector: "[bbDigitOnly]", inputs: ["bbDigitOnly", "allowNegativeSign"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i6.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-number-ui',
                    templateUrl: './input-number.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }, { type: i3.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }]; }, propDecorators: { placeholder: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], step: [{
                type: Input
            }], readonly: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], inputEl: [{
                type: ViewChild,
                args: ['inputNumber']
            }], allowNonDigits: [{
                type: Input
            }], allowNegativeSign: [{
                type: Input
            }] } });

class InputNumberModule {
}
InputNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberModule, declarations: [InputNumberComponent, DigitOnlyDirective], imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule], exports: [InputNumberComponent] });
InputNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberModule, imports: [[CommonModule, FormsModule, BaseClassesModule, FocusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, BaseClassesModule, FocusModule],
                    declarations: [InputNumberComponent, DigitOnlyDirective],
                    exports: [InputNumberComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { InputNumberComponent, InputNumberModule };
//# sourceMappingURL=backbase-ui-ang-input-number.js.map
