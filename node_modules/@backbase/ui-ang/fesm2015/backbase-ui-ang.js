import * as i0 from '@angular/core';
import { NgModule, Injectable, Component, Input, ViewChild, Inject } from '@angular/core';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import { NgbAlertModule, NgbCollapseModule, NgbDatepickerModule, NgbDropdownModule, NgbModalModule, NgbPaginationModule, NgbTypeaheadModule, NgbTooltipModule, NgbProgressbarModule, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { NgSelectModule } from '@ng-select/ng-select';
import * as i1$z from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
export { SearchBoxComponent, SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i1$4 from '@backbase/ui-ang/avatar';
import { AvatarModule } from '@backbase/ui-ang/avatar';
export { AvatarComponent, AvatarModule } from '@backbase/ui-ang/avatar';
import * as i3 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
export { BadgeComponent, BadgeModule } from '@backbase/ui-ang/badge';
import * as i2$5 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
export { ButtonComponent, ButtonDirective, ButtonModule } from '@backbase/ui-ang/button';
import * as i1$i from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
export { LoadButtonComponent, LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i1$6 from '@backbase/ui-ang/card-vendor';
import { CardVendorModule } from '@backbase/ui-ang/card-vendor';
export { CardVendorComponent, CardVendorModule } from '@backbase/ui-ang/card-vendor';
import * as i1$3 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
export { AmountComponent, AmountModule, AmountComponent as FormatAmountComponent, AmountModule as FormatAmountModule } from '@backbase/ui-ang/amount';
import * as i1$k from '@backbase/ui-ang/logo';
import { LogoModule } from '@backbase/ui-ang/logo';
export { LogoComponent, LogoModule } from '@backbase/ui-ang/logo';
import * as i1$a from '@backbase/ui-ang/common-error-state';
import { ErrorCommonStateModule } from '@backbase/ui-ang/common-error-state';
export { ErrorCommonStateComponent, ErrorCommonStateModule } from '@backbase/ui-ang/common-error-state';
import * as i1$f from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
export { EmptyStateComponent, EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i2$a from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
export { InputDatepickerComponent as CalendarPopupComponent, InputDatepickerModule as CalendarPopupModule, DATEPICKER_I18, InputDatepickerComponent, InputDatepickerModule, MaxDateValidatorDirective, MinDateValidatorDirective } from '@backbase/ui-ang/input-datepicker';
import * as i2$6 from '@backbase/ui-ang/char-counter';
import { CharCounterModule } from '@backbase/ui-ang/char-counter';
export { CharCounterComponent, CharCounterModule } from '@backbase/ui-ang/char-counter';
import * as i1$b from '@backbase/ui-ang/currency-input';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
export { CurrencyInputComponent, CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import * as i1$9 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
export { CollapsibleBodyDirective, CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i2$7 from '@backbase/ui-ang/collapsible-card';
import { CollapsibleCardModule } from '@backbase/ui-ang/collapsible-card';
export { CollapsibleCardComponent, CollapsibleCardModule } from '@backbase/ui-ang/collapsible-card';
import * as i1$l from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
export { CustomModalBodyDirective, CustomModalFooterDirective, CustomModalHeaderDirective, ModalBodyComponent, ModalComponent, ModalFooterComponent, ModalHeaderComponent, ModalModule } from '@backbase/ui-ang/modal';
import * as i1$o from '@backbase/ui-ang/pagination';
import { PaginationModule } from '@backbase/ui-ang/pagination';
export { PaginationModule, PaginatorComponent, PaginationModule as PaginatorModule } from '@backbase/ui-ang/pagination';
import * as i1$G from '@backbase/ui-ang/payment-card-number-pipe';
import { PaymentCardNumberModule, DefaultPaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';
export { DefaultPaymentCardNumberFormat, PaymentCardNumberModule, PaymentCardNumberPipe, SYNCHRONIZE_NUMBERS_MASKING } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i1$p from '@backbase/ui-ang/payment-card';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
export { PaymentCardComponent, PaymentCardModule } from '@backbase/ui-ang/payment-card';
import * as i1$H from '@backbase/ui-ang/account-number-pipe';
import { AccountNumberPipeModule, ACCOUNTS_DISPLAYING_FORMAT } from '@backbase/ui-ang/account-number-pipe';
export { ACCOUNTS_DISPLAYING_FORMAT, AccountNumberPipe, AccountNumberPipeModule, AccountsDisplayingFormatService } from '@backbase/ui-ang/account-number-pipe';
import * as i1$q from '@backbase/ui-ang/period-selector';
import { PeriodSelectorModule } from '@backbase/ui-ang/period-selector';
export { PeriodSelectorComponent, PeriodSelectorModule } from '@backbase/ui-ang/period-selector';
import * as i2$h from '@backbase/ui-ang/switch';
import { SwitchModule } from '@backbase/ui-ang/switch';
export { SwitchComponent, SwitchModule } from '@backbase/ui-ang/switch';
import * as i2$j from '@backbase/ui-ang/tab';
import { TabModule } from '@backbase/ui-ang/tab';
export { TabComponent, TabGroupComponent, TabModule } from '@backbase/ui-ang/tab';
import * as i1$g from '@backbase/ui-ang/file-attachment';
import { FileAttachmentModule } from '@backbase/ui-ang/file-attachment';
export { FileAttachmentComponent, FileAttachmentModule } from '@backbase/ui-ang/file-attachment';
import * as i2$r from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';
export { FocusDirective, FocusModule } from '@backbase/ui-ang/focus';
import * as i1$8 from '@backbase/ui-ang/collapsible-accordion';
import { CollapsibleAccordionModule } from '@backbase/ui-ang/collapsible-accordion';
export { CollapsibleAccordionComponent, CollapsibleAccordionModule } from '@backbase/ui-ang/collapsible-accordion';
import * as i2$8 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
export { IconComponent, IconModule } from '@backbase/ui-ang/icon';
import { IbanModule } from '@backbase/ui-ang/iban-directive';
export { IbanModule, IbanValidatorDirective } from '@backbase/ui-ang/iban-directive';
import * as i1$h from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
export { HeaderComponent, HeaderModule } from '@backbase/ui-ang/header';
import * as i2$3 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
export { AlertComponent, AlertModule } from '@backbase/ui-ang/alert';
import * as i3$2 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
export { InputValidationMessageComponent, InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i1$n from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
export { AppendToDomService, BBNotificationConfig, NotificationComponent, NotificationModule, NotificationService } from '@backbase/ui-ang/notification';
import * as i1$j from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
export { LoadingIndicatorComponent, LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$9 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
export { InputTextComponent, InputTextModule } from '@backbase/ui-ang/input-text';
import * as i2 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
export { InputCheckboxComponent, InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i2$d from '@backbase/ui-ang/input-phone';
import { InputPhoneModule } from '@backbase/ui-ang/input-phone';
export { InputPhoneComponent, InputPhoneModule } from '@backbase/ui-ang/input-phone';
import * as i2$b from '@backbase/ui-ang/input-email';
import { InputEmailModule } from '@backbase/ui-ang/input-email';
export { InputEmailComponent, InputEmailModule } from '@backbase/ui-ang/input-email';
import * as i2$2 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
export { DropdownSingleSelectComponent, DropdownSingleSelectModule, DropdownSingleSelectOptionComponent } from '@backbase/ui-ang/dropdown-single-select';
import * as i1$d from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule, DROPDOWN_TEMPLATE_MENU_OPTIONS, DROPDOWN_MENU_OPTIONS } from '@backbase/ui-ang/dropdown-menu';
export { DROPDOWN_MENU_OPTIONS, DROPDOWN_TEMPLATE_MENU_OPTIONS, DropdownLabelDirective, DropdownMenuComponent, DropdownMenuFullWidthDirective, DropdownMenuItemDirective, DropdownMenuModule, DropdownMenuOptionDirective, DropdownMenuOptionToken, DropdownMenuToken } from '@backbase/ui-ang/dropdown-menu';
import * as i1$I from '@backbase/ui-ang/phone-number-format-pipe';
import { PhoneNumberModule } from '@backbase/ui-ang/phone-number-format-pipe';
export { PhoneNumberModule, PhoneNumberPipe } from '@backbase/ui-ang/phone-number-format-pipe';
import * as i1$w from '@backbase/ui-ang/product-item-savings-account';
import { ProductItemSavingsAccountModule } from '@backbase/ui-ang/product-item-savings-account';
export { CustomProductItemSavingsAccountDetailsFormatterDirective, CustomProductItemSavingsAccountMainSectionDirective, CustomProductItemSavingsAccountTitleDirective, ProductItemSavingsAccountComponent, ProductItemSavingsAccountModule } from '@backbase/ui-ang/product-item-savings-account';
import * as i1$r from '@backbase/ui-ang/product-item-credit-card';
import { ProductItemCreditCardModule } from '@backbase/ui-ang/product-item-credit-card';
export { CustomProductItemCreditCardDetailsFormatterDirective, CustomProductItemCreditCardMainSectionDirective, CustomProductItemCreditCardSecondarySectionDirective, CustomProductItemCreditCardTitleDirective, ProductItemCreditCardComponent, ProductItemCreditCardModule } from '@backbase/ui-ang/product-item-credit-card';
import * as i2$f from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
export { CustomProductItemBasicAccountDetailsFormatterDirective, CustomProductItemBasicAccountTitleDirective, CustomProductItemBasicAccountTypeDirective, ProductItemBasicAccountComponent, ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i1$s from '@backbase/ui-ang/product-item-current-account';
import { ProductItemCurrentAccountModule } from '@backbase/ui-ang/product-item-current-account';
export { CustomProductItemCurrentAccountDetailsFormatterDirective, CustomProductItemCurrentAccountMainSectionDirective, CustomProductItemCurrentAccountSecondarySectionDirective, CustomProductItemCurrentAccountTitleDirective, ProductItemCurrentAccountComponent, ProductItemCurrentAccountModule } from '@backbase/ui-ang/product-item-current-account';
import * as i1$u from '@backbase/ui-ang/product-item-investment-account';
import { ProductItemInvestmentAccountModule } from '@backbase/ui-ang/product-item-investment-account';
export { CustomProductItemInvestmentAccountDetailsFormatterDirective, CustomProductItemInvestmentAccountTitleDirective, ProductItemInvestmentAccountComponent, ProductItemInvestmentAccountModule } from '@backbase/ui-ang/product-item-investment-account';
import * as i1$t from '@backbase/ui-ang/product-item-debit-card';
import { ProductItemDebitCardModule } from '@backbase/ui-ang/product-item-debit-card';
export { CustomProductItemDebitCardTitleDirective, ProductItemDebitCardComponent, ProductItemDebitCardModule } from '@backbase/ui-ang/product-item-debit-card';
import * as i1$x from '@backbase/ui-ang/product-item-term-deposit';
import { ProductItemTermDepositModule } from '@backbase/ui-ang/product-item-term-deposit';
export { CustomProductItemTermDepositDetailsFormatterDirective, CustomProductItemTermDepositMainSectionDirective, CustomProductItemTermDepositTitleDirective, ProductItemTermDepositComponent, ProductItemTermDepositModule } from '@backbase/ui-ang/product-item-term-deposit';
import * as i1$v from '@backbase/ui-ang/product-item-loan';
import { ProductItemLoanModule } from '@backbase/ui-ang/product-item-loan';
export { CustomProductItemLoanDetailsFormatterDirective, CustomProductItemLoanTitleDirective, ProductItemLoanComponent, ProductItemLoanModule } from '@backbase/ui-ang/product-item-loan';
import * as i3$1 from '@backbase/ui-ang/fieldset';
import { FieldsetModule } from '@backbase/ui-ang/fieldset';
export { FieldsetComponent, FieldsetModule } from '@backbase/ui-ang/fieldset';
import * as i2$i from '@backbase/ui-ang/textarea';
import { TextareaModule } from '@backbase/ui-ang/textarea';
export { TextareaComponent, TextareaModule } from '@backbase/ui-ang/textarea';
import * as i1$y from '@backbase/ui-ang/product-selector';
import { ProductSelectorModule } from '@backbase/ui-ang/product-selector';
export { ProductSelectorComponent, ProductSelectorModule } from '@backbase/ui-ang/product-selector';
import * as i2$k from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
export { TooltipDirective, TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i2$c from '@backbase/ui-ang/input-number';
import { InputNumberModule } from '@backbase/ui-ang/input-number';
export { InputNumberComponent, InputNumberModule } from '@backbase/ui-ang/input-number';
import * as i2$g from '@backbase/ui-ang/rich-text-editor';
import { RichTextEditorModule } from '@backbase/ui-ang/rich-text-editor';
export { RichTextEditorActionsComponent, RichTextEditorActionsDirective, RichTextEditorBoldActionComponent, RichTextEditorCodeActionComponent, RichTextEditorComponent, RichTextEditorImageActionComponent, RichTextEditorItalicActionComponent, RichTextEditorLinkActionComponent, RichTextEditorModule, RichTextEditorOlistActionComponent, RichTextEditorParagraphActionComponent, RichTextEditorStrikethroughActionComponent, RichTextEditorUlistActionComponent, RichTextEditorUnderlineActionComponent } from '@backbase/ui-ang/rich-text-editor';
import * as i2$1 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
export { InputRadioComponent, InputRadioGroupComponent, InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i2$q from '@backbase/ui-ang/input-file';
import { InputFileModule } from '@backbase/ui-ang/input-file';
export { InputFileComponent, InputFileModule } from '@backbase/ui-ang/input-file';
import * as i1$c from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
export { BbDatePipe, BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i2$e from '@backbase/ui-ang/list-multiple-select';
import { ListMultipleSelectModule } from '@backbase/ui-ang/list-multiple-select';
export { ListMultipleSelectActionDirective, ListMultipleSelectComponent, ListMultipleSelectItemDirective, ListMultipleSelectModule } from '@backbase/ui-ang/list-multiple-select';
import * as i1$7 from '@backbase/ui-ang/checkbox-group';
import { CheckboxGroupModule } from '@backbase/ui-ang/checkbox-group';
export { CheckboxGroupComponent, CheckboxGroupModule } from '@backbase/ui-ang/checkbox-group';
import * as i1$e from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';
export { EllipsisComponent, EllipsisModule, IsContentTruncatedDirective } from '@backbase/ui-ang/ellipsis';
import * as i2$n from '@backbase/ui-ang/highlight';
import { HighlightModule } from '@backbase/ui-ang/highlight';
export { HighlightDirective, HighlightModule } from '@backbase/ui-ang/highlight';
import * as i1$A from '@backbase/ui-ang/progressbar';
import { ProgressbarModule } from '@backbase/ui-ang/progressbar';
export { ProgressbarComponent, ProgressbarModule } from '@backbase/ui-ang/progressbar';
import * as i1$B from '@backbase/ui-ang/table';
import { TableModule, TableDirective } from '@backbase/ui-ang/table';
export { TableDirective, TableFocusDirective, TableModule, TableRowDirective, TableSortableDirective } from '@backbase/ui-ang/table';
import * as i2$l from '@backbase/ui-ang/input-password';
import { InputPasswordModule } from '@backbase/ui-ang/input-password';
export { InputPasswordComponent, InputPasswordModule } from '@backbase/ui-ang/input-password';
import * as i2$m from '@backbase/ui-ang/input-inline-edit';
import { InputInlineEditModule, InputInlineEditState } from '@backbase/ui-ang/input-inline-edit';
export { InputInlineEditComponent, InputInlineEditModule, InputInlineEditState } from '@backbase/ui-ang/input-inline-edit';
import * as i1$C from '@backbase/ui-ang/stepper';
import { StepperModule } from '@backbase/ui-ang/stepper';
export { CustomStepperStepDirective, StepperComponent, StepperModule, StepperStepComponent } from '@backbase/ui-ang/stepper';
import * as i1$D from '@backbase/ui-ang/iban-pipe';
import { BbIbanPipeModule } from '@backbase/ui-ang/iban-pipe';
export { BbIbanPipe, BbIbanPipeModule } from '@backbase/ui-ang/iban-pipe';
import * as i1$E from '@backbase/ui-ang/action-status';
import { ActionStatusModule } from '@backbase/ui-ang/action-status';
export { ActionStatusComponent, ActionStatusModule } from '@backbase/ui-ang/action-status';
import * as i1$5 from '@backbase/ui-ang/badge-counter';
import { BadgeCounterModule } from '@backbase/ui-ang/badge-counter';
export { BadgeCounterComponent, BadgeCounterModule } from '@backbase/ui-ang/badge-counter';
import * as i1$F from '@backbase/ui-ang/infinite-scroll';
import { InfiniteScrollModule } from '@backbase/ui-ang/infinite-scroll';
export { InfiniteScrollComponent, InfiniteScrollModule } from '@backbase/ui-ang/infinite-scroll';
import * as i1$J from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
export { AccountSelectorComponent, AccountSelectorModule, CustomGroupItemsHeaderDirective, CustomLoadingTemplateDirective, CustomMultiSelectedItemsLabelDirective, CustomOptionItemDirective, CustomOptionsHeaderDirective, CustomSingleSelectedItemLabelDirective } from '@backbase/ui-ang/account-selector';
import * as i1$L from '@backbase/ui-ang/item-log';
import { ItemLogModule } from '@backbase/ui-ang/item-log';
export { ItemLogComponent, ItemLogModule, ItemLogRecordDirective } from '@backbase/ui-ang/item-log';
import * as i2$p from '@backbase/ui-ang/input-timepicker';
import { InputTimepickerModule } from '@backbase/ui-ang/input-timepicker';
export { InputTimepickerComponent, InputTimepickerModule } from '@backbase/ui-ang/input-timepicker';
import * as i3$3 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
export { KeyboardClickDirective, KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import * as i1$M from '@backbase/ui-ang/select-list';
import { SelectListModule } from '@backbase/ui-ang/select-list';
export { SelectListComponent, SelectListModule } from '@backbase/ui-ang/select-list';
import * as i2$4 from '@backbase/ui-ang/amount-input';
import { AmountInputModule } from '@backbase/ui-ang/amount-input';
export { AmountInputComponent, AmountInputModule } from '@backbase/ui-ang/amount-input';
import * as i1$m from '@backbase/ui-ang/mode-header';
import { ModeHeaderModule } from '@backbase/ui-ang/mode-header';
export { ModeHeaderComponent, ModeHeaderModule } from '@backbase/ui-ang/mode-header';
import * as i9 from '@backbase/ui-ang/control-error-handler';
import { ControlErrorHandlerModule, BB_VALIDATION_ERRORS, BB_DYNAMIC_VALIDATION_ERROR_TMPL } from '@backbase/ui-ang/control-error-handler';
export { BB_DYNAMIC_VALIDATION_ERROR_TMPL, BB_VALIDATION_ERRORS, ControlErrorContainerDirective, ControlErrorHandlerModule, FormSubmitDirective, ValidationErrorsDirective, ValidationMessageComponent } from '@backbase/ui-ang/control-error-handler';
import * as i4$1 from '@backbase/ui-ang/input-range';
import { InputRangeModule } from '@backbase/ui-ang/input-range';
export { InputRangeDirective, InputRangeMaxDirective, InputRangeMinDirective, InputRangeModule } from '@backbase/ui-ang/input-range';
import * as i1$N from '@backbase/ui-ang/value-diff';
import { ValueDiffDirectiveModule, ValueDiffPosition } from '@backbase/ui-ang/value-diff';
export { ValueDiffDirective, ValueDiffDirectiveModule, ValueDiffPosition } from '@backbase/ui-ang/value-diff';
import { A11yModule } from '@angular/cdk/a11y';
import * as i1$1 from '@backbase/foundation-ang/future';
export { BaseClassesModule, InputBaseComponent, InputBaseModule, defaultSize, getInputNextId } from '@backbase/ui-ang/base-classes';
export { CssVariablesModule, CssVariablesService } from '@backbase/ui-ang/css-variables-lib';
import * as i2$o from '@backbase/ui-ang/dropdown-multi-select';
import { DropdownMultiSelectModule } from '@backbase/ui-ang/dropdown-multi-select';
export { DropdownMultiSelectComponent, DropdownMultiSelectModule, DropdownMultiSelectOptionComponent } from '@backbase/ui-ang/dropdown-multi-select';
import * as i1$K from '@backbase/ui-ang/dropdown-panel';
import { DropdownPanelModule } from '@backbase/ui-ang/dropdown-panel';
export { DropdownMenuDirective, DropdownPanelComponent, DropdownPanelModule, DropdownToggleDirective } from '@backbase/ui-ang/dropdown-panel';
export { formatByGroups, isValidBBAN, isValidIBAN, isValidIBANFormControl } from '@backbase/ui-ang/iban-lib';
export { LayoutModule, LayoutNavDropdownDirective, LayoutService } from '@backbase/ui-ang/layout';
export { MediaQueryModule, MediaQueryService } from '@backbase/ui-ang/media-query-lib';
import * as i1 from '@backbase/ui-ang/services';
export * from '@backbase/ui-ang/services';
import { BackbaseDocs, tabsAnim } from '@backbase/ui-ang/util';
export * from '@backbase/ui-ang/util';
import { Subject, of, merge, BehaviorSubject } from 'rxjs';
import * as i1$2 from '@angular/forms';
import { FormGroup, FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpErrorResponse } from '@angular/common/http';
import { mergeMap, map, startWith, delay, tap, switchMap } from 'rxjs/operators';
import { __decorate } from 'tslib';
import { trigger, transition, style, animate } from '@angular/animations';

const ngbModules = [
    NgbAlertModule,
    NgbCollapseModule,
    NgbDatepickerModule,
    NgbDropdownModule,
    NgbModalModule,
    NgbPaginationModule,
    NgbTypeaheadModule,
    NgbTooltipModule,
    NgbProgressbarModule,
    NgbTimepickerModule,
];
const uiCompModules = [
    AccountNumberPipeModule,
    AccountSelectorModule,
    ActionStatusModule,
    AlertModule,
    AmountInputModule,
    AmountModule,
    AvatarModule,
    BadgeCounterModule,
    BadgeModule,
    BbDatePipeModule,
    BbIbanPipeModule,
    ButtonModule,
    CardVendorModule,
    CharCounterModule,
    CheckboxGroupModule,
    CollapsibleAccordionModule,
    CollapsibleCardModule,
    CollapsibleModule,
    ErrorCommonStateModule,
    CurrencyInputModule,
    DropdownMenuModule,
    DropdownSingleSelectModule,
    EllipsisModule,
    EmptyStateModule,
    FieldsetModule,
    FileAttachmentModule,
    FocusModule,
    HeaderModule,
    HighlightModule,
    IconModule,
    InfiniteScrollModule,
    InputCheckboxModule,
    InputDatepickerModule,
    InputEmailModule,
    InputFileModule,
    InputInlineEditModule,
    InputNumberModule,
    InputPasswordModule,
    InputPhoneModule,
    InputRadioGroupModule,
    InputRangeModule,
    InputTextModule,
    InputTimepickerModule,
    InputValidationMessageModule,
    ItemLogModule,
    KeyboardClickModule,
    ListMultipleSelectModule,
    LoadButtonModule,
    LoadingIndicatorModule,
    LogoModule,
    ModalModule,
    ModeHeaderModule,
    NotificationModule,
    PaginationModule,
    PaymentCardModule,
    PaymentCardNumberModule,
    PeriodSelectorModule,
    PhoneNumberModule,
    ProductItemBasicAccountModule,
    ProductItemCreditCardModule,
    ProductItemCurrentAccountModule,
    ProductItemDebitCardModule,
    ProductItemInvestmentAccountModule,
    ProductItemLoanModule,
    ProductItemSavingsAccountModule,
    ProductItemTermDepositModule,
    ProductSelectorModule,
    ProgressbarModule,
    RichTextEditorModule,
    SearchBoxModule,
    SelectListModule,
    StepperModule,
    SwitchModule,
    TabModule,
    TableModule,
    TextareaModule,
    TooltipModule,
    ControlErrorHandlerModule,
    ValueDiffDirectiveModule,
    IbanModule,
];
class BackbaseUiModule {
    constructor(deprecationService) {
        this.deprecationService = deprecationService;
        this.deprecationService.logDeprecatedFeature(`[ui-ang]: The main entry point '@backbase/ui-ang' will be deprecated in ui-ang v8.0. Use
      the secondary entry points instead. I.e. 'import { ... } from '@backbase/ui-ang/button';'`);
        this.deprecationService.logDeprecatedFeature(`[ui-ang]:Packages '@backbase/ui-ang'from v7.0 and '@backbase/backbase-theme' from v2.318.0 will be deprecated.
      From now on, use '@backbase/web-ui' package;'`);
    }
}
BackbaseUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiModule, deps: [{ token: i1$1.DeprecationsService }], target: i0.ɵɵFactoryTarget.NgModule });
BackbaseUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiModule, imports: [CommonModule, NgbAlertModule,
        NgbCollapseModule,
        NgbDatepickerModule,
        NgbDropdownModule,
        NgbModalModule,
        NgbPaginationModule,
        NgbTypeaheadModule,
        NgbTooltipModule,
        NgbProgressbarModule,
        NgbTimepickerModule, AccountNumberPipeModule,
        AccountSelectorModule,
        ActionStatusModule,
        AlertModule,
        AmountInputModule,
        AmountModule,
        AvatarModule,
        BadgeCounterModule,
        BadgeModule,
        BbDatePipeModule,
        BbIbanPipeModule,
        ButtonModule,
        CardVendorModule,
        CharCounterModule,
        CheckboxGroupModule,
        CollapsibleAccordionModule,
        CollapsibleCardModule,
        CollapsibleModule,
        ErrorCommonStateModule,
        CurrencyInputModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        EllipsisModule,
        EmptyStateModule,
        FieldsetModule,
        FileAttachmentModule,
        FocusModule,
        HeaderModule,
        HighlightModule,
        IconModule,
        InfiniteScrollModule,
        InputCheckboxModule,
        InputDatepickerModule,
        InputEmailModule,
        InputFileModule,
        InputInlineEditModule,
        InputNumberModule,
        InputPasswordModule,
        InputPhoneModule,
        InputRadioGroupModule,
        InputRangeModule,
        InputTextModule,
        InputTimepickerModule,
        InputValidationMessageModule,
        ItemLogModule,
        KeyboardClickModule,
        ListMultipleSelectModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        LogoModule,
        ModalModule,
        ModeHeaderModule,
        NotificationModule,
        PaginationModule,
        PaymentCardModule,
        PaymentCardNumberModule,
        PeriodSelectorModule,
        PhoneNumberModule,
        ProductItemBasicAccountModule,
        ProductItemCreditCardModule,
        ProductItemCurrentAccountModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemLoanModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductSelectorModule,
        ProgressbarModule,
        RichTextEditorModule,
        SearchBoxModule,
        SelectListModule,
        StepperModule,
        SwitchModule,
        TabModule,
        TableModule,
        TextareaModule,
        TooltipModule,
        ControlErrorHandlerModule,
        ValueDiffDirectiveModule,
        IbanModule, NgSelectModule, A11yModule], exports: [AccountNumberPipeModule,
        AccountSelectorModule,
        ActionStatusModule,
        AlertModule,
        AmountInputModule,
        AmountModule,
        AvatarModule,
        BadgeCounterModule,
        BadgeModule,
        BbDatePipeModule,
        BbIbanPipeModule,
        ButtonModule,
        CardVendorModule,
        CharCounterModule,
        CheckboxGroupModule,
        CollapsibleAccordionModule,
        CollapsibleCardModule,
        CollapsibleModule,
        ErrorCommonStateModule,
        CurrencyInputModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        EllipsisModule,
        EmptyStateModule,
        FieldsetModule,
        FileAttachmentModule,
        FocusModule,
        HeaderModule,
        HighlightModule,
        IconModule,
        InfiniteScrollModule,
        InputCheckboxModule,
        InputDatepickerModule,
        InputEmailModule,
        InputFileModule,
        InputInlineEditModule,
        InputNumberModule,
        InputPasswordModule,
        InputPhoneModule,
        InputRadioGroupModule,
        InputRangeModule,
        InputTextModule,
        InputTimepickerModule,
        InputValidationMessageModule,
        ItemLogModule,
        KeyboardClickModule,
        ListMultipleSelectModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        LogoModule,
        ModalModule,
        ModeHeaderModule,
        NotificationModule,
        PaginationModule,
        PaymentCardModule,
        PaymentCardNumberModule,
        PeriodSelectorModule,
        PhoneNumberModule,
        ProductItemBasicAccountModule,
        ProductItemCreditCardModule,
        ProductItemCurrentAccountModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemLoanModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductSelectorModule,
        ProgressbarModule,
        RichTextEditorModule,
        SearchBoxModule,
        SelectListModule,
        StepperModule,
        SwitchModule,
        TabModule,
        TableModule,
        TextareaModule,
        TooltipModule,
        ControlErrorHandlerModule,
        ValueDiffDirectiveModule,
        IbanModule] });
BackbaseUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiModule, imports: [[CommonModule, ...ngbModules, ...uiCompModules, NgSelectModule, A11yModule], AccountNumberPipeModule,
        AccountSelectorModule,
        ActionStatusModule,
        AlertModule,
        AmountInputModule,
        AmountModule,
        AvatarModule,
        BadgeCounterModule,
        BadgeModule,
        BbDatePipeModule,
        BbIbanPipeModule,
        ButtonModule,
        CardVendorModule,
        CharCounterModule,
        CheckboxGroupModule,
        CollapsibleAccordionModule,
        CollapsibleCardModule,
        CollapsibleModule,
        ErrorCommonStateModule,
        CurrencyInputModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        EllipsisModule,
        EmptyStateModule,
        FieldsetModule,
        FileAttachmentModule,
        FocusModule,
        HeaderModule,
        HighlightModule,
        IconModule,
        InfiniteScrollModule,
        InputCheckboxModule,
        InputDatepickerModule,
        InputEmailModule,
        InputFileModule,
        InputInlineEditModule,
        InputNumberModule,
        InputPasswordModule,
        InputPhoneModule,
        InputRadioGroupModule,
        InputRangeModule,
        InputTextModule,
        InputTimepickerModule,
        InputValidationMessageModule,
        ItemLogModule,
        KeyboardClickModule,
        ListMultipleSelectModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        LogoModule,
        ModalModule,
        ModeHeaderModule,
        NotificationModule,
        PaginationModule,
        PaymentCardModule,
        PaymentCardNumberModule,
        PeriodSelectorModule,
        PhoneNumberModule,
        ProductItemBasicAccountModule,
        ProductItemCreditCardModule,
        ProductItemCurrentAccountModule,
        ProductItemDebitCardModule,
        ProductItemInvestmentAccountModule,
        ProductItemLoanModule,
        ProductItemSavingsAccountModule,
        ProductItemTermDepositModule,
        ProductSelectorModule,
        ProgressbarModule,
        RichTextEditorModule,
        SearchBoxModule,
        SelectListModule,
        StepperModule,
        SwitchModule,
        TabModule,
        TableModule,
        TextareaModule,
        TooltipModule,
        ControlErrorHandlerModule,
        ValueDiffDirectiveModule,
        IbanModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...ngbModules, ...uiCompModules, NgSelectModule, A11yModule],
                    exports: [...uiCompModules],
                }]
        }], ctorParameters: function () { return [{ type: i1$1.DeprecationsService }]; } });

class ConfigurationInputService {
    constructor() {
        this.sharedField = new Subject();
    }
}
ConfigurationInputService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfigurationInputService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ConfigurationInputService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfigurationInputService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfigurationInputService, decorators: [{
            type: Injectable
        }] });

class ConfigurationInputComponent {
    constructor(formBuilder, configurationInputService) {
        this.formBuilder = formBuilder;
        this.configurationInputService = configurationInputService;
        this.checkboxList = [];
        this.radioList = [];
        this.dropdownList = [];
        this.vform = this.formBuilder.group({
            checkbox: new FormGroup({}),
            radio: new FormGroup({}),
            dropdown: new FormGroup({}),
        });
    }
    ngOnInit() {
        if (this.dropdownList) {
            this.dropdownList.forEach((dropdownItem) => {
                this.dropdown.addControl(dropdownItem.formControlName, new FormControl(dropdownItem.dropdownItemList[0]));
            });
        }
        if (this.radioList) {
            this.radioList.forEach((radioItem) => {
                this.radio.addControl(radioItem.formControlName, new FormControl(radioItem.radioItems[0].value));
            });
        }
        if (this.checkboxList) {
            this.checkboxList.forEach((checkboxItem) => {
                this.checkbox.addControl(checkboxItem.formControlName, new FormControl(checkboxItem.value));
            });
        }
        this.configurationInputService.sharedField.next(this.vform.value);
        this.vform.valueChanges.subscribe((val) => {
            this.configurationInputService.sharedField.next(val);
        });
    }
    get dropdown() {
        return this.vform.get('dropdown');
    }
    get radio() {
        return this.vform.get('radio');
    }
    get checkbox() {
        return this.vform.get('checkbox');
    }
}
ConfigurationInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfigurationInputComponent, deps: [{ token: i1$2.FormBuilder }, { token: ConfigurationInputService }], target: i0.ɵɵFactoryTarget.Component });
ConfigurationInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfigurationInputComponent, selector: "bb-configuration-input-ui", inputs: { checkboxList: "checkboxList", radioList: "radioList", dropdownList: "dropdownList" }, ngImport: i0, template: "<div style=\"height: 15%; padding: 10px; border-bottom: 1px solid #eee\">\n  <span>Configuration</span>\n</div>\n<div style=\"padding: 10px\">\n  <form [formGroup]=\"vform\">\n    <div formGroupName=\"checkbox\" class=\"mb-4\">\n      <div *ngFor=\"let item of checkbox.controls | keyvalue; let i = index\" class=\"mb-3\">\n        <bb-input-checkbox-ui\n          label=\"{{ this.checkboxList[i].label }}\"\n          formControlName=\"{{ item.key }}\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div formGroupName=\"radio\">\n      <div *ngFor=\"let item of radio.controls | keyvalue; let i = index\">\n        <label>{{ radioList[i].label }}</label>\n        <bb-input-radio-group-ui\n          formControlName=\"{{ item.key }}\"\n          [horizontal]=\"true\"\n          [preselect]=\"true\"\n          [required]=\"true\"\n        >\n          <bb-input-radio-ui\n            *ngFor=\"let radioData of radioList[i].radioItems\"\n            [label]=\"radioData.label\"\n            [value]=\"radioData.value\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n      </div>\n    </div>\n\n    <div formGroupName=\"dropdown\">\n      <div *ngFor=\"let item of dropdown.controls | keyvalue; let i = index\">\n        <bb-dropdown-single-select-ui\n          [label]=\"dropdownList[i].label\"\n          [formControlName]=\"dropdownList[i].formControlName\"\n        >\n          <bb-dropdown-single-select-option-ui\n            *ngFor=\"let dropdownData of dropdownList[i].dropdownItemList\"\n            class=\"text-capitalize\"\n            [value]=\"dropdownData\"\n            [label]=\"dropdownData\"\n          ></bb-dropdown-single-select-option-ui>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n  </form>\n</div>\n", components: [{ type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i2$1.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$1.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i2$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2$2.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "keyvalue": i4.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfigurationInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-configuration-input-ui',
                    templateUrl: './configuration-input.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: ConfigurationInputService }]; }, propDecorators: { checkboxList: [{
                type: Input
            }], radioList: [{
                type: Input
            }], dropdownList: [{
                type: Input
            }] } });

const MILLISECONDS_PER_SECOND = 1000;
class AlertExampleComponent {
    constructor(configurationService) {
        this.configurationService = configurationService;
        this.restoreDelay = 5;
        this.showAlert = true;
        this.alertCheckoxList = [
            {
                label: 'Dismissible',
                value: true,
                formControlName: 'dismissible',
            },
        ];
        this.alertDropdownList = [
            {
                label: 'Modifier',
                formControlName: 'modifier',
                dropdownItemList: ['info', 'warning', 'success', 'error'],
            },
        ];
        this.alertValues = {
            checkbox: {
                dismissible: true,
            },
            dropdown: {
                modifier: 'primary',
            },
            radio: {
                buttonSize: 'sm',
            },
        };
        this.configurationService.sharedField.subscribe((val) => {
            this.alertValues.checkbox.dismissible = val.checkbox.dismissible;
            this.alertValues.dropdown.modifier = val.dropdown.modifier;
        });
    }
    hideAlert() {
        this.showAlert = false;
        // Restore alert after 5 seconds for demo purposes
        setTimeout(() => this.displayAlert(), this.restoreDelay * MILLISECONDS_PER_SECOND);
    }
    displayAlert() {
        this.showAlert = true;
    }
}
AlertExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertExampleComponent, deps: [{ token: ConfigurationInputService }], target: i0.ɵɵFactoryTarget.Component });
AlertExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AlertExampleComponent, selector: "bb-alert-example-ui", ngImport: i0, template: "<div class=\"row col-12\">\n  <div class=\"col-md-8 example-component-col\">\n    <bb-alert-ui\n      *ngIf=\"showAlert\"\n      title=\"Example information alert\"\n      [modifier]=\"alertValues.dropdown.modifier\"\n      [dismissible]=\"alertValues.checkbox.dismissible\"\n      (close)=\"hideAlert()\"\n    >\n      <p>\n        This example will be restored after {{ restoreDelay }} seconds.\n      </p>\n    </bb-alert-ui>\n  </div>\n  <div class=\"col-md-4 example-configuration-col\">\n    <bb-configuration-input-ui\n      [checkboxList]=\"alertCheckoxList\"\n      [dropdownList]=\"alertDropdownList\"\n    ></bb-configuration-input-ui>\n  </div>\n</div>\n", components: [{ type: i2$3.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: ConfigurationInputComponent, selector: "bb-configuration-input-ui", inputs: ["checkboxList", "radioList", "dropdownList"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-alert-example-ui',
                    templateUrl: './alert.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ConfigurationInputService }]; } });

class AmountExampleComponent {
}
AmountExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AmountExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AmountExampleComponent, selector: "bb-amount-example-ui", ngImport: i0, template: "<bb-amount-ui\n  [currency]=\"'USD'\"\n  [amount]=\"2718281828\"\n  [mapCurrency]=\"true\"\n  [showPlusSign]=\"false\"\n  [abbreviate]=\"false\"\n></bb-amount-ui>\n", components: [{ type: i1$3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-amount-example-ui',
                    templateUrl: './amount.example.component.html',
                }]
        }] });

class AmountInputExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            name: ['', Validators.required],
        });
    }
}
AmountInputExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AmountInputExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AmountInputExampleComponent, selector: "bb-amount-input-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <h2 id=\"ariaLabelledbyId\">Amount with regular size</h2>\n  <bb-amount-input-ui\n    formControlName=\"name\"\n    [id]=\"'billpay-amount-input'\"\n    currency=\"USD\"\n    placeholder=\"0.00\"\n    [aria-labelledby]=\"'ariaLabelledbyId'\"\n  >\n  </bb-amount-input-ui>\n</form>\n", components: [{ type: i2$4.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-amount-input-example-ui',
                    templateUrl: './amount-input.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class AvatarExampleComponent {
}
AvatarExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvatarExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AvatarExampleComponent, selector: "bb-avatar-example-ui", ngImport: i0, template: "<bb-avatar-ui name=\"Jane Doe\" size=\"lg\"></bb-avatar-ui>\n", components: [{ type: i1$4.AvatarComponent, selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-avatar-example-ui',
                    templateUrl: './avatar.example.component.html',
                }]
        }] });

class BadgeExampleComponent {
}
BadgeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BadgeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BadgeExampleComponent, selector: "bb-badge-example-ui", ngImport: i0, template: "<bb-badge-ui\n  text=\"paid in full\"\n  color=\"success\"\n  [abbr]=\"false\"\n  [circle]=\"false\"\n></bb-badge-ui>\n", components: [{ type: i3.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-badge-example-ui',
                    templateUrl: './badge.example.component.html',
                }]
        }] });

class BadgeCounterExampleComponent {
}
BadgeCounterExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BadgeCounterExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BadgeCounterExampleComponent, selector: "bb-badge-counter-example-ui", ngImport: i0, template: "<bb-badge-counter-ui\n  [count]=\"136\"\n  [maxCount]=\"99\"\n  color=\"danger\"\n></bb-badge-counter-ui>\n", components: [{ type: i1$5.BadgeCounterComponent, selector: "bb-badge-counter-ui", inputs: ["color", "count", "maxCount"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-badge-counter-example-ui',
                    templateUrl: './badge-counter.example.component.html',
                }]
        }] });

class ButtonExampleService {
    constructor(configurationService) {
        this.configurationService = configurationService;
        this.btnCheckboxList = [
            {
                label: 'Block',
                value: false,
                formControlName: 'block',
            },
            {
                label: 'Disabled',
                value: false,
                formControlName: 'disabled',
            },
        ];
        this.btnRadioList = [
            {
                label: 'Button Size',
                formControlName: 'buttonSize',
                radioItems: [
                    {
                        label: 'Small',
                        value: 'sm',
                    },
                    {
                        label: 'Medium',
                        value: 'md',
                    },
                ],
            },
        ];
        this.btnDropdownList = [
            {
                label: 'Color',
                formControlName: 'color',
                dropdownItemList: ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'link', 'link-text'],
            },
        ];
        this.btnValues = {
            checkbox: {
                block: false,
                disabled: false,
            },
            radio: {
                buttonSize: 'sm',
            },
            dropdown: {
                color: 'primary',
            },
        };
        this.configurationService.sharedField.subscribe((val) => {
            this.btnValues.checkbox.block = val.checkbox.block;
            this.btnValues.checkbox.disabled = val.checkbox.disabled;
            this.btnValues.radio.buttonSize = val.radio.buttonSize;
            this.btnValues.dropdown.color = val.dropdown.color;
        });
    }
}
ButtonExampleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonExampleService, deps: [{ token: ConfigurationInputService }], target: i0.ɵɵFactoryTarget.Injectable });
ButtonExampleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonExampleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonExampleService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: ConfigurationInputService }]; } });

class ButtonExampleComponent {
    //Don't include buttonService while developing this component.
    constructor(buttonService) {
        this.buttonService = buttonService;
    }
}
ButtonExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonExampleComponent, deps: [{ token: ButtonExampleService }], target: i0.ɵɵFactoryTarget.Component });
ButtonExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ButtonExampleComponent, selector: "bb-button-example-ui", ngImport: i0, template: "<div class=\"row col-12\">\n  <div class=\"col-md-8 example-component-col\">\n    <button\n      bbButton\n      [color]=\"buttonService.btnValues.dropdown.color\"\n      [buttonSize]=\"buttonService.btnValues.radio.buttonSize\"\n      [disabled]=\"buttonService.btnValues.checkbox.disabled\"\n      [block]=\"buttonService.btnValues.checkbox.block\"\n      class=\"m-2\"\n    >\n      {{ buttonService.btnValues.dropdown.color | titlecase }}\n    </button>\n  </div>\n  <div class=\"col-md-4 example-configuration-col\">\n    <bb-configuration-input-ui\n      [checkboxList]=\"buttonService.btnCheckboxList\"\n      [radioList]=\"buttonService.btnRadioList\"\n      [dropdownList]=\"buttonService.btnDropdownList\"\n    ></bb-configuration-input-ui>\n  </div>\n</div>\n", components: [{ type: ConfigurationInputComponent, selector: "bb-configuration-input-ui", inputs: ["checkboxList", "radioList", "dropdownList"] }], directives: [{ type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "titlecase": i4.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-button-example-ui',
                    templateUrl: './button.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ButtonExampleService }]; } });

class CardVendorExampleComponent {
}
CardVendorExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardVendorExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CardVendorExampleComponent, selector: "bb-card-vendor-example-ui", ngImport: i0, template: "<div style=\"max-width: 48px; max-height: 48px\">\n  <bb-card-vendor-ui vendor=\"mastercard\"></bb-card-vendor-ui>\n</div>\n", components: [{ type: i1$6.CardVendorComponent, selector: "bb-card-vendor-ui", inputs: ["vendor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-card-vendor-example-ui',
                    templateUrl: './card-vendor.example.component.html',
                }]
        }] });

class CharCounterExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            textarea: ['', Validators.maxLength(160)],
        });
    }
}
CharCounterExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
CharCounterExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CharCounterExampleComponent, selector: "bb-char-counter-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <p>\n    <textarea\n      placeholder=\"Enter text...\"\n      formControlName=\"textarea\"\n      maxLength=\"160\"\n      rows=\"4\"\n      #remarksInput\n    >\n    </textarea>\n  </p>\n  <p>\n    <bb-char-counter-ui\n      [element]=\"remarksInput\"\n      [maxLength]=\"remarksInput.maxLength\"\n      [blockTyping]=\"true\"\n    ></bb-char-counter-ui>\n  </p>\n</form>\n", components: [{ type: i2$6.CharCounterComponent, selector: "bb-char-counter-ui", inputs: ["inputValue", "element", "maxLength", "blockTyping"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-char-counter-example-ui',
                    templateUrl: './char-counter.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class CheckboxGroupExampleComponent {
}
CheckboxGroupExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CheckboxGroupExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CheckboxGroupExampleComponent, selector: "bb-checkbox-group-example-ui", ngImport: i0, template: "<h5>Checkboxes group</h5>\n<h6>Template driven example</h6>\n<div class=\"form-row\">\n  <div class=\"col-md-4\">\n    <form #checkboxGroupForm=\"ngForm\">\n      <ul class=\"list-unstyled\">\n        <li>\n          <bb-checkbox-group-ui ngModelGroup=\"list\" label=\"Parent\"> </bb-checkbox-group-ui>\n          <ul ngModelGroup=\"list\" class=\"list-unstyled bb-checkbox-group\">\n            <li>\n              <bb-input-checkbox-ui name=\"i1\" ngModel disabled label=\"Child\"> </bb-input-checkbox-ui>\n            </li>\n            <li>\n              <bb-input-checkbox-ui name=\"i2\" ngModel label=\"Child\"> </bb-input-checkbox-ui>\n            </li>\n            <li>\n              <bb-checkbox-group-ui ngModelGroup=\"i3\" label=\"Parent\"> </bb-checkbox-group-ui>\n              <ul ngModelGroup=\"i3\" class=\"list-unstyled bb-checkbox-group\">\n                <li>\n                  <bb-input-checkbox-ui ngModel name=\"q1\" label=\"Child\"> </bb-input-checkbox-ui>\n                </li>\n                <li>\n                  <bb-input-checkbox-ui ngModel name=\"q2\" label=\"Child\"> </bb-input-checkbox-ui>\n                </li>\n                <li>\n                  <bb-checkbox-group-ui ngModelGroup=\"q3\" label=\"Parent\"> </bb-checkbox-group-ui>\n                  <ul ngModelGroup=\"q3\" class=\"list-unstyled bb-checkbox-group\">\n                    <li>\n                      <bb-input-checkbox-ui ngModel name=\"w1\" label=\"Child\"> </bb-input-checkbox-ui>\n                    </li>\n                    <li>\n                      <bb-input-checkbox-ui ngModel name=\"w2\" label=\"Child\"> </bb-input-checkbox-ui>\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </form>\n  </div>\n  <div class=\"col-md-8\">{{ checkboxGroupForm.form.value | json }}</div>\n</div>\n", components: [{ type: i1$7.CheckboxGroupComponent, selector: "bb-checkbox-group-ui" }, { type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "json": i4.JsonPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-checkbox-group-example-ui',
                    templateUrl: './checkbox-group-example.component.html',
                }]
        }] });

class CollapsibleAccordionExampleComponent {
}
CollapsibleAccordionExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CollapsibleAccordionExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleAccordionExampleComponent, selector: "bb-collapsible-accordion-example-ui", ngImport: i0, template: "<bb-collapsible-accordion-ui [closeOthers]=\"true\" [openFirst]=\"true\">\n  <bb-collapsible-card-ui>\n    <div bbCollapsibleTitle>Panel #1</div>\n    <div bbCollapsibleBody>\n      The first panel is expanded automatically.\n    </div>\n  </bb-collapsible-card-ui>\n  <bb-collapsible-card-ui>\n    <div bbCollapsibleTitle>Panel #2</div>\n    <div bbCollapsibleBody>This is the second panel with content.</div>\n  </bb-collapsible-card-ui>\n  <bb-collapsible-card-ui>\n    <div bbCollapsibleTitle>Panel #3</div>\n    <div bbCollapsibleBody>Last but not least, the third panel.</div>\n  </bb-collapsible-card-ui>\n</bb-collapsible-accordion-ui>\n", components: [{ type: i1$8.CollapsibleAccordionComponent, selector: "bb-collapsible-accordion-ui", inputs: ["closeOthers", "openFirst", "obeyParentAccordion"] }, { type: i2$7.CollapsibleCardComponent, selector: "bb-collapsible-card-ui", inputs: ["isOpen", "ariaLabelForIcon", "aria-label", "hasChevron", "highlight", "shadow", "size"], outputs: ["isOpenChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-accordion-example-ui',
                    templateUrl: './collapsible-accordion.example.component.html',
                }]
        }] });

class CollapsibleCardExampleComponent {
}
CollapsibleCardExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CollapsibleCardExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleCardExampleComponent, selector: "bb-collapsible-card-example-ui", ngImport: i0, template: "<bb-collapsible-card-ui>\n  <span bbCollapsibleTitle>Click me</span>\n  <div bbCollapsibleBody>I am expandable content!</div>\n</bb-collapsible-card-ui>\n", components: [{ type: i2$7.CollapsibleCardComponent, selector: "bb-collapsible-card-ui", inputs: ["isOpen", "ariaLabelForIcon", "aria-label", "hasChevron", "highlight", "shadow", "size"], outputs: ["isOpenChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-card-example-ui',
                    templateUrl: './collapsible-card-example.component.html',
                }]
        }] });

class CollapsibleExampleComponent {
}
CollapsibleExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CollapsibleExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleExampleComponent, selector: "bb-collapsible-example-ui", ngImport: i0, template: "<bb-collapsible-ui #collapsible>\n  <ng-template\n    bbCollapsibleHeader\n    let-toggle=\"toggle\"\n    let-isOpen=\"true\"\n  >\n    <button bbButton (click)=\"toggle()\" class=\"bb-block--md\">\n      Toggle\n      <bb-icon-ui\n        [name]=\"collapsible.isOpen ? 'toggle-up' : 'toggle-down'\"\n        [inverse]=\"true\"\n        size=\"md\"\n      ></bb-icon-ui>\n    </button>\n  </ng-template>\n  <ng-template bbCollapsibleBody>\n    <p>I am expandable content!</p>\n  </ng-template>\n</bb-collapsible-ui>\n", components: [{ type: i1$9.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$9.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$9.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-example-ui',
                    templateUrl: './collapsible.example.component.html',
                }]
        }] });

class CommonErrorStateExampleComponent {
    constructor() {
        this.pageNotFound = new HttpErrorResponse({ status: 404 });
    }
}
CommonErrorStateExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CommonErrorStateExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CommonErrorStateExampleComponent, selector: "bb-common-error-state-example-ui", ngImport: i0, template: "<bb-common-error-state-ui\n  [error]=\"pageNotFound\"\n></bb-common-error-state-ui>\n", components: [{ type: i1$a.ErrorCommonStateComponent, selector: "bb-common-error-state-ui", inputs: ["error"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-common-error-state-example-ui',
                    templateUrl: './common-error-state.example.component.html',
                }]
        }] });

class CurrencyInputExampleComponent {
    constructor() {
        this.amount = new FormControl({
            amount: '123.32',
            currency: 'EUR',
        });
        this.currencies = ['USD', 'EUR'];
    }
}
CurrencyInputExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CurrencyInputExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencyInputExampleComponent, selector: "bb-currency-input-example-ui", ngImport: i0, template: "<bb-currency-input-ui\n  [formControl]=\"amount\"\n  [currencies]=\"currencies\"\n  [allowNegativeValue]=\"true\"\n  resultType=\"string\"\n></bb-currency-input-ui>\n", components: [{ type: i1$b.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }], directives: [{ type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-currency-input-example-ui',
                    templateUrl: './currency-input.example.component.html',
                }]
        }] });

class DatePipeExampleComponent {
    constructor() {
        this.exampleDate = '2018-12-12T14:29:14.000Z';
    }
}
DatePipeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DatePipeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DatePipeExampleComponent, selector: "bb-date-pipe-example-ui", ngImport: i0, template: "<p>\n  {{ exampleDate | bbDate: 'bbShort':'GMT-0700':'en-US' }}\n</p>\n", pipes: { "bbDate": i1$c.BbDatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-date-pipe-example-ui',
                    templateUrl: './date-pipe.example.component.html',
                }]
        }] });

class DropdownMenuExampleComponent {
    constructor() {
        this.dropdownMenuOptions = [
            { label: '30 minutes', duration: 1800 },
            { label: '1 hour', duration: 3600 },
            { label: '1 day', duration: 86400 },
        ];
        this.dropdownMenuOptionsLabel = this.dropdownMenuOptions.map((item) => item.label);
    }
    onButtonDropdownSelect(label) {
        const item = this.dropdownMenuOptions.find((option) => option.label === label);
        if (item) {
            this.snooze(item.duration);
        }
    }
    snooze(duration) {
        alert(`Snooze for ${duration} seconds`);
    }
}
DropdownMenuExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DropdownMenuExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuExampleComponent, selector: "bb-dropdown-menu-example-ui", ngImport: i0, template: "<bb-dropdown-menu-ui\n  container=\"body\"\n  position=\"bottom\"\n  icon=\"caret-down\"\n  btnColor=\"primary\"\n  iconSize=\"lg\"\n  [options]=\"dropdownMenuOptionsLabel\"\n  (select)=\"onButtonDropdownSelect($event)\"\n>\n  <ng-template bbDropdownLabel>\n    <bb-icon-ui name=\"time\" size=\"md\"></bb-icon-ui>\n    &nbsp;\n    <span>Snooze notification</span>\n  </ng-template>\n</bb-dropdown-menu-ui>\n", components: [{ type: i1$d.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$d.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-menu-example-ui',
                    templateUrl: './dropdown-menu.example.component.html',
                }]
        }] });

class EllipsisExampleComponent {
}
EllipsisExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
EllipsisExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EllipsisExampleComponent, selector: "bb-ellipsis-example-ui", ngImport: i0, template: "<div style=\"width: 320px\">\n  <bb-ellipsis-ui\n    [lineClamp]=\"2\"\n    text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n  ></bb-ellipsis-ui>\n</div>\n", components: [{ type: i1$e.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-ellipsis-example-ui',
                    templateUrl: './ellipsis.example.component.html',
                }]
        }] });

class EmptyStateExampleComponent {
}
EmptyStateExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
EmptyStateExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EmptyStateExampleComponent, selector: "bb-empty-state-example-ui", ngImport: i0, template: "<bb-empty-state-ui\n  title=\"No transactions found\"\n  subtitle=\"Please change your filters<br>and try again\"\n  iconSize=\"lg\"\n  iconModifier=\"error\"\n  iconColor=\"danger\"\n  iconClasses=\"text-muted\"\n  [showIcon]=\"true\"\n></bb-empty-state-ui>\n", components: [{ type: i1$f.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-empty-state-example-ui',
                    templateUrl: './empty-state.example.component.html',
                }]
        }] });

class FieldsetExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            anonymous: false,
            personalInformation: this.formBuilder.group({
                name: [''],
                surname: [''],
            }),
        });
    }
}
FieldsetExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
FieldsetExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FieldsetExampleComponent, selector: "bb-fieldset-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <p>\n    <bb-input-checkbox-ui\n      label=\"I wish to remain anonymous\"\n      formControlName=\"anonymous\"\n    ></bb-input-checkbox-ui>\n  </p>\n  <bb-fieldset-ui\n    heading=\"Personal information\"\n    [disabled]=\"vForm?.get('anonymous')?.value\"\n    [formGroup]=\"vForm?.get('personalInformation')\"\n  >\n    <p>\n      <bb-input-text-ui\n        label=\"Name\"\n        formControlName=\"name\"\n      ></bb-input-text-ui>\n    </p>\n    <p>\n      <bb-input-text-ui\n        label=\"Surname\"\n        formControlName=\"surname\"\n      ></bb-input-text-ui>\n    </p>\n  </bb-fieldset-ui>\n</form>\n", components: [{ type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i3$1.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-fieldset-example-ui',
                    templateUrl: './fieldset.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class FileAttachmentExampleComponent {
    constructor() {
        this.attachment = {
            name: 'examplePDF.pdf',
            size: 10000,
            fileContent: of(new ArrayBuffer(2000000)),
        };
    }
}
FileAttachmentExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FileAttachmentExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FileAttachmentExampleComponent, selector: "bb-file-attachment-example-ui", ngImport: i0, template: "<bb-file-attachment-ui\n  [name]=\"attachment.name\"\n  [size]=\"attachment.size\"\n  [fileContent]=\"attachment.fileContent\"\n></bb-file-attachment-ui>\n", components: [{ type: i1$g.FileAttachmentComponent, selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-file-attachment-example-ui',
                    templateUrl: './file-attachment.example.component.html',
                }]
        }] });

class HeaderExampleComponent {
}
HeaderExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
HeaderExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HeaderExampleComponent, selector: "bb-header-example-ui", ngImport: i0, template: "<bb-header-ui headingType=\"h4\" heading=\"Example Header\"></bb-header-ui>\n", components: [{ type: i1$h.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-header-example-ui',
                    templateUrl: './header.example.component.html',
                }]
        }] });

class IconExampleComponent {
}
IconExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IconExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: IconExampleComponent, selector: "bb-icon-example-ui", ngImport: i0, template: "<bb-icon-ui\n  name=\"shopping-cart\"\n  size=\"xxl\"\n  color=\"primary\"\n  backgroundType=\"circle\"\n></bb-icon-ui>\n", components: [{ type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-icon-example-ui',
                    templateUrl: './icon.example.component.html',
                }]
        }] });

class InputCheckboxExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            termsConditions: { value: false },
        });
    }
}
InputCheckboxExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputCheckboxExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputCheckboxExampleComponent, selector: "bb-input-checkbox-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <p>\n    <bb-input-checkbox-ui\n      label=\"I agree with the Terms & Conditions\"\n      formControlName=\"inputCheckbox\"\n    ></bb-input-checkbox-ui>\n  </p>\n</form>\n", components: [{ type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-checkbox-example-ui',
                    templateUrl: './input-checkbox.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputDatepickerExampleComponent {
    constructor() {
        this.transferDate = '2024-12-25T00:00:00.000Z';
    }
}
InputDatepickerExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputDatepickerExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputDatepickerExampleComponent, selector: "bb-input-datepicker-example-ui", ngImport: i0, template: "<bb-input-datepicker-ui\n  label=\"Schedule transfer\"\n  [(ngModel)]=\"transferDate\"\n></bb-input-datepicker-ui>\n", components: [{ type: i2$a.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-datepicker-example-ui',
                    templateUrl: './input-datepicker.example.component.html',
                }]
        }] });

class InputEmailExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            email: ['info@example.com', Validators.required],
        });
    }
}
InputEmailExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputEmailExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputEmailExampleComponent, selector: "bb-input-email-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-input-email-ui\n    label=\"E-mail address\"\n    formControlName=\"email\"\n    placeholder=\"Please enter a value...\"\n  >\n  </bb-input-email-ui>\n</form>\n", components: [{ type: i2$b.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-email-example-ui',
                    templateUrl: './input-email.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputNumberExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            count: [
                '',
                Validators.compose([
                    Validators.required,
                    Validators.min(2),
                    Validators.max(42),
                ]),
            ],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
    hasMinError(field) {
        return this.hasError(field, 'min');
    }
    hasMaxError(field) {
        return this.hasError(field, 'max');
    }
}
InputNumberExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputNumberExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputNumberExampleComponent, selector: "bb-input-number-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-input-number-ui\n    label=\"Count\"\n    placeholder=\"Enter number...\"\n    formControlName=\"count\"\n    [aria-describedby]=\"'input-number-showcase-error'\"\n    [min]=\"2\"\n    [max]=\"42\"\n    [required]=\"true\"\n    #numberInput\n  >\n  </bb-input-number-ui>\n  <bb-input-validation-message-ui\n    id=\"input-number-showcase-error\"\n    [showErrors]=\"vForm?.dirty && vForm?.get('count')?.errors\"\n  >\n    <p *ngIf=\"hasRequiredError('count')\">Field is required.</p>\n    <p *ngIf=\"hasMinError('count')\">\n      Minimum number allowed is: {{ numberInput.min }}\n    </p>\n    <p *ngIf=\"hasMaxError('count')\">\n      Maximum number allowed is: {{ numberInput.max }}\n    </p>\n  </bb-input-validation-message-ui>\n</form>\n", components: [{ type: i2$c.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-number-example-ui',
                    templateUrl: './input-number.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputPhoneExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            workPhone: '4151234567',
        });
        this.country = [
            {
                countryCode: '+91',
                isoCode: 'IN',
                countryName: 'India',
            },
        ];
        this.countries = [
            {
                countryCode: '+1',
                isoCode: 'US',
                countryName: 'United States',
            },
            {
                countryCode: '+31',
                isoCode: 'NL',
                countryName: 'Netherlands',
            },
            {
                countryCode: '+34',
                isoCode: 'NZ',
                countryName: 'New Zealand',
            },
            {
                countryCode: '+355',
                isoCode: 'AL',
                countryName: 'Albania',
            },
            {
                countryCode: '+91',
                isoCode: 'IN',
                countryName: 'India',
            },
            {
                countryCode: '+55',
                isoCode: 'BR',
                countryName: 'Brazil',
            },
            {
                countryCode: '+420',
                isoCode: 'CZ',
                countryName: 'Czech Republic',
            },
            {
                countryCode: '+49',
                isoCode: 'DE',
                countryName: 'Germany',
            },
        ];
    }
}
InputPhoneExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputPhoneExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputPhoneExampleComponent, selector: "bb-input-phone-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-input-phone-ui\n    label=\"Work Phone\"\n    formControlName=\"workPhone\"\n    placeholder=\"Phone number without country code\"\n    autoComplete=\"tel-national\"\n  ></bb-input-phone-ui>\n\n  <bb-input-phone-ui\n    [id]=\"'phoneNumber1'\"\n    label=\"Phone Number\"\n    formControlName=\"workPhone\"\n    placeholder=\"Enter a phone number\"\n    [required]=\"true\"\n    [enableCountryCode]=\"true\"\n    defaultCountryIsoCode=\"BR\"\n    [countryList]=\"countries\"\n  >\n  </bb-input-phone-ui>\n\n  <bb-input-phone-ui\n    [id]=\"'phoneNumber2'\"\n    label=\"Phone Number\"\n    formControlName=\"workPhone\"\n    placeholder=\"Enter a phone number\"\n    [required]=\"true\"\n    [enableCountryCode]=\"true\"\n    [countryList]=\"country\"\n  >\n  </bb-input-phone-ui>\n</form>\n", components: [{ type: i2$d.InputPhoneComponent, selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-phone-example-ui',
                    templateUrl: './input-phone.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputRadioGroupExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            accountType: [{ value: '', disabled: false }, Validators.required],
        });
    }
    onRadioTemplateFormSubmit(form) {
        console.log(form.value);
    }
}
InputRadioGroupExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputRadioGroupExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRadioGroupExampleComponent, selector: "bb-input-radio-group-example-ui", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <p id=\"label-account-type\">Account type</p>\n  <bb-input-radio-group-ui\n    formControlName=\"accountType\"\n    aria-labelledby=\"'label-account-type'\"\n    [horizontal]=\"true\"\n    [preselect]=\"true\"\n    [required]=\"true\"\n  >\n    <bb-input-radio-ui value=\"cr\" label=\"Credit\"></bb-input-radio-ui>\n    <bb-input-radio-ui value=\"dt\" label=\"Debit\"></bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n</form>\n", components: [{ type: i2$1.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$1.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-radio-group-example-ui',
                    templateUrl: './input-radio-group.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputTextExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            name: ['', Validators.required],
        });
    }
}
InputTextExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputTextExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputTextExampleComponent, selector: "bb-input-text-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-input-text-ui\n    label=\"First Name\"\n    formControlName=\"name\"\n    [required]=\"true\"\n    placeholder=\"Name\"\n    autoComplete=\"given-name\"\n  ></bb-input-text-ui>\n</form>\n", components: [{ type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-text-example-ui',
                    templateUrl: './input-text.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputValidationMessageExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            name: [
                '',
                Validators.compose([
                    Validators.required,
                    Validators.minLength(5),
                ]),
            ],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
    hasLengthError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.minlength;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
}
InputValidationMessageExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputValidationMessageExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputValidationMessageExampleComponent, selector: "bb-input-validation-message-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-input-text-ui\n    label=\"First Name\"\n    formControlName=\"name\"\n    [aria-describedby]=\"'name-errors'\"\n  ></bb-input-text-ui>\n  <bb-input-validation-message-ui\n    id=\"name-errors\"\n    [showErrors]=\"!isFieldValid('name')\"\n  >\n    <span *ngIf=\"hasRequiredError('name')\"> Field is required. </span>\n    <span *ngIf=\"hasLengthError('name')\">\n      Field has minlength of 5.\n    </span>\n  </bb-input-validation-message-ui>\n</form>\n", components: [{ type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-validation-message-example-ui',
                    templateUrl: './input-validation-message.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class ListMultipleSelectExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.listMultipleSelectItemsConfig = {
            i2: {
                icon: 'warning',
                iconColor: 'warning',
            },
            i3: {
                icon: 'warning',
                iconColor: 'secondary',
                items: {
                    q2: {
                        icon: 'warning',
                    },
                },
            },
        };
        this.vForm = this.formBuilder.group({
            listMultipleSelect: this.formBuilder.group({
                i1: true,
                i2: true,
                i3: this.formBuilder.group({
                    q1: false,
                    q2: true,
                    q3: this.formBuilder.group({
                        w1: { value: true, disabled: true },
                        w2: { value: false, disabled: true },
                    }),
                }),
            }),
        });
    }
    onListMultipleSelectClearAll($event) {
        $event.preventDefault();
        if (this.vForm) {
            this.vForm.controls['listMultipleSelect'].patchValue({
                i1: false,
                i2: false,
                i3: {
                    q1: false,
                    q2: false,
                },
            });
        }
    }
}
ListMultipleSelectExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ListMultipleSelectExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ListMultipleSelectExampleComponent, selector: "bb-list-multiple-select-example-ui", ngImport: i0, template: "<form class=\"col-6\" [formGroup]=\"vForm\">\n  <bb-list-multiple-select-ui\n    formGroupName=\"listMultipleSelect\"\n    [config]=\"listMultipleSelectItemsConfig\"\n    aria-label=\"List multiple select\"\n  >\n    <ng-template bbListMultipleSelectAction>\n      <a href=\"\" (click)=\"onListMultipleSelectClearAll($event)\">Clear All</a>\n    </ng-template>\n  </bb-list-multiple-select-ui>\n</form>\n", components: [{ type: i2$e.ListMultipleSelectComponent, selector: "bb-list-multiple-select-ui", inputs: ["config"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2$e.ListMultipleSelectActionDirective, selector: "ng-template[bbListMultipleSelectAction]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-list-multiple-select-example-ui',
                    templateUrl: './list-multiple-select-example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

const LOADING_DURATION = 1500;
class LoadButtonExampleComponent {
    constructor() {
        this.itemsPerPage = 4;
        this.page = 0;
        this.totalItems = 12;
        this.loadRequest = new Subject();
        this.loadProcedure = this.loadRequest.pipe(mergeMap((params) => this.loadMore(params)));
        this.isLoading = merge(this.loadRequest.pipe(map(() => true)), this.loadProcedure.pipe(map(() => false))).pipe(startWith(false));
    }
    onLoadButtonPress(params) {
        this.loadRequest.next(params);
    }
    loadMore(params) {
        console.log('Loading more...');
        return of(params).pipe(delay(LOADING_DURATION), tap(() => {
            this.page = params.from;
        }));
    }
}
LoadButtonExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadButtonExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadButtonExampleComponent, selector: "bb-load-button-example-ui", ngImport: i0, template: "<bb-load-button-ui\n  color=\"primary\"\n  [size]=\"itemsPerPage\"\n  [from]=\"page\"\n  [totalCount]=\"totalItems\"\n  [isLoading]=\"isLoading | async\"\n  buttonSize=\"md\"\n  (paramChange)=\"onLoadButtonPress($event)\"\n>\n  <bb-icon-ui name=\"search\" size=\"lg\" cropped></bb-icon-ui>\n  Show more results...\n</bb-load-button-ui>\n", components: [{ type: i1$i.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-load-button-example-ui',
                    templateUrl: './load-button.example.component.html',
                }]
        }] });

class LoadingIndicatorExampleComponent {
}
LoadingIndicatorExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadingIndicatorExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadingIndicatorExampleComponent, selector: "bb-loading-indicator-example-ui", ngImport: i0, template: "<bb-loading-indicator-ui\n  loaderSize=\"lg\"\n  [showDelay]=\"750\"\n  text=\"Loading...\"\n></bb-loading-indicator-ui>\n", components: [{ type: i1$j.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loading-indicator-example-ui',
                    templateUrl: './loading-indicator.example.component.html',
                }]
        }] });

class LogoExampleComponent {
}
LogoExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LogoExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LogoExampleComponent, selector: "bb-logo-example-ui", ngImport: i0, template: "<div style=\"max-height: 80px; max-width: 80px\">\n  <bb-logo-ui type=\"emblem\"></bb-logo-ui>\n</div>\n", components: [{ type: i1$k.LogoComponent, selector: "bb-logo-ui", inputs: ["type", "isInverse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-logo-example-ui',
                    templateUrl: './logo.example.component.html',
                }]
        }] });

class ModalExampleComponent {
    constructor() {
        this.buttonColor = 'primary';
        this.showDialog = false;
    }
    openDialog() {
        this.showDialog = true;
    }
    closeDialog() {
        this.showDialog = false;
    }
    changeColor() {
        this.buttonColor =
            this.buttonColor === 'primary' ? 'secondary' : 'primary';
    }
    onConfirmDialog() {
        this.changeColor();
        this.closeDialog();
    }
}
ModalExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ModalExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModalExampleComponent, selector: "bb-modal-example-ui", ngImport: i0, template: "<div id=\"ariaDescribedById\">\n  Confirm Changing the color By Clicking on the button\n</div>\n<button\n  #button\n  bbButton\n  type=\"button\"\n  [color]=\"buttonColor\"\n  (click)=\"openDialog()\"\n  id=\"ariaLabelledByID\"\n>\n  Click here to change the color!\n</button>\n<bb-modal-ui\n  [isOpen]=\"showDialog\"\n  (cancel)=\"closeDialog()\"\n  (confirm)=\"onConfirmDialog()\"\n  [aria-describedby]=\"'ariaDescribedById'\"\n  [aria-labelledby]=\"'ariaLabelledByID'\"\n>\n  <bb-modal-header-ui\n    title=\"Confirm changing the color\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      Are you sure you want to change the color?\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui confirmText=\"I Agree\" (confirm)=\"closeDialog()\">\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$l.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$l.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1$l.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$l.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$l.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-modal-example-ui',
                    templateUrl: './modal.example.component.html',
                }]
        }] });

class ModeHeaderExampleComponent {
    onCloseModeHeaderClick() {
        console.log('Mode header closed');
    }
    onActionOneClick() {
        console.log('Action one clicked');
    }
    onActionTwoClick() {
        console.log('Action two clicked');
    }
}
ModeHeaderExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ModeHeaderExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModeHeaderExampleComponent, selector: "bb-mode-header-example-ui", ngImport: i0, template: "<bb-mode-header-ui\n  title=\"Sarah Conners\"\n  secondaryTitle=\"Retail banking user\"\n  closeButtonAriaLabel=\"Close mode header to exit the user details section\"\n  [showCloseButton]=\"true\"\n  [reverseTitleOrder]=\"true\"\n  (close)=\"onCloseModeHeaderClick()\"\n>\n  <bb-icon-ui\n    mode-header-icon\n    name=\"search\"\n    class=\"bb-stack__item--fill\"\n    size=\"sm\"\n    color=\"primary\"\n  ></bb-icon-ui>\n  <bb-badge-ui mode-header-status text=\"Sample Text\" color=\"success\">\n  </bb-badge-ui>\n  <bb-dropdown-menu-ui\n    mode-header-utility-area\n    container=\"body\"\n    icon=\"caret-down\"\n    btnColor=\"primary\"\n    iconSize=\"md\"\n  >\n    <ng-template bbDropdownLabel> <span>Actions</span></ng-template>\n    <ng-template bbDropdownMenuItem>\n      <button\n        class=\"dropdown-item\"\n        type=\"button\"\n        (click)=\"onActionOneClick()\"\n      >\n        Action One\n      </button>\n      <button\n        class=\"dropdown-item\"\n        type=\"button\"\n        (click)=\"onActionTwoClick()\"\n      >\n        Action Two\n      </button>\n    </ng-template>\n  </bb-dropdown-menu-ui>\n</bb-mode-header-ui>\n", components: [{ type: i1$m.ModeHeaderComponent, selector: "bb-mode-header-ui", inputs: ["title", "secondaryTitle", "showCloseButton", "closeButtonAriaLabel", "reverseTitleOrder"], outputs: ["close"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1$d.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i1$d.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i1$d.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-mode-header-example-ui',
                    templateUrl: './mode-header.example.component.html',
                }]
        }] });

const LOAD_DELAY = 500;
class NotificationExampleComponent {
    constructor(notificationService) {
        this.notificationService = notificationService;
    }
    checkMail() {
        setTimeout(() => this.showNewMailNotification(), LOAD_DELAY);
    }
    checkMailTemplate() {
        setTimeout(() => this.showNewMailNotificationWithTemplateMesage(), LOAD_DELAY);
    }
    showNewMailNotification() {
        this.notificationService.showNotification({
            header: 'You\'ve got new mail!',
            message: 'Backbase Release 1.2.3 is now available! What’s new in this release? ...',
            modifier: 'info',
            dismissible: true,
            primaryActionText: 'Visit website',
            primaryAction: () => {
                window.location.href = 'https://backbase.com/';
            },
        });
    }
    showNewMailNotificationWithTemplateMesage() {
        this.notificationService.showNotification({
            header: 'You\'ve got new mail!',
            message: this.messageTemplate,
            modifier: 'info',
            dismissible: true,
            primaryActionText: 'Visit website',
            primaryAction: () => {
                window.location.href = 'https://backbase.com/';
            },
        });
    }
}
NotificationExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationExampleComponent, deps: [{ token: i1$n.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
NotificationExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationExampleComponent, selector: "bb-notification-example-ui", viewQueries: [{ propertyName: "messageTemplate", first: true, predicate: ["messageTemplate"], descendants: true, static: true }], ngImport: i0, template: "<button\n  type=\"button\"\n  (click)=\"checkMail()\"\n  bbButton\n  [buttonSize]=\"'md'\"\n  [color]=\"'primary'\"\n>\n  Check for new mails\n</button>\n\n<button\n  type=\"button\"\n  (click)=\"checkMailTemplate()\"\n  bbButton\n  [buttonSize]=\"'md'\"\n  [color]=\"'primary'\"\n>\n  Check for new mails (message template)\n</button>\n\n<ng-template #messageTemplate>\n  <p>Backbase Release <strong>3.8.0</strong> is now available!</p>\n</ng-template>\n", directives: [{ type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-notification-example-ui',
                    templateUrl: './notification.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$n.NotificationService }]; }, propDecorators: { messageTemplate: [{
                type: ViewChild,
                args: ['messageTemplate', { static: true }]
            }] } });

class PaginationExampleComponent {
    constructor() {
        this.page = 0;
        this.totalItems = 100;
    }
    onPageChange(page) {
        this.page = page;
    }
}
PaginationExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaginationExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaginationExampleComponent, selector: "bb-pagination-example-ui", ngImport: i0, template: "<bb-pagination-ui\n  [boundaryLinks]=\"true\"\n  [directionLinks]=\"true\"\n  [itemsPerPage]=\"10\"\n  [maxNavPages]=\"2\"\n  [page]=\"0\"\n  [totalItems]=\"totalItems\"\n  (pageChange)=\"onPageChange($event)\"\n></bb-pagination-ui>\n", components: [{ type: i1$o.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pagination-example-ui',
                    templateUrl: './pagination.example.component.html',
                }]
        }] });

class PaymentCardExampleComponent {
    constructor() {
        this.paymentCard = {
            name: 'Ricardo Peterson',
            number: '5678',
            vendor: 'mastercard',
            expirationDate: new Date(2021, 2),
            cardName: 'Backbase Blue Card',
        };
        this.numberFormat = {
            length: 16,
            maskRange: [0, 12],
            segments: 4,
        };
    }
}
PaymentCardExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentCardExampleComponent, selector: "bb-payment-card-example-ui", ngImport: i0, template: "<bb-payment-card-ui\n  [paymentCard]=\"paymentCard\"\n  [paymentCardNumberFormat]=\"numberFormat\"\n></bb-payment-card-ui>\n", components: [{ type: i1$p.PaymentCardComponent, selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-example-ui',
                    templateUrl: './payment-card.example.component.html',
                }]
        }] });

const dateTimeToDate = (isoDateTime) => isoDateTime.replace(/T.+/, '');
class PeriodSelectorExampleComponent {
    constructor() {
        this.startDate = new Date('2018-08-01');
        this.endDate = new Date('2018-08-31');
        this.periodFormatters = {
            start: (date) => dateTimeToDate(date.toISOString()),
            end: (date) => `End: ${dateTimeToDate(date.toISOString())}`,
        };
    }
}
PeriodSelectorExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PeriodSelectorExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PeriodSelectorExampleComponent, selector: "bb-period-selector-example-ui", ngImport: i0, template: "<bb-period-selector-ui\n  periodSize=\"month\"\n  [periodStart]=\"startDate\"\n  [periodEnd]=\"endDate\"\n  [periodFormatters]=\"periodFormatters\"\n></bb-period-selector-ui>\n", components: [{ type: i1$q.PeriodSelectorComponent, selector: "bb-period-selector-ui", inputs: ["periodStart", "periodEnd", "periodFormatters", "period"], outputs: ["periodChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-period-selector-example-ui',
                    templateUrl: './period-selector.example.component.html',
                }]
        }] });

class ProductItemBasicAccountExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton\'s Savings Account',
            currency: 'EUR',
            amount: '83652.32',
            productNumber: 'NL75INGB3400120056',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 0],
            segments: 4,
        };
    }
}
ProductItemBasicAccountExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemBasicAccountExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemBasicAccountExampleComponent, selector: "bb-product-item-basic-account-example-ui", ngImport: i0, template: "<bb-product-item-basic-account-ui\n  [title]=\"product.name\"\n  [amount]=\"product.amount\"\n  [productNumber]=\"product.productNumber\"\n  [currency]=\"product.currency\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [highlight]=\"false\"\n  [favorite]=\"false\"\n  [active]=\"false\"\n  balanceLabel=\"Available balance\"\n></bb-product-item-basic-account-ui>\n", components: [{ type: i2$f.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-basic-account-example-ui',
                    templateUrl: './product-item-basic-account.example.component.html',
                }]
        }] });

class ProductItemCreditCardExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton\'s Credit Card',
            currency: 'USD',
            amount: '1425.99',
            productNumber: 'CH6629039MLXHC9VOO7M9',
        };
        this.interest = {
            id: 'd2d85314-e60c-44af-ba98-8f704dad5970',
            name: 'Available Balance',
            currency: 'USD',
            amount: '880.54',
            productNumber: 'CH6629039MLXHC9VOO7M9',
        };
        this.credit = {
            id: 'e9af649e-e338-4b3e-808b-62e9feae0865',
            name: 'Credit Limit',
            currency: 'USD',
            amount: '7280.86',
        };
        this.productDetails = {
            owner: 'Richard Norton',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 0],
            segments: 4,
        };
    }
}
ProductItemCreditCardExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemCreditCardExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemCreditCardExampleComponent, selector: "bb-product-item-credit-card-example-ui", ngImport: i0, template: "<bb-product-item-credit-card-ui\n  [title]=\"product.name\"\n  [amount]=\"product.amount\"\n  [productNumber]=\"product.productNumber\"\n  [currency]=\"product.currency\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [mainSectionCurrency]=\"interest.currency\"\n  [mainSectionAmount]=\"interest.amount\"\n  [mainSectionTitle]=\"interest.name\"\n  [secondarySectionCurrency]=\"credit.currency\"\n  [secondarySectionAmount]=\"credit.amount\"\n  [secondarySectionTitle]=\"credit.name\"\n  [productDetailsInfo]=\"productDetails\"\n  [highlight]=\"false\"\n  [favorite]=\"false\"\n></bb-product-item-credit-card-ui>\n", components: [{ type: i1$r.ProductItemCreditCardComponent, selector: "bb-product-item-credit-card-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-credit-card-example-ui',
                    templateUrl: './product-item-credit-card.example.component.html',
                }]
        }] });

class ProductItemCurrentAccountExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton\'s Account',
            currency: 'EUR',
            amount: '83652.32',
            productNumber: 'NL75INGB3400120056',
        };
        this.interest = {
            id: 'd2d85314-e60c-44af-ba98-8f704dad5970',
            name: 'Accrued Interest',
            currency: 'EUR',
            amount: '880.54',
            productNumber: 'NL75INGB3400120056',
        };
        this.credit = {
            id: 'e9af649e-e338-4b3e-808b-62e9feae0865',
            name: 'Credit Limit',
            currency: 'EUR',
            amount: '7500',
        };
        this.productDetails = {
            owner: 'Richard Norton',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 12],
            segments: 4,
        };
    }
}
ProductItemCurrentAccountExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemCurrentAccountExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemCurrentAccountExampleComponent, selector: "bb-product-item-current-account-example-ui", ngImport: i0, template: "<bb-product-item-current-account-ui\n  [title]=\"product.name\"\n  [amount]=\"product.amount\"\n  [productNumber]=\"product.productNumber\"\n  [currency]=\"product.currency\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [mainSectionCurrency]=\"interest.currency\"\n  [mainSectionAmount]=\"interest.amount\"\n  [mainSectionTitle]=\"interest.name\"\n  [secondarySectionCurrency]=\"credit.currency\"\n  [secondarySectionAmount]=\"credit.amount\"\n  [secondarySectionTitle]=\"credit.name\"\n  [productDetailsInfo]=\"productDetails\"\n  [highlight]=\"false\"\n  [favorite]=\"true\"\n>\n</bb-product-item-current-account-ui>\n", components: [{ type: i1$s.ProductItemCurrentAccountComponent, selector: "bb-product-item-current-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-current-account-example-ui',
                    templateUrl: './product-item-current-account.example.component.html',
                }]
        }] });

class ProductItemDebitCardExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton\'s Savings Account',
            currency: 'EUR',
            amount: '83652.32',
            productNumber: 'NL75INGB3400120056',
        };
        this.productDetails = {
            owner: 'Richard Norton',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 0],
            segments: 4,
        };
    }
}
ProductItemDebitCardExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemDebitCardExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemDebitCardExampleComponent, selector: "bb-product-item-debit-card-example-ui", ngImport: i0, template: "<bb-product-item-debit-card-ui\n  [title]=\"product.name\"\n  [productNumber]=\"product.productNumber\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [highlight]=\"false\"\n  [favorite]=\"false\"\n  [active]=\"false\"\n  [productDetailsInfo]=\"productDetails\"\n></bb-product-item-debit-card-ui>\n", components: [{ type: i1$t.ProductItemDebitCardComponent, selector: "bb-product-item-debit-card-ui", inputs: ["title", "productNumber", "productNumberFormat", "highlight", "active", "productDetailsInfo", "favorite", "favoriteIconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-debit-card-example-ui',
                    templateUrl: './product-item-debit-card.example.component.html',
                }]
        }] });

class ProductItemInvestmentAccountExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton\'s Savings Account',
            currency: 'EUR',
            amount: '83652.32',
            productNumber: 'NL75INGB3400120056',
        };
        this.productDetails = {
            owner: 'Richard Norton',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 0],
            segments: 4,
        };
    }
}
ProductItemInvestmentAccountExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemInvestmentAccountExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemInvestmentAccountExampleComponent, selector: "bb-product-item-investment-account-example-ui", ngImport: i0, template: "<bb-product-item-investment-account-ui\n  [title]=\"product.name\"\n  [amount]=\"product.amount\"\n  [productNumber]=\"product.productNumber\"\n  [currency]=\"product.currency\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [productDetailsInfo]=\"productDetails\"\n  [highlight]=\"false\"\n  [favorite]=\"false\"\n  [active]=\"false\"\n></bb-product-item-investment-account-ui>\n", components: [{ type: i1$u.ProductItemInvestmentAccountComponent, selector: "bb-product-item-investment-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-investment-account-example-ui',
                    templateUrl: './product-item-investment-account.example.component.html',
                }]
        }] });

class ProductItemLoanExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton`s Savings Account',
            currency: 'EUR',
            amount: '83652.32',
            productNumber: 'NL75INGB3400120056',
        };
        this.productDetails = {
            owner: 'Richard Norton',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 0],
            segments: 4,
        };
    }
}
ProductItemLoanExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemLoanExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemLoanExampleComponent, selector: "bb-product-item-loan-example-ui", ngImport: i0, template: "<bb-product-item-loan-ui\n  [title]=\"product.name\"\n  [amount]=\"product.amount\"\n  [productNumber]=\"product.productNumber\"\n  [currency]=\"product.currency\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [productDetailsInfo]=\"productDetails\"\n  [highlight]=\"false\"\n  [favorite]=\"false\"\n  [active]=\"false\"\n></bb-product-item-loan-ui>\n", components: [{ type: i1$v.ProductItemLoanComponent, selector: "bb-product-item-loan-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-loan-example-ui',
                    templateUrl: './product-item-loan.example.component.html',
                }]
        }] });

class ProductItemSavingsAccountExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton\'s Savings Account',
            currency: 'EUR',
            amount: '6610.75',
            productNumber: 'NL75INGB34008927',
        };
        this.interest = {
            id: 'd2d85314-e60c-44af-ba98-8f704dad5970',
            name: 'Accrued Interest',
            currency: 'EUR',
            amount: '880.54',
            productNumber: 'NL75INGB34008927',
        };
        this.productDetails = {
            owner: 'Richard Norton',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 12],
            segments: 4,
        };
    }
}
ProductItemSavingsAccountExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemSavingsAccountExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemSavingsAccountExampleComponent, selector: "bb-product-item-savings-account-example-ui", ngImport: i0, template: "<bb-product-item-savings-account-ui\n  [title]=\"product.name\"\n  [amount]=\"product.amount\"\n  [productNumber]=\"product.productNumber\"\n  [currency]=\"product.currency\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [mainSectionCurrency]=\"interest.currency\"\n  [mainSectionAmount]=\"interest.amount\"\n  [mainSectionTitle]=\"interest.name\"\n  [productDetailsInfo]=\"productDetails\"\n  [highlight]=\"false\"\n  [favorite]=\"true\"\n></bb-product-item-savings-account-ui>\n", components: [{ type: i1$w.ProductItemSavingsAccountComponent, selector: "bb-product-item-savings-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-savings-account-example-ui',
                    templateUrl: './product-item-savings-account.example.component.html',
                }]
        }] });

class ProductItemTermDepositExampleComponent {
    constructor() {
        this.product = {
            id: 'b387bfa5-75fd-410e-bb86-7f764f8ef69c',
            name: 'Ricardo Norton`s Account',
            currency: 'EUR',
            amount: '83652.32',
            productNumber: 'NL75INGB3400120056',
        };
        this.interest = {
            id: 'd2d85314-e60c-44af-ba98-8f704dad5970',
            name: 'Accrued Interest',
            currency: 'EUR',
            amount: '880.54',
            productNumber: 'NL75INGB3400120056',
        };
        this.productDetails = {
            owner: 'Richard Norton',
        };
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 12],
            segments: 4,
        };
    }
}
ProductItemTermDepositExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemTermDepositExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemTermDepositExampleComponent, selector: "bb-product-item-term-deposit-example-ui", ngImport: i0, template: "<bb-product-item-term-deposit-ui\n  [title]=\"product.name\"\n  [amount]=\"product.amount\"\n  [productNumber]=\"product.productNumber\"\n  [currency]=\"product.currency\"\n  [productNumberFormat]=\"productNumberFormat\"\n  [mainSectionCurrency]=\"interest.currency\"\n  [mainSectionAmount]=\"interest.amount\"\n  [mainSectionTitle]=\"interest.name\"\n  [productDetailsInfo]=\"productDetails\"\n  [highlight]=\"false\"\n  [favorite]=\"true\"\n></bb-product-item-term-deposit-ui>\n", components: [{ type: i1$x.ProductItemTermDepositComponent, selector: "bb-product-item-term-deposit-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-term-deposit-example-ui',
                    templateUrl: './product-item-term-deposit.example.component.html',
                }]
        }] });

const products = [
    {
        id: '1cdb2224',
        amount: '1231',
        currency: 'EUR',
        productNumber: '2342 443234 4234',
        name: 'Some Name',
        productType: 'currentAccounts',
    },
    {
        id: '1cdb222sgdfd4',
        amount: '123123',
        currency: 'EUR',
        productNumber: '2342 443234 4234432',
        name: 'Some Name 234',
        productType: 'my Type 234',
        custonType: 'header',
        header: 'savingsAccounts',
    },
    {
        id: '1cdb222gdfgsd4',
        amount: '123123',
        currency: 'EUR',
        productNumber: '2342 443234 4234432',
        name: 'Some NA34534',
        productType: 'termDeposits',
    },
    {
        id: '1cdb222sdfgd4',
        amount: '123123',
        currency: 'EUR',
        productNumber: '2342 443234 4234432',
        name: 'Some NA3454',
        productType: 'loans',
    },
    {
        id: '1cddfgb222sd4',
        amount: '123123',
        currency: 'EUR',
        productNumber: '2342 443234 4234432',
        name: 'Some N34534',
        productType: 'creditCards',
    },
    {
        id: '1cdb2sfd22sd4',
        amount: '123123',
        currency: 'EUR',
        productNumber: '2342 443233454 4234432',
        name: 'Some NAm345',
        productType: 'debitCards',
    },
    {
        id: '1cdb2df22sd4',
        amount: '123123',
        currency: 'EUR',
        productNumber: '2343542 443234 4234432',
        name: 'Some Name 234',
        productType: 'investmentAccounts',
    },
];

class ProductSelectorExampleComponent {
    constructor() {
        this.products = products;
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 12],
            segments: 4,
        };
    }
    selectProduct(product) {
        this.selected = product;
    }
}
ProductSelectorExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductSelectorExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSelectorExampleComponent, selector: "bb-product-selector-example-ui", ngImport: i0, template: "<bb-product-selector-ui [autoClose]=\"false\">\n  <ng-container bbDropdownToggle>\n    <bb-product-item-basic-account-ui\n      class=\"text-left\"\n      *ngIf=\"selected\"\n      [title]=\"selected.name\"\n      [amount]=\"selected.amount\"\n      [productNumber]=\"selected.productNumber\"\n      [currency]=\"selected.currency\"\n      [productNumberFormat]=\"productNumberFormat\"\n      [active]=\"true\"\n    >\n    </bb-product-item-basic-account-ui>\n    <div *ngIf=\"!selected\" class=\"p-4 d-flex align-items-center\">\n      <span class=\"align-items-left py-2\"> Select a product </span>\n    </div>\n  </ng-container>\n  <ng-container bbDropdownMenu>\n    <button\n      *ngFor=\"let product of products\"\n      (click)=\"selectProduct(product)\"\n      type=\"button\"\n      role=\"option\"\n      class=\"\n        flex-column\n        align-items-stretch\n        btn btn-block\n        rounded-0\n        m-0\n        p-0\n        text-left\n        bg-white\n      \"\n    >\n      <bb-product-item-basic-account-ui\n        [title]=\"product.name\"\n        [amount]=\"product.amount\"\n        [productNumber]=\"product.productNumber\"\n        [currency]=\"product.currency\"\n        [productNumberFormat]=\"productNumberFormat\"\n        [active]=\"product.id === selected?.id\"\n      ></bb-product-item-basic-account-ui>\n    </button>\n  </ng-container>\n</bb-product-selector-ui>\n", components: [{ type: i1$y.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i2$f.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-selector-example-ui',
                    templateUrl: './product-selector.example.component.html',
                }]
        }] });

class RichTextEditorExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            remarks: '',
        });
    }
}
RichTextEditorExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorExampleComponent, selector: "bb-rich-text-editor-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-rich-text-editor-ui\n    label=\"Remarks\"\n    formControlName=\"remarks\"\n    placeholder=\"Please, enter your message\"\n    [maxLength]=\"300\"\n    [required]=\"true\"\n  >\n  </bb-rich-text-editor-ui>\n</form>\n", components: [{ type: i2$g.RichTextEditorComponent, selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-example-ui',
                    templateUrl: './rich-text-editor.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class SearchBoxExampleComponent {
    constructor() {
        this.form = new FormGroup({
            query: new FormControl(''),
        });
        this.typeaheadOptions = {
            ngbTypeahead: this.search,
        };
    }
    startSearching(value) {
        alert(`You are searching for ${value}`);
    }
    search(text) {
        const searchItems = ['John', 'Jane', 'James', 'Joey'];
        return text.pipe(map((term) => searchItems.filter((item) => item.toLowerCase().indexOf(term.toLowerCase()) === 0)));
    }
}
SearchBoxExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SearchBoxExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SearchBoxExampleComponent, selector: "bb-search-box-example-ui", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <h4 id=\"ariaLabelledby\">Example Search Box</h4>\n  <div class=\"bb-block bb-block--lg\">\n    <h5 id=\"ariaDescribedby\">\n      Search box with search and clear button.\n    </h5>\n    <bb-search-box-ui\n      formControlName=\"query\"\n      [showClear]=\"true\"\n      [showSearch]=\"true\"\n      placeholder=\"Search box with autocomplete. Start typing with letter 'J'\"\n      [typeaheadOptions]=\"typeaheadOptions\"\n      (submit)=\"startSearching($event)\"\n      [aria-labelledby]=\"'ariaLabelledby'\"\n      [aria-describedby]=\"'ariaDescribedby'\"\n    ></bb-search-box-ui>\n  </div>\n</form>\n", components: [{ type: i1$z.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-search-box-example-ui',
                    templateUrl: './search-box.example.component.html',
                }]
        }] });

class SwitchExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            notifications: true,
        });
    }
}
SwitchExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
SwitchExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SwitchExampleComponent, selector: "bb-switch-example-ui", ngImport: i0, template: "<bb-switch-ui\n  [labelPosition]=\"'right'\"\n  [label]=\"'Show notifications'\"\n  formControlName=\"notifications\"\n>\n</bb-switch-ui>\n", components: [{ type: i2$h.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }], directives: [{ type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-switch-example-ui',
                    templateUrl: './switch.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class TextareaExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            textarea: ['', Validators.minLength(3)],
        });
    }
}
TextareaExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
TextareaExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TextareaExampleComponent, selector: "bb-textarea-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <p>\n    <bb-textarea-ui\n      label=\"Additional remarks\"\n      placeholder=\"Enter text...\"\n      formControlName=\"textarea\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"3\"\n      [maxLength]=\"160\"\n      [rows]=\"4\"\n    >\n    </bb-textarea-ui>\n  </p>\n</form>\n", components: [{ type: i2$i.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-textarea-example-ui',
                    templateUrl: './textarea.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class DropdownSingleSelectExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.objectDropdownOptions = [
            { title: 'DuckDuckGo', url: 'https://www.duckduckgo.com' },
            { title: 'Google', url: 'https://google.com' },
            { title: 'Yahoo', url: 'https://yahoo.com' },
        ];
        this.stringDropdownOptions = ['DuckDuckGo', 'Google', 'Yahoo'];
        this.frequencies = [
            {
                value: 'ONCE',
                every: 1,
            },
            {
                value: 'DAILY',
                every: 1,
            },
            {
                value: 'WEEKLY',
                every: 1,
            },
            {
                value: 'BIWEEKLY',
                every: 1,
            },
            {
                value: 'MONTHLY',
                every: 1,
            },
            {
                value: 'QUARTERLY',
                every: 1,
            },
            {
                value: 'YEARLY',
                every: 1,
            },
        ];
        this.vForm = this.formBuilder.group({
            websiteStrings: [
                this.stringDropdownOptions[0],
                Validators.required,
            ],
            websiteObjects: [
                this.objectDropdownOptions[0],
                Validators.required,
            ],
            frequency: [
                {
                    value: 'ONCE',
                    every: 1,
                },
                Validators.required,
            ],
        });
    }
    compareByValue(p1, p2) {
        if (!p1 || !p2)
            return;
        return p1.value === p2.value;
    }
}
DropdownSingleSelectExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
DropdownSingleSelectExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownSingleSelectExampleComponent, selector: "bb-dropdown-single-select-example-ui", ngImport: i0, template: "<h4 id=\"ariaLabelledById\">Single select Dropdown</h4>\n<div id=\"ariaDescribedById\">Default with list of string as options</div>\n<div [formGroup]=\"vForm\">\n  <bb-dropdown-single-select-ui\n    label=\"Choose your search engine\"\n    placeholder=\"No search engine selected\"\n    formControlName=\"websiteStrings\"\n    [options]=\"stringDropdownOptions\"\n    [required]=\"true\"\n    [id]=\"'singleDropdown'\"\n    class=\"d-block bb-block bb-block--lg\"\n    [aria-label]=\"'single select'\"\n    [aria-labelledby]=\"'ariaLabelledById'\"\n    [aria-describedby]=\"'ariaDescribedById'\"\n    [aria-owns]=\"'singleDropdown'\"\n  >\n  </bb-dropdown-single-select-ui>\n\n  <bb-dropdown-single-select-ui\n    label=\"Choose your search engine\"\n    placeholder=\"No search engine selected\"\n    formControlName=\"websiteObjects\"\n    displayAttributePath=\"title\"\n    [options]=\"objectDropdownOptions\"\n    [required]=\"true\"\n    class=\"d-block bb-block bb-block--lg\"\n  >\n  </bb-dropdown-single-select-ui>\n\n  <bb-dropdown-single-select-ui\n    [compareWithFn]=\"compareByValue\"\n    label=\"Frequency\"\n    displayAttributePath=\"value\"\n    formControlName=\"frequency\"\n    data-role=\"frequency-selector\"\n  >\n    <bb-dropdown-single-select-option-ui\n      *ngFor=\"let frequency of frequencies\"\n      class=\"text-capitalize\"\n      [value]=\"frequency\"\n      [label]=\"frequency.value\"\n    >\n    </bb-dropdown-single-select-option-ui>\n  </bb-dropdown-single-select-ui>\n</div>\n", components: [{ type: i2$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2$2.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }], directives: [{ type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-single-select-example-ui',
                    templateUrl: './dropdown-single-select.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class TabExampleComponent {
    constructor(notificationService) {
        this.notificationService = notificationService;
    }
    onSelect(index) {
        this.notificationService.showNotification({
            header: 'Tab Navigation',
            message: `Navigate to Tab #${index + 1}'`,
            modifier: 'info',
        });
    }
    onClick($event) {
        $event.stopPropagation();
        $event.preventDefault();
    }
}
TabExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabExampleComponent, deps: [{ token: i1$n.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
TabExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TabExampleComponent, selector: "bb-tab-example-ui", ngImport: i0, template: "<bb-tab-group-ui\n  [initialSelection]=\"0\"\n  (click)=\"onClick($event)\"\n  (select)=\"onSelect($event)\"\n>\n  <bb-tab-ui>First</bb-tab-ui>\n  <bb-tab-ui>Second</bb-tab-ui>\n  <bb-tab-ui>Third</bb-tab-ui>\n</bb-tab-group-ui>\n", components: [{ type: i2$j.TabGroupComponent, selector: "bb-tab-group-ui", inputs: ["initialSelection"], outputs: ["select"] }, { type: i2$j.TabComponent, selector: "bb-tab-ui" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tab-example-ui',
                    templateUrl: './tab.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$n.NotificationService }]; } });

class TooltipExampleComponent {
}
TooltipExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TooltipExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TooltipExampleComponent, selector: "bb-tooltip-example-ui", ngImport: i0, template: "<span\n  bbTooltip=\"Cancelling this payment cannot be undone!\"\n  placement=\"bottom\"\n>\n  <bb-icon-ui name=\"info\" color=\"info\" size=\"lg\"></bb-icon-ui>\n</span>\n", components: [{ type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2$k.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tooltip-example-ui',
                    templateUrl: './tooltip.example.component.html',
                }]
        }] });

class ProgessbarExampleComponent {
    constructor() {
        this.value = 0.42;
    }
}
ProgessbarExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgessbarExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProgessbarExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProgessbarExampleComponent, selector: "bb-progressbar-example-ui", ngImport: i0, template: "<bb-progressbar-ui\n  type=\"primary\"\n  [striped]=\"true\"\n  [animated]=\"true\"\n  [showValue]=\"true\"\n  [value]=\"value\"\n  [max]=\"1\"\n>\n</bb-progressbar-ui>\n", components: [{ type: i1$A.ProgressbarComponent, selector: "bb-progressbar-ui", inputs: ["height", "max", "showValue", "striped", "animated", "type", "value"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgessbarExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-progressbar-example-ui',
                    templateUrl: './progressbar.example.component.html',
                }]
        }] });

const countryData = [
    {
        id: 1,
        name: 'Russia',
        flag: 'f/f3/Flag_of_Russia.svg',
        area: 17075200,
        population: 146989754,
    },
    {
        id: 2,
        name: 'France',
        flag: 'c/c3/Flag_of_France.svg',
        area: 640679,
        population: 64979548,
    },
    {
        id: 3,
        name: 'Germany',
        flag: 'b/ba/Flag_of_Germany.svg',
        area: 357114,
        population: 82114224,
    },
    {
        id: 4,
        name: 'Portugal',
        flag: '5/5c/Flag_of_Portugal.svg',
        area: 92090,
        population: 10329506,
    },
    {
        id: 5,
        name: 'Canada',
        flag: 'c/cf/Flag_of_Canada.svg',
        area: 9976140,
        population: 36624199,
    },
    {
        id: 6,
        name: 'Vietnam',
        flag: '2/21/Flag_of_Vietnam.svg',
        area: 331212,
        population: 95540800,
    },
    {
        id: 7,
        name: 'Brazil',
        flag: '0/05/Flag_of_Brazil.svg',
        area: 8515767,
        population: 209288278,
    },
    {
        id: 8,
        name: 'Mexico',
        flag: 'f/fc/Flag_of_Mexico.svg',
        area: 1964375,
        population: 129163276,
    },
    {
        id: 9,
        name: 'United States',
        flag: 'a/a4/Flag_of_the_United_States.svg',
        area: 9629091,
        population: 324459463,
    },
    {
        id: 10,
        name: 'India',
        flag: '4/41/Flag_of_India.svg',
        area: 3287263,
        population: 1324171354,
    },
    {
        id: 11,
        name: 'Indonesia',
        flag: '9/9f/Flag_of_Indonesia.svg',
        area: 1910931,
        population: 263991379,
    },
    {
        id: 12,
        name: 'Tuvalu',
        flag: '3/38/Flag_of_Tuvalu.svg',
        area: 26,
        population: 11097,
    },
    {
        id: 13,
        name: 'China',
        flag: 'f/fa/Flag_of_the_People%27s_Republic_of_China.svg',
        area: 9596960,
        population: 1409517397,
    },
];

const sortInteger = {
    asc: 1,
    desc: -1,
};
class TableExampleComponent {
    constructor() {
        this.countries = countryData;
        this.countries$ = of(this.countries);
        this.sortDirection = 0;
        this.sortKey = '';
        this.pathFlagAssets = 'https://upload.wikimedia.org/wikipedia/commons/';
    }
    onRowClick(country) {
        alert(`You clicked on ${country.name}`);
    }
    onSort({ column, direction }) {
        this.sortDirection = sortInteger[direction] || 0;
        this.sortKey = column;
        this.countries$ = of(this.sort(this.countries, this.sortKey, this.sortDirection));
    }
    sort(countries, column, direction) {
        return [...countries].sort((a, b) => direction * this.compare(a[column], b[column]));
    }
    compare(v1, v2) {
        return v1 === v2 ? 0 : v1 < v2 ? -1 : 1;
    }
    getAriaSort(key) {
        if (this.sortKey === key) {
            if (this.sortDirection < 0) {
                return 'descending';
            }
            else if (this.sortDirection > 0) {
                return 'ascending';
            }
        }
        return null;
    }
}
TableExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableExampleComponent, selector: "bb-table-example-ui", ngImport: i0, template: "<table\n  [bbTable]=\"countries$ | async\"\n  bbTableFocus\n  (rowClick)=\"onRowClick($event)\"\n  (sort)=\"onSort($event)\"\n  class=\"table table-hover\"\n>\n  <thead>\n    <tr>\n      <th\n        [attr.aria-sort]=\"getAriaSort('name')\"\n        [bbSortable]=\"'name'\"\n        scope=\"col\"\n        tabindex=\"0\"\n      >\n        Country\n      </th>\n      <th\n        [attr.aria-sort]=\"getAriaSort('area')\"\n        [bbSortable]=\"'area'\"\n        scope=\"col\"\n        tabindex=\"0\"\n      >\n        Area (km\u00B2)\n      </th>\n      <th\n        [attr.aria-sort]=\"getAriaSort('population')\"\n        [bbSortable]=\"'population'\"\n        scope=\"col\"\n        tabindex=\"0\"\n      >\n        Population\n      </th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let country of countries$ | async\" [bbRow]=\"country\">\n      <td>\n        {{ country.name }}\n      </td>\n      <td>\n        {{ country.area | number }}\n      </td>\n      <td>\n        {{ country.population | number }}\n      </td>\n      <td>\n        <img\n          [alt]=\"'Flag of ' + country.name\"\n          [src]=\"pathFlagAssets + country.flag\"\n          width=\"32\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</table>\n", directives: [{ type: i1$B.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i1$B.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i1$B.TableSortableDirective, selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$B.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }], pipes: { "async": i4.AsyncPipe, "number": i4.DecimalPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-example-ui',
                    templateUrl: './table.example.component.html',
                }]
        }] });

class InputPasswordExampleComponent {
    constructor(formBuilder, notificationService) {
        this.formBuilder = formBuilder;
        this.notificationService = notificationService;
        this.changePasswordForm = this.formBuilder.group({
            password: ['', Validators.required],
        });
    }
    onSubmit() {
        this.notificationService.showNotification({
            message: 'Password has been changed',
            modifier: 'success',
        });
    }
}
InputPasswordExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordExampleComponent, deps: [{ token: i1$2.FormBuilder }, { token: i1$n.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
InputPasswordExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputPasswordExampleComponent, selector: "bb-input-password-example-ui", ngImport: i0, template: "<form [formGroup]=\"changePasswordForm\" (ngSubmit)=\"onSubmit()\">\n  <p>\n    <bb-input-password-ui\n      label=\"Password\"\n      placeholder=\"Please choose a new password\"\n      formControlName=\"password\"\n      autocomplete=\"new-password\"\n      [aria-describedby]=\"'password-error'\"\n      [showVisibilityControl]=\"true\"\n    >\n    </bb-input-password-ui>\n  </p>\n  <bb-input-validation-message-ui\n    id=\"password-error\"\n    [showErrors]=\"\n      !changePasswordForm.pristine && !changePasswordForm.valid\n    \"\n  >\n    <p>Password is required.</p>\n  </bb-input-validation-message-ui>\n\n  <button bbButton type=\"submit\">Change password</button>\n</form>\n", components: [{ type: i2$l.InputPasswordComponent, selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-password-example-ui',
                    templateUrl: './input-password.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }, { type: i1$n.NotificationService }]; } });

class InputInlineEditExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            description: ['Monthly Rent'],
        });
    }
    onAcceptDescription(description) {
        this.form.patchValue({
            description,
        });
    }
}
InputInlineEditExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputInlineEditExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputInlineEditExampleComponent, selector: "bb-input-inline-edit-example-ui", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <bb-input-inline-edit-ui\n    [inputText]=\"form.get('description')?.value\"\n    [maxLength]=\"64\"\n    [minLength]=\"2\"\n    [required]=\"true\"\n    (accept)=\"onAcceptDescription($event)\"\n  >\n  </bb-input-inline-edit-ui>\n</form>\n", components: [{ type: i2$m.InputInlineEditComponent, selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-inline-edit-example-ui',
                    templateUrl: './input-inline-edit.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class StepperExampleComponent {
}
StepperExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
StepperExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StepperExampleComponent, selector: "bb-stepper-example-ui", ngImport: i0, template: "<bb-stepper-ui>\n  <bb-stepper-step-ui\n    [isActive]=\"true\"\n    [isChecked]=\"true\"\n    ariaLabel=\"Step 1 out of 3\"\n    label=\"Step 1\"\n  ></bb-stepper-step-ui>\n  <bb-stepper-step-ui\n    label=\"Step 2\"\n    [isActive]=\"true\"\n    [isChecked]=\"false\"\n    [isCurrent]=\"true\"\n    ariaLabel=\"Step 2 out of 3\"\n  >\n    <bb-stepper-step-ui\n      label=\"Step 2.1\"\n      [isActive]=\"true\"\n      [isChecked]=\"false\"\n      [isCurrent]=\"true\"\n      ariaLabel=\"Sub step 1 out of 1\"\n    >\n    </bb-stepper-step-ui>\n  </bb-stepper-step-ui>\n  <bb-stepper-step-ui\n    ariaLabel=\"Step 3 out of 3\"\n    label=\"Step 3\"\n  ></bb-stepper-step-ui>\n</bb-stepper-ui>\n", components: [{ type: i1$C.StepperComponent, selector: "bb-stepper-ui", outputs: ["select"] }, { type: i1$C.StepperStepComponent, selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stepper-example-ui',
                    templateUrl: './stepper.example.component.html',
                }]
        }] });

class InputRangeExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            range: this.formBuilder.group({
                min: [0, Validators.min(10)],
                max: [100, Validators.max(90)],
            }, {
                validator: (g) => {
                    const min = g.get('min').errors;
                    const max = g.get('max').errors;
                    const errors = min || max ? Object.assign(Object.assign({}, min), max) : null;
                    console.log(errors);
                    return errors;
                },
            }),
        });
    }
}
InputRangeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputRangeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeExampleComponent, selector: "bb-input-range-example-ui", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <div bbInputRange formGroupName=\"range\">\n    <bb-input-number-ui\n      bbInputRangeMin\n      formControlName=\"min\"\n      label=\"Minimum\"\n      [aria-describedby]=\"'error-min'\"\n    ></bb-input-number-ui>\n    <bb-input-number-ui\n      bbInputRangeMax\n      formControlName=\"max\"\n      label=\"Maximum\"\n      [aria-describedby]=\"'error-max'\"\n    ></bb-input-number-ui>\n  </div>\n  <ng-container\n    *ngTemplateOutlet=\"\n      errors;\n      context: { $implicit: form.get('range') }\n    \"\n  ></ng-container>\n</form>\n\n<ng-template #errors let-control>\n  <bb-input-validation-message-ui\n    *ngIf=\"control?.errors as errors\"\n    [showErrors]=\"control?.touched\"\n  >\n    <div id=\"error-min\" *ngIf=\"errors?.min as min\">\n      Minimum value is {{ min.min }}\n    </div>\n    <div id=\"error-max\" *ngIf=\"errors?.max as max\">\n      Maximum value is {{ max.max }}\n    </div>\n  </bb-input-validation-message-ui>\n</ng-template>\n", components: [{ type: i2$c.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4$1.InputRangeDirective, selector: "[bbInputRange]" }, { type: i1$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i4$1.InputRangeMinDirective, selector: "bb-input-number-ui[bbInputRangeMin]", inputs: ["bbInputRangeMin"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4$1.InputRangeMaxDirective, selector: "bb-input-number-ui[bbInputRangeMax]", inputs: ["bbInputRangeMax"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-range-example-ui',
                    templateUrl: './input-range.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class IbanPipeExampleComponent {
    constructor() {
        this.productNumber = 'NL81TRIO0212471066';
    }
}
IbanPipeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IbanPipeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: IbanPipeExampleComponent, selector: "bb-iban-pipe-example-ui", ngImport: i0, template: "<div>\n  {{ productNumber | bbIban }}\n</div>\n", pipes: { "bbIban": i1$D.BbIbanPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-iban-pipe-example-ui',
                    templateUrl: './iban-pipe.example.component.html',
                }]
        }] });

class ActionStatusExampleComponent {
    constructor() {
        this.actionState = 'success';
    }
}
ActionStatusExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ActionStatusExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ActionStatusExampleComponent, selector: "bb-action-status-example-ui", ngImport: i0, template: "<bb-action-status-ui [state]=\"actionState\"></bb-action-status-ui>\n", components: [{ type: i1$E.ActionStatusComponent, selector: "bb-action-status-ui", inputs: ["state"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-action-status-example-ui',
                    templateUrl: './action-status.example.component.html',
                }]
        }] });

class InfiniteScrollExampleComponent {
    constructor() {
        this.items = [1, 2, 3, 4];
        this.complete = false;
        this.loading = false;
        this.maxCount = 42;
    }
    loadMore() {
        if (!this.loading) {
            this.loading = true;
            window.setTimeout(() => {
                this.loading = false;
                this.complete = this.items.length >= this.maxCount;
                this.generateMore(5);
            }, 1000);
        }
    }
    generateMore(count) {
        const length = Math.max(0, Math.min(this.maxCount, this.items.length + count) -
            this.items.length);
        const start = 1 + (this.items[this.items.length - 1] || 0);
        console.log(start, length);
        this.items = [
            ...this.items,
            ...new Array(length).fill(0).map((_, index) => start + index),
        ];
    }
}
InfiniteScrollExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InfiniteScrollExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InfiniteScrollExampleComponent, selector: "bb-infinite-scroll-example-ui", ngImport: i0, template: "<div style=\"max-height: 320px; overflow: scroll\">\n  <bb-infinite-scroll-ui\n    [disableScrollEnd]=\"complete || loading\"\n    (scrollEnd)=\"loadMore()\"\n  >\n    <ul>\n      <li *ngFor=\"let item of items\">Item {{ item }}</li>\n    </ul>\n    <p *ngIf=\"loading\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </p>\n    <p *ngIf=\"complete\">All items loaded</p>\n  </bb-infinite-scroll-ui>\n</div>\n", components: [{ type: i1$F.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i1$j.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-infinite-scroll-example-ui',
                    templateUrl: './infinite-scroll.example.component.html',
                }]
        }] });

class HighlightExampleComponent {
    constructor() {
        this.balance = '3299.00';
        this.creditLimit = '-500';
    }
}
HighlightExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
HighlightExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HighlightExampleComponent, selector: "bb-highlight-example-ui", ngImport: i0, template: "<table class=\"table\">\n  <tr>\n    <th>Balance</th>\n    <td\n      bbHighlight\n      [amount]=\"balance\"\n      positiveClass=\"bg-primary\"\n      negativeClass=\"bg-danger\"\n    >\n      <bb-amount-ui [amount]=\"balance\"></bb-amount-ui>\n    </td>\n  </tr>\n  <tr>\n    <th>Credit limit</th>\n    <td\n      bbHighlight\n      [amount]=\"creditLimit\"\n      positiveClass=\"bg-primary\"\n      negativeClass=\"bg-danger\"\n    >\n      <bb-amount-ui [amount]=\"creditLimit\"></bb-amount-ui>\n    </td>\n  </tr>\n</table>\n", components: [{ type: i1$3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2$n.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-highlight-example-ui',
                    templateUrl: './highlight.example.component.html',
                }]
        }] });

class PaymentCardNumberPipeExampleComponent {
    constructor() {
        this.productNumber = 'NL75INGB3400120056';
        this.productNumberFormat = {
            length: 18,
            maskRange: [0, 12],
            segments: 4,
        };
    }
}
PaymentCardNumberPipeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardNumberPipeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentCardNumberPipeExampleComponent, selector: "bb-payment-card-number-pipe-example-ui", ngImport: i0, template: "<p>{{ productNumber | paymentCardNumber: productNumberFormat }}</p>\n", pipes: { "paymentCardNumber": i1$G.PaymentCardNumberPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-number-pipe-example-ui',
                    templateUrl: './payment-card-number-pipe.example.component.html',
                }]
        }] });

class AccountNumberPipeExampleComponent {
    constructor() {
        this.productNumber = 'IBAN1234567891234567';
        this.numberType = 'iban';
    }
}
AccountNumberPipeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountNumberPipeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountNumberPipeExampleComponent, selector: "bb-account-number-pipe-example-ui", ngImport: i0, template: "<p>{{ productNumber | bbAccountNumber: numberType }}</p>\n", pipes: { "bbAccountNumber": i1$H.AccountNumberPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-number-pipe-example-ui',
                    templateUrl: './account-number-pipe.example.component.html',
                }]
        }] });

class PhoneNumberPipeExampleComponent {
    constructor() {
        this.workPhone = '4151234567';
    }
}
PhoneNumberPipeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberPipeExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PhoneNumberPipeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PhoneNumberPipeExampleComponent, selector: "bb-phone-number-pipe-example-ui", ngImport: i0, template: "<p>{{ workPhone | phoneNumber: 'US' }}</p>\n", pipes: { "phoneNumber": i1$I.PhoneNumberPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberPipeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-phone-number-pipe-example-ui',
                    templateUrl: './phone-number-pipe.example.component.html',
                }]
        }] });

const accounts = [
    {
        id: '1',
        name: 'Mrs J. Smith',
        balance: 102.1,
        number: 'GB29NWBK60161331926819',
        currency: 'EUR',
        favorite: true,
    },
    {
        id: '2',
        name: 'Mr J. Simposon',
        balance: 131230.1,
        number: 'GB29NWBK60161331926819',
        currency: 'EUR',
        favorite: false,
    },
    {
        id: '3',
        name: 'Eddie',
        balance: 133,
        number: 'GB29NWBK60161331926819',
        currency: 'USD',
        favorite: false,
    },
    {
        id: '4',
        name: 'Mr and Mrs J. Smith',
        balance: 126453.321,
        number: 'GB29NWBK60161331926819',
        currency: 'EUR',
        favorite: true,
    },
    {
        id: '5',
        name: 'SmallSmith',
        balance: 432.321,
        number: 'GB29NWBK60161331926819',
        currency: 'EUR',
        favorite: true,
    },
    {
        id: '6',
        name: 'Mr and SmallSmith',
        balance: 23443.321,
        number: 'GB29NWBK60161331926819',
        currency: 'EUR',
        favorite: false,
    },
    {
        id: '7',
        name: 'Mr and Small Smith',
        balance: 12423.31,
        number: 'GB29NWBK60161331926819',
        currency: 'EUR',
        favorite: false,
    },
];

class AccountSelectorExampleComponent {
    constructor() {
        this.items = accounts;
        this.selectedItems = this.items[0];
    }
    onChange($event) {
        const count = Array.isArray($event)
            ? $event.length
            : $event
                ? 1
                : 0;
        console.log(`${count} items selected`);
    }
    onSearch($event) {
        console.log(`Search for query: ${$event}`);
    }
    onClearSearch() {
        console.log('Search cleared');
    }
    onScrollToEnd() {
        console.log('Scrolled to end');
    }
}
AccountSelectorExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountSelectorExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountSelectorExampleComponent, selector: "bb-account-selector-example-ui", ngImport: i0, template: "<h2 id=\"ariaLabelledById\">Account Selector</h2>\n<div id=\"ariaDescribedById\">\n  Account selector Component that supports single select, multi select\n  and auto complete\n</div>\n<bb-account-selector-ui\n  [items]=\"items\"\n  [disableScrollEnd]=\"false\"\n  [multiple]=\"true\"\n  [closeOnSelect]=\"true\"\n  [filterItems]=\"true\"\n  [selectedItems]=\"selectedItems\"\n  [dropdownPosition]=\"'bottom'\"\n  (change)=\"onChange($event)\"\n  (clearSearch)=\"onClearSearch()\"\n  (scrollToEnd)=\"onScrollToEnd()\"\n  (search)=\"onSearch($event)\"\n  placeholder=\"Select Accounts\"\n  [aria-describedby]=\"'ariaLabelledById'\"\n  [aria-labelledby]=\"'ariaDescribedById'\"\n>\n</bb-account-selector-ui>\n", components: [{ type: i1$J.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-selector-example-ui',
                    templateUrl: './account-selector.example.component.html',
                }]
        }] });

class DropdownPanelExampleComponent {
}
DropdownPanelExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DropdownPanelExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownPanelExampleComponent, selector: "bb-dropdown-panel-example-ui", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-3\">\n    <bb-dropdown-panel-ui>\n      <ng-template bbDropdownToggle> Toggle without arrow </ng-template>\n      <ng-template bbDropdownMenu>\n        <div class=\"p-2\">The content of dropdown</div>\n      </ng-template>\n    </bb-dropdown-panel-ui>\n  </div>\n\n  <div class=\"col-3\">\n    <bb-dropdown-panel-ui>\n      <ng-template bbDropdownToggle let-isOpen=\"isOpen\">\n        <div class=\"d-flex align-items-center\">\n          Dropdown with arrow\n          <bb-icon-ui [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n        </div>\n      </ng-template>\n      <ng-template bbDropdownMenu>\n        <div class=\"p-2\">The content of dropdown</div>\n      </ng-template>\n    </bb-dropdown-panel-ui>\n  </div>\n</div>\n", components: [{ type: i1$K.DropdownPanelComponent, selector: "bb-dropdown-panel-ui", outputs: ["open"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$K.DropdownToggleDirective, selector: "ng-template[bbDropdownToggle]" }, { type: i1$K.DropdownMenuDirective, selector: "ng-template[bbDropdownMenu]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-panel-example-ui',
                    templateUrl: './dropdown-panel-example.component.html',
                }]
        }] });

class DropdownMultiSelectExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            days: new FormControl(['1', '2', '3', '4', '5']),
        });
    }
}
DropdownMultiSelectExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
DropdownMultiSelectExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMultiSelectExampleComponent, selector: "bb-dropdown-multi-select-example-ui", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <bb-dropdown-multi-select-ui\n    label=\"Available days\"\n    placeholder=\"Please choose one or more days\"\n    formControlName=\"days\"\n    [required]=\"true\"\n  >\n    <bb-dropdown-multi-select-option-ui value=\"0\" label=\"Sunday\">\n    </bb-dropdown-multi-select-option-ui>\n    <bb-dropdown-multi-select-option-ui value=\"1\" label=\"Monday\">\n    </bb-dropdown-multi-select-option-ui>\n    <bb-dropdown-multi-select-option-ui value=\"2\" label=\"Tuesday\">\n    </bb-dropdown-multi-select-option-ui\n    ><bb-dropdown-multi-select-option-ui value=\"3\" label=\"Wednesday\">\n    </bb-dropdown-multi-select-option-ui>\n    <bb-dropdown-multi-select-option-ui value=\"4\" label=\"Thursday\">\n    </bb-dropdown-multi-select-option-ui\n    ><bb-dropdown-multi-select-option-ui value=\"5\" label=\"Friday\">\n    </bb-dropdown-multi-select-option-ui>\n    <bb-dropdown-multi-select-option-ui value=\"6\" label=\"Saturday\">\n    </bb-dropdown-multi-select-option-ui>\n  </bb-dropdown-multi-select-ui>\n</form>\n", components: [{ type: i2$o.DropdownMultiSelectComponent, selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i2$o.DropdownMultiSelectOptionComponent, selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-multi-select-example-ui',
                    templateUrl: './dropdown-multi-select.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

/**
 * @name InputTimepickerExampleComponent
 *
 * @description
 * Component that displays multiple examples with the timepicker component.
 */
class InputTimepickerExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            time: [''],
        });
        this.timeModel = '';
        this.min = '13:00:00';
        this.max = '14:30:00';
    }
    hasError(type) {
        const time = this.vForm.get('time');
        if (time !== null && time.errors) {
            return !!time.errors[type];
        }
        return false;
    }
    showErrors() {
        const time = this.vForm.get('time');
        if (time !== null) {
            return time.errors && !time.valid;
        }
        return null;
    }
}
InputTimepickerExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputTimepickerExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputTimepickerExampleComponent, selector: "bb-input-timepicker-example-ui", ngImport: i0, template: "<div class=\"container d-block\">\n  <h5>Timepicker with 10 minute step and validation errors</h5>\n  <form [formGroup]=\"vForm\">\n    <bb-input-timepicker-ui\n      id=\"timePicker-validation\"\n      [readonly]=\"false\"\n      [minuteStep]=\"10\"\n      formControlName=\"time\"\n      [min]=\"min\"\n      [max]=\"max\"\n    >\n    </bb-input-timepicker-ui>\n\n    <bb-input-validation-message-ui [showErrors]=\"showErrors()\">\n      <span *ngIf=\"hasError('minTime')\">Time should be after {{ min }}</span>\n      <span *ngIf=\"hasError('maxTime')\">Time should not exceed {{ max }}</span>\n      <span *ngIf=\"hasError('minMaxTime')\">Time should be between {{ min }} and {{ max }}</span>\n    </bb-input-validation-message-ui>\n  </form>\n  <br />\n\n  <h5>Readonly timepicker</h5>\n  <bb-input-timepicker-ui id=\"timepicker-readonly\" [readonly]=\"true\"> </bb-input-timepicker-ui>\n  <br />\n\n  <h5>Timepicker with seconds and meridian</h5>\n  <bb-input-timepicker-ui\n    id=\"timepicker-meridian\"\n    [readonly]=\"false\"\n    [seconds]=\"true\"\n    clock=\"12h\"\n    [(ngModel)]=\"timeModel\"\n    [min]=\"min\"\n  >\n  </bb-input-timepicker-ui>\n</div>\n", components: [{ type: i2$p.InputTimepickerComponent, selector: "bb-input-timepicker-ui", inputs: ["hourStep", "clock", "minuteStep", "readonly", "seconds", "secondStep", "min", "max", "autocomplete"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-timepicker-example-ui',
                    templateUrl: './input-timepicker-example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class ItemLogExampleComponent {
    constructor() {
        this.logRecords = [
            {
                userFullName: 'Green Goblet',
                status: 'REJECTED',
                createdAt: '2018-01-23T13:44:02Z',
                comment: 'Limit exceeded',
            },
            {
                userFullName: 'Robin Green',
                status: 'APPROVED',
                createdAt: '2018-01-22T13:44:02Z',
            },
        ];
    }
}
ItemLogExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ItemLogExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ItemLogExampleComponent, selector: "bb-item-log-example-ui", ngImport: i0, template: "<bb-item-log-ui\n  [records]=\"logRecords\"\n  [isPending]=\"true\"\n></bb-item-log-ui>\n", components: [{ type: i1$L.ItemLogComponent, selector: "bb-item-log-ui", inputs: ["isPending", "records"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-item-log-example-ui',
                    templateUrl: './item-log.example.component.html',
                }]
        }] });

class KeyboardClickExampleComponent {
    constructor(notificationService) {
        this.notificationService = notificationService;
    }
    action() {
        this.notificationService.showNotification({
            message: 'bbKeyboardClick event',
            modifier: 'info',
        });
    }
}
KeyboardClickExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickExampleComponent, deps: [{ token: i1$n.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
KeyboardClickExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardClickExampleComponent, selector: "bb-keyboard-click-example-ui", ngImport: i0, template: "<button bbButton (bbKeyboardClick)=\"action()\">Click Me!</button>\n", directives: [{ type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3$3.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-keyboard-click-example-ui',
                    templateUrl: './keyboard-click.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$n.NotificationService }]; } });

// Please replace relative path imports e.g. '../*' with '@backbase/ui-ang'.
class SelectListExampleComponent {
    constructor() {
        this.items = [
            { name: 'One', value: 'one' },
            { name: 'Two', value: 'two' },
            { name: 'Three', value: 'three' },
        ];
    }
    ngOnInit() {
        this.form = new FormGroup({
            number: new FormControl([]),
        });
    }
}
SelectListExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SelectListExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectListExampleComponent, selector: "bb-select-list-example-ui", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <h4 id=\"selectListLabel\">Numbers from one to three</h4>\n  <bb-select-list-ui\n    id=\"selectListInput\"\n    formControlName=\"number\"\n    placeholder=\"Start typing name of numbers. e.g. one\"\n    [items]=\"items\"\n    [minTermLength]=\"3\"\n    aria-labelledby=\"selectListLabel\"\n  >\n  </bb-select-list-ui>\n</form>\n", components: [{ type: i1$M.SelectListComponent, selector: "bb-select-list-ui", inputs: ["loading", "placeholder", "minTermLength", "maxSelectedItems", "multiple", "items", "filterEnabled"], outputs: ["valueChange", "search", "clear"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-list-example-ui',
                    templateUrl: './select-list.example.component.html',
                }]
        }] });

class InputFileExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            fileInput: undefined,
        });
    }
}
InputFileExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileExampleComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputFileExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputFileExampleComponent, selector: "bb-input-file-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"bb-block bb-block--lg\">\n    <bb-input-file-ui\n      label=\"File input\"\n      formControlName=\"fileInput\"\n      data-role=\"file-input\"\n    >\n    </bb-input-file-ui>\n  </div>\n</form>\n", components: [{ type: i2$q.InputFileComponent, selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-file-example-ui',
                    templateUrl: './input-file.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class ValueDiffExampleComponent {
    constructor() {
        this.oldValue = 'Old Value';
        this.newValue = 'New Value';
    }
}
ValueDiffExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ValueDiffExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ValueDiffExampleComponent, selector: "bb-value-diff-ui-example", ngImport: i0, template: "<div [bbValueDiff]=\"newValue\">\n  {{ oldValue }}\n</div>\n", directives: [{ type: i1$N.ValueDiffDirective, selector: "[bbValueDiff]", inputs: ["bbValueDiff", "position", "sr-only-old", "sr-only-new", "showArrow"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-value-diff-ui-example',
                    templateUrl: './value-diff-example.component.html',
                }]
        }] });

const exampleComponents = [
    AccountNumberPipeExampleComponent,
    AccountSelectorExampleComponent,
    ActionStatusExampleComponent,
    AlertExampleComponent,
    AmountExampleComponent,
    AmountInputExampleComponent,
    AvatarExampleComponent,
    BadgeCounterExampleComponent,
    BadgeExampleComponent,
    ButtonExampleComponent,
    CardVendorExampleComponent,
    CharCounterExampleComponent,
    CheckboxGroupExampleComponent,
    CollapsibleAccordionExampleComponent,
    CollapsibleCardExampleComponent,
    CollapsibleExampleComponent,
    CommonErrorStateExampleComponent,
    CurrencyInputExampleComponent,
    ConfigurationInputComponent,
    DatePipeExampleComponent,
    DropdownMenuExampleComponent,
    DropdownMultiSelectExampleComponent,
    DropdownPanelExampleComponent,
    DropdownSingleSelectExampleComponent,
    EllipsisExampleComponent,
    EmptyStateExampleComponent,
    FieldsetExampleComponent,
    FileAttachmentExampleComponent,
    HeaderExampleComponent,
    HighlightExampleComponent,
    IbanPipeExampleComponent,
    IconExampleComponent,
    InfiniteScrollExampleComponent,
    InputCheckboxExampleComponent,
    InputDatepickerExampleComponent,
    InputEmailExampleComponent,
    InputFileExampleComponent,
    InputInlineEditExampleComponent,
    InputNumberExampleComponent,
    InputPasswordExampleComponent,
    InputPhoneExampleComponent,
    InputRadioGroupExampleComponent,
    InputRangeExampleComponent,
    InputTextExampleComponent,
    InputTimepickerExampleComponent,
    InputValidationMessageExampleComponent,
    ItemLogExampleComponent,
    KeyboardClickExampleComponent,
    ListMultipleSelectExampleComponent,
    LoadButtonExampleComponent,
    LoadingIndicatorExampleComponent,
    LogoExampleComponent,
    ModalExampleComponent,
    ModeHeaderExampleComponent,
    NotificationExampleComponent,
    PaginationExampleComponent,
    PaymentCardExampleComponent,
    PaymentCardNumberPipeExampleComponent,
    PeriodSelectorExampleComponent,
    PhoneNumberPipeExampleComponent,
    ProductItemBasicAccountExampleComponent,
    ProductItemCreditCardExampleComponent,
    ProductItemCurrentAccountExampleComponent,
    ProductItemDebitCardExampleComponent,
    ProductItemInvestmentAccountExampleComponent,
    ProductItemLoanExampleComponent,
    ProductItemSavingsAccountExampleComponent,
    ProductItemTermDepositExampleComponent,
    ProductSelectorExampleComponent,
    ProgessbarExampleComponent,
    RichTextEditorExampleComponent,
    SearchBoxExampleComponent,
    SelectListExampleComponent,
    StepperExampleComponent,
    SwitchExampleComponent,
    TabExampleComponent,
    TableExampleComponent,
    TextareaExampleComponent,
    TooltipExampleComponent,
    ValueDiffExampleComponent,
];
class BackbaseUiAngExamplesModule {
}
BackbaseUiAngExamplesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngExamplesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BackbaseUiAngExamplesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngExamplesModule, declarations: [AccountNumberPipeExampleComponent,
        AccountSelectorExampleComponent,
        ActionStatusExampleComponent,
        AlertExampleComponent,
        AmountExampleComponent,
        AmountInputExampleComponent,
        AvatarExampleComponent,
        BadgeCounterExampleComponent,
        BadgeExampleComponent,
        ButtonExampleComponent,
        CardVendorExampleComponent,
        CharCounterExampleComponent,
        CheckboxGroupExampleComponent,
        CollapsibleAccordionExampleComponent,
        CollapsibleCardExampleComponent,
        CollapsibleExampleComponent,
        CommonErrorStateExampleComponent,
        CurrencyInputExampleComponent,
        ConfigurationInputComponent,
        DatePipeExampleComponent,
        DropdownMenuExampleComponent,
        DropdownMultiSelectExampleComponent,
        DropdownPanelExampleComponent,
        DropdownSingleSelectExampleComponent,
        EllipsisExampleComponent,
        EmptyStateExampleComponent,
        FieldsetExampleComponent,
        FileAttachmentExampleComponent,
        HeaderExampleComponent,
        HighlightExampleComponent,
        IbanPipeExampleComponent,
        IconExampleComponent,
        InfiniteScrollExampleComponent,
        InputCheckboxExampleComponent,
        InputDatepickerExampleComponent,
        InputEmailExampleComponent,
        InputFileExampleComponent,
        InputInlineEditExampleComponent,
        InputNumberExampleComponent,
        InputPasswordExampleComponent,
        InputPhoneExampleComponent,
        InputRadioGroupExampleComponent,
        InputRangeExampleComponent,
        InputTextExampleComponent,
        InputTimepickerExampleComponent,
        InputValidationMessageExampleComponent,
        ItemLogExampleComponent,
        KeyboardClickExampleComponent,
        ListMultipleSelectExampleComponent,
        LoadButtonExampleComponent,
        LoadingIndicatorExampleComponent,
        LogoExampleComponent,
        ModalExampleComponent,
        ModeHeaderExampleComponent,
        NotificationExampleComponent,
        PaginationExampleComponent,
        PaymentCardExampleComponent,
        PaymentCardNumberPipeExampleComponent,
        PeriodSelectorExampleComponent,
        PhoneNumberPipeExampleComponent,
        ProductItemBasicAccountExampleComponent,
        ProductItemCreditCardExampleComponent,
        ProductItemCurrentAccountExampleComponent,
        ProductItemDebitCardExampleComponent,
        ProductItemInvestmentAccountExampleComponent,
        ProductItemLoanExampleComponent,
        ProductItemSavingsAccountExampleComponent,
        ProductItemTermDepositExampleComponent,
        ProductSelectorExampleComponent,
        ProgessbarExampleComponent,
        RichTextEditorExampleComponent,
        SearchBoxExampleComponent,
        SelectListExampleComponent,
        StepperExampleComponent,
        SwitchExampleComponent,
        TabExampleComponent,
        TableExampleComponent,
        TextareaExampleComponent,
        TooltipExampleComponent,
        ValueDiffExampleComponent], imports: [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        BackbaseUiModule,
        DropdownPanelModule,
        DropdownMultiSelectModule], exports: [AccountNumberPipeExampleComponent,
        AccountSelectorExampleComponent,
        ActionStatusExampleComponent,
        AlertExampleComponent,
        AmountExampleComponent,
        AmountInputExampleComponent,
        AvatarExampleComponent,
        BadgeCounterExampleComponent,
        BadgeExampleComponent,
        ButtonExampleComponent,
        CardVendorExampleComponent,
        CharCounterExampleComponent,
        CheckboxGroupExampleComponent,
        CollapsibleAccordionExampleComponent,
        CollapsibleCardExampleComponent,
        CollapsibleExampleComponent,
        CommonErrorStateExampleComponent,
        CurrencyInputExampleComponent,
        ConfigurationInputComponent,
        DatePipeExampleComponent,
        DropdownMenuExampleComponent,
        DropdownMultiSelectExampleComponent,
        DropdownPanelExampleComponent,
        DropdownSingleSelectExampleComponent,
        EllipsisExampleComponent,
        EmptyStateExampleComponent,
        FieldsetExampleComponent,
        FileAttachmentExampleComponent,
        HeaderExampleComponent,
        HighlightExampleComponent,
        IbanPipeExampleComponent,
        IconExampleComponent,
        InfiniteScrollExampleComponent,
        InputCheckboxExampleComponent,
        InputDatepickerExampleComponent,
        InputEmailExampleComponent,
        InputFileExampleComponent,
        InputInlineEditExampleComponent,
        InputNumberExampleComponent,
        InputPasswordExampleComponent,
        InputPhoneExampleComponent,
        InputRadioGroupExampleComponent,
        InputRangeExampleComponent,
        InputTextExampleComponent,
        InputTimepickerExampleComponent,
        InputValidationMessageExampleComponent,
        ItemLogExampleComponent,
        KeyboardClickExampleComponent,
        ListMultipleSelectExampleComponent,
        LoadButtonExampleComponent,
        LoadingIndicatorExampleComponent,
        LogoExampleComponent,
        ModalExampleComponent,
        ModeHeaderExampleComponent,
        NotificationExampleComponent,
        PaginationExampleComponent,
        PaymentCardExampleComponent,
        PaymentCardNumberPipeExampleComponent,
        PeriodSelectorExampleComponent,
        PhoneNumberPipeExampleComponent,
        ProductItemBasicAccountExampleComponent,
        ProductItemCreditCardExampleComponent,
        ProductItemCurrentAccountExampleComponent,
        ProductItemDebitCardExampleComponent,
        ProductItemInvestmentAccountExampleComponent,
        ProductItemLoanExampleComponent,
        ProductItemSavingsAccountExampleComponent,
        ProductItemTermDepositExampleComponent,
        ProductSelectorExampleComponent,
        ProgessbarExampleComponent,
        RichTextEditorExampleComponent,
        SearchBoxExampleComponent,
        SelectListExampleComponent,
        StepperExampleComponent,
        SwitchExampleComponent,
        TabExampleComponent,
        TableExampleComponent,
        TextareaExampleComponent,
        TooltipExampleComponent,
        ValueDiffExampleComponent] });
BackbaseUiAngExamplesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngExamplesModule, providers: [ButtonExampleService, ConfigurationInputService], imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            BackbaseUiModule,
            DropdownPanelModule,
            DropdownMultiSelectModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngExamplesModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        BackbaseUiModule,
                        DropdownPanelModule,
                        DropdownMultiSelectModule,
                    ],
                    declarations: [...exampleComponents],
                    exports: [...exampleComponents],
                    entryComponents: [...exampleComponents],
                    providers: [ButtonExampleService, ConfigurationInputService],
                }]
        }] });
const COMPONENTS$1 = exampleComponents;

let ActionStatusShowcaseComponent = class ActionStatusShowcaseComponent {
    constructor() {
        this.successExample = 'success';
        this.errorExample = 'error';
        this.warningExample = 'warning';
        this.infoExample = 'info';
    }
    ngOnInit() {
        this.setStatesToLoading();
    }
    setStatesToLoading() {
        setTimeout(() => {
            this.successExample = 'loading';
            this.errorExample = 'loading';
            this.warningExample = 'loading';
            this.infoExample = 'loading';
            this.setStatesToDone();
        }, 2000);
    }
    setStatesToDone() {
        setTimeout(() => {
            this.successExample = 'success';
            this.errorExample = 'error';
            this.warningExample = 'warning';
            this.infoExample = 'info';
            this.setStatesToLoading();
        }, 2000);
    }
};
ActionStatusShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ActionStatusShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ActionStatusShowcaseComponent, selector: "bb-action-status-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>Success</h2>\n  <bb-action-status-ui [state]=\"successExample\"></bb-action-status-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Error</h2>\n  <bb-action-status-ui [state]=\"errorExample\"></bb-action-status-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Warning</h2>\n  <bb-action-status-ui [state]=\"warningExample\"></bb-action-status-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Info</h2>\n  <bb-action-status-ui [state]=\"infoExample\"></bb-action-status-ui>\n</div>\n", components: [{ type: i1$E.ActionStatusComponent, selector: "bb-action-status-ui", inputs: ["state"] }] });
ActionStatusShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ActionStatusShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-action-status-ui-showcase',
                    templateUrl: './action-status-showcase.component.html',
                }]
        }] });

class ActionStatusShowcaseModule {
}
ActionStatusShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ActionStatusShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusShowcaseModule, declarations: [ActionStatusShowcaseComponent], imports: [CommonModule, ActionStatusModule] });
ActionStatusShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusShowcaseModule, imports: [[CommonModule, ActionStatusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ActionStatusShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ActionStatusModule],
                    declarations: [ActionStatusShowcaseComponent],
                    entryComponents: [ActionStatusShowcaseComponent],
                }]
        }] });

let AccountSelectorShowcaseComponent = class AccountSelectorShowcaseComponent {
    constructor(domAttributesService) {
        this.domAttributesService = domAttributesService;
        this.items = [
            {
                id: '1',
                name: 'Mrs J. Smith',
                balance: 102.1,
                number: 'GB29NWBK60161331926819',
                currency: 'EUR',
                favorite: true,
                status: 'inactive',
                bankBranchCode: '01788902',
            },
            {
                id: '2',
                name: 'Mr J. Simposon',
                balance: 131230.1,
                number: 'GB29NWBK60161331926819',
                currency: 'EUR',
                favorite: false,
                type: 'accounts',
                bankBranchCode: '01788902',
            },
            {
                id: '3',
                name: 'Eddie',
                balance: 133,
                number: 'GB29NWBK60161331926819',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'closed',
                bankBranchCode: '01788902',
            },
            {
                id: '4',
                name: 'Gerald Carr',
                balance: 400,
                number: 'GB94BARC10201530093459',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'inactive',
                bankBranchCode: '01788902',
            },
            {
                id: '5',
                name: 'Jenny Hawkins',
                balance: 500,
                number: 'GB33BUKB20201555555555',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'closed',
                bankBranchCode: '01788902',
            },
            {
                id: '6',
                name: 'Bob Sanders',
                balance: 300,
                number: 'GB29NWBK60161331926819',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'closed',
                bankBranchCode: '01788902',
            },
            {
                id: '7',
                name: 'Ashley Lowe',
                balance: 900,
                number: 'GB94BARC10201530093459',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'inactive',
                bankBranchCode: '01788902',
            },
            {
                id: '8',
                name: 'George Mason',
                balance: 250,
                number: 'GB33BUKB20201555555555',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'active',
                bankBranchCode: '01788902',
            },
            {
                id: '9',
                name: 'Wesley Harper',
                balance: 350,
                number: 'GB94BARC10201530093459',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'active',
                bankBranchCode: '01788902',
            },
            {
                id: '10',
                name: 'Kristin Frazier',
                balance: 550,
                number: 'GB33BUKB20201555555555',
                currency: 'USD',
                favorite: false,
                type: 'accounts',
                status: 'closed',
                bankBranchCode: '01788902',
            },
        ];
        this.typeahead = new Subject();
        this.typeaheadSearchTerm = '';
        this.typeaheadItems$ = new BehaviorSubject([...this.items]);
        this.accountSelectors = [
            {
                labelId: this.domAttributesService.generateId(),
                heading: 'Single select',
                placeholder: 'Select Account Single (doesn`t close on select)',
                dataRole: 'account-selector-single-select',
                multiple: false,
                items: [...this.items],
                selectedItems: undefined,
                showCurrencySymbol: true,
                eventTriggered: undefined,
                eventState: undefined,
                position: 'auto',
                closeOnSelect: false,
                productNumberFormat: { length: 18, maskRange: [0, 12], segments: 4 },
                change: (self, item) => {
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                search: (self, searchQ) => {
                    self.eventTriggered = '$search';
                    self.eventState = searchQ;
                },
                clearSearch: (self, event) => {
                    self.eventTriggered = '$clearSearch';
                    self.eventState = event;
                },
                scrollToEnd: (self, event) => {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            },
            {
                labelId: this.domAttributesService.generateId(),
                heading: 'Single select with notFoundText',
                placeholder: 'Select Account Single',
                dataRole: 'account-selector-single-select-no-text-found',
                multiple: false,
                items: [...this.items],
                selectedItems: undefined,
                eventTriggered: undefined,
                eventState: undefined,
                showCurrencySymbol: true,
                position: 'bottom',
                productNumberFormat: DefaultPaymentCardNumberFormat,
                notFoundText: 'Nothing found custom text',
                markFirst: true,
                invalid: true,
                closeOnSelect: true,
                change: (self, item) => {
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                search: (self, searchQ) => {
                    self.eventTriggered = '$search';
                    self.eventState = searchQ;
                },
                clearSearch: (self, event) => {
                    self.eventTriggered = '$clearSearch';
                    self.eventState = event;
                },
                scrollToEnd: (self, event) => {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            },
            {
                labelId: this.domAttributesService.generateId(),
                heading: 'Single select with disabled attr',
                placeholder: 'Select Account Single',
                dataRole: 'account-selector-single-select-disabled',
                multiple: false,
                items: [...this.items],
                selectedItems: undefined,
                showCurrencySymbol: true,
                eventTriggered: undefined,
                eventState: undefined,
                position: 'auto',
                productNumberFormat: { length: 18, maskRange: [0, 0], segments: 4 },
                disabled: true,
                change: (self, item) => {
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                search: (self, searchQ) => {
                    self.eventTriggered = '$search';
                    self.eventState = searchQ;
                },
                clearSearch: (self, event) => {
                    self.eventTriggered = '$clearSearch';
                    self.eventState = event;
                },
                scrollToEnd: (self, event) => {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            },
            {
                labelId: this.domAttributesService.generateId(),
                heading: 'Multiple select',
                placeholder: 'Select Multiple Accounts',
                dataRole: 'account-selector-multi-select',
                multiple: true,
                items: [...this.items],
                selectedItems: undefined,
                eventTriggered: undefined,
                eventState: undefined,
                showCurrencySymbol: true,
                position: 'auto',
                closeOnSelect: false,
                productNumberFormat: { length: 18, maskRange: [0, 0], segments: 4 },
                change: (self, item) => {
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                search: (self, searchQ) => {
                    self.eventTriggered = '$search';
                    self.eventState = searchQ;
                },
                clearSearch: (self, event) => {
                    self.eventTriggered = '$clearSearch';
                    self.eventState = event;
                },
                scrollToEnd: (self, event) => {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            },
            {
                labelId: this.domAttributesService.generateId(),
                heading: 'Dropdown position top select',
                placeholder: 'Select Account Single Dropdown Position',
                dataRole: 'account-selector-single-select-position-top',
                multiple: false,
                items: [...this.items],
                selectedItems: undefined,
                eventTriggered: undefined,
                eventState: undefined,
                showCurrencySymbol: true,
                position: 'top',
                closeOnSelect: true,
                productNumberFormat: { length: 18, maskRange: [0, 12], segments: 4 },
                change: (self, item) => {
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                search: (self, searchQ) => {
                    self.eventTriggered = '$search';
                    self.eventState = searchQ;
                },
                clearSearch: (self, event) => {
                    self.eventTriggered = '$clearSearch';
                    self.eventState = event;
                },
                scrollToEnd: (self, event) => {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            },
            {
                labelId: this.domAttributesService.generateId(),
                heading: 'Single select with Currency Code',
                placeholder: 'Select Account Single (doesn`t close on select)',
                dataRole: 'account-selector-single-select',
                multiple: false,
                items: [...this.items],
                selectedItems: undefined,
                showCurrencySymbol: false,
                eventTriggered: undefined,
                eventState: undefined,
                position: 'auto',
                closeOnSelect: true,
                productNumberFormat: { length: 18, maskRange: [0, 12], segments: 4 },
                change: (self, item) => {
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                search: (self, searchQ) => {
                    self.eventTriggered = '$search';
                    self.eventState = searchQ;
                },
                clearSearch: (self, event) => {
                    self.eventTriggered = '$clearSearch';
                    self.eventState = event;
                },
                scrollToEnd: (self, event) => {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            },
            {
                labelId: this.domAttributesService.generateId(),
                heading: 'Single select with Bank Branch Code display',
                placeholder: 'Select Account',
                dataRole: 'account-selector-single-select',
                multiple: false,
                items: [...this.items],
                selectedItems: undefined,
                showCurrencySymbol: false,
                eventTriggered: undefined,
                showBankBranchCode: true,
                eventState: undefined,
                position: 'auto',
                closeOnSelect: true,
                productNumberFormat: { length: 18, maskRange: [0, 12], segments: 4 },
                change: (self, item) => {
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                search: (self, searchQ) => {
                    self.eventTriggered = '$search';
                    self.eventState = searchQ;
                },
                clearSearch: (self, event) => {
                    self.eventTriggered = '$clearSearch';
                    self.eventState = event;
                },
                scrollToEnd: (self, event) => {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            },
        ];
        this.accountSelectorValidation = {
            labelId: this.domAttributesService.generateId(),
            heading: 'Single select with required validation',
            placeholder: 'Select Account Single (doesn`t close on select)',
            dataRole: 'account-selector-required-validation',
            multiple: false,
            items: [...this.items],
            selectedItems: new FormControl(undefined, Validators.required),
            eventTriggered: undefined,
            eventState: undefined,
            position: 'auto',
            closeOnSelect: false,
            invalid: false,
            required: true,
            showError: false,
            productNumberFormat: { length: 18, maskRange: [0, 12], segments: 4 },
            change: (self, item) => {
                self.selectedItems.setValue(Object.assign({}, item));
                self.eventTriggered = '$change';
                self.eventState = item;
            },
            search: (self, searchQ) => {
                self.eventTriggered = '$search';
                self.eventState = searchQ;
            },
            clearSearch: (self, event) => {
                self.eventTriggered = '$clearSearch';
                self.eventState = event;
            },
            scrollToEnd: (self, event) => {
                self.eventTriggered = '$scrollToEnd';
                self.eventState = event;
            },
            submit: (self) => {
                if (!self.selectedItems.value || self.selectedItems.value.length === 0) {
                    self.showError = true;
                    return;
                }
                self.showError = false;
            },
            reset: (self) => {
                self.selectedItems.reset();
                self.showError = false;
                this.accountSelectorWithValidation.resetAccountSelectorModel();
            },
            onBlur: (self) => {
                self.selectedItems.markAsTouched();
            },
        };
        this.accountSelectorTypeAhead = {
            labelId: this.domAttributesService.generateId(),
            heading: 'Single select with typeahead',
            placeholder: 'Select Account',
            dataRole: 'account-selector-single-select',
            multiple: false,
            selectedItems: undefined,
            showCurrencySymbol: false,
            eventTriggered: undefined,
            showBankBranchCode: true,
            eventState: undefined,
            position: 'bottom',
            editableSearchTerm: true,
            clearSearchOnAdd: false,
            closeOnSelect: true,
            typeahead: this.typeahead,
            typeToSearchText: 'This search uses typeahead',
            minTermLength: 0,
            productNumberFormat: { length: 18, maskRange: [0, 12], segments: 4 },
            change: (self, item) => {
                self.selectedItem = item;
                self.eventTriggered = '$change';
                self.eventState = item;
            },
            search: (self, searchQ) => {
                self.eventTriggered = '$search';
                self.eventState = searchQ;
            },
            clearSearch: (self, event) => {
                self.eventTriggered = '$clearSearch';
                self.eventState = event;
                this.typeahead.next('');
            },
            scrollToEnd: (self, event) => {
                self.eventTriggered = '$scrollToEnd';
                self.eventState = event;
            },
        };
        this.typeahead.subscribe((term) => {
            this.typeaheadSearchTerm = term || '';
            const filteredItems = this.items.filter((item) => item.name.toLowerCase().includes(this.typeaheadSearchTerm.toLowerCase()));
            this.typeaheadItems$.next(filteredItems);
        });
    }
    groupByItems(item) {
        return item.favorite;
    }
    searchFunc(term, item) {
        const SEARCHED_FIELDS = ['number', 'balance'];
        return SEARCHED_FIELDS.some((field) => item[field].toString().includes(term));
    }
};
AccountSelectorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorShowcaseComponent, deps: [{ token: i1.DomAttributesService }], target: i0.ɵɵFactoryTarget.Component });
AccountSelectorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountSelectorShowcaseComponent, selector: "bb-account-selector-ui-showcase", viewQueries: [{ propertyName: "accountSelectorWithValidation", first: true, predicate: ["accountSelectorWithValidation"], descendants: true }], ngImport: i0, template: "<ng-container *ngFor=\"let accountSelector of accountSelectors\">\n  <div class=\"bb-block bb-block--xl\">\n    <h4 [id]=\"accountSelector.labelId\">{{ accountSelector.heading }}</h4>\n    <bb-account-selector-ui\n      [disableScrollEnd]=\"false\"\n      [items]=\"accountSelector.items\"\n      [multiple]=\"accountSelector.multiple\"\n      (change)=\"accountSelector.change(accountSelector, $event)\"\n      (clearSearch)=\"accountSelector.clearSearch(accountSelector, $event)\"\n      [selectedItems]=\"accountSelector.selectedItems\"\n      (scrollToEnd)=\"accountSelector.scrollToEnd(accountSelector, $event)\"\n      (search)=\"accountSelector.search(accountSelector, $event)\"\n      [closeOnSelect]=\"accountSelector.closeOnSelect\"\n      [showCurrencySymbol]=\"accountSelector.showCurrencySymbol\"\n      [dropdownPosition]=\"accountSelector.position\"\n      [groupByFn]=\"groupByItems\"\n      [placeholder]=\"accountSelector.placeholder\"\n      [disabled]=\"accountSelector.disabled\"\n      [notFoundText]=\"accountSelector.notFoundText\"\n      [productNumberFormat]=\"accountSelector.productNumberFormat\"\n      [highlight]=\"false\"\n      [aria-labelledby]=\"accountSelector.labelId\"\n      [aria-describedby]=\"accountSelector.errorMessageId\"\n      [aria-invalid]=\"accountSelector.invalid\"\n      [attr.data-role]=\"accountSelector.dataRole\"\n      [showBankBranchCode]=\"accountSelector.showBankBranchCode\"\n      [typeahead]=\"accountSelector.typeahead\"\n      [minTermLength]=\"accountSelector.minTermLength\"\n      [typeToSearchText]=\"accountSelector.typeToSearchText\"\n    >\n    </bb-account-selector-ui>\n    <p [id]=\"accountSelector.errorMessageId\">{{ accountSelector.errorMessage }}</p>\n  </div>\n</ng-container>\n<div class=\"bb-block bb-block--xl\">\n  <h4>Showcase with custom search through 'number' and 'balance' fields (small size)</h4>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <bb-account-selector-ui\n        [searchFunc]=\"searchFunc\"\n        [disableScrollEnd]=\"false\"\n        [items]=\"accountSelectors[0].items\"\n        [multiple]=\"accountSelectors[0].multiple\"\n        (change)=\"accountSelectors[0].change(accountSelectors[0], $event)\"\n        (clearSearch)=\"accountSelectors[0].clearSearch(accountSelectors[0], $event)\"\n        [selectedItems]=\"accountSelectors[0].selectedItems\"\n        (scrollToEnd)=\"accountSelectors[0].scrollToEnd(accountSelectors[0], $event)\"\n        (search)=\"accountSelectors[0].search(accountSelectors[0], $event)\"\n        [closeOnSelect]=\"!accountSelectors[0].multiple\"\n        [dropdownPosition]=\"accountSelectors[0].position\"\n        [groupByFn]=\"groupByItems\"\n        [placeholder]=\"accountSelectors[0].placeholder\"\n        [productNumberFormat]=\"accountSelectors[0].productNumberFormat\"\n        [highlight]=\"false\"\n        [aria-labelledby]=\"accountSelectors[0].labelId\"\n        size=\"sm\"\n      >\n      </bb-account-selector-ui>\n    </div>\n    <div class=\"col-md-6\">\n      <bb-account-selector-ui\n        [searchFunc]=\"searchFunc\"\n        [disableScrollEnd]=\"false\"\n        [items]=\"accountSelectors[0].items\"\n        [multiple]=\"accountSelectors[0].multiple\"\n        (change)=\"accountSelectors[0].change(accountSelectors[0], $event)\"\n        (clearSearch)=\"accountSelectors[0].clearSearch(accountSelectors[0], $event)\"\n        [selectedItems]=\"accountSelectors[0].selectedItems\"\n        (scrollToEnd)=\"accountSelectors[0].scrollToEnd(accountSelectors[0], $event)\"\n        (search)=\"accountSelectors[0].search(accountSelectors[0], $event)\"\n        [closeOnSelect]=\"!accountSelectors[0].multiple\"\n        [dropdownPosition]=\"accountSelectors[0].position\"\n        [groupByFn]=\"groupByItems\"\n        [placeholder]=\"accountSelectors[0].placeholder\"\n        [productNumberFormat]=\"accountSelectors[0].productNumberFormat\"\n        [highlight]=\"false\"\n        [aria-labelledby]=\"accountSelectors[0].labelId\"\n        size=\"sm\"\n      >\n      </bb-account-selector-ui>\n    </div>\n  </div>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>Account selector without groupBy function</h4>\n  <bb-account-selector-ui\n    [disableScrollEnd]=\"false\"\n    [items]=\"accountSelectors[0].items\"\n    [multiple]=\"accountSelectors[0].multiple\"\n    (change)=\"accountSelectors[0].change(accountSelectors[0], $event)\"\n    (clearSearch)=\"accountSelectors[0].clearSearch(accountSelectors[0], $event)\"\n    [selectedItems]=\"accountSelectors[0].selectedItems\"\n    (scrollToEnd)=\"accountSelectors[0].scrollToEnd(accountSelectors[0], $event)\"\n    (search)=\"accountSelectors[0].search(accountSelectors[0], $event)\"\n    [closeOnSelect]=\"accountSelectors[0].closeOnSelect\"\n    [dropdownPosition]=\"accountSelectors[0].position\"\n    [placeholder]=\"accountSelectors[0].placeholder\"\n    [disabled]=\"false\"\n    [productNumberFormat]=\"accountSelectors[0].productNumberFormat\"\n    [highlight]=\"false\"\n    data-role=\"account-selector-without-groupBy\"\n    [aria-labelledby]=\"accountSelectorValidation.labelId\"\n    [aria-describedby]=\"'accountSelectorValidationerrorMessageId'\"\n    [aria-invalid]=\"accountSelectorValidation.invalid\"\n  >\n  </bb-account-selector-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4 [id]=\"accountSelectorValidation.labelId\">{{ accountSelectorValidation.heading }}</h4>\n  <form action=\"\" (ngSubmit)=\"accountSelectorValidation.submit(accountSelectorValidation)\">\n    <bb-account-selector-ui\n      #accountSelectorWithValidation\n      [disableScrollEnd]=\"false\"\n      [items]=\"accountSelectorValidation.items\"\n      [multiple]=\"accountSelectorValidation.multiple\"\n      (change)=\"accountSelectorValidation.change(accountSelectorValidation, $event)\"\n      (clearSearch)=\"accountSelectorValidation.clearSearch(accountSelectorValidation, $event)\"\n      [selectedItems]=\"accountSelectorValidation.selectedItems.value\"\n      (scrollToEnd)=\"accountSelectorValidation.scrollToEnd(accountSelectorValidation, $event)\"\n      (search)=\"accountSelectorValidation.search(accountSelectorValidation, $event)\"\n      [closeOnSelect]=\"accountSelectorValidation.closeOnSelect\"\n      [dropdownPosition]=\"accountSelectorValidation.position\"\n      [groupByFn]=\"groupByItems\"\n      [placeholder]=\"accountSelectorValidation.placeholder\"\n      [disabled]=\"false\"\n      [productNumberFormat]=\"accountSelectorValidation.productNumberFormat\"\n      [highlight]=\"false\"\n      (blur)=\"accountSelectorValidation.onBlur(accountSelectorValidation)\"\n      [required]=\"accountSelectorValidation.required\"\n      [showError]=\"accountSelectorValidation.showError\"\n      [attr.data-role]=\"accountSelectorValidation.dataRole\"\n      [aria-labelledby]=\"accountSelectorValidation.labelId\"\n      [aria-describedby]=\"'accountSelectorValidationerrorMessageId'\"\n      [aria-invalid]=\"accountSelectorValidation.invalid\"\n    >\n    </bb-account-selector-ui>\n    <bb-input-validation-message-ui\n      role=\"alert\"\n      [showErrors]=\"accountSelectorValidation.showError || accountSelectorValidation.selectedItems?.touched\"\n    >\n      <span\n        *ngIf=\"accountSelectorValidation.selectedItems?.errors?.required\"\n        data-role=\"account-selector-required-validation-message\"\n      >\n        Account is required.\n      </span>\n    </bb-input-validation-message-ui>\n    <div class=\"text-right\">\n      <button\n        type=\"submit\"\n        data-role=\"account-selector-required-validation-submit\"\n        bbButton\n        class=\"m-2 btn-primary btn-sm btn\"\n        color=\"primary\"\n      >\n        Submit\n      </button>\n      <button\n        (click)=\"accountSelectorValidation.reset(accountSelectorValidation)\"\n        data-role=\"account-selector-required-validation-reset\"\n        bbButton\n        class=\"m-2 btn-secondary btn-sm btn\"\n        color=\"primary\"\n      >\n        Reset\n      </button>\n    </div>\n  </form>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4 [id]=\"accountSelectorValidation.labelId\">\n    {{ accountSelectorTypeAhead.heading }} - TypeaheadSearchTerm: {{ typeaheadSearchTerm }}\n  </h4>\n  <bb-account-selector-ui\n    #accountSelectorWithValidation\n    [disableScrollEnd]=\"false\"\n    [items]=\"typeaheadItems$ | async\"\n    [multiple]=\"accountSelectorTypeAhead.multiple\"\n    (change)=\"accountSelectorTypeAhead.change(accountSelectorTypeAhead, $event)\"\n    (clearSearch)=\"accountSelectorTypeAhead.clearSearch(accountSelectorTypeAhead, $event)\"\n    (scrollToEnd)=\"accountSelectorTypeAhead.scrollToEnd(accountSelectorTypeAhead, $event)\"\n    (search)=\"accountSelectorTypeAhead.search(accountSelectorTypeAhead, $event)\"\n    [closeOnSelect]=\"accountSelectorTypeAhead.closeOnSelect\"\n    [dropdownPosition]=\"accountSelectorTypeAhead.position\"\n    [groupByFn]=\"groupByItems\"\n    [placeholder]=\"accountSelectorTypeAhead.placeholder\"\n    [disabled]=\"false\"\n    [productNumberFormat]=\"accountSelectorTypeAhead.productNumberFormat\"\n    [highlight]=\"false\"\n    [attr.data-role]=\"accountSelectorTypeAhead.dataRole\"\n    [aria-labelledby]=\"accountSelectorTypeAhead.labelId\"\n    [aria-describedby]=\"'accountSelectorTypeAheaderrorMessageId'\"\n    [typeahead]=\"accountSelectorTypeAhead.typeahead\"\n    [minTermLength]=\"accountSelectorTypeAhead.minTermLength\"\n    [typeToSearchText]=\"accountSelectorTypeAhead.typeToSearchText\"\n  >\n  </bb-account-selector-ui>\n</div>\n", components: [{ type: i1$J.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4.AsyncPipe } });
AccountSelectorShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], AccountSelectorShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-selector-ui-showcase',
                    templateUrl: './account-selector-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }]; }, propDecorators: { accountSelectorWithValidation: [{
                type: ViewChild,
                args: ['accountSelectorWithValidation']
            }] } });

const uiModules$2 = [AccountSelectorModule, ButtonModule, InputValidationMessageModule];
class AccountSelectorShowcaseModule {
}
AccountSelectorShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountSelectorShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorShowcaseModule, declarations: [AccountSelectorShowcaseComponent], imports: [CommonModule, FormsModule, ReactiveFormsModule, AccountSelectorModule, ButtonModule, InputValidationMessageModule] });
AccountSelectorShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorShowcaseModule, imports: [[CommonModule, FormsModule, ReactiveFormsModule, ...uiModules$2]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...uiModules$2],
                    declarations: [AccountSelectorShowcaseComponent],
                    entryComponents: [AccountSelectorShowcaseComponent],
                }]
        }] });

let AlertShowcaseComponent = class AlertShowcaseComponent {
    constructor() {
        this.colorVariants = [
            {
                title: 'Information! Use this alert to introduce information only',
                modifier: 'info',
            },
            {
                title: 'Warning! Use this alert to show warn only',
                modifier: 'warning',
            },
            {
                title: 'Success! Use this alert to show success only',
                modifier: 'success',
            },
            {
                title: 'Error! Use this alert to show error only',
                modifier: 'error',
            },
        ];
        this.dismissibleAlerts = [
            {
                dismissed: false,
            },
            {
                dismissed: false,
            },
        ];
    }
};
AlertShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AlertShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AlertShowcaseComponent, selector: "bb-alert-ui-showcase", ngImport: i0, template: "<div class=\"mb-4\">\n  <h4>Default</h4>\n  <bb-alert-ui title=\"Default\" data-role=\"alert-default\"></bb-alert-ui>\n</div>\n\n<div class=\"mb-4\">\n  <h4>Color variants</h4>\n  <bb-alert-ui\n    *ngFor=\"let alert of colorVariants\"\n    [title]=\"alert.title\"\n    [modifier]=\"alert.modifier\"\n    [attr.data-role]=\"'alert-' + alert.modifier\"\n  ></bb-alert-ui>\n</div>\n\n<div class=\"mb-4\">\n  <h4>Multiple lines</h4>\n  <bb-alert-ui\n    title=\"Default\"\n    modifier=\"info\"\n    message=\"Body of a sticky alert.  This alert type is placed above the site header.\"\n    data-role=\"alert-multiple-lines\"\n  ></bb-alert-ui>\n</div>\n\n<div class=\"mb-4\">\n  <h4>Dismissible</h4>\n  <bb-alert-ui\n    *ngIf=\"!dismissibleAlerts[0].dismissed\"\n    title=\"Dismissible alert\"\n    modifier=\"info\"\n    [dismissible]=\"true\"\n    (close)=\"dismissibleAlerts[0].dismissed = true\"\n    data-role=\"alert-dismissible-single-line\"\n  ></bb-alert-ui>\n  <bb-button-ui\n    *ngIf=\"dismissibleAlerts[0].dismissed\"\n    color=\"secondary\"\n    (click)=\"dismissibleAlerts[0].dismissed = false\"\n    data-role=\"alert-dismissible-single-line-restore\"\n    >Restore the alert</bb-button-ui\n  >\n\n  <bb-alert-ui\n    *ngIf=\"!dismissibleAlerts[1].dismissed\"\n    title=\"Dismissible alert\"\n    modifier=\"info\"\n    message=\"With text\"\n    [dismissible]=\"true\"\n    (close)=\"dismissibleAlerts[1].dismissed = true\"\n    data-role=\"alert-dismissible-multi-line\"\n  ></bb-alert-ui>\n  <bb-button-ui\n    *ngIf=\"dismissibleAlerts[1].dismissed\"\n    color=\"secondary\"\n    (click)=\"dismissibleAlerts[1].dismissed = false\"\n    data-role=\"alert-dismissible-multi-line-restore\"\n    >Restore the alert</bb-button-ui\n  >\n</div>\n\n<div class=\"mb-4\">\n  <h4>Custom message content template</h4>\n  <bb-alert-ui\n    *ngFor=\"let alert of colorVariants\"\n    [title]=\"alert.title\"\n    [modifier]=\"alert.modifier\"\n    [attr.data-role]=\"'alert-' + alert.modifier\"\n  >\n    Lorem ipsum dolor sit amet consectetur <a href=\"javascript:void(0);\" class=\"alert-link\">click here</a> adipisicing\n    elit. Dicta, corporis.\n  </bb-alert-ui>\n</div>\n", components: [{ type: i2$3.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i2$5.ButtonComponent, selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
AlertShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], AlertShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-alert-ui-showcase',
                    templateUrl: 'alert-showcase.component.html',
                }]
        }] });

class AlertShowcaseModule {
}
AlertShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AlertShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertShowcaseModule, declarations: [AlertShowcaseComponent], imports: [CommonModule, AlertModule, ButtonModule] });
AlertShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertShowcaseModule, imports: [[CommonModule, AlertModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AlertShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, AlertModule, ButtonModule],
                    declarations: [AlertShowcaseComponent],
                    entryComponents: [AlertShowcaseComponent],
                }]
        }] });

let AmountShowcaseComponent = class AmountShowcaseComponent {
    constructor() {
        this.asyncCurrency = '';
    }
    ngOnInit() {
        setTimeout(() => {
            this.asyncCurrency = 'USD';
        }, 2000);
    }
};
AmountShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AmountShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AmountShowcaseComponent, selector: "bb-amount-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--md\">\n  <h4>Amount with currency symbol</h4>\n  <bb-amount-ui [amount]=\"12345.67\" currency=\"USD\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Amount with currency code</h4>\n  <bb-amount-ui [amount]=\"12345.67\" currency=\"USD\" [mapCurrency]=\"false\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Amount with 5 decimals and currency rounding</h4>\n  <bb-amount-ui [amount]=\"12345.67891\" currency=\"USD\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Amount with 5 decimals and 7 decimal places override</h4>\n  <bb-amount-ui [amount]=\"12345.67891\" currency=\"USD\" [decimalPlaces]=\"7\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Amount with 5 decimals and 7 decimal places override, removing trailing zeroes</h4>\n  <bb-amount-ui [amount]=\"12345.67891\" currency=\"USD\" [decimalPlaces]=\"7\" [trailingZeroes]=\"false\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Amount with 0 decimal places override</h4>\n  <bb-amount-ui [amount]=\"12345.67891\" currency=\"USD\" [decimalPlaces]=\"0\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Negative amount</h4>\n  <bb-amount-ui [amount]=\"-12345.67\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Negative amount with currency symbol</h4>\n  <bb-amount-ui [amount]=\"-12345.67\" currency=\"USD\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Negative amount with currency code</h4>\n  <bb-amount-ui [amount]=\"-12345.67\" currency=\"USD\" [mapCurrency]=\"false\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Percentages</h4>\n  <bb-amount-ui [amount]=\"15\" [showPercent]=\"true\" [decimalPlaces]=\"0\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Asynchronous currency</h4>\n  <bb-amount-ui [amount]=\"-12345.67\" [currency]=\"asyncCurrency\" [decimalPlaces]=\"0\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Abbreviated amount</h4>\n  <bb-amount-ui [amount]=\"'-122329323230'\" [abbreviate]=\"true\" [mapCurrency]=\"true\" currency=\"USD\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Very big amount (<code>amount</code> should be passed as a string)</h4>\n  <bb-amount-ui [amount]=\"'999999999999999999999.99999'\" [mapCurrency]=\"true\" currency=\"USD\"></bb-amount-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Highlight (with bbHighlight directive and custom classes)</h4>\n  <div class=\"bb-block bb-block--sm\">\n    <bb-amount-ui [amount]=\"12345.67\" currency=\"USD\" [bbHighlight]=\"true\" positiveClass=\"text-success\"></bb-amount-ui>\n  </div>\n  <div class=\"bb-block bb-block--sm\">\n    <bb-amount-ui\n      [amount]=\"-12345.67\"\n      currency=\"USD\"\n      [bbHighlight]=\"true\"\n      negativeClass=\"bb-text-danger\"\n    ></bb-amount-ui>\n  </div>\n</div>\n", components: [{ type: i1$3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2$n.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }] });
AmountShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], AmountShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-amount-ui-showcase',
                    templateUrl: './amount-showcase.component.html',
                }]
        }] });

class AmountShowcaseModule {
}
AmountShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AmountShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountShowcaseModule, declarations: [AmountShowcaseComponent], imports: [CommonModule, AmountModule, HighlightModule] });
AmountShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountShowcaseModule, imports: [[CommonModule, AmountModule, HighlightModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, AmountModule, HighlightModule],
                    declarations: [AmountShowcaseComponent],
                    entryComponents: [AmountShowcaseComponent],
                }]
        }] });

let AmountInputShowcaseComponent = class AmountInputShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.test = 'egy';
        this.vForm = this.formBuilder.group({
            amount: [''],
            amount2: [''],
            amount3: [''],
        });
    }
    isFieldValid(fieldName) {
        var _a;
        const control = (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        return control && (control.valid || control.untouched);
    }
};
AmountInputShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AmountInputShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AmountInputShowcaseComponent, selector: "bb-amount-input-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\">\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-amount-input-ui\n            formControlName=\"amount\"\n            label=\"Amount\"\n            [id]=\"'bb-amount-input'\"\n            [currency]=\"'USD'\"\n            wrapperClasses=\"bb-amount-input__field--large\"\n            placeholder=\"0.00\"\n          >\n          </bb-amount-input-ui>\n        </div>\n      </div>\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-amount-input-ui\n            label=\"Amount with auto decimals\"\n            formControlName=\"amount2\"\n            [id]=\"'bb-amount-input2'\"\n            [currency]=\"'EUR'\"\n            wrapperClasses=\"bb-amount-input__field--large\"\n            [autoDecimal]=\"true\"\n            placeholder=\"0.00\"\n          >\n          </bb-amount-input-ui>\n        </div>\n      </div>\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-amount-input-ui\n            label=\"Amount with regular size\"\n            formControlName=\"amount3\"\n            [id]=\"'bb-amount-input3'\"\n            [currency]=\"'EUR'\"\n            [autoDecimal]=\"true\"\n            placeholder=\"0.00\"\n          >\n          </bb-amount-input-ui>\n        </div>\n      </div>\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-amount-input-ui\n            label=\"Amount without mapping currency\"\n            formControlName=\"amount3\"\n            [id]=\"'bb-amount-input4'\"\n            [mapCurrency]=\"false\"\n            [currency]=\"'EUR'\"\n            [autoDecimal]=\"true\"\n            placeholder=\"0.00\"\n          >\n          </bb-amount-input-ui>\n        </div>\n      </div>\n\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-amount-input-ui\n            label=\"Amount with ARIA described-by\"\n            formControlName=\"amount3\"\n            [id]=\"'bb-amount-input5'\"\n            [mapCurrency]=\"false\"\n            [currency]=\"'EUR'\"\n            [autoDecimal]=\"true\"\n            aria-describedby=\"describe-me-please\"\n            placeholder=\"0.00\"\n          >\n          </bb-amount-input-ui>\n          <span class=\"sr-only\" id=\"describe-me-please\">Describing the field</span>\n        </div>\n      </div>\n\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-form-field bb-form-field--md\">\n          <bb-amount-input-ui\n            label=\"Amount with ARIA described-by and without currency\"\n            formControlName=\"amount3\"\n            [id]=\"'bb-amount-input6'\"\n            [mapCurrency]=\"false\"\n            [autoDecimal]=\"true\"\n            aria-describedby=\"describe-me-too\"\n            placeholder=\"0.00\"\n          >\n          </bb-amount-input-ui>\n          <span class=\"sr-only\" id=\"describe-me-too\">I am the field description</span>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2$4.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
AmountInputShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], AmountInputShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-amount-input-ui-showcase',
                    templateUrl: './amount-input-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class AmountInputShowcaseModule {
}
AmountInputShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AmountInputShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputShowcaseModule, declarations: [AmountInputShowcaseComponent], imports: [CommonModule, AmountInputModule, ReactiveFormsModule] });
AmountInputShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputShowcaseModule, imports: [[CommonModule, AmountInputModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, AmountInputModule, ReactiveFormsModule],
                    declarations: [AmountInputShowcaseComponent],
                    entryComponents: [AmountInputShowcaseComponent],
                }]
        }] });

let AvatarShowcaseComponent = class AvatarShowcaseComponent {
};
AvatarShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AvatarShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AvatarShowcaseComponent, selector: "bb-avatar-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h4>Default</h4>\n  <bb-avatar-ui name=\"Jane Doe\" [attr.data-role]=\"'avatar-default'\"></bb-avatar-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Size variants</h4>\n  <div class=\"bb-stack\">\n    <bb-avatar-ui\n      size=\"sm\"\n      name=\"Jane Doe\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-initials-sm'\"\n    ></bb-avatar-ui>\n    <bb-avatar-ui\n      size=\"md\"\n      name=\"Jane Doe\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-initials-md'\"\n    ></bb-avatar-ui>\n    <bb-avatar-ui\n      size=\"lg\"\n      name=\"Jane Doe\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-initials-lg'\"\n    ></bb-avatar-ui>\n    <bb-avatar-ui\n      size=\"xl\"\n      name=\"Jane Doe\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-initials-xl'\"\n    ></bb-avatar-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>With image</h4>\n  <div class=\"bb-stack\">\n    <bb-avatar-ui\n      size=\"sm\"\n      image=\"./assets/images/avatar.jpg\"\n      imgAlt=\"image for avatar\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-image-sm'\"\n    ></bb-avatar-ui>\n    <bb-avatar-ui\n      size=\"md\"\n      image=\"./assets/images/avatar.jpg\"\n      imgAlt=\"image for avatar\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-image-md'\"\n    ></bb-avatar-ui>\n    <bb-avatar-ui\n      size=\"lg\"\n      image=\"./assets/images/avatar.jpg\"\n      imgAlt=\"image for avatar\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-image-lg'\"\n    ></bb-avatar-ui>\n    <bb-avatar-ui\n      size=\"xl\"\n      image=\"./assets/images/avatar.jpg\"\n      imgAlt=\"image for avatar\"\n      class=\"bb-stack__item\"\n      [attr.data-role]=\"'avatar-image-xl'\"\n    ></bb-avatar-ui>\n  </div>\n</div>\n", components: [{ type: i1$4.AvatarComponent, selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }] });
AvatarShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], AvatarShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-avatar-ui-showcase',
                    templateUrl: './avatar-showcase.component.html',
                }]
        }] });

class AvatarShowcaseModule {
}
AvatarShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AvatarShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarShowcaseModule, declarations: [AvatarShowcaseComponent], imports: [CommonModule, AvatarModule] });
AvatarShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarShowcaseModule, imports: [[CommonModule, AvatarModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvatarShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, AvatarModule],
                    declarations: [AvatarShowcaseComponent],
                    entryComponents: [AvatarShowcaseComponent],
                }]
        }] });

let BadgeCounterShowcaseComponent = class BadgeCounterShowcaseComponent {
    constructor() {
        this.badgeCounterShowCaseSetup = [
            {
                type: 'success',
                count: 5,
            },
            {
                type: 'danger',
                count: 18,
            },
            {
                type: 'danger',
                count: 1900,
            },
            {
                type: 'danger',
                count: 100,
                maxCount: 99,
            },
        ];
    }
};
BadgeCounterShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BadgeCounterShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BadgeCounterShowcaseComponent, selector: "bb-badge-counter-ui-showcase", ngImport: i0, template: "<div class=\"bb-stack bb-block bb-block--md\">\n  <bb-badge-counter-ui\n    *ngFor=\"let badge of badgeCounterShowCaseSetup\"\n    [count]=\"badge.count\"\n    [maxCount]=\"badge.maxCount\"\n    [color]=\"badge.type\"\n    class=\"bb-stack__item\"\n  ></bb-badge-counter-ui>\n</div>\n", components: [{ type: i1$5.BadgeCounterComponent, selector: "bb-badge-counter-ui", inputs: ["color", "count", "maxCount"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
BadgeCounterShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], BadgeCounterShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-badge-counter-ui-showcase',
                    templateUrl: 'badge-counter-showcase.component.html',
                }]
        }] });

class BadgeCounterShowcaseModule {
}
BadgeCounterShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BadgeCounterShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterShowcaseModule, declarations: [BadgeCounterShowcaseComponent], imports: [CommonModule, BadgeCounterModule] });
BadgeCounterShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterShowcaseModule, imports: [[CommonModule, BadgeCounterModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeCounterShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, BadgeCounterModule],
                    declarations: [BadgeCounterShowcaseComponent],
                    entryComponents: [BadgeCounterShowcaseComponent],
                }]
        }] });

let BadgeShowcaseComponent = class BadgeShowcaseComponent {
    constructor() {
        this.badgeShowCaseSetup = [
            {
                type: 'warning',
                text: {
                    single: 'A',
                    double: 'AA',
                },
            },
            {
                type: 'danger',
                text: {
                    single: 'A',
                    double: 'AA',
                },
            },
            {
                type: 'info',
                text: {
                    single: 'A',
                    double: 'AA',
                },
            },
            {
                type: 'success',
                text: {
                    single: 'A',
                    double: 'AA',
                },
            },
            {
                type: 'secondary',
                text: {
                    single: 'A',
                    double: 'AA',
                },
            },
        ];
    }
};
BadgeShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
BadgeShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BadgeShowcaseComponent, selector: "bb-badge-ui-showcase", ngImport: i0, template: "<div class=\"mb-4\">\n  <h4>Single character</h4>\n  <div *ngFor=\"let badgeType of badgeShowCaseSetup\" class=\"d-inline-block mb-4 mr-3\">\n    <bb-badge-ui\n      color=\"{{ badgeType.type }}\"\n      text=\"{{ badgeType.text.single }}\"\n      [attr.data-role]=\"'badge-' + badgeType.type + '-single'\"\n    >\n    </bb-badge-ui>\n  </div>\n</div>\n\n<div class=\"mb-4\">\n  <h4>Double character</h4>\n  <div *ngFor=\"let badgeType of badgeShowCaseSetup\" class=\"d-inline-block mb-4 mr-3\">\n    <bb-badge-ui\n      color=\"{{ badgeType.type }}\"\n      text=\"{{ badgeType.text.double }}\"\n      [attr.data-role]=\"'badge-' + badgeType.type + '-double'\"\n    >\n    </bb-badge-ui>\n  </div>\n</div>\n\n<div class=\"mb-4\">\n  <h4>Text</h4>\n  <div *ngFor=\"let badgeType of badgeShowCaseSetup\" class=\"d-inline-block mb-4 mr-3\">\n    <bb-badge-ui\n      color=\"{{ badgeType.type }}\"\n      text=\"{{ badgeType.type | titlecase }}\"\n      [attr.data-role]=\"'badge-' + badgeType.type + '-text'\"\n    >\n    </bb-badge-ui>\n  </div>\n</div>\n\n<div class=\"mb-4\">\n  <h4>Abbreviation</h4>\n  <div *ngFor=\"let badgeType of badgeShowCaseSetup\" class=\"d-inline-block mb-4 mr-3\">\n    <bb-badge-ui\n      color=\"{{ badgeType.type }}\"\n      text=\"{{ badgeType.type | titlecase }}\"\n      ariaLabel=\"{{ badgeType.type }}\"\n      [abbr]=\"true\"\n      [attr.data-role]=\"'badge-' + badgeType.type + '-abbr'\"\n    >\n    </bb-badge-ui>\n  </div>\n</div>\n", components: [{ type: i3.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "titlecase": i4.TitleCasePipe } });
BadgeShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], BadgeShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-badge-ui-showcase',
                    templateUrl: './badge-showcase.component.html',
                }]
        }] });

class BadgeShowcaseModule {
}
BadgeShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BadgeShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeShowcaseModule, declarations: [BadgeShowcaseComponent], imports: [CommonModule, BadgeModule] });
BadgeShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeShowcaseModule, imports: [[CommonModule, BadgeModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BadgeShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, BadgeModule],
                    declarations: [BadgeShowcaseComponent],
                    entryComponents: [BadgeShowcaseComponent],
                }]
        }] });

let ButtonShowcaseComponent = class ButtonShowcaseComponent {
    constructor(notificationService) {
        this.notificationService = notificationService;
        this.buttons = [
            {
                color: 'primary',
                text: 'Primary',
                icon: {
                    name: 'add',
                },
            },
            {
                color: 'secondary',
                text: 'Secondary',
                icon: {
                    name: 'add',
                    color: 'primary',
                },
            },
            {
                color: 'link',
                text: 'Link',
                icon: {
                    name: 'add',
                    color: 'primary',
                },
            },
            {
                color: 'link-text',
                text: 'link-text',
                noDisabledState: true,
                icon: {
                    name: 'arrow-back',
                    color: 'primary',
                },
            },
            {
                color: 'success',
                text: 'Success',
            },
            {
                color: 'danger',
                text: 'Danger',
            },
            {
                color: 'unstyled',
                text: 'Unstyled',
            },
        ];
        this.barButtonVariants = ['primary', 'secondary', 'link'];
        this.groups = {
            'sm-1': ['primary', 'secondary'],
            'sm-2': ['primary', 'secondary'],
            'sm-3': ['primary', 'secondary', 'secondary'],
            'md-1': ['primary', 'secondary'],
            'md-2': ['primary', 'secondary'],
            'md-3': ['primary', 'secondary', 'secondary'],
        };
        this.barButtons = this.buttons.filter((button) => this.barButtonVariants.indexOf(button.color) !== -1);
        this.buttonsWithIcon = this.buttons.filter((button) => !!button.icon);
        this.disabledButtons = this.buttons.filter((button) => !button.noDisabledState);
        this.disabledButtonsWithIcon = this.disabledButtons.filter((button) => !!button.icon);
    }
    showNotification(color) {
        const message = `Button ${color} is clicked`;
        this.notificationService.showNotification({
            header: 'Info notification',
            message: message,
            dismissible: true,
            ttl: 5000,
        });
        this.buttonsWithIcon = this.buttons.filter((button) => !!button.icon);
    }
    setActive(index, group) {
        this.groups[group] = this.groups[group].map(() => 'secondary');
        this.groups[group][index] = 'primary';
    }
};
ButtonShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonShowcaseComponent, deps: [{ token: i1$n.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
ButtonShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ButtonShowcaseComponent, selector: "bb-button-ui-showcase", ngImport: i0, template: "<h2>Small</h2>\n<div class=\"bb-list bb-block bb-block--md\">\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <h3>Variants</h3>\n    <button\n      *ngFor=\"let button of buttons\"\n      bbButton\n      [color]=\"button.color\"\n      buttonSize=\"sm\"\n      [attr.data-role]=\"'btn-' + button.color + '-sm-def'\"\n      class=\"m-2\"\n      (click)=\"showNotification(button.color)\"\n    >\n      {{ button.text }}\n    </button>\n    <button\n      *ngFor=\"let button of buttonsWithIcon\"\n      bbButton\n      [color]=\"button.color\"\n      buttonSize=\"sm\"\n      [attr.data-role]=\"'btn-icon-' + button.color + '-sm-def'\"\n      class=\"m-2\"\n    >\n      <bb-icon-ui [color]=\"button.icon.color\" [name]=\"button.icon.name\" [size]=\"'sm'\" cropped></bb-icon-ui>\n      <span>{{ button.text }}</span>\n    </button>\n    <div>\n      <button\n        *ngFor=\"let button of disabledButtons\"\n        bbButton\n        buttonSize=\"sm\"\n        [attr.data-role]=\"'btn-' + button.color + '-sm-disabled'\"\n        [disabled]=\"true\"\n        class=\"m-2\"\n      >\n        {{ button.text }}\n      </button>\n      <button\n        *ngFor=\"let button of disabledButtonsWithIcon\"\n        bbButton\n        buttonSize=\"sm\"\n        [attr.data-role]=\"'btn-icon-' + button.color + '-sm-disabled'\"\n        [disabled]=\"true\"\n        class=\"m-2\"\n      >\n        <bb-icon-ui [name]=\"'add'\" [size]=\"'sm'\" cropped></bb-icon-ui>\n        <span>{{ button.text }}</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <h3>Icon</h3>\n  </div>\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <button bbButton color=\"primary\" circle=\"true\" buttonSize=\"sm\" class=\"m-2\" [attr.data-role]=\"'icon-primary-sm-def'\">\n      <bb-icon-ui name=\"search\" aria-label=\"Search icon\"></bb-icon-ui>\n    </button>\n    <button\n      bbButton\n      color=\"secondary\"\n      [circle]=\"true\"\n      buttonSize=\"sm\"\n      class=\"m-2\"\n      [attr.data-role]=\"'icon-secondary-sm-def'\"\n    >\n      <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n    </button>\n    <button bbButton color=\"link\" circle=\"true\" buttonSize=\"sm\" class=\"m-2\" [attr.data-role]=\"'icon-link-sm-def'\">\n      <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n    </button>\n    <button\n      [attr.data-role]=\"'icon-link-dark-sm-def'\"\n      bbButton\n      buttonSize=\"sm\"\n      [circle]=\"true\"\n      class=\"m-2\"\n      color=\"link-dark\"\n    >\n      <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n    </button>\n    <button bbButton color=\"success\" circle=\"true\" buttonSize=\"sm\" class=\"m-2\" [attr.data-role]=\"'icon-success-sm-def'\">\n      <bb-icon-ui name=\"check\"></bb-icon-ui>\n    </button>\n    <button bbButton color=\"danger\" circle=\"true\" buttonSize=\"sm\" class=\"m-2\" [attr.data-role]=\"'icon-danger-sm-def'\">\n      <bb-icon-ui name=\"times\"></bb-icon-ui>\n    </button>\n    <div>\n      <button\n        bbButton\n        color=\"primary\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-primary-sm-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"search\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"secondary\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-secondary-sm-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n      </button>\n      <button\n        [attr.data-role]=\"'icon-link-sm-disabled'\"\n        [disabled]=\"true\"\n        bbButton\n        [circle]=\"true\"\n        class=\"m-2\"\n        color=\"link\"\n      >\n        <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"link-dark\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-link-dark-sm-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"success\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-success-sm-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"check\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"danger\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-danger-sm-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"times\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <h3>Button group</h3>\n    <div class=\"bb-stack bb-stack\">\n      <div class=\"btn-group btn-group-sm bb-stack__item\" data-role=\"btn-group-sm-icons\">\n        <button (click)=\"setActive(0, 'sm-1')\" [color]=\"groups['sm-1'][0]\" bbButton>\n          <bb-icon-ui name=\"list\"></bb-icon-ui>\n        </button>\n        <button (click)=\"setActive(1, 'sm-1')\" [color]=\"groups['sm-1'][1]\" bbButton>\n          <bb-icon-ui name=\"view-module\"></bb-icon-ui>\n        </button>\n      </div>\n      <div class=\"btn-group btn-group-sm bb-stack__item\" data-role=\"btn-group-sm-2-options\">\n        <button (click)=\"setActive(0, 'sm-2')\" [color]=\"groups['sm-2'][0]\" bbButton>Left</button>\n        <button (click)=\"setActive(1, 'sm-2')\" [color]=\"groups['sm-2'][1]\" bbButton>Right</button>\n      </div>\n      <div class=\"btn-group btn-group-sm bb-stack__item\" data-role=\"btn-group-sm-3-options\">\n        <button (click)=\"setActive(0, 'sm-3')\" [color]=\"groups['sm-3'][0]\" bbButton>Left</button>\n        <button (click)=\"setActive(1, 'sm-3')\" [color]=\"groups['sm-3'][1]\" bbButton>Center</button>\n        <button (click)=\"setActive(2, 'sm-3')\" [color]=\"groups['sm-3'][2]\" bbButton>Right</button>\n      </div>\n    </div>\n  </div>\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <h3>Button bar</h3>\n    <div class=\"bb-button-bar bb-block bb-block-md\">\n      <ng-container *ngFor=\"let button of barButtons\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"button.color\"\n          buttonSize=\"sm\"\n          [attr.data-role]=\"'btn-' + button.color + '-sm-def'\"\n        >\n          {{ button.text }}\n        </button>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <h3>Button bar reverse</h3>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <ng-container *ngFor=\"let button of barButtons\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"button.color\"\n          buttonSize=\"sm\"\n          [attr.data-role]=\"'btn-' + button.color + '-sm-def'\"\n        >\n          {{ button.text }}\n        </button>\n      </ng-container>\n    </div>\n  </div>\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <h3>Button bar center</h3>\n    <div class=\"bb-button-bar bb-button-bar--center bb-bock bb-block--md\">\n      <ng-container *ngFor=\"let button of barButtons\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"button.color\"\n          buttonSize=\"sm\"\n          [attr.data-role]=\"'btn-' + button.color + '-sm-def'\"\n        >\n          {{ button.text }}\n        </button>\n      </ng-container>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--center bb-block bb-block--md\">\n      <bb-load-button-ui [color]=\"'primary'\" [isLoading]=\"true\" [size]=\"8\" [from]=\"1\" [totalCount]=\"2\" class=\"m-3\">\n        Load more\n      </bb-load-button-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-list__item--no-separator bb-bock bb-block--lg\">\n    <h3>Button bar with bigger space between button elements</h3>\n    <div class=\"bb-button-bar bb-button-bar--reverse bb-button-bar--density-lg\">\n      <ng-container *ngFor=\"let button of barButtons\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"button.color\"\n          [attr.data-role]=\"'btn-' + button.color + '-sm-def'\"\n        >\n          {{ button.text }}\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</div>\n<h2>Medium</h2>\n<div class=\"bb-list\">\n  <div class=\"bb-list__item--no-separator\">\n    <h3>Variants</h3>\n    <button\n      *ngFor=\"let button of buttons\"\n      bbButton\n      [color]=\"button.color\"\n      buttonSize=\"md\"\n      [attr.data-role]=\"'btn-' + button.color + '-md-def'\"\n      class=\"m-2\"\n      (click)=\"showNotification(button.color)\"\n    >\n      {{ button.text }}\n    </button>\n    <button\n      *ngFor=\"let button of buttonsWithIcon\"\n      bbButton\n      [color]=\"button.color\"\n      buttonSize=\"md\"\n      [attr.data-role]=\"'btn-icon-' + button.color + '-md-def'\"\n      class=\"m-2\"\n    >\n      <bb-icon-ui [color]=\"button.icon.color\" [name]=\"button.icon.name\" [size]=\"'md'\" cropped></bb-icon-ui>\n      <span>{{ button.text }}</span>\n    </button>\n    <div>\n      <button\n        *ngFor=\"let button of disabledButtons\"\n        bbButton\n        buttonSize=\"md\"\n        [attr.data-role]=\"'btn-' + button.color + '-md-disabled'\"\n        [disabled]=\"true\"\n        class=\"m-2\"\n      >\n        {{ button.text }}\n      </button>\n      <button\n        *ngFor=\"let button of disabledButtonsWithIcon\"\n        bbButton\n        buttonSize=\"md\"\n        [attr.data-role]=\"'btn-icon-' + button.color + '-md-disabled'\"\n        [disabled]=\"true\"\n        class=\"m-2\"\n      >\n        <bb-icon-ui [name]=\"'add'\" [size]=\"'md'\" cropped></bb-icon-ui>\n        <span>{{ button.text }}</span>\n      </button>\n    </div>\n  </div>\n  <div class=\"bb-list__item--no-separator\">\n    <h3>Icon</h3>\n    <button bbButton color=\"primary\" circle=\"true\" buttonSize=\"md\" class=\"m-2\" [attr.data-role]=\"'icon-primary-md-def'\">\n      <bb-icon-ui name=\"search\"></bb-icon-ui>\n    </button>\n    <button\n      bbButton\n      color=\"secondary\"\n      [circle]=\"true\"\n      buttonSize=\"md\"\n      class=\"m-2\"\n      [attr.data-role]=\"'icon-secondary-md-def'\"\n    >\n      <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n    </button>\n    <button bbButton color=\"link\" circle=\"true\" buttonSize=\"md\" class=\"m-2\" [attr.data-role]=\"'icon-link-md-def'\">\n      <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n    </button>\n    <button\n      [attr.data-role]=\"'icon-link-dark-md-def'\"\n      bbButton\n      buttonSize=\"md\"\n      [circle]=\"true\"\n      class=\"m-2\"\n      color=\"link-dark\"\n    >\n      <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n    </button>\n    <button bbButton color=\"success\" circle=\"true\" buttonSize=\"md\" class=\"m-2\" [attr.data-role]=\"'icon-success-md-def'\">\n      <bb-icon-ui name=\"check\"></bb-icon-ui>\n    </button>\n    <button bbButton color=\"danger\" circle=\"true\" buttonSize=\"md\" class=\"m-2\" [attr.data-role]=\"'icon-danger-md-def'\">\n      <bb-icon-ui name=\"times\"></bb-icon-ui>\n    </button>\n    <div>\n      <button\n        bbButton\n        color=\"primary\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-primary-md-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"search\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"secondary\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-secondary-md-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n      </button>\n      <button\n        [attr.data-role]=\"'icon-link-md-disabled'\"\n        [disabled]=\"true\"\n        bbButton\n        [circle]=\"true\"\n        class=\"m-2\"\n        color=\"link\"\n      >\n        <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"link-dark\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-link-dark-md-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"success\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-success-md-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"check\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        color=\"danger\"\n        [circle]=\"true\"\n        class=\"m-2\"\n        [attr.data-role]=\"'icon-danger-md-disabled'\"\n        [disabled]=\"true\"\n      >\n        <bb-icon-ui name=\"times\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n  <div class=\"bb-list__item--no-separator\">\n    <h3>Button group</h3>\n    <div class=\"bb-stack bb-stack\">\n      <div class=\"btn-group btn-group-md bb-stack__item\" data-role=\"btn-group-md-icons\">\n        <button (click)=\"setActive(0, 'md-1')\" [color]=\"groups['md-1'][0]\" bbButton>\n          <bb-icon-ui name=\"list\"></bb-icon-ui>\n        </button>\n        <button (click)=\"setActive(1, 'md-1')\" [color]=\"groups['md-1'][1]\" bbButton>\n          <bb-icon-ui name=\"view-module\"></bb-icon-ui>\n        </button>\n      </div>\n      <div class=\"btn-group btn-group-md bb-stack__item\" data-role=\"btn-group-md-2-options\">\n        <button (click)=\"setActive(0, 'md-2')\" [color]=\"groups['md-2'][0]\" bbButton>Left</button>\n        <button (click)=\"setActive(1, 'md-2')\" [color]=\"groups['md-2'][1]\" bbButton>Right</button>\n      </div>\n      <div class=\"btn-group btn-group-md bb-stack__item\" data-role=\"btn-group-md-3-options\">\n        <button (click)=\"setActive(0, 'md-3')\" [color]=\"groups['md-3'][0]\" bbButton>Left</button>\n        <button (click)=\"setActive(1, 'md-3')\" [color]=\"groups['md-3'][1]\" bbButton>Center</button>\n        <button (click)=\"setActive(2, 'md-3')\" [color]=\"groups['md-3'][2]\" bbButton>Right</button>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$i.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
ButtonShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ButtonShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-button-ui-showcase',
                    templateUrl: 'button-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$n.NotificationService }]; } });

class ButtonShowcaseModule {
}
ButtonShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ButtonShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonShowcaseModule, declarations: [ButtonShowcaseComponent], imports: [ButtonModule, CommonModule, IconModule, LoadButtonModule] });
ButtonShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonShowcaseModule, imports: [[ButtonModule, CommonModule, IconModule, LoadButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ButtonModule, CommonModule, IconModule, LoadButtonModule],
                    declarations: [ButtonShowcaseComponent],
                    entryComponents: [ButtonShowcaseComponent],
                }]
        }] });

let CardVendorShowcaseComponent = class CardVendorShowcaseComponent {
};
CardVendorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardVendorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CardVendorShowcaseComponent, selector: "bb-card-vendor-ui-showcase", ngImport: i0, template: "<div class=\"bb-stack bb-stack--center\">\n  <div [style.width.px]=\"39\" class=\"bb-stack__item\">\n    <bb-card-vendor-ui vendor=\"mastercard\"></bb-card-vendor-ui>\n  </div>\n  <div [style.width.px]=\"48\" class=\"bb-stack__item\">\n    <bb-card-vendor-ui vendor=\"visa-debit\"></bb-card-vendor-ui>\n  </div>\n  <div [style.width.px]=\"38\" class=\"bb-stack__item\">\n    <bb-card-vendor-ui vendor=\"union-pay\"></bb-card-vendor-ui>\n  </div>\n  <div [style.width.px]=\"39\" class=\"bb-stack__item\">\n    <bb-card-vendor-ui vendor=\"maestro\"></bb-card-vendor-ui>\n  </div>\n  <div [style.width.px]=\"31\" class=\"bb-stack__item\">\n    <bb-card-vendor-ui vendor=\"diners-club\"></bb-card-vendor-ui>\n  </div>\n  <div [style.width.px]=\"80\" class=\"bb-stack__item\">\n    <bb-card-vendor-ui vendor=\"visa\"></bb-card-vendor-ui>\n  </div>\n</div>\n", components: [{ type: i1$6.CardVendorComponent, selector: "bb-card-vendor-ui", inputs: ["vendor"] }] });
CardVendorShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CardVendorShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-card-vendor-ui-showcase',
                    templateUrl: './card-vendor-showcase.component.html',
                }]
        }] });

class CardVendorShowcaseModule {
}
CardVendorShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CardVendorShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorShowcaseModule, declarations: [CardVendorShowcaseComponent], imports: [CommonModule, CardVendorModule] });
CardVendorShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorShowcaseModule, imports: [[CommonModule, CardVendorModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CardVendorShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CardVendorModule],
                    declarations: [CardVendorShowcaseComponent],
                    entryComponents: [CardVendorShowcaseComponent],
                }]
        }] });

let CharCounterShowcaseComponent = class CharCounterShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            textarea: '',
            textareaAlmostFull: '123456789012345678',
            textareaFull: '12345678901234567890',
        });
    }
    reset() {
        if (this.vForm) {
            const control = this.vForm.get('textareaFull');
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            control && control.reset();
        }
    }
};
CharCounterShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
CharCounterShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CharCounterShowcaseComponent, selector: "bb-char-counter-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Char counter</h4>\n    <bb-textarea-ui\n      [id]=\"'textarea'\"\n      label=\"Description\"\n      placeholder=\"Enter text...\"\n      formControlName=\"textarea\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"3\"\n      [maxLength]=\"160\"\n      [rows]=\"3\"\n      [cols]=\"50\"\n      wrap=\"hard\"\n    ></bb-textarea-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Char counter (almost full)</h4>\n    <bb-textarea-ui\n      [id]=\"'textarea'\"\n      label=\"Description\"\n      placeholder=\"Enter text...\"\n      formControlName=\"textareaAlmostFull\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"3\"\n      [maxLength]=\"20\"\n      [rows]=\"3\"\n      [cols]=\"50\"\n      wrap=\"hard\"\n    ></bb-textarea-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Char counter (full)</h4>\n    <bb-textarea-ui\n      [id]=\"'textarea'\"\n      label=\"Description\"\n      placeholder=\"Enter text...\"\n      formControlName=\"textareaFull\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"3\"\n      [maxLength]=\"20\"\n      [rows]=\"3\"\n      [cols]=\"50\"\n      wrap=\"hard\"\n    ></bb-textarea-ui>\n    <button class=\"btn btn-primary\" (click)=\"reset()\">CLEAR VALUE</button>\n  </div>\n</form>\n", components: [{ type: i2$i.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
CharCounterShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CharCounterShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-char-counter-ui-showcase',
                    templateUrl: 'char-counter-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class CharCounterShowcaseModule {
}
CharCounterShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CharCounterShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseModule, declarations: [CharCounterShowcaseComponent], imports: [CommonModule, CharCounterModule, ReactiveFormsModule, TextareaModule] });
CharCounterShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseModule, imports: [[CommonModule, CharCounterModule, ReactiveFormsModule, TextareaModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CharCounterModule, ReactiveFormsModule, TextareaModule],
                    declarations: [CharCounterShowcaseComponent],
                    entryComponents: [CharCounterShowcaseComponent],
                }]
        }] });

let CheckboxGroupShowcaseComponent = class CheckboxGroupShowcaseComponent {
};
CheckboxGroupShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CheckboxGroupShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CheckboxGroupShowcaseComponent, selector: "bb-checkbox-group-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-6\">\n    <form #checkboxGroupForm=\"ngForm\">\n      <ul class=\"list-unstyled\">\n        <li>\n          <bb-checkbox-group-ui ngModelGroup=\"list\" label=\"Parent\" class=\"bb-block bb-block--sm\">\n          </bb-checkbox-group-ui>\n          <ul ngModelGroup=\"list\" class=\"list-unstyled bb-checkbox-group\">\n            <li>\n              <bb-input-checkbox-ui name=\"i1\" ngModel disabled label=\"Child\" class=\"bb-block bb-block--sm\">\n              </bb-input-checkbox-ui>\n            </li>\n            <li>\n              <bb-input-checkbox-ui name=\"i2\" ngModel label=\"Child\" class=\"bb-block bb-block--sm\">\n              </bb-input-checkbox-ui>\n            </li>\n            <li>\n              <bb-checkbox-group-ui ngModelGroup=\"i3\" label=\"Parent\" class=\"bb-block bb-block--sm\">\n              </bb-checkbox-group-ui>\n              <ul ngModelGroup=\"i3\" class=\"list-unstyled bb-checkbox-group\">\n                <li>\n                  <bb-input-checkbox-ui ngModel name=\"q1\" label=\"Child\" class=\"bb-block bb-block--sm\">\n                  </bb-input-checkbox-ui>\n                </li>\n                <li>\n                  <bb-input-checkbox-ui ngModel name=\"q2\" label=\"Child\" class=\"bb-block bb-block--sm\">\n                  </bb-input-checkbox-ui>\n                </li>\n                <li>\n                  <bb-checkbox-group-ui ngModelGroup=\"q3\" label=\"Parent\" class=\"bb-block bb-block--sm\">\n                  </bb-checkbox-group-ui>\n                  <ul ngModelGroup=\"q3\" class=\"list-unstyled bb-checkbox-group\">\n                    <li>\n                      <bb-input-checkbox-ui ngModel name=\"w1\" label=\"Child\" class=\"bb-block bb-block--sm\">\n                      </bb-input-checkbox-ui>\n                    </li>\n                    <li>\n                      <bb-input-checkbox-ui ngModel name=\"w2\" label=\"Child\"> </bb-input-checkbox-ui>\n                    </li>\n                  </ul>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </form>\n  </div>\n</div>\n", components: [{ type: i1$7.CheckboxGroupComponent, selector: "bb-checkbox-group-ui" }, { type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
CheckboxGroupShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CheckboxGroupShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-checkbox-group-ui-showcase',
                    templateUrl: './checkbox-group-showcase.component.html',
                }]
        }] });

class CheckboxGroupShowcaseModule {
}
CheckboxGroupShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CheckboxGroupShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupShowcaseModule, declarations: [CheckboxGroupShowcaseComponent], imports: [CommonModule, CheckboxGroupModule, FormsModule, InputCheckboxModule] });
CheckboxGroupShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupShowcaseModule, imports: [[CommonModule, CheckboxGroupModule, FormsModule, InputCheckboxModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CheckboxGroupShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CheckboxGroupModule, FormsModule, InputCheckboxModule],
                    declarations: [CheckboxGroupShowcaseComponent],
                    entryComponents: [CheckboxGroupShowcaseComponent],
                }]
        }] });

let CollapsibleAccordionShowcaseComponent = class CollapsibleAccordionShowcaseComponent {
};
CollapsibleAccordionShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CollapsibleAccordionShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleAccordionShowcaseComponent, selector: "bb-collapsible-accordion-ui-showcase", ngImport: i0, template: "<h2>Collapsible cards</h2>\n<div class=\"bb-block bb-block--lg\">\n  <bb-collapsible-accordion-ui #collapsibleAccordion1 [closeOthers]=\"true\" [openFirst]=\"false\">\n    <div class=\"bb-block bb-block--sm\">\n      <bb-collapsible-card-ui>\n        <span bbCollapsibleTitle class=\"bb-stack\">\n          <bb-icon-ui name=\"account\" class=\"bb-stack__item\"></bb-icon-ui>\n          <span>Collapsible Panel #1</span>\n        </span>\n        <div bbCollapsibleBody>I am expandable content!</div>\n      </bb-collapsible-card-ui>\n    </div>\n    <div class=\"bb-block bb-block--sm\">\n      <bb-collapsible-card-ui class=\"bb-block bb-block--sm\">\n        <span bbCollapsibleTitle class=\"bb-stack\">\n          <bb-icon-ui name=\"account\" class=\"bb-stack__item\"></bb-icon-ui>\n          <span>Collapsible Panel #2</span>\n        </span>\n        <div bbCollapsibleBody>I am expandable content!</div>\n      </bb-collapsible-card-ui>\n    </div>\n    <div class=\"bb-block bb-block--sm\">\n      <bb-collapsible-card-ui class=\"bb-block bb-block--sm\">\n        <span bbCollapsibleTitle class=\"bb-stack\">\n          <bb-icon-ui name=\"account\" class=\"bb-stack__item\"></bb-icon-ui>\n          <span>Collapsible Panel #3</span>\n        </span>\n        <div bbCollapsibleBody>I am expandable content!</div>\n      </bb-collapsible-card-ui>\n    </div>\n  </bb-collapsible-accordion-ui>\n</div>\n<h2>Collapsible elements</h2>\n<div>\n  <bb-collapsible-accordion-ui #collapsibleAccordion1 [closeOthers]=\"true\" [openFirst]=\"false\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-collapsible-ui>\n        <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n          <div class=\"bb-stack bb-block bb-block--md\">\n            <span class=\"bb-stack__item\">Custom template for collapsible header</span>\n            <button bbButton color=\"primary\" (click)=\"toggle()\" class=\"bb-stack__item bb-stack__item--push-right\">\n              <span>Custom toggle button</span>\n              <bb-icon-ui cropped name=\"expand-more\" [class.fa-chevron-up]=\"isOpen\"></bb-icon-ui>\n            </button>\n          </div>\n        </ng-template>\n        <ng-template bbCollapsibleBody>\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <p>Example of default content inside.</p>\n              <p>\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam consectetur doloremque ea excepturi,\n                fugiat maxime minima nesciunt odit omnis.\n              </p>\n            </div>\n          </div>\n        </ng-template>\n      </bb-collapsible-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-collapsible-ui>\n        <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n          <div class=\"bb-stack bb-block bb-block--md\">\n            <span class=\"bb-stack__item\">Custom template for collapsible header</span>\n            <button bbButton color=\"primary\" (click)=\"toggle()\" class=\"bb-stack__item bb-stack__item--push-right\">\n              <span>Custom toggle button</span>\n              <bb-icon-ui cropped name=\"expand-more\" [class.fa-chevron-up]=\"isOpen\"></bb-icon-ui>\n            </button>\n          </div>\n        </ng-template>\n        <ng-template bbCollapsibleBody>\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <p>Example of default content inside.</p>\n              <p>\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam consectetur doloremque ea excepturi,\n                fugiat maxime minima nesciunt odit omnis.\n              </p>\n            </div>\n          </div>\n        </ng-template>\n      </bb-collapsible-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-collapsible-ui>\n        <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n          <div class=\"bb-stack bb-block bb-block--md\">\n            <span class=\"bb-stack__item\">Custom template for collapsible header</span>\n            <button bbButton color=\"primary\" (click)=\"toggle()\" class=\"bb-stack__item bb-stack__item--push-right\">\n              <span>Custom toggle button</span>\n              <bb-icon-ui cropped name=\"expand-more\" [class.fa-chevron-up]=\"isOpen\"></bb-icon-ui>\n            </button>\n          </div>\n        </ng-template>\n        <ng-template bbCollapsibleBody>\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <p>Example of default content inside.</p>\n              <p>\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam consectetur doloremque ea excepturi,\n                fugiat maxime minima nesciunt odit omnis.\n              </p>\n            </div>\n          </div>\n        </ng-template>\n      </bb-collapsible-ui>\n    </div>\n  </bb-collapsible-accordion-ui>\n</div>\n", components: [{ type: i1$8.CollapsibleAccordionComponent, selector: "bb-collapsible-accordion-ui", inputs: ["closeOthers", "openFirst", "obeyParentAccordion"] }, { type: i2$7.CollapsibleCardComponent, selector: "bb-collapsible-card-ui", inputs: ["isOpen", "ariaLabelForIcon", "aria-label", "hasChevron", "highlight", "shadow", "size"], outputs: ["isOpenChange"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$9.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }], directives: [{ type: i1$9.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$9.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
CollapsibleAccordionShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CollapsibleAccordionShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-accordion-ui-showcase',
                    templateUrl: 'collapsible-accordion-showcase.component.html',
                }]
        }] });

class CollapsibleAccordionShowcaseModule {
}
CollapsibleAccordionShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CollapsibleAccordionShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionShowcaseModule, declarations: [CollapsibleAccordionShowcaseComponent], imports: [CommonModule,
        CollapsibleAccordionModule,
        IconModule,
        CollapsibleCardModule,
        CollapsibleModule,
        ButtonModule] });
CollapsibleAccordionShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionShowcaseModule, imports: [[
            CommonModule,
            CollapsibleAccordionModule,
            IconModule,
            CollapsibleCardModule,
            CollapsibleModule,
            ButtonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        CollapsibleAccordionModule,
                        IconModule,
                        CollapsibleCardModule,
                        CollapsibleModule,
                        ButtonModule,
                    ],
                    declarations: [CollapsibleAccordionShowcaseComponent],
                    entryComponents: [CollapsibleAccordionShowcaseComponent],
                }]
        }] });

let CollapsibleCardShowcaseComponent = class CollapsibleCardShowcaseComponent {
};
CollapsibleCardShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CollapsibleCardShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleCardShowcaseComponent, selector: "bb-collapsible-card-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--md\">\n  <h4>Default collapsible card</h4>\n  <bb-collapsible-card-ui>\n    <span bbCollapsibleTitle>Collapsible card</span>\n    <div bbCollapsibleBody>I am expandable content!</div>\n  </bb-collapsible-card-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Small collapsible card</h4>\n  <bb-collapsible-card-ui size=\"sm\">\n    <span bbCollapsibleTitle>Small collapsible card</span>\n    <div bbCollapsibleBody>I am expandable content!</div>\n  </bb-collapsible-card-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Large collapsible card</h4>\n  <bb-collapsible-card-ui size=\"lg\">\n    <span bbCollapsibleTitle>Large collapsible card</span>\n    <div bbCollapsibleBody>I am expandable content!</div>\n  </bb-collapsible-card-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Without chevron</h4>\n  <bb-collapsible-card-ui [hasChevron]=\"false\">\n    <span bbCollapsibleTitle>Collapsible card</span>\n    <div bbCollapsibleBody>I am expandable content!</div>\n  </bb-collapsible-card-ui>\n</div>\n\n<div class=\"bb-block bb-block--md\">\n  <h4>Highlighted collapsible card</h4>\n  <bb-collapsible-card-ui [highlight]=\"true\">\n    <span bbCollapsibleTitle>Highlighted collapsible card</span>\n    <div bbCollapsibleBody>I am expandable content!</div>\n  </bb-collapsible-card-ui>\n</div>\n", components: [{ type: i2$7.CollapsibleCardComponent, selector: "bb-collapsible-card-ui", inputs: ["isOpen", "ariaLabelForIcon", "aria-label", "hasChevron", "highlight", "shadow", "size"], outputs: ["isOpenChange"] }] });
CollapsibleCardShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CollapsibleCardShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-card-ui-showcase',
                    templateUrl: 'collapsible-card-showcase.component.html',
                }]
        }] });

class CollapsibleCardShowcaseModule {
}
CollapsibleCardShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CollapsibleCardShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardShowcaseModule, declarations: [CollapsibleCardShowcaseComponent], imports: [CommonModule, CollapsibleCardModule] });
CollapsibleCardShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardShowcaseModule, imports: [[CommonModule, CollapsibleCardModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CollapsibleCardModule],
                    declarations: [CollapsibleCardShowcaseComponent],
                    entryComponents: [CollapsibleCardShowcaseComponent],
                }]
        }] });

let CollapsibleShowcaseComponent = class CollapsibleShowcaseComponent {
};
CollapsibleShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CollapsibleShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleShowcaseComponent, selector: "bb-collapsible-ui-showcase", ngImport: i0, template: "<div>\n  <h4>Collapsible (basic component without predefined markup)</h4>\n  <bb-collapsible-ui>\n    <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n      <div class=\"bb-stack bb-block bb-block--md\">\n        <span class=\"bb-stack__item\">Custom template for collapsible header</span>\n        <button bbButton color=\"primary\" (click)=\"toggle()\" class=\"bb-stack__item bb-stack__item--push-right\">\n          <span>Custom toggle button</span>\n          <bb-icon-ui cropped name=\"expand-more\" [class.fa-chevron-up]=\"isOpen\"></bb-icon-ui>\n        </button>\n      </div>\n    </ng-template>\n    <ng-template bbCollapsibleBody>\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <p>Example of default content inside.</p>\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aperiam consectetur doloremque ea excepturi,\n            fugiat maxime minima nesciunt odit omnis.\n          </p>\n        </div>\n      </div>\n    </ng-template>\n  </bb-collapsible-ui>\n</div>\n", components: [{ type: i1$9.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$9.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i1$9.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
CollapsibleShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CollapsibleShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-ui-showcase',
                    templateUrl: 'collapsible-showcase.component.html',
                }]
        }] });

class CollapsibleShowcaseModule {
}
CollapsibleShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CollapsibleShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleShowcaseModule, declarations: [CollapsibleShowcaseComponent], imports: [CommonModule, CollapsibleModule, IconModule] });
CollapsibleShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleShowcaseModule, imports: [[CommonModule, CollapsibleModule, IconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CollapsibleModule, IconModule],
                    declarations: [CollapsibleShowcaseComponent],
                    entryComponents: [CollapsibleShowcaseComponent],
                }]
        }] });

let CommonErrorStateShowcaseComponent = class CommonErrorStateShowcaseComponent {
    getErrorFromString(errorType) {
        switch (errorType) {
            case 'badRequestError':
                return new HttpErrorResponse({ status: 400 });
            case 'unauthorizedError':
                return new HttpErrorResponse({ status: 401 });
            case 'forbiddenError':
                return new HttpErrorResponse({ status: 403 });
            case 'notFoundError':
                return new HttpErrorResponse({ status: 404 });
            case 'internalServerError':
                return new HttpErrorResponse({ status: 500 });
            case 'connectivityError':
                return new HttpErrorResponse({ status: 0 });
            case 'textError':
            default:
                return 'Some text error';
        }
    }
};
CommonErrorStateShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CommonErrorStateShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CommonErrorStateShowcaseComponent, selector: "bb-common-error-state-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h4>Not Found Error (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"getErrorFromString('notFoundError')\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Bad Request Error (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"getErrorFromString('badRequestError')\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Unauthorized Error (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"getErrorFromString('unauthorizedError')\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Forbidden Error (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"getErrorFromString('forbiddenError')\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Connectivity Error (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"getErrorFromString('connectivityError')\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Internal Server Error (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"getErrorFromString('internalServerError')\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Text Error (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"getErrorFromString('textError')\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Custom i18n Template (theme 1)</h4>\n  <bb-common-error-state-ui [error]=\"i18nCustomError\"></bb-common-error-state-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Not Found Error - inside a card + state container (theme 2)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-common-error-state-ui [error]=\"getErrorFromString('notFoundError')\"></bb-common-error-state-ui>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Bad Request Error - inside a card + state container (theme 2)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-common-error-state-ui [error]=\"getErrorFromString('badRequestError')\"></bb-common-error-state-ui>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"mb-3\">\n  <h4>Connectivity Error - inside a card + state container (theme 2)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-common-error-state-ui [error]=\"getErrorFromString('connectivityError')\"></bb-common-error-state-ui>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Internal Server Error - inside a card + state container (theme 2)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-common-error-state-ui [error]=\"getErrorFromString('internalServerError')\"></bb-common-error-state-ui>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Text Error - inside a card + state container (theme 2)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-common-error-state-ui [error]=\"getErrorFromString('textError')\"></bb-common-error-state-ui>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4>Custom i18n Template - inside a card + state container (theme 2)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-state-container\">\n        <bb-common-error-state-ui [error]=\"i18nCustomError\"></bb-common-error-state-ui>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #i18nCustomError>\n  <p>Custom error with i18n support</p>\n</ng-template>\n", components: [{ type: i1$a.ErrorCommonStateComponent, selector: "bb-common-error-state-ui", inputs: ["error"] }] });
CommonErrorStateShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CommonErrorStateShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-common-error-state-ui-showcase',
                    templateUrl: 'common-error-state-showcase.component.html',
                }]
        }] });

class CommonErrorStateShowcaseModule {
}
CommonErrorStateShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CommonErrorStateShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateShowcaseModule, declarations: [CommonErrorStateShowcaseComponent], imports: [CommonModule, ErrorCommonStateModule] });
CommonErrorStateShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateShowcaseModule, imports: [[CommonModule, ErrorCommonStateModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CommonErrorStateShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ErrorCommonStateModule],
                    declarations: [CommonErrorStateShowcaseComponent],
                    entryComponents: [CommonErrorStateShowcaseComponent],
                }]
        }] });

let CurrencyInputShowcaseComponent = class CurrencyInputShowcaseComponent {
    constructor() {
        this.withDecimal = {
            amount: undefined,
            currency: 'USD',
        };
        this.withoutDecimal = {
            amount: undefined,
            currency: 'EUR',
        };
        this.withoutCurrency = {
            amount: undefined,
        };
        this.currencies = [
            'USD',
            'EUR',
            // Bahraini dinar (BHD) and Omani rial have a decimal precision of three
            'BHD',
            'OMR',
            // Malagasy ariary (MGA) is a non-decimal currency
            'MGA',
        ];
        this.withDecimalControl = new FormControl({
            amount: '-1234567.89',
            currency: 'USD',
        });
    }
};
CurrencyInputShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CurrencyInputShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencyInputShowcaseComponent, selector: "bb-currency-input-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div id=\"currency-input-with-decimals-label\" class=\"bb-text-bold\">With decimals</div>\n    <div [attr.data-role]=\"'currency-input-with-decimals'\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [currencyLabel]=\"'Currency'\"\n        [formControl]=\"withDecimalControl\"\n        [currencies]=\"currencies\"\n        [aria-labelledby]=\"'currency-input-with-decimals-label'\"\n        [currencyListAriaLabel]=\"'Currency'\"\n        [isRightAligned]=\"true\"\n        [allowNegativeValue]=\"true\"\n        [required]=\"true\"\n      >\n        <div bbValidationMessage>\n          <bb-input-validation-message-ui [showErrors]=\"withDecimalControl.invalid\">\n            Field is required.\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-currency-input-ui>\n    </div>\n\n    <div id=\"currency-input-without-decimals-label\" class=\"bb-text-bold\">Without decimals</div>\n    <div data-role=\"currency-input-without-decimals\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [ngModel]=\"withoutDecimal\"\n        [integer]=\"true\"\n        [currencies]=\"currencies\"\n        #withoutDec=\"ngModel\"\n        [aria-labelledby]=\"'currency-input-without-decimals-label'\"\n      >\n        <div bbValidationMessage>\n          <bb-input-validation-message-ui [showErrors]=\"withoutDec.value?.amount === 0 && !withoutDec.untouched\">\n            Field is required.\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-currency-input-ui>\n    </div>\n\n    <div id=\"currency-input-without-currency-label\" class=\"bb-text-bold\">Without currency code</div>\n    <div data-role=\"currency-input-without-currency-label\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [ngModel]=\"withoutCurrency\"\n        #withoutCur=\"ngModel\"\n        [aria-labelledby]=\"'currency-input-without-currency-label'\"\n      >\n        <div bbValidationMessage>\n          <bb-input-validation-message-ui [showErrors]=\"withoutCur.value?.amount === 0 && withoutCur.touched\">\n            Field is required.\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-currency-input-ui>\n    </div>\n\n    <div id=\"currency-input-with-decimals-label-2\" data-role=\"currency-input-with-decimals-label\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [currencyLabel]=\"'Currency'\"\n        [formControl]=\"withDecimalControl\"\n        [currencies]=\"currencies\"\n        [aria-labelledby]=\"'currency-input-with-decimals-label-2'\"\n        [currencyListAriaLabel]=\"'Currency'\"\n        [isRightAligned]=\"true\"\n        [integerLabel]=\"'Integer'\"\n        [decimalLabel]=\"'Decimal'\"\n      >\n        <div bbValidationMessage>\n          <bb-input-validation-message-ui [showErrors]=\"withDecimalControl.invalid\">\n            Field is required. inclusion ...\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-currency-input-ui>\n    </div>\n\n    <div id=\"currency-input-invalid-label\" class=\"bb-text-bold\">Invalid value</div>\n    <div data-role=\"currency-input-invalid\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [ngModel]=\"withDecimal\"\n        #invalid=\"ngModel\"\n        [aria-invalid]=\"'true'\"\n        [currencies]=\"currencies\"\n        [aria-labelledby]=\"'currency-input-invalid-label'\"\n      >\n        <div bbValidationMessage>\n          <bb-input-validation-message-ui [showErrors]=\"invalid.value?.amount === 0 && invalid.touched\">\n            Field is required.\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-currency-input-ui>\n    </div>\n\n    <div id=\"currency-input-disabled\" class=\"bb-text-bold\">Disabled field</div>\n    <div data-role=\"currency-input-disabled\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [disabled]=\"true\"\n        [ngModel]=\"withoutDecimal\"\n        #disabled=\"ngModel\"\n        [currencies]=\"currencies\"\n        [aria-labelledby]=\"'currency-input-disabled'\"\n        [currencyListAriaLabel]=\"'Currency'\"\n      >\n      </bb-currency-input-ui>\n    </div>\n\n    <div id=\"currency-input-readonly\" class=\"bb-text-bold\">Readonly field</div>\n    <div data-role=\"'currency-input-readonly\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [readonly]=\"true\"\n        [ngModel]=\"withDecimal\"\n        #readonly=\"ngModel\"\n        [currencies]=\"currencies\"\n        [aria-labelledby]=\"'currency-input-readonly'\"\n        [currencyListAriaLabel]=\"'Currency'\"\n      >\n        <div bbValidationMessage>\n          <bb-input-validation-message-ui [showErrors]=\"readonly.value?.amount === 0 && readonly.touched\">\n            Field is required.\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-currency-input-ui>\n    </div>\n\n    <div id=\"currency-input-required\" class=\"bb-text-bold\">Required field</div>\n    <div [attr.data-role]=\"'currency-input-required'\" class=\"bb-block--lg\">\n      <bb-currency-input-ui\n        [required]=\"true\"\n        [ngModel]=\"withDecimal\"\n        #required=\"ngModel\"\n        [currencies]=\"currencies\"\n        [aria-labelledby]=\"'currency-input-required'\"\n        [currencyListAriaLabel]=\"'Currency'\"\n      >\n        <div bbValidationMessage>\n          <bb-input-validation-message-ui [showErrors]=\"required.value?.amount === 0 && required.touched\">\n            Field is required.\n          </bb-input-validation-message-ui>\n        </div>\n      </bb-currency-input-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$b.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
CurrencyInputShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CurrencyInputShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-currency-input-ui-showcase',
                    templateUrl: 'currency-input-showcase.component.html',
                }]
        }], ctorParameters: function () { return []; } });

class CurrencyInputShowcaseModule {
}
CurrencyInputShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CurrencyInputShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputShowcaseModule, declarations: [CurrencyInputShowcaseComponent], imports: [CommonModule, CurrencyInputModule, ReactiveFormsModule, FormsModule, InputValidationMessageModule] });
CurrencyInputShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputShowcaseModule, imports: [[CommonModule, CurrencyInputModule, ReactiveFormsModule, FormsModule, InputValidationMessageModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CurrencyInputModule, ReactiveFormsModule, FormsModule, InputValidationMessageModule],
                    declarations: [CurrencyInputShowcaseComponent],
                    entryComponents: [CurrencyInputShowcaseComponent],
                }]
        }] });

let DatePipeShowcaseComponent = class DatePipeShowcaseComponent {
    constructor() {
        this.dateToTransform = new Date('Wed Dec 3 2018 15:29:14 GMT+0100 (Central European Standard Time)');
    }
};
DatePipeShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DatePipeShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DatePipeShowcaseComponent, selector: "bb-date-pipe-ui-showcase", ngImport: i0, template: "<h2>Dates</h2>\n\n<div class=\"col-12 mb-5\">\n  <div class=\"card shadow-sm\">\n    <div class=\"card-body\">\n      <div class=\"table-responsive\">\n        <table class=\"table table-hover\" bbTable>\n          <thead>\n            <tr>\n              <th>Pipe usage</th>\n              <th class=\"bb-text-align-right\">Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>Shorter:</td>\n              <td class=\"bb-text-align-right\">\n                {{ dateToTransform | bbDate: 'd/MM':'GMT+0100' }}\n              </td>\n            </tr>\n            <tr>\n              <td>Short:</td>\n              <td class=\"bb-text-align-right\">\n                {{ dateToTransform | bbDate: 'd/MM/yy':'GMT+0100' }}\n              </td>\n            </tr>\n            <tr>\n              <td>MediumShort:</td>\n              <td class=\"bb-text-align-right\">\n                {{ dateToTransform | bbDate: 'd/MM/y':'GMT+0100' }}\n              </td>\n            </tr>\n            <tr>\n              <td>Medium:</td>\n              <td class=\"bb-text-align-right\">\n                {{ dateToTransform | bbDate: 'mediumDate':'GMT+0100' }}\n              </td>\n            </tr>\n            <tr>\n              <td>Long:</td>\n              <td class=\"bb-text-align-right\">\n                {{ dateToTransform | bbDate: 'longDate':'GMT+0100' }}\n              </td>\n            </tr>\n            <tr>\n              <td>Full:</td>\n              <td class=\"bb-text-align-right\">\n                {{ dateToTransform | bbDate: 'fullDate':'GMT+0100' }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>\n\n<h2>Times</h2>\n<div class=\"card shadow-sm\">\n  <div class=\"card-body\">\n    <div class=\"table-responsive\">\n      <table class=\"table table-hover\" bbTable>\n        <thead>\n          <tr>\n            <th>Pipe usage</th>\n            <th class=\"bb-text-align-right\">Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Short:</td>\n            <td class=\"bb-text-align-right\">\n              {{ dateToTransform | bbDate: 'shortTime':'GMT+0100' }}\n            </td>\n          </tr>\n          <tr>\n            <td>Medium:</td>\n            <td class=\"bb-text-align-right\">\n              {{ dateToTransform | bbDate: 'mediumTime':'GMT+0100' }}\n            </td>\n          </tr>\n          <tr>\n            <td>Long:</td>\n            <td class=\"bb-text-align-right\">\n              {{ dateToTransform | bbDate: 'longTime':'GMT+0100' }}\n            </td>\n          </tr>\n          <tr>\n            <td>Full:</td>\n            <td class=\"bb-text-align-right\">\n              {{ dateToTransform | bbDate: 'fullTime':'GMT+0100' }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n", pipes: { "bbDate": i1$c.BbDatePipe } });
DatePipeShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], DatePipeShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-date-pipe-ui-showcase',
                    templateUrl: 'date-pipe-showcase.component.html',
                }]
        }] });

class DatePipeShowcaseModule {
}
DatePipeShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DatePipeShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeShowcaseModule, declarations: [DatePipeShowcaseComponent], imports: [CommonModule, BbDatePipeModule] });
DatePipeShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeShowcaseModule, imports: [[CommonModule, BbDatePipeModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DatePipeShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, BbDatePipeModule],
                    declarations: [DatePipeShowcaseComponent],
                    entryComponents: [DatePipeShowcaseComponent],
                }]
        }] });

let DropdownMenuShowcaseComponent = class DropdownMenuShowcaseComponent {
    constructor() {
        this.message = '';
        this.dropdownTemplateMenuOptions = DROPDOWN_TEMPLATE_MENU_OPTIONS;
        this.dropdownMenuOptions = DROPDOWN_MENU_OPTIONS;
    }
    onButtonDropdownSelect(item) {
        this.message = item;
    }
    doesParentContainDropdown(node) {
        if (node.parentNode) {
            if (node.parentNode.closest('.dropdown')) {
                return true;
            }
            return false;
        }
        else {
            return false;
        }
    }
};
DropdownMenuShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DropdownMenuShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuShowcaseComponent, selector: "bb-dropdown-menu-ui-showcase", ngImport: i0, template: "<div class=\"row bb-block bb-block--md\">\n  <div class=\"col-sm-6 bb-block bb-block--md\">\n    <h4>Small button</h4>\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui container=\"body\" position=\"right\" icon=\"caret-down\" btnColor=\"primary\" buttonSize=\"sm\">\n        <ng-template bbDropdownLabel>\n          <span>Dropdown</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui\n        container=\"body\"\n        position=\"right\"\n        icon=\"caret-down\"\n        btnColor=\"secondary\"\n        buttonSize=\"sm\"\n        class=\"btn-group-sm\"\n      >\n        <ng-template bbDropdownLabel>\n          <span>Dropdown</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui container=\"body\" position=\"right\" icon=\"caret-down\" btnColor=\"primary\" buttonSize=\"sm\">\n        <ng-template bbDropdownLabel>\n          <span>Custom item</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <span>\n            <em> Custom item 1 </em>\n            <em> Custom item 2 </em>\n          </span>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n    <h5>With Full Width</h5>\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui position=\"right\" icon=\"caret-down\" btnColor=\"primary\" buttonSize=\"sm\" [fullWidth]=\"true\">\n        <ng-template bbDropdownLabel>\n          <span class=\"dropdown-menu__label--full-width\">Dropdown</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <h4>Medium button</h4>\n\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui\n        container=\"body\"\n        position=\"top\"\n        icon=\"caret-down\"\n        class=\"btn-md\"\n        btnColor=\"primary\"\n        iconSize=\"lg\"\n      >\n        <ng-template bbDropdownLabel>\n          <span>Dropdown</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui container=\"body\" position=\"right\" icon=\"caret-down\" btnColor=\"secondary\" iconSize=\"lg\">\n        <ng-template bbDropdownLabel>\n          <span>Dropdown</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n    <h5>With Full Width</h5>\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui position=\"left\" icon=\"caret-down\" btnColor=\"primary\" buttonSize=\"md\" [fullWidth]=\"true\">\n        <ng-template bbDropdownLabel>\n          <span class=\"dropdown-menu__label--full-width\">Dropdown</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n  <div class=\"col-sm-6 bb-block bb-block--md\">\n    <h4>Medium button with default menu</h4>\n\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui position=\"bottom\" icon=\"caret-down\" class=\"btn-md\" btnColor=\"primary\" iconSize=\"lg\">\n        <ng-template bbDropdownLabel>\n          <span>Dropdown label wider than content</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n  <div class=\"col-sm-6 bb-block bb-block--md\">\n    <h4>Medium button with fullwidth menu</h4>\n\n    <div class=\"bb-block bb-block--md\">\n      <bb-dropdown-menu-ui\n        position=\"bottom\"\n        icon=\"caret-down\"\n        class=\"btn-md\"\n        btnColor=\"primary\"\n        [bbDropdownToggleFullWidth]=\"true\"\n        iconSize=\"lg\"\n      >\n        <ng-template bbDropdownLabel>\n          <span>Dropdown label wider than content</span>\n        </ng-template>\n        <ng-template bbDropdownMenuItem>\n          <a\n            [id]=\"option.name\"\n            rel=\"noopener noreferrer\"\n            role=\"menuitem\"\n            *ngFor=\"let option of dropdownTemplateMenuOptions\"\n            class=\"dropdown-item\"\n            target=\"_blank\"\n            [href]=\"option.url\"\n          >\n            {{ option.name }}\n          </a>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n    </div>\n  </div>\n</div>\n<div class=\"row bb-block bb-block--md\">\n  <div class=\"col-sm-6 bb-block bb-block--md\">\n    <h4>Split small button</h4>\n\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"btn-group btn-group-sm\">\n        <button bbButton buttonSize=\"sm\">Open as auto</button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          position=\"auto\"\n          icon=\"caret-down\"\n          container=\"body\"\n          aria-label=\"options\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"btn-group btn-group-sm\">\n        <button bbButton color=\"secondary\">Open as</button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          container=\"body\"\n          position=\"top\"\n          icon=\"caret-down\"\n          btnColor=\"secondary\"\n          aria-label=\"options\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"btn-group btn-group-sm\">\n        <button bbButton>\n          <bb-icon-ui name=\"quick-action\" size=\"sm\" cropped></bb-icon-ui>\n          <span>Open as</span>\n        </button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          icon=\"caret-down\"\n          container=\"body\"\n          aria-label=\"options\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n    <div>\n      <div class=\"btn-group btn-group-sm\">\n        <button bbButton color=\"secondary\">\n          <bb-icon-ui name=\"quick-action\" size=\"sm\" cropped></bb-icon-ui>\n          <span>Open as</span>\n        </button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          icon=\"caret-down\"\n          container=\"body\"\n          aria-label=\"options\"\n          btnColor=\"secondary\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6 bb-block bb-block--md\">\n    <h4>Split medium button</h4>\n\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"btn-group\">\n        <button bbButton>Open as</button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          icon=\"caret-down\"\n          container=\"body\"\n          aria-label=\"options\"\n          iconSize=\"lg\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"btn-group\">\n        <button bbButton color=\"secondary\">Open as</button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          icon=\"caret-down\"\n          container=\"body\"\n          btnColor=\"secondary\"\n          aria-label=\"options\"\n          iconSize=\"lg\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"btn-group\">\n        <button bbButton>\n          <bb-icon-ui name=\"quick-action\" size=\"md\" cropped></bb-icon-ui>\n          <span>Open as</span>\n        </button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          icon=\"caret-down\"\n          container=\"body\"\n          aria-label=\"options\"\n          iconSize=\"lg\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n    <div>\n      <div class=\"btn-group\">\n        <button bbButton color=\"secondary\">\n          <bb-icon-ui name=\"quick-action\" color=\"primary\" size=\"md\" cropped></bb-icon-ui>\n          <span>Open as</span>\n        </button>\n        <bb-dropdown-menu-ui\n          class=\"btn-group\"\n          icon=\"caret-down\"\n          container=\"body\"\n          btnColor=\"secondary\"\n          aria-label=\"options\"\n          iconSize=\"lg\"\n          position=\"bottom\"\n          [options]=\"dropdownMenuOptions\"\n        >\n        </bb-dropdown-menu-ui>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"row bb-block bb-block--md\">\n  <div class=\"col-sm-6 bb-block bb-block--md\">\n    <h4>Icon small button</h4>\n    <bb-dropdown-menu-ui\n      [options]=\"dropdownMenuOptions\"\n      icon=\"ellipsis-h\"\n      iconSize=\"md\"\n      buttonSize=\"sm\"\n      [btnCircle]=\"true\"\n      container=\"body\"\n      ariaLabel=\"dropdown with no label\"\n      dropDownButtonLabel=\"test\"\n      (select)=\"onButtonDropdownSelect($event)\"\n    >\n      <ng-template bbDropdownMenuItem>\n        <a role=\"menuitem\" *ngFor=\"let option of dropdownTemplateMenuOptions\" class=\"dropdown-item\">\n          {{ option.name }}\n        </a>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n  <div class=\"col-sm-6 bb-block bb-block--md\">\n    <h4>Icon medium button</h4>\n    <bb-dropdown-menu-ui\n      [options]=\"dropdownMenuOptions\"\n      icon=\"ellipsis-h\"\n      [btnCircle]=\"true\"\n      container=\"body\"\n      ariaLabel=\"dropdown with no label\"\n      iconSize=\"lg\"\n      (select)=\"onButtonDropdownSelect($event)\"\n    >\n    </bb-dropdown-menu-ui>\n  </div>\n</div>\n", components: [{ type: i1$d.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$d.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i1$d.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$d.DropdownMenuFullWidthDirective, selector: "[bbDropdownToggleFullWidth]", inputs: ["bbDropdownToggleFullWidth"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
DropdownMenuShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], DropdownMenuShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-menu-ui-showcase',
                    templateUrl: './dropdown-menu-showcase.component.html',
                }]
        }] });

class DropdownMenuShowcaseModule {
}
DropdownMenuShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DropdownMenuShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuShowcaseModule, declarations: [DropdownMenuShowcaseComponent], imports: [CommonModule, DropdownMenuModule, IconModule, ButtonModule] });
DropdownMenuShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuShowcaseModule, imports: [[CommonModule, DropdownMenuModule, IconModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, DropdownMenuModule, IconModule, ButtonModule],
                    declarations: [DropdownMenuShowcaseComponent],
                    entryComponents: [DropdownMenuShowcaseComponent],
                }]
        }] });

let DropdownMultiSelectShowcaseComponent = class DropdownMultiSelectShowcaseComponent {
    constructor(fb) {
        this.fb = fb;
        this.flatListDropdownMultiSelect = new FormControl('');
        this.parentChildDropdownMultiSelect = new FormControl('');
        this.disabledDropdownMultiSelect = new FormControl('');
        this.options = [
            { value: 'one', label: 'One' },
            { value: 'two', label: 'Two' },
            { value: 'three', label: 'Three' },
            { value: 'four', label: 'Four' },
            { value: 'five', label: 'Five' },
            { value: 'eleven', label: 'Eleven' },
        ];
        this.parentChildOptions = [];
        this.form = this.fb.group({
            categories: new FormControl(),
        });
    }
    resetForm() {
        this.form.reset();
    }
};
DropdownMultiSelectShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
DropdownMultiSelectShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMultiSelectShowcaseComponent, selector: "bb-dropdown-multi-select-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h4>Default usage</h4>\n  <p>\n    <small\n      >Aria-labelledby used with the header bellow. Screen readers should read out both the placeholder and the content\n      of the header bellow</small\n    >\n  </p>\n  <h5 id=\"D231FE2E-A39B-4EE3-9937-751C955C4D2C\">Select a number</h5>\n  <bb-dropdown-multi-select-ui\n    [aria-labelledby]=\"'D231FE2E-A39B-4EE3-9937-751C955C4D2C'\"\n    [attr.data-role]=\"'dropdown-default'\"\n    [placeholder]=\"'No numbers selected'\"\n    [filtering]=\"true\"\n    [required]=\"true\"\n  >\n    <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n    </bb-dropdown-multi-select-option-ui>\n  </bb-dropdown-multi-select-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h4>Default usage with inline listbox header</h4>\n  <p>\n    <small\n      >Aria-labelledby used with the header bellow. Screen readers should read out both the placeholder and the content\n      of the header bellow.</small\n    >\n  </p>\n  <p>\n    <small>\n      Additional inline header provided for the inner listbox. Screen readers should read out the inline header togheter\n      with the first selected item. Voice over will fail doing so, while NVDA behaves as expected.\n    </small>\n  </p>\n  <h5 id=\"D231FE2E-A39B-4EE3-9937-751C955C4D2D\">Select another number</h5>\n  <bb-dropdown-multi-select-ui\n    [aria-labelledby]=\"'D231FE2E-A39B-4EE3-9937-751C955C4D2D'\"\n    [dropdownHeaderText]=\"'Ordered numbers'\"\n  >\n    <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n    </bb-dropdown-multi-select-option-ui>\n  </bb-dropdown-multi-select-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"D231FE2E-A39B-4EE3-9937-751C955C4D2DD\">Using embed label</h4>\n  <p>\n    <small\n      >Label content is used in order to indicate information about the control. Screen readers should read out both the\n      placeholder and the label bellow.</small\n    >\n  </p>\n  <bb-dropdown-multi-select-ui [label]=\"'Select another number'\" [placeholder]=\"''\">\n    <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n    </bb-dropdown-multi-select-option-ui>\n  </bb-dropdown-multi-select-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"B4DD9EEF-2963-47A9-B2F0-374BC217DA9E\">Disabled control</h4>\n  <bb-dropdown-multi-select-ui\n    [aria-labelledby]=\"'B4DD9EEF-2963-47A9-B2F0-374BC217DA9E'\"\n    [formControl]=\"disabledDropdownMultiSelect\"\n    [disabled]=\"true\"\n    [attr.data-role]=\"'dropdown-disabled'\"\n  >\n  </bb-dropdown-multi-select-ui>\n</div>\n\n<div [formGroup]=\"form\">\n  <h4>Using reactive form control</h4>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-dropdown-multi-select-ui\n      formControlName=\"categories\"\n      [required]=\"true\"\n      data-role=\"categories-filter\"\n      placeholder=\"\u2013 select a category \u2013\"\n      label=\"Category\"\n    >\n      <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n      </bb-dropdown-multi-select-option-ui>\n    </bb-dropdown-multi-select-ui>\n  </div>\n  <div class=\"bb-button-bar\">\n    <button bbButton (click)=\"resetForm()\" class=\"bb-button-bar__button\">reset form</button>\n  </div>\n</div>\n", components: [{ type: i2$o.DropdownMultiSelectComponent, selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i2$o.DropdownMultiSelectOptionComponent, selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
DropdownMultiSelectShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], DropdownMultiSelectShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-multi-select-ui-showcase',
                    templateUrl: 'dropdown-multi-select-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class DropdownMultiSelectShowcaseModule {
}
DropdownMultiSelectShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DropdownMultiSelectShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseModule, declarations: [DropdownMultiSelectShowcaseComponent], imports: [CommonModule, DropdownMultiSelectModule, ReactiveFormsModule, ButtonModule] });
DropdownMultiSelectShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseModule, imports: [[CommonModule, DropdownMultiSelectModule, ReactiveFormsModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, DropdownMultiSelectModule, ReactiveFormsModule, ButtonModule],
                    declarations: [DropdownMultiSelectShowcaseComponent],
                    entryComponents: [DropdownMultiSelectShowcaseComponent],
                }]
        }] });

let DropdownPanelShowcaseComponent = class DropdownPanelShowcaseComponent {
};
DropdownPanelShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DropdownPanelShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownPanelShowcaseComponent, selector: "bb-dropdown-panel-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--md\">\n  <bb-dropdown-panel-ui>\n    <ng-template bbDropdownToggle> Toggle without arrow </ng-template>\n    <ng-template bbDropdownMenu>\n      <div class=\"card\">\n        <div class=\"card-body\">Custom content</div>\n      </div>\n    </ng-template>\n  </bb-dropdown-panel-ui>\n</div>\n<bb-dropdown-panel-ui>\n  <ng-template bbDropdownToggle let-isOpen=\"isOpen\">\n    <div class=\"bb-stack\">\n      <span class=\"bb-stack__item\">Toggle with arrow</span>\n      <bb-icon-ui class=\"bb-stack__item--push-right\" [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n    </div>\n  </ng-template>\n  <ng-template bbDropdownMenu>\n    <div class=\"card\">\n      <div class=\"card-body\">Custom content</div>\n    </div>\n  </ng-template>\n</bb-dropdown-panel-ui>\n", components: [{ type: i1$K.DropdownPanelComponent, selector: "bb-dropdown-panel-ui", outputs: ["open"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$K.DropdownToggleDirective, selector: "ng-template[bbDropdownToggle]" }, { type: i1$K.DropdownMenuDirective, selector: "ng-template[bbDropdownMenu]" }] });
DropdownPanelShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], DropdownPanelShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-panel-ui-showcase',
                    templateUrl: './dropdown-panel-showcase.component.html',
                }]
        }] });

class DropdownPanelShowcaseModule {
}
DropdownPanelShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DropdownPanelShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelShowcaseModule, declarations: [DropdownPanelShowcaseComponent], imports: [CommonModule, DropdownPanelModule, IconModule] });
DropdownPanelShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelShowcaseModule, imports: [[CommonModule, DropdownPanelModule, IconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownPanelShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, DropdownPanelModule, IconModule],
                    declarations: [DropdownPanelShowcaseComponent],
                    entryComponents: [DropdownPanelShowcaseComponent],
                }]
        }] });

const frequencies = [
    {
        value: 'ONCE',
        every: 1,
    },
    {
        value: 'DAILY',
        every: 1,
    },
    {
        value: 'WEEKLY',
        every: 1,
    },
    {
        value: 'BIWEEKLY',
        every: 1,
    },
    {
        value: 'MONTHLY',
        every: 1,
    },
    {
        value: 'QUARTERLY',
        every: 1,
    },
    {
        value: 'YEARLY',
        every: 1,
    },
];
let DropdownSingleSelectShowcaseComponent = class DropdownSingleSelectShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.stringDropdownOptions = ['Option One', 'Option Two', 'Option Three'];
        this.objectDropdownOptions = [{ title: 'Option One' }, { title: 'Option Two' }, { title: 'Option Three' }];
        this.frequencies = frequencies;
        this.modelDropdownOptions = [
            { model: { displayNames: ['Selection A'], value: 'A' } },
            { model: { displayNames: ['Selection B'], value: 'B' } },
            { model: { displayNames: ['Selection C'], value: 'C' } },
        ];
        this.assetClassesOptions = [
            { name: 'Stock', id: 'stock' },
            { name: 'Bond', id: 'bonds' },
            { name: ' Liquid Assets', id: 'liquidassets' },
            { name: 'Real Estate', id: 'realestate' },
            { name: 'Cash', id: 'cash' },
        ];
        this.dropdownMenuOptions = [
            { name: 'google', url: 'https://google.com' },
            { name: 'twitter', url: 'https://twitter.com' },
            { name: 'facebook', url: 'https://www.facebook.com' },
        ];
        this.vForm = this.formBuilder.group({
            stringDropdownOptions: [this.stringDropdownOptions[0], Validators.required],
            objectDropdownOptions: [this.objectDropdownOptions[0], Validators.required],
            modelSingleSelect: [undefined, Validators.required],
            customSingleSelect: undefined,
            frequency: [
                {
                    value: 'ONCE',
                    every: 1,
                },
            ],
            i18nSingleSelect: ['one'],
            modelSingleSelectDisabled: [{ value: this.modelDropdownOptions[0], disabled: true }, Validators.required],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        if (control) {
            return control.valid || control.untouched;
        }
        return undefined;
    }
    getControl(fieldName) {
        if (this.vForm) {
            return this.vForm.controls[fieldName];
        }
        return undefined;
    }
    compareByValue(p1, p2) {
        if (!p1 || !p2)
            return;
        return p1.value === p2.value;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
};
DropdownSingleSelectShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
DropdownSingleSelectShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownSingleSelectShowcaseComponent, selector: "bb-dropdown-single-select-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"mb-3\">\n    <h4>Default with list of string as options</h4>\n    <bb-dropdown-single-select-ui\n      id=\"dropdownSingleSelect\"\n      [options]=\"stringDropdownOptions\"\n      formControlName=\"stringDropdownOptions\"\n      [required]=\"false\"\n      [attr.data-role]=\"'dropdown-single-select'\"\n    ></bb-dropdown-single-select-ui>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Default with list of object as options</h4>\n    <bb-dropdown-single-select-ui\n      id=\"dropdownSingleSelectObject\"\n      [options]=\"objectDropdownOptions\"\n      displayAttributePath=\"title\"\n      formControlName=\"objectDropdownOptions\"\n      [required]=\"false\"\n      [attr.data-role]=\"'dropdown-single-select'\"\n    ></bb-dropdown-single-select-ui>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>With a label</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectWithLabel\"\n        label=\"Label\"\n        [options]=\"stringDropdownOptions\"\n        formControlName=\"stringDropdownOptions\"\n        [required]=\"false\"\n        [attr.data-role]=\"'dropdown-single-select-with-label'\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Translatable options</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectI18n\"\n        displayAttributePath=\"label\"\n        formControlName=\"i18nSingleSelect\"\n      >\n        <bb-dropdown-single-select-option-ui value=\"one\" label=\"Option One\"></bb-dropdown-single-select-option-ui>\n        <bb-dropdown-single-select-option-ui value=\"two\" label=\"Option Two\"></bb-dropdown-single-select-option-ui>\n      </bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Validation error</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectFromModel\"\n        [options]=\"modelDropdownOptions\"\n        formControlName=\"modelSingleSelect\"\n        displayAttributePath=\"model.displayNames[0]\"\n        [required]=\"true\"\n        placeholder=\"- Select An Item -\"\n        [attr.data-role]=\"'dropdown-single-select-with-validation'\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('modelSingleSelect')\">\n        <span *ngIf=\"hasRequiredError('modelSingleSelect')\"> Field is required. </span>\n      </bb-input-validation-message-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Disabled</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectDisabled\"\n        [options]=\"modelDropdownOptions\"\n        formControlName=\"modelSingleSelectDisabled\"\n        displayAttributePath=\"model.displayNames[0]\"\n        [required]=\"true\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>With placeholder</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectPlaceholder\"\n        [options]=\"assetClassesOptions\"\n        placeholder=\"All\"\n        displayAttributePath=\"name\"\n        formControlName=\"customSingleSelect\"\n        [attr.data-role]=\"'dropdown-single-select-with-placeholder'\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>With default option as placeholder</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectPlaceholderDefault\"\n        [options]=\"assetClassesOptions\"\n        [defaultOptionAsPlaceholder]=\"true\"\n        placeholder=\"All\"\n        displayAttributePath=\"name\"\n        formControlName=\"customSingleSelect\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"form-group col-12 col-md-4 mb-4\">\n      <bb-dropdown-single-select-ui\n        [compareWithFn]=\"compareByValue\"\n        label=\"Frequency\"\n        displayAttributePath=\"value\"\n        formControlName=\"frequency\"\n        data-role=\"frequency-selector\"\n        ><bb-dropdown-single-select-option-ui\n          *ngFor=\"let frequency of frequencies\"\n          class=\"text-capitalize\"\n          [value]=\"frequency\"\n          [label]=\"frequency.value\"\n        ></bb-dropdown-single-select-option-ui>\n      </bb-dropdown-single-select-ui>\n    </div>\n  </div>\n</form>\n", components: [{ type: i2$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2$2.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
DropdownSingleSelectShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], DropdownSingleSelectShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-single-select-ui-showcase',
                    templateUrl: './dropdown-single-select-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class DropdownSingleSelectShowcaseModule {
}
DropdownSingleSelectShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DropdownSingleSelectShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseModule, declarations: [DropdownSingleSelectShowcaseComponent], imports: [CommonModule, DropdownSingleSelectModule, ReactiveFormsModule, InputValidationMessageModule] });
DropdownSingleSelectShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseModule, imports: [[CommonModule, DropdownSingleSelectModule, ReactiveFormsModule, InputValidationMessageModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, DropdownSingleSelectModule, ReactiveFormsModule, InputValidationMessageModule],
                    declarations: [DropdownSingleSelectShowcaseComponent],
                    entryComponents: [DropdownSingleSelectShowcaseComponent],
                }]
        }] });

let EllipsisShowcaseComponent = class EllipsisShowcaseComponent {
    constructor() {
        this.hostRef = this;
        this.isMessageTruncated = false;
        this.textToEllipse = 'Lorem ipsum dolor sit amet.';
    }
    setIsContentTruncated(isMessageTruncated) {
        this.isMessageTruncated = isMessageTruncated;
    }
};
EllipsisShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
EllipsisShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EllipsisShowcaseComponent, selector: "bb-ellipsis-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>Max width 100px:</h2>\n  <div [style.width.px]=\"100\">\n    <bb-ellipsis-ui [text]=\"textToEllipse\"></bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Max width 200px:</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui [text]=\"textToEllipse\" [tooltipTriggers]=\"'hover'\"></bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Line clamp (Truncating Multiple Line Text)</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui\n      [text]=\"\n        'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aperiam eligendi iusto aliquid quaerat maxime totam, tenetur unde aut illum minus?'\n      \"\n      [tooltipTriggers]=\"''\"\n      [lineClamp]=\"3\"\n    ></bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Custom html template via ng-content</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui [lineClamp]=\"3\">\n      <span\n        >Lorem <a href=\"#\">ipsum</a> dolor, sit amet <strong>consectetur adipisicing elit.</strong> Perspiciatis nam\n        <strong>otam, vel accusantium aspernatu</strong> quisquam vero cupiditate architecto laudantium molestias.</span\n      >\n    </bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Checking content truncation</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui [lineClamp]=\"2\">\n      <div bbIsContentTruncated [hostRef]=\"hostRef\">\n        <span\n          >Lorem <a href=\"#\">ipsum</a> dolor, sit amet <strong>consectetur adipisicing elit.</strong> Perspiciatis nam\n          <strong>otam, vel accusantium aspernatu</strong> quisquam vero cupiditate architecto laudantium\n          molestias.</span\n        >\n      </div>\n    </bb-ellipsis-ui>\n  </div>\n  <button *ngIf=\"isMessageTruncated\" class=\"btn-link-text bb-text-bold\">See more</button>\n</div>\n", components: [{ type: i1$e.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i1$e.IsContentTruncatedDirective, selector: "[bbIsContentTruncated]", inputs: ["hostRef"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
EllipsisShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], EllipsisShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-ellipsis-ui-showcase',
                    templateUrl: 'ellipsis-showcase.component.html',
                }]
        }] });

class EllipsisShowcaseModule {
}
EllipsisShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
EllipsisShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseModule, declarations: [EllipsisShowcaseComponent], imports: [CommonModule, EllipsisModule] });
EllipsisShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseModule, imports: [[CommonModule, EllipsisModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, EllipsisModule],
                    declarations: [EllipsisShowcaseComponent],
                    entryComponents: [EllipsisShowcaseComponent],
                }]
        }] });

let EmptyStateShowcaseComponent = class EmptyStateShowcaseComponent {
};
EmptyStateShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
EmptyStateShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EmptyStateShowcaseComponent, selector: "bb-empty-state-ui-showcase", ngImport: i0, template: "<div class=\"mb-3\">\n  <h4>Default</h4>\n  <bb-empty-state-ui\n    title=\"No Results Found\"\n    iconSize=\"xxl\"\n    iconModifier=\"search\"\n    [attr.data-role]=\"'empty-state-example-icon-title'\"\n  ></bb-empty-state-ui>\n</div>\n\n<div class=\"mb-3\">\n  <h4>Inside a card + state container</h4>\n  <div class=\"card shadow-sm\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        title=\"No Transactions\"\n        subtitle=\"You don't have any transactions to be displayed.\"\n        iconSize=\"xxl\"\n        iconModifier=\"transactions\"\n        [attr.data-role]=\"'empty-state-example-icon-title-subtitle'\"\n      ></bb-empty-state-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"mb-3\">\n  <h4>Inside a card + state container + button</h4>\n  <div class=\"card shadow-sm\">\n    <div class=\"card-body bb-state-container\">\n      <bb-empty-state-ui\n        title=\"Page couldn\u2019t load\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        iconSize=\"xxl\"\n        iconModifier=\"error-outline\"\n      >\n      </bb-empty-state-ui>\n      <div class=\"bb-state-container__footer\">\n        <button bbButton buttonSize=\"md\" [attr.data-role]=\"'btn-primary'\">Reload</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"mb-3\">\n  <h4>No icon</h4>\n  <bb-empty-state-ui\n    [showIcon]=\"false\"\n    title=\"No Results Found\"\n    [attr.data-role]=\"'empty-state-example-title'\"\n  ></bb-empty-state-ui>\n</div>\n", components: [{ type: i1$f.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
EmptyStateShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], EmptyStateShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-empty-state-ui-showcase',
                    templateUrl: 'empty-state-showcase.component.html',
                }]
        }] });

class EmptyStateShowcaseModule {
}
EmptyStateShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
EmptyStateShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateShowcaseModule, declarations: [EmptyStateShowcaseComponent], imports: [CommonModule, EmptyStateModule, ButtonModule] });
EmptyStateShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateShowcaseModule, imports: [[CommonModule, EmptyStateModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmptyStateShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, EmptyStateModule, ButtonModule],
                    declarations: [EmptyStateShowcaseComponent],
                    entryComponents: [EmptyStateShowcaseComponent],
                }]
        }] });

let FieldsetShowcaseComponent = class FieldsetShowcaseComponent {
    constructor() {
        this.currencies = ['USD', 'EUR'];
        this.group = new FormGroup({
            password: new FormControl(''),
            withDecimalControl: new FormControl({
                amount: undefined,
                currency: 'USD',
            }),
        });
    }
};
FieldsetShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FieldsetShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FieldsetShowcaseComponent, selector: "bb-fieldset-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <bb-fieldset-ui heading=\"Group of two inputs\">\n    <form [formGroup]=\"group\">\n      <div class=\"form-row\">\n        <div class=\"form-group col-4\">\n          <bb-input-password-ui\n            [label]=\"'Password Input'\"\n            [aria-labelledby]=\"'input-password-label'\"\n            formControlName=\"password\"\n            [showVisibilityControl]=\"true\"\n            [maxLength]=\"5\"\n            [required]=\"true\"\n          >\n          </bb-input-password-ui>\n        </div>\n      </div>\n      <div class=\"form-row\">\n        <div class=\"form-group col-4\">\n          <div class=\"bb-block--lg\">\n            <label for=\"currency-input-with-decimals-label\">Currency input</label>\n            <bb-currency-input-ui\n              [currencyLabel]=\"'Currency'\"\n              formControlName=\"withDecimalControl\"\n              [currencies]=\"currencies\"\n              [id]=\"'currency-input-with-decimals-label'\"\n              [currencyListAriaLabel]=\"'Currency'\"\n            >\n            </bb-currency-input-ui>\n          </div>\n        </div>\n      </div>\n    </form>\n  </bb-fieldset-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default</h4>\n  <bb-fieldset-ui heading=\"Fieldset heading\">\n    <div class=\"form-group\">\n      <label class=\"bb-label\" for=\"example-default\">\n        Label <span class=\"bb-label__annotation\">(optional text)</span>\n      </label>\n      <bb-input-text-ui [id]=\"'example-default'\" placeholder=\"Input\"></bb-input-text-ui>\n    </div>\n  </bb-fieldset-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Without a heading</h4>\n  <bb-fieldset-ui>\n    <div class=\"form-group\">\n      <label class=\"bb-label\" for=\"example-without-heading\">\n        Label <span class=\"bb-label__annotation\">(optional text)</span>\n      </label>\n      <bb-input-text-ui [id]=\"'example-without-heading'\" placeholder=\"Input\"></bb-input-text-ui>\n    </div>\n  </bb-fieldset-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Disabled</h4>\n  <bb-fieldset-ui [disabled]=\"true\" heading=\"Fieldset heading\">\n    <div class=\"form-group\">\n      <label class=\"bb-label\" for=\"example-disabled\">\n        Label <span class=\"bb-label__annotation\">(optional text)</span>\n      </label>\n      <bb-input-text-ui [id]=\"'example-disabled'\" placeholder=\"Input\"></bb-input-text-ui>\n    </div>\n  </bb-fieldset-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Input width variations</h4>\n  <bb-fieldset-ui heading=\"Fieldset heading\">\n    <div class=\"form-row\">\n      <div class=\"form-group col-6\">\n        <bb-input-text-ui label=\"50%\" placeholder=\"Left\"></bb-input-text-ui>\n      </div>\n      <div class=\"form-group col-6\">\n        <bb-input-text-ui label=\"50%\" placeholder=\"Right\"></bb-input-text-ui>\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group col-4\">\n        <bb-input-text-ui label=\"33%\" placeholder=\"Left\"></bb-input-text-ui>\n      </div>\n      <div class=\"form-group col-4\">\n        <bb-input-text-ui label=\"33%\" placeholder=\"Middle\"></bb-input-text-ui>\n      </div>\n      <div class=\"form-group col-4\">\n        <bb-input-text-ui label=\"33%\" placeholder=\"Right\"></bb-input-text-ui>\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group col-4\">\n        <bb-input-text-ui label=\"33%\" placeholder=\"Left\"></bb-input-text-ui>\n      </div>\n      <div class=\"form-group col-8\">\n        <bb-input-text-ui label=\"66%\" placeholder=\"Right\"></bb-input-text-ui>\n      </div>\n    </div>\n\n    <div class=\"form-row\">\n      <div class=\"form-group col-8\">\n        <bb-input-text-ui label=\"66%\" placeholder=\"Left\"></bb-input-text-ui>\n      </div>\n      <div class=\"form-group col-4\">\n        <bb-input-text-ui label=\"33%\" placeholder=\"Right\"></bb-input-text-ui>\n      </div>\n    </div>\n  </bb-fieldset-ui>\n</div>\n", components: [{ type: i3$1.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i2$l.InputPasswordComponent, selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i1$b.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
FieldsetShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], FieldsetShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-fieldset-ui-showcase',
                    templateUrl: './fieldset-showcase.component.html',
                }]
        }], ctorParameters: function () { return []; } });

class FieldsetShowcaseModule {
}
FieldsetShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FieldsetShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetShowcaseModule, declarations: [FieldsetShowcaseComponent], imports: [CommonModule,
        FieldsetModule,
        ReactiveFormsModule,
        InputPasswordModule,
        CurrencyInputModule,
        InputTextModule] });
FieldsetShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetShowcaseModule, imports: [[
            CommonModule,
            FieldsetModule,
            ReactiveFormsModule,
            InputPasswordModule,
            CurrencyInputModule,
            InputTextModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FieldsetShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FieldsetModule,
                        ReactiveFormsModule,
                        InputPasswordModule,
                        CurrencyInputModule,
                        InputTextModule,
                    ],
                    declarations: [FieldsetShowcaseComponent],
                    entryComponents: [FieldsetShowcaseComponent],
                }]
        }] });

const attachment = {
    name: 'examplePDF.pdf',
    deletable: false,
    disabled: false,
    size: 10000,
    loading: false,
    fileContent: of(new ArrayBuffer(2000000)),
};
let FileAttachmentShowcaseComponent = class FileAttachmentShowcaseComponent {
    constructor() {
        this.defaultFileAttachmentsList = [
            attachment,
            Object.assign(Object.assign({}, attachment), { name: 'exampleXLS.xls' }),
            Object.assign(Object.assign({}, attachment), { name: 'exampleCSV.csv' }),
            Object.assign(Object.assign({}, attachment), { name: 'examplePNG.png' }),
            Object.assign(Object.assign({}, attachment), { name: 'exampleUnknown' }),
        ];
        this.deletableFileAttachmentsList = this.defaultFileAttachmentsList.map((defaultAttachment) => (Object.assign(Object.assign({}, defaultAttachment), { deletable: true, disabled: true })));
    }
    deleteAttachment(filesList, index) {
        filesList[index].loading = true;
        setTimeout(() => {
            filesList[index].loading = false;
            filesList.splice(index, 1);
        }, 1000);
    }
};
FileAttachmentShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FileAttachmentShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FileAttachmentShowcaseComponent, selector: "bb-file-attachment-ui-showcase", ngImport: i0, template: "<h4>Default downloadable file attachments</h4>\n<div class=\"row\">\n  <div class=\"col-auto\" *ngFor=\"let attachment of defaultFileAttachmentsList\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui\n        [name]=\"attachment.name\"\n        [size]=\"attachment.size\"\n        [loading]=\"attachment.loading\"\n        [fileContent]=\"attachment.fileContent\"\n      ></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n<br />\n<h4>Disabled file attachments</h4>\n<div class=\"row\">\n  <div class=\"col-auto\" *ngFor=\"let attachment of defaultFileAttachmentsList\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui disabled=\"true\" [name]=\"attachment.name\" [size]=\"attachment.size\"></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n<br />\n<h4>Deletable file attachments with disabled download</h4>\n<div class=\"row\">\n  <div class=\"col-auto\" *ngFor=\"let attachment of deletableFileAttachmentsList; let i = index\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui\n        [name]=\"attachment.name\"\n        [deletable]=\"attachment.deletable\"\n        [disabled]=\"attachment.disabled\"\n        [size]=\"attachment.size\"\n        [loading]=\"attachment.loading\"\n        (delete)=\"deleteAttachment(deletableFileAttachmentsList, i)\"\n        [fileContent]=\"attachment.fileContent\"\n      ></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n<br />\n<h4>File attachments that fill their container</h4>\n<div class=\"row\">\n  <div class=\"col-md-4\" *ngFor=\"let attachment of defaultFileAttachmentsList; let i = index\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui\n        [name]=\"attachment.name\"\n        [size]=\"attachment.size\"\n        [loading]=\"attachment.loading\"\n        [fileContent]=\"attachment.fileContent\"\n        [block]=\"true\"\n      ></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$g.FileAttachmentComponent, selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
FileAttachmentShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], FileAttachmentShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-file-attachment-ui-showcase',
                    templateUrl: 'file-attachment-showcase.component.html',
                }]
        }] });

const uiModules$1 = [ButtonModule, IconModule, KeyboardClickModule, LoadingIndicatorModule];
class FileAttachmentShowcaseModule {
}
FileAttachmentShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FileAttachmentShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseModule, declarations: [FileAttachmentShowcaseComponent], imports: [CommonModule, FileAttachmentModule, ButtonModule, IconModule, KeyboardClickModule, LoadingIndicatorModule] });
FileAttachmentShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseModule, imports: [[CommonModule, FileAttachmentModule, uiModules$1]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FileAttachmentModule, uiModules$1],
                    declarations: [FileAttachmentShowcaseComponent],
                    entryComponents: [FileAttachmentShowcaseComponent],
                }]
        }] });

let FocusShowcaseComponent = class FocusShowcaseComponent {
};
FocusShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FocusShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FocusShowcaseComponent, selector: "bb-focus-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Automatically setting focus</h4>\n  <p>Are you sure you want to delete something?</p>\n  <div class=\"bb-stack\">\n    <div class=\"bb-stack__item\">\n      <button bbButton bbFocus>Cancel</button>\n    </div>\n    <button bbButton>OK</button>\n  </div>\n</div>\n\n<div clsas=\"bb-block bb-block--xl\">\n  <h4>Manually setting focus</h4>\n  <div class=\"bb-stack\">\n    <div class=\"bb-stack__item\">\n      <button bbButton [bbFocus]=\"\" #focusThis=\"bbFocus\">Button with bbFocus</button>\n    </div>\n    <button bbButton (click)=\"focusThis.focus()\">Click to focus the other button</button>\n  </div>\n</div>\n", directives: [{ type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2$r.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }] });
FocusShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], FocusShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-focus-ui-showcase',
                    templateUrl: './focus-showcase.component.html',
                }]
        }] });

class FocusShowcaseModule {
}
FocusShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FocusShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusShowcaseModule, declarations: [FocusShowcaseComponent], imports: [CommonModule, FocusModule, ButtonModule] });
FocusShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusShowcaseModule, imports: [[CommonModule, FocusModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FocusShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FocusModule, ButtonModule],
                    declarations: [FocusShowcaseComponent],
                    entryComponents: [FocusShowcaseComponent],
                }]
        }] });

let HeaderShowcaseComponent = class HeaderShowcaseComponent {
};
HeaderShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
HeaderShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HeaderShowcaseComponent, selector: "bb-header-ui-showcase", ngImport: i0, template: "<bb-header-ui headingType=\"h1\" heading=\"This is H1\"></bb-header-ui>\n<bb-header-ui headingType=\"h2\" heading=\"This is H2\"></bb-header-ui>\n<bb-header-ui headingType=\"h3\" heading=\"This is H3\"></bb-header-ui>\n", components: [{ type: i1$h.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }] });
HeaderShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], HeaderShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-header-ui-showcase',
                    templateUrl: './header-showcase.component.html',
                }]
        }] });

class HeaderShowcaseModule {
}
HeaderShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
HeaderShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderShowcaseModule, declarations: [HeaderShowcaseComponent], imports: [CommonModule, HeaderModule] });
HeaderShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderShowcaseModule, imports: [[CommonModule, HeaderModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HeaderShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, HeaderModule],
                    declarations: [HeaderShowcaseComponent],
                    entryComponents: [HeaderShowcaseComponent],
                }]
        }] });

let HighlightShowcaseComponent = class HighlightShowcaseComponent {
};
HighlightShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
HighlightShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HighlightShowcaseComponent, selector: "bb-highlight-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default</h4>\n  <bb-amount-ui [amount]=\"12345.47\" bbHighlight></bb-amount-ui>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>Highlight with positive and negative</h4>\n  <bb-amount-ui\n    [amount]=\"12345.47\"\n    positiveClass=\"bb-amount--positive\"\n    negativeClass=\"bb-amount--negative\"\n    bbHighlight\n  ></bb-amount-ui>\n  <br />\n  <bb-amount-ui\n    [amount]=\"-12345.47\"\n    positiveClass=\"bb-amount--positive\"\n    negativeClass=\"bb-amount--negative\"\n    bbHighlight\n  ></bb-amount-ui>\n</div>\n<div>\n  <h4>Highlight off</h4>\n  <bb-amount-ui [amount]=\"12345.47\" [bbHighlight]=\"false\"></bb-amount-ui>\n</div>\n", components: [{ type: i1$3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2$n.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }] });
HighlightShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], HighlightShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-highlight-ui-showcase',
                    templateUrl: './highlight-showcase.component.html',
                }]
        }] });

class HighlightShowcaseModule {
}
HighlightShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
HighlightShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightShowcaseModule, declarations: [HighlightShowcaseComponent], imports: [CommonModule, HighlightModule, AmountModule] });
HighlightShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightShowcaseModule, imports: [[CommonModule, HighlightModule, AmountModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, HighlightModule, AmountModule],
                    declarations: [HighlightShowcaseComponent],
                    entryComponents: [HighlightShowcaseComponent],
                }]
        }] });

let IbanPipeShowcaseComponent = class IbanPipeShowcaseComponent {
    constructor() {
        this.iban = 'NL81TRIO0212471066';
    }
};
IbanPipeShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IbanPipeShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: IbanPipeShowcaseComponent, selector: "bb-iban-pipe-ui-showcase", ngImport: i0, template: "<div><strong>IBAN number formated:</strong> {{ iban | bbIban }}</div>\n", pipes: { "bbIban": i1$D.BbIbanPipe } });
IbanPipeShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], IbanPipeShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-iban-pipe-ui-showcase',
                    templateUrl: './iban-pipe-showcase.component.html',
                }]
        }] });

class IbanPipeShowcaseModule {
}
IbanPipeShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IbanPipeShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeShowcaseModule, declarations: [IbanPipeShowcaseComponent], imports: [CommonModule, BbIbanPipeModule] });
IbanPipeShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeShowcaseModule, imports: [[CommonModule, BbIbanPipeModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanPipeShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, BbIbanPipeModule],
                    declarations: [IbanPipeShowcaseComponent],
                    entryComponents: [IbanPipeShowcaseComponent],
                }]
        }] });

let IconShowcaseComponent = class IconShowcaseComponent {
};
IconShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
IconShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: IconShowcaseComponent, selector: "bb-icon-ui-showcase", ngImport: i0, template: "<h4>Icon sizes and colors</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui\n    name=\"search\"\n    class=\"bb-stack__item--fill\"\n    size=\"sm\"\n    color=\"primary\"\n    aria-label=\"Search icon\"\n    [attr.data-role]=\"'search-sm-primary'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    name=\"search\"\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    color=\"danger\"\n    [attr.data-role]=\"'search-md-danger'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    name=\"search\"\n    class=\"bb-stack__item--fill\"\n    size=\"lg\"\n    color=\"warning\"\n    [attr.data-role]=\"'search-lg-warning'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    name=\"search\"\n    class=\"bb-stack__item--fill\"\n    size=\"xl\"\n    color=\"info\"\n    [attr.data-role]=\"'search-xl-info'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    name=\"search\"\n    class=\"bb-stack__item--fill\"\n    size=\"xxl\"\n    color=\"success\"\n    [attr.data-role]=\"'search-xxl-success'\"\n  ></bb-icon-ui>\n</div>\n<h4>Icons - Background Circle (Theme 1.0 only)</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"directions-car\"\n    size=\"md\"\n    [backgroundType]=\"'circle'\"\n    [attr.data-role]=\"'directions-car-md-circle-v1'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"local-play\"\n    size=\"md\"\n    color=\"info\"\n    [backgroundType]=\"'circle'\"\n    [attr.data-role]=\"'local-play-md-circle-v1'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"favorite\"\n    size=\"md\"\n    color=\"danger\"\n    [backgroundType]=\"'circle'\"\n    [attr.data-role]=\"'favorite-md-circle-v1'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"shopping-cart\"\n    size=\"md\"\n    color=\"success\"\n    [backgroundType]=\"'circle'\"\n    [attr.data-role]=\"'shopping-cart-md-circle-v1'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"assignment-returned\"\n    size=\"md\"\n    color=\"warning\"\n    [backgroundType]=\"'circle'\"\n    [attr.data-role]=\"'assignment-returned-md-circle-v1'\"\n  ></bb-icon-ui>\n</div>\n<h4>Icons - Background Circle (Theme 2.0 only)</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"directions-car\"\n    size=\"sm\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'directions-car-sm-background-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"local-play\"\n    size=\"md\"\n    color=\"info\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'local-play-md-background-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"favorite\"\n    size=\"lg\"\n    color=\"danger\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'favorite-lg-background-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"shopping-cart\"\n    size=\"xl\"\n    color=\"success\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'shopping-cart-xl-background-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"assignment-returned\"\n    size=\"xxl\"\n    color=\"warning\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'assignment-returned-xxl-background-circle'\"\n  ></bb-icon-ui>\n</div>\n<h4>Icons - Background Square (Theme 2.0 only)</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"directions-car\"\n    size=\"sm\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'directions-car-sm-background-square'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"local-play\"\n    size=\"md\"\n    color=\"info\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'local-play-md-background-square'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"favorite\"\n    size=\"lg\"\n    color=\"danger\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'favorite-lg-background-square'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"shopping-cart\"\n    size=\"xl\"\n    color=\"success\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'shopping-cart-xl-background-square'\"\n  >\n  </bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    name=\"assignment-returned\"\n    size=\"xxl\"\n    color=\"warning\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'assignment-returned-xxl-background-square'\"\n  >\n  </bb-icon-ui>\n</div>\n<h4>Icons - Categories</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    name=\"category-home\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'category-home-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    name=\"category-transfers\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'category-transfers-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    name=\"category-interest-income\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'category-interest-income-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    name=\"category-beauty\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'category-beauty-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    name=\"category-restaurants\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'category-restaurants-circle'\"\n  ></bb-icon-ui>\n</div>\n<h4>Icons - Product Kinds</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui\n    size=\"md\"\n    class=\"bb-stack__item--fill\"\n    name=\"savings-accounts\"\n    color=\"savings-account\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'product-kind-savings-accounts-square'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    size=\"md\"\n    class=\"bb-stack__item--fill\"\n    name=\"investment-accounts\"\n    color=\"investment-account\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'product-kind-investment-accounts-square'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    size=\"md\"\n    class=\"bb-stack__item--fill\"\n    name=\"current-accounts\"\n    color=\"current-account\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'product-kind-current-accounts-square'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    name=\"credit-cards\"\n    color=\"credit-card\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'product-kind-credit-cards-square'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    size=\"md\"\n    name=\"loans\"\n    color=\"loan\"\n    backgroundType=\"square\"\n    [attr.data-role]=\"'product-kind-loans-square'\"\n  ></bb-icon-ui>\n</div>\n<h4>Icons - Inverse Product Kinds</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    [inverse]=\"true\"\n    size=\"md\"\n    name=\"savings-accounts\"\n    color=\"savings-account\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'product-kind-savings-accounts-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    [inverse]=\"true\"\n    size=\"md\"\n    name=\"investment-accounts\"\n    color=\"investment-account\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'product-kind-investment-accounts-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    [inverse]=\"true\"\n    size=\"md\"\n    name=\"current-accounts\"\n    color=\"current-account\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'product-kind-current-accounts-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    [inverse]=\"true\"\n    size=\"md\"\n    name=\"credit-cards\"\n    color=\"credit-card\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'product-kind-credit-cards-circle'\"\n  ></bb-icon-ui>\n  <bb-icon-ui\n    class=\"bb-stack__item--fill\"\n    [inverse]=\"true\"\n    size=\"md\"\n    name=\"loans\"\n    color=\"loan\"\n    backgroundType=\"circle\"\n    [attr.data-role]=\"'product-kind-loans-circle'\"\n  ></bb-icon-ui>\n</div>\n<h4>Icons - Files</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui name=\"file-bb-sepa\" size=\"lg\" class=\"bb-stack__item--fill\" [attr.data-role]=\"'file-bb-sepa'\"></bb-icon-ui>\n  <bb-icon-ui name=\"file-xls\" size=\"lg\" class=\"bb-stack__item--fill\" [attr.data-role]=\"'file-xls'\"></bb-icon-ui>\n  <bb-icon-ui name=\"file-csv\" size=\"lg\" class=\"bb-stack__item--fill\" [attr.data-role]=\"'file-csv'\"></bb-icon-ui>\n  <bb-icon-ui name=\"file-blk\" size=\"lg\" class=\"bb-stack__item--fill\" [attr.data-role]=\"'file-blk'\"></bb-icon-ui>\n  <bb-icon-ui name=\"file-mts\" size=\"lg\" class=\"bb-stack__item--fill\" [attr.data-role]=\"'file-mts'\"></bb-icon-ui>\n</div>\n<h4>Icons - Animated</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui name=\"cached\" size=\"lg\" [animate]=\"true\" class=\"bb-stack__item--fill\"></bb-icon-ui>\n</div>\n<h4>Outlined Icons</h4>\n<div class=\"bb-stack bb-block--lg\">\n  <bb-icon-ui name=\"warning-amber\" size=\"md\"></bb-icon-ui>\n</div>\n", components: [{ type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }] });
IconShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], IconShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-icon-ui-showcase',
                    templateUrl: './icon-showcase.component.html',
                }]
        }] });

class IconShowcaseModule {
}
IconShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IconShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconShowcaseModule, declarations: [IconShowcaseComponent], imports: [CommonModule, IconModule] });
IconShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconShowcaseModule, imports: [[CommonModule, IconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IconShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, IconModule],
                    declarations: [IconShowcaseComponent],
                    entryComponents: [IconShowcaseComponent],
                }]
        }] });

let InfiniteScrollShowcaseComponent = class InfiniteScrollShowcaseComponent {
    constructor() {
        this.items = [1, 2, 3, 4];
        this.complete = false;
        this.loading = false;
        this.page = 0;
    }
    loadMore() {
        if (!this.loading) {
            this.loading = true;
            this.page = this.page + 1;
            window.setTimeout(() => {
                this.items = Array.from({ length: this.page * 4 + 4 }).map((_, i) => i + 1);
                this.loading = false;
                this.complete = this.page >= 4;
            }, 1000);
        }
    }
};
InfiniteScrollShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InfiniteScrollShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InfiniteScrollShowcaseComponent, selector: "bb-infinite-scroll-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"card\">\n      <div class=\"bb-infinite-scroll-container card-body\">\n        <bb-infinite-scroll-ui\n          class=\"bb-infinite-scroll\"\n          (scrollEnd)=\"loadMore()\"\n          [disableScrollEnd]=\"complete || loading\"\n        >\n          <div\n            class=\"bb-list bb-subtitle bb-list--density-sm\"\n            [attr.aria-busy]=\"loading\"\n            [class.bb-list--infinite]=\"!complete\"\n          >\n            <div *ngFor=\"let item of items\" class=\"bb-list__item\">\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\">Some kind of data:</div>\n                <bb-amount-ui\n                  [amount]=\"item\"\n                  [currency]=\"'USD'\"\n                  class=\"bb-stack__item bb-stack__item--push-right\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"loading\" class=\"bb-block bb-block--md\">\n            <bb-loading-indicator-ui loaderSize=\"sm\"></bb-loading-indicator-ui>\n          </div>\n          <div *ngIf=\"complete\" class=\"bb-text-align-center\">All items loaded</div>\n        </bb-infinite-scroll-ui>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$F.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i1$3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1$j.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InfiniteScrollShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InfiniteScrollShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-infinite-scroll-ui-showcase',
                    templateUrl: './infinite-scroll-showcase.component.html',
                }]
        }] });

class InfiniteScrollShowcaseModule {
}
InfiniteScrollShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InfiniteScrollShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseModule, declarations: [InfiniteScrollShowcaseComponent], imports: [CommonModule, InfiniteScrollModule, LoadingIndicatorModule, AmountModule] });
InfiniteScrollShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseModule, imports: [[CommonModule, InfiniteScrollModule, LoadingIndicatorModule, AmountModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InfiniteScrollModule, LoadingIndicatorModule, AmountModule],
                    declarations: [InfiniteScrollShowcaseComponent],
                    entryComponents: [InfiniteScrollShowcaseComponent],
                }]
        }] });

let InputCheckboxShowcaseComponent = class InputCheckboxShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            inputCheckbox: false,
            inputCheckbox2: false,
            inputCheckbox3: false,
            inputCheckbox4: false,
            inputCheckbox5: false,
            inputCheckbox6: false,
            inputCheckbox7: false,
            inputCheckboxDisabled: { value: false, disabled: true },
            inputCheckboxDisabledChecked: { value: true, disabled: true },
            inputCheckboxError: ['', Validators.requiredTrue],
            inputCheckboxIndeterminate: { value: true },
        });
    }
    isFieldValid(fieldName) {
        if (this.vForm) {
            const control = this.vForm.controls[fieldName];
            return control && control.valid;
        }
        return false;
    }
    ngOnInit() {
        if (this.vForm) {
            const control = this.vForm.get('inputCheckboxError');
            if (control) {
                control.markAsTouched();
            }
        }
    }
};
InputCheckboxShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputCheckboxShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputCheckboxShowcaseComponent, selector: "bb-input-checkbox-ui-showcase", ngImport: i0, template: "<div click=\"update()\">Click</div>\n\n<form [formGroup]=\"vForm\">\n  <div class=\"bb-block bb-block--lg\">\n    <h4>List of vertically stacked checkboxes</h4>\n    <bb-input-checkbox-ui\n      #inputCheckbox\n      [id]=\"'inputCheckbox'\"\n      data-role=\"checkbox-default\"\n      formControlName=\"inputCheckbox\"\n      label=\"I accept the Terms of Service\"\n      class=\"bb-block bb-block--sm\"\n    ></bb-input-checkbox-ui>\n    <bb-input-checkbox-ui\n      #inputCheckbox2\n      [id]=\"'inputCheckbox2'\"\n      data-role=\"checkbox-default-2\"\n      formControlName=\"inputCheckbox2\"\n      label=\"I accept the Terms of Conditions\"\n    ></bb-input-checkbox-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4>List of horizontally stacked checkboxes</h4>\n    <div class=\"bb-stack\">\n      <bb-input-checkbox-ui\n        #inputCheckbox3\n        [id]=\"'inputCheckbox3'\"\n        data-role=\"checkbox-default-3\"\n        formControlName=\"inputCheckbox3\"\n        label=\"I accept the Terms of Service\"\n        class=\"bb-stack__item\"\n      ></bb-input-checkbox-ui>\n      <bb-input-checkbox-ui\n        #inputCheckbox4\n        [id]=\"'inputCheckbox4'\"\n        data-role=\"checkbox-default-4\"\n        formControlName=\"inputCheckbox4\"\n        label=\"I accept the Terms of Conditions\"\n      ></bb-input-checkbox-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4>Disabled</h4>\n    <bb-input-checkbox-ui\n      [id]=\"'inputCheckboxDisabled'\"\n      data-role=\"checkbox-disabled\"\n      formControlName=\"inputCheckboxDisabled\"\n      label=\"I accept the Terms of Service\"\n    ></bb-input-checkbox-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4>Disabled, checked</h4>\n    <bb-input-checkbox-ui\n      [id]=\"'inputCheckboxDisabledChecked'\"\n      data-role=\"checkbox-disabled-selected\"\n      formControlName=\"inputCheckboxDisabledChecked\"\n      label=\"I accept the Terms of Service\"\n    ></bb-input-checkbox-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4>Invalid checkbox</h4>\n    <bb-input-checkbox-ui\n      [id]=\"'inputCheckboxError'\"\n      [aria-describedby]=\"'inputCheckboxExampleError'\"\n      data-role=\"checkbox-validated\"\n      [required]=\"true\"\n      formControlName=\"inputCheckboxError\"\n      label=\"I accept the Terms of Service\"\n    ></bb-input-checkbox-ui>\n    <bb-input-validation-message-ui\n      [id]=\"'inputCheckboxExampleError'\"\n      [showErrors]=\"!isFieldValid('inputCheckboxError')\"\n    >\n      <span>This field is required.</span>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4>Indeterminate</h4>\n    <bb-input-checkbox-ui\n      [id]=\"'inputCheckboxIndeterminate'\"\n      data-role=\"checkbox-indeterminate\"\n      [indeterminate]=\"true\"\n      formControlName=\"inputCheckboxIndeterminate\"\n      label=\"I accept the Terms of Service\"\n    ></bb-input-checkbox-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4>Labelled by child node with aria-labelledby</h4>\n    <bb-input-checkbox-ui\n      [id]=\"'inputCheckboxChildNode'\"\n      data-role=\"checkbox-child-node\"\n      formControlName=\"inputCheckbox5\"\n      [aria-labelledby]=\"'inputCheckboxChildNodeLabelId'\"\n    >\n      <span id=\"inputCheckboxChildNodeLabelId\">I accept the Terms of Service</span>\n    </bb-input-checkbox-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4>Labelled by child node aria-label content</h4>\n    <bb-input-checkbox-ui\n      #inputCheckboxAriaLabel\n      [id]=\"'inputCheckboxAriaLabel'\"\n      data-role=\"checkbox-aria-labelled\"\n      formControlName=\"inputCheckbox6\"\n      [aria-label]=\"'I accept the Terms of Service'\"\n    >\n      <span>{{ inputCheckboxAriaLabel?.ariaLabel }}</span>\n    </bb-input-checkbox-ui>\n  </div>\n\n  <div class=\"bb-block\">\n    <h4>Labelled by non child with aria-labelledby</h4>\n    <bb-input-checkbox-ui\n      [id]=\"'inputCheckboxAriaLabelledby'\"\n      data-role=\"checkbox-aria-labelledby\"\n      formControlName=\"inputCheckbox7\"\n      [aria-labelledby]=\"'ariaLabeledById'\"\n      class=\"bb-block bb-block--sm\"\n    >\n      Default label\n    </bb-input-checkbox-ui>\n    <span id=\"ariaLabeledById\">This label will be read out: I accept the Terms of Service</span>\n  </div>\n</form>\n", components: [{ type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
InputCheckboxShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputCheckboxShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-checkbox-ui-showcase',
                    templateUrl: './input-checkbox-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputCheckboxShowcaseModule {
}
InputCheckboxShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputCheckboxShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxShowcaseModule, declarations: [InputCheckboxShowcaseComponent], imports: [CommonModule, InputCheckboxModule, ReactiveFormsModule, InputValidationMessageModule] });
InputCheckboxShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxShowcaseModule, imports: [[CommonModule, InputCheckboxModule, ReactiveFormsModule, InputValidationMessageModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputCheckboxModule, ReactiveFormsModule, InputValidationMessageModule],
                    declarations: [InputCheckboxShowcaseComponent],
                    entryComponents: [InputCheckboxShowcaseComponent],
                }]
        }] });

let InputDatepickerShowcaseComponent = class InputDatepickerShowcaseComponent {
    constructor(formBuilder) {
        this.dateRangeSplit = null;
        this.dateRangeRequiredSplit = null;
        this.isDisabled = true;
        this.focusedDate$$ = new BehaviorSubject(undefined);
        this.focusedRangeDate$$ = new BehaviorSubject(undefined);
        this.focusedDate = (event) => {
            const { date = null, isSelecting = false } = event;
            this.focusedDate$$.next({
                date,
                isSelecting,
            });
        };
        this.focusedRangeDate = (event) => {
            const { date = null, isSelecting = false } = event;
            this.focusedRangeDate$$.next({
                date,
                isSelecting,
            });
        };
        this.date = '';
        this.dateFirstDayOfWeekSet = '';
        this.dateDefault = '';
        this.datePickerDisabled = '';
        this.predefinedDate = new Date('2019-10-29T00:00').toISOString();
        this.dateOverrideDateFormat = '';
        this.dateOverrideDateFormat2 = new Date('2020-10-09T00:00').toISOString();
        this.datePickerReadonly = this.predefinedDate;
        this.dateRange = {
            from: new Date('2020-11-05T00:00').toISOString(),
            to: new Date('2020-11-12T00:00').toISOString(),
        };
        this.dateRangeRequired = { from: '', to: '' };
        this.dateRangeSplit = {
            from: new Date('2020-11-05T00:00').toISOString(),
            to: new Date('2020-11-12T22:00').toISOString(),
        };
        this.dateRangeRequiredSplit = { from: '', to: '' };
        const today = new Date('2019-10-05T00:00');
        this.minDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1, 0, 0).toISOString();
        this.maxDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1, 0, 0).toISOString();
        this.formGroup = formBuilder.group({
            reactiveDateFormControlName: formBuilder.control(new Date('2020-10-09T00:00').toISOString(), [
                Validators.required,
            ]),
            reactiveDateRangeFormControlName1: formBuilder.control({
                from: new Date('2020-11-05T00:00').toISOString(),
                to: new Date('2020-11-12T00:00').toISOString(),
            }),
            reactiveDateRangeFormControlName2: formBuilder.control({ from: '', to: '' }, [Validators.required]),
            reactiveDateRangeFormControlName3: formBuilder.control({ from: '', to: new Date('2020-11-12T00:00').toISOString() }, [Validators.required]),
            reactiveDateRangeFormControlName4: formBuilder.control({
                from: '',
                to: new Date('2020-11-12T00:00').toISOString(),
            }),
            reactiveDateRangeFormControlName5: formBuilder.control({
                from: 'date',
                to: new Date('2020-11-12T00:00').toISOString(),
            }),
            reactiveDateRangeFormControlName6: formBuilder.control({
                from: new Date('2020-11-12T00:00').toISOString(),
                to: '',
            }),
        });
    }
};
InputDatepickerShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputDatepickerShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputDatepickerShowcaseComponent, selector: "bb-input-datepicker-ui-showcase", ngImport: i0, template: "<h2 class=\"bb-block bb-block--sm\">Single Date</h2>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDefaultLabel\">\n    <label [attr.for]=\"defaultDatePicker6?.id\">Customized accessibility options</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <div class=\"sr-only\" aria-live=\"polite\" id=\"customDatepickerDescribedbyLabel\">\n      <div *ngIf=\"focusedDate$$ | async as focusDate\">\n        <span *ngIf=\"focusDate.isSelecting\"\n          >Current selected date is\n          {{ focusDate.date.year + '-' + focusDate.date.month + '-' + focusDate.date.day | date: 'longDate' }}</span\n        >\n      </div>\n    </div>\n    <bb-input-datepicker-ui\n      #defaultDatePicker6\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"predefinedDate\"\n      [ariaLabelForButton]=\"'Show calendar dropdown'\"\n      [aria-labelledby]=\"'datePickerDefaultLabel'\"\n      [datepickerDescribedby]=\"'customDatepickerDescribedbyLabel'\"\n      [firstDayOfWeek]=\"0\"\n      (focusedDate)=\"focusedDate($event)\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDefaultLabel\">\n    <label [attr.for]=\"defaultDatePicker?.id\">Default</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"predefinedDate\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerDefaultLabel'\"\n      [firstDayOfWeek]=\"0\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDefaultLabel2\">\n    <label [attr.for]=\"defaultDatePicker2?.id\">Default with first day of the week set to Sunday</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker2\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateFirstDayOfWeekSet\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerDefaultLabel2'\"\n      [firstDayOfWeek]=\"7\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDefaultLabel3\">\n    <label [attr.for]=\"defaultDatePicker3?.id\">Default with override date format</label>\n  </h4>\n  <div class=\"datepicker-default bb-block bb-block--md\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker3\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateOverrideDateFormat\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerDefaultLabel3'\"\n      [overrideDateFormat]=\"'yyyy/MM/dd'\"\n    ></bb-input-datepicker-ui>\n  </div>\n\n  get default format from locale\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker3\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateOverrideDateFormat2\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerDefaultLabel3'\"\n      [overrideDateFormat]=\"'yyyy/MM/dd'\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerPredefinedLabel\">With pre-defined date</h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-predefinedDate'\">\n    <bb-input-datepicker-ui\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"predefinedDate\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerPredefinedLabel'\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDisabledLabel\">Disabled</h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-disabled'\">\n    <bb-input-datepicker-ui\n      name=\"startDate2\"\n      [disabled]=\"isDisabled\"\n      [(ngModel)]=\"datePickerDisabled\"\n      [aria-labelledby]=\"'datePickerDisabledLabel'\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerCustomPlaceholder\">\n    <label [attr.for]=\"customPlaceholderDatePicker?.id\">Custom placeholder</label>\n  </h4>\n  <div class=\"datepicker-default\">\n    <bb-input-datepicker-ui\n      #customPlaceholderDatePicker\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [placeholder]=\"'You can add custom placeholder'\"\n      [(ngModel)]=\"date\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerCustomPlaceholder'\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerReadonlyLabel\">Readonly</h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-readonly'\">\n    <bb-input-datepicker-ui\n      name=\"startDate3\"\n      [readonly]=\"true\"\n      [(ngModel)]=\"datePickerReadonly\"\n      [aria-labelledby]=\"'datePickerReadonlyLabel'\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerMinMaxLabel\">With minimum and maximum date selection</h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-minMax'\">\n    <bb-input-datepicker-ui\n      name=\"startDate\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [(ngModel)]=\"dateDefault\"\n      [aria-labelledby]=\"'datePickerMinMaxLabel'\"\n      [aria-describedby]=\"'datePickerMinMaxValues'\"\n    ></bb-input-datepicker-ui>\n  </div>\n  <div class=\"sr-only\" aria-live=\"polite\" id=\"datePickerMinMaxValues\">\n    Minimum value for this input is {{ minDate | date: 'short' }} maximum value is {{ maxDate | date: 'short' }}\n  </div>\n</div>\n\n<h2 class=\"bb-block bb-block--sm\">Range selection single input</h2>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDefaultLabelRange\">\n    <label [attr.for]=\"defaultDatePicker5?.id\">Range: Customized accessibility options</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <div class=\"sr-only\" aria-live=\"polite\" id=\"customRangeDatepickerDescribedbyLabel\">\n      <div *ngIf=\"focusedRangeDate$$ | async as focusRangeDate\">\n        <span *ngIf=\"focusRangeDate.isSelecting\"\n          >Currently selecting date\n          {{\n            focusRangeDate.date.year + '-' + focusRangeDate.date.month + '-' + focusRangeDate.date.day\n              | date: 'longDate'\n          }}</span\n        >\n      </div>\n    </div>\n    <bb-input-datepicker-ui\n      #defaultDatePicker5\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateRange\"\n      [ariaLabelForButton]=\"'Show datepicker calendars'\"\n      [aria-labelledby]=\"'datePickerDefaultLabelRange'\"\n      [datepickerDescribedby]=\"'customRangeDatepickerDescribedbyLabel'\"\n      [firstDayOfWeek]=\"0\"\n      [rangeSelection]=\"true\"\n      (focusedDate)=\"focusedRangeDate($event)\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDefaultLabelRange\">\n    <label [attr.for]=\"defaultDatePicker4?.id\">Default with ngModel</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker4\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateRange\"\n      [ariaLabelForButton]=\"'Show datepicker calendars'\"\n      [aria-labelledby]=\"'datePickerDefaultLabelRange'\"\n      [firstDayOfWeek]=\"0\"\n      [rangeSelection]=\"true\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerRangeSelectionSingleDefault5\">\n    <label [attr.for]=\"defaultDatePicker5?.id\">Default with ngModel, label required set</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker5\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateRangeRequired\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerRangeSelectionSingleDefault5'\"\n      [firstDayOfWeek]=\"0\"\n      label=\"Label\"\n      [rangeSelection]=\"true\"\n      [required]=\"true\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div [formGroup]=\"formGroup\">\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRange1\">\n      <label [attr.for]=\"defaultDatePicker7?.id\">Reactive</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker7\n        formControlName=\"reactiveDateRangeFormControlName1\"\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRange1'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelection]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRange2\">\n      <label [attr.for]=\"defaultDatePicker8?.id\">Reactive with empty initial and required</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker8\n        formControlName=\"reactiveDateRangeFormControlName2\"\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRange2'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelection]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRange3\">\n      <label [attr.for]=\"defaultDatePicker9?.id\">Reactive with missing from and required</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker9\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        formControlName=\"reactiveDateRangeFormControlName3\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRange3'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelection]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRange6\">\n      <label [attr.for]=\"defaultDatePicker?.id\">Reactive with missing to</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        formControlName=\"reactiveDateRangeFormControlName6\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRange6'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelection]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRange4\">\n      <label [attr.for]=\"defaultDatePicker10?.id\">Reactive with missing from and not required</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker10\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        formControlName=\"reactiveDateRangeFormControlName4\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRange4'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelection]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRange5\">\n      <label [attr.for]=\"defaultDatePicker11?.id\">Reactive with wrong from</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker11\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        formControlName=\"reactiveDateRangeFormControlName5\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRange5'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelection]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n</div>\n\n<h2 class=\"bb-block bb-block--sm\">Range selection split input</h2>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerDefaultLabelRangeSplit\">\n    <label [attr.for]=\"defaultDatePicker12?.id\">Default with ngModel</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker12\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateRangeSplit\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerDefaultLabelRangeSplit'\"\n      [firstDayOfWeek]=\"0\"\n      [rangeSelectionSplit]=\"true\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"datePickerRangeSelectionSplitDefault6\">\n    <label [attr.for]=\"defaultDatePicker21?.id\">Default with ngModel, label required set</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker21\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      [(ngModel)]=\"dateRangeRequiredSplit\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerRangeSelectionSplitDefault6'\"\n      [firstDayOfWeek]=\"0\"\n      label=\"Label\"\n      [rangeSelectionSplit]=\"true\"\n      [required]=\"true\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n\n<div [formGroup]=\"formGroup\">\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRangeSplit1\">\n      <label [attr.for]=\"defaultDatePicker?.id\">Reactive</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker\n        formControlName=\"reactiveDateRangeFormControlName1\"\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRangeSplit1'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelectionSplit]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRangeSplit2\">\n      <label [attr.for]=\"defaultDatePicker?.id\">Reactive with empty initial and required</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker\n        formControlName=\"reactiveDateRangeFormControlName2\"\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRangeSplit2'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelectionSplit]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRangeSplit3\">\n      <label [attr.for]=\"defaultDatePicker?.id\">Reactive with missing from and required</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        formControlName=\"reactiveDateRangeFormControlName3\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRangeSplit3'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelectionSplit]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRangeSplit6\">\n      <label [attr.for]=\"defaultDatePicker?.id\">Reactive with missing to</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        formControlName=\"reactiveDateRangeFormControlName6\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRangeSplit6'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelectionSplit]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <div class=\"bb-block bb-block--lg\">\n    <h4 id=\"datePickerDefaultLabelRangeSplit4\">\n      <label [attr.for]=\"defaultDatePicker?.id\">Reactive with missing from and not required</label>\n    </h4>\n    <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n      <bb-input-datepicker-ui\n        #defaultDatePicker\n        labelClasses=\"font-weight-bold\"\n        name=\"startDate\"\n        formControlName=\"reactiveDateRangeFormControlName4\"\n        [ariaLabelForButton]=\"'button'\"\n        [aria-labelledby]=\"'datePickerDefaultLabelRangeSplit4'\"\n        [firstDayOfWeek]=\"0\"\n        [rangeSelectionSplit]=\"true\"\n      ></bb-input-datepicker-ui>\n    </div>\n  </div>\n\n  <h4 id=\"datePickerDefaultLabelRangeSplit5\">\n    <label [attr.for]=\"defaultDatePicker?.id\">Reactive with wrong from</label>\n  </h4>\n  <div class=\"datepicker-default\" [attr.data-role]=\"'datepicker-default'\">\n    <bb-input-datepicker-ui\n      #defaultDatePicker\n      labelClasses=\"font-weight-bold\"\n      name=\"startDate\"\n      formControlName=\"reactiveDateRangeFormControlName5\"\n      [ariaLabelForButton]=\"'button'\"\n      [aria-labelledby]=\"'datePickerDefaultLabelRange5'\"\n      [firstDayOfWeek]=\"0\"\n      [rangeSelectionSplit]=\"true\"\n    ></bb-input-datepicker-ui>\n  </div>\n</div>\n", components: [{ type: i2$a.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2$a.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i2$a.MaxDateValidatorDirective, selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i4.AsyncPipe, "date": i4.DatePipe } });
InputDatepickerShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputDatepickerShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-datepicker-ui-showcase',
                    templateUrl: './input-datepicker-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputDatepickerShowcaseModule {
}
InputDatepickerShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputDatepickerShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerShowcaseModule, declarations: [InputDatepickerShowcaseComponent], imports: [CommonModule, InputDatepickerModule, ReactiveFormsModule, FormsModule] });
InputDatepickerShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerShowcaseModule, imports: [[CommonModule, InputDatepickerModule, ReactiveFormsModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputDatepickerModule, ReactiveFormsModule, FormsModule],
                    declarations: [InputDatepickerShowcaseComponent],
                    entryComponents: [InputDatepickerShowcaseComponent],
                }]
        }] });

let InputEmailShowcaseComponent = class InputEmailShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            inputEmail: ['', Validators.required],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasEmailError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.email;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
};
InputEmailShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputEmailShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputEmailShowcaseComponent, selector: "bb-input-email-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\">\n      <label for=\"inputEmail\">\n        E-mail field <span class=\"bb-text-support bb-text-default\">(max {{ inputEmail?.maxLength }} characters)</span>\n      </label>\n      <bb-input-email-ui\n        #inputEmail\n        [id]=\"'inputEmail'\"\n        formControlName=\"inputEmail\"\n        [readonly]=\"false\"\n        [required]=\"true\"\n        placeholder=\"Please enter an email address...\"\n        [maxLength]=\"70\"\n        [aria-labelledby]=\"'inputEmailLabel'\"\n        [aria-describedby]=\"'inputEmailErrors'\"\n        [aria-invalid]=\"!isFieldValid('inputEmail')\"\n      >\n      </bb-input-email-ui>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputEmail')\" id=\"inputEmailErrors\">\n        <p *ngIf=\"hasRequiredError('inputEmail')\">Field is required.</p>\n        <p *ngIf=\"hasEmailError('inputEmail')\">Email format is incorrect.</p>\n      </bb-input-validation-message-ui>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2$b.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InputEmailShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputEmailShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-email-ui-showcase',
                    templateUrl: './input-email-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputEmailShowcaseModule {
}
InputEmailShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputEmailShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseModule, declarations: [InputEmailShowcaseComponent], imports: [CommonModule, InputEmailModule, InputValidationMessageModule, ReactiveFormsModule] });
InputEmailShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseModule, imports: [[CommonModule, InputEmailModule, InputValidationMessageModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputEmailModule, InputValidationMessageModule, ReactiveFormsModule],
                    declarations: [InputEmailShowcaseComponent],
                    entryComponents: [InputEmailShowcaseComponent],
                }]
        }] });

let InputInlineEditShowcaseComponent = class InputInlineEditShowcaseComponent {
    constructor() {
        this.editInlineModel = 'Here some text that can be modified';
        this.editInlineModelWithLoading = 'Default text';
        this.inlineEditState = InputInlineEditState.IDLE;
    }
    onCancel() { }
    onAccept(item) {
        this.editInlineModel = item;
    }
    onAcceptWithLoading(value) {
        this.inlineEditState = InputInlineEditState.LOADING;
        setTimeout(() => {
            this.inlineEditState = InputInlineEditState.IDLE;
            this.editInlineModelWithLoading = value;
        }, 5000);
    }
};
InputInlineEditShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputInlineEditShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputInlineEditShowcaseComponent, selector: "bb-input-inline-edit-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--md\">\n  <h3>Inline Edit</h3>\n  <bb-input-inline-edit-ui\n    [inputText]=\"editInlineModel\"\n    (cancel)=\"onCancel()\"\n    (accept)=\"onAccept($event)\"\n    [maxLength]=\"64\"\n    [minLength]=\"2\"\n    [required]=\"true\"\n    hint=\"This is visible to the whole company\"\n  >\n  </bb-input-inline-edit-ui>\n</div>\n<div class=\"bb-block bb-block--md\">\n  <h3>Inline edit with loading state</h3>\n  <bb-input-inline-edit-ui\n    [hasLoadingState]=\"true\"\n    [inputText]=\"editInlineModelWithLoading\"\n    (accept)=\"onAcceptWithLoading($event)\"\n    [maxLength]=\"64\"\n    [(state)]=\"inlineEditState\"\n    hint=\"This is visible to the whole company\"\n  >\n  </bb-input-inline-edit-ui>\n</div>\n", components: [{ type: i2$m.InputInlineEditComponent, selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }] });
InputInlineEditShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputInlineEditShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-inline-edit-ui-showcase',
                    templateUrl: './input-inline-edit-showcase.component.html',
                }]
        }] });

class InputInlineEditShowcaseModule {
}
InputInlineEditShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputInlineEditShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditShowcaseModule, declarations: [InputInlineEditShowcaseComponent], imports: [CommonModule, InputInlineEditModule] });
InputInlineEditShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditShowcaseModule, imports: [[CommonModule, InputInlineEditModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputInlineEditModule],
                    declarations: [InputInlineEditShowcaseComponent],
                    entryComponents: [InputInlineEditShowcaseComponent],
                }]
        }] });

let InputNumberShowcaseComponent = class InputNumberShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            inputNumber: ['', Validators.compose([Validators.required, Validators.min(2), Validators.max(20)])],
            inputNumberOnlyDigits: ['', Validators.compose([Validators.required, Validators.min(2), Validators.max(20)])],
            inputNumberNegative: ['', Validators.compose([Validators.required, Validators.min(2), Validators.max(20)])],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
    hasMinError(field) {
        return this.hasError(field, 'min');
    }
    hasMaxError(field) {
        return this.hasError(field, 'max');
    }
};
InputNumberShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputNumberShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputNumberShowcaseComponent, selector: "bb-input-number-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\">\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-text-bold\" id=\"numberFieldLabel1\">\n          Default Number field\n          <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n        </div>\n        <bb-input-number-ui\n          placeholder=\"Enter a number\"\n          formControlName=\"inputNumber\"\n          [min]=\"2\"\n          [max]=\"20\"\n          [required]=\"true\"\n          [aria-describedby]=\"'input-number-showcase-error'\"\n          [aria-labelledby]=\"'numberFieldLabel1'\"\n          [ariaLabel]=\"'Count'\"\n          [allowNonDigits]=\"true\"\n        >\n        </bb-input-number-ui>\n        <bb-input-validation-message-ui\n          [showErrors]=\"vForm?.touched && vForm?.get('inputNumber')?.errors\"\n          [id]=\"'input-number-showcase-error'\"\n        >\n          <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n          <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n          <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-text-bold\" id=\"numberFieldLabel2\">\n          Number field with only digits\n          <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n        </div>\n        <bb-input-number-ui\n          placeholder=\"Enter a number\"\n          formControlName=\"inputNumberOnlyDigits\"\n          [min]=\"2\"\n          [max]=\"20\"\n          [required]=\"true\"\n          [aria-describedby]=\"'input-number-showcase-error'\"\n          [aria-labelledby]=\"'numberFieldLabel2'\"\n          [ariaLabel]=\"'Count'\"\n        >\n        </bb-input-number-ui>\n        <bb-input-validation-message-ui\n          [showErrors]=\"vForm?.touched && vForm?.get('inputNumberOnlyDigits')?.errors\"\n          [id]=\"'input-number-showcase-error'\"\n        >\n          <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n          <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n          <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div>\n        <div class=\"bb-text-bold\" id=\"numberFieldLabel3\">\n          Number field with negative sign allowed\n          <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n        </div>\n        <bb-input-number-ui\n          placeholder=\"Enter a number\"\n          formControlName=\"inputNumberNegative\"\n          [min]=\"2\"\n          [max]=\"20\"\n          [required]=\"true\"\n          [aria-describedby]=\"'input-number-showcase-error'\"\n          [aria-labelledby]=\"'numberFieldLabel3'\"\n          [ariaLabel]=\"'Count'\"\n          [allowNegativeSign]=\"true\"\n        >\n        </bb-input-number-ui>\n        <bb-input-validation-message-ui\n          [showErrors]=\"vForm?.touched && vForm?.get('inputNumberNegative')?.errors\"\n          [id]=\"'input-number-showcase-error'\"\n        >\n          <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n          <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n          <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </form>\n  </div>\n  formgroup\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\" class=\"form-group is-valid\">\n      <div class=\"bb-text-bold\" id=\"numberFieldLabel\">\n        Number field\n        <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n      </div>\n      <bb-input-number-ui\n        placeholder=\"Enter a number\"\n        formControlName=\"inputNumber\"\n        [min]=\"2\"\n        [max]=\"20\"\n        [required]=\"true\"\n        [aria-describedby]=\"'input-number-showcase-error'\"\n        [aria-labelledby]=\"'numberFieldLabel'\"\n        [ariaLabel]=\"'Count'\"\n      >\n      </bb-input-number-ui>\n      <bb-input-validation-message-ui\n        [showErrors]=\"vForm?.touched && vForm?.get('inputNumber')?.errors\"\n        [id]=\"'input-number-showcase-error'\"\n      >\n        <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n        <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n        <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n      </bb-input-validation-message-ui>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2$c.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InputNumberShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputNumberShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-number-ui-showcase',
                    templateUrl: './input-number-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputNumberShowcaseModule {
}
InputNumberShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputNumberShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseModule, declarations: [InputNumberShowcaseComponent], imports: [CommonModule, InputNumberModule, InputValidationMessageModule, ReactiveFormsModule] });
InputNumberShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseModule, imports: [[CommonModule, InputNumberModule, InputValidationMessageModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputNumberModule, InputValidationMessageModule, ReactiveFormsModule],
                    declarations: [InputNumberShowcaseComponent],
                    entryComponents: [InputNumberShowcaseComponent],
                }]
        }] });

let InputPasswordShowcaseComponent = class InputPasswordShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.passwordForm = this.formBuilder.group({
            inputPassword: ['', Validators.required],
            inputPasswordNoIcon: ['', Validators.required],
        });
    }
    onSubmit(form) {
        console.log(form.value.inputPassword);
    }
    isFieldValid(fieldName) {
        var _a;
        const control = (_a = this.passwordForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
        return control && (control.valid || control.untouched);
    }
};
InputPasswordShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputPasswordShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputPasswordShowcaseComponent, selector: "bb-input-password-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"passwordForm\" novalidate (ngSubmit)=\"onSubmit(passwordForm)\">\n      <div class=\"bb-block bb-block--md\">\n        <bb-input-password-ui\n          label=\"Password\"\n          [aria-describedby]=\"'input-password-error'\"\n          formControlName=\"inputPassword\"\n          [showVisibilityControl]=\"true\"\n          [maxLength]=\"5\"\n          [required]=\"true\"\n          placeholder=\"Please enter password...\"\n          [autocomplete]=\"'current-password'\"\n        >\n        </bb-input-password-ui>\n        <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputPassword')\" [id]=\"'input-password-error'\">\n          <span>Password is required.</span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--md\">\n        <bb-input-password-ui\n          label=\"Password with no visibility button\"\n          [aria-describedby]=\"'input-password-error'\"\n          formControlName=\"inputPasswordNoIcon\"\n          [showVisibilityControl]=\"false\"\n          [maxLength]=\"5\"\n          [required]=\"true\"\n          placeholder=\"Please enter password...\"\n          [autocomplete]=\"'current-password'\"\n        >\n        </bb-input-password-ui>\n        <bb-input-validation-message-ui\n          [showErrors]=\"!isFieldValid('inputPasswordNoIcon')\"\n          [id]=\"'input-password-error'\"\n        >\n          <span>Password is required.</span>\n        </bb-input-validation-message-ui>\n      </div>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2$l.InputPasswordComponent, selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
InputPasswordShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputPasswordShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-password-ui-showcase',
                    templateUrl: './input-password-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputPasswordShowcaseModule {
}
InputPasswordShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputPasswordShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordShowcaseModule, declarations: [InputPasswordShowcaseComponent], imports: [CommonModule, InputPasswordModule, ReactiveFormsModule, InputValidationMessageModule] });
InputPasswordShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordShowcaseModule, imports: [[CommonModule, InputPasswordModule, ReactiveFormsModule, InputValidationMessageModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputPasswordModule, ReactiveFormsModule, InputValidationMessageModule],
                    declarations: [InputPasswordShowcaseComponent],
                    entryComponents: [InputPasswordShowcaseComponent],
                }]
        }] });

let InputPhoneShowcaseComponent = class InputPhoneShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.country = [
            {
                countryCode: '+91',
                isoCode: 'IN',
                countryName: 'India',
            },
        ];
        this.countries = [
            {
                countryCode: '+1',
                isoCode: 'US',
                countryName: 'United States',
            },
            {
                countryCode: '+31',
                isoCode: 'NL',
                countryName: 'Netherlands',
            },
            {
                countryCode: '+34',
                isoCode: 'NZ',
                countryName: 'New Zealand',
            },
            {
                countryCode: '+355',
                isoCode: 'AL',
                countryName: 'Albania',
            },
            {
                countryCode: '+91',
                isoCode: 'IN',
                countryName: 'India',
            },
            {
                countryCode: '+55',
                isoCode: 'BR',
                countryName: 'Brazil',
            },
            {
                countryCode: '+420',
                isoCode: 'CZ',
                countryName: 'Czech Republic',
            },
            {
                countryCode: '+49',
                isoCode: 'DE',
                countryName: 'Germany',
            },
        ];
    }
    ngOnInit() {
        this.vForm = this.formBuilder.group({
            phoneNumberCountryCode: 'CA',
            phoneNumber: '',
        });
        this.vForm.controls.phoneNumber.setValue('16045555555');
    }
};
InputPhoneShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputPhoneShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputPhoneShowcaseComponent, selector: "bb-input-phone-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <section class=\"showcase__section\">\n      <form [formGroup]=\"vForm\">\n        <div class=\"bb-stack\">\n          <div class=\"form-group bb-stack__item\">\n            <label for=\"countryCode\">Country Code</label>\n            <bb-input-text-ui\n              [id]=\"'countryCode'\"\n              [maxLength]=\"2\"\n              [size]=\"2\"\n              class=\"bb-block\"\n              [inputClassName]=\"'bb-text-align-center'\"\n              formControlName=\"phoneNumberCountryCode\"\n            ></bb-input-text-ui>\n          </div>\n          <div class=\"form-group bb-stack__item bb-stack__item--fill\">\n            <bb-input-phone-ui\n              [id]=\"'phoneNumber'\"\n              label=\"Phone Number\"\n              formControlName=\"phoneNumber\"\n              placeholder=\"Enter a phone number\"\n              [required]=\"true\"\n            >\n            </bb-input-phone-ui>\n          </div>\n        </div>\n        <p *ngIf=\"vForm\">\n          <strong>Formatted number: </strong><br />\n          {{ vForm.get('phoneNumberCountryCode')?.value }}\n          {{ vForm.get('phoneNumber')?.value | phoneNumber: vForm.get('phoneNumberCountryCode')?.value }}\n        </p>\n        <div class=\"bb-stack form-group bb-stack__item bb-stack__item--fill\">\n          <bb-input-phone-ui\n            [id]=\"'phoneNumber1'\"\n            label=\"Phone Number\"\n            formControlName=\"phoneNumber\"\n            placeholder=\"Enter a phone number\"\n            [required]=\"true\"\n            [enableCountryCode]=\"true\"\n            defaultCountryIsoCode=\"BR\"\n            [countryList]=\"countries\"\n          >\n          </bb-input-phone-ui>\n        </div>\n        <div class=\"bb-stack form-group bb-stack__item bb-stack__item--fill\">\n          <bb-input-phone-ui\n            [id]=\"'phoneNumber2'\"\n            label=\"Phone Number\"\n            formControlName=\"phoneNumber\"\n            placeholder=\"Enter a phone number\"\n            [required]=\"true\"\n            [enableCountryCode]=\"true\"\n            [countryList]=\"country\"\n          >\n          </bb-input-phone-ui>\n        </div>\n      </form>\n    </section>\n    <section class=\"showcase__section\">\n      <h1>Other examples</h1>\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Country Code</th>\n            <th scope=\"col\">Unformatted Number</th>\n            <th scope=\"col\">Formatted Number</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>CA</td>\n            <td>16045555555</td>\n            <td>{{ '16045555555' | phoneNumber: 'BT' }}</td>\n          </tr>\n          <tr>\n            <td>NL</td>\n            <td>0612345622</td>\n            <td>{{ '0612345622' | phoneNumber: 'NL' }}</td>\n          </tr>\n          <tr>\n            <td>GB</td>\n            <td>07744556677</td>\n            <td>{{ '07744556677' | phoneNumber: 'GB' }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </div>\n</div>\n", components: [{ type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i2$d.InputPhoneComponent, selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "phoneNumber": i1$I.PhoneNumberPipe } });
InputPhoneShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputPhoneShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-phone-ui-showcase',
                    templateUrl: './input-phone-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputPhoneShowcaseModule {
}
InputPhoneShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputPhoneShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseModule, declarations: [InputPhoneShowcaseComponent], imports: [CommonModule,
        InputPhoneModule,
        InputTextModule,
        InputValidationMessageModule,
        ReactiveFormsModule,
        PhoneNumberModule] });
InputPhoneShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseModule, imports: [[
            CommonModule,
            InputPhoneModule,
            InputTextModule,
            InputValidationMessageModule,
            ReactiveFormsModule,
            PhoneNumberModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        InputPhoneModule,
                        InputTextModule,
                        InputValidationMessageModule,
                        ReactiveFormsModule,
                        PhoneNumberModule,
                    ],
                    declarations: [InputPhoneShowcaseComponent],
                    entryComponents: [InputPhoneShowcaseComponent],
                }]
        }] });

let InputRadioGroupShowcaseComponent = class InputRadioGroupShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.paymentType = 'US_FOREIGN_WIRE';
        this.bank = 'ABN';
        this.radiosTemplateData = [
            {
                label: 'ABN AMRO Bank',
                value: 'ABN',
            },
            {
                label: 'ING Bank',
                value: 'ING',
            },
        ];
        this.radioGroupForm = this.formBuilder.group({
            accountType: [{ value: '', disabled: false }, Validators.required],
        });
    }
    onRadioTemplateFormSubmit(form) {
        console.log(form.value);
    }
};
InputRadioGroupShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputRadioGroupShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRadioGroupShowcaseComponent, selector: "bb-input-radio-group-ui-showcase", ngImport: i0, template: "<!-- Reactive form -->\n<div class=\"bb-block bb-block--xl\">\n  <form [formGroup]=\"radioGroupForm\">\n    <bb-input-radio-group-ui\n      [required]=\"true\"\n      aria-labelledby=\"bb-account-type\"\n      formControlName=\"accountType\"\n      [attr.data-role]=\"'radio-group'\"\n      [label]=\"'Regular'\"\n    >\n      <bb-input-radio-ui value=\"cr\" label=\"Label\"> </bb-input-radio-ui>\n      <bb-input-radio-ui value=\"dt\" label=\"Label 2\"> </bb-input-radio-ui>\n    </bb-input-radio-group-ui>\n  </form>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <!-- Template driven form -->\n  <form name=\"radiotemplateForm\" #f=\"ngForm\" (ngSubmit)=\"onRadioTemplateFormSubmit(f)\">\n    <bb-input-radio-group-ui [(ngModel)]=\"paymentType\" [required]=\"true\" name=\"test\" label=\"With custom label\">\n      <bb-input-radio-ui [labelTemplate]=\"customLabelTemplate1\" value=\"US_FOREIGN_WIRE1\"></bb-input-radio-ui>\n      <bb-input-radio-ui [labelTemplate]=\"customLabelTemplate2\" value=\"US_FOREIGN_WIRE2\"></bb-input-radio-ui>\n    </bb-input-radio-group-ui>\n  </form>\n\n  <ng-template #customLabelTemplate1>\n    <div>\n      <span class=\"bb-block\"> Label with sub text </span>\n      <span class=\"bb-text-support bb-text-default bb-subtitle\"> Help text goes here </span>\n    </div>\n  </ng-template>\n  <ng-template #customLabelTemplate2>\n    <div>\n      <span class=\"bb-block\"> Label with sub text </span>\n      <span class=\"bb-text-support bb-text-default bb-subtitle\">\n        Help text for the second label goes here and wraps when needed.\n      </span>\n    </div>\n  </ng-template>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <!-- Template driven form -->\n  <form name=\"radiotemplateForm\" #f=\"ngForm\" (ngSubmit)=\"onRadioTemplateFormSubmit(f)\">\n    <bb-input-radio-group-ui [(ngModel)]=\"bank\" [required]=\"true\" name=\"test\" label=\"With custom label and context\">\n      <bb-input-radio-ui\n        *ngFor=\"let radioData of radiosTemplateData\"\n        [labelTemplate]=\"customLabelTemplateWithData\"\n        [labelTemplateContext]=\"radioData.label\"\n        [value]=\"radioData.value\"\n      ></bb-input-radio-ui>\n    </bb-input-radio-group-ui>\n  </form>\n\n  <ng-template #customLabelTemplateWithData let-context=\"labelTemplateContext\">\n    <div>\n      <span class=\"bb-block\">\n        {{ context }}\n      </span>\n    </div>\n  </ng-template>\n  Selected Bank: {{ bank }}\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <bb-input-radio-group-ui\n    [required]=\"true\"\n    name=\"test\"\n    verticalAlign=\"top\"\n    label=\"With radio vertical aligned to the top\"\n  >\n    <bb-input-radio-ui\n      *ngFor=\"let radioData of radiosTemplateData\"\n      [labelTemplate]=\"customLabelTemplateVerticalAlignedTop\"\n      [labelTemplateContext]=\"radioData.label\"\n      [value]=\"radioData.value\"\n    ></bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n\n  <ng-template #customLabelTemplateVerticalAlignedTop let-context=\"labelTemplateContext\">\n    <div>\n      <span class=\"bb-block\">\n        {{ context }} <br />\n        more content <br />\n        even more content\n      </span>\n    </div>\n  </ng-template>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <bb-input-radio-group-ui\n    [required]=\"true\"\n    name=\"test\"\n    verticalAlign=\"bottom\"\n    label=\"With radio vertical aligned to the bottom\"\n  >\n    <bb-input-radio-ui\n      *ngFor=\"let radioData of radiosTemplateData\"\n      [labelTemplate]=\"customLabelTemplateVerticalAlignedBottom\"\n      [labelTemplateContext]=\"radioData.label\"\n      [value]=\"radioData.value\"\n    ></bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n\n  <ng-template #customLabelTemplateVerticalAlignedBottom let-context=\"labelTemplateContext\">\n    <div>\n      <span class=\"bb-block\">\n        {{ context }} <br />\n        more content <br />\n        even more content\n      </span>\n    </div>\n  </ng-template>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <bb-input-radio-group-ui\n    [required]=\"true\"\n    name=\"test\"\n    verticalAlign=\"middle\"\n    label=\"With radio vertical aligned to the middle\"\n  >\n    <bb-input-radio-ui\n      *ngFor=\"let radioData of radiosTemplateData\"\n      [labelTemplate]=\"customLabelTemplateVerticalAlignedMiddle\"\n      [labelTemplateContext]=\"radioData.label\"\n      [value]=\"radioData.value\"\n    ></bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n\n  <ng-template #customLabelTemplateVerticalAlignedMiddle let-context=\"labelTemplateContext\">\n    <div>\n      <span class=\"bb-block\">\n        {{ context }} <br />\n        more content <br />\n        even more content\n      </span>\n    </div>\n  </ng-template>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <form [formGroup]=\"radioGroupForm\">\n    <bb-input-radio-group-ui\n      [required]=\"true\"\n      aria-labelledby=\"bb-account-type\"\n      formControlName=\"accountType\"\n      label=\"Horizontal Regular\"\n      [horizontal]=\"true\"\n    >\n      <bb-input-radio-ui value=\"cr\" label=\"Label\"> </bb-input-radio-ui>\n      <bb-input-radio-ui value=\"dt\" label=\"Label\"> </bb-input-radio-ui>\n    </bb-input-radio-group-ui>\n  </form>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <bb-input-radio-group-ui [required]=\"true\" aria-labelledby=\"bb-account-type\" label=\"Some items disabled\">\n    <bb-input-radio-ui value=\"cr\" label=\"Label 1\"> </bb-input-radio-ui>\n    <bb-input-radio-ui value=\"dt\" [disabled]=\"true\" label=\"Label 2 (disabled)\"> </bb-input-radio-ui>\n    <bb-input-radio-ui value=\"aa\" [disabled]=\"true\" label=\"Label 3 (disabled)\"> </bb-input-radio-ui>\n    <bb-input-radio-ui value=\"xx\" label=\"Label 4\"> </bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <bb-input-radio-group-ui [required]=\"true\" aria-labelledby=\"bb-account-type\" label=\"All disabled\" [disabled]=\"true\">\n    <bb-input-radio-ui value=\"cr\" label=\"Label 1\"> </bb-input-radio-ui>\n    <bb-input-radio-ui value=\"dt\" label=\"Label 2\"> </bb-input-radio-ui>\n    <bb-input-radio-ui value=\"aa\" label=\"Label 3\"> </bb-input-radio-ui>\n    <bb-input-radio-ui value=\"xx\" label=\"Label 4\"> </bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n</div>\n", components: [{ type: i2$1.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$1.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$2.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
InputRadioGroupShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputRadioGroupShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-radio-group-ui-showcase',
                    templateUrl: './input-radio-group-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputRadioGroupShowcaseModule {
}
InputRadioGroupShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputRadioGroupShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupShowcaseModule, declarations: [InputRadioGroupShowcaseComponent], imports: [CommonModule, InputRadioGroupModule, ReactiveFormsModule, FormsModule] });
InputRadioGroupShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupShowcaseModule, imports: [[CommonModule, InputRadioGroupModule, ReactiveFormsModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputRadioGroupModule, ReactiveFormsModule, FormsModule],
                    declarations: [InputRadioGroupShowcaseComponent],
                    entryComponents: [InputRadioGroupShowcaseComponent],
                }]
        }] });

let InputRangeShowcaseComponent = class InputRangeShowcaseComponent {
    constructor(fb) {
        this.fb = fb;
        this.form = this.fb.group({
            range1: this.fb.group({
                min: [-10, Validators.min(10)],
                max: [100],
            }, {
                validator: (g) => {
                    const { errors } = g.get('min');
                    return errors ? Object.assign({}, errors) : null;
                },
            }),
            range2: this.fb.group({
                min: [30],
                max: [33, Validators.max(40)],
            }, {
                validator: (g) => {
                    const { errors } = g.get('max');
                    return errors ? Object.assign({}, errors) : null;
                },
            }),
            range3: this.fb.group({
                min: [2, Validators.min(0)],
                max: [5, Validators.max(10)],
            }, {
                validator: (g) => {
                    const min = g.get('min').errors;
                    const max = g.get('max').errors;
                    return min || max ? Object.assign(Object.assign({}, min), max) : null;
                },
            }),
        });
        this.range4Min = 5;
        this.range4Max = 7;
    }
};
InputRangeShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputRangeShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeShowcaseComponent, selector: "bb-input-range-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <ng-container [formGroup]=\"form\">\n      <div class=\"form-group\">\n        <h3>Range 1</h3>\n        <div class=\"sr-only\" id=\"input-range-label-one\">Two inputs for setting range between two values</div>\n        <div bbInputRange class=\"bb-stack bb-stack--align-top\" formGroupName=\"range1\">\n          <div class=\"bb-stack__item\">\n            <bb-input-number-ui\n              [aria-describedby]=\"'input-range-error-one-min'\"\n              [aria-labelledby]=\"'input-range-label-one'\"\n              bbInputRangeMin\n              label=\"Minimum\"\n              formControlName=\"min\"\n            ></bb-input-number-ui>\n            <bb-input-validation-message-ui\n              *ngIf=\"form.get('range1')?.errors as errors\"\n              [showErrors]=\"form.get('range1')?.touched\"\n              [id]=\"'input-range-error-one-min'\"\n            >\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\" *ngIf=\"errors?.min as min\">Minimum value is {{ min.min }}</div>\n              </div>\n            </bb-input-validation-message-ui>\n          </div>\n          <div>\n            <bb-input-number-ui\n              [aria-describedby]=\"'input-range-error-one-max'\"\n              bbInputRangeMax\n              label=\"Maximum\"\n              formControlName=\"max\"\n            ></bb-input-number-ui>\n            <bb-input-validation-message-ui\n              *ngIf=\"form.get('range1')?.errors as errors\"\n              [showErrors]=\"form.get('range1')?.touched\"\n              [id]=\"'input-range-error-one-max'\"\n            >\n              <div class=\"bb-stack\">\n                <div *ngIf=\"errors?.max as max\">Maximum value is {{ max.max }}</div>\n              </div>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <h3>Range 2</h3>\n        <div bbInputRange class=\"bb-stack bb-stack--align-top\" formGroupName=\"range2\">\n          <div class=\"bb-stack__item\">\n            <bb-input-number-ui\n              [aria-describedby]=\"'input-range-error-two-min'\"\n              bbInputRangeMin\n              label=\"Minimum\"\n              formControlName=\"min\"\n            ></bb-input-number-ui>\n            <bb-input-validation-message-ui\n              *ngIf=\"form.get('range2')?.errors as errors\"\n              [showErrors]=\"form.get('range2')?.touched\"\n              [id]=\"'input-range-error-two-min'\"\n            >\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\" *ngIf=\"errors?.min as min\">Minimum value is {{ min.min }}</div>\n              </div>\n            </bb-input-validation-message-ui>\n          </div>\n          <div>\n            <bb-input-number-ui\n              [aria-describedby]=\"'input-range-error-two-max'\"\n              bbInputRangeMax\n              label=\"Maximum\"\n              formControlName=\"max\"\n            ></bb-input-number-ui>\n            <bb-input-validation-message-ui\n              *ngIf=\"form.get('range2')?.errors as errors\"\n              [showErrors]=\"form.get('range2')?.touched\"\n              [id]=\"'input-range-error-two-max'\"\n            >\n              <div class=\"bb-stack\">\n                <div *ngIf=\"errors?.max as max\">Maximum value is {{ max.max }}</div>\n              </div>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <div class=\"form-group\">\n      <h3>Range 3</h3>\n      <div bbInputRange class=\"bb-stack bb-stack--align-top\">\n        <div class=\"bb-stack__item\">\n          <bb-input-number-ui\n            [aria-describedby]=\"'input-range-error-three-min'\"\n            bbInputRangeMin\n            [formControl]=\"form.get('range3')?.get('min')\"\n            label=\"Minimum\"\n          ></bb-input-number-ui>\n          <bb-input-validation-message-ui\n            *ngIf=\"form.get('range3')?.errors as errors\"\n            [showErrors]=\"form.get('range3')?.touched\"\n            [id]=\"'input-range-error-three-min'\"\n          >\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\" *ngIf=\"errors?.min as min\">Minimum value is {{ min.min }}</div>\n            </div>\n          </bb-input-validation-message-ui>\n        </div>\n        <div>\n          <bb-input-number-ui\n            [aria-describedby]=\"'input-range-error-three-max'\"\n            bbInputRangeMax\n            [formControl]=\"form.get('range3')?.get('max')\"\n            label=\"Maximum\"\n          ></bb-input-number-ui>\n          <bb-input-validation-message-ui\n            *ngIf=\"form.get('range3')?.errors as errors\"\n            [showErrors]=\"form.get('range3')?.touched\"\n            [id]=\"'input-range-error-three-max'\"\n          >\n            <div class=\"bb-stack\">\n              <div *ngIf=\"errors?.max as max\">Maximum value is {{ max.max }}</div>\n            </div>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"bb-block--md\">\n      <bb-button-ui (click)=\"form.disable()\" *ngIf=\"form.enabled; else enable\">Disable</bb-button-ui>\n      <ng-template #enable>\n        <bb-button-ui (click)=\"form?.enable()\">Enable</bb-button-ui>\n      </ng-template>\n    </div>\n\n    <div class=\"form-group\">\n      <h3>Range 4</h3>\n      <div bbInputRange class=\"bb-stack\">\n        <bb-input-number-ui\n          class=\"bb-stack__item\"\n          [bbInputRangeMin]=\"form.get('range3')?.value?.min\"\n          [(ngModel)]=\"range4Min\"\n          label=\"Range with template driven form (min)\"\n        ></bb-input-number-ui>\n        <bb-input-number-ui\n          [bbInputRangeMax]=\"form.get('range3')?.value?.max\"\n          [(ngModel)]=\"range4Max\"\n          label=\"Range with template driven form (max)\"\n        ></bb-input-number-ui>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2$c.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i2$5.ButtonComponent, selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }], directives: [{ type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4$1.InputRangeDirective, selector: "[bbInputRange]" }, { type: i1$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i4$1.InputRangeMinDirective, selector: "bb-input-number-ui[bbInputRangeMin]", inputs: ["bbInputRangeMin"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4$1.InputRangeMaxDirective, selector: "bb-input-number-ui[bbInputRangeMax]", inputs: ["bbInputRangeMax"] }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
InputRangeShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputRangeShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-range-ui-showcase',
                    templateUrl: './input-range-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputRangeShowcaseModule {
}
InputRangeShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputRangeShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeShowcaseModule, declarations: [InputRangeShowcaseComponent], imports: [CommonModule,
        InputRangeModule,
        InputNumberModule,
        ReactiveFormsModule,
        InputValidationMessageModule,
        ButtonModule,
        FormsModule] });
InputRangeShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeShowcaseModule, imports: [[
            CommonModule,
            InputRangeModule,
            InputNumberModule,
            ReactiveFormsModule,
            InputValidationMessageModule,
            ButtonModule,
            FormsModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        InputRangeModule,
                        InputNumberModule,
                        ReactiveFormsModule,
                        InputValidationMessageModule,
                        ButtonModule,
                        FormsModule,
                    ],
                    declarations: [InputRangeShowcaseComponent],
                    entryComponents: [InputRangeShowcaseComponent],
                }]
        }] });

let InputTextShowcaseComponent = class InputTextShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.test = 'egy';
        this.vForm = this.formBuilder.group({
            inputText: [''],
            inputText2: [''],
            inputText3: [''],
            inputText4: [''],
        });
    }
    isFieldValid(fieldName) {
        var _a;
        const control = (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        return control && (control.valid || control.untouched);
    }
};
InputTextShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputTextShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputTextShowcaseComponent, selector: "bb-input-text-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\">\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputText'\"\n          [attr.data-role]=\"'input-text'\"\n          label=\"Enabled text input label\"\n          formControlName=\"inputText\"\n          [readonly]=\"false\"\n          [aria-invalid]=\"vForm && vForm.invalid\"\n          placeholder=\"Please enter a value, at most 35 chars...\"\n          [maxLength]=\"35\"\n          [autocomplete]=\"'name'\"\n        >\n        </bb-input-text-ui>\n      </p>\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputTextDisabled'\"\n          [attr.data-role]=\"'input-text-disabled'\"\n          label=\"Disabled text input label\"\n          formControlName=\"inputText2\"\n          [disabled]=\"true\"\n          placeholder=\"Disabled input\"\n        >\n        </bb-input-text-ui>\n      </p>\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputTextMask3'\"\n          [attr.data-role]=\"'input-text'\"\n          label=\"Text input with a 5-digit mask '00000'\"\n          formControlName=\"inputText3\"\n          [readonly]=\"false\"\n          [aria-invalid]=\"vForm && vForm.invalid\"\n          [mask]=\"'0{5}'\"\n          [maskValidator]=\"true\"\n          placeholder=\"Only up to 5 digits can be entered (e.g., zipcode)\"\n        >\n        </bb-input-text-ui>\n      </p>\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputTextMask4'\"\n          [attr.data-role]=\"'input-text'\"\n          label=\"Text input with a phone mask '(000) 000-0000'\"\n          formControlName=\"inputText4\"\n          [readonly]=\"false\"\n          [aria-invalid]=\"vForm && vForm.invalid\"\n          [mask]=\"'(000) 000-0000'\"\n          placeholder=\"Only 10 digits can be entered, with/without separators\"\n        >\n        </bb-input-text-ui>\n      </p>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
InputTextShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputTextShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-text-ui-showcase',
                    templateUrl: './input-text-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputTextShowcaseModule {
}
InputTextShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputTextShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseModule, declarations: [InputTextShowcaseComponent], imports: [CommonModule, InputTextModule, ReactiveFormsModule] });
InputTextShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseModule, imports: [[CommonModule, InputTextModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputTextModule, ReactiveFormsModule],
                    declarations: [InputTextShowcaseComponent],
                    entryComponents: [InputTextShowcaseComponent],
                }]
        }] });

let InputTimepickerShowcaseComponent = class InputTimepickerShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            time: [''],
        });
        this.timeModel = '';
        this.min = '13:00:00';
        this.max = '14:30:00';
    }
    hasError(type) {
        const time = this.vForm.get('time');
        if (time !== null && time.errors) {
            return !!time.errors[type];
        }
        return false;
    }
    showErrors() {
        const time = this.vForm.get('time');
        if (time !== null) {
            return time.errors && !time.valid;
        }
        return null;
    }
};
InputTimepickerShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputTimepickerShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputTimepickerShowcaseComponent, selector: "bb-input-timepicker-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>Timepicker with 10 minute step and validation errors</h2>\n  <form [formGroup]=\"vForm\">\n    <bb-input-timepicker-ui\n      id=\"timePicker-validation\"\n      [aria-describedby]=\"'input-timepicker-example-error'\"\n      [readonly]=\"false\"\n      [minuteStep]=\"10\"\n      formControlName=\"time\"\n      [min]=\"min\"\n      [max]=\"max\"\n    >\n    </bb-input-timepicker-ui>\n\n    <bb-input-validation-message-ui [showErrors]=\"showErrors()\" [id]=\"'input-timepicker-example-error'\">\n      <span *ngIf=\"hasError('minTime')\">Time should be after {{ min }}</span>\n      <span *ngIf=\"hasError('maxTime')\">Time should not exceed {{ max }}</span>\n      <span *ngIf=\"hasError('minMaxTime')\">Time should be between {{ min }} and {{ max }}</span>\n    </bb-input-validation-message-ui>\n  </form>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Readonly timepicker</h2>\n  <bb-input-timepicker-ui id=\"timepicker-readonly\" [readonly]=\"true\"></bb-input-timepicker-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Disabled timepicker</h2>\n  <bb-input-timepicker-ui id=\"timepicker-readonly\" [disabled]=\"true\"></bb-input-timepicker-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Small timepicker</h2>\n  <bb-input-timepicker-ui id=\"timepicker-readonly-small\" [size]=\"'small'\"></bb-input-timepicker-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Timepicker with seconds and meridian</h2>\n  <bb-input-timepicker-ui\n    id=\"timepicker-meridian\"\n    [readonly]=\"false\"\n    [seconds]=\"true\"\n    clock=\"12h\"\n    [(ngModel)]=\"timeModel\"\n    [min]=\"min\"\n  >\n  </bb-input-timepicker-ui>\n</div>\n", components: [{ type: i2$p.InputTimepickerComponent, selector: "bb-input-timepicker-ui", inputs: ["hourStep", "clock", "minuteStep", "readonly", "seconds", "secondStep", "min", "max", "autocomplete"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
InputTimepickerShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
    /**
     * @name InputTimepickerShowcaseComponent
     *
     * @description
     * Component that displays multiple examples with the timepicker component.
     */
], InputTimepickerShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-timepicker-ui-showcase',
                    templateUrl: './input-timepicker-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputTimepickerShowcaseModule {
}
InputTimepickerShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputTimepickerShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerShowcaseModule, declarations: [InputTimepickerShowcaseComponent], imports: [CommonModule, InputTimepickerModule, InputValidationMessageModule, ReactiveFormsModule, FormsModule] });
InputTimepickerShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerShowcaseModule, imports: [[CommonModule, InputTimepickerModule, InputValidationMessageModule, ReactiveFormsModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTimepickerShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputTimepickerModule, InputValidationMessageModule, ReactiveFormsModule, FormsModule],
                    declarations: [InputTimepickerShowcaseComponent],
                    entryComponents: [InputTimepickerShowcaseComponent],
                }]
        }] });

let InputValidationMessageShowcaseComponent = class InputValidationMessageShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            name: ['', Validators.compose([Validators.required, Validators.minLength(5)])],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
    hasLengthError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.minlength;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
};
InputValidationMessageShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputValidationMessageShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputValidationMessageShowcaseComponent, selector: "bb-input-validation-message-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <bb-input-text-ui\n        label=\"Validation on Blur\"\n        formControlName=\"name\"\n        aria-describedby=\"input-validation-example-error\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('name')\" [id]=\"'input-validation-example-error'\">\n        <span *ngIf=\"hasRequiredError('name')\"> Field is required. </span>\n        <span *ngIf=\"hasLengthError('name')\"> Field has minlength of 5. </span>\n      </bb-input-validation-message-ui>\n    </div>\n  </div>\n</form>\n", components: [{ type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InputValidationMessageShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputValidationMessageShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-validation-message-ui-showcase',
                    templateUrl: './input-validation-message-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputValidationMessageShowcaseModule {
}
InputValidationMessageShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputValidationMessageShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseModule, declarations: [InputValidationMessageShowcaseComponent], imports: [CommonModule, InputValidationMessageModule, ReactiveFormsModule, InputTextModule] });
InputValidationMessageShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseModule, imports: [[CommonModule, InputValidationMessageModule, ReactiveFormsModule, InputTextModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, InputValidationMessageModule, ReactiveFormsModule, InputTextModule],
                    declarations: [InputValidationMessageShowcaseComponent],
                    entryComponents: [InputValidationMessageShowcaseComponent],
                }]
        }] });

let ItemLogShowcaseComponent = class ItemLogShowcaseComponent {
    constructor() {
        this.pendingRecords = [
            {
                userFullName: 'Robin Green',
                status: 'APPROVED',
                createdAt: '2018-01-22T13:44:02Z',
            },
        ];
        this.rejectedRecords = [
            {
                userFullName: 'Green Goblet',
                status: 'REJECTED',
                createdAt: '2018-01-23T13:44:02Z',
                reason: 'Limit exceeded',
            },
            {
                userFullName: 'Robin Green',
                status: 'APPROVED',
                createdAt: '2018-01-22T13:44:02Z',
            },
        ];
        this.successRecords = [
            {
                userFullName: 'Green Goblet',
                status: 'APPROVED',
                createdAt: '2018-01-23T13:44:02Z',
            },
            {
                userFullName: 'Robin Green',
                status: 'APPROVED',
                createdAt: '2018-01-22T13:44:02Z',
            },
        ];
    }
};
ItemLogShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ItemLogShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ItemLogShowcaseComponent, selector: "bb-item-log-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>Pending item log</h2>\n  <bb-item-log-ui [records]=\"pendingRecords\" [isPending]=\"true\"></bb-item-log-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Success item log</h2>\n  <bb-item-log-ui [records]=\"successRecords\"></bb-item-log-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Rejected item log</h2>\n  <bb-item-log-ui [records]=\"rejectedRecords\"></bb-item-log-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Custom item log with description</h2>\n  <bb-item-log-ui [records]=\"rejectedRecords\">\n    <ng-template bbItemLogRecord let-record>\n      <bb-icon-ui\n        class=\"bb-item-log-record__icon\"\n        size=\"md\"\n        [name]=\"record?.status === 'REJECTED' ? 'cancel' : 'success'\"\n        [color]=\"record?.status === 'REJECTED' ? 'danger' : 'success'\"\n      ></bb-icon-ui>\n      <div class=\"bb-item-log-record__details\">\n        <span class=\"bb-text-bold\">\n          {{ record?.status | titlecase }}\n        </span>\n        <ng-container> by {{ record?.userFullName }}</ng-container>\n        <div class=\"bb-item-log-record__time\">\n          <time> {{ record?.createdAt | date }}</time>\n          <ng-container> at</ng-container>\n          <time> {{ record?.createdAt | date: 'shortTime' }}</time>\n        </div>\n        <div class=\"bb-stack\" *ngIf=\"record?.reason\">\n          <bb-icon-ui color=\"secondary\" name=\"forum\" size=\"md\" class=\"bb-stack__item\"></bb-icon-ui>\n          <div>\n            User hasn\u2019t posted all his/her details to complete the payment. <br />\n            Unfortunately, we will need to request more payment details now <br />\n            to approve this transaction.\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-item-log-ui>\n</div>\n", components: [{ type: i1$L.ItemLogComponent, selector: "bb-item-log-ui", inputs: ["isPending", "records"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$L.ItemLogRecordDirective, selector: "ng-template[bbItemLogRecord]" }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "titlecase": i4.TitleCasePipe, "date": i4.DatePipe } });
ItemLogShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ItemLogShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-item-log-ui-showcase',
                    templateUrl: './item-log-showcase.component.html',
                }]
        }] });

class ItemLogShowcaseModule {
}
ItemLogShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ItemLogShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogShowcaseModule, declarations: [ItemLogShowcaseComponent], imports: [CommonModule, ItemLogModule, IconModule] });
ItemLogShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogShowcaseModule, imports: [[CommonModule, ItemLogModule, IconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ItemLogShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ItemLogModule, IconModule],
                    declarations: [ItemLogShowcaseComponent],
                    entryComponents: [ItemLogShowcaseComponent],
                }]
        }] });

let ListMultipleSelectShowcaseComponent = class ListMultipleSelectShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.listMultipleSelectItemsConfig = {
            'List Item 1': {},
            'List Item 2': {
                items: {
                    q2: {
                        icon: 'warning',
                    },
                },
            },
        };
        this.vForm = this.formBuilder.group({
            listMultipleSelect: this.formBuilder.group({
                'List item 1': true,
                'List item 2': this.formBuilder.group({
                    'Sub item 1': false,
                    'Sub item 2': true,
                    'Sub item 3': this.formBuilder.group({
                        'Sub sub item 1': { value: true, disabled: false },
                        'Disabled sub item 2': { value: false, disabled: true },
                    }),
                }),
            }),
        });
    }
    onListMultipleSelectClearAll($event) {
        $event.preventDefault();
        if (this.vForm) {
            this.vForm.controls['listMultipleSelect'].patchValue({
                i1: false,
                i2: false,
                i3: {
                    q1: false,
                    q2: false,
                },
            });
        }
    }
};
ListMultipleSelectShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ListMultipleSelectShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ListMultipleSelectShowcaseComponent, selector: "bb-list-multiple-select-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-list-multiple-select-ui\n    formGroupName=\"listMultipleSelect\"\n    [config]=\"listMultipleSelectItemsConfig\"\n    aria-label=\"List multiple select\"\n  >\n    <ng-template bbListMultipleSelectAction>\n      <a href=\"\" (click)=\"onListMultipleSelectClearAll($event)\">Clear All</a>\n    </ng-template>\n  </bb-list-multiple-select-ui>\n</form>\n", components: [{ type: i2$e.ListMultipleSelectComponent, selector: "bb-list-multiple-select-ui", inputs: ["config"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2$e.ListMultipleSelectActionDirective, selector: "ng-template[bbListMultipleSelectAction]" }] });
ListMultipleSelectShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ListMultipleSelectShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-list-multiple-select-ui-showcase',
                    templateUrl: './list-multiple-select-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class ListMultipleSelectShowcaseModule {
}
ListMultipleSelectShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ListMultipleSelectShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseModule, declarations: [ListMultipleSelectShowcaseComponent], imports: [CommonModule, ListMultipleSelectModule, ReactiveFormsModule] });
ListMultipleSelectShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseModule, imports: [[CommonModule, ListMultipleSelectModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ListMultipleSelectModule, ReactiveFormsModule],
                    declarations: [ListMultipleSelectShowcaseComponent],
                    entryComponents: [ListMultipleSelectShowcaseComponent],
                }]
        }] });

let LoadButtonShowcaseComponent = class LoadButtonShowcaseComponent {
    constructor() {
        this.showLoadingIndicator = false;
        this.isButtonLoading = false;
        this.isLoadMore = [false, false, false];
        this.loadMoreParams = [{ from: 0 }, { from: 0 }, { from: 0 }];
        this.localDisabled = false;
    }
    onLoadButtonPress() {
        if (this.isButtonLoading) {
            return;
        }
        this.isButtonLoading = true;
        setTimeout(() => {
            this.isButtonLoading = false;
        }, 1500);
    }
    setLoadingParams(params) {
        this.isLoadMore[0] = true;
        this.loadMoreParams[0] = params;
        window.setTimeout(() => {
            this.isLoadMore[0] = false;
        }, 1500);
    }
    setLoadingParamsWithIcon(params) {
        this.isLoadMore[1] = true;
        this.loadMoreParams[1] = params;
        window.setTimeout(() => {
            this.isLoadMore[1] = false;
        }, 1500);
    }
    setLoadingParamsOnlyIcon(params) {
        this.isLoadMore[2] = true;
        this.loadMoreParams[2] = params;
        window.setTimeout(() => {
            this.isLoadMore[2] = false;
        }, 1500);
    }
};
LoadButtonShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadButtonShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadButtonShowcaseComponent, selector: "bb-load-button-ui-showcase", ngImport: i0, template: "<div class=\"bb-toolbar\">\n  <div class=\"text-center\">\n    <bb-load-button-ui\n      color=\"primary\"\n      [isLoading]=\"isLoadMore[0]\"\n      [size]=\"8\"\n      [from]=\"loadMoreParams[0]?.from\"\n      [totalCount]=\"48\"\n      (paramChange)=\"setLoadingParams($event)\"\n      class=\"m-3\"\n      [disabled]=\"localDisabled\"\n    >\n      Load more\n    </bb-load-button-ui>\n    <p class=\"mt-3\">Counter (max 5): {{ loadMoreParams[0]?.from }}</p>\n    <button (click)=\"localDisabled = !localDisabled\">disable load button</button>\n  </div>\n  <div class=\"text-center\">\n    <bb-load-button-ui\n      class=\"m-3\"\n      color=\"primary\"\n      [isLoading]=\"isLoadMore[1]\"\n      [size]=\"8\"\n      [from]=\"loadMoreParams[1]?.from\"\n      [totalCount]=\"48\"\n      (paramChange)=\"setLoadingParamsWithIcon($event)\"\n    >\n      <span>Download file</span>\n      <bb-icon-ui name=\"download\" size=\"lg\" cropped></bb-icon-ui>\n    </bb-load-button-ui>\n    <p class=\"mt-3\">Counter (max 5): {{ loadMoreParams[1]?.from }}</p>\n  </div>\n  <div class=\"text-center\">\n    <bb-load-button-ui\n      class=\"m-3\"\n      color=\"primary\"\n      [isLoading]=\"isLoadMore[2]\"\n      [size]=\"8\"\n      [from]=\"loadMoreParams[2]?.from\"\n      [totalCount]=\"48\"\n      (paramChange)=\"setLoadingParamsOnlyIcon($event)\"\n      [circle]=\"true\"\n    >\n      <bb-icon-ui name=\"search\" size=\"lg\"></bb-icon-ui>\n    </bb-load-button-ui>\n    <p class=\"mt-3\">Counter (max 5): {{ loadMoreParams[2]?.from }}</p>\n  </div>\n</div>\n", components: [{ type: i1$i.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }] });
LoadButtonShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], LoadButtonShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-load-button-ui-showcase',
                    templateUrl: './load-button-showcase.component.html',
                }]
        }] });

class LoadButtonShowcaseModule {
}
LoadButtonShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LoadButtonShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonShowcaseModule, declarations: [LoadButtonShowcaseComponent], imports: [CommonModule, LoadButtonModule, IconModule] });
LoadButtonShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonShowcaseModule, imports: [[CommonModule, LoadButtonModule, IconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LoadButtonModule, IconModule],
                    declarations: [LoadButtonShowcaseComponent],
                    entryComponents: [LoadButtonShowcaseComponent],
                }]
        }] });

let LoadingIndicatorShowcaseComponent = class LoadingIndicatorShowcaseComponent {
    constructor() {
        this.loadingIndicators = [
            {
                title: 'Small',
                size: 'sm',
                text: null,
            },
            {
                title: 'Medium',
                size: 'md',
                text: null,
            },
            {
                title: 'Large',
                size: 'lg',
                text: null,
            },
            {
                title: 'Page loader',
                size: 'lg',
                text: 'Loading...',
            },
        ];
    }
};
LoadingIndicatorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadingIndicatorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadingIndicatorShowcaseComponent, selector: "bb-loading-indicator-ui-showcase", ngImport: i0, template: "<ng-container *ngFor=\"let loadingIndicator of loadingIndicators\">\n  <div class=\"bb-block bb-block--lg\">\n    <h4 class=\"bb-block bb-block--lg\">{{ loadingIndicator.title }}</h4>\n    <bb-loading-indicator-ui\n      [loaderSize]=\"loadingIndicator.size\"\n      [text]=\"loadingIndicator.text\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-container>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 class=\"bb-block bb-block--lg\">Inline</h4>\n  <p>\n    Some text\n    <bb-loading-indicator-ui [inline]=\"true\" loaderSize=\"sm\"></bb-loading-indicator-ui>\n  </p>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 class=\"bb-block bb-block--lg\">Inline with text</h4>\n  <p>\n    Lorem ipsum\n    <bb-loading-indicator-ui [inline]=\"true\" loaderSize=\"sm\" text=\"Loading...\"></bb-loading-indicator-ui>\n  </p>\n</div>\n", components: [{ type: i1$j.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
LoadingIndicatorShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], LoadingIndicatorShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loading-indicator-ui-showcase',
                    templateUrl: './loading-indicator-showcase.component.html',
                }]
        }] });

class LoadingIndicatorShowcaseModule {
}
LoadingIndicatorShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LoadingIndicatorShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorShowcaseModule, declarations: [LoadingIndicatorShowcaseComponent], imports: [CommonModule, LoadingIndicatorModule] });
LoadingIndicatorShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorShowcaseModule, imports: [[CommonModule, LoadingIndicatorModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LoadingIndicatorModule],
                    declarations: [LoadingIndicatorShowcaseComponent],
                    entryComponents: [LoadingIndicatorShowcaseComponent],
                }]
        }] });

let LogoShowcaseComponent = class LogoShowcaseComponent {
};
LogoShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LogoShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LogoShowcaseComponent, selector: "bb-logo-ui-showcase", ngImport: i0, template: "<h4>Emblem</h4>\n<div class=\"bb-stack bb-block bb-block--xl row\">\n  <bb-logo-ui type=\"emblem\" class=\"bb-stack__item col-2\"></bb-logo-ui>\n  <span>Backbase</span>\n</div>\n<h4>Full</h4>\n<div class=\"bb-stack bb-block bb-block--xl\">\n  <bb-logo-ui type=\"full\" class=\"bb-stack__item\"></bb-logo-ui>\n</div>\n<h4>Inverse</h4>\n<div class=\"bb-stack row\">\n  <bb-logo-ui type=\"emblem\" [isInverse]=\"true\" class=\"bb-stack__item col-2\"></bb-logo-ui>\n  <span>Backbase</span>\n</div>\n", components: [{ type: i1$k.LogoComponent, selector: "bb-logo-ui", inputs: ["type", "isInverse"] }] });
LogoShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], LogoShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-logo-ui-showcase',
                    templateUrl: './logo-showcase.component.html',
                }]
        }] });

class LogoShowcaseModule {
}
LogoShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LogoShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoShowcaseModule, declarations: [LogoShowcaseComponent], imports: [CommonModule, LogoModule] });
LogoShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoShowcaseModule, imports: [[CommonModule, LogoModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LogoModule],
                    declarations: [LogoShowcaseComponent],
                    entryComponents: [LogoShowcaseComponent],
                }]
        }] });

let ModalShowcaseComponent = class ModalShowcaseComponent {
    constructor() {
        this.console = console;
        this.smallModal = false;
        this.defaultModal = false;
        this.largeModal = false;
        this.passCodeModal = false;
        this.actionModal = false;
        this.threeBtnModal = false;
        this.leftHeaderModal = false;
        this.scrollableModal = false;
        this.longModal = false;
        this.passwordSize = 5;
        this.charsArray = Array.from(Array(this.passwordSize).keys());
    }
};
ModalShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ModalShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModalShowcaseComponent, selector: "bb-modal-ui-showcase", ngImport: i0, template: "<div class=\"bb-list\">\n  <div class=\"bb-list__item\">\n    <h2>Accessibility of modal header via <code>bb-modal-header-ui</code></h2>\n    <p>\n      The modal header is accessible because <code>bb-modal-header-ui</code> is automatically detected and configured\n      via ARIA attributes by <code>bb-modal-ui</code>.\n    </p>\n    <button bbButton (click)=\"actionModal = true\">Open modal with call to action</button>\n  </div>\n  <div class=\"bb-list__item\">\n    <h2>Accessibility of modal header via <code>aria-lablledby</code></h2>\n    <p>\n      Modal with custom header, that is made accessible using the <code>aria-lablledby</code> property of\n      <code>bb-modal-ui</code>.\n    </p>\n    <button bbButton (click)=\"passCodeModal = true\" [attr.data-role]=\"'modal-with-password'\">\n      Open modal for entering passcode\n    </button>\n  </div>\n  <div class=\"bb-list__item\">\n    <h2>Icon placement to the left in the header</h2>\n    <button bbButton (click)=\"leftHeaderModal = true\" [attr.data-role]=\"'modal-with-header-icon'\">\n      Modal with left header icon\n    </button>\n  </div>\n  <div class=\"bb-list__item\">\n    <h2>Modal with three button for call to action</h2>\n    <button bbButton (click)=\"threeBtnModal = true\" [attr.data-role]=\"'modal-with-3-buttons'\">\n      Open modal with three buttons\n    </button>\n  </div>\n  <div class=\"bb-list__item\">\n    <h2>Modal with big height</h2>\n    <button bbButton (click)=\"longModal = true\" [attr.data-role]=\"'modal-long'\">Open modal with big height</button>\n  </div>\n  <div class=\"bb-list__item\">\n    <h2>Scrollable modal</h2>\n    <button bbButton (click)=\"scrollableModal = true\" [attr.data-role]=\"'modal-scrollable'\">\n      Open scrollable modal\n    </button>\n  </div>\n  <div class=\"bb-list__item\">\n    <h2>Size variants</h2>\n    <div class=\"bb-toolbar\">\n      <button class=\"bb-toolbar__item\" bbButton (click)=\"smallModal = true\" [attr.data-role]=\"'small-modal'\">\n        Open small modal\n      </button>\n      <button class=\"bb-toolbar__item\" bbButton (click)=\"defaultModal = true\" [attr.data-role]=\"'medium-modal'\">\n        Open medium modal\n      </button>\n      <button class=\"bb-toolbar__item\" bbButton (click)=\"largeModal = true\" [attr.data-role]=\"'large-modal'\">\n        Open large modal\n      </button>\n    </div>\n  </div>\n</div>\n\n<!-- Small modal -->\n<bb-modal-ui\n  [isOpen]=\"smallModal\"\n  (cancel)=\"smallModal = false\"\n  (confirm)=\"smallModal = false\"\n  [modalOptions]=\"{ size: 'sm' }\"\n>\n  <bb-modal-header-ui title=\"Discard payment data?\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody> Are you sure to change payment type? Entered data will be lost. </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui confirmText=\"Discard\"></bb-modal-footer-ui>\n</bb-modal-ui>\n\n<!-- Default modal -->\n<bb-modal-ui [isOpen]=\"defaultModal\" (cancel)=\"defaultModal = false\" (confirm)=\"defaultModal = false\">\n  <bb-modal-header-ui title=\"Discard payment data?\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody> Are you sure to change payment type? Entered data will be lost. </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui confirmText=\"Discard\"></bb-modal-footer-ui>\n</bb-modal-ui>\n\n<!-- Large modal -->\n<bb-modal-ui\n  [isOpen]=\"largeModal\"\n  (cancel)=\"largeModal = false\"\n  (confirm)=\"largeModal = false\"\n  [modalOptions]=\"{ size: 'lg' }\"\n>\n  <bb-modal-header-ui title=\"Discard payment data?\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody> Are you sure to change payment type? Entered data will be lost. </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui confirmText=\"Discard\"></bb-modal-footer-ui>\n</bb-modal-ui>\n\n<!-- Modal with action -->\n<bb-modal-ui\n  [isOpen]=\"actionModal\"\n  (cancel)=\"actionModal = false\"\n  (confirm)=\"console.log('action'); actionModal = false\"\n>\n  <bb-modal-header-ui title=\"Discard payment data?\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody> Are you sure to change payment type? Entered data will be lost. </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui confirmText=\"Discard\"></bb-modal-footer-ui>\n</bb-modal-ui>\n\n<p class=\"sr-only\" id=\"customModalLabel\">This is an authorisation dialog</p>\n\n<!-- Modal with passcode -->\n<bb-modal-ui\n  [(isOpen)]=\"passCodeModal\"\n  (confirm)=\"passCodeModal = false\"\n  [modalOptions]=\"{ size: 'lg', ariaLabelledBy: 'customModalLabel', ariaDescribedBy: 'customModalDescription' }\"\n>\n  <form name=\"stepUpForm\">\n    <div class=\"modal-header justify-content-center\" role=\"heading\" aria-level=\"2\" id=\"passCodeModal\">\n      <span class=\"modal-title\"> Authorisation </span>\n    </div>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <div class=\"d-flex justify-content-center text-muted pb-3\" id=\"customModalDescription\">\n          Enter your personal secure code to continue\n        </div>\n        <div class=\"row d-flex justify-content-center\">\n          <div class=\"col-2 col-sm-1 px-2\" *ngFor=\"let inputChar of charsArray\">\n            <input type=\"password\" class=\"form-control px-0 text-center\" [name]=\"'char-' + inputChar\" />\n          </div>\n        </div>\n      </ng-template>\n    </bb-modal-body-ui>\n    <div class=\"modal-footer justify-content-center\">\n      <div class=\"bb-button-bar\">\n        <button bbButton class=\"bb-button-bar__button\" color=\"primary\" (click)=\"passCodeModal = false\">\n          Authorise\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n          (click)=\"passCodeModal = false\"\n          data-role=\"cancel\"\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  </form>\n</bb-modal-ui>\n\n<!-- Modal with left header icon -->\n<bb-modal-ui\n  [isOpen]=\"leftHeaderModal\"\n  (cancel)=\"leftHeaderModal = false\"\n  (confirm)=\"leftHeaderModal = false\"\n  [aria-describedby]=\"'customModalDescription'\"\n>\n  <bb-modal-header-ui [attr.data-role]=\"'modal-header'\">\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui\n              class=\"bb-stack__item\"\n              color=\"warning\"\n              name=\"warning\"\n              [attr.data-role]=\"'warning-icon'\"\n            ></bb-icon-ui>\n            <span class=\"modal-title\" [attr.data-role]=\"'modal-title'\"> One line question with icon? </span>\n          </div>\n        </div>\n        <div class=\"bb-stack__item--push-right\">\n          <div class=\"bb-stack\">\n            <button bbButton class=\"bb-stack__item-sm\" color=\"unstyled\" aria-label=\"print\">\n              <bb-icon-ui color=\"muted\" name=\"print\"></bb-icon-ui>\n            </button>\n            <button bbButton class=\"bb-stack__item-sm\" color=\"unstyled\" aria-label=\"more\">\n              <bb-icon-ui color=\"muted\" name=\"more-vertical\"></bb-icon-ui>\n            </button>\n            <button\n              (click)=\"leftHeaderModal = false\"\n              bbButton\n              class=\"bb-stack__item-sm\"\n              color=\"unstyled\"\n              aria-label=\"close dialog\"\n            >\n              <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui [attr.data-role]=\"'modal-body'\">\n    <ng-template bbCustomModalBody>\n      <p id=\"customModalDescription\">Are you sure to change payment type? Entered data will be lost.</p>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui #footerRef [attr.data-role]=\"'modal-footer'\">\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button bbButton class=\"bb-button-bar__button\" (click)=\"console.log('Submitted'); leftHeaderModal = false\">\n          Discard\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"console.log('Cancelled'); leftHeaderModal = false\"\n          color=\"secondary\"\n          data-role=\"cancel\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<!-- Modal with 3 buttons -->\n<bb-modal-ui [isOpen]=\"threeBtnModal\" (cancel)=\"threeBtnModal = false\" (confirm)=\"threeBtnModal = false\">\n  <bb-modal-header-ui title=\"Discard payment data?\" [attr.data-role]=\"'modal-header'\"></bb-modal-header-ui>\n  <bb-modal-body-ui [attr.data-role]=\"'modal-body'\">\n    <ng-template bbCustomModalBody> Are you sure to change payment type? Entered data will be lost. </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #modalFooterRef [attr.data-role]=\"'modal-footer'\">\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button bbButton class=\"bb-button-bar__button\" (click)=\"threeBtnModal = false\" [attr.data-role]=\"'continue'\">\n          Continue\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"secondary\"\n          (click)=\"threeBtnModal = false\"\n          [attr.data-role]=\"'back'\"\n        >\n          Back\n        </button>\n        <button\n          bbButton\n          class=\"bb-button-bar__button bb-button-bar__button--across\"\n          color=\"link\"\n          (click)=\"threeBtnModal = false\"\n          [attr.data-role]=\"'cancel'\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n\n<!-- Long modal -->\n<bb-modal-ui [isOpen]=\"longModal\" (cancel)=\"longModal = false\" (confirm)=\"longModal = false\">\n  <bb-modal-header-ui title=\"Discard payment data?\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div style=\"height: 1500px\">Are you sure to change payment type?</div>\n      <div>Entered data will be lost.</div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui confirmText=\"Discard\"></bb-modal-footer-ui>\n</bb-modal-ui>\n\n<!-- Scrollable modal -->\n<bb-modal-ui\n  [isOpen]=\"scrollableModal\"\n  [modalOptions]=\"{ scrollable: true }\"\n  (cancel)=\"scrollableModal = false\"\n  (confirm)=\"scrollableModal = false\"\n>\n  <bb-modal-header-ui title=\"Discard payment data?\"></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div style=\"height: 1500px\">Are you sure to change payment type?</div>\n      <div>Entered data will be lost.</div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui confirmText=\"Discard\"></bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$l.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$l.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1$l.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1$l.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$l.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$l.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$l.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }] });
ModalShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ModalShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-modal-ui-showcase',
                    templateUrl: './modal-showcase.component.html',
                }]
        }] });

class ModalShowcaseModule {
}
ModalShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ModalShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalShowcaseModule, declarations: [ModalShowcaseComponent], imports: [CommonModule, ModalModule, IconModule, ButtonModule] });
ModalShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalShowcaseModule, imports: [[CommonModule, ModalModule, IconModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ModalModule, IconModule, ButtonModule],
                    declarations: [ModalShowcaseComponent],
                    entryComponents: [ModalShowcaseComponent],
                }]
        }] });

let NotificationShowcaseComponent = class NotificationShowcaseComponent {
    constructor(notificationService, cdRef) {
        this.notificationService = notificationService;
        this.cdRef = cdRef;
    }
    ngAfterViewInit() {
        this.notificationsConfig = [
            {
                btn: {
                    text: 'Launch info notification',
                    color: 'primary',
                    type: 'info',
                },
                notification: {
                    header: 'This is the header of notification',
                    message: 'This is the default info notification. It breaks words, so you can have long text here.',
                    modifier: 'info',
                    dismissible: false,
                    ttl: 1500,
                },
            },
            {
                btn: {
                    text: 'Launch success notification',
                    color: 'success',
                    type: 'success',
                },
                notification: {
                    header: 'This is the header of notification',
                    message: 'This is the default success notification. It breaks words, so you can have long text here.',
                    modifier: 'success',
                    dismissible: true,
                    ttl: 2000,
                },
            },
            {
                btn: {
                    text: 'Launch alert notification',
                    color: 'danger',
                    type: 'danger',
                },
                notification: {
                    header: 'This is the header of notification',
                    message: 'This is the default error notification. It breaks words, so you can have long text here.',
                    modifier: 'error',
                    dismissible: true,
                    ttl: 10000,
                },
            },
            {
                btn: {
                    text: 'Launch warning notification',
                    color: 'primary',
                    type: 'warning',
                },
                notification: {
                    ttl: 10000,
                    header: 'This is the header of notification',
                    message: 'This is the default warning notification. It breaks words, so you can have long text here.',
                    modifier: 'warning',
                    dismissible: true,
                },
            },
            {
                btn: {
                    text: 'Launch two buttons notification',
                    color: 'primary',
                    type: 'two-buttons',
                },
                notification: {
                    ttl: 0,
                    header: 'This is the header of notification',
                    message: 'This is a notification with both primary and secondary actions. Both buttons allow callbacks and will close the notification when pressed. This notification also has no timeout, ensure this by setting ttl to 0.',
                    modifier: 'error',
                    dismissible: true,
                    primaryAction: () => this.showMessage('primary'),
                    secondaryAction: () => this.showMessage('secondary'),
                    primaryActionText: 'Primary',
                    secondaryActionText: 'Secondary',
                },
            },
            {
                btn: {
                    text: 'Launch custom notification with context',
                    color: 'primary',
                    type: 'custom',
                },
                notification: {
                    ttl: 10000,
                    header: 'File was uploaded',
                    message: 'Sample file.txt. was successfully uploaded',
                    modifier: 'success',
                    dismissible: true,
                },
            },
            {
                btn: {
                    text: 'Launch two customisable buttons notification',
                    color: 'primary',
                    type: 'two-buttons',
                },
                notification: {
                    ttl: 0,
                    header: 'This is the header of notification',
                    message: 'This is a notification with both primary and secondary actions. Both buttons allow callbacks and will close the notification when pressed. This notification also has no timeout, ensure this by setting ttl to 0.',
                    modifier: 'error',
                    dismissible: true,
                    primaryActionTemplate: this.default1,
                    secondaryActionTemplate: this.default2,
                    primaryAction: () => this.showMessage('primary'),
                    secondaryAction: () => this.showMessage('secondary'),
                    primaryActionText: 'Primary',
                    secondaryActionText: 'Secondary',
                },
            },
            {
                btn: {
                    text: 'Launch htm template text',
                    color: 'primary',
                    type: 'two-buttons',
                },
                notification: {
                    ttl: 0,
                    header: 'This is the header of notification',
                    message: this.messageTemplate,
                    modifier: 'error',
                    dismissible: true,
                    primaryActionTemplate: this.default1,
                    secondaryActionTemplate: this.default2,
                    primaryAction: () => this.showMessage('primary'),
                    secondaryAction: () => this.showMessage('secondary'),
                    primaryActionText: 'Primary',
                    secondaryActionText: 'Secondary',
                },
            },
        ];
    }
    ngAfterViewChecked() {
        this.cdRef.detectChanges();
    }
    showNotification({ header, message, dismissible, ttl, modifier, primaryActionText, secondaryActionText, primaryAction, secondaryAction, primaryActionTemplate, secondaryActionTemplate, }) {
        this.notificationService.showNotification({
            ttl,
            header,
            message,
            modifier,
            dismissible,
            primaryAction,
            secondaryAction,
            primaryActionText,
            secondaryActionText,
            primaryActionTemplate,
            secondaryActionTemplate,
        });
    }
    showMessage(buttonType) {
        this.notificationService.showNotification({
            header: 'This is the header of notification',
            message: `The notification triggered by clicking on ${buttonType} button.`,
            dismissible: true,
            ttl: 0,
        });
    }
};
NotificationShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseComponent, deps: [{ token: i1$n.NotificationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NotificationShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationShowcaseComponent, selector: "bb-notification-ui-showcase", viewQueries: [{ propertyName: "default1", first: true, predicate: ["default1"], descendants: true, static: true }, { propertyName: "default2", first: true, predicate: ["default2"], descendants: true, static: true }, { propertyName: "messageTemplate", first: true, predicate: ["messageTemplate"], descendants: true, static: true }], ngImport: i0, template: "<div *ngFor=\"let config of notificationsConfig\" class=\"row mb-4\">\n  <div class=\"col-12\">\n    <button\n      (click)=\"showNotification(config.notification)\"\n      [buttonSize]=\"'md'\"\n      [color]=\"config.btn.color\"\n      bbButton\n      [attr.data-role]=\"'notification-' + config.btn.color + '-' + config.btn.type\"\n    >\n      {{ config.btn.text }}\n    </button>\n  </div>\n</div>\n\n<ng-template #default1>\n  <span>Save</span>\n</ng-template>\n\n<ng-template #default2>\n  <span>Discard</span>\n</ng-template>\n\n<ng-template #messageTemplate>\n  <p>This is an html message message template</p>\n</ng-template>\n", directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
NotificationShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], NotificationShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-notification-ui-showcase',
                    templateUrl: 'notification-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$n.NotificationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { default1: [{
                type: ViewChild,
                args: ['default1', { static: true }]
            }], default2: [{
                type: ViewChild,
                args: ['default2', { static: true }]
            }], messageTemplate: [{
                type: ViewChild,
                args: ['messageTemplate', { static: true }]
            }] } });

class NotificationShowcaseModule {
}
NotificationShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NotificationShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseModule, declarations: [NotificationShowcaseComponent], imports: [CommonModule, NotificationModule, ButtonModule] });
NotificationShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseModule, imports: [[CommonModule, NotificationModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NotificationModule, ButtonModule],
                    declarations: [NotificationShowcaseComponent],
                    entryComponents: [NotificationShowcaseComponent],
                }]
        }] });

let PaginationShowcaseComponent = class PaginationShowcaseComponent {
    constructor() {
        this.paginatorOne = {
            page: 0,
            totalItems: 30,
            maxNavPages: 3,
            type: 'paginator-small-untruncated',
        };
        this.paginatorTwo = {
            page: 7,
            totalItems: 100,
            maxNavPages: 5,
            type: 'paginator-small-left-truncated',
        };
        this.paginatorThree = {
            page: 0,
            totalItems: 90,
            maxNavPages: 4,
            type: 'paginator-small-right-truncated',
        };
        this.paginatorFour = {
            page: 1020 / 10,
            totalItems: 1020,
            maxNavPages: 5,
            type: 'paginator-big-left-truncated',
        };
    }
    get paginator() {
        return {
            boundaryLinks: true,
            directionLinks: true,
            itemsPerPage: 10,
            onPageChange(page) {
                console.log('onPageChange', page);
            },
        };
    }
};
PaginationShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaginationShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaginationShowcaseComponent, selector: "bb-pagination-ui-showcase", ngImport: i0, template: "<h4>Small numbers untruncated</h4>\n<bb-pagination-ui\n  class=\"bb-pagination d-flex justify-content-start align-items-center mt-4 mb-3\"\n  [page]=\"paginatorOne.page\"\n  [boundaryLinks]=\"paginator.boundaryLinks\"\n  [directionLinks]=\"paginator.directionLinks\"\n  [totalItems]=\"paginatorOne.totalItems\"\n  [itemsPerPage]=\"paginator.itemsPerPage\"\n  [maxNavPages]=\"paginatorOne.maxNavPages\"\n  (pageChange)=\"paginator.onPageChange($event)\"\n  [attr.data-role]=\"paginatorOne.type\"\n></bb-pagination-ui>\n\n<h4>Small numbers left truncated</h4>\n<bb-pagination-ui\n  class=\"bb-pagination d-flex justify-content-start align-items-center mt-4 mb-3\"\n  [page]=\"paginatorTwo.page\"\n  [boundaryLinks]=\"paginator.boundaryLinks\"\n  [directionLinks]=\"paginator.directionLinks\"\n  [totalItems]=\"paginatorTwo.totalItems\"\n  [itemsPerPage]=\"paginator.itemsPerPage\"\n  [maxNavPages]=\"paginatorTwo.maxNavPages\"\n  (pageChange)=\"paginator.onPageChange($event)\"\n  [attr.data-role]=\"paginatorTwo.type\"\n></bb-pagination-ui>\n\n<h4>Small numbers right truncated</h4>\n<bb-pagination-ui\n  class=\"bb-pagination d-flex justify-content-start align-items-center mt-4 mb-3\"\n  [page]=\"paginatorThree.page\"\n  [boundaryLinks]=\"paginator.boundaryLinks\"\n  [directionLinks]=\"paginator.directionLinks\"\n  [totalItems]=\"paginatorThree.totalItems\"\n  [itemsPerPage]=\"paginator.itemsPerPage\"\n  [maxNavPages]=\"paginatorThree.maxNavPages\"\n  (pageChange)=\"paginator.onPageChange($event)\"\n  [attr.data-role]=\"paginatorThree.type\"\n></bb-pagination-ui>\n\n<h4>Big numbers left truncated</h4>\n<bb-pagination-ui\n  class=\"bb-pagination d-flex justify-content-start align-items-center mt-4 mb-3\"\n  [page]=\"paginatorFour.page\"\n  [boundaryLinks]=\"paginator.boundaryLinks\"\n  [directionLinks]=\"paginator.directionLinks\"\n  [totalItems]=\"paginatorFour.totalItems\"\n  [itemsPerPage]=\"paginator.itemsPerPage\"\n  [maxNavPages]=\"paginatorFour.maxNavPages\"\n  (pageChange)=\"paginator.onPageChange($event)\"\n  [attr.data-role]=\"paginatorFour.type\"\n></bb-pagination-ui>\n", components: [{ type: i1$o.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }] });
PaginationShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], PaginationShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pagination-ui-showcase',
                    templateUrl: 'pagination-showcase.component.html',
                }]
        }] });

class PaginationShowcaseModule {
}
PaginationShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PaginationShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationShowcaseModule, declarations: [PaginationShowcaseComponent], imports: [CommonModule, PaginationModule] });
PaginationShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationShowcaseModule, imports: [[CommonModule, PaginationModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginationShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PaginationModule],
                    declarations: [PaginationShowcaseComponent],
                    entryComponents: [PaginationShowcaseComponent],
                }]
        }] });

let PaymentCardNumberPipeShowcaseComponent = class PaymentCardNumberPipeShowcaseComponent {
    constructor() {
        this.maskStart = 0;
        this.maskEnd = 12;
        this._paymentCardNumberFormat = {};
    }
    get paymentCard() {
        return {
            name: 'Ricardo Peterson',
            number: '1234567891234567',
            vendor: 'mastercard',
            expirationDate: new Date(2021, 2),
        };
    }
    set paymentCardNumberFormat(val) {
        this._paymentCardNumberFormat = val;
    }
    get paymentCardNumberFormat() {
        return {
            length: 16,
            maskRange: [this.maskStart, this.maskEnd],
            segments: 4,
        };
    }
};
PaymentCardNumberPipeShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardNumberPipeShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentCardNumberPipeShowcaseComponent, selector: "bb-payment-card-number-pipe-ui-showcase", ngImport: i0, template: "<bb-input-number-ui\n  label=\"Mask Start\"\n  aria-label=\"Mask Start Index\"\n  placeholder=\"Mask Start Index\"\n  [(ngModel)]=\"maskStart\"\n>\n</bb-input-number-ui>\n<bb-input-number-ui label=\"Mask End\" aria-label=\"Mask End Index\" placeholder=\"Mask End Index\" [(ngModel)]=\"maskEnd\">\n</bb-input-number-ui>\n<hr />\n{{ paymentCard?.number | paymentCardNumber: paymentCardNumberFormat }}\n", components: [{ type: i2$c.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }], directives: [{ type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "paymentCardNumber": i1$G.PaymentCardNumberPipe } });
PaymentCardNumberPipeShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], PaymentCardNumberPipeShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-number-pipe-ui-showcase',
                    templateUrl: './payment-card-number-pipe-showcase.component.html',
                }]
        }] });

class PaymentCardNumberPipeShowcaseModule {
}
PaymentCardNumberPipeShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PaymentCardNumberPipeShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeShowcaseModule, declarations: [PaymentCardNumberPipeShowcaseComponent], imports: [CommonModule, PaymentCardNumberModule, InputNumberModule, FormsModule] });
PaymentCardNumberPipeShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeShowcaseModule, imports: [[CommonModule, PaymentCardNumberModule, InputNumberModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardNumberPipeShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PaymentCardNumberModule, InputNumberModule, FormsModule],
                    declarations: [PaymentCardNumberPipeShowcaseComponent],
                    entryComponents: [PaymentCardNumberPipeShowcaseComponent],
                }]
        }] });

let AccountNumberPipeShowcaseComponent = class AccountNumberPipeShowcaseComponent {
    constructor(configuration) {
        this.configuration = configuration;
        this.customConfiguration = { segments: [1, 2, 3, 1, 2, 3, 1, 2, 3] };
        this.accounts = [
            {
                description: 'iban',
                typeOrFormat: 'iban',
                number: 'IBAN1234567891234567',
            },
            {
                description: 'bban',
                typeOrFormat: 'bban',
                number: 'BBAN1234567891234567',
            },
            {
                description: 'cardNumber',
                typeOrFormat: 'cardNumber',
                number: 'num1234567891234567',
            },
            {
                description: 'cardNumber (visa provider)',
                typeOrFormat: 'cardNumber',
                number: 'num1234567891234567',
                cardProviderName: 'Visa',
            },
            {
                description: `Custom format [${this.customConfiguration.segments}]`,
                typeOrFormat: this.customConfiguration,
                number: 'num1234567891234567',
            },
        ];
    }
};
AccountNumberPipeShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeShowcaseComponent, deps: [{ token: ACCOUNTS_DISPLAYING_FORMAT }], target: i0.ɵɵFactoryTarget.Component });
AccountNumberPipeShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountNumberPipeShowcaseComponent, selector: "bb-account-number-pipe-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>App configuration</h2>\n  <div>\n    <code>iban: {{ configuration.iban | json }}</code>\n  </div>\n  <div>\n    <code>bban: {{ configuration.bban | json }}</code>\n  </div>\n  <div>\n    <code>cardNumber: {{ configuration.cardNumber | json }}</code>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <ng-container *ngFor=\"let account of accounts\">\n    <h4>{{ account.description }}</h4>\n    <p>{{ account.number | bbAccountNumber: account.typeOrFormat:account.cardProviderName }}</p>\n  </ng-container>\n</div>\n", directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "json": i4.JsonPipe, "bbAccountNumber": i1$H.AccountNumberPipe } });
AccountNumberPipeShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], AccountNumberPipeShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-number-pipe-ui-showcase',
                    templateUrl: './account-number-pipe-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [ACCOUNTS_DISPLAYING_FORMAT]
                }] }]; } });

const accountsDisplayingFormatConfiguration = {
    iban: { segments: 4 },
    bban: { segments: 4 },
    cardNumber: {
        segments: [6, 8, 6],
        cardProviders: {
            visa: { segments: [3, 9, 9] },
        },
    },
};
class AccountNumberPipeShowcaseModule {
}
AccountNumberPipeShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountNumberPipeShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeShowcaseModule, declarations: [AccountNumberPipeShowcaseComponent], imports: [CommonModule, FormsModule, AccountNumberPipeModule] });
AccountNumberPipeShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeShowcaseModule, providers: [{ provide: ACCOUNTS_DISPLAYING_FORMAT, useValue: accountsDisplayingFormatConfiguration }], imports: [[CommonModule, FormsModule, AccountNumberPipeModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipeShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, AccountNumberPipeModule],
                    declarations: [AccountNumberPipeShowcaseComponent],
                    entryComponents: [AccountNumberPipeShowcaseComponent],
                    providers: [{ provide: ACCOUNTS_DISPLAYING_FORMAT, useValue: accountsDisplayingFormatConfiguration }],
                }]
        }] });

let PaymentCardShowcaseComponent = class PaymentCardShowcaseComponent {
    get paymentCard() {
        return {
            name: 'Ricardo Peterson',
            number: '1234',
            vendor: 'mastercard',
            expirationDate: new Date(2021, 2),
        };
    }
    get paymentCardWithBackgroundImage() {
        return {
            name: 'Ricardo Peterson',
            number: '1234',
            vendor: 'mastercard',
            expirationDate: new Date(2021, 2),
            cardName: 'Blue Card',
        };
    }
    get paymentCardNumberFormat() {
        return {
            length: 16,
            maskRange: [0, 12],
            segments: 4,
        };
    }
};
PaymentCardShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentCardShowcaseComponent, selector: "bb-payment-card-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h2>Default</h2>\n  <bb-payment-card-ui\n    [paymentCard]=\"paymentCard\"\n    [paymentCardNumberFormat]=\"paymentCardNumberFormat\"\n  ></bb-payment-card-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h2>With different background <small class=\"bb-text-support\">(controlled by card name)</small></h2>\n  <bb-payment-card-ui\n    [paymentCard]=\"paymentCardWithBackgroundImage\"\n    [paymentCardNumberFormat]=\"paymentCardNumberFormat\"\n  ></bb-payment-card-ui>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h2>With state overlay <small class=\"bb-text-support\">(provided by css, not component)</small></h2>\n  <div class=\"bb-payment-card-state\">\n    <div class=\"bb-payment-card-state__container\">\n      <i\n        aria-hidden=\"true\"\n        class=\"bb-payment-card-state__icon bb-icon bb-icon-not-interested bb-icon--xxl bb-icon--white\"\n      ></i>\n      <span class=\"bb-payment-card-state__label badge badge-secondary\">Deactivated</span>\n    </div>\n    <div class=\"bb-payment-card-state__overlay\">\n      <bb-payment-card-ui\n        [paymentCard]=\"paymentCard\"\n        [paymentCardNumberFormat]=\"paymentCardNumberFormat\"\n      ></bb-payment-card-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$p.PaymentCardComponent, selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }] });
PaymentCardShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], PaymentCardShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-ui-showcase',
                    templateUrl: './payment-card-showcase.component.html',
                }]
        }] });

class PaymentCardShowcaseModule {
}
PaymentCardShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PaymentCardShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardShowcaseModule, declarations: [PaymentCardShowcaseComponent], imports: [CommonModule, PaymentCardModule] });
PaymentCardShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardShowcaseModule, imports: [[CommonModule, PaymentCardModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PaymentCardModule],
                    declarations: [PaymentCardShowcaseComponent],
                    entryComponents: [PaymentCardShowcaseComponent],
                }]
        }] });

let PeriodSelectorShowcaseComponent = class PeriodSelectorShowcaseComponent {
    constructor() {
        this.periodStartDate = new Date('2019-02-09');
        this.periodEndDate = new Date('2019-02-21');
    }
};
PeriodSelectorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PeriodSelectorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PeriodSelectorShowcaseComponent, selector: "bb-period-selector-ui-showcase", ngImport: i0, template: "<bb-period-selector-ui [periodStart]=\"periodStartDate\" [periodEnd]=\"periodEndDate\"></bb-period-selector-ui>\n", components: [{ type: i1$q.PeriodSelectorComponent, selector: "bb-period-selector-ui", inputs: ["periodStart", "periodEnd", "periodFormatters", "period"], outputs: ["periodChange"] }] });
PeriodSelectorShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], PeriodSelectorShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-period-selector-ui-showcase',
                    templateUrl: './period-selector-showcase.component.html',
                }]
        }] });

class PeriodSelectorShowcaseModule {
}
PeriodSelectorShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PeriodSelectorShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorShowcaseModule, declarations: [PeriodSelectorShowcaseComponent], imports: [CommonModule, PeriodSelectorModule] });
PeriodSelectorShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorShowcaseModule, imports: [[CommonModule, PeriodSelectorModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PeriodSelectorModule],
                    declarations: [PeriodSelectorShowcaseComponent],
                    entryComponents: [PeriodSelectorShowcaseComponent],
                }]
        }] });

let PhoneNumberFormatPipeShowcaseComponent = class PhoneNumberFormatPipeShowcaseComponent {
};
PhoneNumberFormatPipeShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberFormatPipeShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PhoneNumberFormatPipeShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PhoneNumberFormatPipeShowcaseComponent, selector: "bb-phone-number-pipe-ui-showcase", ngImport: i0, template: "<div class=\"card card--shadow-level-1\">\n  <div class=\"card-body\">\n    <div class=\"table-responsive\">\n      <table class=\"table table-hover\">\n        <thead>\n          <tr class=\"align-middle\">\n            <th scope=\"col\"><span class=\"th-content\">Country</span></th>\n            <th scope=\"col\">\n              <span class=\"th-content\">Unformatted Number</span>\n            </th>\n            <th scope=\"col\"><span class=\"th-content\">Formated Number</span></th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>CA</td>\n            <td>16045555555</td>\n            <td class=\"bb-text-align-right\">{{ '16045555555' | phoneNumber: 'CA' }}</td>\n          </tr>\n          <tr>\n            <td>NL</td>\n            <td>0612345622</td>\n            <td class=\"bb-text-align-right\">{{ '0612345622' | phoneNumber: 'NL' }}</td>\n          </tr>\n          <tr>\n            <td>GB</td>\n            <td>07744556677</td>\n            <td class=\"bb-text-align-right\">{{ '07744556677' | phoneNumber: 'GB' }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n", pipes: { "phoneNumber": i1$I.PhoneNumberPipe } });
PhoneNumberFormatPipeShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], PhoneNumberFormatPipeShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberFormatPipeShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-phone-number-pipe-ui-showcase',
                    templateUrl: './phone-number-format-pipe-showcase.component.html',
                }]
        }] });

class PhoneNumberFormatPipeShowcaseModule {
}
PhoneNumberFormatPipeShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberFormatPipeShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PhoneNumberFormatPipeShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberFormatPipeShowcaseModule, declarations: [PhoneNumberFormatPipeShowcaseComponent], imports: [CommonModule, PhoneNumberModule] });
PhoneNumberFormatPipeShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberFormatPipeShowcaseModule, imports: [[CommonModule, PhoneNumberModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PhoneNumberFormatPipeShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PhoneNumberModule],
                    declarations: [PhoneNumberFormatPipeShowcaseComponent],
                    entryComponents: [PhoneNumberFormatPipeShowcaseComponent],
                }]
        }] });

let ProductItemBasicAccountShowcaseComponent = class ProductItemBasicAccountShowcaseComponent {
};
ProductItemBasicAccountShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemBasicAccountShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemBasicAccountShowcaseComponent, selector: "bb-product-item-basic-account-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-basic-account-ui\n        [title]=\"'Ricardo Norton\\'s Savings Account'\"\n        [amount]=\"83652.32\"\n        [productNumber]=\"'NL75INGB3400120056'\"\n        [currency]=\"'EUR'\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [highlight]=\"false\"\n        [favorite]=\"false\"\n        [active]=\"false\"\n      ></bb-product-item-basic-account-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-basic-account-ui\n      [title]=\"'Ricardo Norton\\'s Savings Account'\"\n      [amount]=\"83652.32\"\n      [productNumber]=\"'NL75INGB3400120056'\"\n      [currency]=\"'EUR'\"\n      [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n      [highlight]=\"false\"\n      [favorite]=\"false\"\n      [active]=\"false\"\n    ></bb-product-item-basic-account-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Inside a list</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Savings Account'\"\n            [amount]=\"83652.32\"\n            [productNumber]=\"'NL75INGB3400120056'\"\n            [currency]=\"'EUR'\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n            [highlight]=\"false\"\n            [favorite]=\"false\"\n            [active]=\"false\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Master Card'\"\n            [amount]=\"6719.64\"\n            [productNumber]=\"8927\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 14], segments: 4 }\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Master Card'\"\n            [amount]=\"6719.64\"\n            [productNumber]=\"'NL75INGB3400120056'\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n            [productDetailsInfo]=\"{\n              owners: 'Ricardo Norton'\n            }\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Multiple accounts with selection</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Savings Account'\"\n            [amount]=\"83652.32\"\n            [productNumber]=\"'NL75INGB3400120056'\"\n            [currency]=\"'EUR'\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n            [highlight]=\"false\"\n            [favorite]=\"false\"\n            [active]=\"false\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Master Card'\"\n            [productNumber]=\"8927\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 14], segments: 4 }\"\n            [amount]=\"6719.64\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"false\"\n            [favorite]=\"false\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Credit Card'\"\n            [productNumber]=\"1278\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 14], segments: 4 }\"\n            [amount]=\"9004.98\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>With account status</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-basic-account-ui\n        [title]=\"'Ricardo Norton\\'s Savings Account'\"\n        [amount]=\"83652.32\"\n        [productNumber]=\"'NL75INGB3400120056'\"\n        [currency]=\"'EUR'\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [highlight]=\"false\"\n        [favorite]=\"false\"\n        [active]=\"false\"\n        [status]=\"'inactive'\"\n      ></bb-product-item-basic-account-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>With account status</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-basic-account-ui\n        [title]=\"'Ricardo Norton\\'s Savings Account'\"\n        [amount]=\"83652.32\"\n        [productNumber]=\"'NL75INGB3400120056'\"\n        [currency]=\"'EUR'\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [highlight]=\"false\"\n        [favorite]=\"false\"\n        [active]=\"false\"\n        [status]=\"'inactive'\"\n      ></bb-product-item-basic-account-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>With amount label</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-basic-account-ui\n        [title]=\"'Ricardo Norton\\'s Savings Account'\"\n        [amount]=\"83652.32\"\n        [productNumber]=\"'NL75INGB3400120056'\"\n        [currency]=\"'EUR'\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [highlight]=\"false\"\n        [favorite]=\"false\"\n        [active]=\"false\"\n        balanceLabel=\"Available balance\"\n      ></bb-product-item-basic-account-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>With amount label</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-basic-account-ui\n        [title]=\"'Ricardo Norton\\'s Savings Account'\"\n        [amount]=\"83652.32\"\n        [productNumber]=\"'NL75INGB3400120056'\"\n        [currency]=\"'EUR'\"\n        [bankBranchCode]=\"'055770134'\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [highlight]=\"false\"\n        [favorite]=\"false\"\n        [active]=\"false\"\n        balanceLabel=\"Available balance\"\n      ></bb-product-item-basic-account-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i2$f.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }] });
ProductItemBasicAccountShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemBasicAccountShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-basic-account-ui-showcase',
                    templateUrl: './product-item-basic-account-showcase.component.html',
                }]
        }] });

class ProductItemBasicAccountShowcaseModule {
}
ProductItemBasicAccountShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemBasicAccountShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountShowcaseModule, declarations: [ProductItemBasicAccountShowcaseComponent], imports: [CommonModule, ProductItemBasicAccountModule] });
ProductItemBasicAccountShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountShowcaseModule, imports: [[CommonModule, ProductItemBasicAccountModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemBasicAccountShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemBasicAccountModule],
                    declarations: [ProductItemBasicAccountShowcaseComponent],
                    entryComponents: [ProductItemBasicAccountShowcaseComponent],
                }]
        }] });

let ProductItemCreditCardShowcaseComponent = class ProductItemCreditCardShowcaseComponent {
};
ProductItemCreditCardShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemCreditCardShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemCreditCardShowcaseComponent, selector: "bb-product-item-credit-card-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-credit-card-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"4322\"\n        [amount]=\"1425.99\"\n        [currency]=\"'EUR'\"\n        [mainSectionCurrency]=\"'EUR'\"\n        [mainSectionAmount]=\"880.54\"\n        [mainSectionTitle]=\"'Available balance'\"\n        [secondarySectionCurrency]=\"'EUR'\"\n        [secondarySectionAmount]=\"7280.86\"\n        [secondarySectionTitle]=\"'Credit Limit'\"\n        [productDetailsInfo]=\"{ owners: 'Richard Norton' }\"\n        [highlight]=\"false\"\n        [favorite]=\"true\"\n      >\n      </bb-product-item-credit-card-ui>\n    </div>\n  </div>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-credit-card-ui\n      [title]=\"'John Doe'\"\n      [productNumber]=\"4322\"\n      [amount]=\"1425.99\"\n      [currency]=\"'EUR'\"\n      [secondarySectionCurrency]=\"'EUR'\"\n      [secondarySectionAmount]=\"7280.86\"\n      [secondarySectionTitle]=\"'Credit Limit'\"\n      [highlight]=\"false\"\n      [favorite]=\"true\"\n    >\n    </bb-product-item-credit-card-ui>\n  </div>\n</div>\n\n<div>\n  <h4>Inside a list</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item\">\n          <bb-product-item-credit-card-ui\n            [title]=\"'John Doe'\"\n            [productNumber]=\"4322\"\n            [amount]=\"-1425.99\"\n            [currency]=\"'EUR'\"\n            [secondarySectionCurrency]=\"'EUR'\"\n            [secondarySectionAmount]=\"7280.86\"\n            [secondarySectionTitle]=\"'Credit Limit'\"\n            [highlight]=\"true\"\n            [favorite]=\"true\"\n          >\n          </bb-product-item-credit-card-ui>\n        </div>\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Master Card'\"\n            [amount]=\"6719.64\"\n            [productNumber]=\"8927\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 14], segments: 4 }\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"true\"\n            [active]=\"false\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$r.ProductItemCreditCardComponent, selector: "bb-product-item-credit-card-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i2$f.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }] });
ProductItemCreditCardShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemCreditCardShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-credit-card-ui-showcase',
                    templateUrl: './product-item-credit-card-showcase.component.html',
                }]
        }] });

class ProductItemCreditCardShowcaseModule {
}
ProductItemCreditCardShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemCreditCardShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardShowcaseModule, declarations: [ProductItemCreditCardShowcaseComponent], imports: [CommonModule, ProductItemCreditCardModule, ProductItemBasicAccountModule] });
ProductItemCreditCardShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardShowcaseModule, imports: [[CommonModule, ProductItemCreditCardModule, ProductItemBasicAccountModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCreditCardShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemCreditCardModule, ProductItemBasicAccountModule],
                    declarations: [ProductItemCreditCardShowcaseComponent],
                    entryComponents: [ProductItemCreditCardShowcaseComponent],
                }]
        }] });

let ProductItemCurrentAccountShowcaseComponent = class ProductItemCurrentAccountShowcaseComponent {
    constructor() {
        this.currentAccountProductNumberFormat = {
            length: 16,
            maskRange: [0, 2],
            segments: 4,
        };
    }
};
ProductItemCurrentAccountShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemCurrentAccountShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemCurrentAccountShowcaseComponent, selector: "bb-product-item-current-account-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-current-account-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"4322\"\n        [amount]=\"1425.99\"\n        [currency]=\"'EUR'\"\n        [mainSectionCurrency]=\"'EUR'\"\n        [mainSectionAmount]=\"880.54\"\n        [mainSectionTitle]=\"'Available balance'\"\n        [secondarySectionCurrency]=\"'EUR'\"\n        [secondarySectionAmount]=\"7280.86\"\n        [secondarySectionTitle]=\"'Credit Limit'\"\n        [productDetailsInfo]=\"{ owner: 'Richard Norton' }\"\n        [highlight]=\"false\"\n        [favorite]=\"true\"\n      >\n      </bb-product-item-current-account-ui>\n    </div>\n  </div>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-current-account-ui\n      [title]=\"'John Doe'\"\n      [productNumber]=\"4322\"\n      [amount]=\"1425.99\"\n      [currency]=\"'EUR'\"\n      [secondarySectionCurrency]=\"'EUR'\"\n      [secondarySectionAmount]=\"7280.86\"\n      [secondarySectionTitle]=\"'Credit Limit'\"\n      [highlight]=\"false\"\n      [favorite]=\"true\"\n    >\n    </bb-product-item-current-account-ui>\n  </div>\n</div>\n\n<div>\n  <h4>Inside a list</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"bb-list\">\n        <div class=\"bb-list__item\">\n          <bb-product-item-current-account-ui\n            [title]=\"'John Doe'\"\n            [productNumber]=\"4322\"\n            [amount]=\"1425.99\"\n            [currency]=\"'EUR'\"\n            [secondarySectionCurrency]=\"'EUR'\"\n            [secondarySectionAmount]=\"7280.86\"\n            [secondarySectionTitle]=\"'Credit Limit'\"\n            [highlight]=\"false\"\n            [favorite]=\"true\"\n          >\n          </bb-product-item-current-account-ui>\n        </div>\n        <div class=\"bb-list__item\">\n          <bb-product-item-basic-account-ui\n            [title]=\"'Ricardo Norton\\'s Master Card'\"\n            [amount]=\"6719.64\"\n            [productNumber]=\"8927\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 14], segments: 4 }\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"false\"\n            [active]=\"false\"\n          ></bb-product-item-basic-account-ui>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$s.ProductItemCurrentAccountComponent, selector: "bb-product-item-current-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "secondarySectionCurrency", "secondarySectionAmount", "secondarySectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }, { type: i2$f.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }] });
ProductItemCurrentAccountShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemCurrentAccountShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-current-account-ui-showcase',
                    templateUrl: './product-item-current-account-showcase.component.html',
                }]
        }] });

class ProductItemCurrentAccountShowcaseModule {
}
ProductItemCurrentAccountShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemCurrentAccountShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountShowcaseModule, declarations: [ProductItemCurrentAccountShowcaseComponent], imports: [CommonModule, ProductItemCurrentAccountModule, ProductItemBasicAccountModule] });
ProductItemCurrentAccountShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountShowcaseModule, imports: [[CommonModule, ProductItemCurrentAccountModule, ProductItemBasicAccountModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemCurrentAccountShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemCurrentAccountModule, ProductItemBasicAccountModule],
                    declarations: [ProductItemCurrentAccountShowcaseComponent],
                    entryComponents: [ProductItemCurrentAccountShowcaseComponent],
                }]
        }] });

let ProductItemDebitCardShowcaseComponent = class ProductItemDebitCardShowcaseComponent {
};
ProductItemDebitCardShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemDebitCardShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemDebitCardShowcaseComponent, selector: "bb-product-item-debit-card-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-debit-card-ui [title]=\"'John Doe'\" [productNumber]=\"4322\" [highlight]=\"false\" [favorite]=\"true\">\n      </bb-product-item-debit-card-ui>\n    </div>\n  </div>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-debit-card-ui [title]=\"'John Doe'\" [productNumber]=\"4322\" [highlight]=\"false\" [favorite]=\"true\">\n    </bb-product-item-debit-card-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>With owners (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-debit-card-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"4322\"\n        [highlight]=\"false\"\n        [favorite]=\"true\"\n        [productDetailsInfo]=\"{\n          owners: 'Ricardo Norton'\n        }\"\n      >\n      </bb-product-item-debit-card-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$t.ProductItemDebitCardComponent, selector: "bb-product-item-debit-card-ui", inputs: ["title", "productNumber", "productNumberFormat", "highlight", "active", "productDetailsInfo", "favorite", "favoriteIconColor"] }] });
ProductItemDebitCardShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemDebitCardShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-debit-card-ui-showcase',
                    templateUrl: './product-item-debit-card-showcase.component.html',
                }]
        }] });

class ProductItemDebitCardShowcaseModule {
}
ProductItemDebitCardShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemDebitCardShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardShowcaseModule, declarations: [ProductItemDebitCardShowcaseComponent], imports: [CommonModule, ProductItemDebitCardModule] });
ProductItemDebitCardShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardShowcaseModule, imports: [[CommonModule, ProductItemDebitCardModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemDebitCardShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemDebitCardModule],
                    declarations: [ProductItemDebitCardShowcaseComponent],
                    entryComponents: [ProductItemDebitCardShowcaseComponent],
                }]
        }] });

let ProductItemInvestmentAccountShowcaseComponent = class ProductItemInvestmentAccountShowcaseComponent {
};
ProductItemInvestmentAccountShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemInvestmentAccountShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemInvestmentAccountShowcaseComponent, selector: "bb-product-item-investment-account-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-investment-account-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"'NL75 INGB 3000 1200 56'\"\n        [amount]=\"13425.99\"\n        [currency]=\"'EUR'\"\n        [highlight]=\"false\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [favorite]=\"true\"\n      >\n      </bb-product-item-investment-account-ui>\n    </div>\n  </div>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-investment-account-ui\n      [title]=\"'John Doe'\"\n      [productNumber]=\"'NL75 INGB 3000 1200 56'\"\n      [amount]=\"13425.99\"\n      [currency]=\"'EUR'\"\n      [highlight]=\"false\"\n      [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n      [favorite]=\"true\"\n    >\n    </bb-product-item-investment-account-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--xl\">\n  <h4>With owners (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-investment-account-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"'NL75 INGB 3000 1200 56'\"\n        [amount]=\"13425.99\"\n        [currency]=\"'EUR'\"\n        [highlight]=\"false\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [favorite]=\"true\"\n        [productDetailsInfo]=\"{\n          owners: 'Ricardo Norton'\n        }\"\n      >\n      </bb-product-item-investment-account-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$u.ProductItemInvestmentAccountComponent, selector: "bb-product-item-investment-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
ProductItemInvestmentAccountShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemInvestmentAccountShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-investment-account-ui-showcase',
                    templateUrl: './product-item-investment-account-showcase.component.html',
                }]
        }] });

class ProductItemInvestmentAccountShowcaseModule {
}
ProductItemInvestmentAccountShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemInvestmentAccountShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountShowcaseModule, declarations: [ProductItemInvestmentAccountShowcaseComponent], imports: [CommonModule, ProductItemInvestmentAccountModule] });
ProductItemInvestmentAccountShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountShowcaseModule, imports: [[CommonModule, ProductItemInvestmentAccountModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemInvestmentAccountShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemInvestmentAccountModule],
                    declarations: [ProductItemInvestmentAccountShowcaseComponent],
                    entryComponents: [ProductItemInvestmentAccountShowcaseComponent],
                }]
        }] });

let ProductItemLoanShowcaseComponent = class ProductItemLoanShowcaseComponent {
};
ProductItemLoanShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemLoanShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemLoanShowcaseComponent, selector: "bb-product-item-loan-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-loan-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"'NL75 INGB 3400 1200 56'\"\n        [amount]=\"15000.0\"\n        [currency]=\"'EUR'\"\n        [highlight]=\"false\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [favorite]=\"true\"\n        [productDetailsInfo]=\"{\n          owners: 'Ricardo Norton'\n        }\"\n      >\n      </bb-product-item-loan-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-loan-ui\n      [title]=\"'John Doe'\"\n      [productNumber]=\"'NL75 INGB 3400 1200 56'\"\n      [amount]=\"15000.0\"\n      [currency]=\"'EUR'\"\n      [highlight]=\"false\"\n      [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n      [favorite]=\"true\"\n    >\n    </bb-product-item-loan-ui>\n  </div>\n</div>\n", components: [{ type: i1$v.ProductItemLoanComponent, selector: "bb-product-item-loan-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
ProductItemLoanShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemLoanShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-loan-ui-showcase',
                    templateUrl: './product-item-loan-showcase.component.html',
                }]
        }] });

class ProductItemLoanShowcaseModule {
}
ProductItemLoanShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemLoanShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanShowcaseModule, declarations: [ProductItemLoanShowcaseComponent], imports: [CommonModule, ProductItemLoanModule] });
ProductItemLoanShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanShowcaseModule, imports: [[CommonModule, ProductItemLoanModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemLoanShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemLoanModule],
                    declarations: [ProductItemLoanShowcaseComponent],
                    entryComponents: [ProductItemLoanShowcaseComponent],
                }]
        }] });

let ProductItemSavingsAccountShowcaseComponent = class ProductItemSavingsAccountShowcaseComponent {
};
ProductItemSavingsAccountShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemSavingsAccountShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemSavingsAccountShowcaseComponent, selector: "bb-product-item-savings-account-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-savings-account-ui\n      [title]=\"'John Doe'\"\n      [productNumber]=\"'NL75 INGB 2000 1200 56'\"\n      [amount]=\"177425.99\"\n      [currency]=\"'EUR'\"\n      [highlight]=\"false\"\n      [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n      [favorite]=\"true\"\n    >\n    </bb-product-item-savings-account-ui>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-savings-account-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"'NL75 INGB 2000 1200 56'\"\n        [amount]=\"177425.99\"\n        [currency]=\"'EUR'\"\n        [highlight]=\"false\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [favorite]=\"true\"\n      >\n      </bb-product-item-savings-account-ui>\n    </div>\n  </div>\n</div>\n\n<div>\n  <h4>With owners and with main section (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-savings-account-ui\n        [title]=\"'John Doe'\"\n        [productNumber]=\"'NL75 INGB 2000 1200 56'\"\n        [amount]=\"177425.99\"\n        [currency]=\"'EUR'\"\n        [highlight]=\"false\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [favorite]=\"true\"\n        [mainSectionCurrency]=\"'EUR'\"\n        [mainSectionAmount]=\"880.54\"\n        [mainSectionTitle]=\"'Available balance'\"\n        [productDetailsInfo]=\"{\n          owners: 'Ricardo Norton'\n        }\"\n      >\n      </bb-product-item-savings-account-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$w.ProductItemSavingsAccountComponent, selector: "bb-product-item-savings-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
ProductItemSavingsAccountShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemSavingsAccountShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-savings-account-ui-showcase',
                    templateUrl: './product-item-savings-account-showcase.component.html',
                }]
        }] });

class ProductItemSavingsAccountShowcaseModule {
}
ProductItemSavingsAccountShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemSavingsAccountShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountShowcaseModule, declarations: [ProductItemSavingsAccountShowcaseComponent], imports: [CommonModule, ProductItemSavingsAccountModule] });
ProductItemSavingsAccountShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountShowcaseModule, imports: [[CommonModule, ProductItemSavingsAccountModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemSavingsAccountShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemSavingsAccountModule],
                    declarations: [ProductItemSavingsAccountShowcaseComponent],
                    entryComponents: [ProductItemSavingsAccountShowcaseComponent],
                }]
        }] });

let ProductItemTermDepositShowcaseComponent = class ProductItemTermDepositShowcaseComponent {
};
ProductItemTermDepositShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductItemTermDepositShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductItemTermDepositShowcaseComponent, selector: "bb-product-item-term-deposit-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-term-deposit-ui\n        [title]=\"'John Doe'\"\n        [amount]=\"200000\"\n        [currency]=\"'EUR'\"\n        [highlight]=\"false\"\n        [productNumber]=\"'NL75 INGB 2000 1200 56'\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [favorite]=\"true\"\n      >\n      </bb-product-item-term-deposit-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>With mainSection (Theme 2.0: container should provide padding)</h4>\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <bb-product-item-term-deposit-ui\n        [title]=\"'John Doe'\"\n        [amount]=\"200000\"\n        [currency]=\"'EUR'\"\n        [highlight]=\"false\"\n        [productNumber]=\"'NL75 INGB 2000 1200 56'\"\n        [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n        [favorite]=\"true\"\n        [mainSectionCurrency]=\"'EUR'\"\n        [mainSectionAmount]=\"880.54\"\n        [mainSectionTitle]=\"'Available balance'\"\n      >\n      </bb-product-item-term-deposit-ui>\n    </div>\n  </div>\n</div>\n\n<div class=\"bb-block bb-block--xl\">\n  <h4>Default (Theme 1.x: component should provide padding)</h4>\n  <div class=\"card\">\n    <bb-product-item-term-deposit-ui\n      [title]=\"'John Doe'\"\n      [amount]=\"200000\"\n      [currency]=\"'EUR'\"\n      [highlight]=\"false\"\n      [productNumber]=\"'NL75 INGB 2000 1200 56'\"\n      [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n      [favorite]=\"true\"\n      [productDetailsInfo]=\"{\n        owners: 'Ricardo Norton'\n      }\"\n    >\n    </bb-product-item-term-deposit-ui>\n  </div>\n</div>\n", components: [{ type: i1$x.ProductItemTermDepositComponent, selector: "bb-product-item-term-deposit-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "amount", "mainSectionCurrency", "mainSectionAmount", "mainSectionTitle", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor"] }] });
ProductItemTermDepositShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductItemTermDepositShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-item-term-deposit-ui-showcase',
                    templateUrl: './product-item-term-deposit-showcase.component.html',
                }]
        }] });

class ProductItemTermDepositShowcaseModule {
}
ProductItemTermDepositShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductItemTermDepositShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositShowcaseModule, declarations: [ProductItemTermDepositShowcaseComponent], imports: [CommonModule, ProductItemTermDepositModule] });
ProductItemTermDepositShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositShowcaseModule, imports: [[CommonModule, ProductItemTermDepositModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductItemTermDepositShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductItemTermDepositModule],
                    declarations: [ProductItemTermDepositShowcaseComponent],
                    entryComponents: [ProductItemTermDepositShowcaseComponent],
                }]
        }] });

let ProductSelectorShowcaseComponent = class ProductSelectorShowcaseComponent {
    constructor() {
        this.singleDropdownOptions = ['Option One', 'Option Two', 'Option Three'];
        this.productSelected = null;
        this.productsInterfaced = [
            {
                id: '1cdb2224',
                amount: '1231',
                currency: 'EUR',
                productNumber: '2342 443234 4234',
                name: 'Some Name',
                productType: 'currentAccounts',
            },
            {
                id: '1cdb222sgdfd4',
                amount: '123123',
                currency: 'EUR',
                productNumber: '2342 443234 4234432',
                name: 'Some Name 234',
                productType: 'my Type 234',
                custonType: 'header',
                header: 'savingsAccounts',
            },
            {
                id: '1cdb222gdfgsd4',
                amount: '123123',
                currency: 'EUR',
                productNumber: '2342 443234 4234432',
                name: 'Some NA34534',
                productType: 'termDeposits',
            },
            {
                id: '1cdb222sdfgd4',
                amount: '123123',
                currency: 'EUR',
                productNumber: '2342 443234 4234432',
                name: 'Some NA3454',
                productType: 'loans',
            },
            {
                id: '1cddfgb222sd4',
                amount: '123123',
                currency: 'EUR',
                productNumber: '2342 443234 4234432',
                name: 'Some N34534',
                productType: 'creditCards',
            },
            {
                id: '1cdb2sfd22sd4',
                amount: '123123',
                currency: 'EUR',
                productNumber: '2342 443233454 4234432',
                name: 'Some NAm345',
                productType: 'debitCards',
            },
            {
                id: '1cdb2df22sd4',
                amount: '123123',
                currency: 'EUR',
                productNumber: '2343542 443234 4234432',
                name: 'Some Name 234',
                productType: 'investmentAccounts',
            },
        ];
    }
};
ProductSelectorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductSelectorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSelectorShowcaseComponent, selector: "bb-product-selector-ui-showcase", ngImport: i0, template: "<div>\n  <div class=\"bb-block bb-block--xl\">\n    <h2>Default</h2>\n    <bb-product-selector-ui [autoClose]=\"true\">\n      <ng-container bbDropdownToggle>\n        <div\n          *ngIf=\"productSelected\"\n          data-role=\"product-selector-selected-product\"\n          class=\"bb-product-item bb-product-item-basic-account-ui product-item\"\n        >\n          <div class=\"bb-stack bb-stack--wrap bb-text-align-left product-item-content\">\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <span data-role=\"item-name\" class=\"bb-text-bold\"> {{ productSelected?.name }} </span><br />\n              <span data-role=\"item-number\" class=\"bb-text-support bb-subtitle bb-account-info__product-number\">\n                {{ productSelected?.productNumber }}\n              </span>\n            </div>\n            <div class=\"bb-stack__break bb-stack__break--xs\"></div>\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-none bb-product-item__details\"\n            >\n              <div class=\"bb-text-align-right\">\n                <div class=\"bb-text-support bb-subheader bb-subheader--lowercase bb-subheader--regular\">\n                  text herestas\n                </div>\n                <bb-amount-ui\n                  class=\"bb-highlight\"\n                  *ngIf=\"productSelected.amount\"\n                  [amount]=\"productSelected.amount\"\n                  [currency]=\"productSelected.currency\"\n                >\n                </bb-amount-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"!productSelected\" class=\"bb-stack\">\n          <span data-role=\"item-empty-state\" class=\"bb-text-support bb-product-selector__placeholder\">\n            Select one or more accounts\n          </span>\n        </div>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          *ngFor=\"let item of productsInterfaced; let i = index\"\n          (click)=\"productSelected = productsInterfaced[i]\"\n          bbButton\n          color=\"unstyled\"\n          #listItem\n          class=\"bb-product-selector__dropdown-item\"\n          [ngClass]=\"{ selected: item.id === productSelected?.id }\"\n        >\n          <bb-product-item-basic-account-ui\n            [title]=\"item.name\"\n            [amount]=\"item.amount\"\n            [productNumber]=\"item.productNumber\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"true\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n            [active]=\"item.id === productSelected?.id\"\n          ></bb-product-item-basic-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <h2>Always open bottom</h2>\n    <bb-product-selector-ui [autoClose]=\"true\" [position]=\"'bottom'\">\n      <ng-container bbDropdownToggle>\n        <div\n          *ngIf=\"productSelected\"\n          data-role=\"product-selector-selected-product\"\n          class=\"bb-product-item bb-product-item-basic-account-ui product-item\"\n        >\n          <div class=\"bb-stack bb-stack--wrap bb-text-align-left product-item-content\">\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <span data-role=\"item-name\" class=\"bb-text-bold\"> {{ productSelected?.name }} </span><br />\n              <span data-role=\"item-number\" class=\"bb-text-support bb-subtitle bb-account-info__product-number\">\n                {{ productSelected?.productNumber }}\n              </span>\n            </div>\n            <div class=\"bb-stack__break bb-stack__break--xs\"></div>\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-none bb-product-item__details\"\n            >\n              <bb-amount-ui\n                class=\"bb-highlight\"\n                *ngIf=\"productSelected?.amount\"\n                [amount]=\"productSelected?.amount\"\n                [currency]=\"productSelected?.currency\"\n              >\n              </bb-amount-ui>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"!productSelected\" class=\"bb-stack\">\n          <span data-role=\"item-empty-state\" class=\"bb-text-support bb-product-selector__placeholder\">\n            Select one or more accounts\n          </span>\n        </div>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          *ngFor=\"let item of productsInterfaced; let i = index\"\n          (click)=\"productSelected = productsInterfaced[i]\"\n          bbButton\n          color=\"unstyled\"\n          #listItem\n          class=\"bb-product-selector__dropdown-item\"\n          [ngClass]=\"{ selected: item.id === productSelected?.id }\"\n        >\n          <bb-product-item-basic-account-ui\n            [title]=\"item.name\"\n            [amount]=\"item.amount\"\n            [productNumber]=\"item.productNumber\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"true\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n            [active]=\"item.id === productSelected?.id\"\n          ></bb-product-item-basic-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <h2>Autoclose disabled</h2>\n    <bb-product-selector-ui [autoClose]=\"false\">\n      <ng-container bbDropdownToggle>\n        <div\n          *ngIf=\"productSelected\"\n          data-role=\"product-selector-selected-product\"\n          class=\"bb-product-item bb-product-item-basic-account-ui product-item\"\n        >\n          <div class=\"bb-stack bb-stack--wrap bb-text-align-left product-item-content\">\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <span data-role=\"item-name\" class=\"bb-text-bold\"> {{ productSelected?.name }} </span><br />\n              <span data-role=\"item-number\" class=\"bb-text-support bb-subtitle bb-account-info__product-number\">\n                {{ productSelected?.productNumber }}\n              </span>\n            </div>\n            <div class=\"bb-stack__break bb-stack__break--xs\"></div>\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-none bb-product-item__details\"\n            >\n              <div class=\"bb-text-align-right\">\n                <div class=\"bb-text-support bb-subheader bb-subheader--lowercase bb-subheader--regular\">\n                  text herestas\n                </div>\n                <bb-amount-ui\n                  class=\"bb-highlight\"\n                  *ngIf=\"productSelected.amount\"\n                  [amount]=\"productSelected.amount\"\n                  [currency]=\"productSelected.currency\"\n                >\n                </bb-amount-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"!productSelected\" class=\"bb-stack\">\n          <span data-role=\"item-empty-state\" class=\"bb-text-support bb-product-selector__placeholder\">\n            Select one or more accounts\n          </span>\n        </div>\n      </ng-container>\n      <ng-container bbDropdownMenu>\n        <button\n          *ngFor=\"let item of productsInterfaced; let i = index\"\n          (click)=\"productSelected = productsInterfaced[i]\"\n          bbButton\n          color=\"unstyled\"\n          #listItem\n          class=\"bb-product-selector__dropdown-item\"\n          [ngClass]=\"{ selected: item.id === productSelected?.id }\"\n        >\n          <bb-product-item-basic-account-ui\n            [title]=\"item.name\"\n            [amount]=\"item.amount\"\n            [productNumber]=\"item.productNumber\"\n            [currency]=\"'EUR'\"\n            [highlight]=\"true\"\n            [productNumberFormat]=\"{ length: 18, maskRange: [0, 0], segments: 4 }\"\n            [active]=\"item.id === productSelected?.id\"\n          ></bb-product-item-basic-account-ui>\n        </button>\n      </ng-container>\n    </bb-product-selector-ui>\n  </div>\n</div>\n", components: [{ type: i1$y.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i1$3.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i2$f.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
ProductSelectorShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProductSelectorShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-selector-ui-showcase',
                    templateUrl: './product-selector-showcase.component.html',
                }]
        }] });

class ProductSelectorShowcaseModule {
}
ProductSelectorShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProductSelectorShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorShowcaseModule, declarations: [ProductSelectorShowcaseComponent], imports: [CommonModule, ProductSelectorModule, ProductItemBasicAccountModule, AmountModule, ButtonModule] });
ProductSelectorShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorShowcaseModule, imports: [[CommonModule, ProductSelectorModule, ProductItemBasicAccountModule, AmountModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSelectorShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProductSelectorModule, ProductItemBasicAccountModule, AmountModule, ButtonModule],
                    declarations: [ProductSelectorShowcaseComponent],
                    entryComponents: [ProductSelectorShowcaseComponent],
                }]
        }] });

let ProgressbarShowcaseComponent = class ProgressbarShowcaseComponent {
    constructor() {
        this.animate = true;
        this.value = 50;
        this.fulfilledValue = 100;
    }
    ngOnDestroy() {
        clearInterval(this.interval);
    }
    incrementProgress() {
        if (!this.interval) {
            this.interval = setInterval(() => {
                if (this.value < 100) {
                    this.value += 5;
                }
                else if (this.value >= 100) {
                    this.value = Math.round(Math.random() * 100);
                }
            }, 300);
        }
        else {
            clearInterval(this.interval);
            this.interval = undefined;
        }
    }
};
ProgressbarShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgressbarShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProgressbarShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProgressbarShowcaseComponent, selector: "bb-progressbar-ui-showcase", ngImport: i0, template: "<div class=\"col-6\">\n  <section class=\"bb-block bb-block--xl\">\n    <h4>Small</h4>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"4px\" [showValue]=\"false\" [value]=\"0\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"4px\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"4px\" [showValue]=\"false\" [value]=\"fulfilledValue\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"4px\" [striped]=\"true\" [showValue]=\"false\" [value]=\"value\">\n      </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"4px\" [striped]=\"true\" [showValue]=\"false\" [value]=\"fulfilledValue\">\n      </bb-progressbar-ui>\n    </div>\n  </section>\n  <section class=\"bb-block bb-block--xl\">\n    <h4>Medium</h4>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"8px\" [showValue]=\"false\" [value]=\"0\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"8px\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"8px\" [showValue]=\"false\" [value]=\"fulfilledValue\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"8px\" [striped]=\"true\" [showValue]=\"false\" [value]=\"value\">\n      </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" height=\"8px\" [striped]=\"true\" [showValue]=\"false\" [value]=\"fulfilledValue\">\n      </bb-progressbar-ui>\n    </div>\n  </section>\n  <section class=\"bb-block bb-block--xl\">\n    <h4>Large</h4>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" [showValue]=\"false\" [value]=\"0\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" [showValue]=\"false\" [value]=\"fulfilledValue\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" [showValue]=\"false\" [value]=\"value\" [striped]=\"true\"> </bb-progressbar-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" [striped]=\"true\" [showValue]=\"false\" [value]=\"fulfilledValue\">\n      </bb-progressbar-ui>\n    </div>\n  </section>\n  <section class=\"bb-block bb-block--xl\">\n    <h4>Types</h4>\n    <h5>Primary</h5>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"primary\" [striped]=\"true\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n    <h5>Success</h5>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"success\" [striped]=\"true\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n    <h5>Info</h5>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"info\" [striped]=\"true\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n    <h5>Warning</h5>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"warning\" [striped]=\"true\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n    <h5>Danger</h5>\n    <div class=\"bb-block bb-block--lg\">\n      <bb-progressbar-ui type=\"danger\" [striped]=\"true\" [showValue]=\"false\" [value]=\"value\"> </bb-progressbar-ui>\n    </div>\n  </section>\n</div>\n", components: [{ type: i1$A.ProgressbarComponent, selector: "bb-progressbar-ui", inputs: ["height", "max", "showValue", "striped", "animated", "type", "value"] }] });
ProgressbarShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ProgressbarShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgressbarShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-progressbar-ui-showcase',
                    templateUrl: './progressbar-showcase.component.html',
                }]
        }], ctorParameters: function () { return []; } });

class ProgressbarShowcaseModule {
}
ProgressbarShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgressbarShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ProgressbarShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgressbarShowcaseModule, declarations: [ProgressbarShowcaseComponent], imports: [CommonModule, ProgressbarModule] });
ProgressbarShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgressbarShowcaseModule, imports: [[CommonModule, ProgressbarModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProgressbarShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ProgressbarModule],
                    declarations: [ProgressbarShowcaseComponent],
                    entryComponents: [ProgressbarShowcaseComponent],
                }]
        }] });

let RichTextEditorShowcaseComponent = class RichTextEditorShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            modelMessage: '',
            modelMessage2: '',
        });
    }
};
RichTextEditorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorShowcaseComponent, selector: "bb-rich-text-editor-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"bb-block bb-block--xl\">\n    <p>\n      <bb-rich-text-editor-ui\n        #richTextEditor\n        [id]=\"'modelMessage'\"\n        label=\"Message (rich text editor)\"\n        formControlName=\"modelMessage\"\n        placeholder=\"Please, enter your message\"\n        [maxLength]=\"300\"\n        [readonly]=\"false\"\n        [required]=\"true\"\n        [aria-describedby]=\"'a4678b54-18f3-46eb-9f36-542093e5ece2'\"\n      ></bb-rich-text-editor-ui>\n    </p>\n    <p id=\"a4678b54-18f3-46eb-9f36-542093e5ece2\">\n      {{ richTextEditor.maxLength }} characters is the maximum, but the shorter the better.\n    </p>\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Disabled editor</h4>\n    <p>\n      <bb-rich-text-editor-ui\n        [id]=\"'modelMessage2'\"\n        label=\"Message\"\n        formControlName=\"modelMessage2\"\n        placeholder=\"Please, enter your message\"\n        [maxLength]=\"300\"\n        [disabled]=\"true\"\n      ></bb-rich-text-editor-ui>\n    </p>\n  </div>\n</form>\n", components: [{ type: i2$g.RichTextEditorComponent, selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
RichTextEditorShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], RichTextEditorShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-ui-showcase',
                    templateUrl: './rich-text-editor-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class RichTextEditorShowcaseModule {
}
RichTextEditorShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
RichTextEditorShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorShowcaseModule, declarations: [RichTextEditorShowcaseComponent], imports: [CommonModule, RichTextEditorModule, ReactiveFormsModule] });
RichTextEditorShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorShowcaseModule, imports: [[CommonModule, RichTextEditorModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RichTextEditorModule, ReactiveFormsModule],
                    declarations: [RichTextEditorShowcaseComponent],
                    entryComponents: [RichTextEditorShowcaseComponent],
                }]
        }] });

const startsWithCaseInsensitive = (haystack, needle) => haystack.toLowerCase().startsWith(needle.toLowerCase());
let SearchBoxShowcaseComponent = class SearchBoxShowcaseComponent {
    constructor() {
        this.form = new FormGroup({
            name: new FormControl('John Doe'),
        });
        this.typeaheadOptions = {
            ngbTypeahead: this.search,
        };
    }
    search(text) {
        const searchItems = ['John', 'Jane', 'James', 'Joey'];
        return text.pipe(map((term) => searchItems.filter((item) => startsWithCaseInsensitive(item, term))));
    }
    customSearch(text) {
        const searchItems = [
            {
                fullName: 'John',
                legalEntityName: 'Legal Entity 1',
            },
            {
                fullName: 'Jane',
                legalEntityName: 'Legal Entity 2',
            },
            {
                fullName: 'James',
                legalEntityName: 'Legal Entity 3',
            },
            {
                fullName: 'Joey',
                legalEntityName: 'Legal Entity 4',
            },
        ];
        return text.pipe(map((term) => searchItems.filter((item) => startsWithCaseInsensitive(item.fullName, term))));
    }
    customInputFormatter(person) {
        return person.fullName;
    }
    get typeaheadOptionsWithTemplate() {
        return {
            ngbTypeahead: this.customSearch,
            resultTemplate: this.resultTemplate,
            inputFormatter: this.customInputFormatter,
        };
    }
};
SearchBoxShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SearchBoxShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SearchBoxShowcaseComponent, selector: "bb-search-box-ui-showcase", viewQueries: [{ propertyName: "resultTemplate", first: true, predicate: ["rt"], descendants: true, static: true }], ngImport: i0, template: "<form [formGroup]=\"form\">\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Small</h4>\n    <bb-search-box-ui\n      formControlName=\"name\"\n      [showClear]=\"true\"\n      [showSearch]=\"true\"\n      placeholder=\"Search box with autocomplete. Start typing with letter 'J'\"\n      [typeaheadOptions]=\"typeaheadOptions\"\n      size=\"sm\"\n      [attr.data-role]=\"'searchbox-small'\"\n    >\n    </bb-search-box-ui>\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Medium</h4>\n    <div class=\"bb-block bb-block--lg\">\n      <h5>Hide search</h5>\n      <bb-search-box-ui\n        formControlName=\"name\"\n        [showClear]=\"true\"\n        [showSearch]=\"false\"\n        placeholder=\"Search box with autocomplete. Start typing with letter 'J'\"\n        [typeaheadOptions]=\"typeaheadOptions\"\n        [attr.data-role]=\"'searchbox-medium'\"\n      >\n      </bb-search-box-ui>\n    </div>\n    <div class=\"bb-block bb-block--lg\">\n      <h5>Hide clear</h5>\n      <bb-search-box-ui\n        formControlName=\"name\"\n        [showClear]=\"false\"\n        [showSearch]=\"true\"\n        placeholder=\"Search box with autocomplete. Start typing with letter 'J'\"\n        [typeaheadOptions]=\"typeaheadOptions\"\n        [attr.data-role]=\"'searchbox-medium'\"\n      >\n      </bb-search-box-ui>\n    </div>\n    <div>\n      <h5>Hide both clear and search</h5>\n      <bb-search-box-ui\n        formControlName=\"name\"\n        [showClear]=\"false\"\n        [showSearch]=\"false\"\n        placeholder=\"Search box with autocomplete. Start typing with letter 'J'\"\n        [typeaheadOptions]=\"typeaheadOptions\"\n        [attr.data-role]=\"'searchbox-medium'\"\n      >\n      </bb-search-box-ui>\n    </div>\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Disabled</h4>\n    <bb-search-box-ui\n      formControlName=\"name\"\n      [showClear]=\"false\"\n      [showSearch]=\"false\"\n      placeholder=\"Search box with autocomplete. Start typing with letter 'J'\"\n      [typeaheadOptions]=\"typeaheadOptions\"\n      [disabled]=\"true\"\n      [attr.data-role]=\"'searchbox-disabled'\"\n    >\n    </bb-search-box-ui>\n  </div>\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Search with custom template</h4>\n    <bb-search-box-ui\n      formControlName=\"name\"\n      [showClear]=\"true\"\n      [showSearch]=\"true\"\n      placeholder=\"Search box with autocomplete. Start typing with letter 'J'\"\n      [typeaheadOptions]=\"typeaheadOptionsWithTemplate\"\n      [attr.data-role]=\"'searchbox-with-autocomplete'\"\n    >\n    </bb-search-box-ui>\n  </div>\n</form>\n\n<ng-template #rt let-r=\"result\">\n  <div class=\"p-2 w-50\">\n    <div class=\"font-weight-bold\">{{ r.fullName }}</div>\n    <div class=\"text-support\">{{ r.legalEntityName }}</div>\n  </div>\n</ng-template>\n", components: [{ type: i1$z.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
SearchBoxShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], SearchBoxShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-search-box-ui-showcase',
                    templateUrl: './search-box-showcase.component.html',
                }]
        }], propDecorators: { resultTemplate: [{
                type: ViewChild,
                args: ['rt', { static: true }]
            }] } });

class SearchBoxShowcaseModule {
}
SearchBoxShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SearchBoxShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxShowcaseModule, declarations: [SearchBoxShowcaseComponent], imports: [CommonModule, SearchBoxModule, ReactiveFormsModule] });
SearchBoxShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxShowcaseModule, imports: [[CommonModule, SearchBoxModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, SearchBoxModule, ReactiveFormsModule],
                    declarations: [SearchBoxShowcaseComponent],
                    entryComponents: [SearchBoxShowcaseComponent],
                }]
        }] });

let SelectListShowcaseComponent = class SelectListShowcaseComponent {
    constructor() {
        /** Examples for standard data structure - e.g. { name: '', value: '' } */
        this.singleSelectItems = [
            { name: 'Single One', value: 'single-one' },
            { name: 'Single Two', value: 'single-two' },
            { name: 'Single Three', value: 'single-three' },
        ];
        this.multiSelectItems = [
            { name: 'Multi One', value: 'multi-one' },
            { name: 'Multi Two', value: 'multi-two' },
            { name: 'Multi Three', value: 'multi-three' },
            { name: 'Multi Four', value: 'multi-four' },
            { name: 'Multi Five', value: 'multi-five' },
        ];
        /** Example for non-standard data structure - e.g. { name: '', code: '' } */
        this.countries = [
            { name: 'France', code: 'FRA' },
            { name: 'Germany', code: 'GER' },
            { name: 'Italy', code: 'ITA' },
            { name: 'United Kingdom', code: 'UK' },
        ];
        this.itemsObservable$ = of([
            { name: 'Item One', value: 'item-one' },
            { name: 'Item Two', value: 'item-two' },
        ]);
        this.searchOnLoadSubject = new BehaviorSubject('');
        this.searchAfterValueSubject = new Subject();
        this.loadingSubject = new BehaviorSubject(false);
        this.searchOnLoadItems$ = this.searchOnLoadSubject.pipe(tap(() => this.loadingSubject.next(true)), delay(1000), switchMap(() => this.itemsObservable$), tap(() => this.loadingSubject.next(false)));
        this.loading = this.loadingSubject.asObservable();
        this.searchAfterValueItems$ = this.searchAfterValueSubject.pipe(switchMap(() => this.itemsObservable$));
    }
    ngOnInit() {
        this.form = new FormGroup({
            singleSelect: new FormControl(null),
            multipleSelect: new FormControl([]),
            multipleSelectDestinations: new FormControl([]),
            multipleSelectObservable: new FormControl([]),
            searchOnLoad: new FormControl(undefined),
            searchAfterValue: new FormControl(undefined),
        });
    }
    searchOnLoad(value) {
        this.searchOnLoadSubject.next(value);
    }
    searchAfterValue(value) {
        this.searchAfterValueSubject.next(value);
    }
};
SelectListShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SelectListShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectListShowcaseComponent, selector: "bb-select-list-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"singleSelectLabel\">Single Select</h4>\n    <bb-select-list-ui\n      id=\"select-list\"\n      formControlName=\"singleSelect\"\n      placeholder=\"Start typing. e.g. single\"\n      [items]=\"singleSelectItems\"\n      minTermLength=\"3\"\n      aria-labelledby=\"singleSelectLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <bb-select-list-ui\n      id=\"select-list2\"\n      formControlName=\"singleSelect\"\n      placeholder=\"Start typing. e.g. single\"\n      [items]=\"singleSelectItems\"\n      minTermLength=\"3\"\n      label=\"Embed label\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"multipleSelectLabel\">Multiple Select - Max. 3 selections</h4>\n    <bb-select-list-ui\n      id=\"select-list-multi\"\n      formControlName=\"multipleSelect\"\n      placeholder=\"Start typing. e.g. multi\"\n      [items]=\"multiSelectItems\"\n      minTermLength=\"3\"\n      [multiple]=\"true\"\n      maxSelectedItems=\"3\"\n      aria-labelledby=\"multipleSelectLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"multipleSelectLabelDestinations\">Multiple Select - Non-Standard Data Structure</h4>\n    <bb-select-list-ui\n      id=\"select-list-multi-destinations\"\n      formControlName=\"multipleSelectDestinations\"\n      placeholder=\"Start typing. e.g. germany\"\n      [items]=\"countries\"\n      minTermLength=\"3\"\n      [multiple]=\"true\"\n      aria-labelledby=\"multipleSelectLabelDestinations\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"multipleSelectLabelObservable\">Multiple Select - Items from Observable</h4>\n    <bb-select-list-ui\n      id=\"select-list-multi-observable\"\n      formControlName=\"multipleSelectObservable\"\n      placeholder=\"Start typing. e.g. item\"\n      [items]=\"itemsObservable$ | async\"\n      minTermLength=\"3\"\n      [multiple]=\"true\"\n      aria-labelledby=\"multipleSelectLabelObservable\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"searchOnLoadLabel\">Single Select - Dynamic items list, retrieved on page load</h4>\n    <bb-select-list-ui\n      label=\"Search on load\"\n      formControlName=\"searchOnLoad\"\n      placeholder=\"Click to open dropdown, items are loaded when page is. Typing will return back the input value\"\n      [items]=\"searchOnLoadItems$ | async\"\n      [filterEnabled]=\"false\"\n      minTermLength=\"3\"\n      [loading]=\"loading | async\"\n      (search)=\"searchOnLoad($event)\"\n      aria-labelledby=\"searchOnLoadLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"searchAfterValueLabel\">Single Select - Dynamic items list, retrieved after first search</h4>\n    <bb-select-list-ui\n      formControlName=\"searchAfterValue\"\n      placeholder=\"Items are loaded when you search. Typing will return back the input value\"\n      [items]=\"searchAfterValueItems$ | async\"\n      [filterEnabled]=\"false\"\n      minTermLength=\"3\"\n      (search)=\"searchAfterValue($event)\"\n      aria-labelledby=\"searchAfterValueLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n</form>\n", components: [{ type: i1$M.SelectListComponent, selector: "bb-select-list-ui", inputs: ["loading", "placeholder", "minTermLength", "maxSelectedItems", "multiple", "items", "filterEnabled"], outputs: ["valueChange", "search", "clear"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i4.AsyncPipe } });
SelectListShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], SelectListShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-list-ui-showcase',
                    templateUrl: './select-list-showcase.component.html',
                }]
        }] });

class SelectListShowcaseModule {
}
SelectListShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SelectListShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseModule, declarations: [SelectListShowcaseComponent], imports: [CommonModule, SelectListModule, FormsModule, ReactiveFormsModule] });
SelectListShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseModule, imports: [[CommonModule, SelectListModule, FormsModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, SelectListModule, FormsModule, ReactiveFormsModule],
                    declarations: [SelectListShowcaseComponent],
                    entryComponents: [SelectListShowcaseComponent],
                }]
        }] });

let StepperShowcaseComponent = class StepperShowcaseComponent {
    constructor() {
        this.data = '';
        this.steps = [
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: true,
                isActive: true,
            },
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                isCurrent: true,
                isChecked: false,
                isActive: true,
            },
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: false,
                isActive: false,
            },
        ];
        this.stepsWithChildren = [
            {
                label: 'Select a category',
                stateLabel: 'Successful',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: true,
                isActive: true,
            },
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                stateLabel: 'Done',
                data: 'category-1',
                isCurrent: false,
                isChecked: true,
                isActive: true,
            },
            {
                label: 'Select a category',
                stateLabel: 'Open',
                ariaLabel: 'Select a category step',
                isCurrent: true,
                isChecked: false,
                isActive: true,
                children: [
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        data: 'category-2',
                        isCurrent: false,
                        isChecked: true,
                        isActive: true,
                    },
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        isCurrent: true,
                        isChecked: false,
                        isActive: true,
                    },
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        data: 'category-3',
                        isCurrent: false,
                        isChecked: false,
                        isActive: false,
                    },
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        isCurrent: false,
                        isChecked: false,
                        isActive: false,
                    },
                ],
            },
            {
                label: 'Select a category',
                stateLabel: 'Open',
                data: 'category-4',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: false,
                isActive: false,
            },
            {
                label: 'Select a category',
                stateLabel: 'Open',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: false,
                isActive: false,
            },
        ];
    }
    showData(data) {
        this.data = data;
    }
};
StepperShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
StepperShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StepperShowcaseComponent, selector: "bb-stepper-ui-showcase", ngImport: i0, template: "<div class=\"mb-4\">\n  <h2>With labels</h2>\n  <div class=\"mt-4 col-8\">\n    <bb-stepper-ui>\n      <bb-stepper-step-ui\n        *ngFor=\"let step of steps\"\n        [label]=\"step.label\"\n        [ariaLabel]=\"step.ariaLabel\"\n        [isCurrent]=\"step.isCurrent\"\n        [isChecked]=\"step.isChecked\"\n        [isActive]=\"step.isActive\"\n      ></bb-stepper-step-ui>\n    </bb-stepper-ui>\n  </div>\n</div>\n<div class=\"mb-4\">\n  <h2>Without labels</h2>\n  <div class=\"mt-4 col-3\">\n    <bb-stepper-ui>\n      <bb-stepper-step-ui\n        *ngFor=\"let step of steps\"\n        [isCurrent]=\"step.isCurrent\"\n        [isChecked]=\"step.isChecked\"\n        [isActive]=\"step.isActive\"\n      ></bb-stepper-step-ui>\n    </bb-stepper-ui>\n  </div>\n</div>\n<div class=\"mb-4\">\n  <h2>Vertical with sub-steps, state labels and links</h2>\n  <p>Steps 2, 3.1, 3.3 and 4 are links and change state on hover. URL: {{ data || 'click on links...' }}</p>\n  <div class=\"mt-4 col-4\">\n    <bb-stepper-ui class=\"bb-stepper--vertical\" (select)=\"showData($event)\">\n      <bb-stepper-step-ui\n        *ngFor=\"let step of stepsWithChildren\"\n        [label]=\"step.label\"\n        [ariaLabel]=\"step.ariaLabel\"\n        [stateLabel]=\"step.stateLabel\"\n        [data]=\"step.data\"\n        [isCurrent]=\"step.isCurrent\"\n        [isChecked]=\"step.isChecked\"\n        [isActive]=\"step.isActive\"\n      >\n        <bb-stepper-step-ui\n          *ngFor=\"let step of step.children\"\n          [label]=\"step.label\"\n          [ariaLabel]=\"step.label\"\n          [data]=\"step.data\"\n          [isCurrent]=\"step.isCurrent\"\n          [isActive]=\"step.isActive\"\n          [isChecked]=\"step.isChecked\"\n        ></bb-stepper-step-ui>\n      </bb-stepper-step-ui>\n    </bb-stepper-ui>\n  </div>\n</div>\n", components: [{ type: i1$C.StepperComponent, selector: "bb-stepper-ui", outputs: ["select"] }, { type: i1$C.StepperStepComponent, selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
StepperShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], StepperShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stepper-ui-showcase',
                    templateUrl: './stepper-showcase.component.html',
                }]
        }] });

class StepperShowcaseModule {
}
StepperShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
StepperShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseModule, declarations: [StepperShowcaseComponent], imports: [CommonModule, StepperModule] });
StepperShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseModule, imports: [[CommonModule, StepperModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, StepperModule],
                    declarations: [StepperShowcaseComponent],
                    entryComponents: [StepperShowcaseComponent],
                }]
        }] });

let SwitchShowcaseComponent = class SwitchShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.value = true;
        this.vForm = this.formBuilder.group({
            defaultSwitch1: false,
            defaultSwitch2: false,
            defaultSwitch3: false,
            defaultSwitch4: true,
            defaultSwitch5: { value: false, disabled: true },
            defaultSwitch6: { value: true, disabled: true },
        });
    }
};
SwitchShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
SwitchShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SwitchShowcaseComponent, selector: "bb-switch-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"bb-block bb-block--md\">\n    <bb-switch-ui [id]=\"'defaultSwitch4'\" aria-label=\"Switch without visible label\" formControlName=\"defaultSwitch4\">\n    </bb-switch-ui>\n  </div>\n  <div class=\"bb-block bb-block--md\">\n    <bb-switch-ui [id]=\"'defaultSwitch5'\" aria-label=\"Disabled switch\" formControlName=\"defaultSwitch5\"> </bb-switch-ui>\n  </div>\n  <div class=\"bb-block bb-block--md\">\n    <bb-switch-ui\n      [labelPosition]=\"'right'\"\n      [label]=\"'Label'\"\n      [id]=\"'defaultSwitch3'\"\n      formControlName=\"defaultSwitch3\"\n      aria-label=\"Switch with visible label (on the right)\"\n    >\n    </bb-switch-ui>\n  </div>\n  <div>\n    <bb-switch-ui\n      [label]=\"'Label'\"\n      [id]=\"'defaultSwitch2'\"\n      formControlName=\"defaultSwitch2\"\n      aria-label=\"Switch with visible label (on the left)\"\n    >\n    </bb-switch-ui>\n  </div>\n</form>\n", components: [{ type: i2$h.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
SwitchShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], SwitchShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-switch-ui-showcase',
                    templateUrl: './switch-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class SwitchShowcaseModule {
}
SwitchShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
SwitchShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchShowcaseModule, declarations: [SwitchShowcaseComponent], imports: [CommonModule, SwitchModule, ReactiveFormsModule] });
SwitchShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchShowcaseModule, imports: [[CommonModule, SwitchModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, SwitchModule, ReactiveFormsModule],
                    declarations: [SwitchShowcaseComponent],
                    entryComponents: [SwitchShowcaseComponent],
                }]
        }] });

let TabShowcaseComponent = class TabShowcaseComponent {
    constructor() {
        this.index = 0;
    }
    onTabSelect(index) {
        this.index = index;
        console.log(`Selected tab with index: ${index}`);
    }
    onClick($event) {
        $event.stopPropagation();
        $event.preventDefault();
    }
};
TabShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TabShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TabShowcaseComponent, selector: "bb-tab-ui-showcase", ngImport: i0, template: "<h4>Tab group - Light</h4>\n\n<div class=\"bb-block bb-block--lg\">\n  <bb-tab-group-ui [initialSelection]=\"0\" (select)=\"onTabSelect($event)\" (click)=\"onClick($event)\">\n    <bb-tab-ui>First</bb-tab-ui>\n    <bb-tab-ui>Second</bb-tab-ui>\n    <bb-tab-ui>\n      <div class=\"bb-stack\">\n        <span class=\"bb-stack__item bb-stack__item--spacing-xs\">Third</span>\n        <bb-badge-counter-ui\n          class=\"bb-stack__item\"\n          [count]=\"3\"\n          [maxCount]=\"10\"\n          [color]=\"'danger'\"\n        ></bb-badge-counter-ui>\n      </div>\n    </bb-tab-ui>\n  </bb-tab-group-ui>\n</div>\n<h4>Tab group - Dark (Theme v2 only)</h4>\n\n<div class=\"bg-dark bb-block bb-block--lg\">\n  <bb-tab-group-ui\n    class=\"bb-tab--inverse\"\n    [initialSelection]=\"0\"\n    (select)=\"onTabSelect($event)\"\n    (click)=\"onClick($event)\"\n  >\n    <bb-tab-ui>First</bb-tab-ui>\n    <bb-tab-ui>Second</bb-tab-ui>\n    <bb-tab-ui>\n      <div class=\"bb-stack\">\n        <span class=\"bb-stack__item bb-stack__item--spacing-xs\">Third</span>\n        <bb-badge-counter-ui\n          class=\"bb-stack__item\"\n          [count]=\"3\"\n          [maxCount]=\"10\"\n          [color]=\"'danger'\"\n        ></bb-badge-counter-ui>\n      </div>\n    </bb-tab-ui>\n  </bb-tab-group-ui>\n</div>\n\n<h4>Animated tabs</h4>\n\n<div class=\"bb-quick-transfer__tabs-container\">\n  <bb-tab-group-ui [initialSelection]=\"0\" (select)=\"onTabSelect($event)\" (click)=\"onClick($event)\">\n    <bb-tab-ui>First</bb-tab-ui>\n    <bb-tab-ui>Second</bb-tab-ui>\n    <bb-tab-ui>Third</bb-tab-ui>\n  </bb-tab-group-ui>\n  <div class=\"scrollable-box-content position-relative\" [@tabsAnimation]=\"index\">\n    <div data-role=\"first-tab\" *ngIf=\"index === 0\">First tab content here</div>\n    <div data-role=\"second-tab\" *ngIf=\"index === 1\">Second tab content here</div>\n    <div data-role=\"third-tab\" *ngIf=\"index === 2\">Third tab content here</div>\n  </div>\n</div>\n", components: [{ type: i2$j.TabGroupComponent, selector: "bb-tab-group-ui", inputs: ["initialSelection"], outputs: ["select"] }, { type: i2$j.TabComponent, selector: "bb-tab-ui" }, { type: i1$5.BadgeCounterComponent, selector: "bb-badge-counter-ui", inputs: ["color", "count", "maxCount"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [tabsAnim] });
TabShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], TabShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tab-ui-showcase',
                    templateUrl: './tab-showcase.component.html',
                    animations: [tabsAnim],
                }]
        }] });

class TabShowcaseModule {
}
TabShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TabShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabShowcaseModule, declarations: [TabShowcaseComponent], imports: [CommonModule, TabModule, BadgeCounterModule] });
TabShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabShowcaseModule, imports: [[CommonModule, TabModule, BadgeCounterModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TabShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TabModule, BadgeCounterModule],
                    declarations: [TabShowcaseComponent],
                    entryComponents: [TabShowcaseComponent],
                }]
        }] });

const COUNTRIES = [
    {
        id: 1,
        name: 'Russia',
        capital: 'Moscow',
        capitalPopulation: 10000000,
        flag: 'f/f3/Flag_of_Russia.svg',
        area: 17075200,
        population: 146989754,
    },
    {
        id: 2,
        name: 'France',
        capital: 'Paris',
        capitalPopulation: 10000000,
        flag: 'c/c3/Flag_of_France.svg',
        area: 640679,
        population: 64979548,
    },
    {
        id: 3,
        name: 'Germany',
        capital: 'Berlin',
        capitalPopulation: 10000000,
        flag: 'b/ba/Flag_of_Germany.svg',
        area: 357114,
        population: 82114224,
    },
    {
        id: 4,
        name: 'Portugal',
        capital: 'Lisbon',
        capitalPopulation: 10000000,
        flag: '5/5c/Flag_of_Portugal.svg',
        area: 92090,
        population: 10329506,
    },
    {
        id: 5,
        name: 'Canada',
        capital: 'Ottawa',
        capitalPopulation: 10000000,
        flag: 'c/cf/Flag_of_Canada.svg',
        area: 9976140,
        population: 36624199,
    },
    {
        id: 6,
        name: 'Vietnam',
        capital: 'Hanoi',
        capitalPopulation: 10000000,
        flag: '2/21/Flag_of_Vietnam.svg',
        area: 331212,
        population: 95540800,
    },
    {
        id: 7,
        name: 'Brazil',
        capital: 'Brazil',
        capitalPopulation: 10000000,
        flag: '0/05/Flag_of_Brazil.svg',
        area: 8515767,
        population: 209288278,
    },
    {
        id: 8,
        name: 'Mexico',
        capital: 'Mexico city',
        capitalPopulation: 10000000,
        flag: 'f/fc/Flag_of_Mexico.svg',
        area: 1964375,
        population: 129163276,
    },
    {
        id: 9,
        name: 'United States',
        capital: 'Washington',
        capitalPopulation: 10000000,
        flag: 'a/a4/Flag_of_the_United_States.svg',
        area: 9629091,
        population: 324459463,
    },
    {
        id: 10,
        name: 'India',
        capital: 'New Delhi',
        capitalPopulation: 10000000,
        flag: '4/41/Flag_of_India.svg',
        area: 3287263,
        population: 1324171354,
    },
    {
        id: 11,
        name: 'Indonesia',
        capital: 'Jakarta',
        capitalPopulation: 10000000,
        flag: '9/9f/Flag_of_Indonesia.svg',
        area: 1910931,
        population: 263991379,
    },
    {
        id: 12,
        name: 'Tuvalu',
        capital: 'Funafuti',
        capitalPopulation: 10000000,
        flag: '3/38/Flag_of_Tuvalu.svg',
        area: 26,
        population: 11097,
    },
    {
        id: 13,
        name: 'China',
        capital: 'Beijing',
        capitalPopulation: 10000000,
        flag: 'f/fa/Flag_of_the_People%27s_Republic_of_China.svg',
        area: 9596960,
        population: 1409517397,
    },
];

let TableShowcaseComponent = class TableShowcaseComponent {
    constructor() {
        this.currentPage = 0;
        this.pageSize = 10;
        this.rotate = { asc: 'ascending', desc: 'descending', '': '' };
        this.iconMap = { asc: 'caret-up', desc: 'caret-down', '': '' };
        this.sortDirection = '';
        this.activeSortingOption = {};
        this.sortingOptions = [
            { label: 'Capital', value: 'capital', direction: '' },
            { label: 'Population', value: 'population', direction: '' },
        ];
        this.countries$ = of(this.getItems(0, this.pageSize));
    }
    onSort({ column, direction }) {
        this.activeSortingOption = {};
        const selectedOption = this.sortingOptions.find((option) => option.value === column);
        if (selectedOption && direction !== '') {
            this.activeSortingOption = selectedOption;
            this.activeSortingOption.direction = direction;
        }
        this.countries$ = of(this.sort(this.getItems(this.currentPage * this.pageSize, this.currentPage * this.pageSize + this.pageSize), column, direction));
    }
    onRowSelect(data) {
        this.selected = data;
    }
    onRowClick(data) {
        this.tableRef.toggleItem(data, !this.tableRef.isSelected(data));
    }
    search(value) {
        this.countries$ =
            value === ''
                ? of(this.getItems(this.currentPage, this.pageSize))
                : of(COUNTRIES.filter((country) => country.name.toLowerCase().includes(value)));
    }
    sort(countries, column, direction) {
        this.sortDirection = this.rotate[direction];
        if (direction === '') {
            return countries;
        }
        else {
            return [...countries].sort((a, b) => {
                const res = this.compare(a[column], b[column]);
                return direction === 'asc' ? res : -res;
            });
        }
    }
    compare(v1, v2) {
        return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;
    }
    getItems(start, end) {
        return COUNTRIES.slice(start, end);
    }
    get paginator() {
        return {
            page: this.currentPage,
            boundaryLinks: false,
            directionLinks: true,
            totalItems: COUNTRIES.length,
            itemsPerPage: this.pageSize,
            maxNavPages: 3,
            onPageChange: (page) => {
                this.countries$ = of(this.getItems(page * this.pageSize, page * this.pageSize + this.pageSize));
            },
        };
    }
};
TableShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableShowcaseComponent, selector: "bb-table-ui-showcase", viewQueries: [{ propertyName: "tableRef", first: true, predicate: ["tableRef"], descendants: true, read: TableDirective, static: true }], ngImport: i0, template: "<div class=\"card shadow-sm\">\n  <div class=\"card-body\">\n    <div class=\"table-responsive\">\n      <table\n        #tableRef\n        (rowClick)=\"onRowClick($event)\"\n        (selectRow)=\"onRowSelect($event)\"\n        (sort)=\"onSort($event)\"\n        [bbTable]=\"countries$ | async\"\n        bbTableFocus\n        class=\"table table-hover\"\n        data-role=\"table-showcase\"\n      >\n        <!--Add empty caption to fix sonar warning-->\n        <caption></caption>\n        <thead>\n          <tr>\n            <th\n              [attr.aria-sort]=\"sortDirection\"\n              [bbSortable]=\"'name'\"\n              scope=\"col\"\n              tabindex=\"0\"\n              data-role=\"table-sort-name\"\n            >\n              <span class=\"th-content\"> Data left aligned </span>\n            </th>\n            <!--set position relative is required. Since the dropdown button(set as position absolute) requires full height and width of the parent element-->\n            <th class=\"position-relative\" bbSortable scope=\"col\" role=\"presentation\" data-role=\"table-sort-dropdown\">\n              <span class=\"th-content\">Capital, Population</span>\n              <!--Add th-dropdown-menu class on dropdown to make it work with <th> tag-->\n              <!--Set role as presentation for dropdown so that screen reader will not read this dropdown.-->\n              <!--bbSortable directive will add necessary role to dropdown button so that button will be actually read as colunmheader by screen readers-->\n              <bb-dropdown-menu-ui\n                btnColor=\"unstyled\"\n                buttonSize=\"sm\"\n                class=\"th-dropdown-menu\"\n                dropDownButtonLabel=\"Capital, Population\"\n                role=\"presentation\"\n                position=\"bottom-left\"\n              >\n                <ng-template bbDropdownMenuItem>\n                  <div class=\"dropdown-header\">\n                    <h3 class=\"bb-subheader bb-text-support\">SORT BY</h3>\n                  </div>\n                  <!--bbTableMenuitem directive is added to facilitate the common behaviour of dropdown item such as active class and click event-->\n                  <button\n                    role=\"menuitem\"\n                    *ngFor=\"let option of sortingOptions\"\n                    class=\"dropdown-item bb-stack\"\n                    [bbDropdownMenuOption]=\"option.value\"\n                  >\n                    <span>\n                      {{ option.label }}\n                    </span>\n                    <bb-icon-ui\n                      class=\"bb-stack__item--push-right\"\n                      *ngIf=\"activeSortingOption.value === option.value\"\n                      [name]=\"iconMap[activeSortingOption.direction]\"\n                    >\n                    </bb-icon-ui>\n                  </button>\n                </ng-template>\n              </bb-dropdown-menu-ui>\n            </th>\n            <th class=\"text-center\" scope=\"col\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <th [attr.aria-sort]=\"sortDirection\" bbSortable=\"area\" scope=\"col\" tabindex=\"0\" data-role=\"table-sort-area\">\n              <span class=\"th-content\"> Area (left aligned) </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <th class=\"text-right\" scope=\"col\">\n              <span class=\"th-content\"> Data right aligned </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let country of countries$ | async\" [bbRow]=\"country\">\n            <th scope=\"row\">\n              <span class=\"th-content\"> Data left aligned </span>\n            </th>\n            <td>\n              <div class=\"bb-stack\">\n                <img\n                  [src]=\"'https://upload.wikimedia.org/wikipedia/commons/' + country.flag\"\n                  [style.width]=\"'20px'\"\n                  [style.verticalAlign]=\"'baseline'\"\n                  alt=\"flag\"\n                  class=\"bb-stack__item--spacing-sm\"\n                  src=\"#\"\n                />\n                {{ country.name }}\n              </div>\n            </td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Capital (left aligned) </span>\n            </th>\n            <td>\n              <span class=\"bb-block bb-block--sm\">{{ country.capital }}</span>\n              <span class=\"text-support\">({{ country.capitalPopulation | number }})</span>\n            </td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <td class=\"text-center\">Some random text here</td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Area (left aligned) </span>\n            </th>\n            <td>Area: {{ country.area }}</td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <td class=\"bb-text-align-center\">\n              <bb-badge-ui color=\"info\" text=\"test\"></bb-badge-ui>\n            </td>\n            <th scope=\"row\" class=\"bb-text-align-right\">\n              <span class=\"th-content\"> Data right aligned </span>\n            </th>\n            <td class=\"bb-text-align-right\">\n              {{ country.population | number }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <bb-pagination-ui\n      (pageChange)=\"paginator.onPageChange($event)\"\n      [boundaryLinks]=\"paginator.boundaryLinks\"\n      [directionLinks]=\"paginator.directionLinks\"\n      [itemsPerPage]=\"paginator.itemsPerPage\"\n      [maxNavPages]=\"paginator.maxNavPages\"\n      [page]=\"paginator.page\"\n      [totalItems]=\"paginator.totalItems\"\n    >\n    </bb-pagination-ui>\n  </div>\n</div>\n", components: [{ type: i1$d.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1$o.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }], directives: [{ type: i1$B.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i1$B.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i1$B.TableSortableDirective, selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i1$d.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$d.DropdownMenuOptionDirective, selector: "[bbDropdownMenuOption]", inputs: ["bbDropdownMenuOption", "active"], outputs: ["selectionChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$B.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }], pipes: { "async": i4.AsyncPipe, "number": i4.DecimalPipe } });
TableShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], TableShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-ui-showcase',
                    templateUrl: './table-showcase.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { tableRef: [{
                type: ViewChild,
                args: ['tableRef', { static: true, read: TableDirective }]
            }] } });

class TableShowcaseModule {
}
TableShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TableShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseModule, declarations: [TableShowcaseComponent], imports: [CommonModule, TableModule, IconModule, DropdownMenuModule, PaginationModule, BadgeModule] });
TableShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseModule, imports: [[CommonModule, TableModule, IconModule, DropdownMenuModule, PaginationModule, BadgeModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TableModule, IconModule, DropdownMenuModule, PaginationModule, BadgeModule],
                    declarations: [TableShowcaseComponent],
                    entryComponents: [TableShowcaseComponent],
                }]
        }] });

let TextareaShowcaseComponent = class TextareaShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            textarea: ['', Validators.minLength(3)],
        });
    }
};
TextareaShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
TextareaShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TextareaShowcaseComponent, selector: "bb-textarea-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-textarea-ui\n    [id]=\"'textarea'\"\n    label=\"What's happening?\"\n    placeholder=\"Enter text...\"\n    formControlName=\"textarea\"\n    [showCharCounter]=\"true\"\n    [minLength]=\"3\"\n    [maxLength]=\"20\"\n    [rows]=\"3\"\n    [cols]=\"50\"\n    [aria-describedby]=\"'textAreaError'\"\n    wrap=\"hard\"\n  >\n  </bb-textarea-ui>\n  <bb-input-validation-message-ui [id]=\"'textAreaError'\" [showErrors]=\"vForm?.dirty && vForm?.get('textarea')?.errors\">\n    <p role=\"alert\">This field is not correct.</p>\n  </bb-input-validation-message-ui>\n</form>\n", components: [{ type: i2$i.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i3$2.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
TextareaShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], TextareaShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-textarea-ui-showcase',
                    templateUrl: './textarea-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class TextareaShowcaseModule {
}
TextareaShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TextareaShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaShowcaseModule, declarations: [TextareaShowcaseComponent], imports: [CommonModule, TextareaModule, ReactiveFormsModule, InputValidationMessageModule] });
TextareaShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaShowcaseModule, imports: [[CommonModule, TextareaModule, ReactiveFormsModule, InputValidationMessageModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TextareaShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TextareaModule, ReactiveFormsModule, InputValidationMessageModule],
                    declarations: [TextareaShowcaseComponent],
                    entryComponents: [TextareaShowcaseComponent],
                }]
        }] });

let TooltipShowcaseComponent = class TooltipShowcaseComponent {
};
TooltipShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TooltipShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TooltipShowcaseComponent, selector: "bb-tooltip-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form>\n      <p>\n        <label [for]=\"nameInput.id\"\n          >Full name: (medium tooltip top)\n          <bb-icon-ui name=\"help-outline\" [bbTooltip]=\"fullNameTip\" placement=\"top\" color=\"info\"></bb-icon-ui>\n        </label>\n        <bb-input-text-ui #nameInput placeholder=\"Full name\"></bb-input-text-ui>\n      </p>\n      <p>\n        <label [for]=\"addressInput.id\"\n          >Address: (tooltip right)\n          <bb-icon-ui name=\"help-outline\" [bbTooltip]=\"addressTip\" placement=\"right\" color=\"info\"></bb-icon-ui>\n        </label>\n        <bb-input-text-ui #addressInput placeholder=\"Last name and suffix\"></bb-input-text-ui>\n      </p>\n      <p>\n        <label [for]=\"phoneInput.id\"\n          >Phone number: (tooltip bottom)\n          <bb-icon-ui name=\"help-outline\" [bbTooltip]=\"spacesInputTip\" placement=\"bottom\" color=\"info\"></bb-icon-ui>\n        </label>\n        <bb-input-text-ui #phoneInput placeholder=\"+0000000000\"></bb-input-text-ui>\n      </p>\n      <p>\n        <label [for]=\"ibanInput.id\">\n          <bb-icon-ui name=\"help-outline\" [bbTooltip]=\"spacesInputTip\" placement=\"left\" color=\"info\"></bb-icon-ui>\n          IBAN: (tooltip left)\n        </label>\n        <bb-input-text-ui #ibanInput placeholder=\"IBAN\"></bb-input-text-ui>\n      </p>\n    </form>\n  </div>\n</div>\n\n<ng-template #fullNameTip>Do not abbreviate given names or infix</ng-template>\n<ng-template #addressTip>Include street and number</ng-template>\n<ng-template #spacesInputTip>Do not include spaces</ng-template>\n", components: [{ type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }], directives: [{ type: i2$k.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
TooltipShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], TooltipShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-tooltip-ui-showcase',
                    templateUrl: './tooltip-showcase.component.html',
                }]
        }] });

class TooltipShowcaseModule {
}
TooltipShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TooltipShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipShowcaseModule, declarations: [TooltipShowcaseComponent], imports: [CommonModule, TooltipModule, IconModule, InputTextModule] });
TooltipShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipShowcaseModule, imports: [[CommonModule, TooltipModule, IconModule, InputTextModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TooltipModule, IconModule, InputTextModule],
                    declarations: [TooltipShowcaseComponent],
                    entryComponents: [TooltipShowcaseComponent],
                }]
        }] });

let InputFileShowcaseComponent = class InputFileShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            fileInput1: undefined,
            fileInput2: undefined,
            fileInput3: undefined,
            fileInput4: undefined,
            fileInput5: undefined,
            fileInput6: undefined,
            fileInput7: undefined,
        });
    }
    onUpload(event) {
        console.log(event);
        console.log(this.vForm);
    }
};
InputFileShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputFileShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputFileShowcaseComponent, selector: "bb-input-file-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"bb-block bb-block--lg\">\n    <h4>Default</h4>\n    <bb-input-file-ui\n      label=\"Default file input\"\n      (change)=\"onUpload($event)\"\n      formControlName=\"fileInput1\"\n      data-role=\"file-input-default\"\n    >\n    </bb-input-file-ui>\n    <h4>Multiple</h4>\n    <bb-input-file-ui\n      label=\"Multiple files input\"\n      (change)=\"onUpload($event)\"\n      formControlName=\"fileInput2\"\n      data-role=\"file-input-multiple\"\n      multiple=\"true\"\n    >\n    </bb-input-file-ui>\n    <h4>Custom button color</h4>\n    <div class=\"bb-stack\">\n      <bb-input-file-ui\n        class=\"bb-stack__item\"\n        label=\"File input primary\"\n        (change)=\"onUpload($event)\"\n        color=\"primary\"\n        formControlName=\"fileInput3\"\n        data-role=\"file-input-primary\"\n      >\n      </bb-input-file-ui>\n      <bb-input-file-ui\n        class=\"bb-stack__item\"\n        label=\"File input danger\"\n        (change)=\"onUpload($event)\"\n        color=\"danger\"\n        formControlName=\"fileInput4\"\n        data-role=\"file-input-danger\"\n      >\n      </bb-input-file-ui>\n    </div>\n    <h4>Accept only image formats, custom icon and text</h4>\n    <bb-input-file-ui\n      label=\"IMG file input\"\n      accept=\".png, .jpg, .jpeg, .jpeg\"\n      (change)=\"onUpload($event)\"\n      iconName=\"image\"\n      buttonText=\"Upload image\"\n      formControlName=\"fileInput5\"\n      data-role=\"file-input-image\"\n    >\n    </bb-input-file-ui>\n    <h4>File size limited to 10 Mbs</h4>\n    <bb-input-file-ui\n      maxSizeInMb=\"10\"\n      label=\"File input limited to 10 Mbs\"\n      (change)=\"onUpload($event)\"\n      formControlName=\"fileInput6\"\n      data-role=\"file-input-image-with-size-limit\"\n    ></bb-input-file-ui>\n\n    <h4>Disabled</h4>\n    <bb-input-file-ui\n      label=\"Disabled file input\"\n      disabled=\"true\"\n      (change)=\"onUpload($event)\"\n      formControlName=\"fileInput7\"\n      data-role=\"file-input-disabled\"\n    >\n    </bb-input-file-ui>\n  </div>\n</form>\n", components: [{ type: i2$q.InputFileComponent, selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
InputFileShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputFileShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-file-ui-showcase',
                    templateUrl: './input-file-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

class InputFileShowCaseModule {
}
InputFileShowCaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileShowCaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputFileShowCaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileShowCaseModule, declarations: [InputFileShowcaseComponent], imports: [InputFileModule, ReactiveFormsModule] });
InputFileShowCaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileShowCaseModule, imports: [[InputFileModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileShowCaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [InputFileModule, ReactiveFormsModule],
                    declarations: [InputFileShowcaseComponent],
                    entryComponents: [InputFileShowcaseComponent],
                }]
        }] });

let ModeHeaderShowcaseComponent = class ModeHeaderShowcaseComponent {
    constructor() {
        this.defaultModeHeader = {
            title: 'Close Button Displayed',
            secondaryTitle: undefined,
            showCloseButton: true,
            closeButtonAriaLabel: 'Close the mode header',
            reverseTitleOrder: true,
            displayIcon: false,
            displayStatus: false,
            displayUtilityArea: false,
            multiButtonUtilityArea: false,
        };
        this.modeHeaders = [
            Object.assign({}, this.defaultModeHeader),
            Object.assign(Object.assign({}, this.defaultModeHeader), { title: 'Close Button Hidden', showCloseButton: false, closeButtonAriaLabel: undefined }),
            Object.assign(Object.assign({}, this.defaultModeHeader), { title: 'Secondary title displayed', secondaryTitle: 'This is the secondary title' }),
            Object.assign(Object.assign({}, this.defaultModeHeader), { title: 'Title order not reversed', secondaryTitle: 'This is the secondary title', reverseTitleOrder: false }),
            Object.assign(Object.assign({}, this.defaultModeHeader), { title: 'Icon displayed', displayIcon: true }),
            Object.assign(Object.assign({}, this.defaultModeHeader), { title: 'Status displayed', displayStatus: true }),
            Object.assign(Object.assign({}, this.defaultModeHeader), { title: 'Utility Area displayed', displayUtilityArea: true }),
            Object.assign(Object.assign({}, this.defaultModeHeader), { title: 'Utility Area with multiple buttons', multiButtonUtilityArea: true }),
        ];
    }
};
ModeHeaderShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ModeHeaderShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModeHeaderShowcaseComponent, selector: "bb-mode-header-ui-showcase", ngImport: i0, template: "<ng-container *ngFor=\"let modeHeader of modeHeaders\">\n  <div class=\"bb-block bb-block--xl\">\n    <bb-mode-header-ui\n      [title]=\"modeHeader.title\"\n      [secondaryTitle]=\"modeHeader.secondaryTitle\"\n      [showCloseButton]=\"modeHeader.showCloseButton\"\n      [closeButtonAriaLabel]=\"modeHeader.closeButtonAriaLabel\"\n      [reverseTitleOrder]=\"modeHeader.reverseTitleOrder\"\n    >\n      <bb-icon-ui *ngIf=\"modeHeader.displayIcon\" mode-header-icon name=\"search\" size=\"sm\" color=\"primary\"></bb-icon-ui>\n      <bb-badge-ui *ngIf=\"modeHeader.displayStatus\" mode-header-status text=\"Sample Text\" color=\"success\">\n      </bb-badge-ui>\n      <bb-dropdown-menu-ui\n        *ngIf=\"modeHeader.displayUtilityArea\"\n        mode-header-utility-area\n        container=\"body\"\n        icon=\"caret-down\"\n        btnColor=\"primary\"\n        iconSize=\"md\"\n      >\n        <ng-template bbDropdownLabel> <span>Actions</span></ng-template>\n        <ng-template bbDropdownMenuItem>\n          <button class=\"dropdown-item\" type=\"button\">Action One</button>\n          <button class=\"dropdown-item\" type=\"button\">Action Two</button>\n        </ng-template>\n      </bb-dropdown-menu-ui>\n      <ng-container *ngIf=\"modeHeader.multiButtonUtilityArea\" mode-header-utility-area>\n        <button bbButton buttonSize=\"md\" type=\"button\" class=\"bb-button-bar__button\" [circle]=\"true\">\n          <bb-icon-ui name=\"add\" size=\"md\" cropped></bb-icon-ui>\n        </button>\n        <button bbButton buttonSize=\"md\" type=\"button\" class=\"bb-button-bar__button\" [circle]=\"true\">\n          <bb-icon-ui name=\"user\" size=\"md\" cropped></bb-icon-ui>\n        </button>\n        <button bbButton buttonSize=\"md\" type=\"button\" class=\"bb-button-bar__button\" [circle]=\"true\">\n          <bb-icon-ui name=\"payment\" size=\"md\" cropped></bb-icon-ui>\n        </button>\n      </ng-container>\n    </bb-mode-header-ui>\n  </div>\n</ng-container>\n", components: [{ type: i1$m.ModeHeaderComponent, selector: "bb-mode-header-ui", inputs: ["title", "secondaryTitle", "showCloseButton", "closeButtonAriaLabel", "reverseTitleOrder"], outputs: ["close"] }, { type: i2$8.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1$d.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$d.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i1$d.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
ModeHeaderShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ModeHeaderShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-mode-header-ui-showcase',
                    templateUrl: './mode-header-showcase.component.html',
                }]
        }] });

const uiModules = [ModeHeaderModule, IconModule, BadgeModule, DropdownMenuModule, ButtonModule];
class ModeHeaderShowcaseModule {
}
ModeHeaderShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ModeHeaderShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderShowcaseModule, declarations: [ModeHeaderShowcaseComponent], imports: [CommonModule, ModeHeaderModule, IconModule, BadgeModule, DropdownMenuModule, ButtonModule] });
ModeHeaderShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderShowcaseModule, imports: [[CommonModule, ...uiModules]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModeHeaderShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...uiModules],
                    declarations: [ModeHeaderShowcaseComponent],
                    entryComponents: [ModeHeaderShowcaseComponent],
                }]
        }] });

class CustomErrorShowcaseComponent {
    constructor() {
        this.errorId = 'testID';
    }
}
CustomErrorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomErrorShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CustomErrorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CustomErrorShowcaseComponent, selector: "bb-custom-error-showcase", ngImport: i0, template: `
    <small @fade [id]="errorId" *ngIf="text" role="alert" class="bb-input-validation-message">
      Custom error component - {{ text }}
    </small>
  `, isInline: true, directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [
        trigger('fade', [
            transition('void => *', [style({ opacity: 0, height: '0px' }), animate(150, style({ opacity: 1, height: '*' }))]),
        ]),
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomErrorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-custom-error-showcase',
                    template: `
    <small @fade [id]="errorId" *ngIf="text" role="alert" class="bb-input-validation-message">
      Custom error component - {{ text }}
    </small>
  `,
                    animations: [
                        trigger('fade', [
                            transition('void => *', [style({ opacity: 0, height: '0px' }), animate(150, style({ opacity: 1, height: '*' }))]),
                        ]),
                    ],
                }]
        }] });
const customErrorMessagesShowcase = { required: () => 'My Field is required' };

class InputWithCustomErrorComponent {
    constructor() {
        this.inputField = new FormControl(null, [Validators.required]);
    }
}
InputWithCustomErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputWithCustomErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputWithCustomErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputWithCustomErrorComponent, selector: "bb-input-with-custom-error-showcase", providers: [
        {
            provide: BB_VALIDATION_ERRORS,
            useValue: customErrorMessagesShowcase,
        },
        {
            provide: BB_DYNAMIC_VALIDATION_ERROR_TMPL,
            useValue: CustomErrorShowcaseComponent,
        },
    ], ngImport: i0, template: `
    <div>
      <bb-input-text-ui
        bbFormControl
        label="Input with custom error component using InjectionToken"
        [formControl]="inputField"
        placeholder="Please enter a value, at most 35 chars..."
      >
      </bb-input-text-ui>
    </div>
  `, isInline: true, components: [{ type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }], directives: [{ type: i9.ValidationErrorsDirective, selector: "[bbFormControl]", inputs: ["errorLabels", "showError", "inputSelector", "label", "errorComponent"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputWithCustomErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-with-custom-error-showcase',
                    template: `
    <div>
      <bb-input-text-ui
        bbFormControl
        label="Input with custom error component using InjectionToken"
        [formControl]="inputField"
        placeholder="Please enter a value, at most 35 chars..."
      >
      </bb-input-text-ui>
    </div>
  `,
                    providers: [
                        {
                            provide: BB_VALIDATION_ERRORS,
                            useValue: customErrorMessagesShowcase,
                        },
                        {
                            provide: BB_DYNAMIC_VALIDATION_ERROR_TMPL,
                            useValue: CustomErrorShowcaseComponent,
                        },
                    ],
                }]
        }] });

let ControlErrorHandlerShowcaseComponent = class ControlErrorHandlerShowcaseComponent {
    constructor(fb) {
        this.fb = fb;
        this.customError = CustomErrorShowcaseComponent;
        this.objectDropdownOptions = [{ title: 'Option One' }, { title: 'Option Two' }, { title: 'Option Three' }];
        this.currencies = ['USD', 'EUR', 'BHD', 'OMR', 'MGA'];
        this.errorLabels1 = {
            required: () => 'Input is required',
        };
        this.errorLabels2 = {
            required: () => 'This textarea is required',
        };
        this.errorLabels3 = {
            required: () => 'The amount is required field',
        };
    }
    ngOnInit() {
        this.form = this.fb.group({
            inputField: [null, [Validators.required]],
            inputField2: [null, [Validators.required, Validators.minLength(3)]],
            textareaField: [null, Validators.minLength(8)],
            checkboxField: [null, Validators.requiredTrue],
            switchField: [null, Validators.requiredTrue],
            currencyField: [null, Validators.required],
            dropdownField: [null, Validators.required],
            amountField: [null, Validators.required],
        });
    }
    onSubmit() { }
};
ControlErrorHandlerShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerShowcaseComponent, deps: [{ token: i1$2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ControlErrorHandlerShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ControlErrorHandlerShowcaseComponent, selector: "bb-control-error-handler-ui-showcase", ngImport: i0, template: "<div class=\"row bb-stack\">\n  <div class=\"col-md-6\">\n    <div class=\"bb-block--md\">\n      <bb-input-with-custom-error-showcase></bb-input-with-custom-error-showcase>\n    </div>\n  </div>\n</div>\n<hr />\n<h2>Form</h2>\n<form [formGroup]=\"form\" bbFormSubmit (ngSubmit)=\"onSubmit()\">\n  <div class=\"row bb-stack bb-block--md\">\n    <div class=\"col-md-6\">\n      <div class=\"bb-block--md\">\n        <bb-input-text-ui\n          bbFormControl\n          [errorLabels]=\"errorLabels1\"\n          label=\"Input with custom error labels\"\n          formControlName=\"inputField\"\n          placeholder=\"Please enter a value, at most 35 chars...\"\n        ></bb-input-text-ui>\n      </div>\n\n      <div class=\"bb-block--md\">\n        <bb-input-text-ui\n          bbFormControl\n          [showCharCounter]=\"true\"\n          [maxLength]=\"10\"\n          aria-describedby=\"ariaDescribedbyId\"\n          label=\"Input with custom error component using errorComponent Input\"\n          formControlName=\"inputField2\"\n          placeholder=\"Please enter a value, at most 35 chars...\"\n        ></bb-input-text-ui>\n      </div>\n\n      <div class=\"bb-block--md\">\n        <div bbControlErrorContainer>\n          <bb-switch-ui\n            [required]=\"true\"\n            label=\"Label\"\n            id=\"defaultSwitch3\"\n            bbFormControl\n            formControlName=\"switchField\"\n            aria-label=\"Switch with visible label (on the right)\"\n          ></bb-switch-ui>\n          <div class=\"bb-text-support\">Additional description</div>\n        </div>\n      </div>\n\n      <div class=\"bb-block--md\">\n        <label for=\"currency-input\">Currency label</label>\n        <bb-currency-input-ui\n          [currencies]=\"currencies\"\n          [required]=\"true\"\n          id=\"currency-input\"\n          bbFormControl\n          formControlName=\"currencyField\"\n        ></bb-currency-input-ui>\n      </div>\n\n      <div class=\"bb-block--md\">\n        <bb-dropdown-single-select-ui\n          bbFormControl\n          [options]=\"objectDropdownOptions\"\n          label=\"Dropdown\"\n          displayAttributePath=\"title\"\n          id=\"dropdownSingleSelectObject\"\n          formControlName=\"dropdownField\"\n        ></bb-dropdown-single-select-ui>\n      </div>\n\n      <div class=\"bb-block--md\">\n        <label for=\"amountInput\">Amount</label>\n        <bb-amount-input-ui\n          bbFormControl\n          [errorLabels]=\"errorLabels2\"\n          formControlName=\"amountField\"\n          id=\"amountInput\"\n          placeholder=\"0.00\"\n          [autoDecimal]=\"true\"\n          [mapCurrency]=\"false\"\n          [currency]=\"'USD'\"\n        ></bb-amount-input-ui>\n      </div>\n\n      <div class=\"bb-block--md\">\n        <bb-rich-text-editor-ui\n          bbFormControl\n          [errorLabels]=\"errorLabels2\"\n          [maxLength]=\"300\"\n          [required]=\"true\"\n          formControlName=\"textareaField\"\n          placeholder=\"Please, enter your message\"\n          label=\"Textarea with custom errors labels\"\n        ></bb-rich-text-editor-ui>\n      </div>\n    </div>\n  </div>\n\n  <button type=\"submit\" bbButton>Submit</button>\n</form>\n", components: [{ type: InputWithCustomErrorComponent, selector: "bb-input-with-custom-error-showcase" }, { type: i2$9.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i2$h.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i1$b.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i2$2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2$4.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i2$g.RichTextEditorComponent, selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }], directives: [{ type: i1$2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i9.FormSubmitDirective, selector: "form[bbFormSubmit]" }, { type: i1$2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i9.ValidationErrorsDirective, selector: "[bbFormControl]", inputs: ["errorLabels", "showError", "inputSelector", "label", "errorComponent"] }, { type: i1$2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i9.ControlErrorContainerDirective, selector: "[bbControlErrorContainer]" }, { type: i1$2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
ControlErrorHandlerShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ControlErrorHandlerShowcaseComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-control-error-handler-ui-showcase',
                    templateUrl: './control-error-handler-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$2.FormBuilder }]; } });

const components = [ControlErrorHandlerShowcaseComponent, InputWithCustomErrorComponent, CustomErrorShowcaseComponent];
class ControlErrorHandlerShowcaseModule {
}
ControlErrorHandlerShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ControlErrorHandlerShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerShowcaseModule, declarations: [ControlErrorHandlerShowcaseComponent, InputWithCustomErrorComponent, CustomErrorShowcaseComponent], imports: [CommonModule, ReactiveFormsModule, ControlErrorHandlerModule, BackbaseUiModule, InputTextModule], exports: [ControlErrorHandlerShowcaseComponent, InputWithCustomErrorComponent, CustomErrorShowcaseComponent] });
ControlErrorHandlerShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerShowcaseModule, imports: [[CommonModule, ReactiveFormsModule, ControlErrorHandlerModule, BackbaseUiModule, InputTextModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ControlErrorHandlerShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ReactiveFormsModule, ControlErrorHandlerModule, BackbaseUiModule, InputTextModule],
                    declarations: [...components],
                    exports: [...components],
                    entryComponents: [ControlErrorHandlerShowcaseComponent],
                }]
        }] });

class ValueDiffShowcaseComponent {
    constructor() {
        this.oldValue = 'Old Value';
        this.newValue = 'New Value';
        this.oldValueAfter = 'Old Value';
        this.newValueAfter = 'New Value';
        this.positionAfter = ValueDiffPosition.AFTER;
    }
    reset() {
        this.oldValue = 'Equal Value';
        this.newValue = 'Equal Value';
    }
    changeData() {
        this.oldValue = ValueDiffShowcaseComponent.makeId();
        this.newValue = ValueDiffShowcaseComponent.makeId();
    }
    static makeId() {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength = characters.length;
        let result = '';
        for (let i = 0; i < 5; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }
}
ValueDiffShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ValueDiffShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ValueDiffShowcaseComponent, selector: "bb-value-diff-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <h3>Default case</h3>\n    <div class=\"row\">\n      <div class=\"col-6\">\n        <div [bbValueDiff]=\"newValue\" [sr-only-old]=\"'Old value: '\" [sr-only-new]=\"'New value: '\">\n          {{ oldValue }}\n        </div>\n        <br />\n        <div class=\"bb-button-bar bb-button-bar--reverse\">\n          <button class=\"bb-button-bar__button\" (click)=\"changeData()\" bbButton buttonSize=\"sm\">Change data</button>\n          <button class=\"bb-button-bar__button\" (click)=\"reset()\" bbButton buttonSize=\"sm\">Make equal</button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"col-md-6\">\n    <h3>Show new value after old</h3>\n    <div class=\"row\">\n      <div class=\"col\">\n        <div [bbValueDiff]=\"newValueAfter\" [position]=\"positionAfter\">\n          {{ oldValueAfter }}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<hr />\n\n<div class=\"row\">\n  <div class=\"col-md-6\">\n    <h3>With arrow right</h3>\n    <div class=\"bb-stack\">\n      <span [bbValueDiff]=\"newValue\" [position]=\"positionAfter\" [showArrow]=\"true\">{{ oldValue }}</span>\n    </div>\n  </div>\n\n  <div class=\"col-md-6\">\n    <h3>With arrow left</h3>\n    <div class=\"bb-stack\">\n      <span [bbValueDiff]=\"newValueAfter\" [showArrow]=\"true\">{{ oldValueAfter }}</span>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i1$N.ValueDiffDirective, selector: "[bbValueDiff]", inputs: ["bbValueDiff", "position", "sr-only-old", "sr-only-new", "showArrow"] }, { type: i2$5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-value-diff-ui-showcase',
                    templateUrl: './value-diff-showcase.component.html',
                }]
        }] });

class ValueDiffShowcaseModule {
}
ValueDiffShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ValueDiffShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffShowcaseModule, declarations: [ValueDiffShowcaseComponent], imports: [CommonModule, ValueDiffDirectiveModule, ButtonModule], exports: [ValueDiffShowcaseComponent] });
ValueDiffShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffShowcaseModule, imports: [[CommonModule, ValueDiffDirectiveModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValueDiffShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ValueDiffShowcaseComponent],
                    exports: [ValueDiffShowcaseComponent],
                    imports: [CommonModule, ValueDiffDirectiveModule, ButtonModule],
                }]
        }] });

const showcaseModule = [
    AccountNumberPipeShowcaseModule,
    AccountSelectorShowcaseModule,
    ActionStatusShowcaseModule,
    AlertShowcaseModule,
    AmountInputShowcaseModule,
    AmountShowcaseModule,
    AvatarShowcaseModule,
    BadgeCounterShowcaseModule,
    BadgeShowcaseModule,
    ButtonShowcaseModule,
    CardVendorShowcaseModule,
    CharCounterShowcaseModule,
    CheckboxGroupShowcaseModule,
    CollapsibleAccordionShowcaseModule,
    CollapsibleCardShowcaseModule,
    CollapsibleShowcaseModule,
    CommonErrorStateShowcaseModule,
    ControlErrorHandlerShowcaseModule,
    CurrencyInputShowcaseModule,
    DatePipeShowcaseModule,
    DropdownMenuShowcaseModule,
    DropdownMultiSelectShowcaseModule,
    DropdownPanelShowcaseModule,
    DropdownSingleSelectShowcaseModule,
    EllipsisShowcaseModule,
    EmptyStateShowcaseModule,
    FieldsetShowcaseModule,
    FileAttachmentShowcaseModule,
    FocusShowcaseModule,
    HeaderShowcaseModule,
    HighlightShowcaseModule,
    IbanPipeShowcaseModule,
    IconShowcaseModule,
    InfiniteScrollShowcaseModule,
    InputCheckboxShowcaseModule,
    InputDatepickerShowcaseModule,
    InputEmailShowcaseModule,
    InputFileShowCaseModule,
    InputInlineEditShowcaseModule,
    InputNumberShowcaseModule,
    InputPasswordShowcaseModule,
    InputPhoneShowcaseModule,
    InputRadioGroupShowcaseModule,
    InputRangeShowcaseModule,
    InputTextShowcaseModule,
    InputTimepickerShowcaseModule,
    InputValidationMessageShowcaseModule,
    ItemLogShowcaseModule,
    ListMultipleSelectShowcaseModule,
    LoadButtonShowcaseModule,
    LoadingIndicatorShowcaseModule,
    LogoShowcaseModule,
    ModalShowcaseModule,
    ModeHeaderShowcaseModule,
    NotificationShowcaseModule,
    PaginationShowcaseModule,
    PaymentCardNumberPipeShowcaseModule,
    PaymentCardShowcaseModule,
    PeriodSelectorShowcaseModule,
    PhoneNumberFormatPipeShowcaseModule,
    ProductItemBasicAccountShowcaseModule,
    ProductItemCreditCardShowcaseModule,
    ProductItemCurrentAccountShowcaseModule,
    ProductItemDebitCardShowcaseModule,
    ProductItemInvestmentAccountShowcaseModule,
    ProductItemLoanShowcaseModule,
    ProductItemSavingsAccountShowcaseModule,
    ProductItemTermDepositShowcaseModule,
    ProductSelectorShowcaseModule,
    ProgressbarShowcaseModule,
    RichTextEditorShowcaseModule,
    SearchBoxShowcaseModule,
    SelectListShowcaseModule,
    StepperShowcaseModule,
    SwitchShowcaseModule,
    TabShowcaseModule,
    TableShowcaseModule,
    TextareaShowcaseModule,
    TooltipShowcaseModule,
    ValueDiffShowcaseModule,
];
class BackbaseUiAngShowcaseModule {
}
BackbaseUiAngShowcaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngShowcaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BackbaseUiAngShowcaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngShowcaseModule, imports: [CommonModule, AccountNumberPipeShowcaseModule,
        AccountSelectorShowcaseModule,
        ActionStatusShowcaseModule,
        AlertShowcaseModule,
        AmountInputShowcaseModule,
        AmountShowcaseModule,
        AvatarShowcaseModule,
        BadgeCounterShowcaseModule,
        BadgeShowcaseModule,
        ButtonShowcaseModule,
        CardVendorShowcaseModule,
        CharCounterShowcaseModule,
        CheckboxGroupShowcaseModule,
        CollapsibleAccordionShowcaseModule,
        CollapsibleCardShowcaseModule,
        CollapsibleShowcaseModule,
        CommonErrorStateShowcaseModule,
        ControlErrorHandlerShowcaseModule,
        CurrencyInputShowcaseModule,
        DatePipeShowcaseModule,
        DropdownMenuShowcaseModule,
        DropdownMultiSelectShowcaseModule,
        DropdownPanelShowcaseModule,
        DropdownSingleSelectShowcaseModule,
        EllipsisShowcaseModule,
        EmptyStateShowcaseModule,
        FieldsetShowcaseModule,
        FileAttachmentShowcaseModule,
        FocusShowcaseModule,
        HeaderShowcaseModule,
        HighlightShowcaseModule,
        IbanPipeShowcaseModule,
        IconShowcaseModule,
        InfiniteScrollShowcaseModule,
        InputCheckboxShowcaseModule,
        InputDatepickerShowcaseModule,
        InputEmailShowcaseModule,
        InputFileShowCaseModule,
        InputInlineEditShowcaseModule,
        InputNumberShowcaseModule,
        InputPasswordShowcaseModule,
        InputPhoneShowcaseModule,
        InputRadioGroupShowcaseModule,
        InputRangeShowcaseModule,
        InputTextShowcaseModule,
        InputTimepickerShowcaseModule,
        InputValidationMessageShowcaseModule,
        ItemLogShowcaseModule,
        ListMultipleSelectShowcaseModule,
        LoadButtonShowcaseModule,
        LoadingIndicatorShowcaseModule,
        LogoShowcaseModule,
        ModalShowcaseModule,
        ModeHeaderShowcaseModule,
        NotificationShowcaseModule,
        PaginationShowcaseModule,
        PaymentCardNumberPipeShowcaseModule,
        PaymentCardShowcaseModule,
        PeriodSelectorShowcaseModule,
        PhoneNumberFormatPipeShowcaseModule,
        ProductItemBasicAccountShowcaseModule,
        ProductItemCreditCardShowcaseModule,
        ProductItemCurrentAccountShowcaseModule,
        ProductItemDebitCardShowcaseModule,
        ProductItemInvestmentAccountShowcaseModule,
        ProductItemLoanShowcaseModule,
        ProductItemSavingsAccountShowcaseModule,
        ProductItemTermDepositShowcaseModule,
        ProductSelectorShowcaseModule,
        ProgressbarShowcaseModule,
        RichTextEditorShowcaseModule,
        SearchBoxShowcaseModule,
        SelectListShowcaseModule,
        StepperShowcaseModule,
        SwitchShowcaseModule,
        TabShowcaseModule,
        TableShowcaseModule,
        TextareaShowcaseModule,
        TooltipShowcaseModule,
        ValueDiffShowcaseModule], exports: [AccountNumberPipeShowcaseModule,
        AccountSelectorShowcaseModule,
        ActionStatusShowcaseModule,
        AlertShowcaseModule,
        AmountInputShowcaseModule,
        AmountShowcaseModule,
        AvatarShowcaseModule,
        BadgeCounterShowcaseModule,
        BadgeShowcaseModule,
        ButtonShowcaseModule,
        CardVendorShowcaseModule,
        CharCounterShowcaseModule,
        CheckboxGroupShowcaseModule,
        CollapsibleAccordionShowcaseModule,
        CollapsibleCardShowcaseModule,
        CollapsibleShowcaseModule,
        CommonErrorStateShowcaseModule,
        ControlErrorHandlerShowcaseModule,
        CurrencyInputShowcaseModule,
        DatePipeShowcaseModule,
        DropdownMenuShowcaseModule,
        DropdownMultiSelectShowcaseModule,
        DropdownPanelShowcaseModule,
        DropdownSingleSelectShowcaseModule,
        EllipsisShowcaseModule,
        EmptyStateShowcaseModule,
        FieldsetShowcaseModule,
        FileAttachmentShowcaseModule,
        FocusShowcaseModule,
        HeaderShowcaseModule,
        HighlightShowcaseModule,
        IbanPipeShowcaseModule,
        IconShowcaseModule,
        InfiniteScrollShowcaseModule,
        InputCheckboxShowcaseModule,
        InputDatepickerShowcaseModule,
        InputEmailShowcaseModule,
        InputFileShowCaseModule,
        InputInlineEditShowcaseModule,
        InputNumberShowcaseModule,
        InputPasswordShowcaseModule,
        InputPhoneShowcaseModule,
        InputRadioGroupShowcaseModule,
        InputRangeShowcaseModule,
        InputTextShowcaseModule,
        InputTimepickerShowcaseModule,
        InputValidationMessageShowcaseModule,
        ItemLogShowcaseModule,
        ListMultipleSelectShowcaseModule,
        LoadButtonShowcaseModule,
        LoadingIndicatorShowcaseModule,
        LogoShowcaseModule,
        ModalShowcaseModule,
        ModeHeaderShowcaseModule,
        NotificationShowcaseModule,
        PaginationShowcaseModule,
        PaymentCardNumberPipeShowcaseModule,
        PaymentCardShowcaseModule,
        PeriodSelectorShowcaseModule,
        PhoneNumberFormatPipeShowcaseModule,
        ProductItemBasicAccountShowcaseModule,
        ProductItemCreditCardShowcaseModule,
        ProductItemCurrentAccountShowcaseModule,
        ProductItemDebitCardShowcaseModule,
        ProductItemInvestmentAccountShowcaseModule,
        ProductItemLoanShowcaseModule,
        ProductItemSavingsAccountShowcaseModule,
        ProductItemTermDepositShowcaseModule,
        ProductSelectorShowcaseModule,
        ProgressbarShowcaseModule,
        RichTextEditorShowcaseModule,
        SearchBoxShowcaseModule,
        SelectListShowcaseModule,
        StepperShowcaseModule,
        SwitchShowcaseModule,
        TabShowcaseModule,
        TableShowcaseModule,
        TextareaShowcaseModule,
        TooltipShowcaseModule,
        ValueDiffShowcaseModule] });
BackbaseUiAngShowcaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngShowcaseModule, imports: [[CommonModule, ...showcaseModule], AccountNumberPipeShowcaseModule,
        AccountSelectorShowcaseModule,
        ActionStatusShowcaseModule,
        AlertShowcaseModule,
        AmountInputShowcaseModule,
        AmountShowcaseModule,
        AvatarShowcaseModule,
        BadgeCounterShowcaseModule,
        BadgeShowcaseModule,
        ButtonShowcaseModule,
        CardVendorShowcaseModule,
        CharCounterShowcaseModule,
        CheckboxGroupShowcaseModule,
        CollapsibleAccordionShowcaseModule,
        CollapsibleCardShowcaseModule,
        CollapsibleShowcaseModule,
        CommonErrorStateShowcaseModule,
        ControlErrorHandlerShowcaseModule,
        CurrencyInputShowcaseModule,
        DatePipeShowcaseModule,
        DropdownMenuShowcaseModule,
        DropdownMultiSelectShowcaseModule,
        DropdownPanelShowcaseModule,
        DropdownSingleSelectShowcaseModule,
        EllipsisShowcaseModule,
        EmptyStateShowcaseModule,
        FieldsetShowcaseModule,
        FileAttachmentShowcaseModule,
        FocusShowcaseModule,
        HeaderShowcaseModule,
        HighlightShowcaseModule,
        IbanPipeShowcaseModule,
        IconShowcaseModule,
        InfiniteScrollShowcaseModule,
        InputCheckboxShowcaseModule,
        InputDatepickerShowcaseModule,
        InputEmailShowcaseModule,
        InputFileShowCaseModule,
        InputInlineEditShowcaseModule,
        InputNumberShowcaseModule,
        InputPasswordShowcaseModule,
        InputPhoneShowcaseModule,
        InputRadioGroupShowcaseModule,
        InputRangeShowcaseModule,
        InputTextShowcaseModule,
        InputTimepickerShowcaseModule,
        InputValidationMessageShowcaseModule,
        ItemLogShowcaseModule,
        ListMultipleSelectShowcaseModule,
        LoadButtonShowcaseModule,
        LoadingIndicatorShowcaseModule,
        LogoShowcaseModule,
        ModalShowcaseModule,
        ModeHeaderShowcaseModule,
        NotificationShowcaseModule,
        PaginationShowcaseModule,
        PaymentCardNumberPipeShowcaseModule,
        PaymentCardShowcaseModule,
        PeriodSelectorShowcaseModule,
        PhoneNumberFormatPipeShowcaseModule,
        ProductItemBasicAccountShowcaseModule,
        ProductItemCreditCardShowcaseModule,
        ProductItemCurrentAccountShowcaseModule,
        ProductItemDebitCardShowcaseModule,
        ProductItemInvestmentAccountShowcaseModule,
        ProductItemLoanShowcaseModule,
        ProductItemSavingsAccountShowcaseModule,
        ProductItemTermDepositShowcaseModule,
        ProductSelectorShowcaseModule,
        ProgressbarShowcaseModule,
        RichTextEditorShowcaseModule,
        SearchBoxShowcaseModule,
        SelectListShowcaseModule,
        StepperShowcaseModule,
        SwitchShowcaseModule,
        TabShowcaseModule,
        TableShowcaseModule,
        TextareaShowcaseModule,
        TooltipShowcaseModule,
        ValueDiffShowcaseModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BackbaseUiAngShowcaseModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...showcaseModule],
                    exports: [...showcaseModule],
                }]
        }] });
const COMPONENTS = [
    AccountNumberPipeShowcaseComponent,
    AccountSelectorShowcaseComponent,
    ActionStatusShowcaseComponent,
    AlertShowcaseComponent,
    AmountShowcaseComponent,
    AmountInputShowcaseComponent,
    AvatarShowcaseComponent,
    BadgeCounterShowcaseComponent,
    BadgeShowcaseComponent,
    ButtonShowcaseComponent,
    CardVendorShowcaseComponent,
    CharCounterShowcaseComponent,
    CheckboxGroupShowcaseComponent,
    CollapsibleAccordionShowcaseComponent,
    CollapsibleCardShowcaseComponent,
    CollapsibleShowcaseComponent,
    ControlErrorHandlerShowcaseComponent,
    CommonErrorStateShowcaseComponent,
    CurrencyInputShowcaseComponent,
    DatePipeShowcaseComponent,
    DropdownMenuShowcaseComponent,
    DropdownMultiSelectShowcaseComponent,
    DropdownPanelShowcaseComponent,
    DropdownSingleSelectShowcaseComponent,
    EllipsisShowcaseComponent,
    EmptyStateShowcaseComponent,
    FieldsetShowcaseComponent,
    FileAttachmentShowcaseComponent,
    FocusShowcaseComponent,
    HeaderShowcaseComponent,
    HighlightShowcaseComponent,
    IbanPipeShowcaseComponent,
    IconShowcaseComponent,
    InfiniteScrollShowcaseComponent,
    InputCheckboxShowcaseComponent,
    InputDatepickerShowcaseComponent,
    InputEmailShowcaseComponent,
    InputFileShowcaseComponent,
    InputInlineEditShowcaseComponent,
    InputNumberShowcaseComponent,
    InputPasswordShowcaseComponent,
    InputPhoneShowcaseComponent,
    InputRadioGroupShowcaseComponent,
    InputRangeShowcaseComponent,
    InputTextShowcaseComponent,
    InputTimepickerShowcaseComponent,
    InputValidationMessageShowcaseComponent,
    ItemLogShowcaseComponent,
    ListMultipleSelectShowcaseComponent,
    LoadButtonShowcaseComponent,
    LoadingIndicatorShowcaseComponent,
    LogoShowcaseComponent,
    ModalShowcaseComponent,
    NotificationShowcaseComponent,
    PaginationShowcaseComponent,
    PaymentCardNumberPipeShowcaseComponent,
    PaymentCardShowcaseComponent,
    PeriodSelectorShowcaseComponent,
    PhoneNumberFormatPipeShowcaseComponent,
    ProductItemBasicAccountShowcaseComponent,
    ProductItemCreditCardShowcaseComponent,
    ProductItemCurrentAccountShowcaseComponent,
    ProductItemDebitCardShowcaseComponent,
    ProductItemInvestmentAccountShowcaseComponent,
    ProductItemLoanShowcaseComponent,
    ProductItemSavingsAccountShowcaseComponent,
    ProductItemTermDepositShowcaseComponent,
    ProductSelectorShowcaseComponent,
    ProgressbarShowcaseComponent,
    RichTextEditorShowcaseComponent,
    SearchBoxShowcaseComponent,
    SelectListShowcaseComponent,
    StepperShowcaseComponent,
    SwitchShowcaseComponent,
    TabShowcaseComponent,
    TableShowcaseComponent,
    TextareaShowcaseComponent,
    TooltipShowcaseComponent,
    ValueDiffShowcaseComponent,
];

/**
 * Generated bundle index. Do not edit.
 */

export { AccountNumberPipeExampleComponent, AccountNumberPipeShowcaseModule, AccountSelectorExampleComponent, AccountSelectorShowcaseModule, ActionStatusExampleComponent, ActionStatusShowcaseModule, AlertExampleComponent, AlertShowcaseModule, AmountExampleComponent, AmountInputExampleComponent, AmountInputShowcaseModule, AmountShowcaseModule, AvatarExampleComponent, AvatarShowcaseModule, BackbaseUiAngExamplesModule, BackbaseUiAngShowcaseModule, BackbaseUiModule, BadgeCounterExampleComponent, BadgeCounterShowcaseModule, BadgeExampleComponent, BadgeShowcaseModule, ButtonExampleComponent, ButtonShowcaseModule, CardVendorExampleComponent, CardVendorShowcaseModule, CharCounterExampleComponent, CharCounterShowcaseModule, CheckboxGroupExampleComponent, CheckboxGroupShowcaseModule, CollapsibleAccordionExampleComponent, CollapsibleAccordionShowcaseModule, CollapsibleCardExampleComponent, CollapsibleCardShowcaseModule, CollapsibleExampleComponent, CollapsibleShowcaseModule, CommonErrorStateExampleComponent, CommonErrorStateShowcaseModule, ConfigurationInputComponent, ConfigurationInputService, ControlErrorHandlerShowcaseComponent, ControlErrorHandlerShowcaseModule, CurrencyInputExampleComponent, CurrencyInputShowcaseModule, CustomErrorShowcaseComponent, DatePipeExampleComponent, DatePipeShowcaseModule, DropdownMenuExampleComponent, DropdownMenuShowcaseModule, DropdownMultiSelectExampleComponent, DropdownMultiSelectShowcaseModule, DropdownPanelExampleComponent, DropdownPanelShowcaseModule, DropdownSingleSelectExampleComponent, DropdownSingleSelectShowcaseModule, EllipsisExampleComponent, EllipsisShowcaseModule, EmptyStateExampleComponent, EmptyStateShowcaseModule, FieldsetExampleComponent, FieldsetShowcaseModule, FileAttachmentExampleComponent, FileAttachmentShowcaseModule, FocusShowcaseModule, HeaderExampleComponent, HeaderShowcaseModule, HighlightExampleComponent, HighlightShowcaseModule, IbanPipeExampleComponent, IbanPipeShowcaseModule, IconExampleComponent, IconShowcaseModule, InfiniteScrollExampleComponent, InfiniteScrollShowcaseModule, InputCheckboxExampleComponent, InputCheckboxShowcaseModule, InputDatepickerExampleComponent, InputDatepickerShowcaseModule, InputEmailExampleComponent, InputEmailShowcaseModule, InputFileExampleComponent, InputFileShowCaseModule, InputInlineEditExampleComponent, InputInlineEditShowcaseModule, InputNumberExampleComponent, InputNumberShowcaseModule, InputPasswordExampleComponent, InputPasswordShowcaseModule, InputPhoneExampleComponent, InputPhoneShowcaseModule, InputRadioGroupExampleComponent, InputRadioGroupShowcaseModule, InputRangeExampleComponent, InputRangeShowcaseModule, InputTextExampleComponent, InputTextShowcaseModule, InputTimepickerExampleComponent, InputTimepickerShowcaseModule, InputValidationMessageExampleComponent, InputValidationMessageShowcaseModule, InputWithCustomErrorComponent, ItemLogExampleComponent, ItemLogShowcaseModule, KeyboardClickExampleComponent, ListMultipleSelectExampleComponent, ListMultipleSelectShowcaseModule, LoadButtonExampleComponent, LoadButtonShowcaseModule, LoadingIndicatorExampleComponent, LoadingIndicatorShowcaseModule, LogoExampleComponent, LogoShowcaseModule, ModalExampleComponent, ModalShowcaseModule, ModeHeaderExampleComponent, ModeHeaderShowcaseModule, NotificationExampleComponent, NotificationShowcaseModule, PaginationExampleComponent, PaginationShowcaseModule, PaymentCardExampleComponent, PaymentCardNumberPipeExampleComponent, PaymentCardNumberPipeShowcaseModule, PaymentCardShowcaseModule, PeriodSelectorExampleComponent, PeriodSelectorShowcaseModule, PhoneNumberFormatPipeShowcaseModule, PhoneNumberPipeExampleComponent, ProductItemBasicAccountExampleComponent, ProductItemBasicAccountShowcaseModule, ProductItemCreditCardExampleComponent, ProductItemCreditCardShowcaseModule, ProductItemCurrentAccountExampleComponent, ProductItemCurrentAccountShowcaseModule, ProductItemDebitCardExampleComponent, ProductItemDebitCardShowcaseModule, ProductItemInvestmentAccountExampleComponent, ProductItemInvestmentAccountShowcaseModule, ProductItemLoanExampleComponent, ProductItemLoanShowcaseModule, ProductItemSavingsAccountExampleComponent, ProductItemSavingsAccountShowcaseModule, ProductItemTermDepositExampleComponent, ProductItemTermDepositShowcaseModule, ProductSelectorExampleComponent, ProductSelectorShowcaseModule, ProgessbarExampleComponent, ProgressbarShowcaseModule, RichTextEditorExampleComponent, RichTextEditorShowcaseModule, SearchBoxExampleComponent, SearchBoxShowcaseModule, SelectListExampleComponent, SelectListShowcaseModule, StepperExampleComponent, StepperShowcaseModule, SwitchExampleComponent, SwitchShowcaseModule, TabExampleComponent, TabShowcaseModule, TableExampleComponent, TableShowcaseModule, TextareaExampleComponent, TextareaShowcaseModule, TooltipExampleComponent, TooltipShowcaseModule, ValueDiffExampleComponent, ValueDiffShowcaseComponent, ValueDiffShowcaseModule, COMPONENTS$1 as ƟEXAMPLE_COMPONENTS, COMPONENTS as ƟSHOWCASE_COMPONENTS };
//# sourceMappingURL=backbase-ui-ang.js.map
