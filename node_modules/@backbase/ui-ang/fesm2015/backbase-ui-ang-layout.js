import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { InjectionToken, Directive, ContentChildren, NgModule, Injectable, Optional, Inject } from '@angular/core';
import * as i1$1 from '@backbase/ui-ang/media-query-lib';
import { MediaQueryModule } from '@backbase/ui-ang/media-query-lib';
import * as i1 from '@angular/router';
import { NavigationEnd, RouterLinkActive } from '@angular/router';
import { filter, switchMap, first, withLatestFrom, map, distinctUntilChanged, shareReplay, tap } from 'rxjs/operators';
import { Subject, of, EMPTY, merge } from 'rxjs';

const LAYOUT_CONFIG_TOKEN = new InjectionToken('injectable token for LayoutService');

class LayoutNavDropdownDirective {
    constructor(router, ngZone) {
        this.router = router;
        this.ngZone = ngZone;
        this.isActive = false;
    }
    ngAfterContentInit() {
        this.router.events
            .pipe(filter((event) => event instanceof NavigationEnd), switchMap((_) => this.ngZone.onStable.pipe(first())))
            .subscribe(() => {
            this.ngZone.run(() => {
                if (this.routerLinks) {
                    this.isActive = this.routerLinks.toArray().some((navLink) => navLink.isActive);
                }
            });
        });
    }
}
LayoutNavDropdownDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutNavDropdownDirective, deps: [{ token: i1.Router }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
LayoutNavDropdownDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: LayoutNavDropdownDirective, selector: "[bbLayoutNavDropdown]", queries: [{ propertyName: "routerLinks", predicate: RouterLinkActive, descendants: true }], exportAs: ["bbLayoutNavDropdown"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutNavDropdownDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbLayoutNavDropdown]', exportAs: 'bbLayoutNavDropdown' }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i0.NgZone }]; }, propDecorators: { routerLinks: [{
                type: ContentChildren,
                args: [RouterLinkActive, { descendants: true }]
            }] } });

class LayoutModule {
    static forRoot(config) {
        return { ngModule: LayoutModule, providers: [{ provide: LAYOUT_CONFIG_TOKEN, useValue: config }] };
    }
}
LayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutModule, declarations: [LayoutNavDropdownDirective], imports: [CommonModule, MediaQueryModule], exports: [LayoutNavDropdownDirective] });
LayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutModule, imports: [[CommonModule, MediaQueryModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, MediaQueryModule],
                    declarations: [LayoutNavDropdownDirective],
                    exports: [LayoutNavDropdownDirective],
                }]
        }] });

/**
 * ## Navigation Type Horizontal
 * - On large desktop show the menu in the topbar. On mobile show a side menu
 *
 * ## Navigation Type Vertical
 * - On large desktop, show the sidebar. Toggling collapses the nav items into icons.
 * - On tablet and small desktop, collapse the nav items into icons. Toggling shows the full nav items.
 * - On mobile, don't collapse the sidebar, but hide it. Toggling shows the sidebar.
 */
class LayoutService {
    constructor(mediaQueryService, router, config) {
        this.mediaQueryService = mediaQueryService;
        this.router = router;
        this.config = config;
        this.isHighResolutionViewSubject = new Subject();
        this.isHighResolutionView$ = this.isHighResolutionViewSubject.asObservable();
        this.manuallyExpanded$ = new Subject();
        this.isNavExpanded = false;
        /**
         * Default breakpoint used by business
         */
        if (!this.config) {
            this.config = { collapseBreakpoint: 'xl' };
        }
        /**
         * Observing the changes for screen resize
         */
        const isLowResolutionView$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', this.config.collapseBreakpoint);
        /**
         * In mobile view after navigation to another route the sidebar should collapse
         */
        const collapseOnRouterNav$ = this.router.events.pipe(filter((event) => event instanceof NavigationEnd), withLatestFrom(isLowResolutionView$), switchMap(([, isLowResolutionView]) => (isLowResolutionView ? of(false) : EMPTY)));
        this.navigationExpanded$ = merge(isLowResolutionView$.pipe(map((isLowResolutionView) => {
            this.isHighResolutionViewSubject.next(!isLowResolutionView);
            return !isLowResolutionView;
        })), collapseOnRouterNav$, this.manuallyExpanded$).pipe(distinctUntilChanged(), shareReplay({ bufferSize: 1, refCount: true }), tap((isExpanded) => {
            this.isNavExpanded = isExpanded;
        }));
    }
    /**
     * Toggling navigation visibility
     */
    toggleNav() {
        this.isNavExpanded = !this.isNavExpanded;
        this.manuallyExpanded$.next(this.isNavExpanded);
    }
}
LayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutService, deps: [{ token: i1$1.MediaQueryService }, { token: i1.Router }, { token: LAYOUT_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
LayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.MediaQueryService }, { type: i1.Router }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LAYOUT_CONFIG_TOKEN]
                }] }]; } });

/**
 * Generated bundle index. Do not edit.
 */

export { LayoutModule, LayoutNavDropdownDirective, LayoutService };
//# sourceMappingURL=backbase-ui-ang-layout.js.map
