{"version":3,"file":"backbase-ui-ang-collapsible-accordion.js","sources":["../../../../libs/ui-ang/collapsible-accordion/collapsible-accordion.component.ts","../../../../libs/ui-ang/collapsible-accordion/collapsible-accordion.component.html","../../../../libs/ui-ang/collapsible-accordion/collapsible-accordion.module.ts","../../../../libs/ui-ang/collapsible-accordion/backbase-ui-ang-collapsible-accordion.ts"],"sourcesContent":["import { AfterContentInit, Component, EventEmitter, Input, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nexport interface ICollapsible extends OnDestroy {\n  toggle: () => void;\n  isOpen: boolean;\n  isOpenChange: EventEmitter<boolean>;\n}\n\n/**\n * @name CollapsibleAccordionComponent\n *\n * @description\n * Component that groups Collapsible components to show them in an accordion fashion.\n * It can assure that only one Collapsible panel can be opened at a time\n */\n@Component({\n  selector: 'bb-collapsible-accordion-ui',\n  templateUrl: 'collapsible-accordion.component.html',\n})\nexport class CollapsibleAccordionComponent implements AfterContentInit, OnDestroy {\n  /**\n   * Assures that only one Collapsible panel can be opened at a time.\n   */\n  @Input() closeOthers = false;\n  /**\n   * When true displays the first panel on load.\n   */\n  @Input() openFirst = false;\n  /**\n   * When true the Accordion will inherit the parent Accordion behaviour.\n   */\n  @Input()\n  set obeyParentAccordion(obey: boolean) {\n    if (!this.parentAccordion) {\n      return;\n    }\n\n    if (obey) {\n      this.parentAccordion.registerNestedAccordion(this);\n    } else {\n      this.parentAccordion.unregisterNestedAccordion(this);\n    }\n  }\n\n  private readonly collapsiblePanels = new Map<ICollapsible, Subscription>();\n  private readonly nestedAccordions = new Set<CollapsibleAccordionComponent>();\n\n  constructor(\n    @Optional()\n    @SkipSelf()\n    private readonly parentAccordion: CollapsibleAccordionComponent,\n  ) {}\n\n  ngOnDestroy() {\n    this.obeyParentAccordion = false;\n  }\n\n  registerNestedAccordion(childAccordion: CollapsibleAccordionComponent) {\n    this.nestedAccordions.add(childAccordion);\n  }\n\n  unregisterNestedAccordion(childAccordion: CollapsibleAccordionComponent) {\n    this.nestedAccordions.delete(childAccordion);\n  }\n\n  registerNestedPanel(panel: ICollapsible) {\n    const subscription = panel.isOpenChange.subscribe(this.closeOtherPanels(panel));\n    this.collapsiblePanels.set(panel, subscription);\n  }\n\n  unregisterNestedPanel(panel: ICollapsible) {\n    const subscription = this.collapsiblePanels.get(panel);\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n    this.collapsiblePanels.delete(panel);\n  }\n\n  expandAll() {\n    if (this.closeOthers) {\n      return;\n    }\n    this.setPanelsState(true);\n    this.setNestedAccordionsState(true);\n  }\n\n  collapseAll() {\n    this.setPanelsState(false);\n    this.setNestedAccordionsState(false);\n  }\n\n  ngAfterContentInit() {\n    if (this.openFirst) {\n      this.collapsiblePanels.keys().next().value.isOpen = true;\n    }\n  }\n\n  private readonly closeOtherPanels = (panel: ICollapsible) => (value: boolean) => {\n    if (!value) {\n      return;\n    }\n\n    if (!this.closeOthers) {\n      return;\n    }\n\n    this.collapsiblePanels.forEach((_, item) => {\n      if (panel !== item) {\n        item.isOpen = false;\n      }\n    });\n  };\n\n  private setPanelsState(isOpen: boolean) {\n    this.collapsiblePanels.forEach((_, panel) => (panel.isOpen = isOpen));\n  }\n\n  private setNestedAccordionsState(isOpen: boolean) {\n    this.nestedAccordions.forEach((accordion) => {\n      if (isOpen) {\n        accordion.expandAll();\n      } else {\n        accordion.collapseAll();\n      }\n    });\n  }\n}\n","<ng-content></ng-content>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CollapsibleAccordionComponent } from './collapsible-accordion.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [CollapsibleAccordionComponent],\n  exports: [CollapsibleAccordionComponent],\n})\nexport class CollapsibleAccordionModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}