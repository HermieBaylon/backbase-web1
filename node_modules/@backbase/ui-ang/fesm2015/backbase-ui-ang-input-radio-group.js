import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Input, forwardRef, ContentChildren, NgModule } from '@angular/core';
import * as i3 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i1 from '@backbase/foundation-ang/future';
import * as i2 from '@ng-bootstrap/ng-bootstrap';
import { NgbButtonsModule } from '@ng-bootstrap/ng-bootstrap';

/**
 * @name InputRadioComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that represents a single radio that is part of the radio group component.
 */
class InputRadioComponent {
    constructor() {
        this.disabled = false;
    }
}
InputRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRadioComponent, selector: "bb-input-radio-ui", inputs: { labelTemplate: "labelTemplate", labelTemplateContext: "labelTemplateContext", value: "value", label: "label", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], role: "role", ariaActivedescendant: ["aria-activedescendant", "ariaActivedescendant"], ariaExpanded: ["aria-expanded", "ariaExpanded"], ariaInvalid: ["aria-invalid", "ariaInvalid"], ariaOwns: ["aria-owns", "ariaOwns"], disabled: "disabled" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-radio-ui',
                    template: '',
                }]
        }], propDecorators: { labelTemplate: [{
                type: Input
            }], labelTemplateContext: [{
                type: Input
            }], value: [{
                type: Input
            }], label: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], role: [{
                type: Input
            }], ariaActivedescendant: [{
                type: Input,
                args: ['aria-activedescendant']
            }], ariaExpanded: [{
                type: Input,
                args: ['aria-expanded']
            }], ariaInvalid: [{
                type: Input,
                args: ['aria-invalid']
            }], ariaOwns: [{
                type: Input,
                args: ['aria-owns']
            }], disabled: [{
                type: Input
            }] } });

/**
 * @name InputRadioGroupComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that represents a group of radio buttons.
 */
class InputRadioGroupComponent extends InputBaseComponent {
    constructor(cd, deprecationsService) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        /**
         * Set horizontal placement of the radio elements
         */
        this.horizontal = false;
        /**
         * Select first radio buttons onInit.
         */
        this.preselect = true;
        /**
         * Vertical align of the radio buttons
         */
        this.verticalAlign = 'middle';
        this.isComponentDestroyed = false;
    }
    ngAfterContentInit() {
        if (!this.preselect) {
            return;
        }
        setTimeout(() => {
            if (!this.val && this.radios && this.radios.first) {
                this.val = this.radios.first.value;
            }
        });
    }
    writeValue(value) {
        super.writeValue(value);
        if (!this.isComponentDestroyed) {
            this.cd.detectChanges();
        }
    }
    /**
     * Sets the value of the radio group with the provided value
     */
    set val(v) {
        this.value = v;
        this.onChange(this.value);
    }
    get val() {
        return this.value;
    }
    trackByFn(index, item) {
        return item.value;
    }
    ngOnDestroy() {
        this.isComponentDestroyed = true;
    }
}
InputRadioGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputRadioGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: { horizontal: "horizontal", preselect: "preselect", name: "name", verticalAlign: "verticalAlign" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputRadioGroupComponent),
            multi: true,
        },
    ], queries: [{ propertyName: "radios", predicate: InputRadioComponent }], usesInheritance: true, ngImport: i0, template: "<fieldset\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  class=\"bb-input-radio-group\"\n  [(ngModel)]=\"val\"\n  [attr.aria-label]=\"ariaLabel\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  ngbRadioGroup\n>\n  <legend class=\"bb-input-radio-group__label\" *ngIf=\"label\">{{ label }}</legend>\n  <div class=\"bb-input-radio-group__list\" [ngClass]=\"{ 'bb-input-radio-group__list--horizontal': horizontal }\">\n    <label\n      *ngFor=\"let radio of radios; trackBy: trackByFn\"\n      ngbButtonLabel\n      class=\"bb-input-radio-group__radio\"\n      [class.selected]=\"val === radio.value\"\n      [ngClass]=\"'bb-input-radio-group__radio--vertical-align-' + verticalAlign\"\n      [attr.data-role]=\"'radio-group-option'\"\n    >\n      <input\n        class=\"bb-input-radio-group__input\"\n        type=\"radio\"\n        ngbButton\n        name=\"{{ name }}\"\n        [value]=\"radio.value\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        [disabled]=\"disabled || radio.disabled\"\n        [attr.aria-label]=\"radio.ariaLabel\"\n        [attr.aria-labelledby]=\"radio.ariaLabelledby\"\n        [attr.aria-describedby]=\"radio.ariaDescribedby\"\n        [attr.aria-expanded]=\"radio.ariaExpanded\"\n        [attr.role]=\"radio.role\"\n        [attr.aria-invalid]=\"radio.ariaInvalid\"\n        [attr.aria-owns]=\"radio.ariaOwns\"\n      />\n      <span class=\"bb-input-radio-group__radio-label\" *ngIf=\"radio.label\">\n        {{ radio.label }}\n      </span>\n      <ng-container *ngIf=\"!radio.label\">\n        <ng-container\n          *ngTemplateOutlet=\"radio.labelTemplate; context: { labelTemplateContext: radio.labelTemplateContext }\"\n        ></ng-container>\n      </ng-container>\n    </label>\n  </div>\n</fieldset>\n", directives: [{ type: i2.NgbRadioGroup, selector: "[ngbRadioGroup]", inputs: ["name"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgbButtonLabel, selector: "[ngbButtonLabel]" }, { type: i2.NgbRadio, selector: "[ngbButton][type=radio]", inputs: ["value", "disabled", "name"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-radio-group-ui',
                    templateUrl: './input-radio-group.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputRadioGroupComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }]; }, propDecorators: { horizontal: [{
                type: Input
            }], preselect: [{
                type: Input
            }], name: [{
                type: Input
            }], verticalAlign: [{
                type: Input
            }], radios: [{
                type: ContentChildren,
                args: [InputRadioComponent]
            }] } });

class InputRadioGroupModule {
}
InputRadioGroupModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputRadioGroupModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupModule, declarations: [InputRadioGroupComponent, InputRadioComponent], imports: [CommonModule, NgbButtonsModule, FormsModule], exports: [InputRadioGroupComponent, InputRadioComponent] });
InputRadioGroupModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupModule, imports: [[CommonModule, NgbButtonsModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioGroupModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbButtonsModule, FormsModule],
                    declarations: [InputRadioGroupComponent, InputRadioComponent],
                    exports: [InputRadioGroupComponent, InputRadioComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { InputRadioComponent, InputRadioGroupComponent, InputRadioGroupModule };
//# sourceMappingURL=backbase-ui-ang-input-radio-group.js.map
