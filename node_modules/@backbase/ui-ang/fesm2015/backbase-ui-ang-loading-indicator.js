import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';

/**
 * @name LoadingIndicatorComponent
 *
 * @description
 * Component that displays a loading spinner and message.
 */
class LoadingIndicatorComponent {
    constructor(ref) {
        this.ref = ref;
        /**
         * The size of the loading indicator.
         * Defaults to 'md'.
         */
        this.loaderSize = 'md';
        /**
         * Delay in milliseconds before the loading indicator display.
         * Default to 0.
         */
        this.showDelay = 0;
        /**
         * Defines whether gray background should be displayed.
         * Default to false (background hidden).
         */
        this.hasBackground = false;
        /**
         * Define if spinner should be shown inline without any default padding and margin.
         * Default to false (show default padding and margin).
         */
        this.inline = false;
        this.showLoadingState = false;
    }
    ngOnInit() {
        setTimeout(() => {
            this.showLoadingState = true;
            this.ref.markForCheck();
        }, this.showDelay);
    }
}
LoadingIndicatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
LoadingIndicatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: { text: "text", loaderSize: "loaderSize", showDelay: "showDelay", hasBackground: "hasBackground", inline: "inline" }, ngImport: i0, template: "<ng-container *ngIf=\"!inline; else inlineLoading\">\n  <div\n    *ngIf=\"showLoadingState\"\n    [ngClass]=\"{ jumbotron: hasBackground }\"\n    data-role=\"loading-indicator\"\n    class=\"bb-state-container\"\n  >\n    <ng-container *ngTemplateOutlet=\"loadingIndicator\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-template #inlineLoading>\n  <ng-container *ngIf=\"showLoadingState\">\n    <ng-container *ngTemplateOutlet=\"loadingIndicator\"></ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #loadingIndicator>\n  <div\n    data-role=\"loading-indicator-wrapper\"\n    class=\"bb-loading-indicator bb-loading-indicator--{{ loaderSize }}\"\n    [ngClass]=\"{ 'bb-loading-indicator--inline': inline }\"\n  >\n    <svg\n      aria-label=\"Loading indicator\"\n      i18n-aria-label=\"Loading indicator| Label for the loading indicator @@bb-loading-indicator-ui.indicator\"\n      class=\"bb-loading-indicator__circle\"\n      preserveAspectRatio=\"xMinYMin meet\"\n    >\n      <circle class=\"bb-loading-indicator__path\" r=\"40%\" cx=\"50%\" cy=\"50%\" fill=\"none\" stroke=\"currentColor\"></circle>\n    </svg>\n    <div *ngIf=\"text\" data-role=\"loading-indicator-text\" class=\"bb-loading-indicator__text\">{{ text }}</div>\n  </div>\n</ng-template>\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-loading-indicator-ui',
                    templateUrl: './loading-indicator.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { text: [{
                type: Input
            }], loaderSize: [{
                type: Input
            }], showDelay: [{
                type: Input
            }], hasBackground: [{
                type: Input
            }], inline: [{
                type: Input
            }] } });

class LoadingIndicatorModule {
}
LoadingIndicatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
LoadingIndicatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorModule, declarations: [LoadingIndicatorComponent], imports: [CommonModule], exports: [LoadingIndicatorComponent] });
LoadingIndicatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadingIndicatorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [LoadingIndicatorComponent],
                    exports: [LoadingIndicatorComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { LoadingIndicatorComponent, LoadingIndicatorModule };
//# sourceMappingURL=backbase-ui-ang-loading-indicator.js.map
