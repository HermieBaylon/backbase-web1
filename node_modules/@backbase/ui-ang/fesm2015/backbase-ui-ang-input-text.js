import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { forwardRef, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import * as i3 from '@backbase/ui-ang/char-counter';
import { CharCounterModule } from '@backbase/ui-ang/char-counter';
import { idListAttr } from '@backbase/ui-ang/util';
import * as i1 from '@backbase/ui-ang/services';
import * as i2 from '@backbase/foundation-ang/future';
import * as i6 from 'ngx-mask';
import { NgxMaskModule } from 'ngx-mask';
import * as i7 from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';

/**
 * @name InputTextComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that displays a text input.
 */
class InputTextComponent extends InputBaseComponent {
    constructor(domAttrService, elem, renderer2, cd, deprecationsService) {
        super(cd, deprecationsService);
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        /**
         * The placeholder for the text input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Whether the text input is readonly.
         */
        this.readonly = false;
        /**
         * ngx-mask related; default value imply no mask is used
         */
        this.mask = '';
        /**
         * ngx-mask related; default value imply validation is applied on mask pattern
         */
        this.maskValidator = true;
        /**
         * Shows character counter based on `maxLength`
         */
        this.showCharCounter = false;
        this.valueChange = this._valueChange;
        /**
         * Utility function for use in template
         */
        this.idListAttr = idListAttr;
        this.charCounterId = this.domAttrService.generateId();
    }
    ngAfterViewInit() {
        if (!this.ariaLabel) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);
        }
    }
    focusEditableElement() {
        if (this.inputEl) {
            this.inputEl.nativeElement.focus();
        }
    }
}
InputTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputTextComponent, selector: "bb-input-text-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", minLength: "minLength", autocomplete: "autocomplete", readonly: "readonly", mask: "mask", maskValidator: "maskValidator", showCharCounter: "showCharCounter" }, outputs: { valueChange: "valueChange" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputTextComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputText"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\" [attr.data-role]=\"'label'\">{{ label }}</label>\n<input\n  id=\"{{ id }}\"\n  #inputText\n  [attr.aria-autocomplete]=\"ariaAutocomplete\"\n  [attr.aria-controls]=\"ariaControls\"\n  [attr.aria-describedby]=\"idListAttr(ariaDescribedby, maxLength && showCharCounter ? charCounterId : null)\"\n  [attr.aria-labelledby]=\"ariaLabelledby || null\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  (blur)=\"onBlur($event)\"\n  type=\"text\"\n  class=\"form-control\"\n  (focus)=\"onFocus($event)\"\n  [mask]=\"mask\"\n  [validation]=\"maskValidator\"\n  [disabled]=\"disabled\"\n  [readOnly]=\"readonly\"\n  [placeholder]=\"placeholder\"\n  [required]=\"required\"\n  [attr.size]=\"size\"\n  [attr.maxlength]=\"maxLength\"\n  [attr.minlength]=\"minLength\"\n  [attr.autocomplete]=\"autocomplete\"\n  [bbFocus]=\"autofocus\"\n  [ngClass]=\"inputClassName\"\n  [attr.data-role]=\"'input'\"\n/>\n<bb-char-counter-ui\n  [attr.id]=\"charCounterId\"\n  *ngIf=\"maxLength && showCharCounter\"\n  [element]=\"inputText\"\n  [inputValue]=\"value\"\n  [maxLength]=\"maxLength\"\n  [attr.data-role]=\"'text-input-char-counter'\"\n>\n</bb-char-counter-ui>\n", components: [{ type: i3.CharCounterComponent, selector: "bb-char-counter-ui", inputs: ["inputValue", "element", "maxLength", "blockTyping"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.MaskDirective, selector: "input[mask], textarea[mask]", inputs: ["mask", "specialCharacters", "patterns", "prefix", "suffix", "thousandSeparator", "decimalMarker", "dropSpecialCharacters", "hiddenInput", "showMaskTyped", "placeHolderCharacter", "shownMaskExpression", "showTemplate", "clearIfNotMatch", "validation", "separatorLimit", "allowNegativeNumbers", "leadZeroDateTime"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i5.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { type: i7.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-text-ui',
                    templateUrl: './input-text.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputTextComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }]; }, propDecorators: { placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], readonly: [{
                type: Input
            }], mask: [{
                type: Input
            }], maskValidator: [{
                type: Input
            }], showCharCounter: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], inputEl: [{
                type: ViewChild,
                args: ['inputText']
            }] } });

class InputTextModule {
}
InputTextModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputTextModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextModule, declarations: [InputTextComponent], imports: [CommonModule,
        IconModule,
        FormsModule,
        BaseClassesModule,
        FocusModule,
        CharCounterModule, i6.NgxMaskModule], exports: [InputTextComponent] });
InputTextModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextModule, imports: [[
            CommonModule,
            IconModule,
            FormsModule,
            BaseClassesModule,
            FocusModule,
            CharCounterModule,
            NgxMaskModule.forRoot(),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        IconModule,
                        FormsModule,
                        BaseClassesModule,
                        FocusModule,
                        CharCounterModule,
                        NgxMaskModule.forRoot(),
                    ],
                    declarations: [InputTextComponent],
                    exports: [InputTextComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { InputTextComponent, InputTextModule };
//# sourceMappingURL=backbase-ui-ang-input-text.js.map
