import * as i0 from '@angular/core';
import { forwardRef, Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';
import { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import * as i4 from '@angular/forms';
import { Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import * as i1 from '@backbase/ui-ang/services';
import * as i2 from '@backbase/foundation-ang/future';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';
import { IconModule } from '@backbase/ui-ang/icon';

/**
 * @name InputEmailComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that displays a email input.
 */
class InputEmailComponent extends InputBaseComponent {
    constructor(domAttrService, elem, renderer2, cd, deprecationsService) {
        super(cd, deprecationsService);
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        /**
         * The placeholder for the email input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Whether the email input is readonly.
         */
        this.readonly = false;
    }
    validate(control) {
        return Validators.email(control);
    }
    ngAfterViewInit() {
        if (!this.ariaLabel) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);
        }
    }
}
InputEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputEmailComponent, selector: "bb-input-email-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", minLength: "minLength", readonly: "readonly", autocomplete: "autocomplete" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputEmailComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => InputEmailComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputEmail"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\">{{ label }}</label>\n<input\n  id=\"{{ id }}\"\n  #inputEmail\n  [attr.aria-autocomplete]=\"ariaAutocomplete\"\n  [attr.aria-controls]=\"ariaControls\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.aria-activedescendant]=\"ariaActivedescendant\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  (blur)=\"onBlur()\"\n  type=\"email\"\n  class=\"form-control\"\n  (focus)=\"onFocus()\"\n  [disabled]=\"disabled\"\n  [readOnly]=\"readonly\"\n  [placeholder]=\"placeholder\"\n  [required]=\"required\"\n  [bbFocus]=\"autofocus\"\n  [attr.maxlength]=\"maxLength\"\n  [attr.minlength]=\"minLength\"\n  [attr.autocomplete]=\"autocomplete\"\n/>\n", directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }, { type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i4.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-email-ui',
                    templateUrl: './input-email.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputEmailComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => InputEmailComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }]; }, propDecorators: { placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], readonly: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], inputEl: [{
                type: ViewChild,
                args: ['inputEmail']
            }] } });

class InputEmailModule {
}
InputEmailModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputEmailModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailModule, declarations: [InputEmailComponent], imports: [CommonModule, IconModule, FormsModule, BaseClassesModule, FocusModule], exports: [InputEmailComponent] });
InputEmailModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailModule, imports: [[CommonModule, IconModule, FormsModule, BaseClassesModule, FocusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, IconModule, FormsModule, BaseClassesModule, FocusModule],
                    declarations: [InputEmailComponent],
                    exports: [InputEmailComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { InputEmailComponent, InputEmailModule };
//# sourceMappingURL=backbase-ui-ang-input-email.js.map
