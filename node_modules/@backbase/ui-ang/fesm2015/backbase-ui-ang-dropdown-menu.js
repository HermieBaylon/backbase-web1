import * as i0 from '@angular/core';
import { EventEmitter, Directive, Input, HostBinding, Output, HostListener, TemplateRef, ElementRef, Component, ChangeDetectionStrategy, Inject, ContentChild, ViewChild, NgModule } from '@angular/core';
import * as i4 from '@ng-bootstrap/ng-bootstrap';
import { NgbDropdown, NgbDropdownToggle, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { KEY_CODES, getDynamicId, getKeyCode } from '@backbase/ui-ang/util';
import * as i6 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i1 from '@backbase/ui-ang/services';
import * as i2 from '@backbase/foundation-ang/core';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';

const DROPDOWN_MENU_OPTIONS = [
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
    'PDF',
    'RTF',
];
const DROPDOWN_TEMPLATE_MENU_OPTIONS = [
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
    { name: 'google', url: 'https://google.com' },
    { name: 'twitter', url: 'https://twitter.com' },
    { name: 'facebook', url: 'https://www.facebook.com' },
];

class DropdownMenuOptionToken {
}
class DropdownMenuOptionDirective extends DropdownMenuOptionToken {
    constructor() {
        super(...arguments);
        /**
         * Boolean value to add/remove the active class on menuitem
         *
         * @default false
         */
        this.active = false;
        /**
         * Event that is emitted when user clicks on menuitem
         */
        this.selectionChange = new EventEmitter();
    }
    onSelect() {
        this.selectionChange.emit(this);
    }
}
DropdownMenuOptionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuOptionDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
DropdownMenuOptionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuOptionDirective, selector: "[bbDropdownMenuOption]", inputs: { bbDropdownMenuOption: "bbDropdownMenuOption", active: "active" }, outputs: { selectionChange: "selectionChange" }, host: { listeners: { "click": "onSelect()", "keydown.enter": "onSelect()", "keydown.space": "onSelect()" }, properties: { "class.active": "this.active" } }, providers: [
        {
            provide: DropdownMenuOptionToken,
            useExisting: DropdownMenuOptionDirective,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuOptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDropdownMenuOption]',
                    providers: [
                        {
                            provide: DropdownMenuOptionToken,
                            useExisting: DropdownMenuOptionDirective,
                        },
                    ],
                }]
        }], propDecorators: { bbDropdownMenuOption: [{
                type: Input
            }], active: [{
                type: HostBinding,
                args: ['class.active']
            }, {
                type: Input
            }], selectionChange: [{
                type: Output
            }], onSelect: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['keydown.enter']
            }, {
                type: HostListener,
                args: ['keydown.space']
            }] } });

const DROPDOWN_MENU_MIN_INDENT_TO_HORIZONTAL_AXIS = 1 / 10;
const COUNT_OF_ELEMENTS_TO_SHOW_IN_THE_DROPDOWN_LIST = 8;

class DropdownMenuItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
DropdownMenuItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuItemDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
DropdownMenuItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbDropdownMenuItem]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class DropdownLabelDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
DropdownLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownLabelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
DropdownLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownLabelDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbDropdownLabel]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class DropdownMenuToken {
}
/**
 * @name DropdownMenuComponent
 *
 * @description
 * Component that displays a button with a dropdown
 *
 * @a11y dropDownButtonLabel is discernible text for dropdown button.
 *
 * `aria-owns` handles contextual relationship between a parent and its child elements,
 * in this case between dropdown menu and dropdown items, it's internally handled by the component with unique ids.
 *
 * `aria-activedescendant` identifies currently active element of dropdown item. It's internally handled but
 * when `bbDropdownMenuItem`directive and [role=menuitem] is used for listing dropdown elements
 * then use [id]="option". Example:
 * ```
  <ng-template bbDropdownMenuItem>
    <button role="menuitem" [id]="option" class="dropdown-item" *ngFor="let option of [1,2,3]">
      {{ option}}
   </button>
  </ng-template>
 ```
 */
// @dynamic (to suppress error with resolving Document type during compilation)
class DropdownMenuComponent extends DropdownMenuToken {
    constructor(domAttrService, elem, renderer, deprecationsService, cdr, document) {
        super();
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer = renderer;
        this.deprecationsService = deprecationsService;
        this.cdr = cdr;
        this.document = document;
        this.keyActionsConfig = [
            {
                predicate: (key) => key === KEY_CODES.DOWN,
                resolver: (event, itemList) => {
                    event.preventDefault();
                    if (this.focusedItemIndex === undefined) {
                        this.focusedItemIndex = 0;
                        this.focusListItem(itemList);
                        return;
                    }
                    if (this.focusedItemIndex < itemList.length - 1) {
                        this.focusedItemIndex = this.focusedItemIndex + 1;
                    }
                    this.focusListItem(itemList);
                },
            },
            {
                predicate: (key) => key === KEY_CODES.UP,
                resolver: (event, itemList) => {
                    event.preventDefault();
                    if (this.focusedItemIndex === undefined) {
                        this.focusedItemIndex = 0;
                        this.focusListItem(itemList);
                        return;
                    }
                    if (this.focusedItemIndex > 0) {
                        this.focusedItemIndex = this.focusedItemIndex - 1;
                    }
                    this.focusListItem(itemList);
                },
            },
            {
                predicate: (key) => key === KEY_CODES.SPACE || key === KEY_CODES.ENTER,
                resolver: (event) => {
                    event.preventDefault();
                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions
                    this.dropdownDir && this.dropdownDir.close();
                    if (this.dropDownToggle) {
                        this.dropDownToggle.nativeElement.focus();
                    }
                },
            },
            {
                predicate: (key) => key === KEY_CODES.TAB,
                resolver: (event, itemList) => {
                    if (this.isDropDownOpen() && this.focusedItemIndex === undefined) {
                        if (event.shiftKey) {
                            this.closeDropDown();
                        }
                        else {
                            event.preventDefault();
                            this.focusedItemIndex = 0;
                            this.focusListItem(itemList);
                        }
                        return;
                    }
                    if (this.isFirstListItemInFocus(itemList) && event.shiftKey) {
                        event.preventDefault();
                        this.focusToggle();
                        this.focusedItemIndex = undefined;
                        return;
                    }
                    if (this.isLastListItemInFocus(itemList) && !event.shiftKey) {
                        this.focusToggle();
                        this.closeDropDown();
                        this.focusedItemIndex = undefined;
                        return;
                    }
                    if (this.focusedItemIndex !== undefined) {
                        this.focusedItemIndex = event.shiftKey ? this.focusedItemIndex - 1 : this.focusedItemIndex + 1;
                    }
                },
            },
        ];
        this.dropdownContainerAdjustedMaxHeight = 0;
        this.ariaActivedescendant = null;
        this.dropdownId = getDynamicId() + '_dropdown_menu';
        /**
         * The label for the button dropdown. Defaults to an empty string.
         */
        this.label = '';
        /**
         * The disabled state for the button dropdown. Defaults to false.
         */
        this.disabled = false;
        /**
         * If the value is an object, please provide a optionLabelKey.
         */
        this.options = [];
        /**
         * Event (Output) that emits the value of selected dropdown item.
         */
        this.select = new EventEmitter();
        /**
         * The size of the icon to be displayed. Defaults to md.
         */
        this.iconSize = 'md';
        /**
         * Color of the button. Defaults to primary.
         */
        this.btnColor = 'primary';
        /**
         * The flag to indicate whether the dropdown button should be in a circular shape. Defaults to 'false'.
         * This will only work when there's only an icon inside the button without a text.
         */
        this.btnCircle = false;
        /**
         * If true it will stretch the button inside to 100% width
         */
        this.fullWidth = false;
        /**
         * Whether the dropdown should be closed when clicking one of dropdown items or pressing ESC
         */
        this.autoClose = true;
        /**
         * Specifies which element the dropdown should be appended to.
         */
        this.container = '';
        /**
         * The position of the dropdown. Defaults to bottom-right.
         */
        this.position = 'bottom-right';
        /**
         * The role of the dropdown menu defaults to menu
         */
        this.dropDownMenuRole = 'menu';
        /**
         * Predefined button sizes
         */
        this.buttonSize = 'md';
        /**
         * Dropdown menu (toggle) button aria label
         */
        // todo add translation when adding default value
        this.dropDownButtonLabel = '';
        /**
         * Count of elements which is used in showing elements in the dropdown list.
         */
        this.visibleElementDependingOnViewport = COUNT_OF_ELEMENTS_TO_SHOW_IN_THE_DROPDOWN_LIST;
        /**
         * Add role=group onto host
         */
        this.role = 'group';
        this.window = this.document.defaultView;
    }
    ngOnInit() {
        // the buttons size will be set from the group size
        if (this.elem.nativeElement.parentElement.className.indexOf('btn-group-sm') > -1) {
            this.buttonSize = 'sm';
        }
    }
    ngAfterViewInit() {
        this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.buttonEl && this.buttonEl.nativeElement, this.renderer);
        const itemList = this.getItemList();
        if (itemList) {
            this.setItemsTabIndex(itemList);
        }
    }
    /**
     * Internal handler for clicks on dropdown items
     *
     * @param event Event
     * @param item Item that has been clicked
     */
    onClick(event, item) {
        event.preventDefault();
        this.select.emit(item);
    }
    /**
     * Drop down change state event handler
     *
     * @param isOpen
     */
    onOpenChange(isOpen) {
        if (isOpen) {
            this.adjustDropdownListToViewport();
        }
        else {
            this.focusedItemIndex = undefined;
            if (this.buttonEl) {
                this.ariaActivedescendant = null;
            }
        }
    }
    /**
     * Function that returns the label of the dropdown item
     *
     * @param option Item that has been clicked
     * @param labelKey Key that contains the label of the option object
     */
    getOptionLabel(option) {
        return this.optionLabelKey && typeof option === 'object' ? option[this.optionLabelKey] : option;
    }
    onKeyUp(event) {
        if (!this.isDropDownOpen()) {
            return;
        }
        const itemList = this.getItemList();
        if (!itemList) {
            return;
        }
        this.setItemsTabIndex(itemList);
        const config = this.keyActionsConfig.find((cv) => cv.predicate(getKeyCode(event)));
        if (config) {
            config.resolver(event, itemList);
        }
        const selectedItem = this.getSelectedItem(itemList);
        if (this.buttonEl && this.isDropDownOpen() && selectedItem) {
            this.ariaActivedescendant = selectedItem.id;
        }
    }
    isLastListItemInFocus(itemList) {
        return document.activeElement === itemList.item(itemList.length - 1);
    }
    isFirstListItemInFocus(itemList) {
        return document.activeElement === itemList.item(0);
    }
    focusToggle() {
        if (this.dropDownToggle) {
            this.dropDownToggle.nativeElement.focus();
        }
    }
    closeDropDown() {
        if (this.dropdownDir) {
            this.dropdownDir.close();
        }
    }
    isDropDownOpen() {
        return Boolean(this.dropdownDir && this.dropdownDir.isOpen());
    }
    getItemList() {
        var _a, _b, _c;
        //TODO: don't access private API
        return (_c = (_b = (_a = this.dropdownDir) === null || _a === void 0 ? void 0 : _a['_menu']) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.querySelectorAll('[role=menuitem]');
    }
    setItemsTabIndex(itemList) {
        Array.prototype.forEach.call(itemList, (cv) => {
            this.renderer.setAttribute(cv, 'tabindex', '0');
        });
    }
    focusListItem(itemList) {
        const item = this.getSelectedItem(itemList);
        if (item) {
            item.focus();
        }
    }
    getSelectedItem(itemList) {
        let item;
        if (itemList) {
            // @ts-ignore
            item = itemList.item(this.focusedItemIndex);
        }
        return item;
    }
    adjustDropdownListToViewport() {
        if (!this.doElementsExist()) {
            return;
        }
        this.dropdownContainerAdjustedMaxHeight = 0;
        setTimeout(() => {
            this.defineAdjustedDropdownMenuHeight();
            this.cdr.detectChanges();
        }, 0);
    }
    defineAdjustedDropdownMenuHeight() {
        var _a, _b, _c, _d;
        this.dropdownMenuItemHeight = this.customDropdownMenuItem
            ? ((_a = this.dropdownMenuInnerContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.firstChild).clientHeight
            : (_b = this.dropdownListElement) === null || _b === void 0 ? void 0 : _b.nativeElement.offsetHeight;
        if (!this.dropdownMenuItemHeight) {
            this.clearStyles();
            return;
        }
        // The min height of dropdown container list started from height of 1 element;
        let heightOfAllDropdownItems = this.dropdownMenuItemHeight;
        let containerHeightOfDropdownItems = (((_c = this.dropdownMenuContainer) === null || _c === void 0 ? void 0 : _c.nativeElement.offsetHeight) || 0) + heightOfAllDropdownItems;
        this.defineMaxDropdownContainerHeight();
        const iterationsForIncreasingHeight = Math.min(this.visibleElementDependingOnViewport, 
        // when we pass custom template items, this.options.length can be 0;
        this.options.length || ((_d = this.dropdownMenuInnerContainer) === null || _d === void 0 ? void 0 : _d.nativeElement.childNodes.length));
        for (let i = 1; i < iterationsForIncreasingHeight &&
            // here we should avoid redundant increasing;
            containerHeightOfDropdownItems + this.dropdownMenuItemHeight <= Number(this.dropdownContainerMaxHeight); i++) {
            heightOfAllDropdownItems += this.dropdownMenuItemHeight;
            containerHeightOfDropdownItems += this.dropdownMenuItemHeight;
        }
        this.dropdownContainerAdjustedMaxHeight = heightOfAllDropdownItems;
    }
    defineMaxDropdownContainerHeight() {
        if (!this.window || !this.dropDownToggle)
            return;
        const relativeIndent = DROPDOWN_MENU_MIN_INDENT_TO_HORIZONTAL_AXIS;
        const viewportHeight = this.window.innerHeight;
        const { bottom, top } = this.dropDownToggle.nativeElement.getBoundingClientRect();
        this.dropdownContainerMaxHeight = this.dropdownMenuItemHeight;
        if (this.position.includes('bottom')) {
            const viewportIndent = Math.floor(viewportHeight * relativeIndent);
            const boundingHeight = viewportHeight - bottom;
            // we should include a viewport indent because dropdownContainerMaxHeight must not overlap window.
            this.dropdownContainerMaxHeight = boundingHeight - viewportIndent;
        }
        if (this.position === 'left' || this.position === 'right') {
            const offsetDifference = top + bottom - viewportHeight;
            // here we should calculate the smallest offset between top and bottom because dropdown list renders at middle;
            const offset = offsetDifference <= 0 ? top : viewportHeight - bottom;
            // here we multiply by 2 because left or right position renders dropdown list at middle;
            this.dropdownContainerMaxHeight = Math.floor(2 * offset * (1 - relativeIndent));
        }
        if (this.position.includes('top')) {
            this.dropdownContainerMaxHeight = Math.floor(top * (1 - relativeIndent));
        }
        if (this.position === 'auto') {
            // auto calculates the most suitable position that`s why it is enough to set wider limitations;
            this.dropdownContainerMaxHeight = Math.floor(viewportHeight * (1 - 2 * relativeIndent));
        }
    }
    doElementsExist() {
        var _a;
        const requiredElementPresented = this.customDropdownMenuItem
            ? (_a = this.dropdownMenuInnerContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.firstChild
            : !this.disabled;
        return Boolean(requiredElementPresented);
    }
    clearStyles() {
        // if we can`t define item height we should discard style properties for disabling adjusting.
        if (this.dropdownMenuInnerContainer && this.dropdownMenuContainer) {
            this.renderer.removeStyle(this.dropdownMenuInnerContainer.nativeElement, 'maxHeight');
            this.renderer.removeStyle(this.dropdownMenuContainer.nativeElement, 'visibility');
        }
    }
}
DropdownMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i2.DeprecationsService }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
DropdownMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: { label: "label", disabled: "disabled", options: "options", icon: "icon", iconSize: "iconSize", iconColor: "iconColor", btnColor: "btnColor", btnCircle: "btnCircle", optionLabelKey: "optionLabelKey", fullWidth: "fullWidth", autoClose: "autoClose", container: "container", position: "position", ariaLabel: "ariaLabel", dropDownMenuRole: "dropDownMenuRole", dropDownMenuId: "dropDownMenuId", buttonSize: "buttonSize", dropDownButtonLabel: "dropDownButtonLabel", visibleElementDependingOnViewport: "visibleElementDependingOnViewport", role: "role" }, outputs: { select: "select" }, host: { listeners: { "window:keydown": "onKeyUp($event)" }, properties: { "attr.role": "this.role" } }, providers: [
        {
            provide: DropdownMenuToken,
            useExisting: DropdownMenuComponent,
        },
    ], queries: [{ propertyName: "customLabel", first: true, predicate: DropdownLabelDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: "customDropdownMenuItem", first: true, predicate: DropdownMenuItemDirective, descendants: true, read: TemplateRef, static: true }], viewQueries: [{ propertyName: "dropdownDir", first: true, predicate: NgbDropdown, descendants: true, static: true }, { propertyName: "dropDownToggle", first: true, predicate: NgbDropdownToggle, descendants: true, read: ElementRef, static: true }, { propertyName: "dropdownListElement", first: true, predicate: ["dropdownListElement"], descendants: true }, { propertyName: "dropdownMenuContainer", first: true, predicate: ["dropdownMenuContainer"], descendants: true }, { propertyName: "dropdownMenuInnerContainer", first: true, predicate: ["dropdownMenuInnerContainer"], descendants: true }, { propertyName: "buttonEl", first: true, predicate: ["button"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n  (openChange)=\"onOpenChange($event)\"\n  [autoClose]=\"autoClose\"\n  [container]=\"container\"\n  [placement]=\"position\"\n  class=\"bb-dropdown-btn-group-wrapper\"\n  ngbDropdown\n>\n  <button\n    bbButton\n    #button\n    [attr.aria-label]=\"dropDownButtonLabel\"\n    [attr.data-role]=\"'dropdown-menu-toggle-button'\"\n    [attr.aria-owns]=\"dropdownId\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    [block]=\"fullWidth\"\n    [circle]=\"btnCircle\"\n    [color]=\"btnColor\"\n    [buttonSize]=\"buttonSize\"\n    [disabled]=\"disabled\"\n    ngbDropdownToggle\n  >\n    <div\n      class=\"dropdown-menu-toggle-button__content\"\n      [ngClass]=\"{ 'dropdown-menu-toggle-button__content--full-width': fullWidth }\"\n    >\n      <ng-container *ngIf=\"customLabel; else bbDefaultDropdownLabel\">\n        <ng-container *ngTemplateOutlet=\"customLabel\"></ng-container>\n      </ng-container>\n      <ng-template #bbDefaultDropdownLabel>\n        <span\n          class=\"dropdown-menu__label\"\n          [ngClass]=\"{ 'dropdown-menu__label--full-width': fullWidth }\"\n          *ngIf=\"label\"\n          [attr.data-role]=\"'dropdown-menu-label'\"\n          >{{ label }}</span\n        >\n      </ng-template>\n      <ng-container *ngIf=\"icon\">\n        <bb-icon-ui [color]=\"iconColor\" [name]=\"icon\" [size]=\"iconSize\" [cropped]=\"!btnCircle\"></bb-icon-ui>\n      </ng-container>\n    </div>\n  </button>\n  <div\n    #dropdownMenuContainer\n    class=\"dropdown-menu\"\n    ngbDropdownMenu\n    *ngIf=\"!disabled\"\n    [attr.role]=\"dropDownMenuRole\"\n    [attr.data-role]=\"'dropdown-menu'\"\n    [attr.id]=\"dropDownMenuId\"\n    [style.visibility]=\"dropdownContainerAdjustedMaxHeight ? 'visible' : 'hidden'\"\n  >\n    <div\n      [attr.id]=\"dropdownId\"\n      #dropdownMenuInnerContainer\n      class=\"dropdown-menu-inner-container\"\n      [attr.data-role]=\"'inner-dropdown-menu'\"\n      [style.maxHeight.px]=\"dropdownContainerAdjustedMaxHeight\"\n    >\n      <ng-container *ngIf=\"customDropdownMenuItem; else bbDefaultDropdown\">\n        <ng-container *ngTemplateOutlet=\"customDropdownMenuItem\"></ng-container>\n      </ng-container>\n\n      <ng-template #bbDefaultDropdown>\n        <a\n          ngbDropdownItem\n          role=\"menuitem\"\n          href=\"#\"\n          [attr.id]=\"dropdownId + i\"\n          class=\"dropdown-item\"\n          #dropdownListElement\n          *ngFor=\"let option of options; let i = index\"\n          (click)=\"onClick($event, option)\"\n          [attr.data-role]=\"'dropdown-menu-item'\"\n        >\n          {{ getOptionLabel(option) }}\n        </a>\n      </ng-template>\n    </div>\n  </div>\n</div>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-menu-ui',
                    templateUrl: './dropdown-menu.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: DropdownMenuToken,
                            useExisting: DropdownMenuComponent,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.DeprecationsService }, { type: i0.ChangeDetectorRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { customLabel: [{
                type: ContentChild,
                args: [DropdownLabelDirective, { read: TemplateRef, static: true }]
            }], customDropdownMenuItem: [{
                type: ContentChild,
                args: [DropdownMenuItemDirective, { read: TemplateRef, static: true }]
            }], dropdownDir: [{
                type: ViewChild,
                args: [NgbDropdown, { static: true }]
            }], dropDownToggle: [{
                type: ViewChild,
                args: [NgbDropdownToggle, { read: ElementRef, static: true }]
            }], dropdownListElement: [{
                type: ViewChild,
                args: ['dropdownListElement']
            }], dropdownMenuContainer: [{
                type: ViewChild,
                args: ['dropdownMenuContainer']
            }], dropdownMenuInnerContainer: [{
                type: ViewChild,
                args: ['dropdownMenuInnerContainer']
            }], label: [{
                type: Input
            }], disabled: [{
                type: Input
            }], options: [{
                type: Input
            }], select: [{
                type: Output
            }], icon: [{
                type: Input
            }], iconSize: [{
                type: Input
            }], iconColor: [{
                type: Input
            }], btnColor: [{
                type: Input
            }], btnCircle: [{
                type: Input
            }], optionLabelKey: [{
                type: Input
            }], fullWidth: [{
                type: Input
            }], autoClose: [{
                type: Input
            }], container: [{
                type: Input
            }], position: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], dropDownMenuRole: [{
                type: Input
            }], dropDownMenuId: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], dropDownButtonLabel: [{
                type: Input
            }], visibleElementDependingOnViewport: [{
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }, {
                type: Input
            }], buttonEl: [{
                type: ViewChild,
                args: ['button']
            }], onKeyUp: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }] } });

class DropdownMenuFullWidthDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        /**
         * If true it will stretch the dropdown menu to 100% width
         */
        this.bbDropdownToggleFullWidth = false;
    }
    ngAfterViewInit() {
        const dropdownBtn = this.elementRef.nativeElement.querySelector('[ngbDropdownToggle]');
        const dropdownMenu = this.elementRef.nativeElement.querySelector('[ngbDropdownMenu]');
        const splitBtnWrapper = dropdownBtn === null || dropdownBtn === void 0 ? void 0 : dropdownBtn.closest('div.btn-group');
        if (this.bbDropdownToggleFullWidth) {
            this.dropdownMenuChanges = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.attributeName === 'class' && dropdownMenu.classList.contains('show')) {
                        const minWidth = splitBtnWrapper ? splitBtnWrapper.clientWidth : dropdownBtn.clientWidth;
                        this.renderer.setStyle(dropdownMenu, 'min-width', `${minWidth}px`);
                    }
                });
            });
            this.dropdownMenuChanges.observe(dropdownMenu, {
                attributes: true,
            });
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.dropdownMenuChanges) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
}
DropdownMenuFullWidthDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuFullWidthDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
DropdownMenuFullWidthDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuFullWidthDirective, selector: "[bbDropdownToggleFullWidth]", inputs: { bbDropdownToggleFullWidth: "bbDropdownToggleFullWidth" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuFullWidthDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDropdownToggleFullWidth]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { bbDropdownToggleFullWidth: [{
                type: Input
            }] } });

class DropdownMenuModule {
}
DropdownMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DropdownMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuModule, declarations: [DropdownMenuComponent,
        DropdownMenuItemDirective,
        DropdownLabelDirective,
        DropdownMenuOptionDirective,
        DropdownMenuFullWidthDirective], imports: [CommonModule, NgbDropdownModule, IconModule, ButtonModule], exports: [DropdownMenuComponent,
        DropdownMenuItemDirective,
        DropdownLabelDirective,
        DropdownMenuOptionDirective,
        DropdownMenuFullWidthDirective] });
DropdownMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuModule, imports: [[CommonModule, NgbDropdownModule, IconModule, ButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbDropdownModule, IconModule, ButtonModule],
                    declarations: [
                        DropdownMenuComponent,
                        DropdownMenuItemDirective,
                        DropdownLabelDirective,
                        DropdownMenuOptionDirective,
                        DropdownMenuFullWidthDirective,
                    ],
                    exports: [
                        DropdownMenuComponent,
                        DropdownMenuItemDirective,
                        DropdownLabelDirective,
                        DropdownMenuOptionDirective,
                        DropdownMenuFullWidthDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DROPDOWN_MENU_OPTIONS, DROPDOWN_TEMPLATE_MENU_OPTIONS, DropdownLabelDirective, DropdownMenuComponent, DropdownMenuFullWidthDirective, DropdownMenuItemDirective, DropdownMenuModule, DropdownMenuOptionDirective, DropdownMenuOptionToken, DropdownMenuToken };
//# sourceMappingURL=backbase-ui-ang-dropdown-menu.js.map
