{"version":3,"file":"backbase-ui-ang-payment-card-number-pipe.js","sources":["../../../../libs/ui-ang/payment-card-number-pipe/constants.ts","../../../../libs/ui-ang/payment-card-number-pipe/payment-card-number.pipe.ts","../../../../libs/ui-ang/payment-card-number-pipe/payment-card-number.module.ts","../../../../libs/ui-ang/payment-card-number-pipe/backbase-ui-ang-payment-card-number-pipe.ts"],"sourcesContent":["import { AvailableFeature } from '@backbase/foundation-ang/future';\n\n/**\n * The configuration that determines how a payment card number should be\n * formatted.\n *\n * @deprecated from 6.0.0\n * use AccountsDisplayingFormat instead\n */\nexport interface PaymentCardNumberFormat {\n  /**\n   * Total length of the payment card number.\n   */\n  length: number;\n  /**\n   * Index range of characters that should be masked.\n   */\n  maskRange: [number, number];\n  /**\n   * The size (or array of sizes) the segments should have.\n   */\n  segments: number | Array<number>;\n}\n\n/**\n * Default payment card number format.\n */\nexport const DefaultPaymentCardNumberFormat: PaymentCardNumberFormat = {\n  length: 16,\n  maskRange: [0, 12],\n  segments: 4,\n};\n\n/**\n * Lookup object containing payment card number formats for common payment card\n * vendors.\n */\nexport const PaymentCardNumberVendors: { [vendor: string]: PaymentCardNumberFormat } = {\n  mastercard: {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4,\n  },\n  visa: {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4,\n  },\n  'visa-debit': {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4,\n  },\n  'diners-club': {\n    length: 16,\n    maskRange: [0, 12],\n    segments: 4,\n  },\n  'american-express': {\n    length: 15,\n    maskRange: [0, 11],\n    segments: [4, 6, 5],\n  },\n};\n\n/**\n * A feature flag that enables numbers masking synchronization with backend\n * If set FE should not apply any masking and rely on the backend masking behavior\n *\n * @internal\n */\nexport const SYNCHRONIZE_NUMBERS_MASKING: AvailableFeature = {\n  name: 'SYNCHRONIZE_NUMBERS_MASKING',\n  description: 'Enables accounts masking synchronization with backend',\n};\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FeaturesService } from '@backbase/foundation-ang/future';\nimport { PaymentCardNumberFormat, SYNCHRONIZE_NUMBERS_MASKING } from './constants';\nimport { segment } from '@backbase/ui-ang/util';\nimport { AccountsDisplayingFormatService } from '@backbase/ui-ang/account-number-pipe';\n\n/**\n * @name pad\n * @inner\n * @param value - the string to pad\n * @param length - the length to pad the string to\n * @param ch - the character to pad the string width\n * @param leftPad - whether to pad left (true) or pad right (false)\n *\n * @description\n * Pad a string to specified length with specified character\n */\nfunction pad(value: string, length: number, ch: string = '0', leftPad = true) {\n  const paddingSize = Math.max(length - value.length, 0);\n  const padding = ch.repeat(paddingSize);\n\n  return leftPad ? padding + value : value + padding;\n}\n\n/**\n * @name mask\n * @inner\n * @param value - the string to mask\n * @param indexStart - the index to start masking from\n * @param indexEnd - the index to end masking\n * @param maskChar - the character to mask with\n *\n * @description\n * Mask part of a string with specified character\n */\nfunction mask(value: string, [indexStart, indexEnd]: [number, number], maskChar: string = '*') {\n  let maskedString = '';\n\n  if (indexEnd < 0) {\n    const charsToShow = value.slice(indexEnd);\n    maskedString = maskChar.repeat(value.length - charsToShow.length) + charsToShow;\n  } else {\n    const maskStr = maskChar.repeat(indexEnd - indexStart);\n    maskedString = value.substring(0, indexStart) + maskStr + value.substring(indexEnd);\n  }\n\n  return maskedString;\n}\n\n@Pipe({\n  name: 'paymentCardNumber',\n})\nexport class PaymentCardNumberPipe implements PipeTransform {\n  private readonly defaultFormat = this.accountsDisplayingFormatService.getDefaultFormat('cardNumber');\n\n  /**\n   * @name PaymentCardNumberPipe#constructor\n   * @param accountsDisplayingFormatService - AccountsDisplayingFormatService\n   * @param featuresService - FeaturesService\n   *\n   * @internal\n   */\n  constructor(\n    private readonly accountsDisplayingFormatService: AccountsDisplayingFormatService,\n    private readonly featuresService: FeaturesService,\n  ) {}\n\n  /**\n   * @name PaymentCardNumberPipe#transform\n   * @param value - the string to transform\n   * @param config - the formatting configuration\n   * @param maskChar - the character to mask with, deprecated from 6.0.0\n   *\n   * @description\n   * Formats a card number, mask it and split it into segments\n   * - do not set config parameter to use with a global accountsFormat configuration\n   * - use config parameter to apply a custom accountsFormat configuration\n   */\n  transform(value: string | number, config?: PaymentCardNumberFormat, maskChar: string = 'â€¢'): string {\n    const displayingFormat = config ?? this.defaultFormat;\n    let formattedNumber = value.toString();\n\n    if (config && !this.featuresService.isEnabled(SYNCHRONIZE_NUMBERS_MASKING)) {\n      formattedNumber = pad(formattedNumber, config.length, maskChar);\n      formattedNumber = mask(formattedNumber, config.maskRange, maskChar);\n    }\n\n    return segment(formattedNumber, displayingFormat.segments);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FutureFeaturesModule } from '@backbase/foundation-ang/future';\n\nimport { PaymentCardNumberPipe } from './payment-card-number.pipe';\nimport { SYNCHRONIZE_NUMBERS_MASKING } from './constants';\n\n@NgModule({\n  imports: [CommonModule, FutureFeaturesModule.allowOptIn([SYNCHRONIZE_NUMBERS_MASKING])],\n  declarations: [PaymentCardNumberPipe],\n  exports: [PaymentCardNumberPipe],\n})\nexport class PaymentCardNumberModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}