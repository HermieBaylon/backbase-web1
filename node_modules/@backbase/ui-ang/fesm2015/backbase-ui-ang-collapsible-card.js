import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { EventEmitter, Component, Optional, Host, Input, Output, NgModule } from '@angular/core';
import * as i1 from '@backbase/ui-ang/collapsible-accordion';
import * as i2 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';

/**
 * @name CollapsibleCardComponent
 *
 * @description
 * Provides an expandable details-summary/body-header view.
 * Uses bb-collapsible-ui for a predefined template
 *
 * @a11y ariaLabelForIcon is discernible text for chevron icon
 */
class CollapsibleCardComponent {
    constructor(bbCollapsibleAccordion) {
        this.bbCollapsibleAccordion = bbCollapsibleAccordion;
        this.open = false;
        /**
         * Accessible label for chevron icon.
         */
        this.ariaLabelForIcon = 'Chevron icon';
        /**
         * Accessible label for collapsible card
         */
        this.ariaLabel = 'toggle';
        /**
         * Whether chevron should be displayed.
         *
         * @default true
         */
        this.hasChevron = true;
        /**
         * Whether card should be highlighted.
         *
         * @default false
         */
        this.highlight = false;
        /**
         * Whether card should has shadow effect.
         *
         * @default true
         */
        this.shadow = true;
        /**
         * Card size
         *
         * @default 'md'
         */
        this.size = 'md';
        this.isOpenChange = new EventEmitter();
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.registerNestedPanel(this);
        }
    }
    /**
     * Toggles the content.
     */
    set isOpen(v) {
        this.open = v;
        this.isOpenChange.emit(v);
    }
    get isOpen() {
        return this.open;
    }
    ngOnDestroy() {
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.unregisterNestedPanel(this);
        }
    }
    toggle() {
        this.isOpen = !this.isOpen;
    }
}
CollapsibleCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardComponent, deps: [{ token: i1.CollapsibleAccordionComponent, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CollapsibleCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleCardComponent, selector: "bb-collapsible-card-ui", inputs: { isOpen: "isOpen", ariaLabelForIcon: "ariaLabelForIcon", ariaLabel: ["aria-label", "ariaLabel"], hasChevron: "hasChevron", highlight: "highlight", shadow: "shadow", size: "size" }, outputs: { isOpenChange: "isOpenChange" }, ngImport: i0, template: "<bb-collapsible-ui\n  [(isOpen)]=\"isOpen\"\n  class=\"bb-card bb-card--collapsible bb-card--{{ size }}\"\n  [ngClass]=\"{\n    'bb-card--highlight': highlight,\n    'bb-card--shadowless': !shadow\n  }\"\n>\n  <ng-template bbCollapsibleHeader let-toggle=\"toggle\">\n    <div\n      data-role=\"bb-collapsible-card-header\"\n      class=\"bb-card__header bb-card__header--only-child\"\n      role=\"button\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-expanded]=\"isOpen\"\n      tabindex=\"0\"\n      (bbKeyboardClick)=\"toggle()\"\n    >\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--fill\"><ng-content select=\"[bbCollapsibleTitle]\"></ng-content></div>\n        <bb-icon-ui\n          [aria-label]=\"ariaLabelForIcon\"\n          *ngIf=\"hasChevron\"\n          class=\"bb-stack__item\"\n          name=\"{{ isOpen ? 'expand-less' : 'expand-more' }}\"\n          data-role=\"bb-collapsible-card-header__icon\"\n        ></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbCollapsibleBody>\n    <div class=\"bb-card__body\" data-role=\"bb-collapsible-card-body\">\n      <ng-content select=\"[bbCollapsibleBody]\"></ng-content>\n    </div>\n  </ng-template>\n</bb-collapsible-ui>\n", components: [{ type: i2.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i5.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-card-ui',
                    templateUrl: 'collapsible-card.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.CollapsibleAccordionComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }]; }, propDecorators: { isOpen: [{
                type: Input
            }], ariaLabelForIcon: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], hasChevron: [{
                type: Input
            }], highlight: [{
                type: Input
            }], shadow: [{
                type: Input
            }], size: [{
                type: Input
            }], isOpenChange: [{
                type: Output
            }] } });

class CollapsibleCardModule {
}
CollapsibleCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CollapsibleCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardModule, declarations: [CollapsibleCardComponent], imports: [CollapsibleModule, CommonModule, IconModule, KeyboardClickModule], exports: [CollapsibleCardComponent] });
CollapsibleCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardModule, imports: [[CollapsibleModule, CommonModule, IconModule, KeyboardClickModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CollapsibleModule, CommonModule, IconModule, KeyboardClickModule],
                    declarations: [CollapsibleCardComponent],
                    exports: [CollapsibleCardComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CollapsibleCardComponent, CollapsibleCardModule };
//# sourceMappingURL=backbase-ui-ang-collapsible-card.js.map
