import * as i0 from '@angular/core';
import { Directive, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

const DEFAULT_POSITIVE_CLASS = 'bb-amount--positive';
const DEFAULT_NEGATIVE_CLASS = 'bb-amount--negative';
/**
 * @name HighlightDirective
 *
 * @description
 * Directive that encapsulate logic for highlighting positive/negative numbers.
 * Example usage with bb-amount-ui (AmountModule)
 */
class HighlightDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * The class for positive value.
         */
        this.negativeClass = DEFAULT_NEGATIVE_CLASS;
        /**
         * The class for negative value.
         */
        this.positiveClass = DEFAULT_POSITIVE_CLASS;
        this.amountValue = 0;
        this.highlightValue = true;
    }
    /**
     * Setter (Input) for value of highlighted number
     *
     * @param amount Value of highlighted number
     */
    set amount(amount) {
        this.amountValue = typeof amount === 'number' ? amount : parseFloat(amount);
    }
    /**
     * Setter (Input) that turn on/off highlight
     *
     * @param value Highlight flag
     */
    set bbHighlight(value) {
        this.highlightValue = value === '' || value;
    }
    get isPositive() {
        return this.amountValue >= 0;
    }
    ngOnChanges(change) {
        if (change.negativeClass) {
            this.renderer.removeClass(this.elementRef.nativeElement, change.negativeClass.previousValue);
        }
        if (change.positiveClass) {
            this.renderer.removeClass(this.elementRef.nativeElement, change.positiveClass.previousValue);
        }
        if (change.amount || change.highlight || change.bbHighlight) {
            this.renderer.removeClass(this.elementRef.nativeElement, this.negativeClass);
            this.renderer.removeClass(this.elementRef.nativeElement, this.positiveClass);
        }
        if (this.highlightValue) {
            const highlight = this.isPositive ? this.positiveClass : this.negativeClass;
            this.renderer.addClass(this.elementRef.nativeElement, highlight);
        }
    }
}
HighlightDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
HighlightDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: HighlightDirective, selector: "[bbHighlight]", inputs: { amount: "amount", bbHighlight: "bbHighlight", negativeClass: "negativeClass", positiveClass: "positiveClass" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbHighlight]',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { amount: [{
                type: Input
            }], bbHighlight: [{
                type: Input
            }], negativeClass: [{
                type: Input
            }], positiveClass: [{
                type: Input
            }] } });

class HighlightModule {
}
HighlightModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
HighlightModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightModule, declarations: [HighlightDirective], imports: [CommonModule], exports: [HighlightDirective] });
HighlightModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [HighlightDirective],
                    exports: [HighlightDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { HighlightDirective, HighlightModule };
//# sourceMappingURL=backbase-ui-ang-highlight.js.map
