import * as i0 from '@angular/core';
import { Directive, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ContentChild, ViewChild, Output, Input, NgModule } from '@angular/core';
import * as i10 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i9 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i2 from '@ng-select/ng-select';
import { NgSelectComponent, NgSelectModule } from '@ng-select/ng-select';
import * as i3 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i5 from '@backbase/ui-ang/input-text';
import { InputTextComponent, InputTextModule } from '@backbase/ui-ang/input-text';
import * as i7 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i6 from '@backbase/ui-ang/search-box';
import { SearchBoxComponent, SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i8 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i11 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { DefaultPaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i1 from '@backbase/ui-ang/services';
import * as i4 from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';

const possibleAccountDataKeys = ['balance', 'number', 'IBAN', 'BBAN', 'BIC', 'currency', 'bankBranchCode'];
const isAccountData = (arg) => !!arg && possibleAccountDataKeys.some((key) => arg.hasOwnProperty(key));
const isAccountDataArray = (arg) => Array.isArray(arg) && arg.every(isAccountData);
class CustomSingleSelectedItemLabelDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomSingleSelectedItemLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomSingleSelectedItemLabelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomSingleSelectedItemLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomSingleSelectedItemLabelDirective, selector: "ng-template[bbCustomSingleSelectedItemLabel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomSingleSelectedItemLabelDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomSingleSelectedItemLabel]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomMultiSelectedItemsLabelDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomMultiSelectedItemsLabelDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomMultiSelectedItemsLabelDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomMultiSelectedItemsLabelDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomMultiSelectedItemsLabelDirective, selector: "ng-template[bbCustomMultiSelectedItemsLabel]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomMultiSelectedItemsLabelDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomMultiSelectedItemsLabel]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomOptionsHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomOptionsHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionsHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomOptionsHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomOptionsHeaderDirective, selector: "ng-template[bbCustomOptionsHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionsHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomOptionsHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomOptionItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomOptionItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionItemDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomOptionItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomOptionItemDirective, selector: "ng-template[bbCustomOptionItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomOptionItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomOptionItem]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomGroupItemsHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomGroupItemsHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomGroupItemsHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomGroupItemsHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomGroupItemsHeaderDirective, selector: "ng-template[bbCustomGroupItemsHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomGroupItemsHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomGroupItemsHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
class CustomLoadingTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomLoadingTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomLoadingTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomLoadingTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomLoadingTemplateDirective, selector: "ng-template[bbCustomLoadingTemplate]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomLoadingTemplateDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomLoadingTemplate]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * @name AccountSelectorComponent
 *
 * @description
 * Component that provides a select, multiselect and auto complete feature.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - aria-describedby will be linked to the account selector component, dropdown list and search box
 *  - aria-invalid will be linked to the search box
 *  - aria-labelledby will be linked to the account selector component, dropdown list and search box
 *
 */
class AccountSelectorComponent {
    constructor(renderer, domAttributesService) {
        this.renderer = renderer;
        this.domAttributesService = domAttributesService;
        this.hostRef = this;
        this._items = [];
        this._showError = false;
        this.notFoundTextLabel = 'No items found';
        this.resultCount = 0;
        this.statusId = this.domAttributesService.generateId();
        this.accountSelectorSizeClass = '';
        /**
         * Emitter when search is performed. Outputs search term
         */
        this.search = new EventEmitter();
        /**
         * Emitter when clear search
         */
        this.clearSearch = new EventEmitter();
        /**
         * Emitter when scroll is triggered (will emmit scroll events if virtualScroll is enabled)
         */
        this.scroll = new EventEmitter();
        /**
         * Emitter when scrollToEnd is triggered
         */
        this.scrollToEnd = new EventEmitter();
        /**
         * Emitter when item is removed
         */
        this.remove = new EventEmitter();
        /**
         * Emitter when item is added to selected items or removed from selected items.
         * When Multiple is true: Output is Items[]
         * When Multuple is false: Output is Item
         */
        this.change = new EventEmitter();
        /**
         * Emitter when filter value is changed
         */
        this.filterChange = new EventEmitter();
        /**
         * Emit event when account selector is focused
         */
        this.focus = new EventEmitter();
        /**
         * Emit event when account selector is blurred
         */
        this.blur = new EventEmitter();
        /**
         * Disabled attr for ng-select
         */
        this.disabled = false;
        /**
         * Configuration of how the product number should be formatted (you can hide or show specific numbers).
         */
        this.productNumberFormat = DefaultPaymentCardNumberFormat;
        /**
         * Selected items
         */
        this.selectedItems = [];
        /**
         * Allows to select multiple items
         */
        this.multiple = false;
        /**
         * Whether to close the menu when a value is selected
         */
        this.closeOnSelect = true;
        /**
         * Allow to search for value. Default from ng-select is `true`.
         */
        this.searchable = true;
        /**
         * Allow to clear selected value.
         */
        this.clearable = false;
        /**
         * Placeholder text
         */
        this.placeholder = '';
        /**
         * Loading state from the outside (async items loading)
         */
        this.loading = false;
        /**
         * Dropdown Position (bottom | top | auto)
         */
        this.dropdownPosition = 'bottom';
        /**
         * If true then `scrollEnd` event should NOT be emitted
         */
        this.disableScrollEnd = false;
        /**
         * Turn on or turn off bbHighlight directive in child product items
         */
        this.highlight = true;
        /**
         * Filter items.
         */
        this.filterItems = false;
        /**
         * Marks first item as focused when opening/filtering.
         */
        this.markFirst = false;
        /**
         * Enables NgSelect internal filtering functionality
         */
        this.internalFiltering = true;
        /**
         * Enables virtual scrolling mechanism
         */
        this.virtualScroll = false;
        /**
         * Enable required validation for ng-select
         */
        this.required = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.ariaInvalid = 'false';
        /**
         * Will show currency Symbol in amount. Default value true
         */
        this.showCurrencySymbol = true;
        /**
         * Will show the bank branch code. Defaults to false
         */
        this.showBankBranchCode = false;
        /**
         * Function expression to provide group value
         */
        this.groupValueFn = (_, children) => ({
            name: _,
            total: children.length,
        });
        /**
         * Set account selector view size
         */
        this.compareItemsWith = (a, b) => a === b;
    }
    /**
     * `AccountSelectorItem`s array
     */
    set items(val) {
        this._items = val;
    }
    get items() {
        return this._items;
    }
    /**
     * Not found text for ng-select
     */
    set notFoundText(val) {
        if (val) {
            this.notFoundTextLabel = val;
        }
    }
    /**
     * Show the error border around account selector.
     * By default, error message will be visible on invalid and touch state.
     * If user wants to show it on submit or some other scenario,
     * then by passing the value for showError, error borders can be triggered.
     */
    set showError(flag) {
        var _a;
        this._showError = flag;
        if (this.required && ((_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.invalid)) {
            if (this._showError) {
                this.markAccountSelectorModelAsTouched();
            }
            else {
                this.markAccountSelectorModelAsUnTouched();
            }
        }
    }
    get showError() {
        return this._showError;
    }
    /**
     * Set account selector view size
     *
     * @param size
     */
    set size(size) {
        this.accountSelectorSizeClass = size === 'sm' ? 'bb-account-selector--sm' : '';
    }
    onSearch(event) {
        if (typeof event === 'string') {
            this.search.emit(event);
        }
    }
    onClear() {
        this.clearSearch.emit();
        this.onFilterChange(undefined);
    }
    onScroll(position) {
        this.scroll.emit(position);
    }
    onScrollToEnd() {
        if (!this.disableScrollEnd) {
            this.scrollToEnd.emit();
        }
    }
    onRemove(event) {
        this.remove.emit(event);
    }
    onChange(event) {
        if (event.type === 'change') {
            event.preventDefault();
            event.stopPropagation();
            return;
        }
        if (isAccountData(event) || isAccountDataArray(event)) {
            this.change.emit(event);
        }
    }
    selectAll() {
        this.selectedItems = this.items;
        this.onChange(this.selectedItems);
    }
    unselectAll() {
        this.selectedItems = [];
        this.onChange(this.selectedItems);
    }
    resetAccountSelectorModel() {
        var _a;
        (_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.control.reset();
    }
    ngAfterViewInit() {
        //https://github.com/ng-select/ng-select/issues/951
        //remove role, because of accessibility issues, role=listbox need to be set only if it has child element
        //input need have aria-hidden=true, because it not vissible element
        if (this.ngSelect) {
            this.ngSelect.focus = () => this.focusEditableElement();
            this.renderer.removeAttribute(this.ngSelect.element, 'role');
            const inputContainers = this.ngSelect.element.getElementsByClassName('ng-input');
            /* eslint-disable */
            for (let i = 0; i < inputContainers.length; i++) {
                const inputElements = inputContainers[i].getElementsByTagName('input');
                /* eslint-disable */
                for (let j = 0; j < inputElements.length; j++) {
                    if (this.ariaInvalid) {
                        this.renderer.setAttribute(inputElements[j], 'aria-invalid', this.ariaInvalid);
                    }
                    if (this.ariaLabelledby) {
                        this.renderer.setAttribute(inputElements[j], 'aria-labelledby', this.ariaLabelledby);
                    }
                    if (this.ariaDescribedby) {
                        this.renderer.setAttribute(inputElements[j], 'aria-describedby', this.ariaDescribedby);
                    }
                    if (!(this.ariaInvalid || this.ariaLabelledby || this.ariaDescribedby)) {
                        this.renderer.setAttribute(inputElements[j], 'aria-hidden', 'true');
                    }
                    this.renderer.addClass(inputElements[j], 'sr-only');
                }
            }
        }
    }
    onFocus() {
        this.focus.emit();
    }
    onBlur() {
        var _a;
        // Emit blur event only if ng-select is not open(e.g: tabbing through the account selector).
        if (!((_a = this.ngSelect) === null || _a === void 0 ? void 0 : _a.isOpen)) {
            this.blur.emit();
        }
    }
    onOpen() {
        //set role, because of accessibility issues, when child element appear in dom
        if (this.ngSelect) {
            this.renderer.setAttribute(this.ngSelect.element, 'role', 'listbox');
            this.updateResultCount();
        }
    }
    onClose() {
        //remove role, because of accessibility issues, role=listbox need to be set only if it has child element
        if (this.ngSelect) {
            this.renderer.removeAttribute(this.ngSelect.element, 'role');
            this.focusEditableElement();
            // Used to show validation(incase used inside form) message after account selector is closed
            this.blur.emit();
        }
    }
    onFilterChange(query) {
        const filterValue = query || '';
        if (this.ngSelect && this.internalFiltering) {
            this.ngSelect.filter(filterValue);
        }
        this.updateResultCount();
        this.filterChange.next(filterValue);
    }
    focusEditableElement() {
        const input = this.textInput || this.searchBox;
        if (this.ngSelect && !this.ngSelect.isOpen) {
            this.focusNgSelect();
        }
        else if (input) {
            input.focusEditableElement();
        }
    }
    /**
     * Call the native `ngSelect` `focus()` method
     * because ngSelect focus has been override in AccountSelectorComponent ngAfterViewInit
     */
    focusNgSelect() {
        if (this.ngSelect) {
            this.ngSelect.constructor.prototype.focus.call(this.ngSelect);
        }
    }
    markAccountSelectorModelAsTouched() {
        var _a;
        (_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.control.markAsTouched();
    }
    markAccountSelectorModelAsUnTouched() {
        var _a;
        (_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.control.markAsUntouched();
    }
    updateResultCount() {
        var _a;
        this.resultCount = ((_a = this.ngSelect) === null || _a === void 0 ? void 0 : _a.itemsList.filteredItems.filter(({ children }) => !children).length) || 0;
    }
}
AccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorComponent, deps: [{ token: i0.Renderer2 }, { token: i1.DomAttributesService }], target: i0.ɵɵFactoryTarget.Component });
AccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: { items: "items", disabled: "disabled", notFoundText: "notFoundText", showError: "showError", productNumberFormat: "productNumberFormat", selectedItems: "selectedItems", multiple: "multiple", closeOnSelect: "closeOnSelect", searchable: "searchable", clearable: "clearable", placeholder: "placeholder", loading: "loading", dropdownPosition: "dropdownPosition", disableScrollEnd: "disableScrollEnd", highlight: "highlight", filterItems: "filterItems", markFirst: "markFirst", internalFiltering: "internalFiltering", virtualScroll: "virtualScroll", required: "required", typeahead: "typeahead", minTermLength: "minTermLength", typeToSearchText: "typeToSearchText", ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaInvalid: ["aria-invalid", "ariaInvalid"], searchFunc: "searchFunc", showCurrencySymbol: "showCurrencySymbol", showBankBranchCode: "showBankBranchCode", groupByFn: "groupByFn", groupValueFn: "groupValueFn", size: "size", compareItemsWith: "compareItemsWith" }, outputs: { search: "search", clearSearch: "clearSearch", scroll: "scroll", scrollToEnd: "scrollToEnd", remove: "remove", change: "change", filterChange: "filterChange", focus: "focus", blur: "blur" }, queries: [{ propertyName: "customSingleSelectedItemLabel", first: true, predicate: CustomSingleSelectedItemLabelDirective, descendants: true }, { propertyName: "customMultiSelectedItemsLabel", first: true, predicate: CustomMultiSelectedItemsLabelDirective, descendants: true }, { propertyName: "customOptionsHeader", first: true, predicate: CustomOptionsHeaderDirective, descendants: true }, { propertyName: "customOptionItem", first: true, predicate: CustomOptionItemDirective, descendants: true }, { propertyName: "customGroupItemsHeader", first: true, predicate: CustomGroupItemsHeaderDirective, descendants: true }, { propertyName: "customLoadingTemplate", first: true, predicate: CustomLoadingTemplateDirective, descendants: true }], viewQueries: [{ propertyName: "ngSelect", first: true, predicate: NgSelectComponent, descendants: true }, { propertyName: "accountSelectorModel", first: true, predicate: ["accountSelectorModel"], descendants: true }, { propertyName: "textInput", first: true, predicate: SearchBoxComponent, descendants: true }, { propertyName: "searchBox", first: true, predicate: InputTextComponent, descendants: true }], ngImport: i0, template: "<ng-select\n  #accountSelector\n  #accountSelectorModel=\"ngModel\"\n  (change)=\"onChange($event)\"\n  (clear)=\"onClear()\"\n  (remove)=\"onRemove($event)\"\n  (close)=\"onClose()\"\n  (open)=\"onOpen()\"\n  (scroll)=\"onScroll($event)\"\n  (scrollToEnd)=\"onScrollToEnd()\"\n  [searchFn]=\"searchFunc\"\n  [dropdownPosition]=\"dropdownPosition\"\n  [groupBy]=\"groupByFn\"\n  [groupValue]=\"groupValueFn\"\n  (search)=\"onSearch($event)\"\n  [(ngModel)]=\"selectedItems\"\n  [items]=\"items\"\n  [clearable]=\"clearable\"\n  [closeOnSelect]=\"closeOnSelect\"\n  [multiple]=\"multiple\"\n  [placeholder]=\"placeholder\"\n  [loading]=\"loading\"\n  [markFirst]=\"markFirst\"\n  [searchable]=\"searchable\"\n  [disabled]=\"disabled\"\n  [notFoundText]=\"notFoundTextLabel\"\n  [ngClass]=\"accountSelectorSizeClass\"\n  [compareWith]=\"compareItemsWith\"\n  [virtualScroll]=\"virtualScroll\"\n  [required]=\"required\"\n  [typeahead]=\"typeahead\"\n  [minTermLength]=\"minTermLength\"\n  [typeToSearchText]=\"typeToSearchText\"\n  (focus)=\"onFocus()\"\n  (blur)=\"onBlur()\"\n  bindLabel=\"name\"\n  class=\"bb-account-selector\"\n  name=\"bb-account-selector-ui\"\n  ngDefaultControl\n>\n  <!-- Template for item selected (single:ng-label-tmp) ng-label-tmp-->\n  <ng-template *ngIf=\"!multiple\" let-item=\"item\" ng-label-tmp>\n    <ng-container *ngIf=\"customSingleSelectedItemLabel; else nglabeltmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customSingleSelectedItemLabel?.templateRef;\n          context: {\n            hostRef: hostRef,\n            item: item\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-label-tmp -->\n    <ng-template #nglabeltmp>\n      <bb-product-item-basic-account-ui\n        [selected]=\"true\"\n        [active]=\"true\"\n        [amount]=\"item.balance\"\n        [currency]=\"item.currency\"\n        [productNumberFormat]=\"productNumberFormat\"\n        [productNumber]=\"item.number\"\n        [bankBranchCode]=\"showBankBranchCode ? selectedItems.bankBranchCode : undefined\"\n        [showCurrencySymbol]=\"showCurrencySymbol\"\n        [title]=\"item.name\"\n        [type]=\"item.type\"\n        [status]=\"item.status\"\n        [highlight]=\"highlight\"\n      ></bb-product-item-basic-account-ui>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for items selected (multiple:ng-multi-label-tmp) -->\n  <ng-template *ngIf=\"multiple\" let-items=\"items\" ng-multi-label-tmp>\n    <ng-container *ngIf=\"customMultiSelectedItemsLabel; else ngmultilabeltmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customMultiSelectedItemsLabel?.templateRef;\n          context: {\n            hostRef: hostRef,\n            items: items\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-multi-label-tmp -->\n    <ng-template #ngmultilabeltmp>\n      <div class=\"bb-account-selector__selected\">\n        <div class=\"bb-account-selector__selected-accounts-number bb-text-bold\">\n          <span\n            i18n=\"Selected Accounts|Selected Accounts multi label @@bb-account-selector-ui.multi.label\"\n            data-role=\"selected-account-count\"\n          >\n            { items.length, plural, =1 {1 account selected} other\n            {{{hostRef.items.length === selectedItems.length ? 'All' : items.length}} accounts selected}}\n          </span>\n        </div>\n        <div class=\"bb-account-selector__selected-accounts bb-text-subtitle\" data-role=\"selected-account\">\n          <ng-container *ngIf=\"hostRef.items.length === selectedItems.length; else selectedAccountstmp\">\n            {{ items.length }}\n            <span\n              i18n=\"\n                All Selected Accounts|All Selected Accounts label @@bb-account-selector-ui.allSelectedAccounts.label\"\n              class=\"bb-account-selector__selected-account\"\n            >\n              accounts\n            </span>\n          </ng-container>\n          <ng-template #selectedAccountstmp>\n            <bb-ellipsis-ui>\n              <ng-container *ngFor=\"let item of items; let i = index\">\n                <span class=\"bb-account-selector__selected-account\"\n                  >{{ item.name\n                  }}<span *ngIf=\"i !== items.length - 1\" class=\"bb-account-selector__selected-account-separator\"\n                    >,\n                  </span>\n                </span>\n              </ng-container>\n            </bb-ellipsis-ui>\n          </ng-template>\n        </div>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for header, with search (ng-header-tmp) -->\n  <ng-template ng-header-tmp>\n    <ng-container class=\"bb-account-selector-dropdown__header\" *ngIf=\"customOptionsHeader; else ngheadertmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customOptionsHeader?.templateRef;\n          context: {\n            hostRef: hostRef,\n            multiple: multiple,\n            filterItems: filterItems\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-header-tmp -->\n    <ng-template #ngheadertmp>\n      <section\n        class=\"bb-account-selector-dropdown__header\"\n        [ngClass]=\"{ 'bb-account-selector-dropdown__header--hidden': !searchable }\"\n      >\n        <bb-input-text-ui\n          *ngIf=\"filterItems\"\n          (valueChange)=\"onFilterChange($event)\"\n          (focus)=\"ngSelect?.onInputFocus($event)\"\n          (blur)=\"ngSelect?.onInputBlur($event)\"\n          i18n-placeholder=\"Filter|Filter placeholder@@bb-account-selector-ui.filter.placeholder\"\n          placeholder=\"Filter\"\n          [autofocus]=\"true\"\n          [id]=\"ngSelect?.labelForId\"\n          [disabled]=\"ngSelect?.disabled\"\n          [readonly]=\"ngSelect?.itemsList.maxItemsSelected\"\n          [aria-autocomplete]=\"'list'\"\n          [aria-controls]=\"statusId\"\n          [aria-expanded]=\"ngSelect?.isOpen\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-owns]=\"ngSelect?.isOpen ? ngSelect?.dropdownId : null\"\n          [aria-activedescendant]=\"ngSelect?.isOpen ? ngSelect?.itemsList?.markedItem?.htmlId : null\"\n          [aria-labelledby]=\"ariaLabelledby\"\n          [aria-describedby]=\"ariaDescribedby\"\n        ></bb-input-text-ui>\n        <bb-search-box-ui\n          *ngIf=\"!filterItems\"\n          (clear)=\"onClear()\"\n          (valueChange)=\"onFilterChange($event)\"\n          (submit)=\"onSearch($event)\"\n          (focus)=\"ngSelect?.onInputFocus($event)\"\n          (blur)=\"ngSelect?.onInputBlur($event)\"\n          placeholder=\"Search\"\n          i18n-placeholder=\"Search|Search placeholder@@bb-account-selector-ui.search.placeholder\"\n          [showClear]=\"true\"\n          showSearch=\"true\"\n          [role]=\"'combobox'\"\n          [autofocus]=\"true\"\n          [id]=\"ngSelect?.labelForId\"\n          [disabled]=\"ngSelect?.disabled\"\n          [readonly]=\"ngSelect?.itemsList.maxItemsSelected\"\n          [aria-autocomplete]=\"'list'\"\n          [aria-controls]=\"statusId\"\n          [aria-expanded]=\"ngSelect?.isOpen\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-owns]=\"ngSelect?.isOpen ? ngSelect?.dropdownId : null\"\n          [aria-activedescendant]=\"ngSelect?.isOpen ? ngSelect?.itemsList?.markedItem?.htmlId : null\"\n          [aria-labelledby]=\"ariaLabelledby\"\n          [aria-describedby]=\"ariaDescribedby\"\n        ></bb-search-box-ui>\n      </section>\n      <ng-container *ngIf=\"multiple\">\n        <div class=\"bb-account-selector--multiple__selected-account-filters\">\n          <button\n            (click)=\"selectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Select all|Select all text@@bb-account-selector-ui.select.all.text\"\n            data-role=\"select-all\"\n          >\n            Select all\n          </button>\n          <button\n            (click)=\"unselectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Unselect all|Unselect all text@@bb-account-selector-ui.unselect.all.text\"\n            data-role=\"unselect-all\"\n          >\n            Unselect all\n          </button>\n        </div>\n      </ng-container>\n      <div\n        [id]=\"statusId\"\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        class=\"sr-only\"\n        role=\"status\"\n        i18n=\"\n          Number of options|Screen reader description of the number of options after filtering the\n          combobox@@bb-account-selector-ui.options.count\"\n      >\n        {{ resultCount }} options\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for dropdown items list (ng-option-tmp) -->\n  <ng-template let-index=\"index\" let-item=\"item\" let-item$=\"item$\" ng-option-tmp>\n    <ng-container *ngIf=\"customOptionItem; else ngoptiontmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customOptionItem?.templateRef;\n          context: {\n            hostRef: hostRef,\n            multiple: multiple,\n            item: item,\n            item$: item$,\n            index: index\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-option-tmp -->\n    <ng-template #ngoptiontmp>\n      <ng-container *ngIf=\"multiple\">\n        <div class=\"bb-stack bb-account-selector__option\">\n          <div class=\"bb-stack__item\">\n            <bb-input-checkbox-ui (click)=\"$event.preventDefault()\" [id]=\"index\" [ngModel]=\"item$.selected\">\n            </bb-input-checkbox-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <bb-product-item-basic-account-ui\n              [active]=\"false\"\n              [productNumber]=\"item.number\"\n              [amount]=\"item.balance\"\n              [currency]=\"item.currency\"\n              [productNumberFormat]=\"productNumberFormat\"\n              [showCurrencySymbol]=\"showCurrencySymbol\"\n              [bankBranchCode]=\"showBankBranchCode ? item.bankBranchCode : undefined\"\n              [title]=\"item.name\"\n              [highlight]=\"highlight\"\n            ></bb-product-item-basic-account-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <ng-container *ngIf=\"!multiple\">\n        <bb-product-item-basic-account-ui\n          [active]=\"item$.selected\"\n          [productNumber]=\"item.number\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [productNumberFormat]=\"productNumberFormat\"\n          [showCurrencySymbol]=\"showCurrencySymbol\"\n          [bankBranchCode]=\"showBankBranchCode ? item.bankBranchCode : undefined\"\n          [title]=\"item.name\"\n          [status]=\"item.status\"\n          [highlight]=\"highlight\"\n        ></bb-product-item-basic-account-ui>\n      </ng-container>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for group option header(ng-optgroup-tmp) -->\n  <ng-template let-item=\"item\" ng-optgroup-tmp>\n    <ng-container *ngIf=\"customGroupItemsHeader; else ngoptgrouptmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customGroupItemsHeader?.templateRef;\n          context: {\n            hostRef: hostRef,\n            item: item\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <ng-template #ngoptgrouptmp>\n      <span *ngIf=\"!item.name\" i18n=\"All|All group By label @@bb-account-selector-ui.groupBy.all.label\">All</span>\n      <span *ngIf=\"item.name\" i18n=\"Favorite|Favorite group By label @@bb-account-selector-ui.groupBy.default.label\">\n        Favorite\n      </span>\n      ({{ item.total }})\n    </ng-template>\n  </ng-template>\n\n  <ng-template ng-loadingtext-tmp>\n    <ng-container *ngIf=\"customLoadingTemplate; else ngloadingtexttmp\">\n      <ng-container *ngTemplateOutlet=\"customGroupItemsHeader?.templateRef\"></ng-container>\n    </ng-container>\n    <ng-template #ngloadingtexttmp>\n      <bb-loading-indicator-ui\n        i18n-text=\"Loading Accounts|Loading Accounts label @@bb-account-selector-ui.loading.accounts\"\n        text=\"Loading Accounts\"\n      ></bb-loading-indicator-ui>\n    </ng-template>\n  </ng-template>\n</ng-select>\n", components: [{ type: i2.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i3.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i6.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i7.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i9.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.ɵh, selector: "[ng-label-tmp]" }, { type: i10.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.ɵi, selector: "[ng-multi-label-tmp]" }, { type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.ɵj, selector: "[ng-header-tmp]" }, { type: i11.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.ɵf, selector: "[ng-option-tmp]" }, { type: i2.ɵg, selector: "[ng-optgroup-tmp]" }, { type: i2.ɵn, selector: "[ng-loadingtext-tmp]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-selector-ui',
                    templateUrl: './account-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.DomAttributesService }]; }, propDecorators: { customSingleSelectedItemLabel: [{
                type: ContentChild,
                args: [CustomSingleSelectedItemLabelDirective]
            }], customMultiSelectedItemsLabel: [{
                type: ContentChild,
                args: [CustomMultiSelectedItemsLabelDirective]
            }], customOptionsHeader: [{
                type: ContentChild,
                args: [CustomOptionsHeaderDirective]
            }], customOptionItem: [{
                type: ContentChild,
                args: [CustomOptionItemDirective]
            }], customGroupItemsHeader: [{
                type: ContentChild,
                args: [CustomGroupItemsHeaderDirective]
            }], customLoadingTemplate: [{
                type: ContentChild,
                args: [CustomLoadingTemplateDirective]
            }], ngSelect: [{
                type: ViewChild,
                args: [NgSelectComponent]
            }], accountSelectorModel: [{
                type: ViewChild,
                args: ['accountSelectorModel']
            }], textInput: [{
                type: ViewChild,
                args: [SearchBoxComponent]
            }], searchBox: [{
                type: ViewChild,
                args: [InputTextComponent]
            }], search: [{
                type: Output
            }], clearSearch: [{
                type: Output
            }], scroll: [{
                type: Output
            }], scrollToEnd: [{
                type: Output
            }], remove: [{
                type: Output
            }], change: [{
                type: Output
            }], filterChange: [{
                type: Output
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], items: [{
                type: Input
            }], disabled: [{
                type: Input
            }], notFoundText: [{
                type: Input
            }], showError: [{
                type: Input
            }], productNumberFormat: [{
                type: Input
            }], selectedItems: [{
                type: Input
            }], multiple: [{
                type: Input
            }], closeOnSelect: [{
                type: Input
            }], searchable: [{
                type: Input
            }], clearable: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], loading: [{
                type: Input
            }], dropdownPosition: [{
                type: Input
            }], disableScrollEnd: [{
                type: Input
            }], highlight: [{
                type: Input
            }], filterItems: [{
                type: Input
            }], markFirst: [{
                type: Input
            }], internalFiltering: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }], required: [{
                type: Input
            }], typeahead: [{
                type: Input
            }], minTermLength: [{
                type: Input
            }], typeToSearchText: [{
                type: Input
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaInvalid: [{
                type: Input,
                args: ['aria-invalid']
            }], searchFunc: [{
                type: Input
            }], showCurrencySymbol: [{
                type: Input
            }], showBankBranchCode: [{
                type: Input
            }], groupByFn: [{
                type: Input
            }], groupValueFn: [{
                type: Input
            }], size: [{
                type: Input
            }], compareItemsWith: [{
                type: Input
            }] } });

class AccountSelectorModule {
}
AccountSelectorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AccountSelectorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorModule, declarations: [AccountSelectorComponent,
        CustomGroupItemsHeaderDirective,
        CustomLoadingTemplateDirective,
        CustomMultiSelectedItemsLabelDirective,
        CustomOptionItemDirective,
        CustomOptionsHeaderDirective,
        CustomSingleSelectedItemLabelDirective], imports: [CommonModule,
        NgSelectModule,
        FormsModule,
        ProductItemBasicAccountModule,
        InputTextModule,
        InputCheckboxModule,
        SearchBoxModule,
        LoadingIndicatorModule,
        ButtonModule,
        EllipsisModule], exports: [AccountSelectorComponent,
        CustomGroupItemsHeaderDirective,
        CustomLoadingTemplateDirective,
        CustomMultiSelectedItemsLabelDirective,
        CustomOptionItemDirective,
        CustomOptionsHeaderDirective,
        CustomSingleSelectedItemLabelDirective] });
AccountSelectorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorModule, imports: [[
            CommonModule,
            NgSelectModule,
            FormsModule,
            ProductItemBasicAccountModule,
            InputTextModule,
            InputCheckboxModule,
            SearchBoxModule,
            LoadingIndicatorModule,
            ButtonModule,
            EllipsisModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        NgSelectModule,
                        FormsModule,
                        ProductItemBasicAccountModule,
                        InputTextModule,
                        InputCheckboxModule,
                        SearchBoxModule,
                        LoadingIndicatorModule,
                        ButtonModule,
                        EllipsisModule,
                    ],
                    declarations: [
                        AccountSelectorComponent,
                        CustomGroupItemsHeaderDirective,
                        CustomLoadingTemplateDirective,
                        CustomMultiSelectedItemsLabelDirective,
                        CustomOptionItemDirective,
                        CustomOptionsHeaderDirective,
                        CustomSingleSelectedItemLabelDirective,
                    ],
                    exports: [
                        AccountSelectorComponent,
                        CustomGroupItemsHeaderDirective,
                        CustomLoadingTemplateDirective,
                        CustomMultiSelectedItemsLabelDirective,
                        CustomOptionItemDirective,
                        CustomOptionsHeaderDirective,
                        CustomSingleSelectedItemLabelDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccountSelectorComponent, AccountSelectorModule, CustomGroupItemsHeaderDirective, CustomLoadingTemplateDirective, CustomMultiSelectedItemsLabelDirective, CustomOptionItemDirective, CustomOptionsHeaderDirective, CustomSingleSelectedItemLabelDirective };
//# sourceMappingURL=backbase-ui-ang-account-selector.js.map
