{"version":3,"file":"backbase-ui-ang-button.js","sources":["../../../../libs/ui-ang/button/button.component.ts","../../../../libs/ui-ang/button/button.component.html","../../../../libs/ui-ang/button/button.directive.ts","../../../../libs/ui-ang/button/button.module.ts","../../../../libs/ui-ang/button/backbase-ui-ang-button.ts"],"sourcesContent":["import { Component, Input, ElementRef, Renderer2, AfterViewInit, ViewChild, HostBinding } from '@angular/core';\n\nimport { ButtonColor } from './button.directive';\n\nexport type ButtonType = 'button' | 'submit' | 'reset';\n\n/**\n * @name ButtonComponent\n *\n * @description\n * Component that displays a button.\n */\n@Component({\n  selector: 'bb-button-ui',\n  templateUrl: './button.component.html',\n})\nexport class ButtonComponent implements AfterViewInit {\n  /**\n   * This Boolean attribute lets you specify that the button should have input focus when the page\n   * loads, unless the user overrides it, for example by typing in a different control.  Only one\n   * form-associated element in a document can have this attribute specified.\n   */\n  @Input() autofocus = false;\n  /**\n   * The HTML5 button type.  Defaults to 'button'.\n   */\n  @Input() type: ButtonType = 'button';\n  /**\n   * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to\n   * false.\n   */\n  @Input() disabled = false;\n  /**\n   * Size of the button.\n   */\n  @Input() buttonSize: 'sm' | 'md' = 'md';\n  /**\n   * The color for the button.  Defaults to 'primary'.\n   */\n  @Input() color: ButtonColor | string = 'primary';\n  /**\n   * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n   */\n  @HostBinding('class.btn-block')\n  @Input()\n  block = false;\n\n  @ViewChild('button', { static: true }) buttonEl: ElementRef | undefined;\n\n  constructor(private readonly elRef: ElementRef, private readonly renderer2: Renderer2) {}\n\n  protected moveAriaAttributes(hostEl: HTMLElement, childEl: HTMLElement) {\n    const nodeMap: NamedNodeMap = hostEl.attributes;\n    // CUT every aria attribute from the host element and PASTE it into the button element\n    Object.keys(nodeMap).forEach((key: string) => {\n      const item: Attr | null = nodeMap.item(Number(key));\n      let attrName;\n      let attrVal;\n      if (item) {\n        attrName = item.name;\n        attrVal = item.value;\n        if (attrName.includes('aria')) {\n          this.renderer2.setAttribute(childEl, attrName, attrVal);\n          this.renderer2.removeAttribute(hostEl, attrName);\n        }\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    this.moveAriaAttributes(this.elRef.nativeElement, this.buttonEl && this.buttonEl.nativeElement);\n  }\n}\n","<button\n  #button\n  [type]=\"type\"\n  class=\"btn bb-button btn-{{ color }}\"\n  [autofocus]=\"autofocus\"\n  [disabled]=\"disabled\"\n  [class.btn-block]=\"block\"\n  [ngClass]=\"buttonSize === 'sm' ? 'btn-sm' : 'btn-md'\"\n>\n  <ng-content></ng-content>\n</button>\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';\n\nexport type ButtonType = 'button' | 'reset' | 'submit';\n\nexport type ButtonColor =\n  | 'primary'\n  | 'info'\n  | 'success'\n  | 'warning'\n  | 'danger'\n  | 'secondary'\n  | 'light'\n  | 'dark'\n  | 'link'\n  | 'link-text'\n  | 'link-text-light'\n  | 'unstyled';\n\n/**\n * @name ButtonDirective\n *\n * @description\n * Directive for styling button.\n *\n * @a11y\n * The `bbButton` directive doesn't provide any specific properties for accessibility.\n * In case of necessity add `aria-*` attributes to the `button` element.\n */\n@Directive({\n  selector: 'button[bbButton]',\n})\nexport class ButtonDirective implements OnInit, OnChanges {\n  /**\n   * Button's type atrribute with default value.\n   */\n  @HostBinding('type')\n  @Input()\n  type: ButtonType = 'button';\n\n  /**\n   * The color for the button. Defaults to 'primary'.\n   * If a custom string used, then a css class is going to be added. The pattern is as follows:\n   * `btn-customColor`\n   */\n  @Input() color: ButtonColor | string = 'primary';\n\n  /**\n   * Size of the button.\n   */\n  @Input() buttonSize: 'sm' | 'md' = 'md';\n\n  /**\n   * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n   */\n  @HostBinding('class.btn-block')\n  @Input()\n  block = false;\n  /**\n   * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.\n   * This will only work when there's only an icon inside the button without a text.\n   */\n  @HostBinding('class.btn-circle')\n  @Input()\n  circle = false;\n\n  constructor(private readonly renderer: Renderer2, private readonly hostElement: ElementRef) {}\n\n  ngOnInit(): void {\n    this.renderer.addClass(this.hostElement.nativeElement, 'btn');\n    this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.color}`);\n    this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.buttonSize}`);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.color) {\n      if (changes.color.previousValue) {\n        this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.color.previousValue}`);\n      }\n\n      if (changes.color.currentValue) {\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.color.currentValue}`);\n      }\n    }\n\n    if (changes.buttonSize) {\n      if (changes.buttonSize.previousValue) {\n        this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.previousValue}`);\n      }\n\n      if (changes.buttonSize.currentValue) {\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.currentValue}`);\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport { ButtonDirective } from './button.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ButtonComponent, ButtonDirective],\n  exports: [ButtonComponent, ButtonDirective],\n})\nexport class ButtonModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}