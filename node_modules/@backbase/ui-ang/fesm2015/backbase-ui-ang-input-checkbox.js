import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Self, Optional, ViewChild, Output, Input, NgModule } from '@angular/core';
import { InputBaseComponent, BaseClassesModule } from '@backbase/ui-ang/base-classes';
import * as i1 from '@backbase/foundation-ang/future';
import * as i2 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import { IconModule } from '@backbase/ui-ang/icon';

/**
 * @name InputCheckboxComponent
 *
 * @description
 * Component that displays a checkbox input.
 */
class InputCheckboxComponent extends InputBaseComponent {
    constructor(cd, el, deprecationsService, parentFormControl) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.el = el;
        this.deprecationsService = deprecationsService;
        this.parentFormControl = parentFormControl;
        /**
         * Event emitted when the checkbox's `indeterminate` value changes.
         */
        this.indeterminateChange = new EventEmitter();
        this.indeterminateValue = false;
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
    /**
     * The value that represents indeterminate state of checkbox
     */
    get indeterminate() {
        return this.indeterminateValue;
    }
    set indeterminate(value) {
        if (this.indeterminateValue !== value) {
            this.indeterminateValue = value;
            this.indeterminateChange.emit(this.indeterminate);
        }
    }
    onValueChange() {
        if (this.indeterminate && this.inputElement) {
            this.indeterminate = false;
            this.inputElement.nativeElement.checked = false;
            this.inputElement.nativeElement.dispatchEvent(new Event('change'));
        }
        super.onValueChange();
    }
    setFocus() {
        if (this.inputElement) {
            this.inputElement.nativeElement.focus();
        }
    }
}
InputCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.DeprecationsService }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
InputCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: { indeterminate: "indeterminate" }, outputs: { indeterminateChange: "indeterminateChange" }, viewQueries: [{ propertyName: "inputElement", first: true, predicate: ["input"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<label\n  [attr.for]=\"id\"\n  class=\"bb-input-checkbox\"\n  [ngClass]=\"{ 'ng-invalid': parentFormControl?.invalid, 'ng-touched': parentFormControl?.touched }\"\n>\n  <input\n    #input\n    type=\"checkbox\"\n    class=\"bb-input-checkbox__input\"\n    [attr.id]=\"id\"\n    [attr.aria-describedby]=\"ariaDescribedby\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [attr.aria-expanded]=\"ariaExpanded\"\n    [attr.role]=\"role\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-owns]=\"ariaOwns\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    [attr.aria-checked]=\"value\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [readOnly]=\"readonly\"\n    [indeterminate]=\"indeterminate\"\n    [attr.aria-label]=\"(!label && ariaLabel) || null\"\n    [(ngModel)]=\"value\"\n    (change)=\"onValueChange()\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\"\n    [attr.data-role]=\"'checkbox-input'\"\n  />\n  <span class=\"bb-input-checkbox__content\" [attr.data-role]=\"'checkbox-label'\">\n    <ng-container *ngIf=\"label; else content\">\n      {{ label }}\n    </ng-container>\n    <ng-template #content>\n      <ng-content></ng-content>\n    </ng-template>\n  </span>\n</label>\n", directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.CheckboxRequiredValidator, selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]" }, { type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-checkbox-ui',
                    templateUrl: './input-checkbox.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.DeprecationsService }, { type: i2.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }]; }, propDecorators: { inputElement: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }], indeterminateChange: [{
                type: Output
            }], indeterminate: [{
                type: Input
            }] } });

class InputCheckboxModule {
}
InputCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
InputCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxModule, declarations: [InputCheckboxComponent], imports: [CommonModule, IconModule, FormsModule, BaseClassesModule], exports: [InputCheckboxComponent] });
InputCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxModule, imports: [[CommonModule, IconModule, FormsModule, BaseClassesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, IconModule, FormsModule, BaseClassesModule],
                    declarations: [InputCheckboxComponent],
                    exports: [InputCheckboxComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { InputCheckboxComponent, InputCheckboxModule };
//# sourceMappingURL=backbase-ui-ang-input-checkbox.js.map
