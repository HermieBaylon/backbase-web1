import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Inject } from '@angular/core';

function navigatorFactory() {
    return navigator;
}
const NAVIGATOR_TOKEN = new InjectionToken('Navigator object');
class BrowserService {
    // 'any' due to issue https://github.com/angular/angular/issues/15640
    constructor(navigator) {
        this.navigator = navigator;
    }
    browserIsMSIE() {
        return this.navigator.userAgent.indexOf('MSIE') > -1 || this.navigator.userAgent.indexOf('Trident/') > -1;
    }
}
BrowserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BrowserService, deps: [{ token: NAVIGATOR_TOKEN }], target: i0.ɵɵFactoryTarget.Injectable });
BrowserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BrowserService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BrowserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NAVIGATOR_TOKEN]
                }] }]; } });

/**
 * Utility service for DOM manipulations
 */
class DomAttributesService {
    constructor() {
        this.idPrefix = 'bb_element_';
        this.nextId = 0;
    }
    generateId() {
        return `${this.idPrefix}${this.nextId++}`;
    }
    moveAriaAttributes(hostEl, childEl, renderer2) {
        const nodeMap = hostEl.attributes;
        // CUT every aria attribute from the host element and PASTE it into the specified element
        Object.keys(nodeMap)
            .map((key) => nodeMap.item(Number(key)))
            .filter((item) => item && (item.name.startsWith('aria-') || item.name.toLowerCase() === 'arialabel'))
            .forEach((item) => {
            const { name: attrName, value: attrVal } = item;
            if (attrName.toLowerCase() === 'arialabel') {
                renderer2.setAttribute(childEl, 'aria-label', attrVal);
            }
            else {
                renderer2.setAttribute(childEl, attrName, attrVal);
            }
            renderer2.removeAttribute(hostEl, attrName);
        });
    }
    copyAriaAttributes(hostEl, childEl, renderer2) {
        const nodeMap = hostEl.attributes;
        Object.keys(nodeMap)
            .map((key) => nodeMap.item(Number(key)))
            .filter((item) => item && item.name.startsWith('aria-'))
            .forEach((item) => item && renderer2.setAttribute(childEl, item.name, item.value));
    }
}
DomAttributesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DomAttributesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrowserService, DomAttributesService, NAVIGATOR_TOKEN, navigatorFactory };
//# sourceMappingURL=backbase-ui-ang-services.js.map
