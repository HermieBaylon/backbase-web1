import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name InputPasswordComponent
 *
 * @description
 * Component that displays a password input
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * visibilityControlLabel is discernible text for show/hide password button.
 * ariaLabel is discernible text for password input
 */
export declare class InputPasswordComponent extends InputBaseComponent implements AfterViewInit {
    private readonly domAttrService;
    private readonly elem;
    private readonly renderer2;
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    parentFormControl: NgControl;
    /**
     * The placeholder for the password input. Defaults to an empty string;
     */
    placeholder: string;
    /**
     * The maxLength for the password input.
     */
    maxLength: number | undefined;
    /**
     * The minLength for the password input.
     */
    minLength: number | undefined;
    /**
     * Whether the password input is readonly.
     */
    readonly: boolean;
    /**
     * The autocomplete type for text input.
     */
    autocomplete: 'new-password' | 'current-password' | 'on' | 'off' | 'one-time-code' | undefined;
    /**
     * Whether to show the visibility button icon after the text.
     */
    showVisibilityControl: boolean;
    /**
     * Whether to show password in plain text.
     */
    showPassword: boolean;
    /**
     * The aria label used when the visibility button is in focus.
     */
    visibilityControlLabel: string;
    /**
     * Aria label for the password input
     */
    ariaLabel: string;
    /**
     * The event emitter called when the visibility button is clicked.
     */
    toggleVisibility: EventEmitter<boolean>;
    inputEl: ElementRef | undefined;
    constructor(domAttrService: DomAttributesService, elem: ElementRef, renderer2: Renderer2, cd: ChangeDetectorRef, deprecationsService: DeprecationsService, parentFormControl: NgControl);
    ngAfterViewInit(): void;
    onVisibilityChange(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputPasswordComponent, [null, null, null, null, null, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputPasswordComponent, "bb-input-password-ui", never, { "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "readonly": "readonly"; "autocomplete": "autocomplete"; "showVisibilityControl": "showVisibilityControl"; "showPassword": "showPassword"; "visibilityControlLabel": "visibilityControlLabel"; "ariaLabel": "ariaLabel"; }, { "toggleVisibility": "toggleVisibility"; }, never, never>;
}
