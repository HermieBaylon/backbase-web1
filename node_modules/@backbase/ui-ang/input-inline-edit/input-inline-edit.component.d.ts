import { AfterContentInit, ChangeDetectorRef, EventEmitter, TemplateRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DomAttributesService } from '@backbase/ui-ang/services';
import * as i0 from "@angular/core";
export declare enum InputInlineEditState {
    IDLE = 0,
    LOADING = 1,
    EDITING = 2
}
/**
 * @name InputInlineEditComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that enables inline input editing.
 */
export declare class InputInlineEditComponent extends InputBaseComponent implements AfterContentInit {
    private readonly domAttributesService;
    private _state;
    private _inputText;
    /**
     * State for inline edit
     */
    set state(value: InputInlineEditState);
    /**
     * Emit on edit state changes
     */
    stateChange: EventEmitter<InputInlineEditState>;
    /**
     * Flag represents visibility of edit button
     *
     * @default: true
     */
    canEdit: boolean;
    /**
     * Applies additional loading state for edit flow
     *
     * @default: false
     */
    hasLoadingState: boolean;
    /**
     * Template for custom and styling text
     */
    inputInlineTemplate: TemplateRef<InputInlineEditComponent> | undefined;
    /**
     * string for editing
     */
    set inputText(value: string | undefined);
    get inputText(): string | undefined;
    /**
     * The maxLength for the text input.
     */
    maxLength: number;
    /**
     * The minLength for the text input.
     */
    minLength: number;
    /**
     *  The max number value of the text input
     */
    maxValue: number | undefined;
    /**
     *  The min number value of the text input
     */
    minValue: number | undefined;
    /**
     * Whether the text input should be auto-focused when shown.
     */
    autofocus: boolean;
    /**
     * The event that's fired after on Cancel.
     */
    cancel: EventEmitter<void>;
    /**
     * The event that's fired after on Accept.
     */
    accept: EventEmitter<string>;
    /**
     * string for aria label on Accept button
     */
    ariaLabelAccept: string;
    /**
     * string for aria label on Cancel button
     */
    ariaLabelCancel: string;
    /**
     * string for aria label on Edit button
     */
    ariaLabelEdit: string;
    /**
     * string for tooltip on Accept button
     */
    tooltipAccept: string;
    /**
     * string for tooltip on Cancel button
     */
    tooltipCancel: string;
    /**
     * string for tooltip on Edit button
     */
    tooltipEdit: string;
    /**
     * The autocomplete value of the enclosed input control.
     */
    autocomplete: string | undefined;
    /**
     * Whether the text input should follow a pattern.
     */
    pattern: RegExp | string | undefined;
    /**
     * Hint to be displayed in edit mode
     */
    hint: string | undefined;
    vForm: FormGroup | undefined;
    readonly validationMessagesId: string;
    /**
     * Utility function for use in template
     */
    idListAttr: (...tokens: any[]) => string | undefined;
    constructor(cd: ChangeDetectorRef, deprecationsService: DeprecationsService, domAttributesService: DomAttributesService);
    ngAfterContentInit(): void;
    writeValue(inputValue: Object | string | null): void;
    onEdit(event: MouseEvent): void;
    onCancel(event?: MouseEvent): void;
    get isLoading(): boolean;
    get editMode(): boolean;
    get isIdleMode(): boolean;
    /**
     * Emits the updated value from input
     *
     * If the {@link InputInlineEditComponent.hasLoadingState } set to true -> the state is not changed,
     * as component state should be updated from outside, otherwise the value will be updated with the
     * new one and state will be switched to `IDLE`
     *
     */
    onAccept(): void;
    hasError(type?: string): boolean | undefined;
    onKeydownHandler(evt: KeyboardEvent): void;
    private updateState;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputInlineEditComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputInlineEditComponent, "bb-input-inline-edit-ui", never, { "state": "state"; "canEdit": "canEdit"; "hasLoadingState": "hasLoadingState"; "inputInlineTemplate": "inputInlineTemplate"; "inputText": "inputText"; "maxLength": "maxLength"; "minLength": "minLength"; "maxValue": "maxValue"; "minValue": "minValue"; "autofocus": "autofocus"; "ariaLabelAccept": "ariaLabelAccept"; "ariaLabelCancel": "ariaLabelCancel"; "ariaLabelEdit": "ariaLabelEdit"; "tooltipAccept": "tooltipAccept"; "tooltipCancel": "tooltipCancel"; "tooltipEdit": "tooltipEdit"; "autocomplete": "autocomplete"; "pattern": "pattern"; "hint": "hint"; }, { "stateChange": "stateChange"; "cancel": "cancel"; "accept": "accept"; }, never, never>;
}
