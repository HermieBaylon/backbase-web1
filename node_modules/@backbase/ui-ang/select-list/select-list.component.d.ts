import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { NgSelectComponent } from '@ng-select/ng-select';
import { Observable, Subject } from 'rxjs';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
export interface SelectListItemBase {
    name: string;
}
export interface SearchPayload {
    term: string;
    items: Array<any>;
}
export declare class SelectListComponent<T extends {
    name: string;
}> extends InputBaseComponent implements OnChanges {
    ngSelect: NgSelectComponent | undefined;
    /**
     * Flag to determine if the data in the list is loading
     */
    loading: boolean;
    /**
     * Placeholder text to display in the input
     * */
    placeholder: string;
    /**
     * Minimum number of characters required before searching for items
     * */
    minTermLength: number;
    /**
     * Maximum number of selected items, 'none' means unlimited
     */
    maxSelectedItems: string;
    /**
     * Flag to determine if the list allows multiple selection.
     * */
    multiple: boolean;
    /**
     * A list of items to select from based on the input text.
     * */
    items: T[];
    /**
     * Flag to determine if typeahead should be used to filter the items list.
     * If enabled the items list can not be updated asynchonously as the filtering
     * and the underlying data will get out of sync.
     */
    filterEnabled: boolean;
    /**
     * Output to capture value change event.
     */
    valueChange: EventEmitter<any>;
    /**
     * Emitter when search is performed. Outputs search term
     */
    search: EventEmitter<string>;
    /**
     * Emitter when clear is performed.
     */
    clear: EventEmitter<void>;
    /**
     * Delay in ms between autocomplete updates.
     * */
    private readonly DEBOUNCE_TIME_MS;
    /**
     * Observable of the typeahead input
     */
    readonly typeaheadInput$: Subject<string>;
    /**
     * Observable of the filtered items
     */
    readonly filteredItems$: Observable<T[]>;
    writeValue(inputValue: Object | string | null): void;
    onSearch(event: string | SearchPayload): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectListComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelectListComponent<any>, "bb-select-list-ui", never, { "loading": "loading"; "placeholder": "placeholder"; "minTermLength": "minTermLength"; "maxSelectedItems": "maxSelectedItems"; "multiple": "multiple"; "items": "items"; "filterEnabled": "filterEnabled"; }, { "valueChange": "valueChange"; "search": "search"; "clear": "clear"; }, never, never>;
}
