import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name InfiniteScrollComponent
 *
 * @description
 * Component that displays an infinite scroll.
 */
export declare class InfiniteScrollComponent implements AfterViewInit, OnDestroy {
    private readonly elRef;
    /**
     * Event that will be triggered when user has scrolled to
     * bottom of the element
     */
    scrollEnd: EventEmitter<void>;
    /**
     * An offset from the bottom of the element to trigger
     * `scrollEnd` event
     */
    offset: number;
    /**
     * Specify debounce duration in ms
     */
    debounce: number;
    /**
     * If true then `scrollEnd` event should NOT be emitted
     */
    disableScrollEnd: boolean;
    /**
     * Emits a new value on element scroll event
     */
    private readonly scroll$;
    /**
     * Completes on component destroy lifecycle event
     * used to unsubscribe from infinite observables
     */
    private readonly ngUnsubscribe$;
    /**
     * Subscribe to `scroll$` observable and emit `scrollEnd` event
     * when element scroll position is at the end of the element
     */
    ngAfterViewInit(): void;
    onScroll(scrollTop: number, scrollheight: number, offsetHeight: number): void;
    onMouseOver(evTarget: Element | null): void;
    constructor(elRef: ElementRef);
    /**
     * trigger `ngUnsubscribe` complete on
     * component destroy lifecycle hook
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InfiniteScrollComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InfiniteScrollComponent, "bb-infinite-scroll-ui", never, { "offset": "offset"; "debounce": "debounce"; "disableScrollEnd": "disableScrollEnd"; }, { "scrollEnd": "scrollEnd"; }, never, ["*"]>;
}
