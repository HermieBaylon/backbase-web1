import { AfterViewInit, ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { NgControl } from '@angular/forms';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name InputNumberComponent
 *
 * @description
 * Component that displays a text input.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 */
export declare class InputNumberComponent extends InputBaseComponent implements AfterViewInit {
    private readonly domAttrService;
    private readonly elem;
    private readonly renderer2;
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    parentFormControl: NgControl;
    /**
     * The placeholder for the number input. Defaults to an empty string;
     */
    placeholder: string;
    /**
     * The maximum value to accept
     */
    max: number | undefined;
    /**
     * The minimum value to accept for this input
     */
    min: number | undefined;
    /**
     * A stepping interval to use when using up and down arrows to adjust the value
     */
    step: number | undefined;
    /**
     * Whether the number input is readonly.
     */
    readonly: boolean;
    /**
     * The autocomplete value of the enclosed input control.
     */
    autocomplete: string | undefined;
    /**
     * Aria label for the number input
     */
    ariaLabel: string;
    inputEl: ElementRef | undefined;
    /**
     * If `true` then the under-laying input control will behave as a default number input
     */
    allowNonDigits: boolean;
    /**
     * If `true` then the under-laying input control will allow negative sign as well.
     * Known issue is that it is possible to insert the negative sign anywhere in the field, not only at the beginning.
     * Inserting the negative sign after a digit will render the value empty.
     */
    allowNegativeSign: boolean;
    constructor(domAttrService: DomAttributesService, elem: ElementRef, renderer2: Renderer2, cd: ChangeDetectorRef, deprecationsService: DeprecationsService, parentFormControl: NgControl);
    private oldInputValue;
    onInput(inputNumber: HTMLInputElement): void;
    onPaste(inputNumber: HTMLInputElement): void;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputNumberComponent, [null, null, null, null, null, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputNumberComponent, "bb-input-number-ui", never, { "placeholder": "placeholder"; "max": "max"; "min": "min"; "step": "step"; "readonly": "readonly"; "autocomplete": "autocomplete"; "ariaLabel": "ariaLabel"; "allowNonDigits": "allowNonDigits"; "allowNegativeSign": "allowNegativeSign"; }, {}, never, never>;
}
