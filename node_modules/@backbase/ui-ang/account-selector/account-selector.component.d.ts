import { AfterViewInit, EventEmitter, Renderer2, TemplateRef } from '@angular/core';
import { NgSelectComponent } from '@ng-select/ng-select';
import { InputTextComponent } from '@backbase/ui-ang/input-text';
import { SearchBoxComponent } from '@backbase/ui-ang/search-box';
import { PaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export interface SearchPayload {
    term: string;
    items: Array<any>;
}
export declare const isAccountData: (arg: any) => boolean;
export declare const isAccountDataArray: (arg: any) => boolean;
export declare class CustomSingleSelectedItemLabelDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomSingleSelectedItemLabelDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomSingleSelectedItemLabelDirective, "ng-template[bbCustomSingleSelectedItemLabel]", never, {}, {}, never>;
}
export declare class CustomMultiSelectedItemsLabelDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomMultiSelectedItemsLabelDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomMultiSelectedItemsLabelDirective, "ng-template[bbCustomMultiSelectedItemsLabel]", never, {}, {}, never>;
}
export declare class CustomOptionsHeaderDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomOptionsHeaderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomOptionsHeaderDirective, "ng-template[bbCustomOptionsHeader]", never, {}, {}, never>;
}
export declare class CustomOptionItemDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomOptionItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomOptionItemDirective, "ng-template[bbCustomOptionItem]", never, {}, {}, never>;
}
export declare class CustomGroupItemsHeaderDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomGroupItemsHeaderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomGroupItemsHeaderDirective, "ng-template[bbCustomGroupItemsHeader]", never, {}, {}, never>;
}
export declare class CustomLoadingTemplateDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomLoadingTemplateDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CustomLoadingTemplateDirective, "ng-template[bbCustomLoadingTemplate]", never, {}, {}, never>;
}
declare type GroupByFunction = (item: any) => any;
export declare type AccountSelectorSize = 'sm' | 'md';
/**
 * @name AccountSelectorComponent
 *
 * @description
 * Component that provides a select, multiselect and auto complete feature.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - aria-describedby will be linked to the account selector component, dropdown list and search box
 *  - aria-invalid will be linked to the search box
 *  - aria-labelledby will be linked to the account selector component, dropdown list and search box
 *
 */
export declare class AccountSelectorComponent<AccountSelectorItem = any> implements AfterViewInit {
    private readonly renderer;
    private readonly domAttributesService;
    readonly hostRef: AccountSelectorComponent;
    private _items;
    private _showError;
    notFoundTextLabel: string;
    resultCount: number;
    readonly statusId: string;
    accountSelectorSizeClass: string;
    customSingleSelectedItemLabel: CustomSingleSelectedItemLabelDirective | undefined;
    customMultiSelectedItemsLabel: CustomMultiSelectedItemsLabelDirective | undefined;
    customOptionsHeader: CustomOptionsHeaderDirective | undefined;
    customOptionItem: CustomOptionItemDirective | undefined;
    customGroupItemsHeader: CustomGroupItemsHeaderDirective | undefined;
    customLoadingTemplate: CustomLoadingTemplateDirective | undefined;
    /**
     * ng-select
     */
    ngSelect: NgSelectComponent | undefined;
    private accountSelectorModel;
    textInput: SearchBoxComponent<unknown> | undefined;
    searchBox: InputTextComponent | undefined;
    /**
     * Emitter when search is performed. Outputs search term
     */
    search: EventEmitter<string>;
    /**
     * Emitter when clear search
     */
    clearSearch: EventEmitter<void>;
    /**
     * Emitter when scroll is triggered (will emmit scroll events if virtualScroll is enabled)
     */
    scroll: EventEmitter<{
        start: number;
        end: number;
    }>;
    /**
     * Emitter when scrollToEnd is triggered
     */
    scrollToEnd: EventEmitter<void>;
    /**
     * Emitter when item is removed
     */
    remove: EventEmitter<any>;
    /**
     * Emitter when item is added to selected items or removed from selected items.
     * When Multiple is true: Output is Items[]
     * When Multuple is false: Output is Item
     */
    change: EventEmitter<object | object[]>;
    /**
     * Emitter when filter value is changed
     */
    filterChange: EventEmitter<string>;
    /**
     * Emit event when account selector is focused
     */
    focus: EventEmitter<void>;
    /**
     * Emit event when account selector is blurred
     */
    blur: EventEmitter<void>;
    /**
     * `AccountSelectorItem`s array
     */
    set items(val: AccountSelectorItem | AccountSelectorItem[]);
    get items(): AccountSelectorItem | AccountSelectorItem[];
    /**
     * Disabled attr for ng-select
     */
    disabled: boolean;
    /**
     * Not found text for ng-select
     */
    set notFoundText(val: string);
    /**
     * Show the error border around account selector.
     * By default, error message will be visible on invalid and touch state.
     * If user wants to show it on submit or some other scenario,
     * then by passing the value for showError, error borders can be triggered.
     */
    set showError(flag: boolean);
    get showError(): boolean;
    /**
     * Configuration of how the product number should be formatted (you can hide or show specific numbers).
     */
    productNumberFormat: PaymentCardNumberFormat;
    /**
     * Selected items
     */
    selectedItems: AccountSelectorItem | AccountSelectorItem[];
    /**
     * Allows to select multiple items
     */
    multiple: boolean;
    /**
     * Whether to close the menu when a value is selected
     */
    closeOnSelect: boolean;
    /**
     * Allow to search for value. Default from ng-select is `true`.
     */
    searchable: boolean;
    /**
     * Allow to clear selected value.
     */
    clearable: boolean;
    /**
     * Placeholder text
     */
    placeholder: string;
    /**
     * Loading state from the outside (async items loading)
     */
    loading: boolean;
    /**
     * Dropdown Position (bottom | top | auto)
     */
    dropdownPosition: string;
    /**
     * If true then `scrollEnd` event should NOT be emitted
     */
    disableScrollEnd: boolean;
    /**
     * Turn on or turn off bbHighlight directive in child product items
     */
    highlight: boolean;
    /**
     * Filter items.
     */
    filterItems: boolean;
    /**
     * Marks first item as focused when opening/filtering.
     */
    markFirst: boolean;
    /**
     * Enables NgSelect internal filtering functionality
     */
    internalFiltering: boolean;
    /**
     * Enables virtual scrolling mechanism
     */
    virtualScroll: boolean;
    /**
     * Enable required validation for ng-select
     */
    required: boolean;
    /**
     * Custom autocomplete or advanced filter.
     */
    typeahead?: Subject<string>;
    /**
     * Minimum term length to start a search. Should be used with typeahead
     */
    minTermLength?: number;
    /**
     * Set custom text when using Typeahead
     */
    typeToSearchText?: string;
    ariaDescribedby: string | undefined;
    ariaLabelledby: string | undefined;
    ariaInvalid: string | undefined;
    /**
     * Allow to apply custom search function
     */
    searchFunc: Function | undefined;
    /**
     * Will show currency Symbol in amount. Default value true
     */
    showCurrencySymbol: boolean;
    /**
     * Will show the bank branch code. Defaults to false
     */
    showBankBranchCode: boolean;
    /**
     * Allow to group items by key or function expression
     */
    groupByFn: GroupByFunction | undefined;
    /**
     * Function expression to provide group value
     */
    groupValueFn: (_: string, children: any[]) => {
        name: string;
        total: number;
    };
    /**
     * Set account selector view size
     *
     * @param size
     */
    set size(size: AccountSelectorSize);
    /**
     * Set account selector view size
     */
    compareItemsWith: (a: AccountSelectorItem, b: AccountSelectorItem) => boolean;
    onSearch(event: string | SearchPayload): void;
    onClear(): void;
    onScroll(position: {
        start: number;
        end: number;
    }): void;
    onScrollToEnd(): void;
    onRemove(event: any): void;
    onChange(event: Event | any): void;
    selectAll(): void;
    unselectAll(): void;
    resetAccountSelectorModel(): void;
    constructor(renderer: Renderer2, domAttributesService: DomAttributesService);
    ngAfterViewInit(): void;
    onFocus(): void;
    onBlur(): void;
    onOpen(): void;
    onClose(): void;
    onFilterChange(query: string | undefined): void;
    focusEditableElement(): void;
    /**
     * Call the native `ngSelect` `focus()` method
     * because ngSelect focus has been override in AccountSelectorComponent ngAfterViewInit
     */
    private focusNgSelect;
    private markAccountSelectorModelAsTouched;
    private markAccountSelectorModelAsUnTouched;
    private updateResultCount;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountSelectorComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccountSelectorComponent<any>, "bb-account-selector-ui", never, { "items": "items"; "disabled": "disabled"; "notFoundText": "notFoundText"; "showError": "showError"; "productNumberFormat": "productNumberFormat"; "selectedItems": "selectedItems"; "multiple": "multiple"; "closeOnSelect": "closeOnSelect"; "searchable": "searchable"; "clearable": "clearable"; "placeholder": "placeholder"; "loading": "loading"; "dropdownPosition": "dropdownPosition"; "disableScrollEnd": "disableScrollEnd"; "highlight": "highlight"; "filterItems": "filterItems"; "markFirst": "markFirst"; "internalFiltering": "internalFiltering"; "virtualScroll": "virtualScroll"; "required": "required"; "typeahead": "typeahead"; "minTermLength": "minTermLength"; "typeToSearchText": "typeToSearchText"; "ariaDescribedby": "aria-describedby"; "ariaLabelledby": "aria-labelledby"; "ariaInvalid": "aria-invalid"; "searchFunc": "searchFunc"; "showCurrencySymbol": "showCurrencySymbol"; "showBankBranchCode": "showBankBranchCode"; "groupByFn": "groupByFn"; "groupValueFn": "groupValueFn"; "size": "size"; "compareItemsWith": "compareItemsWith"; }, { "search": "search"; "clearSearch": "clearSearch"; "scroll": "scroll"; "scrollToEnd": "scrollToEnd"; "remove": "remove"; "change": "change"; "filterChange": "filterChange"; "focus": "focus"; "blur": "blur"; }, ["customSingleSelectedItemLabel", "customMultiSelectedItemsLabel", "customOptionsHeader", "customOptionItem", "customGroupItemsHeader", "customLoadingTemplate"], never>;
}
export {};
