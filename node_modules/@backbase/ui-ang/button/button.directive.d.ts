import { ElementRef, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare type ButtonType = 'button' | 'reset' | 'submit';
export declare type ButtonColor = 'primary' | 'info' | 'success' | 'warning' | 'danger' | 'secondary' | 'light' | 'dark' | 'link' | 'link-text' | 'link-text-light' | 'unstyled';
/**
 * @name ButtonDirective
 *
 * @description
 * Directive for styling button.
 *
 * @a11y
 * The `bbButton` directive doesn't provide any specific properties for accessibility.
 * In case of necessity add `aria-*` attributes to the `button` element.
 */
export declare class ButtonDirective implements OnInit, OnChanges {
    private readonly renderer;
    private readonly hostElement;
    /**
     * Button's type atrribute with default value.
     */
    type: ButtonType;
    /**
     * The color for the button. Defaults to 'primary'.
     * If a custom string used, then a css class is going to be added. The pattern is as follows:
     * `btn-customColor`
     */
    color: ButtonColor | string;
    /**
     * Size of the button.
     */
    buttonSize: 'sm' | 'md';
    /**
     * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.
     */
    block: boolean;
    /**
     * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.
     * This will only work when there's only an icon inside the button without a text.
     */
    circle: boolean;
    constructor(renderer: Renderer2, hostElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ButtonDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ButtonDirective, "button[bbButton]", never, { "type": "type"; "color": "color"; "buttonSize": "buttonSize"; "block": "block"; "circle": "circle"; }, {}, never>;
}
