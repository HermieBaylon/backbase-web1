import { TemplateRef } from '@angular/core';
import { NotificationType } from './notification.component';
import { AppendToDomService } from './append-to-dom.service';
import * as i0 from "@angular/core";
export interface Notification {
    /**
     * The header for the notification.
     */
    header?: string | TemplateRef<any>;
    /**
     * The message template for the notification. Defaults to an empty string
     */
    message: string | TemplateRef<any>;
    /**
     * The type modifier for the notification. Defaults to 'info'
     */
    modifier?: NotificationType;
    /**
     * Whether the notification is dismissible. Defaults to true
     */
    dismissible?: boolean;
    /**
     * The time the notification will appear for in ms.
     * 0 will result in the notifaction remaining open.
     */
    ttl?: number;
    /**
     * The text for the primary action button.
     * Will throw an error if unset and primary action set.
     */
    primaryActionText?: string;
    /**
     * A callback function for the primary action.
     * Required to show the button.
     */
    primaryAction?: Function;
    /**
     * The text for the secondary action button.
     * Will throw an error if unset and secondary action set.
     */
    secondaryActionText?: string;
    /**
     * A callback function for the secondary action.
     * Required to show the button.
     */
    secondaryAction?: Function;
    /**
     * A callback function for the manually close action.
     */
    closeAction?: Function;
    /**
     * A callback function for the host click action.
     */
    hostAction?: Function;
    /**
     * The context for notification header template.
     */
    headerContext?: any;
    /**
     * The context for notification message template.
     */
    messageContext?: any;
    /**
     * The primary action template for the notification.
     */
    primaryActionTemplate?: TemplateRef<any>;
    /**
     * The secondary action template for the notification.
     */
    secondaryActionTemplate?: TemplateRef<any>;
    /**
     * Autofocus will cause the component to be focused on the first rendering.
     */
    autofocus?: boolean;
}
export declare class NotificationService {
    private readonly appendtoDomService;
    constructor(appendtoDomService: AppendToDomService);
    showNotification({ header, message, dismissible, ttl, modifier, headerContext, messageContext, primaryActionText, primaryAction, secondaryActionText, secondaryAction, closeAction, hostAction, primaryActionTemplate, secondaryActionTemplate, autofocus, }: Notification): () => void;
    private createHideNotificationFunction;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NotificationService>;
}
