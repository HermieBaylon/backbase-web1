import { AfterViewInit, ElementRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { BBNotificationConfig } from './notification.config';
import * as i0 from "@angular/core";
export declare type NotificationType = 'success' | 'info' | 'warning' | 'error' | 'alert';
/**
 * @name NotificationComponent
 *
 * @description
 * Component that displays a notification.
 */
export declare class NotificationComponent implements OnInit, AfterViewInit {
    private document;
    private elem;
    /**
     * The header for the notification.
     */
    header: TemplateRef<any> | string | undefined;
    /**
     * The message template for the notification. Defaults to an empty string
     */
    message: TemplateRef<any> | string;
    /**
     * The primary action template for the notification.
     */
    primaryActionTemplate: TemplateRef<any> | undefined;
    /**
     * The secondary action template for the notification.
     */
    secondaryActionTemplate: TemplateRef<any> | undefined;
    /**
     * The type modifier for the notification. Defaults to 'info'
     *
     * This property will be used to add additional class names to the wrapper div of the notification
     * in the following format: `bb-notification--<<modifier>>`
     *
     */
    modifier: NotificationType;
    /**
     * Whether the notification is dismissible. Defaults to `true`.
     *
     *
     * If `true` then an additional class name is added to the wrapper div of the notification in the following format
     * `bb-notification--dismissible`
     */
    dismissible: boolean;
    /**
     * The text for the primary action button.
     * Will throw an error if unset and primary action set.
     */
    primaryActionText: string | undefined;
    /**
     * A callback function for the primary action. Required to show the button.
     */
    primaryAction: Function | undefined;
    /**
     * The text for the secondary action button.
     * Will throw an error if unset and secondary action set.
     */
    secondaryActionText: string | undefined;
    /**
     * A callback function for the secondary action. Required to show the button.
     */
    secondaryAction: Function | undefined;
    /**
     * The callback function for the manually close event.
     */
    closeAction: Function | undefined;
    /**
     * The callback function for the host click event.
     */
    hostAction: Function | undefined;
    /**
     * The context for notification header template.
     */
    headerContext: any;
    /**
     * The context for notification message template.
     */
    messageContext: any;
    /**
     * If `true`, notification opening and closing will be animated.
     * Animation is triggered only when the `.hide()` or `.show()` functions are called
     */
    animation: boolean;
    /**
     * Notification manually close event stream.
     */
    close: EventEmitter<any>;
    notificationContent: ElementRef;
    defaultHeaderTemplate: TemplateRef<any> | undefined;
    defaultMessageTemplate: TemplateRef<any> | undefined;
    defaultPrimaryActionsTemplate: TemplateRef<any> | undefined;
    defaultSecondaryActionsTemplate: TemplateRef<any> | undefined;
    /**
     * Notification icon color.
     */
    iconColor: string | undefined;
    /**
     * Autofocus will cause the component to be focused on the first rendering.
     */
    autofocus: boolean;
    /**
     * Element that focused before notification is open, for back focus when notification is closed.
     */
    previousFocusedElement: HTMLElement;
    protected bemBlock: string;
    protected bemModifiers: ((() => "" | "dismissible") | (() => NotificationType))[];
    get dynamicClassNames(): string[];
    get noAnimation(): boolean;
    get animated(): boolean;
    onKeyEvent(event: KeyboardEvent): void;
    constructor(document: Document, elem: ElementRef, config: BBNotificationConfig);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    get hostTabIndex(): 0 | -1;
    onNotificationClick(): void;
    onNotificationClose(): void;
    beforeDestroy(): void;
    onPrimaryPress(): void;
    onSecondaryPress(): void;
    getHeaderTemplate(): TemplateRef<any> | undefined;
    getMessageTemplate(): TemplateRef<any> | undefined;
    hasButtonRow(): boolean;
    hasPrimaryAction(): boolean;
    hasSecondaryAction(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NotificationComponent, "bb-notification-ui", never, { "header": "header"; "message": "message"; "primaryActionTemplate": "primaryActionTemplate"; "secondaryActionTemplate": "secondaryActionTemplate"; "modifier": "modifier"; "dismissible": "dismissible"; "primaryActionText": "primaryActionText"; "primaryAction": "primaryAction"; "secondaryActionText": "secondaryActionText"; "secondaryAction": "secondaryAction"; "closeAction": "closeAction"; "hostAction": "hostAction"; "headerContext": "headerContext"; "messageContext": "messageContext"; "animation": "animation"; }, { "close": "close"; }, never, never>;
}
