import { EventEmitter, OnDestroy, TemplateRef } from '@angular/core';
import { CollapsibleAccordionComponent, ICollapsible } from '@backbase/ui-ang/collapsible-accordion';
import * as i0 from "@angular/core";
export declare class CollapsibleHeaderDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CollapsibleHeaderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CollapsibleHeaderDirective, "ng-template[bbCollapsibleHeader]", never, {}, {}, never>;
}
export declare class CollapsibleBodyDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: i0.ɵɵFactoryDeclaration<CollapsibleBodyDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CollapsibleBodyDirective, "ng-template[bbCollapsibleBody]", never, {}, {}, never>;
}
/**
 * @name CollapsibleComponent
 *
 * @description
 * Provides an expandable details-summary/body-header view.
 */
export declare class CollapsibleComponent implements ICollapsible, OnDestroy {
    private readonly bbCollapsibleAccordion;
    collapsibleHeader: CollapsibleHeaderDirective | undefined;
    collapsibleBody: CollapsibleBodyDirective | undefined;
    /**
     * If true, it will use the ngIf approach to create the content
     * which is less performant but removes the extra div.
     * In case of styling issues, set this to true.
     */
    recreateBodyContent: boolean;
    /**
     * Whether chevron should be displayed. Defaults to true.
     */
    hasChevron: boolean;
    private open;
    /**
     * Toggles the content.
     */
    set isOpen(v: boolean);
    get isOpen(): boolean;
    /**
     * Emits the toggle content event.
     */
    isOpenChange: EventEmitter<boolean>;
    headerContext: {
        toggle: () => void;
        isOpen: boolean;
    };
    toggle: () => void;
    constructor(bbCollapsibleAccordion: CollapsibleAccordionComponent);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CollapsibleComponent, [{ optional: true; host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CollapsibleComponent, "bb-collapsible-ui", never, { "recreateBodyContent": "recreateBodyContent"; "hasChevron": "hasChevron"; "isOpen": "isOpen"; }, { "isOpenChange": "isOpenChange"; }, ["collapsibleHeader", "collapsibleBody"], never>;
}
