import { OnChanges } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name AmountComponent
 *
 * @description
 * Component for representing amount in currency format .
 *
 * @dynamic (to suppress error with resolving statics declarations during compilation)
 *
 * @a11y
 * The amount component doesn't provide any specific properties for accessibility. But handles accessibility internally.
 *
 */
export declare class AmountComponent implements OnChanges {
    private readonly locale;
    private static readonly placeholder;
    private static readonly templates;
    private static readonly abbreviationConfig;
    private static readonly maxSafeIntegerLength;
    private static localeConfig;
    /**
     * Determines currency type.
     * If nothing provided, wouldn't be displayed.
     */
    currency: string;
    /**
     * If "true" and amount is positive adds plus sign at the beginning.
     * Default value false.
     */
    showPlusSign: boolean;
    /**
     * Whether currency local should be transformed to symbol.
     * Default value true.
     */
    mapCurrency: boolean;
    /**
     * Whether percent symbol should be shown.
     * Default value false.
     */
    showPercent: boolean;
    /**
     * Whether abbreviation should be applied.
     * Default value false.
     */
    abbreviate: boolean;
    /**
     * Overrides amount of decimals places to display.
     * Default value undefined, which will use currency default amount of decimals
     */
    decimalPlaces: number | undefined;
    /**
     * Whether to display trailing zeroes.
     * Default value true
     */
    trailingZeroes: boolean;
    /**
     * Receive amount in string format and converts into a floating-point number.
     */
    amount: string | number;
    abbreviationSuffix?: string;
    amountTemplate?: string;
    private _amountValue;
    private groupSymbol;
    private decimalSymbol;
    private numberFormat;
    constructor(locale: string);
    ngOnChanges(): void;
    get isNumeric(): boolean;
    private get isPositive();
    private get isZero();
    private get isUnsafeAmount();
    private get configDecimalPlaces();
    /**
     * Currency format depends on locale and could be represented for negative and
     * positive values differently (separated by `;` symbol).
     * See more http://cldr.unicode.org/translation/numbers-currency/number-patterns
     *
     * Example:
     * en-NL locale: '¤ #,##0.00;¤ -#,##0.00'
     */
    private get amountFormat();
    private get transformedAmount();
    private getAmountWithZeroPaddings;
    private setupConfiguration;
    private updateNumberFormat;
    /**
     * Converts original amount to abbreviated
     * Max abbreviated suffix value is 'T' (trillion) see {@link AmountComponent.abbreviationConfig}
     */
    private getAbbreviatedAmount;
    private getAmountTemplate;
    private wrapAmount;
    private fillTemplate;
    static ɵfac: i0.ɵɵFactoryDeclaration<AmountComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AmountComponent, "bb-amount-ui", never, { "currency": "currency"; "showPlusSign": "showPlusSign"; "mapCurrency": "mapCurrency"; "showPercent": "showPercent"; "abbreviate": "abbreviate"; "decimalPlaces": "decimalPlaces"; "trailingZeroes": "trailingZeroes"; "amount": "amount"; }, {}, never, never>;
}
