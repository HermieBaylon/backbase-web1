import { Component, ContentChild, Directive, EventEmitter, Host, Input, Optional, Output, TemplateRef, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/collapsible-accordion";
import * as i2 from "@angular/common";
import * as i3 from "@ng-bootstrap/ng-bootstrap";
export class CollapsibleHeaderDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CollapsibleHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CollapsibleHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleHeaderDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCollapsibleHeader]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class CollapsibleBodyDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CollapsibleBodyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleBodyDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CollapsibleBodyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleBodyDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCollapsibleBody]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * @name CollapsibleComponent
 *
 * @description
 * Provides an expandable details-summary/body-header view.
 */
export class CollapsibleComponent {
    //TODO: review approach with such dependency on Accordion
    constructor(bbCollapsibleAccordion) {
        this.bbCollapsibleAccordion = bbCollapsibleAccordion;
        /**
         * If true, it will use the ngIf approach to create the content
         * which is less performant but removes the extra div.
         * In case of styling issues, set this to true.
         */
        this.recreateBodyContent = false;
        /**
         * Whether chevron should be displayed. Defaults to true.
         */
        this.hasChevron = true;
        this.open = false;
        /**
         * Emits the toggle content event.
         */
        this.isOpenChange = new EventEmitter();
        this.toggle = () => {
            this.isOpen = !this.isOpen;
        };
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.registerNestedPanel(this);
        }
        this.headerContext = {
            toggle: this.toggle,
            isOpen: this.isOpen,
        };
    }
    /**
     * Toggles the content.
     */
    set isOpen(v) {
        this.open = v;
        this.isOpenChange.emit(v);
        this.headerContext.isOpen = v;
    }
    get isOpen() {
        return this.open;
    }
    ngOnDestroy() {
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.unregisterNestedPanel(this);
        }
    }
}
CollapsibleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleComponent, deps: [{ token: i1.CollapsibleAccordionComponent, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CollapsibleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleComponent, selector: "bb-collapsible-ui", inputs: { recreateBodyContent: "recreateBodyContent", hasChevron: "hasChevron", isOpen: "isOpen" }, outputs: { isOpenChange: "isOpenChange" }, queries: [{ propertyName: "collapsibleHeader", first: true, predicate: CollapsibleHeaderDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: "collapsibleBody", first: true, predicate: CollapsibleBodyDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-container *ngIf=\"collapsibleHeader\">\n  <ng-container *ngTemplateOutlet=\"collapsibleHeader; context: headerContext\"> </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"collapsibleBody && !recreateBodyContent\">\n  <div [ngbCollapse]=\"!isOpen\">\n    <ng-container *ngTemplateOutlet=\"collapsibleBody; context: headerContext\"> </ng-container>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"collapsibleBody && recreateBodyContent\">\n  <ng-container *ngIf=\"!isOpen\">\n    <ng-container *ngTemplateOutlet=\"collapsibleBody; context: headerContext\"> </ng-container>\n  </ng-container>\n</ng-container>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-ui',
                    templateUrl: './collapsible.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.CollapsibleAccordionComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }]; }, propDecorators: { collapsibleHeader: [{
                type: ContentChild,
                args: [CollapsibleHeaderDirective, { read: TemplateRef, static: true }]
            }], collapsibleBody: [{
                type: ContentChild,
                args: [CollapsibleBodyDirective, { read: TemplateRef, static: true }]
            }], recreateBodyContent: [{
                type: Input
            }], hasChevron: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], isOpenChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvY29sbGFwc2libGUvY29sbGFwc2libGUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvY29sbGFwc2libGUvY29sbGFwc2libGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osU0FBUyxFQUNULFlBQVksRUFDWixJQUFJLEVBQ0osS0FBSyxFQUVMLFFBQVEsRUFDUixNQUFNLEVBQ04sV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDOzs7OztBQUl2QixNQUFNLE9BQU8sMEJBQTBCO0lBQ3JDLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7O3dIQUR6QywwQkFBMEI7NEdBQTFCLDBCQUEwQjs0RkFBMUIsMEJBQTBCO2tCQUR0QyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLGtDQUFrQyxFQUFFOztBQU0zRCxNQUFNLE9BQU8sd0JBQXdCO0lBQ25DLFlBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7O3NIQUR6Qyx3QkFBd0I7MEdBQXhCLHdCQUF3Qjs0RkFBeEIsd0JBQXdCO2tCQURwQyxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLGdDQUFnQyxFQUFFOztBQUt6RDs7Ozs7R0FLRztBQUtILE1BQU0sT0FBTyxvQkFBb0I7SUE4Qy9CLHlEQUF5RDtJQUN6RCxZQUdtQixzQkFBcUQ7UUFBckQsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUErQjtRQTVDeEU7Ozs7V0FJRztRQUNNLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUNyQzs7V0FFRztRQUNNLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFFbkIsU0FBSSxHQUFHLEtBQUssQ0FBQztRQWVyQjs7V0FFRztRQUNPLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQU9yRCxXQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDN0IsQ0FBQyxDQUFDO1FBUUEsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDL0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZEO1FBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3BCLENBQUM7SUFDSixDQUFDO0lBekNEOztPQUVHO0lBQ0gsSUFDSSxNQUFNLENBQUMsQ0FBVTtRQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFnQ0QsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQy9CLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7O2tIQWxFVSxvQkFBb0I7c0dBQXBCLG9CQUFvQix1UEFDakIsMEJBQTBCLDJCQUFVLFdBQVcsNkVBRS9DLHdCQUF3QiwyQkFBVSxXQUFXLDJDQ3JDN0Qsa25CQWVBOzRGRG1CYSxvQkFBb0I7a0JBSmhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsV0FBVyxFQUFFLDhCQUE4QjtpQkFDNUM7OzBCQWlESSxRQUFROzswQkFDUixJQUFJOzRDQS9DUCxpQkFBaUI7c0JBRGhCLFlBQVk7dUJBQUMsMEJBQTBCLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBRzdFLGVBQWU7c0JBRGQsWUFBWTt1QkFBQyx3QkFBd0IsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFRbEUsbUJBQW1CO3NCQUEzQixLQUFLO2dCQUlHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBUUYsTUFBTTtzQkFEVCxLQUFLO2dCQWFJLFlBQVk7c0JBQXJCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRGlyZWN0aXZlLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3QsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIE9wdGlvbmFsLFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbGxhcHNpYmxlQWNjb3JkaW9uQ29tcG9uZW50LCBJQ29sbGFwc2libGUgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2NvbGxhcHNpYmxlLWFjY29yZGlvbic7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ25nLXRlbXBsYXRlW2JiQ29sbGFwc2libGVIZWFkZXJdJyB9KVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlSGVhZGVyRGlyZWN0aXZlIHtcbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICduZy10ZW1wbGF0ZVtiYkNvbGxhcHNpYmxlQm9keV0nIH0pXG5leHBvcnQgY2xhc3MgQ29sbGFwc2libGVCb2R5RGlyZWN0aXZlIHtcbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7fVxufVxuXG4vKipcbiAqIEBuYW1lIENvbGxhcHNpYmxlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBQcm92aWRlcyBhbiBleHBhbmRhYmxlIGRldGFpbHMtc3VtbWFyeS9ib2R5LWhlYWRlciB2aWV3LlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1jb2xsYXBzaWJsZS11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb2xsYXBzaWJsZS5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIENvbGxhcHNpYmxlQ29tcG9uZW50IGltcGxlbWVudHMgSUNvbGxhcHNpYmxlLCBPbkRlc3Ryb3kge1xuICBAQ29udGVudENoaWxkKENvbGxhcHNpYmxlSGVhZGVyRGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSlcbiAgY29sbGFwc2libGVIZWFkZXI6IENvbGxhcHNpYmxlSGVhZGVyRGlyZWN0aXZlIHwgdW5kZWZpbmVkO1xuICBAQ29udGVudENoaWxkKENvbGxhcHNpYmxlQm9keURpcmVjdGl2ZSwgeyByZWFkOiBUZW1wbGF0ZVJlZiwgc3RhdGljOiB0cnVlIH0pXG4gIGNvbGxhcHNpYmxlQm9keTogQ29sbGFwc2libGVCb2R5RGlyZWN0aXZlIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBpdCB3aWxsIHVzZSB0aGUgbmdJZiBhcHByb2FjaCB0byBjcmVhdGUgdGhlIGNvbnRlbnRcbiAgICogd2hpY2ggaXMgbGVzcyBwZXJmb3JtYW50IGJ1dCByZW1vdmVzIHRoZSBleHRyYSBkaXYuXG4gICAqIEluIGNhc2Ugb2Ygc3R5bGluZyBpc3N1ZXMsIHNldCB0aGlzIHRvIHRydWUuXG4gICAqL1xuICBASW5wdXQoKSByZWNyZWF0ZUJvZHlDb250ZW50ID0gZmFsc2U7XG4gIC8qKlxuICAgKiBXaGV0aGVyIGNoZXZyb24gc2hvdWxkIGJlIGRpc3BsYXllZC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICovXG4gIEBJbnB1dCgpIGhhc0NoZXZyb24gPSB0cnVlO1xuXG4gIHByaXZhdGUgb3BlbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBjb250ZW50LlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGlzT3Blbih2OiBib29sZWFuKSB7XG4gICAgdGhpcy5vcGVuID0gdjtcbiAgICB0aGlzLmlzT3BlbkNoYW5nZS5lbWl0KHYpO1xuICAgIHRoaXMuaGVhZGVyQ29udGV4dC5pc09wZW4gPSB2O1xuICB9XG4gIGdldCBpc09wZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMub3BlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0cyB0aGUgdG9nZ2xlIGNvbnRlbnQgZXZlbnQuXG4gICAqL1xuICBAT3V0cHV0KCkgaXNPcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIGhlYWRlckNvbnRleHQ6IHtcbiAgICB0b2dnbGU6ICgpID0+IHZvaWQ7XG4gICAgaXNPcGVuOiBib29sZWFuO1xuICB9O1xuXG4gIHRvZ2dsZSA9ICgpID0+IHtcbiAgICB0aGlzLmlzT3BlbiA9ICF0aGlzLmlzT3BlbjtcbiAgfTtcblxuICAvL1RPRE86IHJldmlldyBhcHByb2FjaCB3aXRoIHN1Y2ggZGVwZW5kZW5jeSBvbiBBY2NvcmRpb25cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASG9zdCgpXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYkNvbGxhcHNpYmxlQWNjb3JkaW9uOiBDb2xsYXBzaWJsZUFjY29yZGlvbkNvbXBvbmVudCxcbiAgKSB7XG4gICAgaWYgKHRoaXMuYmJDb2xsYXBzaWJsZUFjY29yZGlvbikge1xuICAgICAgdGhpcy5iYkNvbGxhcHNpYmxlQWNjb3JkaW9uLnJlZ2lzdGVyTmVzdGVkUGFuZWwodGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5oZWFkZXJDb250ZXh0ID0ge1xuICAgICAgdG9nZ2xlOiB0aGlzLnRvZ2dsZSxcbiAgICAgIGlzT3BlbjogdGhpcy5pc09wZW4sXG4gICAgfTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmJiQ29sbGFwc2libGVBY2NvcmRpb24pIHtcbiAgICAgIHRoaXMuYmJDb2xsYXBzaWJsZUFjY29yZGlvbi51bnJlZ2lzdGVyTmVzdGVkUGFuZWwodGhpcyk7XG4gICAgfVxuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiY29sbGFwc2libGVIZWFkZXJcIj5cbiAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cImNvbGxhcHNpYmxlSGVhZGVyOyBjb250ZXh0OiBoZWFkZXJDb250ZXh0XCI+IDwvbmctY29udGFpbmVyPlxuPC9uZy1jb250YWluZXI+XG5cbjxuZy1jb250YWluZXIgKm5nSWY9XCJjb2xsYXBzaWJsZUJvZHkgJiYgIXJlY3JlYXRlQm9keUNvbnRlbnRcIj5cbiAgPGRpdiBbbmdiQ29sbGFwc2VdPVwiIWlzT3BlblwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjb2xsYXBzaWJsZUJvZHk7IGNvbnRleHQ6IGhlYWRlckNvbnRleHRcIj4gPC9uZy1jb250YWluZXI+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG5cbjxuZy1jb250YWluZXIgKm5nSWY9XCJjb2xsYXBzaWJsZUJvZHkgJiYgcmVjcmVhdGVCb2R5Q29udGVudFwiPlxuICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzT3BlblwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjb2xsYXBzaWJsZUJvZHk7IGNvbnRleHQ6IGhlYWRlckNvbnRleHRcIj4gPC9uZy1jb250YWluZXI+XG4gIDwvbmctY29udGFpbmVyPlxuPC9uZy1jb250YWluZXI+XG4iXX0=