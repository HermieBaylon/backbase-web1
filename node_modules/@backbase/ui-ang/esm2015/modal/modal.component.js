import { Component, ContentChild, Directive, EventEmitter, Inject, Input, Output, ViewChild, } from '@angular/core';
import { getKeyCode, KEY_CODES } from '@backbase/ui-ang/util';
import { ModalHeaderComponent } from './modal-templates/modal-header.component';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@ng-bootstrap/ng-bootstrap";
import * as i2 from "@backbase/ui-ang/services";
import * as i3 from "@backbase/foundation-ang/future";
import * as i4 from "@angular/cdk/a11y";
/**
 * @name ModalComponent
 *
 * @description
 * Component that displays a modal window.
 */
export class ModalComponent {
    constructor(modalService, renderer, domAttrService, depricatedService, 
    // cannot use type `Document` due to compilation issues caused by `strictMetadataEmit`
    document) {
        this.modalService = modalService;
        this.renderer = renderer;
        this.domAttrService = domAttrService;
        this.depricatedService = depricatedService;
        this.document = document;
        this.id = this.domAttrService.generateId();
        /**
         * The flag to show the dialog window.  Defaults to 'false'.
         */
        this.isOpen = false;
        /**
         * Dialog options. Defaults to empty object.
         */
        this.modalOptions = {};
        /**
         * The event that's fired after confirm button is pressed. Can be used with
         * (click)="dialogRef.onConfirm()" where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
         */
        this.confirm = new EventEmitter();
        /**
         * The event that's fired after cancel button is pressed. Can be used with
         * (click)="dialogRef.onCancel()" where dialogRef is a templateRef on <bb-dialog-ui #dialogRef />
         */
        this.cancel = new EventEmitter();
        /**
         * Used for two way binding with the isOpen Input. If used, backdrop
         * and esc dismiss cases will be handled automatically.
         */
        this.isOpenChange = new EventEmitter();
        this.emitConfirm = true;
    }
    ngOnChanges() {
        if (this.isOpen) {
            this.setConfirm(true);
            // needs to be inside setTimeout due to the
            // https://github.com/angular/angular/issues/15634
            setTimeout(() => {
                const headerId = this.modalHeader ? this.modalHeader.headerId : '';
                this.ariaLabelledby = this.ariaLabelledby || headerId;
                this.modalOptions.ariaDescribedBy = this.ariaDescribedby
                    ? this.ariaDescribedby
                    : this.modalOptions.ariaDescribedBy;
                this.modalOptions.ariaLabelledBy = this.ariaLabelledby ? this.ariaLabelledby : this.modalOptions.ariaLabelledBy;
                this.modalRef = this.modalService.open(this.modalContent, this.modalOptions);
                this.modalRef.result.then((result) => {
                    if (this.emitConfirm) {
                        this.confirm.emit(result);
                    }
                }, (reason) => this.cancel.emit(this.getDismissReason(reason)));
            }, 0);
            // remove role=document from dialog, because we need have role=dialog, bootstrap accessibility bug
            setTimeout(() => {
                const modalContent = this.document.getElementsByClassName('modal-dialog');
                const modal = this.document.getElementsByClassName('modal');
                modalContent === null || modalContent === void 0 ? void 0 : modalContent[0].removeAttribute('role');
                modal === null || modal === void 0 ? void 0 : modal[0].scrollTo(0, 0);
            }, 0);
        }
        else if (this.modalRef) {
            this.setConfirm(false);
            this.modalRef.close();
        }
    }
    onElementViewInit(el) {
        this.copyAriaAttrsToElement(el);
    }
    copyAriaAttrsToElement(el) {
        this.depricatedService.logDeprecatedFeature('`copyAriaAttrsToElement` of `ModalComponent` is deprecated.');
        const headerId = this.modalHeader ? this.modalHeader.headerId : '';
        const dialogHostNativeElement = this.modalRef['_windowCmptRef'].instance._elRef.nativeElement;
        if (headerId && !this.modalOptions.ariaLabelledBy) {
            this.renderer.setAttribute(dialogHostNativeElement, 'aria-labelledby', headerId);
        }
        if (this.ariaDescribedby && !this.modalOptions.ariaDescribedBy) {
            this.renderer.setAttribute(dialogHostNativeElement, 'aria-describedby', this.ariaDescribedby);
        }
    }
    getDismissReason(reason) {
        this.isOpenChange.emit(false);
        return reason;
    }
    dismissModal(reason) {
        if (this.modalRef)
            this.modalRef.dismiss(reason);
    }
    closeModal(reason) {
        if (this.modalRef)
            this.modalRef.close(reason);
    }
    setConfirm(flag) {
        this.emitConfirm = flag;
    }
    ngOnDestroy() {
        this.closeModal();
    }
    trapKeyEvent(event) {
        if (getKeyCode(event) !== KEY_CODES.ESCAPE) {
            event.stopPropagation();
        }
    }
}
ModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalComponent, deps: [{ token: i1.NgbModal }, { token: i0.Renderer2 }, { token: i2.DomAttributesService }, { token: i3.DeprecationsService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
ModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ModalComponent, selector: "bb-modal-ui", inputs: { isOpen: "isOpen", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], modalOptions: "modalOptions" }, outputs: { confirm: "confirm", cancel: "cancel", isOpenChange: "isOpenChange" }, queries: [{ propertyName: "modalHeader", first: true, predicate: ModalHeaderComponent, descendants: true }], viewQueries: [{ propertyName: "modalContent", first: true, predicate: ["modalContent"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<ng-template #modalContent let-close=\"close\">\n  <div\n    class=\"modal-content-container\"\n    (keydown)=\"trapKeyEvent($event)\"\n    (keyup)=\"trapKeyEvent($event)\"\n    cdkTrapFocus\n    [cdkTrapFocusAutoCapture]=\"true\"\n    (bbElementViewInit)=\"onElementViewInit($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return i4.CdkTrapFocus; }), selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { type: i0.forwardRef(function () { return ElementViewInitDirective; }), selector: "[bbElementViewInit]", outputs: ["bbElementViewInit"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-modal-ui',
                    templateUrl: './modal.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgbModal }, { type: i0.Renderer2 }, { type: i2.DomAttributesService }, { type: i3.DeprecationsService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { isOpen: [{
                type: Input
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], modalOptions: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }], isOpenChange: [{
                type: Output
            }], modalContent: [{
                type: ViewChild,
                args: ['modalContent', { static: true }]
            }], modalHeader: [{
                type: ContentChild,
                args: [ModalHeaderComponent]
            }] } });
export class ElementViewInitDirective {
    constructor(elem) {
        this.elem = elem;
        this.bbElementViewInit = new EventEmitter();
    }
    ngAfterViewInit() {
        this.bbElementViewInit.emit(this.elem);
    }
}
ElementViewInitDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ElementViewInitDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ElementViewInitDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ElementViewInitDirective, selector: "[bbElementViewInit]", outputs: { bbElementViewInit: "bbElementViewInit" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ElementViewInitDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbElementViewInit]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { bbElementViewInit: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,