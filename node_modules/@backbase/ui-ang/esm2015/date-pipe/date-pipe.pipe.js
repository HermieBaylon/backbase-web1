import { Inject, LOCALE_ID, Pipe } from '@angular/core';
import { formatDate, FormatWidth, getLocaleDateTimeFormat } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * @name bbDate
 *
 * @description
 * Pipe for formatting dates
 */
export class BbDatePipe {
    constructor(locale) {
        this.locale = locale;
    }
    /**
     * @name BbDatePipe#transform
     * @param value - the date that should be formatted
     * @param format - the format type for the date to be formatted
     * @param timezone - used for formatting the time
     * @param locale - locale to use for formatting
     *
     *
     * @description
     * Depending on format type, formats a date
     * Custom format is called with bbShort,
     * and formats to 'MMMM d, y at HH:mm',
     * otherwise uses the predifined angular formats
     *
     */
    transform(value, format = 'mediumDate', timezone, locale) {
        if (format === 'bbShort') {
            const localeFormat = getLocaleDateTimeFormat(this.locale, FormatWidth.Long);
            const dateFormatted = formatDate(value, 'MMMM d, y', this.locale, timezone);
            const timeFormatted = formatDate(value, 'HH:mm', this.locale, timezone);
            return localeFormat.replace(/'/g, '').replace('{1}', dateFormatted).replace('{0}', timeFormatted);
        }
        if (value == null || value === '' || value !== value)
            return null;
        try {
            return formatDate(value, format, locale || this.locale, timezone);
        }
        catch (error) {
            throw Error(`InvalidPipeArgument: '${error.message}' for pipe BbDatePipe`);
        }
    }
}
BbDatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbDatePipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
BbDatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbDatePipe, name: "bbDate" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbDatePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbDate',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waXBlLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9kYXRlLXBpcGUvZGF0ZS1waXBlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUVuRjs7Ozs7R0FLRztBQUlILE1BQU0sT0FBTyxVQUFVO0lBQ3JCLFlBQXVDLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUcsQ0FBQztJQUV6RDs7Ozs7Ozs7Ozs7Ozs7T0FjRztJQUNILFNBQVMsQ0FBQyxLQUFVLEVBQUUsTUFBTSxHQUFHLFlBQVksRUFBRSxRQUFpQixFQUFFLE1BQWU7UUFDN0UsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3hCLE1BQU0sWUFBWSxHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVFLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDNUUsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztZQUV4RSxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztTQUNuRztRQUVELElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxLQUFLO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFbEUsSUFBSTtZQUNGLE9BQU8sVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDbkU7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE1BQU0sS0FBSyxDQUFDLHlCQUF5QixLQUFLLENBQUMsT0FBTyx1QkFBdUIsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQzs7d0dBbENVLFVBQVUsa0JBQ0QsU0FBUztzR0FEbEIsVUFBVTs0RkFBVixVQUFVO2tCQUh0QixJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSxRQUFRO2lCQUNmOzswQkFFYyxNQUFNOzJCQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIExPQ0FMRV9JRCwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSwgRm9ybWF0V2lkdGgsIGdldExvY2FsZURhdGVUaW1lRm9ybWF0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLyoqXG4gKiBAbmFtZSBiYkRhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBpcGUgZm9yIGZvcm1hdHRpbmcgZGF0ZXNcbiAqL1xuQFBpcGUoe1xuICBuYW1lOiAnYmJEYXRlJyxcbn0pXG5leHBvcnQgY2xhc3MgQmJEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KExPQ0FMRV9JRCkgcHJpdmF0ZSBsb2NhbGU6IHN0cmluZykge31cblxuICAvKipcbiAgICogQG5hbWUgQmJEYXRlUGlwZSN0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHZhbHVlIC0gdGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgZm9ybWF0dGVkXG4gICAqIEBwYXJhbSBmb3JtYXQgLSB0aGUgZm9ybWF0IHR5cGUgZm9yIHRoZSBkYXRlIHRvIGJlIGZvcm1hdHRlZFxuICAgKiBAcGFyYW0gdGltZXpvbmUgLSB1c2VkIGZvciBmb3JtYXR0aW5nIHRoZSB0aW1lXG4gICAqIEBwYXJhbSBsb2NhbGUgLSBsb2NhbGUgdG8gdXNlIGZvciBmb3JtYXR0aW5nXG4gICAqXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXBlbmRpbmcgb24gZm9ybWF0IHR5cGUsIGZvcm1hdHMgYSBkYXRlXG4gICAqIEN1c3RvbSBmb3JtYXQgaXMgY2FsbGVkIHdpdGggYmJTaG9ydCxcbiAgICogYW5kIGZvcm1hdHMgdG8gJ01NTU0gZCwgeSBhdCBISDptbScsXG4gICAqIG90aGVyd2lzZSB1c2VzIHRoZSBwcmVkaWZpbmVkIGFuZ3VsYXIgZm9ybWF0c1xuICAgKlxuICAgKi9cbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGZvcm1hdCA9ICdtZWRpdW1EYXRlJywgdGltZXpvbmU/OiBzdHJpbmcsIGxvY2FsZT86IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIGlmIChmb3JtYXQgPT09ICdiYlNob3J0Jykge1xuICAgICAgY29uc3QgbG9jYWxlRm9ybWF0ID0gZ2V0TG9jYWxlRGF0ZVRpbWVGb3JtYXQodGhpcy5sb2NhbGUsIEZvcm1hdFdpZHRoLkxvbmcpO1xuICAgICAgY29uc3QgZGF0ZUZvcm1hdHRlZCA9IGZvcm1hdERhdGUodmFsdWUsICdNTU1NIGQsIHknLCB0aGlzLmxvY2FsZSwgdGltZXpvbmUpO1xuICAgICAgY29uc3QgdGltZUZvcm1hdHRlZCA9IGZvcm1hdERhdGUodmFsdWUsICdISDptbScsIHRoaXMubG9jYWxlLCB0aW1lem9uZSk7XG5cbiAgICAgIHJldHVybiBsb2NhbGVGb3JtYXQucmVwbGFjZSgvJy9nLCAnJykucmVwbGFjZSgnezF9JywgZGF0ZUZvcm1hdHRlZCkucmVwbGFjZSgnezB9JywgdGltZUZvcm1hdHRlZCk7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlICE9PSB2YWx1ZSkgcmV0dXJuIG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZvcm1hdERhdGUodmFsdWUsIGZvcm1hdCwgbG9jYWxlIHx8IHRoaXMubG9jYWxlLCB0aW1lem9uZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IEVycm9yKGBJbnZhbGlkUGlwZUFyZ3VtZW50OiAnJHtlcnJvci5tZXNzYWdlfScgZm9yIHBpcGUgQmJEYXRlUGlwZWApO1xuICAgIH1cbiAgfVxufVxuIl19