import { Component, ChangeDetectionStrategy, Directive, ContentChild, Input, Self, Optional, } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/foundation-ang/future";
import * as i3 from "@backbase/ui-ang/checkbox-group";
import * as i4 from "@backbase/ui-ang/input-checkbox";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@angular/common";
export class ListMultipleSelectActionDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ListMultipleSelectActionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectActionDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
ListMultipleSelectActionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ListMultipleSelectActionDirective, selector: "ng-template[bbListMultipleSelectAction]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectActionDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbListMultipleSelectAction]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
export class ListMultipleSelectItemDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ListMultipleSelectItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectItemDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
ListMultipleSelectItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ListMultipleSelectItemDirective, selector: "ng-template[bbListMultipleSelectItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectItemDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbListMultipleSelectItem]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * @name ListMultipleSelectComponent
 *
 * @description
 * Component that displays list with checkboxes.
 */
export class ListMultipleSelectComponent extends InputBaseComponent {
    constructor(cd, controlContainer, deprecationsService, parentFormControl) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.controlContainer = controlContainer;
        this.deprecationsService = deprecationsService;
        this.parentFormControl = parentFormControl;
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
    ngAfterContentInit() {
        this.control = this.controlContainer.control;
    }
    // TODO: use keyvalue pipe instead when angular will be upgraded to v6.1
    getKeys(object) {
        return Object.keys(object);
    }
}
ListMultipleSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.ControlContainer }, { token: i2.DeprecationsService }, { token: i1.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
ListMultipleSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ListMultipleSelectComponent, selector: "bb-list-multiple-select-ui", inputs: { config: "config" }, queries: [{ propertyName: "listMultipleSelectAction", first: true, predicate: ListMultipleSelectActionDirective, descendants: true, static: true }, { propertyName: "listMultipleSelectItem", first: true, predicate: ListMultipleSelectItemDirective, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-list-multiple-select\">\n  <ng-container *ngIf=\"listMultipleSelectAction\">\n    <div class=\"bb-list-multiple-select__action\">\n      <ng-container *ngTemplateOutlet=\"listMultipleSelectAction?.templateRef\"> </ng-container>\n    </div>\n    <div class=\"bb-list-multiple-select__dropdown-divider\"></div>\n  </ng-container>\n\n  <ng-container\n    *ngIf=\"control\"\n    [ngTemplateOutlet]=\"groupTemplate\"\n    [ngTemplateOutletContext]=\"{\n      control: control,\n      config: config,\n      root: true\n    }\"\n  ></ng-container>\n\n  <ng-template #groupTemplate let-control=\"control\" let-config=\"config\" let-root=\"root\">\n    <ul [formGroup]=\"control\" class=\"bb-list-multiple-select__list\" [ngClass]=\"{ 'bb-checkbox-group': !root }\">\n      <li *ngFor=\"let key of getKeys(control?.controls)\">\n        <ng-container *ngIf=\"(control?.controls)[key].controls; else itemTemplate\">\n          <bb-checkbox-group-ui [formGroup]=\"(control?.controls)[key]\" [aria-label]=\"key\">\n            <ng-container\n              [ngTemplateOutlet]=\"listMultipleSelectItem?.templateRef || itemContent\"\n              [ngTemplateOutletContext]=\"{\n                config: config,\n                key: key\n              }\"\n            ></ng-container>\n          </bb-checkbox-group-ui>\n\n          <ng-container\n            [ngTemplateOutlet]=\"groupTemplate\"\n            [ngTemplateOutletContext]=\"{\n              control: (control?.controls)[key],\n              config: config && config[key]?.items\n            }\"\n          ></ng-container>\n        </ng-container>\n\n        <ng-template #itemTemplate>\n          <bb-input-checkbox-ui [formControlName]=\"key\" [aria-label]=\"key\">\n            <ng-container\n              [ngTemplateOutlet]=\"listMultipleSelectItem?.templateRef || itemContent\"\n              [ngTemplateOutletContext]=\"{\n                config: config,\n                key: key\n              }\"\n            ></ng-container>\n          </bb-input-checkbox-ui>\n        </ng-template>\n\n        <ng-template #itemContent let-config=\"config\" let-key=\"key\">\n          <bb-icon-ui\n            *ngIf=\"config && config[key]?.icon\"\n            [name]=\"config[key].icon\"\n            [color]=\"config[key].iconColor\"\n          ></bb-icon-ui>\n          <span data-role=\"bb-list-multiple-select-item\">{{ key }}</span>\n        </ng-template>\n      </li>\n    </ul>\n  </ng-template>\n</div>\n", components: [{ type: i3.CheckboxGroupComponent, selector: "bb-checkbox-group-ui" }, { type: i4.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-list-multiple-select-ui',
                    templateUrl: './list-multiple-select.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.ControlContainer }, { type: i2.DeprecationsService }, { type: i1.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }]; }, propDecorators: { listMultipleSelectAction: [{
                type: ContentChild,
                args: [ListMultipleSelectActionDirective, { static: true }]
            }], listMultipleSelectItem: [{
                type: ContentChild,
                args: [ListMultipleSelectItemDirective, { static: true }]
            }], config: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,