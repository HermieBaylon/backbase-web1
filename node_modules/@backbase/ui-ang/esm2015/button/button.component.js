import { Component, Input, ViewChild, HostBinding } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @name ButtonComponent
 *
 * @description
 * Component that displays a button.
 */
export class ButtonComponent {
    constructor(elRef, renderer2) {
        this.elRef = elRef;
        this.renderer2 = renderer2;
        /**
         * This Boolean attribute lets you specify that the button should have input focus when the page
         * loads, unless the user overrides it, for example by typing in a different control.  Only one
         * form-associated element in a document can have this attribute specified.
         */
        this.autofocus = false;
        /**
         * The HTML5 button type.  Defaults to 'button'.
         */
        this.type = 'button';
        /**
         * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to
         * false.
         */
        this.disabled = false;
        /**
         * Size of the button.
         */
        this.buttonSize = 'md';
        /**
         * The color for the button.  Defaults to 'primary'.
         */
        this.color = 'primary';
        /**
         * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.
         */
        this.block = false;
    }
    moveAriaAttributes(hostEl, childEl) {
        const nodeMap = hostEl.attributes;
        // CUT every aria attribute from the host element and PASTE it into the button element
        Object.keys(nodeMap).forEach((key) => {
            const item = nodeMap.item(Number(key));
            let attrName;
            let attrVal;
            if (item) {
                attrName = item.name;
                attrVal = item.value;
                if (attrName.includes('aria')) {
                    this.renderer2.setAttribute(childEl, attrName, attrVal);
                    this.renderer2.removeAttribute(hostEl, attrName);
                }
            }
        });
    }
    ngAfterViewInit() {
        this.moveAriaAttributes(this.elRef.nativeElement, this.buttonEl && this.buttonEl.nativeElement);
    }
}
ButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
ButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ButtonComponent, selector: "bb-button-ui", inputs: { autofocus: "autofocus", type: "type", disabled: "disabled", buttonSize: "buttonSize", color: "color", block: "block" }, host: { properties: { "class.btn-block": "this.block" } }, viewQueries: [{ propertyName: "buttonEl", first: true, predicate: ["button"], descendants: true, static: true }], ngImport: i0, template: "<button\n  #button\n  [type]=\"type\"\n  class=\"btn bb-button btn-{{ color }}\"\n  [autofocus]=\"autofocus\"\n  [disabled]=\"disabled\"\n  [class.btn-block]=\"block\"\n  [ngClass]=\"buttonSize === 'sm' ? 'btn-sm' : 'btn-md'\"\n>\n  <ng-content></ng-content>\n</button>\n", directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-button-ui',
                    templateUrl: './button.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { autofocus: [{
                type: Input
            }], type: [{
                type: Input
            }], disabled: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], color: [{
                type: Input
            }], block: [{
                type: HostBinding,
                args: ['class.btn-block']
            }, {
                type: Input
            }], buttonEl: [{
                type: ViewChild,
                args: ['button', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2J1dHRvbi9idXR0b24uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBd0MsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBTS9HOzs7OztHQUtHO0FBS0gsTUFBTSxPQUFPLGVBQWU7SUFpQzFCLFlBQTZCLEtBQWlCLEVBQW1CLFNBQW9CO1FBQXhELFVBQUssR0FBTCxLQUFLLENBQVk7UUFBbUIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQWhDckY7Ozs7V0FJRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDM0I7O1dBRUc7UUFDTSxTQUFJLEdBQWUsUUFBUSxDQUFDO1FBQ3JDOzs7V0FHRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUI7O1dBRUc7UUFDTSxlQUFVLEdBQWdCLElBQUksQ0FBQztRQUN4Qzs7V0FFRztRQUNNLFVBQUssR0FBeUIsU0FBUyxDQUFDO1FBQ2pEOztXQUVHO1FBR0gsVUFBSyxHQUFHLEtBQUssQ0FBQztJQUkwRSxDQUFDO0lBRS9FLGtCQUFrQixDQUFDLE1BQW1CLEVBQUUsT0FBb0I7UUFDcEUsTUFBTSxPQUFPLEdBQWlCLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDaEQsc0ZBQXNGO1FBQ3RGLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUU7WUFDM0MsTUFBTSxJQUFJLEdBQWdCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxRQUFRLENBQUM7WUFDYixJQUFJLE9BQU8sQ0FBQztZQUNaLElBQUksSUFBSSxFQUFFO2dCQUNSLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDckIsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUN4RCxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7aUJBQ2xEO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsRyxDQUFDOzs2R0F2RFUsZUFBZTtpR0FBZixlQUFlLG1XQ2hCNUIsaVJBV0E7NEZES2EsZUFBZTtrQkFKM0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsV0FBVyxFQUFFLHlCQUF5QjtpQkFDdkM7eUhBT1UsU0FBUztzQkFBakIsS0FBSztnQkFJRyxJQUFJO3NCQUFaLEtBQUs7Z0JBS0csUUFBUTtzQkFBaEIsS0FBSztnQkFJRyxVQUFVO3NCQUFsQixLQUFLO2dCQUlHLEtBQUs7c0JBQWIsS0FBSztnQkFNTixLQUFLO3NCQUZKLFdBQVc7dUJBQUMsaUJBQWlCOztzQkFDN0IsS0FBSztnQkFHaUMsUUFBUTtzQkFBOUMsU0FBUzt1QkFBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBWaWV3Q2hpbGQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEJ1dHRvbkNvbG9yIH0gZnJvbSAnLi9idXR0b24uZGlyZWN0aXZlJztcblxuZXhwb3J0IHR5cGUgQnV0dG9uVHlwZSA9ICdidXR0b24nIHwgJ3N1Ym1pdCcgfCAncmVzZXQnO1xuXG4vKipcbiAqIEBuYW1lIEJ1dHRvbkNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgZGlzcGxheXMgYSBidXR0b24uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWJ1dHRvbi11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9idXR0b24uY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgLyoqXG4gICAqIFRoaXMgQm9vbGVhbiBhdHRyaWJ1dGUgbGV0cyB5b3Ugc3BlY2lmeSB0aGF0IHRoZSBidXR0b24gc2hvdWxkIGhhdmUgaW5wdXQgZm9jdXMgd2hlbiB0aGUgcGFnZVxuICAgKiBsb2FkcywgdW5sZXNzIHRoZSB1c2VyIG92ZXJyaWRlcyBpdCwgZm9yIGV4YW1wbGUgYnkgdHlwaW5nIGluIGEgZGlmZmVyZW50IGNvbnRyb2wuICBPbmx5IG9uZVxuICAgKiBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudCBpbiBhIGRvY3VtZW50IGNhbiBoYXZlIHRoaXMgYXR0cmlidXRlIHNwZWNpZmllZC5cbiAgICovXG4gIEBJbnB1dCgpIGF1dG9mb2N1cyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIEhUTUw1IGJ1dHRvbiB0eXBlLiAgRGVmYXVsdHMgdG8gJ2J1dHRvbicuXG4gICAqL1xuICBASW5wdXQoKSB0eXBlOiBCdXR0b25UeXBlID0gJ2J1dHRvbic7XG4gIC8qKlxuICAgKiBUaGlzIEJvb2xlYW4gYXR0cmlidXRlIGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoZSBidXR0b24uICBEZWZhdWx0cyB0b1xuICAgKiBmYWxzZS5cbiAgICovXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBASW5wdXQoKSBidXR0b25TaXplOiAnc20nIHwgJ21kJyA9ICdtZCc7XG4gIC8qKlxuICAgKiBUaGUgY29sb3IgZm9yIHRoZSBidXR0b24uICBEZWZhdWx0cyB0byAncHJpbWFyeScuXG4gICAqL1xuICBASW5wdXQoKSBjb2xvcjogQnV0dG9uQ29sb3IgfCBzdHJpbmcgPSAncHJpbWFyeSc7XG4gIC8qKlxuICAgKiBUaGUgZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRoZSBidXR0b24gc2hvdWxkIGZpbGwgdGhlIGNvbnRhaW5lciB0aGF0IGl0IGlzIGluLiBEZWZhdWx0cyB0byAnZmFsc2UnLlxuICAgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5idG4tYmxvY2snKVxuICBASW5wdXQoKVxuICBibG9jayA9IGZhbHNlO1xuXG4gIEBWaWV3Q2hpbGQoJ2J1dHRvbicsIHsgc3RhdGljOiB0cnVlIH0pIGJ1dHRvbkVsOiBFbGVtZW50UmVmIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZWxSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXIyOiBSZW5kZXJlcjIpIHt9XG5cbiAgcHJvdGVjdGVkIG1vdmVBcmlhQXR0cmlidXRlcyhob3N0RWw6IEhUTUxFbGVtZW50LCBjaGlsZEVsOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IG5vZGVNYXA6IE5hbWVkTm9kZU1hcCA9IGhvc3RFbC5hdHRyaWJ1dGVzO1xuICAgIC8vIENVVCBldmVyeSBhcmlhIGF0dHJpYnV0ZSBmcm9tIHRoZSBob3N0IGVsZW1lbnQgYW5kIFBBU1RFIGl0IGludG8gdGhlIGJ1dHRvbiBlbGVtZW50XG4gICAgT2JqZWN0LmtleXMobm9kZU1hcCkuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW06IEF0dHIgfCBudWxsID0gbm9kZU1hcC5pdGVtKE51bWJlcihrZXkpKTtcbiAgICAgIGxldCBhdHRyTmFtZTtcbiAgICAgIGxldCBhdHRyVmFsO1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgYXR0ck5hbWUgPSBpdGVtLm5hbWU7XG4gICAgICAgIGF0dHJWYWwgPSBpdGVtLnZhbHVlO1xuICAgICAgICBpZiAoYXR0ck5hbWUuaW5jbHVkZXMoJ2FyaWEnKSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIyLnNldEF0dHJpYnV0ZShjaGlsZEVsLCBhdHRyTmFtZSwgYXR0clZhbCk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlcjIucmVtb3ZlQXR0cmlidXRlKGhvc3RFbCwgYXR0ck5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5tb3ZlQXJpYUF0dHJpYnV0ZXModGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmJ1dHRvbkVsICYmIHRoaXMuYnV0dG9uRWwubmF0aXZlRWxlbWVudCk7XG4gIH1cbn1cbiIsIjxidXR0b25cbiAgI2J1dHRvblxuICBbdHlwZV09XCJ0eXBlXCJcbiAgY2xhc3M9XCJidG4gYmItYnV0dG9uIGJ0bi17eyBjb2xvciB9fVwiXG4gIFthdXRvZm9jdXNdPVwiYXV0b2ZvY3VzXCJcbiAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgW2NsYXNzLmJ0bi1ibG9ja109XCJibG9ja1wiXG4gIFtuZ0NsYXNzXT1cImJ1dHRvblNpemUgPT09ICdzbScgPyAnYnRuLXNtJyA6ICdidG4tbWQnXCJcbj5cbiAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9idXR0b24+XG4iXX0=