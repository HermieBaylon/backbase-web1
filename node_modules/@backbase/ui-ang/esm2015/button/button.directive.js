import { Directive, HostBinding, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name ButtonDirective
 *
 * @description
 * Directive for styling button.
 *
 * @a11y
 * The `bbButton` directive doesn't provide any specific properties for accessibility.
 * In case of necessity add `aria-*` attributes to the `button` element.
 */
export class ButtonDirective {
    constructor(renderer, hostElement) {
        this.renderer = renderer;
        this.hostElement = hostElement;
        /**
         * Button's type atrribute with default value.
         */
        this.type = 'button';
        /**
         * The color for the button. Defaults to 'primary'.
         * If a custom string used, then a css class is going to be added. The pattern is as follows:
         * `btn-customColor`
         */
        this.color = 'primary';
        /**
         * Size of the button.
         */
        this.buttonSize = 'md';
        /**
         * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.
         */
        this.block = false;
        /**
         * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.
         * This will only work when there's only an icon inside the button without a text.
         */
        this.circle = false;
    }
    ngOnInit() {
        this.renderer.addClass(this.hostElement.nativeElement, 'btn');
        this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.color}`);
        this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.buttonSize}`);
    }
    ngOnChanges(changes) {
        if (changes.color) {
            if (changes.color.previousValue) {
                this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.color.previousValue}`);
            }
            if (changes.color.currentValue) {
                this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.color.currentValue}`);
            }
        }
        if (changes.buttonSize) {
            if (changes.buttonSize.previousValue) {
                this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.previousValue}`);
            }
            if (changes.buttonSize.currentValue) {
                this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.currentValue}`);
            }
        }
    }
}
ButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ButtonDirective, selector: "button[bbButton]", inputs: { type: "type", color: "color", buttonSize: "buttonSize", block: "block", circle: "circle" }, host: { properties: { "type": "this.type", "class.btn-block": "this.block", "class.btn-circle": "this.circle" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[bbButton]',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { type: [{
                type: HostBinding,
                args: ['type']
            }, {
                type: Input
            }], color: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], block: [{
                type: HostBinding,
                args: ['class.btn-block']
            }, {
                type: Input
            }], circle: [{
                type: HostBinding,
                args: ['class.btn-circle']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2J1dHRvbi9idXR0b24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsV0FBVyxFQUFFLEtBQUssRUFBK0MsTUFBTSxlQUFlLENBQUM7O0FBa0J2SDs7Ozs7Ozs7O0dBU0c7QUFJSCxNQUFNLE9BQU8sZUFBZTtJQWtDMUIsWUFBNkIsUUFBbUIsRUFBbUIsV0FBdUI7UUFBN0QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFtQixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQWpDMUY7O1dBRUc7UUFHSCxTQUFJLEdBQWUsUUFBUSxDQUFDO1FBRTVCOzs7O1dBSUc7UUFDTSxVQUFLLEdBQXlCLFNBQVMsQ0FBQztRQUVqRDs7V0FFRztRQUNNLGVBQVUsR0FBZ0IsSUFBSSxDQUFDO1FBRXhDOztXQUVHO1FBR0gsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkOzs7V0FHRztRQUdILFdBQU0sR0FBRyxLQUFLLENBQUM7SUFFOEUsQ0FBQztJQUU5RixRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2pCLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO2FBQ2pHO1lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtnQkFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7YUFDN0Y7U0FDRjtRQUVELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN0QixJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFO2dCQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQzthQUN0RztZQUVELElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO2FBQ2xHO1NBQ0Y7SUFDSCxDQUFDOzs2R0E5RFUsZUFBZTtpR0FBZixlQUFlOzRGQUFmLGVBQWU7a0JBSDNCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDN0I7eUhBT0MsSUFBSTtzQkFGSCxXQUFXO3VCQUFDLE1BQU07O3NCQUNsQixLQUFLO2dCQVFHLEtBQUs7c0JBQWIsS0FBSztnQkFLRyxVQUFVO3NCQUFsQixLQUFLO2dCQU9OLEtBQUs7c0JBRkosV0FBVzt1QkFBQyxpQkFBaUI7O3NCQUM3QixLQUFLO2dCQVFOLE1BQU07c0JBRkwsV0FBVzt1QkFBQyxrQkFBa0I7O3NCQUM5QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IHR5cGUgQnV0dG9uVHlwZSA9ICdidXR0b24nIHwgJ3Jlc2V0JyB8ICdzdWJtaXQnO1xuXG5leHBvcnQgdHlwZSBCdXR0b25Db2xvciA9XG4gIHwgJ3ByaW1hcnknXG4gIHwgJ2luZm8nXG4gIHwgJ3N1Y2Nlc3MnXG4gIHwgJ3dhcm5pbmcnXG4gIHwgJ2RhbmdlcidcbiAgfCAnc2Vjb25kYXJ5J1xuICB8ICdsaWdodCdcbiAgfCAnZGFyaydcbiAgfCAnbGluaydcbiAgfCAnbGluay10ZXh0J1xuICB8ICdsaW5rLXRleHQtbGlnaHQnXG4gIHwgJ3Vuc3R5bGVkJztcblxuLyoqXG4gKiBAbmFtZSBCdXR0b25EaXJlY3RpdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSBmb3Igc3R5bGluZyBidXR0b24uXG4gKlxuICogQGExMXlcbiAqIFRoZSBgYmJCdXR0b25gIGRpcmVjdGl2ZSBkb2Vzbid0IHByb3ZpZGUgYW55IHNwZWNpZmljIHByb3BlcnRpZXMgZm9yIGFjY2Vzc2liaWxpdHkuXG4gKiBJbiBjYXNlIG9mIG5lY2Vzc2l0eSBhZGQgYGFyaWEtKmAgYXR0cmlidXRlcyB0byB0aGUgYGJ1dHRvbmAgZWxlbWVudC5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnYnV0dG9uW2JiQnV0dG9uXScsXG59KVxuZXhwb3J0IGNsYXNzIEJ1dHRvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgLyoqXG4gICAqIEJ1dHRvbidzIHR5cGUgYXRycmlidXRlIHdpdGggZGVmYXVsdCB2YWx1ZS5cbiAgICovXG4gIEBIb3N0QmluZGluZygndHlwZScpXG4gIEBJbnB1dCgpXG4gIHR5cGU6IEJ1dHRvblR5cGUgPSAnYnV0dG9uJztcblxuICAvKipcbiAgICogVGhlIGNvbG9yIGZvciB0aGUgYnV0dG9uLiBEZWZhdWx0cyB0byAncHJpbWFyeScuXG4gICAqIElmIGEgY3VzdG9tIHN0cmluZyB1c2VkLCB0aGVuIGEgY3NzIGNsYXNzIGlzIGdvaW5nIHRvIGJlIGFkZGVkLiBUaGUgcGF0dGVybiBpcyBhcyBmb2xsb3dzOlxuICAgKiBgYnRuLWN1c3RvbUNvbG9yYFxuICAgKi9cbiAgQElucHV0KCkgY29sb3I6IEJ1dHRvbkNvbG9yIHwgc3RyaW5nID0gJ3ByaW1hcnknO1xuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBASW5wdXQoKSBidXR0b25TaXplOiAnc20nIHwgJ21kJyA9ICdtZCc7XG5cbiAgLyoqXG4gICAqIFRoZSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgdGhlIGJ1dHRvbiBzaG91bGQgZmlsbCB0aGUgY29udGFpbmVyIHRoYXQgaXQgaXMgaW4uIERlZmF1bHRzIHRvICdmYWxzZScuXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJ0bi1ibG9jaycpXG4gIEBJbnB1dCgpXG4gIGJsb2NrID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRoZSBidXR0b24gc2hvdWxkIGJlIGluIGEgY2lyY3VsYXIgc2hhcGUuIERlZmF1bHRzIHRvICdmYWxzZScuXG4gICAqIFRoaXMgd2lsbCBvbmx5IHdvcmsgd2hlbiB0aGVyZSdzIG9ubHkgYW4gaWNvbiBpbnNpZGUgdGhlIGJ1dHRvbiB3aXRob3V0IGEgdGV4dC5cbiAgICovXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYnRuLWNpcmNsZScpXG4gIEBJbnB1dCgpXG4gIGNpcmNsZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSByZWFkb25seSBob3N0RWxlbWVudDogRWxlbWVudFJlZikge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2J0bicpO1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBgYnRuLSR7dGhpcy5jb2xvcn1gKTtcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgYGJ0bi0ke3RoaXMuYnV0dG9uU2l6ZX1gKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy5jb2xvcikge1xuICAgICAgaWYgKGNoYW5nZXMuY29sb3IucHJldmlvdXNWYWx1ZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgYGJ0bi0ke2NoYW5nZXMuY29sb3IucHJldmlvdXNWYWx1ZX1gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZXMuY29sb3IuY3VycmVudFZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBgYnRuLSR7Y2hhbmdlcy5jb2xvci5jdXJyZW50VmFsdWV9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXMuYnV0dG9uU2l6ZSkge1xuICAgICAgaWYgKGNoYW5nZXMuYnV0dG9uU2l6ZS5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBgYnRuLSR7Y2hhbmdlcy5idXR0b25TaXplLnByZXZpb3VzVmFsdWV9YCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VzLmJ1dHRvblNpemUuY3VycmVudFZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBgYnRuLSR7Y2hhbmdlcy5idXR0b25TaXplLmN1cnJlbnRWYWx1ZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==