import { Directive, Input, Inject, } from '@angular/core';
import { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@ng-bootstrap/ng-bootstrap";
/**
 * @name TooltipDirective
 *
 * @description
 * Directive that displays a tooltip.
 */
export class TooltipDirective extends NgbTooltip {
    // FIXME: this interface used to come from ng-bootstrap/utils
    // However this is internal api, so we can't rely on it.
    // There should be a proper solution for that issue, better then redeclaring the class,
    // so in fact this component is broken at the moment
    // @see https://github.com/ng-bootstrap/ng-bootstrap/issues/1043
    constructor(el, renderer2, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, ref, appref) {
        super(el, renderer2, injector, componentFactoryResolver, viewContainerRef, config, _ngZone, _document, ref, appref);
        this.el = el;
        /**
         * Specifies the events that should trigger the tooltip (space separated strings). Defaults to 'click'.
         *
         * This component extends `NgbTooltip`.
         * All available properties of `NgbTooltip` can be used with this component as well.
         * More information about it and more examples can be found in
         * [NgBootstrap documentation](https://ng-bootstrap.github.io/#/components/tooltip/api).
         */
        this.triggers = 'click';
    }
    /**
     * Content to be displayed as tooltip. If falsy, the tooltip won't open.
     */
    set bbTooltip(value) {
        this.ngbTooltip = value;
    }
    /**
     * Event handler to set aria-expanded on opening the tooltip
     */
    open(context) {
        super.open(context);
        this.el.nativeElement.parentElement.setAttribute('aria-expanded', true);
    }
    /**
     * Event handler to set aria-expanded on closing the tooltip
     */
    close() {
        super.close();
        this.el.nativeElement.parentElement.setAttribute('aria-expanded', false);
    }
}
TooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.Injector }, { token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: i1.NgbTooltipConfig }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Directive });
TooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TooltipDirective, selector: "[bbTooltip]", inputs: { bbTooltip: "bbTooltip", triggers: "triggers" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTooltip]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.Injector }, { type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: i1.NgbTooltipConfig }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ApplicationRef }]; }, propDecorators: { bbTooltip: [{
                type: Input
            }], triggers: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy90b29sdGlwLWRpcmVjdGl2ZS90b29sdGlwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQU9ULEtBQUssRUFHTCxNQUFNLEdBRVAsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFVBQVUsRUFBb0IsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQUUzQzs7Ozs7R0FLRztBQUlILE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxVQUFVO0lBbUI5Qyw2REFBNkQ7SUFDN0Qsd0RBQXdEO0lBQ3hELHVGQUF1RjtJQUN2RixvREFBb0Q7SUFDcEQsZ0VBQWdFO0lBRWhFLFlBQ1MsRUFBYyxFQUNyQixTQUFvQixFQUNwQixRQUFrQixFQUNsQix3QkFBa0QsRUFDbEQsZ0JBQWtDLEVBQ2xDLE1BQXdCLEVBQ3hCLE9BQWUsRUFDRyxTQUFjLEVBQ2hDLEdBQXNCLEVBQ3RCLE1BQXNCO1FBRXRCLEtBQUssQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFYN0csT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQWpCdkI7Ozs7Ozs7V0FPRztRQUNNLGFBQVEsR0FBRyxPQUFPLENBQUM7SUFxQjVCLENBQUM7SUFyQ0Q7O09BRUc7SUFDSCxJQUNJLFNBQVMsQ0FBQyxLQUFtRDtRQUMvRCxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBZ0NEOztPQUVHO0lBQ0ksSUFBSSxDQUFDLE9BQWE7UUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBQ0Q7O09BRUc7SUFDSSxLQUFLO1FBQ1YsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0UsQ0FBQzs7OEdBcERVLGdCQUFnQiwyTkFpQ2pCLFFBQVE7a0dBakNQLGdCQUFnQjs0RkFBaEIsZ0JBQWdCO2tCQUg1QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO2lCQUN4Qjs7MEJBa0NJLE1BQU07MkJBQUMsUUFBUTt5R0E1QmQsU0FBUztzQkFEWixLQUFLO2dCQWFHLFFBQVE7c0JBQWhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgSW5qZWN0b3IsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgTmdab25lLFxuICBJbnB1dCxcbiAgVGVtcGxhdGVSZWYsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBJbmplY3QsXG4gIEFwcGxpY2F0aW9uUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nYlRvb2x0aXAsIE5nYlRvb2x0aXBDb25maWcgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogQG5hbWUgVG9vbHRpcERpcmVjdGl2ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgZGlzcGxheXMgYSB0b29sdGlwLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJUb29sdGlwXScsXG59KVxuZXhwb3J0IGNsYXNzIFRvb2x0aXBEaXJlY3RpdmUgZXh0ZW5kcyBOZ2JUb29sdGlwIHtcbiAgLyoqXG4gICAqIENvbnRlbnQgdG8gYmUgZGlzcGxheWVkIGFzIHRvb2x0aXAuIElmIGZhbHN5LCB0aGUgdG9vbHRpcCB3b24ndCBvcGVuLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGJiVG9vbHRpcCh2YWx1ZTogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiB8IG51bGwgfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm5nYlRvb2x0aXAgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGV2ZW50cyB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSB0b29sdGlwIChzcGFjZSBzZXBhcmF0ZWQgc3RyaW5ncykuIERlZmF1bHRzIHRvICdjbGljaycuXG4gICAqXG4gICAqIFRoaXMgY29tcG9uZW50IGV4dGVuZHMgYE5nYlRvb2x0aXBgLlxuICAgKiBBbGwgYXZhaWxhYmxlIHByb3BlcnRpZXMgb2YgYE5nYlRvb2x0aXBgIGNhbiBiZSB1c2VkIHdpdGggdGhpcyBjb21wb25lbnQgYXMgd2VsbC5cbiAgICogTW9yZSBpbmZvcm1hdGlvbiBhYm91dCBpdCBhbmQgbW9yZSBleGFtcGxlcyBjYW4gYmUgZm91bmQgaW5cbiAgICogW05nQm9vdHN0cmFwIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbmctYm9vdHN0cmFwLmdpdGh1Yi5pby8jL2NvbXBvbmVudHMvdG9vbHRpcC9hcGkpLlxuICAgKi9cbiAgQElucHV0KCkgdHJpZ2dlcnMgPSAnY2xpY2snO1xuXG4gIC8vIEZJWE1FOiB0aGlzIGludGVyZmFjZSB1c2VkIHRvIGNvbWUgZnJvbSBuZy1ib290c3RyYXAvdXRpbHNcbiAgLy8gSG93ZXZlciB0aGlzIGlzIGludGVybmFsIGFwaSwgc28gd2UgY2FuJ3QgcmVseSBvbiBpdC5cbiAgLy8gVGhlcmUgc2hvdWxkIGJlIGEgcHJvcGVyIHNvbHV0aW9uIGZvciB0aGF0IGlzc3VlLCBiZXR0ZXIgdGhlbiByZWRlY2xhcmluZyB0aGUgY2xhc3MsXG4gIC8vIHNvIGluIGZhY3QgdGhpcyBjb21wb25lbnQgaXMgYnJva2VuIGF0IHRoZSBtb21lbnRcbiAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcC9pc3N1ZXMvMTA0M1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbDogRWxlbWVudFJlZixcbiAgICByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBjb25maWc6IE5nYlRvb2x0aXBDb25maWcsXG4gICAgX25nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIF9kb2N1bWVudDogYW55LFxuICAgIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgYXBwcmVmOiBBcHBsaWNhdGlvblJlZixcbiAgKSB7XG4gICAgc3VwZXIoZWwsIHJlbmRlcmVyMiwgaW5qZWN0b3IsIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgdmlld0NvbnRhaW5lclJlZiwgY29uZmlnLCBfbmdab25lLCBfZG9jdW1lbnQsIHJlZiwgYXBwcmVmKTtcbiAgfVxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciB0byBzZXQgYXJpYS1leHBhbmRlZCBvbiBvcGVuaW5nIHRoZSB0b29sdGlwXG4gICAqL1xuICBwdWJsaWMgb3Blbihjb250ZXh0PzogYW55KSB7XG4gICAgc3VwZXIub3Blbihjb250ZXh0KTtcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgfVxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciB0byBzZXQgYXJpYS1leHBhbmRlZCBvbiBjbG9zaW5nIHRoZSB0b29sdGlwXG4gICAqL1xuICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgc3VwZXIuY2xvc2UoKTtcbiAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gIH1cbn1cbiJdfQ==