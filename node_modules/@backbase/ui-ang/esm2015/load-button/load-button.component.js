import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ButtonComponent } from '@backbase/ui-ang/button';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/loading-indicator";
import * as i2 from "@backbase/ui-ang/button";
import * as i3 from "@angular/common";
/**
 * @name LoadButtonComponent
 *
 * @description
 * Component that displays a button with integrated loading indicator.
 * The component counts the next page(from) param. Set enable/disable and loading's delay states
 * of component depend on incoming parametrs.
 */
export class LoadButtonComponent extends ButtonComponent {
    constructor(elementRef, renderer) {
        super(elementRef, renderer);
        this.elementRef = elementRef;
        /**
         * This Boolean attribute indicates if loading indicator should be shown instead of button content
         */
        this.isLoading = false;
        /**
         * The page to list from
         */
        this.from = 0;
        /**
         * The number of results per page
         */
        this.size = 0;
        /**
         * The type of the button
         */
        this.circle = false;
        /**
         * The total item count
         */
        this.totalCount = 0;
        /**
         * This emits new load more params to parent component
         */
        this.paramChange = new EventEmitter();
    }
    ngAfterViewInit() {
        this.moveAriaAttributes(this.elementRef.nativeElement, this.buttonComponent && this.buttonComponent.nativeElement);
    }
    isLoadMore() {
        return this.size + this.totalCount + this.from > 0;
    }
    hasMore() {
        return this.from * this.size + this.size < this.totalCount;
    }
    onLoadMore() {
        if (this.hasMore() && !this.isLoading) {
            this.paramChange.emit({
                from: this.from + 1,
            });
        }
    }
}
LoadButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
LoadButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadButtonComponent, selector: "bb-load-button-ui", inputs: { isLoading: "isLoading", from: "from", size: "size", circle: "circle", totalCount: "totalCount" }, outputs: { paramChange: "paramChange" }, viewQueries: [{ propertyName: "buttonComponent", first: true, predicate: ["button"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<button\n  class=\"bb-load-button\"\n  #button\n  bbButton\n  [color]=\"color\"\n  [buttonSize]=\"buttonSize\"\n  [autofocus]=\"autofocus\"\n  [type]=\"type\"\n  [block]=\"block\"\n  [disabled]=\"disabled || (isLoadMore() && !isLoading ? !hasMore() : false)\"\n  (click)=\"isLoadMore() ? onLoadMore() : null\"\n  [circle]=\"circle\"\n>\n  <span [ngClass]=\"{ invisible: isLoading }\" class=\"bb-load-button__content\">\n    <ng-content></ng-content>\n  </span>\n  <bb-loading-indicator-ui\n    *ngIf=\"isLoading\"\n    class=\"bb-load-button__loading-indicator\"\n    loaderSize=\"sm\"\n  ></bb-loading-indicator-ui>\n</button>\n", components: [{ type: i1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i2.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-load-button-ui',
                    templateUrl: './load-button.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { isLoading: [{
                type: Input
            }], from: [{
                type: Input
            }], size: [{
                type: Input
            }], circle: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], paramChange: [{
                type: Output
            }], buttonComponent: [{
                type: ViewChild,
                args: ['button', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvbG9hZC1idXR0b24vbG9hZC1idXR0b24uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvbG9hZC1idXR0b24vbG9hZC1idXR0b24uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWEsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7QUFNMUQ7Ozs7Ozs7R0FPRztBQUtILE1BQU0sT0FBTyxtQkFBb0IsU0FBUSxlQUFlO0lBNEJ0RCxZQUE2QixVQUFzQixFQUFFLFFBQW1CO1FBQ3RFLEtBQUssQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFERCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBM0JuRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDM0I7O1dBRUc7UUFDTSxTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCOztXQUVHO1FBQ00sU0FBSSxHQUFHLENBQUMsQ0FBQztRQUNsQjs7V0FFRztRQUNNLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDeEI7O1dBRUc7UUFDTSxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCOztXQUVHO1FBQ08sZ0JBQVcsR0FBaUMsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU16RSxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckgsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUM3RCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztnQkFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQzthQUNwQixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7O2lIQWxEVSxtQkFBbUI7cUdBQW5CLG1CQUFtQiw4VkNwQmhDLHVuQkFzQkE7NEZERmEsbUJBQW1CO2tCQUovQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFdBQVcsRUFBRSw4QkFBOEI7aUJBQzVDO3lIQUtVLFNBQVM7c0JBQWpCLEtBQUs7Z0JBSUcsSUFBSTtzQkFBWixLQUFLO2dCQUlHLElBQUk7c0JBQVosS0FBSztnQkFJRyxNQUFNO3NCQUFkLEtBQUs7Z0JBSUcsVUFBVTtzQkFBbEIsS0FBSztnQkFJSSxXQUFXO3NCQUFwQixNQUFNO2dCQUVnQyxlQUFlO3NCQUFyRCxTQUFTO3VCQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgUmVuZGVyZXIyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9idXR0b24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRNb3JlUGFyYW1zIHtcbiAgZnJvbTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBuYW1lIExvYWRCdXR0b25Db21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBvbmVudCB0aGF0IGRpc3BsYXlzIGEgYnV0dG9uIHdpdGggaW50ZWdyYXRlZCBsb2FkaW5nIGluZGljYXRvci5cbiAqIFRoZSBjb21wb25lbnQgY291bnRzIHRoZSBuZXh0IHBhZ2UoZnJvbSkgcGFyYW0uIFNldCBlbmFibGUvZGlzYWJsZSBhbmQgbG9hZGluZydzIGRlbGF5IHN0YXRlc1xuICogb2YgY29tcG9uZW50IGRlcGVuZCBvbiBpbmNvbWluZyBwYXJhbWV0cnMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWxvYWQtYnV0dG9uLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xvYWQtYnV0dG9uLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZEJ1dHRvbkNvbXBvbmVudCBleHRlbmRzIEJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAvKipcbiAgICogVGhpcyBCb29sZWFuIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgaWYgbG9hZGluZyBpbmRpY2F0b3Igc2hvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgYnV0dG9uIGNvbnRlbnRcbiAgICovXG4gIEBJbnB1dCgpIGlzTG9hZGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIHBhZ2UgdG8gbGlzdCBmcm9tXG4gICAqL1xuICBASW5wdXQoKSBmcm9tID0gMDtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgcmVzdWx0cyBwZXIgcGFnZVxuICAgKi9cbiAgQElucHV0KCkgc2l6ZSA9IDA7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBjaXJjbGUgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoZSB0b3RhbCBpdGVtIGNvdW50XG4gICAqL1xuICBASW5wdXQoKSB0b3RhbENvdW50ID0gMDtcbiAgLyoqXG4gICAqIFRoaXMgZW1pdHMgbmV3IGxvYWQgbW9yZSBwYXJhbXMgdG8gcGFyZW50IGNvbXBvbmVudFxuICAgKi9cbiAgQE91dHB1dCgpIHBhcmFtQ2hhbmdlOiBFdmVudEVtaXR0ZXI8TG9hZE1vcmVQYXJhbXM+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBWaWV3Q2hpbGQoJ2J1dHRvbicsIHsgc3RhdGljOiB0cnVlIH0pIGJ1dHRvbkNvbXBvbmVudDogRWxlbWVudFJlZiB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihlbGVtZW50UmVmLCByZW5kZXJlcik7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5tb3ZlQXJpYUF0dHJpYnV0ZXModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuYnV0dG9uQ29tcG9uZW50ICYmIHRoaXMuYnV0dG9uQ29tcG9uZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgaXNMb2FkTW9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zaXplICsgdGhpcy50b3RhbENvdW50ICsgdGhpcy5mcm9tID4gMDtcbiAgfVxuXG4gIGhhc01vcmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbSAqIHRoaXMuc2l6ZSArIHRoaXMuc2l6ZSA8IHRoaXMudG90YWxDb3VudDtcbiAgfVxuXG4gIG9uTG9hZE1vcmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaGFzTW9yZSgpICYmICF0aGlzLmlzTG9hZGluZykge1xuICAgICAgdGhpcy5wYXJhbUNoYW5nZS5lbWl0KHtcbiAgICAgICAgZnJvbTogdGhpcy5mcm9tICsgMSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiPGJ1dHRvblxuICBjbGFzcz1cImJiLWxvYWQtYnV0dG9uXCJcbiAgI2J1dHRvblxuICBiYkJ1dHRvblxuICBbY29sb3JdPVwiY29sb3JcIlxuICBbYnV0dG9uU2l6ZV09XCJidXR0b25TaXplXCJcbiAgW2F1dG9mb2N1c109XCJhdXRvZm9jdXNcIlxuICBbdHlwZV09XCJ0eXBlXCJcbiAgW2Jsb2NrXT1cImJsb2NrXCJcbiAgW2Rpc2FibGVkXT1cImRpc2FibGVkIHx8IChpc0xvYWRNb3JlKCkgJiYgIWlzTG9hZGluZyA/ICFoYXNNb3JlKCkgOiBmYWxzZSlcIlxuICAoY2xpY2spPVwiaXNMb2FkTW9yZSgpID8gb25Mb2FkTW9yZSgpIDogbnVsbFwiXG4gIFtjaXJjbGVdPVwiY2lyY2xlXCJcbj5cbiAgPHNwYW4gW25nQ2xhc3NdPVwieyBpbnZpc2libGU6IGlzTG9hZGluZyB9XCIgY2xhc3M9XCJiYi1sb2FkLWJ1dHRvbl9fY29udGVudFwiPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgPC9zcGFuPlxuICA8YmItbG9hZGluZy1pbmRpY2F0b3ItdWlcbiAgICAqbmdJZj1cImlzTG9hZGluZ1wiXG4gICAgY2xhc3M9XCJiYi1sb2FkLWJ1dHRvbl9fbG9hZGluZy1pbmRpY2F0b3JcIlxuICAgIGxvYWRlclNpemU9XCJzbVwiXG4gID48L2JiLWxvYWRpbmctaW5kaWNhdG9yLXVpPlxuPC9idXR0b24+XG4iXX0=