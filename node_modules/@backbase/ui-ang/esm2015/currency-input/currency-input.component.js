import { DecimalPipe, getLocaleNumberSymbol, getNumberOfCurrencyDigits, NumberSymbol } from '@angular/common';
import { Component, EventEmitter, Inject, Input, LOCALE_ID, Optional, Output, Self, ViewChild, } from '@angular/core';
import { FormControl } from '@angular/forms';
import BigNumber from 'bignumber.js';
import { getInputNextId } from '@backbase/ui-ang/base-classes';
import { idListAttr } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
import * as i2 from "@angular/forms";
import * as i3 from "@backbase/ui-ang/dropdown-single-select";
import * as i4 from "@angular/common";
const defaultIntLength = 13;
const defaultDecimalPrecision = 2;
/**
 * @name CurrencyInputComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - aria-describedby
 *  - aria-invalid
 *  - aria-labelledby
 *  - integerLabelSrOnly
 *  - decimalLabelSrOnly
 * @description
 * Component for displaying and managing currency and it amount
 *
 */
export class CurrencyInputComponent {
    constructor(el, locale, domAttributeService, parentFormControl) {
        this.el = el;
        this.locale = locale;
        this.domAttributeService = domAttributeService;
        this.parentFormControl = parentFormControl;
        this.currencyList = [];
        this.currencyDisabledState = {
            currency: false,
            integer: false,
            decimal: false,
        };
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
        this.localeSeparatorSymbols = [
            this.decimalSeparator,
            getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup),
        ];
        /**
         * Number of minimum currency precision. Defaults to 2.
         */
        this.decMinLen = defaultDecimalPrecision;
        this.currControl = new FormControl();
        this.intControl = new FormControl();
        this.decControl = new FormControl();
        /**
         * The placeholder for the input. Defaults to 0.
         */
        this.placeholder = '0';
        /**
         * For set output type string/number, by default 'number', when  need work with long number
         * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'
         */
        this.resultType = 'number';
        /**
         * Whether there should be only the integer part.
         * You have to keep in mind, that if you have decimal part, even ".00"
         * you will not be able to remove it
         */
        this.integer = false;
        /**
         * Whether the input is required. Defaults to false.
         */
        this.required = false;
        /**
         * Whether the input is read only. Defaults to false.
         */
        this.readonly = false;
        /**
         * Whether integer label is only visible for screen readers.
         * By default is visible if it is needed to hide change this property
         * to "true" and it will have class "sr-only"
         */
        this.integerLabelSrOnly = false;
        /**
         * By default is visible if it is needed to hide change this property
         * to "true" and it will have class "sr-only"
         * By default is hidden and accessible only for screen reader
         */
        this.decimalLabelSrOnly = false;
        /**
         * Whether decimal text is aligned to the right.
         * By default is false
         */
        this.isRightAligned = false;
        this._integerId = getInputNextId();
        this._decimalId = getInputNextId();
        this.idListAttr = idListAttr;
        this.initialized = false;
        /**
         * The label for the integer input.
         */
        this.integerLabel = '';
        /**
         * The label for the decimal input.
         */
        this.decimalLabel = '';
        /**
         * The label for the currency input.
         */
        this.currencyLabel = '';
        /**
         * Flag is used to allow input negative value
         */
        this.allowNegativeValue = false;
        /**
         * Aria label for the currency dropdown.
         */
        this.currencyListAriaLabel = 'Currency List Dropdown';
        /**
         * Aria label for the currency list with one item.
         */
        this.currencyListWithOnItemAriaLabel = 'Currency';
        /**
         * An event emitter for on blur actions.
         */
        this.blur = new EventEmitter();
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this.currencyInputId = this.domAttributeService.generateId();
        this.currencyLabelId = this.domAttributeService.generateId();
        this.decimalInputId = this.domAttributeService.generateId();
        this.decimalLabelId = this.domAttributeService.generateId();
        this.integerInputId = this.domAttributeService.generateId();
        this.integerLabelId = this.domAttributeService.generateId();
        this.validationMessagesId = this.domAttributeService.generateId();
        BigNumber.config({
            FORMAT: {
                // grouping separator of the integer part
                groupSeparator: getLocaleNumberSymbol(this.locale, NumberSymbol.Group),
                // primary grouping size of the integer part
                groupSize: 3,
            },
        });
        if (this.parentFormControl != null) {
            // Setting the value accessor directly (instead of using
            // the providers) to avoid running into a circular import.
            this.parentFormControl.valueAccessor = this;
        }
    }
    /**
     * Configure the maximum number of decimals.
     * When greater than the default number of decimals for the specified currency, this value will take precedence.
     * Configuring this value can affect the input placeholder.
     */
    get decMaxLen() {
        return typeof this._decMaxLen === 'number' ? this._decMaxLen : this.getDecimalDigits(this.currency || '');
    }
    set decMaxLen(value) {
        this._decMaxLen = value;
    }
    /**
     * Non-configurable placeholder for the decimal input.
     * Displays a zero digit for every digit that is allowed in the decimal field.
     */
    get decPlaceholder() {
        return '0'.repeat(this.decMaxLen || 0);
    }
    /**
     * Whether the input is disabled. Defaults to false.
     */
    set disabled(disabled) {
        if (typeof disabled === 'boolean') {
            this.currencyDisabledState = {
                currency: disabled,
                integer: disabled,
                decimal: disabled,
            };
        }
        else {
            this.currencyDisabledState = disabled;
        }
    }
    get disabled() {
        return this.currencyDisabledState;
    }
    /**
     * Currency list to be displayed in the dropdown.
     *
     * Note: Non-empty currency list is required for the currency symbol
     * field to be shown. Otherwise, only the amount fields will be shown.
     *
     * Additionally, If only a single currency provided, the dropdown of
     * the currency selection will be disabled and its value set to that single currency
     */
    set currencies(list) {
        this.currencyList = list;
        if (this.currencyList && this.currencyList.length > 1) {
            this.currControl.enable();
        }
        else {
            this.currControl.disable();
        }
        // if currency is not set, use first item from the list
        if (this.currencyList && (this.currency === undefined || this.currencyList.indexOf(this.currency) === -1)) {
            // [FIXME] Nothing guarantees that the currencyList isn't empty
            this.updateCurrency(this.currencyList[0]);
        }
    }
    /**
     * The id for the integer input. Defaults to unique string.
     * Used to map the label to the input.
     */
    set integerId(value) {
        this._integerId = value;
    }
    get integerId() {
        return this._integerId;
    }
    /**
     * The id for the decimal input. Defaults to unique string.
     * Used to map the label to the input.
     */
    set decimalId(value) {
        this._decimalId = value;
    }
    get decimalId() {
        return this._decimalId;
    }
    ngOnInit() {
        this.initialized = true;
        if (!this.integerLabel || !this.decimalLabel) {
            console.warn(`
          Found an input from '
          ${this.constructor.name}
          ' without 'label' or 'aria-label' attribute, please provide one of them
        `);
        }
        this.setDisabled(this.currencyDisabledState);
        this.formatInteger();
    }
    ngOnChanges(changes) {
        if (changes.disabled) {
            this.setDisabled(this.currencyDisabledState);
        }
    }
    decOnBlur($event) {
        this.markAsTouched($event);
        this.formatDecimal(this.decControl);
    }
    get cur() {
        return this.currency;
    }
    get curList() {
        return this.currencyList;
    }
    ngAfterViewInit() {
        const len = this.el.nativeElement.getAttribute('maxlength');
        this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;
    }
    onPress($event) {
        this.focusDecEl($event.key);
        const keyCode = $event.keyCode || $event.which;
        const key = String.fromCharCode(keyCode);
        // allow to enter 'minus' only at the first position and if correspondent flag is enabled
        const isLeadingMinusPosition = this.allowNegativeValue && this.intEl && this.intEl.nativeElement.selectionStart === 0 && key === '-';
        // regexp is used here to support both of regular keyboard's numbers and numpad's numbers
        if (!(isLeadingMinusPosition || /^\d$/.test(key)) && $event.keyCode !== 8 && $event.keyCode !== 9) {
            $event.preventDefault();
        }
    }
    onInput() {
        const isFormatted = this.formatInteger();
        if (isFormatted) {
            this.triggerChange();
        }
    }
    updateCurrency(currency) {
        this.currency = currency || this.currControl.value;
        this.triggerChange();
    }
    checkValues() {
        if (this.currency === undefined) {
            return true;
        }
        if (!this.decControl.value && !this.intControl.value) {
            this.onChange(null);
            return true;
        }
        return false;
    }
    formatDecimal(decControl) {
        const { value } = decControl;
        if (value && this.decMaxLen && value.lenght < this.decMaxLen) {
            const updatedValue = String(value).padEnd(this.decMaxLen, '0');
            decControl.patchValue(updatedValue);
        }
    }
    triggerChange() {
        if (this.checkValues()) {
            return;
        }
        const int = this.intControl.value || '0';
        if (this.resultType === 'string') {
            const currencyGroupSymbol = new RegExp(`\\${this.localeSeparatorSymbols[1]}`, 'g');
            const whole = int.replace(currencyGroupSymbol, '');
            const dec = this.decControl.value || '0';
            const newAmount = whole + (dec !== '0' ? '.' + dec : '');
            this.onChange({
                currency: this.currency,
                amount: newAmount,
            });
        }
        else {
            const whole = parseInt(int.replace(/[^-\d]/g, ''), 10);
            const dec = parseFloat('0.' + this.decControl.value) || 0;
            const sign = whole < 0 ? -1 : 1;
            const newAmount = (Math.abs(whole) + dec) * sign;
            this.onChange({
                currency: this.currency,
                amount: newAmount,
            });
        }
    }
    checkNumeric(numeric) {
        // removed all dashes except the first one
        if (numeric.length > 0) {
            numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');
        }
        numeric = this.sanitizeNumericValue(numeric);
        return numeric === '' ? numeric : new BigNumber(numeric || 0).toFormat();
    }
    /**
     * Formats integer to user-friendly format
     *
     * @returns Returns true in case of successful formatting, otherwise - false.
     */
    formatInteger() {
        // The behavior of `formatInteger` is dependent on some component inputs,
        // so don't format anything until the configuration is available.
        if (!this.initialized || !this.intEl) {
            return false;
        }
        if (!this.intControl.value) {
            this.intControl.setValue('');
            return true;
        }
        const offset = this.intEl.nativeElement.selectionStart - this.intControl.value.length;
        const numeric = this.intControl.value.replace(this.allowNegativeValue ? /[^-\d]/g : /\D/g, '');
        if (numeric === '-') {
            this.intControl.setValue('-', { emitEvent: false });
            return false;
        }
        const newVal = this.checkNumeric(numeric);
        // extend maxlength (if set) with the amount of special chars
        if (this.intMaxLen) {
            const specialCount = newVal.replace(/\d/g, '').length;
            this.intEl.nativeElement.setAttribute('maxlength', '' + (this.intMaxLen + specialCount));
        }
        this.intControl.setValue(newVal);
        const newLen = this.intControl.value.length;
        const newPos = Math.max(offset + newLen, 0);
        if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {
            this.intEl.nativeElement.selectionStart = newPos;
            this.intEl.nativeElement.selectionEnd = newPos;
        }
        return true;
    }
    /**
     * Event handler for backspace key press, and check if correct number is deleted
     */
    onBackspace(el) {
        if (el.selectionStart) {
            const selectionStartPosition = el.selectionStart - 1;
            const value = el.value[selectionStartPosition];
            if (this.localeSeparatorSymbols.includes(value)) {
                el.setSelectionRange(selectionStartPosition, selectionStartPosition);
            }
        }
    }
    // method is used to correct rendered input's value if user entered '-' and left the field
    correctInputValue($event) {
        this.markAsTouched($event);
        const numeric = this.intControl.value;
        if (numeric !== '-') {
            return;
        }
        this.intControl.setValue('', { emitEvent: false });
    }
    writeValue(model) {
        if (!model) {
            return;
        }
        // currency cannot be set to nothing
        if (model.currency) {
            this.currency = model.currency;
            this.currControl.setValue(model.currency);
        }
        if (typeof model.amount === 'string' || typeof model.amount === 'number') {
            const [whole, decimals] = ('' + model.amount).split('.');
            this.intControl.setValue(whole);
            this.decControl.setValue(decimals);
        }
        else {
            this.intControl.setValue('');
            this.decControl.setValue('');
        }
        this.formatInteger();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    markAsTouched($event) {
        this.blur.emit($event);
        this.onTouched();
    }
    setDisabled(disableState) {
        if (disableState.currency) {
            this.currControl.disable();
        }
        else {
            this.currControl.enable();
        }
        if (disableState.integer) {
            this.intControl.disable();
        }
        else {
            this.intControl.enable();
        }
        if (disableState.decimal) {
            this.decControl.disable();
        }
        else {
            this.decControl.enable();
        }
    }
    focusDecEl(key) {
        if (this.decEl && ['.', ','].indexOf(key) !== -1) {
            this.decEl.nativeElement.focus();
        }
    }
    /**
     * Make sure that numeric value doesn't exceed max length (if set)
     * this might happen in case value is pasted to input that has extended max length
     *
     * @param numeric
     */
    sanitizeNumericValue(numeric) {
        if (this.intMaxLen && numeric) {
            return numeric.slice(0, this.intMaxLen);
        }
        return numeric;
    }
    /**
     * If currency doesn't have decimal part, decimal placeholder
     * will be set to default decMinLen
     */
    getDecimalDigits(currency) {
        return getNumberOfCurrencyDigits(currency) === 0 ? this.decMinLen : getNumberOfCurrencyDigits(currency);
    }
}
CurrencyInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputComponent, deps: [{ token: i0.ElementRef }, { token: LOCALE_ID }, { token: i1.DomAttributesService }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
CurrencyInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: { decMaxLen: "decMaxLen", decMinLen: "decMinLen", placeholder: "placeholder", resultType: "resultType", integer: "integer", required: "required", readonly: "readonly", disabled: "disabled", integerLabelSrOnly: "integerLabelSrOnly", decimalLabelSrOnly: "decimalLabelSrOnly", currencies: "currencies", isRightAligned: "isRightAligned", integerId: "integerId", decimalId: "decimalId", integerLabel: "integerLabel", decimalLabel: "decimalLabel", currencyLabel: "currencyLabel", allowNegativeValue: "allowNegativeValue", currencyListAriaLabel: "currencyListAriaLabel", currencyListWithOnItemAriaLabel: "currencyListWithOnItemAriaLabel", ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaInvalid: ["aria-invalid", "ariaInvalid"] }, outputs: { blur: "blur" }, providers: [DecimalPipe], viewQueries: [{ propertyName: "intEl", first: true, predicate: ["integerInput"], descendants: true, static: true }, { propertyName: "decEl", first: true, predicate: ["decimalsInput"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"bb-currency-input\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div *ngIf=\"curList && curList.length\" class=\"bb-currency-input__currency-selector selector bb-stack__item\">\n      <label\n        class=\"sr-only\"\n        *ngIf=\"currencyListAriaLabel || currencyListWithOnItemAriaLabel\"\n        for=\"{{ currencyInputId }}\"\n        [attr.aria-label]=\"currencyListWithOnItemAriaLabel\"\n        id=\"{{ currencyLabelId }}\"\n        [attr.data-role]=\"'currency-input-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!currencyListAriaLabel || !!currencyListWithOnItemAriaLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ curList && curList.length > 1 ? currencyListAriaLabel : currencyListWithOnItemAriaLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Currency label | Label for currency code dropdown of the Currency Input component\n              @@bb-currency-input-ui.currency-input-label\"\n            >Currency</ng-container\n          >\n        </ng-container>\n      </label>\n      <ng-container [ngSwitch]=\"readonly || (curList && curList.length === 1)\">\n        <input\n          *ngSwitchCase=\"true\"\n          type=\"text\"\n          (blur)=\"markAsTouched($event)\"\n          [id]=\"currencyInputId\"\n          [readonly]=\"true\"\n          [required]=\"required\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          class=\"form-control bb-text-align-center\"\n          value=\"{{ cur }}\"\n          [attr.data-role]=\"'currency-input-currency-readonly'\"\n        />\n        <bb-dropdown-single-select-ui\n          *ngSwitchDefault\n          [id]=\"currencyInputId\"\n          class=\"bb-block\"\n          [placeholder]=\"curList[0]\"\n          [options]=\"curList\"\n          [readonly]=\"readonly\"\n          [required]=\"required\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          (change)=\"updateCurrency(); markAsTouched($event)\"\n          [formControl]=\"currControl\"\n          [attr.data-role]=\"'currency-input-currency-selector'\"\n        ></bb-dropdown-single-select-ui>\n      </ng-container>\n    </div>\n\n    <div\n      class=\"bb-currency-input__integer bb-stack__item bb-stack__item--spacing-sm\"\n      [class.ng-touched]=\"intControl.touched || decControl.touched || parentFormControl?.touched\"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!integerLabel || integerLabelSrOnly\"\n        for=\"{{ integerInputId }}\"\n        id=\"{{ integerLabelId }}\"\n        [attr.data-role]=\"'currency-input-integer-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!integerLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ integerLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Integer label | Label for integer part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.integer-input-label\"\n            >Integer</ng-container\n          >\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ integerInputId }}\"\n        [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, integerLabelId)\"\n        name=\"integer\"\n        type=\"text\"\n        size=\"5\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keydown.backspace)=\"onBackspace(integerInput)\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"onInput()\"\n        (blur)=\"correctInputValue($event)\"\n        [formControl]=\"intControl\"\n        class=\"form-control bb-text-align-right\"\n        placeholder=\"{{ placeholder }}\"\n        #integerInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'currency-input-integer-input'\"\n      />\n    </div>\n\n    <span *ngIf=\"!integer && decMaxLen\" class=\"bb-stack__item bb-stack__item--spacing-sm\">{{ decimalSeparator }}</span>\n\n    <div\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-currency-input__decimal\"\n      [class.ng-touched]=\"intControl.touched || decControl.touched || parentFormControl?.touched\"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!decimalLabel || decimalLabelSrOnly\"\n        for=\"{{ decimalInputId }}\"\n        id=\"{{ decimalLabelId }}\"\n        [attr.data-role]=\"'currency-input-decimal-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!decimalLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ decimalLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Decimal label | Label for decimal part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.decimal-input-label\"\n          >\n            Decimals\n          </ng-container>\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ decimalInputId }}\"\n        [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, decimalLabelId)\"\n        name=\"decimals\"\n        type=\"text\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"triggerChange()\"\n        (blur)=\"decOnBlur($event)\"\n        [formControl]=\"decControl\"\n        class=\"form-control\"\n        [ngClass]=\"{ 'bb-text-align-right': isRightAligned }\"\n        maxlength=\"{{ decMaxLen }}\"\n        placeholder=\"{{ decPlaceholder }}\"\n        #decimalsInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'input-currency-decimals'\"\n      />\n    </div>\n  </div>\n  <div\n    class=\"bb-input-validation-message\"\n    aria-live=\"assertive\"\n    [id]=\"validationMessagesId\"\n    [attr.data-role]=\"'currency-input-validation-message'\"\n  >\n    <ng-content select=\"[bbValidationMessage]\"></ng-content>\n  </div>\n</div>\n", components: [{ type: i3.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i4.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-currency-input-ui',
                    templateUrl: './currency-input.component.html',
                    providers: [DecimalPipe],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: i1.DomAttributesService }, { type: i2.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { decMaxLen: [{
                type: Input
            }], decMinLen: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], resultType: [{
                type: Input
            }], integer: [{
                type: Input
            }], required: [{
                type: Input
            }], readonly: [{
                type: Input
            }], disabled: [{
                type: Input
            }], integerLabelSrOnly: [{
                type: Input
            }], decimalLabelSrOnly: [{
                type: Input
            }], currencies: [{
                type: Input
            }], isRightAligned: [{
                type: Input
            }], integerId: [{
                type: Input
            }], decimalId: [{
                type: Input
            }], integerLabel: [{
                type: Input
            }], decimalLabel: [{
                type: Input
            }], currencyLabel: [{
                type: Input
            }], allowNegativeValue: [{
                type: Input
            }], currencyListAriaLabel: [{
                type: Input
            }], currencyListWithOnItemAriaLabel: [{
                type: Input
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaInvalid: [{
                type: Input,
                args: ['aria-invalid']
            }], intEl: [{
                type: ViewChild,
                args: ['integerInput', { static: true }]
            }], decEl: [{
                type: ViewChild,
                args: ['decimalsInput']
            }], blur: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,