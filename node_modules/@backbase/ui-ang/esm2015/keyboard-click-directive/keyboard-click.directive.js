import { Directive, EventEmitter, HostListener, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @name KeyboardClickDirective
 *
 * @description
 * Directive that add click/keydown.enter/keydown.space events on element
 * Used for adding accessibility(tab navigation events) for element
 */
export class KeyboardClickDirective {
    constructor(elem) {
        this.elem = elem;
        /**
         * Stream that should be fired on click/keydown.enter/keydown.space
         */
        this.bbKeyboardClick = new EventEmitter();
        this.emit$ = new Subject();
        this.gc$ = new Subject();
        // Fix for frequent keydown event generation for spacebar in FF and IE
        this.emit$.pipe(throttleTime(100), takeUntil(this.gc$)).subscribe(this.bbKeyboardClick);
    }
    onActionKeyPressed($event) {
        // Check if the selected element is the current element itself and not its nested selectable children
        if (this.elem.nativeElement !== $event.target) {
            return;
        }
        this.emit$.next($event);
    }
    onClicked($event) {
        this.emit$.next($event);
    }
    ngOnDestroy() {
        this.gc$.next();
    }
}
KeyboardClickDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
KeyboardClickDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: { bbKeyboardClick: "bbKeyboardClick" }, host: { listeners: { "keydown.enter": "onActionKeyPressed($event)", "keydown.space": "onActionKeyPressed($event)", "click": "onClicked($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardClickDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbKeyboardClick]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { bbKeyboardClick: [{
                type: Output
            }], onActionKeyPressed: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }], onClicked: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtY2xpY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcva2V5Ym9hcmQtY2xpY2stZGlyZWN0aXZlL2tleWJvYXJkLWNsaWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLFlBQVksRUFBRSxZQUFZLEVBQWEsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFekQ7Ozs7OztHQU1HO0FBSUgsTUFBTSxPQUFPLHNCQUFzQjtJQVFqQyxZQUE2QixJQUE2QjtRQUE3QixTQUFJLEdBQUosSUFBSSxDQUF5QjtRQVAxRDs7V0FFRztRQUNPLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FBQztRQUVyQyxVQUFLLEdBQUcsSUFBSSxPQUFPLEVBQVMsQ0FBQztRQUM3QixRQUFHLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUV6QyxzRUFBc0U7UUFDdEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFJRCxrQkFBa0IsQ0FBQyxNQUFxQjtRQUN0QyxxR0FBcUc7UUFDckcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzdDLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFHRCxTQUFTLENBQUMsTUFBa0I7UUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xCLENBQUM7O29IQTlCVSxzQkFBc0I7d0dBQXRCLHNCQUFzQjs0RkFBdEIsc0JBQXNCO2tCQUhsQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCO2lHQUtXLGVBQWU7c0JBQXhCLE1BQU07Z0JBV1Asa0JBQWtCO3NCQUZqQixZQUFZO3VCQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7c0JBQ3hDLFlBQVk7dUJBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDO2dCQVV6QyxTQUFTO3NCQURSLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgT25EZXN0cm95LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRocm90dGxlVGltZSwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEBuYW1lIEtleWJvYXJkQ2xpY2tEaXJlY3RpdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IGFkZCBjbGljay9rZXlkb3duLmVudGVyL2tleWRvd24uc3BhY2UgZXZlbnRzIG9uIGVsZW1lbnRcbiAqIFVzZWQgZm9yIGFkZGluZyBhY2Nlc3NpYmlsaXR5KHRhYiBuYXZpZ2F0aW9uIGV2ZW50cykgZm9yIGVsZW1lbnRcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2JiS2V5Ym9hcmRDbGlja10nLFxufSlcbmV4cG9ydCBjbGFzcyBLZXlib2FyZENsaWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIFN0cmVhbSB0aGF0IHNob3VsZCBiZSBmaXJlZCBvbiBjbGljay9rZXlkb3duLmVudGVyL2tleWRvd24uc3BhY2VcbiAgICovXG4gIEBPdXRwdXQoKSBiYktleWJvYXJkQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPEV2ZW50PigpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZW1pdCQgPSBuZXcgU3ViamVjdDxFdmVudD4oKTtcbiAgcHJpdmF0ZSByZWFkb25seSBnYyQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsZW06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7XG4gICAgLy8gRml4IGZvciBmcmVxdWVudCBrZXlkb3duIGV2ZW50IGdlbmVyYXRpb24gZm9yIHNwYWNlYmFyIGluIEZGIGFuZCBJRVxuICAgIHRoaXMuZW1pdCQucGlwZSh0aHJvdHRsZVRpbWUoMTAwKSwgdGFrZVVudGlsKHRoaXMuZ2MkKSkuc3Vic2NyaWJlKHRoaXMuYmJLZXlib2FyZENsaWNrKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZW50ZXInLCBbJyRldmVudCddKVxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLnNwYWNlJywgWyckZXZlbnQnXSlcbiAgb25BY3Rpb25LZXlQcmVzc2VkKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIC8vIENoZWNrIGlmIHRoZSBzZWxlY3RlZCBlbGVtZW50IGlzIHRoZSBjdXJyZW50IGVsZW1lbnQgaXRzZWxmIGFuZCBub3QgaXRzIG5lc3RlZCBzZWxlY3RhYmxlIGNoaWxkcmVuXG4gICAgaWYgKHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50ICE9PSAkZXZlbnQudGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZW1pdCQubmV4dCgkZXZlbnQpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkNsaWNrZWQoJGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5lbWl0JC5uZXh0KCRldmVudCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmdjJC5uZXh0KCk7XG4gIH1cbn1cbiJdfQ==