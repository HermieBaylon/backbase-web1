import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class DigitOnlyDirective {
    constructor(el) {
        this.el = el;
        this.navigationKeys = [
            'Backspace',
            'Delete',
            'Tab',
            'Escape',
            'Enter',
            'Home',
            'End',
            'ArrowLeft',
            'ArrowRight',
            'Clear',
            'Copy',
            'Paste',
        ];
        this.isEnabled = true;
        this.allowNegativeSign = false;
        this.inputElement = el.nativeElement;
    }
    /* eslint-disable complexity */
    onKeyDown(e) {
        const array = ['KeyA', 'KeyC', 'KeyV', 'KeyX'];
        const matchPattern = this.allowNegativeSign ? /^-|\d$/ : /^\d$/;
        if (!this.isEnabled ||
            this.navigationKeys.indexOf(e.key) > -1 ||
            (array.includes(e.code) && (e.ctrlKey || e.metaKey))) {
            this.previousKey = e.key;
            return;
        }
        const preventEventDefault = 
        // it is other than pattern
        !matchPattern.test(e.key) ||
            // try to add negative when there is already a value
            (e.key === '-' && this.inputElement.value.indexOf('-') > -1) ||
            // try to add negative sign when you hit negative sign just before
            (e.key === '-' && this.previousKey === '-');
        if (!this.inputElement.value && this.previousKey !== '-') {
            this.inputElement.value = '';
        }
        this.previousKey = e.key;
        if (preventEventDefault) {
            e.preventDefault();
        }
    }
}
DigitOnlyDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DigitOnlyDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
DigitOnlyDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DigitOnlyDirective, selector: "[bbDigitOnly]", inputs: { isEnabled: ["bbDigitOnly", "isEnabled"], allowNegativeSign: "allowNegativeSign" }, host: { listeners: { "keydown": "onKeyDown($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DigitOnlyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDigitOnly]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { isEnabled: [{
                type: Input,
                args: ['bbDigitOnly']
            }], allowNegativeSign: [{
                type: Input
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlnaXQtb25seS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9pbnB1dC1udW1iZXIvZGlnaXQtb25seS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszRSxNQUFNLE9BQU8sa0JBQWtCO0lBeUI3QixZQUFtQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQXhCekIsbUJBQWMsR0FBRztZQUN2QixXQUFXO1lBQ1gsUUFBUTtZQUNSLEtBQUs7WUFDTCxRQUFRO1lBQ1IsT0FBTztZQUNQLE1BQU07WUFDTixLQUFLO1lBQ0wsV0FBVztZQUNYLFlBQVk7WUFDWixPQUFPO1lBQ1AsTUFBTTtZQUNOLE9BQU87U0FDUixDQUFDO1FBSUYsY0FBUyxHQUFHLElBQUksQ0FBQztRQUdqQixzQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFLeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCwrQkFBK0I7SUFFL0IsU0FBUyxDQUFDLENBQWdCO1FBQ3hCLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFL0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUVoRSxJQUNFLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFDZixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUNwRDtZQUNBLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUV6QixPQUFPO1NBQ1I7UUFFRCxNQUFNLG1CQUFtQjtRQUN2QiwyQkFBMkI7UUFDM0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDekIsb0RBQW9EO1lBQ3BELENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzVELGtFQUFrRTtZQUNsRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssR0FBRyxDQUFDLENBQUM7UUFFOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssR0FBRyxFQUFFO1lBQ3hELElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUV6QixJQUFJLG1CQUFtQixFQUFFO1lBQ3ZCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7O2dIQS9EVSxrQkFBa0I7b0dBQWxCLGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUg5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjtpR0FtQkMsU0FBUztzQkFEUixLQUFLO3VCQUFDLGFBQWE7Z0JBSXBCLGlCQUFpQjtzQkFEaEIsS0FBSztnQkFXTixTQUFTO3NCQURSLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkRpZ2l0T25seV0nLFxufSlcbmV4cG9ydCBjbGFzcyBEaWdpdE9ubHlEaXJlY3RpdmUge1xuICBwcml2YXRlIG5hdmlnYXRpb25LZXlzID0gW1xuICAgICdCYWNrc3BhY2UnLFxuICAgICdEZWxldGUnLFxuICAgICdUYWInLFxuICAgICdFc2NhcGUnLFxuICAgICdFbnRlcicsXG4gICAgJ0hvbWUnLFxuICAgICdFbmQnLFxuICAgICdBcnJvd0xlZnQnLFxuICAgICdBcnJvd1JpZ2h0JyxcbiAgICAnQ2xlYXInLFxuICAgICdDb3B5JyxcbiAgICAnUGFzdGUnLFxuICBdO1xuICBpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgQElucHV0KCdiYkRpZ2l0T25seScpXG4gIGlzRW5hYmxlZCA9IHRydWU7XG5cbiAgQElucHV0KClcbiAgYWxsb3dOZWdhdGl2ZVNpZ24gPSBmYWxzZTtcblxuICBwcmV2aW91c0tleTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbDogRWxlbWVudFJlZikge1xuICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gZWwubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgY29uc3QgYXJyYXkgPSBbJ0tleUEnLCAnS2V5QycsICdLZXlWJywgJ0tleVgnXTtcblxuICAgIGNvbnN0IG1hdGNoUGF0dGVybiA9IHRoaXMuYWxsb3dOZWdhdGl2ZVNpZ24gPyAvXi18XFxkJC8gOiAvXlxcZCQvO1xuXG4gICAgaWYgKFxuICAgICAgIXRoaXMuaXNFbmFibGVkIHx8XG4gICAgICB0aGlzLm5hdmlnYXRpb25LZXlzLmluZGV4T2YoZS5rZXkpID4gLTEgfHxcbiAgICAgIChhcnJheS5pbmNsdWRlcyhlLmNvZGUpICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSlcbiAgICApIHtcbiAgICAgIHRoaXMucHJldmlvdXNLZXkgPSBlLmtleTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHByZXZlbnRFdmVudERlZmF1bHQgPVxuICAgICAgLy8gaXQgaXMgb3RoZXIgdGhhbiBwYXR0ZXJuXG4gICAgICAhbWF0Y2hQYXR0ZXJuLnRlc3QoZS5rZXkpIHx8XG4gICAgICAvLyB0cnkgdG8gYWRkIG5lZ2F0aXZlIHdoZW4gdGhlcmUgaXMgYWxyZWFkeSBhIHZhbHVlXG4gICAgICAoZS5rZXkgPT09ICctJyAmJiB0aGlzLmlucHV0RWxlbWVudC52YWx1ZS5pbmRleE9mKCctJykgPiAtMSkgfHxcbiAgICAgIC8vIHRyeSB0byBhZGQgbmVnYXRpdmUgc2lnbiB3aGVuIHlvdSBoaXQgbmVnYXRpdmUgc2lnbiBqdXN0IGJlZm9yZVxuICAgICAgKGUua2V5ID09PSAnLScgJiYgdGhpcy5wcmV2aW91c0tleSA9PT0gJy0nKTtcblxuICAgIGlmICghdGhpcy5pbnB1dEVsZW1lbnQudmFsdWUgJiYgdGhpcy5wcmV2aW91c0tleSAhPT0gJy0nKSB7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMucHJldmlvdXNLZXkgPSBlLmtleTtcblxuICAgIGlmIChwcmV2ZW50RXZlbnREZWZhdWx0KSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG59XG4iXX0=