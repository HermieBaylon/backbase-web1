import { ChangeDetectionStrategy, Component, forwardRef, HostBinding, Inject, Input, LOCALE_ID, ViewChild, } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import BigNumber from 'bignumber.js';
import { getCurrencySymbol, getLocaleNumberSymbol, getNumberOfCurrencyDigits, NumberSymbol } from '@angular/common';
import { idListAttr } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@angular/common";
/**
 * @name AmountInputComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - set aria-describedby with ID of another element in the DOM with descriptive text about the amount input,
 *    by default it is set to div defining the type of currency
 *  - set aria-invalid with boolean value when the entered input value is not valid
 *  - set aria-labelledby with ID of another element in the DOM as input's label
 *
 * @description
 * Component that displays a text input.
 */
export class AmountInputComponent extends InputBaseComponent {
    constructor(cd, deprecationsService, locale, renderer) {
        super(cd, deprecationsService);
        this.locale = locale;
        this.renderer = renderer;
        this.inputClass = 'bb-amount-input';
        /**
         * Unique ID used for the accessibility property. New value is created when component is initialized.
         *
         * @internal
         */
        this.componentUniqueId = `${this.id}-currency`;
        /**
         * Utility function for use in template
         */
        this.idListAttr = idListAttr;
        /**
         * The placeholder for the text input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * classnames for the wrapper div
         */
        this.wrapperClasses = '';
        /**
         * Whether currency local should be transformed to symbol.
         * Default value true.
         */
        this.mapCurrency = true;
        /**
         * Determines currency type.
         * If nothing provided, wouldn't be displayed.
         */
        this._currency = '';
        this._decimals = 2;
        /**
         * The flag to wether auto add decimal part or not defaults to false
         */
        this.autoDecimal = false;
        this.groupSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup);
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
        this.nonNumbersAndDecimalSeparatorRegex = new RegExp(`[^${this.decimalSeparator}\\d]`, 'g');
        this.endWithDecimal = new RegExp(`[${this.decimalSeparator}]$`, 'g');
        this.format = {
            groupSeparator: this.groupSeparator,
            decimalSeparator: this.decimalSeparator,
            groupSize: 3,
        };
    }
    set currency(value) {
        if (value) {
            this._currency = this.mapCurrency ? getCurrencySymbol(value, 'wide', this.locale) : value;
            this._decimals = getNumberOfCurrencyDigits(value);
        }
    }
    get currency() {
        return this._currency;
    }
    writeValue(model) {
        const sanitizedInput = model !== null && model !== void 0 ? model : '';
        if (typeof sanitizedInput === 'string') {
            const numeric = sanitizedInput.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength) || '';
            this.renderer.setProperty(this.amountEl.nativeElement, 'value', this.formatAmount(numeric));
        }
    }
    formatAmount(numeric) {
        if (numeric) {
            if (numeric.includes(this.decimalSeparator)) {
                const [int, dec] = numeric.split(this.decimalSeparator);
                return new BigNumber(int || 0).toFormat(this.format) + this.decimalSeparator + dec.slice(0, this._decimals);
            }
            else {
                return new BigNumber(numeric).toFormat(this.format);
            }
        }
        else {
            return numeric;
        }
    }
    updateAmountInput() {
        var _a;
        const amountEl = this.amountEl.nativeElement;
        const numeric = ((_a = amountEl.value) === null || _a === void 0 ? void 0 : _a.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength)) || '';
        this.renderer.setProperty(amountEl, 'value', this.formatAmount(numeric));
    }
    setSelection(start, end) {
        const amountEl = this.amountEl.nativeElement;
        this.renderer.setProperty(amountEl, 'selectionStart', start);
        this.renderer.setProperty(amountEl, 'selectionEnd', end);
    }
    correctInputValue() {
        var _a;
        this.onBlur();
        const amountEl = (_a = this.amountEl) === null || _a === void 0 ? void 0 : _a.nativeElement;
        if (amountEl.value) {
            const numeric = amountEl.value.replace(this.endWithDecimal, '');
            this.renderer.setProperty(amountEl, 'value', numeric);
            this.updateOutputValue(numeric.replace(this.nonNumbersAndDecimalSeparatorRegex, ''));
        }
    }
    /**
     * Event handler for backspace key press, and check if correct number is deleted
     */
    onBackspace(el) {
        if (this.autoDecimal && el.selectionStart && el.value[el.selectionStart - 1] === this.groupSeparator) {
            this.setSelection(el.selectionStart - 1, el.selectionStart - 1);
        }
    }
    onPress($event) {
        const key = $event.key;
        const elm = this.amountEl.nativeElement;
        const value = elm.value;
        if (value) {
            const isDotExist = value.includes(this.decimalSeparator) && key === this.decimalSeparator;
            const regexString = `^[\\d${this.groupSeparator}]*[${this.decimalSeparator}]?\\d{0,${this._decimals}}$`;
            const formattedCurrencyRegex = new RegExp(regexString, 'g');
            const decimalStructure = formattedCurrencyRegex.test(value);
            if (isDotExist || !decimalStructure) {
                const pos = elm.selectionStart;
                if (value.indexOf(this.decimalSeparator) === pos) {
                    this.setSelection(pos + 1, pos + 1);
                }
                $event.preventDefault();
            }
        }
    }
    onInput() {
        const elm = this.amountEl.nativeElement;
        const value = elm.value.trim();
        const cursorPos = elm.selectionStart || 0;
        const oldPos = value.length - cursorPos;
        this.updateAmountInput();
        const formatted = elm.value.replace(this.nonNumbersAndDecimalSeparatorRegex, '').replace(this.endWithDecimal, '');
        if (formatted) {
            if (value.length === 1 && value !== this.decimalSeparator) {
                const newValue = this.autoDecimal ? value + this.decimalSeparator + '0'.repeat(this._decimals) : value;
                this.renderer.setProperty(elm, 'value', newValue);
                this.setSelection(1, 1);
            }
            else {
                let newpos = elm.value.length - oldPos;
                if (value.includes(this.decimalSeparator) && cursorPos > value.indexOf(this.decimalSeparator)) {
                    newpos++;
                }
                this.setSelection(newpos, newpos);
            }
        }
        this.updateOutputValue(formatted);
    }
    updateOutputValue(value) {
        this.onValueChange(value.replace(this.decimalSeparator, '.'));
    }
}
AmountInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }, { token: LOCALE_ID }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
AmountInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AmountInputComponent, selector: "bb-amount-input-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", wrapperClasses: "wrapperClasses", mapCurrency: "mapCurrency", currency: "currency", autoDecimal: "autoDecimal" }, host: { properties: { "class": "this.inputClass" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => AmountInputComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "amountEl", first: true, predicate: ["amountInput"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\"> {{ label }} </label>\n<div class=\"bb-amount-input__field\" [ngClass]=\"wrapperClasses\">\n  <input\n    id=\"{{ id }}\"\n    type=\"text\"\n    class=\"form-control bb-text-align-right\"\n    autocomplete=\"off\"\n    autocorrect=\"off\"\n    autocapitalize=\"off\"\n    spellcheck=\"false\"\n    data-role=\"bb-amount-input-ui\"\n    #amountInput\n    [attr.maxlength]=\"maxLength\"\n    [readOnly]=\"readonly\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [placeholder]=\"placeholder\"\n    [attr.aria-describedby]=\"idListAttr(ariaDescribedby, componentUniqueId)\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    (keydown)=\"onPress($event)\"\n    (keydown.backspace)=\"onBackspace(amountInput)\"\n    (blur)=\"correctInputValue()\"\n    (input)=\"onInput()\"\n  />\n  <span *ngIf=\"currency\" data-role=\"bb-amount-input-currency\" class=\"bb-amount-input__symbol\" [id]=\"componentUniqueId\">\n    <span\n      class=\"sr-only\"\n      i18n=\"\n        Currency|Text to explain that currency will be read by screen reader@@bb-amount-input-ui.currency-description\"\n      >Currency</span\n    >\n    {{ currency }}\n  </span>\n</div>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AmountInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-amount-input-ui',
                    templateUrl: './amount-input.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => AmountInputComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: i0.Renderer2 }]; }, propDecorators: { inputClass: [{
                type: HostBinding,
                args: ['class']
            }], placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], wrapperClasses: [{
                type: Input
            }], mapCurrency: [{
                type: Input
            }], currency: [{
                type: Input
            }], autoDecimal: [{
                type: Input
            }], amountEl: [{
                type: ViewChild,
                args: ['amountInput', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,