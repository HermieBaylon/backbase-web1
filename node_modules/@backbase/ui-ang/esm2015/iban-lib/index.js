/**
 * module bb-iban-lib
 * description IBAN structure validation library
 */
// References:
// https://www.swift.com/standards/data-standards/iban
// https://en.wikipedia.org/wiki/International_Bank_Account_Number
import countrySpecification from './countrySpec';
import { compact, convertIban, bbanRegexp, explodeString } from './helpers';
import bigIntMod from './bigIntegerMod';
/**
 * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
 *
 * name isValidIBAN
 * type {function}
 * param {string} iban International bank account number.
 * returns {boolean}
 */
export function isValidIBAN(iban) {
    if (typeof iban !== 'string') {
        return false;
    }
    let spec;
    const compactIBAN = compact(iban.toUpperCase());
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return false;
    }
    const specBban = bbanRegexp(spec.bban);
    if (!specBban)
        return false;
    return (spec.len === compactIBAN.length &&
        specBban.test(compactIBAN.slice(4)) &&
        bigIntMod(convertIban(compactIBAN), 97) === 1);
}
/**
 * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
 *
 * @name isValidIBANFormControl
 * @param control conntrol.value = {string} iban International bank account number.
 * @example: NL91ABNA0417164300
 */
export function isValidIBANFormControl(control) {
    const iban = control.value;
    if (typeof iban !== 'string') {
        return { invalidIban: { value: control.value } };
    }
    let spec;
    const compactIBAN = compact(iban.toUpperCase());
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return { invalidIban: { value: control.value } };
    }
    const specBban = bbanRegexp(spec.bban);
    if (!specBban)
        return { invalidIban: { value: control.value } };
    const res = spec.len === compactIBAN.length &&
        specBban.test(compactIBAN.slice(4)) &&
        bigIntMod(convertIban(compactIBAN), 97) === 1;
    return res ? null : { invalidIban: { value: control.value } };
}
/**
 * Validates BBAN structure defined in ISO 13616-1.
 *
 * name isValidBBAN
 * type {function}
 * param {string} iban International bank account number.
 * returns {boolean}
 */
export function isValidBBAN(iban) {
    if (typeof iban !== 'string') {
        return false;
    }
    let spec;
    const compactIBAN = compact(iban);
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return false;
    }
    // Remove country code and check digits
    const bban = compactIBAN.slice(4);
    const specBban = bbanRegexp(spec.bban);
    if (!specBban)
        return false;
    return bban.length === spec.len - 4 && specBban.test(bban);
}
/**
 * name formatByGroups
 * type {function}
 *
 * description
 * Splits the string up with spaces by groups of 4.
 * "IE47FNLL45049097007367" => "IE47 FNLL 4504 9097 0073 67"
 *
 * param str {string}
 * param symbol {string}
 * param groupLen {number}
 * return {string}
 */
export function formatByGroups(str, symbol, groupLen) {
    return explodeString(str, symbol, groupLen);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9pYmFuLWxpYi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxjQUFjO0FBQ2Qsc0RBQXNEO0FBQ3RELGtFQUFrRTtBQUVsRSxPQUFPLG9CQUFvQixNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzVFLE9BQU8sU0FBUyxNQUFNLGlCQUFpQixDQUFDO0FBR3hDOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQVk7SUFDdEMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDNUIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksSUFBSSxDQUFDO0lBQ1QsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBRWhELElBQUk7UUFDRixJQUFJLEdBQUcsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDMUM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFNUIsT0FBTyxDQUNMLElBQUksQ0FBQyxHQUFHLEtBQUssV0FBVyxDQUFDLE1BQU07UUFDL0IsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUM5QyxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxPQUF3QjtJQUM3RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzNCLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7S0FDbEQ7SUFFRCxJQUFJLElBQUksQ0FBQztJQUNULE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUVoRCxJQUFJO1FBQ0YsSUFBSSxHQUFHLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQzFDO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0tBQ2xEO0lBRUQsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUMsUUFBUTtRQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7SUFFaEUsTUFBTSxHQUFHLEdBQ1AsSUFBSSxDQUFDLEdBQUcsS0FBSyxXQUFXLENBQUMsTUFBTTtRQUMvQixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFaEQsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7QUFDaEUsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQVk7SUFDdEMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDNUIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksSUFBSSxDQUFDO0lBQ1QsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxDLElBQUk7UUFDRixJQUFJLEdBQUcsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDMUM7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCx1Q0FBdUM7SUFDdkMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsQyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxRQUFRO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFFNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxRQUFnQjtJQUMxRSxPQUFPLGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIG1vZHVsZSBiYi1pYmFuLWxpYlxuICogZGVzY3JpcHRpb24gSUJBTiBzdHJ1Y3R1cmUgdmFsaWRhdGlvbiBsaWJyYXJ5XG4gKi9cblxuLy8gUmVmZXJlbmNlczpcbi8vIGh0dHBzOi8vd3d3LnN3aWZ0LmNvbS9zdGFuZGFyZHMvZGF0YS1zdGFuZGFyZHMvaWJhblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9CYW5rX0FjY291bnRfTnVtYmVyXG5cbmltcG9ydCBjb3VudHJ5U3BlY2lmaWNhdGlvbiBmcm9tICcuL2NvdW50cnlTcGVjJztcbmltcG9ydCB7IGNvbXBhY3QsIGNvbnZlcnRJYmFuLCBiYmFuUmVnZXhwLCBleHBsb2RlU3RyaW5nIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBiaWdJbnRNb2QgZnJvbSAnLi9iaWdJbnRlZ2VyTW9kJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKiBWYWxpZGF0ZXMgSUJBTiBzdHJ1Y3R1cmUgZGVmaW5lZCBpbiBJU08gMTM2MTYtMSBhbmQgSVNPL0lFQyA3MDY0IChNT0Q5Ny0xMCkuXG4gKlxuICogbmFtZSBpc1ZhbGlkSUJBTlxuICogdHlwZSB7ZnVuY3Rpb259XG4gKiBwYXJhbSB7c3RyaW5nfSBpYmFuIEludGVybmF0aW9uYWwgYmFuayBhY2NvdW50IG51bWJlci5cbiAqIHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkSUJBTihpYmFuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBpYmFuICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBzcGVjO1xuICBjb25zdCBjb21wYWN0SUJBTiA9IGNvbXBhY3QoaWJhbi50b1VwcGVyQ2FzZSgpKTtcblxuICB0cnkge1xuICAgIHNwZWMgPSBjb3VudHJ5U3BlY2lmaWNhdGlvbihjb21wYWN0SUJBTik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgc3BlY0JiYW4gPSBiYmFuUmVnZXhwKHNwZWMuYmJhbik7XG4gIGlmICghc3BlY0JiYW4pIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gKFxuICAgIHNwZWMubGVuID09PSBjb21wYWN0SUJBTi5sZW5ndGggJiZcbiAgICBzcGVjQmJhbi50ZXN0KGNvbXBhY3RJQkFOLnNsaWNlKDQpKSAmJlxuICAgIGJpZ0ludE1vZChjb252ZXJ0SWJhbihjb21wYWN0SUJBTiksIDk3KSA9PT0gMVxuICApO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyBJQkFOIHN0cnVjdHVyZSBkZWZpbmVkIGluIElTTyAxMzYxNi0xIGFuZCBJU08vSUVDIDcwNjQgKE1PRDk3LTEwKS5cbiAqXG4gKiBAbmFtZSBpc1ZhbGlkSUJBTkZvcm1Db250cm9sXG4gKiBAcGFyYW0gY29udHJvbCBjb25udHJvbC52YWx1ZSA9IHtzdHJpbmd9IGliYW4gSW50ZXJuYXRpb25hbCBiYW5rIGFjY291bnQgbnVtYmVyLlxuICogQGV4YW1wbGU6IE5MOTFBQk5BMDQxNzE2NDMwMFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZElCQU5Gb3JtQ29udHJvbChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBudWxsIHwgeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG4gIGNvbnN0IGliYW4gPSBjb250cm9sLnZhbHVlO1xuICBpZiAodHlwZW9mIGliYW4gIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHsgaW52YWxpZEliYW46IHsgdmFsdWU6IGNvbnRyb2wudmFsdWUgfSB9O1xuICB9XG5cbiAgbGV0IHNwZWM7XG4gIGNvbnN0IGNvbXBhY3RJQkFOID0gY29tcGFjdChpYmFuLnRvVXBwZXJDYXNlKCkpO1xuXG4gIHRyeSB7XG4gICAgc3BlYyA9IGNvdW50cnlTcGVjaWZpY2F0aW9uKGNvbXBhY3RJQkFOKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBpbnZhbGlkSWJhbjogeyB2YWx1ZTogY29udHJvbC52YWx1ZSB9IH07XG4gIH1cblxuICBjb25zdCBzcGVjQmJhbiA9IGJiYW5SZWdleHAoc3BlYy5iYmFuKTtcbiAgaWYgKCFzcGVjQmJhbikgcmV0dXJuIHsgaW52YWxpZEliYW46IHsgdmFsdWU6IGNvbnRyb2wudmFsdWUgfSB9O1xuXG4gIGNvbnN0IHJlczogYm9vbGVhbiA9XG4gICAgc3BlYy5sZW4gPT09IGNvbXBhY3RJQkFOLmxlbmd0aCAmJlxuICAgIHNwZWNCYmFuLnRlc3QoY29tcGFjdElCQU4uc2xpY2UoNCkpICYmXG4gICAgYmlnSW50TW9kKGNvbnZlcnRJYmFuKGNvbXBhY3RJQkFOKSwgOTcpID09PSAxO1xuXG4gIHJldHVybiByZXMgPyBudWxsIDogeyBpbnZhbGlkSWJhbjogeyB2YWx1ZTogY29udHJvbC52YWx1ZSB9IH07XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIEJCQU4gc3RydWN0dXJlIGRlZmluZWQgaW4gSVNPIDEzNjE2LTEuXG4gKlxuICogbmFtZSBpc1ZhbGlkQkJBTlxuICogdHlwZSB7ZnVuY3Rpb259XG4gKiBwYXJhbSB7c3RyaW5nfSBpYmFuIEludGVybmF0aW9uYWwgYmFuayBhY2NvdW50IG51bWJlci5cbiAqIHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQkJBTihpYmFuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBpYmFuICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBzcGVjO1xuICBjb25zdCBjb21wYWN0SUJBTiA9IGNvbXBhY3QoaWJhbik7XG5cbiAgdHJ5IHtcbiAgICBzcGVjID0gY291bnRyeVNwZWNpZmljYXRpb24oY29tcGFjdElCQU4pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBjb3VudHJ5IGNvZGUgYW5kIGNoZWNrIGRpZ2l0c1xuICBjb25zdCBiYmFuID0gY29tcGFjdElCQU4uc2xpY2UoNCk7XG5cbiAgY29uc3Qgc3BlY0JiYW4gPSBiYmFuUmVnZXhwKHNwZWMuYmJhbik7XG4gIGlmICghc3BlY0JiYW4pIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gYmJhbi5sZW5ndGggPT09IHNwZWMubGVuIC0gNCAmJiBzcGVjQmJhbi50ZXN0KGJiYW4pO1xufVxuXG4vKipcbiAqIG5hbWUgZm9ybWF0QnlHcm91cHNcbiAqIHR5cGUge2Z1bmN0aW9ufVxuICpcbiAqIGRlc2NyaXB0aW9uXG4gKiBTcGxpdHMgdGhlIHN0cmluZyB1cCB3aXRoIHNwYWNlcyBieSBncm91cHMgb2YgNC5cbiAqIFwiSUU0N0ZOTEw0NTA0OTA5NzAwNzM2N1wiID0+IFwiSUU0NyBGTkxMIDQ1MDQgOTA5NyAwMDczIDY3XCJcbiAqXG4gKiBwYXJhbSBzdHIge3N0cmluZ31cbiAqIHBhcmFtIHN5bWJvbCB7c3RyaW5nfVxuICogcGFyYW0gZ3JvdXBMZW4ge251bWJlcn1cbiAqIHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QnlHcm91cHMoc3RyOiBzdHJpbmcsIHN5bWJvbDogc3RyaW5nLCBncm91cExlbjogbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIGV4cGxvZGVTdHJpbmcoc3RyLCBzeW1ib2wsIGdyb3VwTGVuKTtcbn1cbiJdfQ==