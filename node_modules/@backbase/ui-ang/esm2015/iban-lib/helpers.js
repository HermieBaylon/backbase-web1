const A = 'A'.charCodeAt(0);
const Z = 'Z'.charCodeAt(0);
const PATTERNS = {
    A: 'A-Z',
    N: '0-9',
    C: '0-9A-Z',
};
// Stores bban validation regular expressions
const cachedBbanRegexp = {};
// Generates BBAN format as a regular expression and cache it
const prepareBbanRegexp = (bbanFormat) => {
    const matchedString = bbanFormat.match(/[0-9]{2}[ANC]/g);
    if (!matchedString)
        return undefined;
    const pattern = matchedString.reduce((prevPattern, block) => {
        const quantity = parseInt(block.slice(0, 2), 10);
        const code = block[2];
        return `${prevPattern}[${PATTERNS[code]}]{${quantity}}`;
    }, '');
    cachedBbanRegexp[bbanFormat] = new RegExp(pattern);
    return cachedBbanRegexp[bbanFormat];
};
// Move the four initial characters to the end of the string
const rearrangeIban = (iban) => `${iban.slice(4)}${iban.slice(0, 4)}`;
/**
 * Removes spaces
 *
 * name  compact
 * inner
 * param  {string} str A given string
 * return {string}     Compact string
 */
export const compact = (str) => str.replace(/\s+/g, '');
/**
 * Generates a regular expression from encoded representation
 * It is grouped in blocks of 3 characters, first 2 represents the number
 * and the last character represents the type of character.
 * * A = Upper case alpha characters [A-Z]
 * * N = Numeric characters [0-9]
 * * C = Mixed case alphanumeric characters [0-9a-zA-Z]
 *
 * name bbanRegexp
 * inner
 * param  {string} bbanFormat Encoded regular expression
 * return {object}            Resulting regular expression
 */
export const bbanRegexp = (bbanFormat) => cachedBbanRegexp[bbanFormat] || prepareBbanRegexp(bbanFormat);
/**
 * Replace each letter in the string with two digits,
 * thereby expanding the string, where A = 10, B = 11, ..., Z = 35
 *
 * name convertIban
 * inner
 * param {string} iban IBAN number
 * return {string} Number representation of the IBAN
 */
export const convertIban = (iban) => rearrangeIban(iban)
    .split('')
    .reduce((result, char) => {
    const code = char.charCodeAt(0);
    let num;
    if (code >= A && code <= Z) {
        num = String(code - A + 10);
    }
    else {
        num = char;
    }
    return `${result}${num}`;
}, '');
/**
 * name alreadyExploded
 * type {function}
 * inner
 *
 * description
 * Checks if string is already split up
 *
 * param str
 * param symbol {string}
 * return {boolean}
 */
const alreadyExploded = (str, symbol) => str && str.split(symbol).length > 1;
/**
 * name explodeString
 * type {function}
 *
 * description
 * Splits the string up with spaces (or other symbol)
 * by groups of 4 (or other number).
 *
 * param str {string}
 * param symbol {string}
 * param groupLen {number}
 * return {string}
 */
export const explodeString = (str, symbol = ' ', groupLen = 4) => {
    if (!str || alreadyExploded(str, symbol))
        return str;
    const groups = Math.ceil(str.length / groupLen);
    const chunks = [];
    for (let i = 0; i < groups; i++) {
        chunks.push(str.substr(groupLen * i, groupLen));
    }
    return chunks.join(symbol);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2liYW4tbGliL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTVCLE1BQU0sUUFBUSxHQUE4QjtJQUMxQyxDQUFDLEVBQUUsS0FBSztJQUNSLENBQUMsRUFBRSxLQUFLO0lBQ1IsQ0FBQyxFQUFFLFFBQVE7Q0FDWixDQUFDO0FBRUYsNkNBQTZDO0FBQzdDLE1BQU0sZ0JBQWdCLEdBQTBDLEVBQUUsQ0FBQztBQUVuRSw2REFBNkQ7QUFDN0QsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFVBQWtCLEVBQXNCLEVBQUU7SUFDbkUsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3pELElBQUksQ0FBQyxhQUFhO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFFckMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUMxRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakQsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRCLE9BQU8sR0FBRyxXQUFXLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLFFBQVEsR0FBRyxDQUFDO0lBQzFELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNQLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRW5ELE9BQU8sZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsNERBQTREO0FBQzVELE1BQU0sYUFBYSxHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUV0Rjs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBVyxFQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUV4RTs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxVQUFrQixFQUFzQixFQUFFLENBQ25FLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRWhFOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUUsQ0FDbEQsYUFBYSxDQUFDLElBQUksQ0FBQztLQUNoQixLQUFLLENBQUMsRUFBRSxDQUFDO0tBQ1QsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRTtRQUMxQixHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7S0FDN0I7U0FBTTtRQUNMLEdBQUcsR0FBRyxJQUFJLENBQUM7S0FDWjtJQUVELE9BQU8sR0FBRyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDM0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRVg7Ozs7Ozs7Ozs7O0dBV0c7QUFDSCxNQUFNLGVBQWUsR0FBRyxDQUFDLEdBQVcsRUFBRSxNQUFjLEVBQWdCLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRTNHOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQVcsRUFBRSxTQUFpQixHQUFHLEVBQUUsV0FBbUIsQ0FBQyxFQUFVLEVBQUU7SUFDL0YsSUFBSSxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztRQUFFLE9BQU8sR0FBRyxDQUFDO0lBRXJELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsQ0FBQztJQUNoRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFFbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ2pEO0lBRUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEEgPSAnQScuY2hhckNvZGVBdCgwKTtcbmNvbnN0IFogPSAnWicuY2hhckNvZGVBdCgwKTtcblxuY29uc3QgUEFUVEVSTlM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gIEE6ICdBLVonLFxuICBOOiAnMC05JyxcbiAgQzogJzAtOUEtWicsXG59O1xuXG4vLyBTdG9yZXMgYmJhbiB2YWxpZGF0aW9uIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbmNvbnN0IGNhY2hlZEJiYW5SZWdleHA6IHsgW2tleTogc3RyaW5nXTogUmVnRXhwIHwgdW5kZWZpbmVkIH0gPSB7fTtcblxuLy8gR2VuZXJhdGVzIEJCQU4gZm9ybWF0IGFzIGEgcmVndWxhciBleHByZXNzaW9uIGFuZCBjYWNoZSBpdFxuY29uc3QgcHJlcGFyZUJiYW5SZWdleHAgPSAoYmJhbkZvcm1hdDogc3RyaW5nKTogUmVnRXhwIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IGJiYW5Gb3JtYXQubWF0Y2goL1swLTldezJ9W0FOQ10vZyk7XG4gIGlmICghbWF0Y2hlZFN0cmluZykgcmV0dXJuIHVuZGVmaW5lZDtcblxuICBjb25zdCBwYXR0ZXJuID0gbWF0Y2hlZFN0cmluZy5yZWR1Y2UoKHByZXZQYXR0ZXJuLCBibG9jaykgPT4ge1xuICAgIGNvbnN0IHF1YW50aXR5ID0gcGFyc2VJbnQoYmxvY2suc2xpY2UoMCwgMiksIDEwKTtcbiAgICBjb25zdCBjb2RlID0gYmxvY2tbMl07XG5cbiAgICByZXR1cm4gYCR7cHJldlBhdHRlcm59WyR7UEFUVEVSTlNbY29kZV19XXske3F1YW50aXR5fX1gO1xuICB9LCAnJyk7XG4gIGNhY2hlZEJiYW5SZWdleHBbYmJhbkZvcm1hdF0gPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuXG4gIHJldHVybiBjYWNoZWRCYmFuUmVnZXhwW2JiYW5Gb3JtYXRdO1xufTtcblxuLy8gTW92ZSB0aGUgZm91ciBpbml0aWFsIGNoYXJhY3RlcnMgdG8gdGhlIGVuZCBvZiB0aGUgc3RyaW5nXG5jb25zdCByZWFycmFuZ2VJYmFuID0gKGliYW46IHN0cmluZyk6IHN0cmluZyA9PiBgJHtpYmFuLnNsaWNlKDQpfSR7aWJhbi5zbGljZSgwLCA0KX1gO1xuXG4vKipcbiAqIFJlbW92ZXMgc3BhY2VzXG4gKlxuICogbmFtZSAgY29tcGFjdFxuICogaW5uZXJcbiAqIHBhcmFtICB7c3RyaW5nfSBzdHIgQSBnaXZlbiBzdHJpbmdcbiAqIHJldHVybiB7c3RyaW5nfSAgICAgQ29tcGFjdCBzdHJpbmdcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXBhY3QgPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4gc3RyLnJlcGxhY2UoL1xccysvZywgJycpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmcm9tIGVuY29kZWQgcmVwcmVzZW50YXRpb25cbiAqIEl0IGlzIGdyb3VwZWQgaW4gYmxvY2tzIG9mIDMgY2hhcmFjdGVycywgZmlyc3QgMiByZXByZXNlbnRzIHRoZSBudW1iZXJcbiAqIGFuZCB0aGUgbGFzdCBjaGFyYWN0ZXIgcmVwcmVzZW50cyB0aGUgdHlwZSBvZiBjaGFyYWN0ZXIuXG4gKiAqIEEgPSBVcHBlciBjYXNlIGFscGhhIGNoYXJhY3RlcnMgW0EtWl1cbiAqICogTiA9IE51bWVyaWMgY2hhcmFjdGVycyBbMC05XVxuICogKiBDID0gTWl4ZWQgY2FzZSBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBbMC05YS16QS1aXVxuICpcbiAqIG5hbWUgYmJhblJlZ2V4cFxuICogaW5uZXJcbiAqIHBhcmFtICB7c3RyaW5nfSBiYmFuRm9ybWF0IEVuY29kZWQgcmVndWxhciBleHByZXNzaW9uXG4gKiByZXR1cm4ge29iamVjdH0gICAgICAgICAgICBSZXN1bHRpbmcgcmVndWxhciBleHByZXNzaW9uXG4gKi9cbmV4cG9ydCBjb25zdCBiYmFuUmVnZXhwID0gKGJiYW5Gb3JtYXQ6IHN0cmluZyk6IFJlZ0V4cCB8IHVuZGVmaW5lZCA9PlxuICBjYWNoZWRCYmFuUmVnZXhwW2JiYW5Gb3JtYXRdIHx8IHByZXBhcmVCYmFuUmVnZXhwKGJiYW5Gb3JtYXQpO1xuXG4vKipcbiAqIFJlcGxhY2UgZWFjaCBsZXR0ZXIgaW4gdGhlIHN0cmluZyB3aXRoIHR3byBkaWdpdHMsXG4gKiB0aGVyZWJ5IGV4cGFuZGluZyB0aGUgc3RyaW5nLCB3aGVyZSBBID0gMTAsIEIgPSAxMSwgLi4uLCBaID0gMzVcbiAqXG4gKiBuYW1lIGNvbnZlcnRJYmFuXG4gKiBpbm5lclxuICogcGFyYW0ge3N0cmluZ30gaWJhbiBJQkFOIG51bWJlclxuICogcmV0dXJuIHtzdHJpbmd9IE51bWJlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgSUJBTlxuICovXG5leHBvcnQgY29uc3QgY29udmVydEliYW4gPSAoaWJhbjogc3RyaW5nKTogc3RyaW5nID0+XG4gIHJlYXJyYW5nZUliYW4oaWJhbilcbiAgICAuc3BsaXQoJycpXG4gICAgLnJlZHVjZSgocmVzdWx0LCBjaGFyKSA9PiB7XG4gICAgICBjb25zdCBjb2RlID0gY2hhci5jaGFyQ29kZUF0KDApO1xuICAgICAgbGV0IG51bTtcbiAgICAgIGlmIChjb2RlID49IEEgJiYgY29kZSA8PSBaKSB7XG4gICAgICAgIG51bSA9IFN0cmluZyhjb2RlIC0gQSArIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG51bSA9IGNoYXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBgJHtyZXN1bHR9JHtudW19YDtcbiAgICB9LCAnJyk7XG5cbi8qKlxuICogbmFtZSBhbHJlYWR5RXhwbG9kZWRcbiAqIHR5cGUge2Z1bmN0aW9ufVxuICogaW5uZXJcbiAqXG4gKiBkZXNjcmlwdGlvblxuICogQ2hlY2tzIGlmIHN0cmluZyBpcyBhbHJlYWR5IHNwbGl0IHVwXG4gKlxuICogcGFyYW0gc3RyXG4gKiBwYXJhbSBzeW1ib2wge3N0cmluZ31cbiAqIHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgYWxyZWFkeUV4cGxvZGVkID0gKHN0cjogc3RyaW5nLCBzeW1ib2w6IHN0cmluZyk6IGJvb2xlYW4gfCAnJyA9PiBzdHIgJiYgc3RyLnNwbGl0KHN5bWJvbCkubGVuZ3RoID4gMTtcblxuLyoqXG4gKiBuYW1lIGV4cGxvZGVTdHJpbmdcbiAqIHR5cGUge2Z1bmN0aW9ufVxuICpcbiAqIGRlc2NyaXB0aW9uXG4gKiBTcGxpdHMgdGhlIHN0cmluZyB1cCB3aXRoIHNwYWNlcyAob3Igb3RoZXIgc3ltYm9sKVxuICogYnkgZ3JvdXBzIG9mIDQgKG9yIG90aGVyIG51bWJlcikuXG4gKlxuICogcGFyYW0gc3RyIHtzdHJpbmd9XG4gKiBwYXJhbSBzeW1ib2wge3N0cmluZ31cbiAqIHBhcmFtIGdyb3VwTGVuIHtudW1iZXJ9XG4gKiByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGV4cGxvZGVTdHJpbmcgPSAoc3RyOiBzdHJpbmcsIHN5bWJvbDogc3RyaW5nID0gJyAnLCBncm91cExlbjogbnVtYmVyID0gNCk6IHN0cmluZyA9PiB7XG4gIGlmICghc3RyIHx8IGFscmVhZHlFeHBsb2RlZChzdHIsIHN5bWJvbCkpIHJldHVybiBzdHI7XG5cbiAgY29uc3QgZ3JvdXBzID0gTWF0aC5jZWlsKHN0ci5sZW5ndGggLyBncm91cExlbik7XG4gIGNvbnN0IGNodW5rcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzOyBpKyspIHtcbiAgICBjaHVua3MucHVzaChzdHIuc3Vic3RyKGdyb3VwTGVuICogaSwgZ3JvdXBMZW4pKTtcbiAgfVxuXG4gIHJldHVybiBjaHVua3Muam9pbihzeW1ib2wpO1xufTtcbiJdfQ==