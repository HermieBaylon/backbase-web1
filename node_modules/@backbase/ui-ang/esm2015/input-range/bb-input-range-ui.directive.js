import { ContentChild, Directive, Input, Self, } from '@angular/core';
import { Validators } from '@angular/forms';
import { merge, Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class InputRangeMinDirective {
    constructor(control) {
        this.control = control;
    }
    ngOnChanges({ bbInputRangeMin }) {
        const c = this.control;
        if (!c.control) {
            return;
        }
        if (!bbInputRangeMin.firstChange) {
            c.control.clearValidators();
        }
        if (typeof this.bbInputRangeMin === 'number') {
            c.control.setValidators(Validators.min(this.bbInputRangeMin));
        }
        c.control.updateValueAndValidity();
    }
}
InputRangeMinDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMinDirective, deps: [{ token: i1.NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive });
InputRangeMinDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeMinDirective, selector: "bb-input-number-ui[bbInputRangeMin]", inputs: { bbInputRangeMin: "bbInputRangeMin" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMinDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'bb-input-number-ui[bbInputRangeMin]',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Self
                }] }]; }, propDecorators: { bbInputRangeMin: [{
                type: Input
            }] } });
export class InputRangeMaxDirective {
    constructor(control) {
        this.control = control;
    }
    ngOnChanges({ bbInputRangeMax }) {
        const c = this.control;
        if (!c.control) {
            return;
        }
        if (!bbInputRangeMax.firstChange) {
            c.control.clearValidators();
        }
        if (typeof this.bbInputRangeMax === 'number') {
            c.control.setValidators(Validators.max(this.bbInputRangeMax));
        }
        c.control.updateValueAndValidity();
    }
}
InputRangeMaxDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMaxDirective, deps: [{ token: i1.NgControl, self: true }], target: i0.ɵɵFactoryTarget.Directive });
InputRangeMaxDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeMaxDirective, selector: "bb-input-number-ui[bbInputRangeMax]", inputs: { bbInputRangeMax: "bbInputRangeMax" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeMaxDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'bb-input-number-ui[bbInputRangeMax]',
                }]
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Self
                }] }]; }, propDecorators: { bbInputRangeMax: [{
                type: Input
            }] } });
export class InputRangeDirective {
    constructor() {
        this.destroy$$ = new Subject();
    }
    ngAfterViewInit() {
        const cMin = this.min && this.min.control && this.min.control.control;
        const cMax = this.max && this.max.control && this.max.control.control;
        if (!(cMin && cMax)) {
            return;
        }
        merge(cMin.valueChanges.pipe(tap((min) => {
            const max = cMax.value;
            if (typeof max !== 'number' || min > max) {
                cMax.patchValue(min, { emitEvent: false });
            }
        })), cMax.valueChanges.pipe(tap((max) => {
            const min = cMin.value;
            const areNumbers = typeof min === 'number' && typeof max === 'number';
            if (areNumbers && max < min) {
                cMin.patchValue(max, { emitEvent: false });
            }
        })))
            .pipe(takeUntil(this.destroy$$))
            .subscribe();
    }
    ngOnDestroy() {
        if (this.destroy$$) {
            this.destroy$$.next();
            this.destroy$$.complete();
        }
    }
}
InputRangeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
InputRangeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeDirective, selector: "[bbInputRange]", queries: [{ propertyName: "min", first: true, predicate: InputRangeMinDirective, descendants: true, static: true }, { propertyName: "max", first: true, predicate: InputRangeMaxDirective, descendants: true, static: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbInputRange]',
                }]
        }], propDecorators: { min: [{
                type: ContentChild,
                args: [InputRangeMinDirective, { static: true }]
            }], max: [{
                type: ContentChild,
                args: [InputRangeMaxDirective, { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmItaW5wdXQtcmFuZ2UtdWkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvaW5wdXQtcmFuZ2UvYmItaW5wdXQtcmFuZ2UtdWkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxZQUFZLEVBQ1osU0FBUyxFQUNULEtBQUssRUFHTCxJQUFJLEdBRUwsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFhLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQUtoRCxNQUFNLE9BQU8sc0JBQXNCO0lBTWpDLFlBQTZCLE9BQWtCO1FBQWxCLFlBQU8sR0FBUCxPQUFPLENBQVc7SUFBRyxDQUFDO0lBRW5ELFdBQVcsQ0FBQyxFQUFFLGVBQWUsRUFBaUI7UUFDNUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtZQUNkLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFO1lBQ2hDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDN0I7UUFDRCxJQUFJLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxRQUFRLEVBQUU7WUFDNUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztTQUMvRDtRQUNELENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNyQyxDQUFDOztvSEFwQlUsc0JBQXNCO3dHQUF0QixzQkFBc0I7NEZB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QUMsSUFBSSxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMzQjtJQUNILENBQUM7O2lIQXZDVSxtQkFBbUI7cUdBQW5CLG1CQUFtQix1RkFDaEIsc0JBQXNCLG9GQUN0QixzQkFBc0I7NEZBRnpCLG1CQUFtQjtrQkFIL0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs4QkFFeUQsR0FBRztzQkFBMUQsWUFBWTt1QkFBQyxzQkFBc0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBQ0UsR0FBRztzQkFBMUQsWUFBWTt1QkFBQyxzQkFBc0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb250ZW50Q2hpbGQsXG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBTZWxmLFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IG1lcmdlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnYmItaW5wdXQtbnVtYmVyLXVpW2JiSW5wdXRSYW5nZU1pbl0nLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dFJhbmdlTWluRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLyoqXG4gICAqIE1pbmltdW0gcG9zc2libGUgdmFsdWUgKG9wdGlvbmFsKTtcbiAgICovXG4gIEBJbnB1dCgpIGJiSW5wdXRSYW5nZU1pbj86IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihAU2VsZigpIHJlYWRvbmx5IGNvbnRyb2w6IE5nQ29udHJvbCkge31cblxuICBuZ09uQ2hhbmdlcyh7IGJiSW5wdXRSYW5nZU1pbiB9OiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgYyA9IHRoaXMuY29udHJvbDtcbiAgICBpZiAoIWMuY29udHJvbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWJiSW5wdXRSYW5nZU1pbi5maXJzdENoYW5nZSkge1xuICAgICAgYy5jb250cm9sLmNsZWFyVmFsaWRhdG9ycygpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMuYmJJbnB1dFJhbmdlTWluID09PSAnbnVtYmVyJykge1xuICAgICAgYy5jb250cm9sLnNldFZhbGlkYXRvcnMoVmFsaWRhdG9ycy5taW4odGhpcy5iYklucHV0UmFuZ2VNaW4pKTtcbiAgICB9XG4gICAgYy5jb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdiYi1pbnB1dC1udW1iZXItdWlbYmJJbnB1dFJhbmdlTWF4XScsXG59KVxuZXhwb3J0IGNsYXNzIElucHV0UmFuZ2VNYXhEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvKipcbiAgICogTWF4aW11bSBwb3NzaWJsZSB2YWx1ZSAob3B0aW9uYWwpO1xuICAgKi9cbiAgQElucHV0KCkgYmJJbnB1dFJhbmdlTWF4PzogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKEBTZWxmKCkgcmVhZG9ubHkgY29udHJvbDogTmdDb250cm9sKSB7fVxuXG4gIG5nT25DaGFuZ2VzKHsgYmJJbnB1dFJhbmdlTWF4IH06IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBjb25zdCBjID0gdGhpcy5jb250cm9sO1xuICAgIGlmICghYy5jb250cm9sKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghYmJJbnB1dFJhbmdlTWF4LmZpcnN0Q2hhbmdlKSB7XG4gICAgICBjLmNvbnRyb2wuY2xlYXJWYWxpZGF0b3JzKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5iYklucHV0UmFuZ2VNYXggPT09ICdudW1iZXInKSB7XG4gICAgICBjLmNvbnRyb2wuc2V0VmFsaWRhdG9ycyhWYWxpZGF0b3JzLm1heCh0aGlzLmJiSW5wdXRSYW5nZU1heCkpO1xuICAgIH1cbiAgICBjLmNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYklucHV0UmFuZ2VdJyxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRSYW5nZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIEBDb250ZW50Q2hpbGQoSW5wdXRSYW5nZU1pbkRpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSkgbWluOiBJbnB1dFJhbmdlTWluRGlyZWN0aXZlIHwgdW5kZWZpbmVkO1xuICBAQ29udGVudENoaWxkKElucHV0UmFuZ2VNYXhEaXJlY3RpdmUsIHsgc3RhdGljOiB0cnVlIH0pIG1heDogSW5wdXRSYW5nZU1heERpcmVjdGl2ZSB8IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCBjTWluID0gdGhpcy5taW4gJiYgdGhpcy5taW4uY29udHJvbCAmJiB0aGlzLm1pbi5jb250cm9sLmNvbnRyb2w7XG4gICAgY29uc3QgY01heCA9IHRoaXMubWF4ICYmIHRoaXMubWF4LmNvbnRyb2wgJiYgdGhpcy5tYXguY29udHJvbC5jb250cm9sO1xuICAgIGlmICghKGNNaW4gJiYgY01heCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbWVyZ2UoXG4gICAgICBjTWluLnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgICB0YXAoKG1pbjogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWF4ID0gY01heC52YWx1ZTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1heCAhPT0gJ251bWJlcicgfHwgbWluID4gbWF4KSB7XG4gICAgICAgICAgICBjTWF4LnBhdGNoVmFsdWUobWluLCB7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgICBjTWF4LnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgICB0YXAoKG1heDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgY29uc3QgbWluID0gY01pbi52YWx1ZTtcbiAgICAgICAgICBjb25zdCBhcmVOdW1iZXJzID0gdHlwZW9mIG1pbiA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG1heCA9PT0gJ251bWJlcic7XG4gICAgICAgICAgaWYgKGFyZU51bWJlcnMgJiYgbWF4IDwgbWluKSB7XG4gICAgICAgICAgICBjTWluLnBhdGNoVmFsdWUobWF4LCB7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgKVxuICAgICAgLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQkKSlcbiAgICAgIC5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRlc3Ryb3kkJCkge1xuICAgICAgdGhpcy5kZXN0cm95JCQubmV4dCgpO1xuICAgICAgdGhpcy5kZXN0cm95JCQuY29tcGxldGUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==