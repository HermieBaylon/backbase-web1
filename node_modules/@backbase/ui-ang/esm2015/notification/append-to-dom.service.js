import { Injectable, } from '@angular/core';
import * as i0 from "@angular/core";
export class AppendToDomService {
    constructor(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    appendComponentToRoot(component, autofocus = true, projectables = [], root = document.body) {
        var _a, _b;
        // 1. Create a component reference from the component
        const componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector, [projectables]);
        // 2. Attach component to the appRef so that it's inside the ng component tree
        this.appRef.attachView(componentRef.hostView);
        // 3. Get DOM element from component
        const domElem = componentRef.hostView.rootNodes[0];
        // 4. Append notification list if missing
        const listElement = this.generateListElement(root);
        // 5. Add item class
        domElem.setAttribute('class', 'bb-notification-list__item');
        // 6. Set role='status' if autofocus is set to true and role='alert' if autofocus is set to false
        if (autofocus) {
            (_a = domElem === null || domElem === void 0 ? void 0 : domElem.firstElementChild) === null || _a === void 0 ? void 0 : _a.setAttribute('role', 'status');
        }
        else {
            componentRef.instance.autofocus = false;
            // For Firefox and NVDA role should be set to list element
            if (navigator.userAgent.indexOf('Firefox') > -1) {
                listElement.setAttribute('role', 'alert');
            }
            else {
                (_b = domElem === null || domElem === void 0 ? void 0 : domElem.firstElementChild) === null || _b === void 0 ? void 0 : _b.setAttribute('role', 'alert');
            }
        }
        // 7. Append new element to list of elements and push old ones down.
        if (listElement) {
            listElement.insertBefore(domElem, listElement.firstChild);
        }
        return {
            componentInstance: componentRef.instance,
            unmountComponent: () => {
                this.destroyElement(componentRef);
            },
        };
    }
    generateListElement(root) {
        let listElement = document.getElementsByClassName('bb-notification-list')[0];
        if (!listElement) {
            listElement = document.createElement('div');
            listElement.setAttribute('class', 'bb-notification-list');
            root.appendChild(listElement);
        }
        return listElement;
    }
    /*
      This method is a hack to make notifications visible to screen readers
      (NVDA and VoiceOver) when a modal window (role="dialog") is opened.
      aria-label="polite" on the list element and role="status" with
      aria-atomic="true" on notification element don't resolve the issue.
      Any better ideas are welcome.
     */
    checkAndDestroyListElement() {
        const listElement = document.getElementsByClassName('bb-notification-list')[0];
        // don't remove list element if there are any remaining notifications
        if (!listElement || listElement.childElementCount > 0) {
            return;
        }
        listElement.remove();
    }
    destroyElement(componentRef) {
        componentRef.instance.beforeDestroy();
        this.appRef.detachView(componentRef.hostView);
        componentRef.destroy();
        // is required to make notifications visible to screen readers when any modal window is opened
        this.checkAndDestroyListElement();
    }
}
AppendToDomService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AppendToDomService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
AppendToDomService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AppendToDomService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AppendToDomService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,