import { Injectable } from '@angular/core';
import { NotificationComponent } from './notification.component';
import { Subject } from 'rxjs';
import { first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./append-to-dom.service";
export class NotificationService {
    constructor(appendtoDomService) {
        this.appendtoDomService = appendtoDomService;
    }
    showNotification({ header, message, dismissible = true, ttl = 3000, modifier = 'info', headerContext = {}, messageContext = {}, primaryActionText, primaryAction, secondaryActionText, secondaryAction, closeAction, hostAction, primaryActionTemplate, secondaryActionTemplate, autofocus = true, }) {
        const res = this.appendtoDomService.appendComponentToRoot(NotificationComponent, autofocus);
        const componentInstance = res.componentInstance;
        componentInstance.message = message;
        componentInstance.modifier = modifier;
        componentInstance.dismissible = dismissible;
        componentInstance.header = header;
        componentInstance.primaryActionText = primaryActionText;
        componentInstance.primaryAction = primaryAction;
        componentInstance.secondaryActionText = secondaryActionText;
        componentInstance.secondaryAction = secondaryAction;
        componentInstance.closeAction = closeAction;
        componentInstance.hostAction = hostAction;
        componentInstance.headerContext = headerContext;
        componentInstance.messageContext = messageContext;
        componentInstance.primaryActionTemplate = primaryActionTemplate;
        componentInstance.secondaryActionTemplate = secondaryActionTemplate;
        return this.createHideNotificationFunction(res.unmountComponent, ttl, componentInstance.close);
    }
    createHideNotificationFunction(hideFn, ttl = 0, closeStream) {
        const hideSubject = new Subject();
        const hideNotification = () => {
            hideSubject.next();
        };
        const closeSubscription = closeStream.subscribe(hideNotification);
        const hideSubscription = hideSubject.pipe(first()).subscribe(() => {
            hideFn();
            hideSubscription.unsubscribe();
            closeSubscription.unsubscribe();
        });
        if (ttl > 0) {
            setTimeout(hideNotification, ttl);
        }
        return hideNotification;
    }
}
NotificationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationService, deps: [{ token: i1.AppendToDomService }], target: i0.ɵɵFactoryTarget.Injectable });
NotificationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.AppendToDomService }]; } });
//# sourceMappingURL=data:application/json;base64,