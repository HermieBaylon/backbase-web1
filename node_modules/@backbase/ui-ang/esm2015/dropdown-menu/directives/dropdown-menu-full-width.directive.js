import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class DropdownMenuFullWidthDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        /**
         * If true it will stretch the dropdown menu to 100% width
         */
        this.bbDropdownToggleFullWidth = false;
    }
    ngAfterViewInit() {
        const dropdownBtn = this.elementRef.nativeElement.querySelector('[ngbDropdownToggle]');
        const dropdownMenu = this.elementRef.nativeElement.querySelector('[ngbDropdownMenu]');
        const splitBtnWrapper = dropdownBtn === null || dropdownBtn === void 0 ? void 0 : dropdownBtn.closest('div.btn-group');
        if (this.bbDropdownToggleFullWidth) {
            this.dropdownMenuChanges = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.attributeName === 'class' && dropdownMenu.classList.contains('show')) {
                        const minWidth = splitBtnWrapper ? splitBtnWrapper.clientWidth : dropdownBtn.clientWidth;
                        this.renderer.setStyle(dropdownMenu, 'min-width', `${minWidth}px`);
                    }
                });
            });
            this.dropdownMenuChanges.observe(dropdownMenu, {
                attributes: true,
            });
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.dropdownMenuChanges) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
}
DropdownMenuFullWidthDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuFullWidthDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
DropdownMenuFullWidthDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuFullWidthDirective, selector: "[bbDropdownToggleFullWidth]", inputs: { bbDropdownToggleFullWidth: "bbDropdownToggleFullWidth" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMenuFullWidthDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDropdownToggleFullWidth]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { bbDropdownToggleFullWidth: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tbWVudS1mdWxsLXdpZHRoLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2Ryb3Bkb3duLW1lbnUvZGlyZWN0aXZlcy9kcm9wZG93bi1tZW51LWZ1bGwtd2lkdGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFjLEtBQUssRUFBd0IsTUFBTSxlQUFlLENBQUM7O0FBS2xHLE1BQU0sT0FBTyw4QkFBOEI7SUFPekMsWUFBb0IsVUFBc0IsRUFBVSxRQUFtQjtRQUFuRCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUx2RTs7V0FFRztRQUNNLDhCQUF5QixHQUFHLEtBQUssQ0FBQztJQUUrQixDQUFDO0lBRTNFLGVBQWU7UUFDYixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN2RixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN0RixNQUFNLGVBQWUsR0FBRyxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTlELElBQUksSUFBSSxDQUFDLHlCQUF5QixFQUFFO1lBQ2xDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLGdCQUFnQixDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQzVELFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtvQkFDN0IsSUFBSSxRQUFRLENBQUMsYUFBYSxLQUFLLE9BQU8sSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTt3QkFDakYsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDO3dCQUN6RixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLEdBQUcsUUFBUSxJQUFJLENBQUMsQ0FBQztxQkFDcEU7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO2dCQUM3QyxVQUFVLEVBQUUsSUFBSTthQUNqQixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxXQUFXOztRQUNULE1BQUEsSUFBSSxDQUFDLG1CQUFtQiwwQ0FBRSxVQUFVLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs0SEFoQ1UsOEJBQThCO2dIQUE5Qiw4QkFBOEI7NEZBQTlCLDhCQUE4QjtrQkFIMUMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2lCQUN4Qzt5SEFNVSx5QkFBeUI7c0JBQWpDLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJEcm9wZG93blRvZ2dsZUZ1bGxXaWR0aF0nLFxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bk1lbnVGdWxsV2lkdGhEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIGRyb3Bkb3duTWVudUNoYW5nZXMhOiBNdXRhdGlvbk9ic2VydmVyO1xuICAvKipcbiAgICogSWYgdHJ1ZSBpdCB3aWxsIHN0cmV0Y2ggdGhlIGRyb3Bkb3duIG1lbnUgdG8gMTAwJSB3aWR0aFxuICAgKi9cbiAgQElucHV0KCkgYmJEcm9wZG93blRvZ2dsZUZ1bGxXaWR0aCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCBkcm9wZG93bkJ0biA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuZ2JEcm9wZG93blRvZ2dsZV0nKTtcbiAgICBjb25zdCBkcm9wZG93bk1lbnUgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbbmdiRHJvcGRvd25NZW51XScpO1xuICAgIGNvbnN0IHNwbGl0QnRuV3JhcHBlciA9IGRyb3Bkb3duQnRuPy5jbG9zZXN0KCdkaXYuYnRuLWdyb3VwJyk7XG5cbiAgICBpZiAodGhpcy5iYkRyb3Bkb3duVG9nZ2xlRnVsbFdpZHRoKSB7XG4gICAgICB0aGlzLmRyb3Bkb3duTWVudUNoYW5nZXMgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICAgIGlmIChtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lID09PSAnY2xhc3MnICYmIGRyb3Bkb3duTWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKSkge1xuICAgICAgICAgICAgY29uc3QgbWluV2lkdGggPSBzcGxpdEJ0bldyYXBwZXIgPyBzcGxpdEJ0bldyYXBwZXIuY2xpZW50V2lkdGggOiBkcm9wZG93bkJ0bi5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZHJvcGRvd25NZW51LCAnbWluLXdpZHRoJywgYCR7bWluV2lkdGh9cHhgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZHJvcGRvd25NZW51Q2hhbmdlcy5vYnNlcnZlKGRyb3Bkb3duTWVudSwge1xuICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kcm9wZG93bk1lbnVDaGFuZ2VzPy5kaXNjb25uZWN0KCk7XG4gIH1cbn1cbiJdfQ==