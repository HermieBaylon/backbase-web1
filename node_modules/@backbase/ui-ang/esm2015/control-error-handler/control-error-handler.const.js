import { InjectionToken } from '@angular/core';
import { ValidationMessageComponent } from './components/validation-message/validation-message.component';
import '@angular/localize/init';
export const BB_VALIDATION_ERRORS = new InjectionToken('BB_VALIDATION_ERRORS', {
    providedIn: 'root',
    factory: () => defaultFromErrors,
});
export const BB_DYNAMIC_VALIDATION_ERROR_TMPL = new InjectionToken('BB_DYNAMIC_VALIDATION_ERROR_TMPL', {
    providedIn: 'root',
    factory: () => ValidationMessageComponent,
});
export const defaultFromErrors = {
    invalid: () => $localize `:@@validation-form-invalid-error:Field is invalid`,
    required: () => $localize `:@@validation-form-required-error:Field is required`,
    minlength: ({ requiredLength }) => {
        const singleStr = $localize `:@@validation-form-minlength-error-single:
    Must be shorter then ${requiredLength} character`;
        const multipleStr = $localize `:@@validation-form-minlength-error-multiple:
    Must be shorter then ${requiredLength} characters`;
        return requiredLength === 1 ? singleStr : multipleStr;
    },
    maxlength: ({ requiredLength }) => {
        const singleStr = $localize `:@@validation-form-minlength-error-single:
    Must be at least ${requiredLength} character long`;
        const multipleStr = $localize `:@@validation-form-minlength-error-multiple:
    Must be at least ${requiredLength} characters long`;
        return requiredLength === 1 ? singleStr : multipleStr;
    },
    min: ({ min }) => $localize `:@@validation-form-min-error:Expect value to be bigger than ${min}`,
    max: ({ max }) => $localize `:@@validation-form-max-error:Expect value to be less than ${max}`,
    email: () => $localize `:@@validation-form-email-error:Not a valid email`,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1lcnJvci1oYW5kbGVyLmNvbnN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvY29udHJvbC1lcnJvci1oYW5kbGVyL2NvbnRyb2wtZXJyb3ItaGFuZGxlci5jb25zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFRLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBQzFHLE9BQU8sd0JBQXdCLENBQUM7QUFlaEMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQUMsc0JBQXNCLEVBQUU7SUFDN0UsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLGlCQUFpQjtDQUNqQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxJQUFJLGNBQWMsQ0FDaEUsa0NBQWtDLEVBQ2xDO0lBQ0UsVUFBVSxFQUFFLE1BQU07SUFDbEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLDBCQUEwQjtDQUMxQyxDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBd0I7SUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQSxtREFBbUQ7SUFDM0UsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQSxxREFBcUQ7SUFDOUUsU0FBUyxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQTsyQkFDSixjQUFjLFlBQVksQ0FBQztRQUNsRCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUE7MkJBQ04sY0FBYyxhQUFhLENBQUM7UUFFbkQsT0FBTyxjQUFjLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsU0FBUyxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQTt1QkFDUixjQUFjLGlCQUFpQixDQUFDO1FBQ25ELE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQTt1QkFDVixjQUFjLGtCQUFrQixDQUFDO1FBRXBELE9BQU8sY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDeEQsQ0FBQztJQUNELEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQSwrREFBK0QsR0FBRyxFQUFFO0lBQy9GLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQSw2REFBNkQsR0FBRyxFQUFFO0lBQzdGLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUEsa0RBQWtEO0NBQ3pFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbk1lc3NhZ2VDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdmFsaWRhdGlvbi1tZXNzYWdlL3ZhbGlkYXRpb24tbWVzc2FnZS5jb21wb25lbnQnO1xuaW1wb3J0ICdAYW5ndWxhci9sb2NhbGl6ZS9pbml0JztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IGludGVyZmFjZSBQbGFpbk9iamVjdDxUPiB7XG4gIFtrZXk6IHN0cmluZ106IChwYXJhbXM6IGFueSkgPT4gVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uRXJyb3JDb21wb25lbnRNb2RlbCB7XG4gIGVycm9ySWQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBjb250cm9sPzogTmdDb250cm9sO1xuICBlcnJvckxpc3Q/OiBQbGFpbk9iamVjdDxzdHJpbmc+O1xuICBsYWJlbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEJCX1ZBTElEQVRJT05fRVJST1JTID0gbmV3IEluamVjdGlvblRva2VuKCdCQl9WQUxJREFUSU9OX0VSUk9SUycsIHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICBmYWN0b3J5OiAoKSA9PiBkZWZhdWx0RnJvbUVycm9ycyxcbn0pO1xuXG5leHBvcnQgY29uc3QgQkJfRFlOQU1JQ19WQUxJREFUSU9OX0VSUk9SX1RNUEwgPSBuZXcgSW5qZWN0aW9uVG9rZW48VHlwZTxWYWxpZGF0aW9uRXJyb3JDb21wb25lbnRNb2RlbD4+KFxuICAnQkJfRFlOQU1JQ19WQUxJREFUSU9OX0VSUk9SX1RNUEwnLFxuICB7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICAgIGZhY3Rvcnk6ICgpID0+IFZhbGlkYXRpb25NZXNzYWdlQ29tcG9uZW50LFxuICB9LFxuKTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRGcm9tRXJyb3JzOiBQbGFpbk9iamVjdDxzdHJpbmc+ID0ge1xuICBpbnZhbGlkOiAoKSA9PiAkbG9jYWxpemVgOkBAdmFsaWRhdGlvbi1mb3JtLWludmFsaWQtZXJyb3I6RmllbGQgaXMgaW52YWxpZGAsXG4gIHJlcXVpcmVkOiAoKSA9PiAkbG9jYWxpemVgOkBAdmFsaWRhdGlvbi1mb3JtLXJlcXVpcmVkLWVycm9yOkZpZWxkIGlzIHJlcXVpcmVkYCxcbiAgbWlubGVuZ3RoOiAoeyByZXF1aXJlZExlbmd0aCB9KSA9PiB7XG4gICAgY29uc3Qgc2luZ2xlU3RyID0gJGxvY2FsaXplYDpAQHZhbGlkYXRpb24tZm9ybS1taW5sZW5ndGgtZXJyb3Itc2luZ2xlOlxuICAgIE11c3QgYmUgc2hvcnRlciB0aGVuICR7cmVxdWlyZWRMZW5ndGh9IGNoYXJhY3RlcmA7XG4gICAgY29uc3QgbXVsdGlwbGVTdHIgPSAkbG9jYWxpemVgOkBAdmFsaWRhdGlvbi1mb3JtLW1pbmxlbmd0aC1lcnJvci1tdWx0aXBsZTpcbiAgICBNdXN0IGJlIHNob3J0ZXIgdGhlbiAke3JlcXVpcmVkTGVuZ3RofSBjaGFyYWN0ZXJzYDtcblxuICAgIHJldHVybiByZXF1aXJlZExlbmd0aCA9PT0gMSA/IHNpbmdsZVN0ciA6IG11bHRpcGxlU3RyO1xuICB9LFxuICBtYXhsZW5ndGg6ICh7IHJlcXVpcmVkTGVuZ3RoIH0pID0+IHtcbiAgICBjb25zdCBzaW5nbGVTdHIgPSAkbG9jYWxpemVgOkBAdmFsaWRhdGlvbi1mb3JtLW1pbmxlbmd0aC1lcnJvci1zaW5nbGU6XG4gICAgTXVzdCBiZSBhdCBsZWFzdCAke3JlcXVpcmVkTGVuZ3RofSBjaGFyYWN0ZXIgbG9uZ2A7XG4gICAgY29uc3QgbXVsdGlwbGVTdHIgPSAkbG9jYWxpemVgOkBAdmFsaWRhdGlvbi1mb3JtLW1pbmxlbmd0aC1lcnJvci1tdWx0aXBsZTpcbiAgICBNdXN0IGJlIGF0IGxlYXN0ICR7cmVxdWlyZWRMZW5ndGh9IGNoYXJhY3RlcnMgbG9uZ2A7XG5cbiAgICByZXR1cm4gcmVxdWlyZWRMZW5ndGggPT09IDEgPyBzaW5nbGVTdHIgOiBtdWx0aXBsZVN0cjtcbiAgfSxcbiAgbWluOiAoeyBtaW4gfSkgPT4gJGxvY2FsaXplYDpAQHZhbGlkYXRpb24tZm9ybS1taW4tZXJyb3I6RXhwZWN0IHZhbHVlIHRvIGJlIGJpZ2dlciB0aGFuICR7bWlufWAsXG4gIG1heDogKHsgbWF4IH0pID0+ICRsb2NhbGl6ZWA6QEB2YWxpZGF0aW9uLWZvcm0tbWF4LWVycm9yOkV4cGVjdCB2YWx1ZSB0byBiZSBsZXNzIHRoYW4gJHttYXh9YCxcbiAgZW1haWw6ICgpID0+ICRsb2NhbGl6ZWA6QEB2YWxpZGF0aW9uLWZvcm0tZW1haWwtZXJyb3I6Tm90IGEgdmFsaWQgZW1haWxgLFxufTtcbiJdfQ==