import { Directive, Host, HostListener, Inject, Input, Optional, Self, } from '@angular/core';
import { EMPTY, merge, Subject } from 'rxjs';
import { debounceTime, first, takeUntil } from 'rxjs/operators';
import { BB_DYNAMIC_VALIDATION_ERROR_TMPL, BB_VALIDATION_ERRORS, } from '../control-error-handler.const';
import { idListAttr } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "./form-submit.directive";
import * as i2 from "./control-error-container.directive";
import * as i3 from "@angular/forms";
export class ValidationErrorsDirective {
    constructor(form, controlErrorContainer, control, errors, errorTmpl, resolver, vcr, hostElem, renderer) {
        this.form = form;
        this.controlErrorContainer = controlErrorContainer;
        this.control = control;
        this.errors = errors;
        this.errorTmpl = errorTmpl;
        this.resolver = resolver;
        this.vcr = vcr;
        this.hostElem = hostElem;
        this.renderer = renderer;
        this.onBlur = new Subject();
        this.destroy = new Subject();
        this.ariaAttributeName = 'aria-describedby';
        /**
         * Custom error labels object.
         *
         * Use only if you need to set custom error labels for specific control.
         * To specify custom error labels for entire form use BB_VALIDATION_ERRORS InjectionToken.
         *
         * @default `BB_VALIDATION_ERRORS`.
         */
        this.errorLabels = {};
        /**
         * Custom function to specify when errors should be shown.
         * By default will be shown when control is invalid.
         */
        this.showError = this.showErrorDefault;
        /**
         * Selector to indicate the control in which `aria-describedby` should be set.
         */
        this.inputSelector = '.form-control';
        /**
         * Input label
         */
        this.label = null;
        /**
         * Custom component for error message.
         *
         * Use only if you need to set custom component for specific control.
         * To specify custom component for all form errors use BB_DYNAMIC_ERROR_TMPL InjectionToken.
         *
         * @default `BB_DYNAMIC_ERROR_TMPL`.
         */
        this.errorComponent = this.errorTmpl;
        this.submit = this.form ? this.form.submit : EMPTY;
        if (!this.control) {
            throw Error('bbFormControl must contain a NgControl.');
        }
    }
    onElBlur() {
        this.onBlur.next();
    }
    ngOnInit() {
        const controlChanges = this.control.valueChanges ? this.control.valueChanges : EMPTY;
        merge(controlChanges, this.submit, this.onBlur.pipe(first()))
            .pipe(debounceTime(100), takeUntil(this.destroy))
            .subscribe(() => this.manageErrors());
    }
    ngOnDestroy() {
        this.destroy.next();
        this.destroy.complete();
    }
    manageErrors() {
        var _a, _b, _c;
        const controlErrors = this.control.errors;
        if (controlErrors && this.showError()) {
            const errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);
            const firstKey = Object.keys(controlErrors)[0];
            const getError = errorList[firstKey] || errorList.invalid;
            const text = getError(controlErrors[firstKey]);
            // TODO: add aria-invalid?
            if (((_a = this.ref) === null || _a === void 0 ? void 0 : _a.instance.text) !== text) {
                this.setError(text);
                this.setDescribedById((_b = this.ref) === null || _b === void 0 ? void 0 : _b.instance.errorId);
            }
        }
        else if (this.ref) {
            this.setError('');
            this.removeErrorId((_c = this.ref) === null || _c === void 0 ? void 0 : _c.instance.errorId);
        }
    }
    setDescribedById(id) {
        const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);
        if (targetEl) {
            const existingIds = targetEl.getAttribute(this.ariaAttributeName);
            const attributeVal = idListAttr(id, existingIds);
            if (attributeVal) {
                this.renderer.setAttribute(targetEl, this.ariaAttributeName, attributeVal);
            }
        }
    }
    removeErrorId(id) {
        const targetEl = this.hostElem.nativeElement.querySelector(this.inputSelector);
        if (targetEl) {
            const existingIds = targetEl.getAttribute(this.ariaAttributeName) || '';
            const cleanIds = (id ? existingIds.replace(id, '') : existingIds).trim();
            if (cleanIds) {
                this.renderer.setAttribute(targetEl, this.ariaAttributeName, cleanIds);
            }
            else {
                this.renderer.removeAttribute(targetEl, this.ariaAttributeName);
            }
        }
    }
    showErrorDefault() {
        return Boolean(this.control.invalid);
    }
    setError(text) {
        var _a;
        if (!this.ref) {
            const container = ((_a = this.controlErrorContainer) === null || _a === void 0 ? void 0 : _a.vcr) || this.vcr;
            const factory = this.resolver.resolveComponentFactory(this.errorComponent);
            this.ref = container.createComponent(factory);
        }
        this.ref.instance.text = text;
        // Setup this properties in case of custom validation error component to give possibility to customise behavior.
        this.ref.instance.control = this.control;
        this.ref.instance.errorList = Object.assign(Object.assign({}, this.errors), this.errorLabels);
        this.ref.instance.label = this.label;
        this.ref.changeDetectorRef.detectChanges();
    }
}
ValidationErrorsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationErrorsDirective, deps: [{ token: i1.FormSubmitDirective, host: true, optional: true }, { token: i2.ControlErrorContainerDirective, optional: true }, { token: i3.NgControl, self: true }, { token: BB_VALIDATION_ERRORS }, { token: BB_DYNAMIC_VALIDATION_ERROR_TMPL }, { token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
ValidationErrorsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ValidationErrorsDirective, selector: "[bbFormControl]", inputs: { errorLabels: "errorLabels", showError: "showError", inputSelector: "inputSelector", label: "label", errorComponent: "errorComponent" }, host: { listeners: { "blur": "onElBlur()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationErrorsDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[bbFormControl]',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormSubmitDirective, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i2.ControlErrorContainerDirective, decorators: [{
                    type: Optional
                }] }, { type: i3.NgControl, decorators: [{
                    type: Self
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_VALIDATION_ERRORS]
                }] }, { type: i0.Type, decorators: [{
                    type: Inject,
                    args: [BB_DYNAMIC_VALIDATION_ERROR_TMPL]
                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { errorLabels: [{
                type: Input
            }], showError: [{
                type: Input
            }], inputSelector: [{
                type: Input
            }], label: [{
                type: Input
            }], errorComponent: [{
                type: Input
            }], onElBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,