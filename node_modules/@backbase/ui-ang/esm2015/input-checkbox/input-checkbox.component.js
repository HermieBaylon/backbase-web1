import { Component, ChangeDetectionStrategy, ViewChild, Input, EventEmitter, Output, Self, Optional, } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
/**
 * @name InputCheckboxComponent
 *
 * @description
 * Component that displays a checkbox input.
 */
export class InputCheckboxComponent extends InputBaseComponent {
    constructor(cd, el, deprecationsService, parentFormControl) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.el = el;
        this.deprecationsService = deprecationsService;
        this.parentFormControl = parentFormControl;
        /**
         * Event emitted when the checkbox's `indeterminate` value changes.
         */
        this.indeterminateChange = new EventEmitter();
        this.indeterminateValue = false;
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
    /**
     * The value that represents indeterminate state of checkbox
     */
    get indeterminate() {
        return this.indeterminateValue;
    }
    set indeterminate(value) {
        if (this.indeterminateValue !== value) {
            this.indeterminateValue = value;
            this.indeterminateChange.emit(this.indeterminate);
        }
    }
    onValueChange() {
        if (this.indeterminate && this.inputElement) {
            this.indeterminate = false;
            this.inputElement.nativeElement.checked = false;
            this.inputElement.nativeElement.dispatchEvent(new Event('change'));
        }
        super.onValueChange();
    }
    setFocus() {
        if (this.inputElement) {
            this.inputElement.nativeElement.focus();
        }
    }
}
InputCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.DeprecationsService }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
InputCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: { indeterminate: "indeterminate" }, outputs: { indeterminateChange: "indeterminateChange" }, viewQueries: [{ propertyName: "inputElement", first: true, predicate: ["input"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<label\n  [attr.for]=\"id\"\n  class=\"bb-input-checkbox\"\n  [ngClass]=\"{ 'ng-invalid': parentFormControl?.invalid, 'ng-touched': parentFormControl?.touched }\"\n>\n  <input\n    #input\n    type=\"checkbox\"\n    class=\"bb-input-checkbox__input\"\n    [attr.id]=\"id\"\n    [attr.aria-describedby]=\"ariaDescribedby\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [attr.aria-expanded]=\"ariaExpanded\"\n    [attr.role]=\"role\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-owns]=\"ariaOwns\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    [attr.aria-checked]=\"value\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [readOnly]=\"readonly\"\n    [indeterminate]=\"indeterminate\"\n    [attr.aria-label]=\"(!label && ariaLabel) || null\"\n    [(ngModel)]=\"value\"\n    (change)=\"onValueChange()\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\"\n    [attr.data-role]=\"'checkbox-input'\"\n  />\n  <span class=\"bb-input-checkbox__content\" [attr.data-role]=\"'checkbox-label'\">\n    <ng-container *ngIf=\"label; else content\">\n      {{ label }}\n    </ng-container>\n    <ng-template #content>\n      <ng-content></ng-content>\n    </ng-template>\n  </span>\n</label>\n", directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.CheckboxRequiredValidator, selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]" }, { type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-checkbox-ui',
                    templateUrl: './input-checkbox.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.DeprecationsService }, { type: i2.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }]; }, propDecorators: { inputElement: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }], indeterminateChange: [{
                type: Output
            }], indeterminate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvaW5wdXQtY2hlY2tib3gvaW5wdXQtY2hlY2tib3guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvaW5wdXQtY2hlY2tib3gvaW5wdXQtY2hlY2tib3guY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCx1QkFBdUIsRUFFdkIsU0FBUyxFQUVULEtBQUssRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLElBQUksRUFDSixRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7O0FBSW5FOzs7OztHQUtHO0FBTUgsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGtCQUFrQjtJQXdCNUQsWUFDcUIsRUFBcUIsRUFDckIsRUFBYyxFQUNkLG1CQUF3QyxFQUNoQyxpQkFBNEI7UUFFdkQsS0FBSyxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBTFosT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDckIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDaEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFXO1FBdkJ6RDs7V0FFRztRQUNnQix3QkFBbUIsR0FBMEIsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQWNwRix1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFVakMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBMUJEOztPQUVHO0lBQ0gsSUFDSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUksYUFBYSxDQUFDLEtBQWM7UUFDOUIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssS0FBSyxFQUFFO1lBQ3JDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7WUFDaEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDO0lBZ0JELGFBQWE7UUFDWCxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUMzQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQzs7b0hBbERVLHNCQUFzQjt3R0FBdEIsc0JBQXNCLDZTQzNCbkMsNnRDQXNDQTs0RkRYYSxzQkFBc0I7a0JBTGxDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsV0FBVyxFQUFFLGlDQUFpQztvQkFDOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzswQkE2QkksSUFBSTs7MEJBQUksUUFBUTs0Q0F4Qm1CLFlBQVk7c0JBQWpELFNBQVM7dUJBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFJakIsbUJBQW1CO3NCQUFyQyxNQUFNO2dCQUtILGFBQWE7c0JBRGhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgVmlld0NoaWxkLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIFNlbGYsXG4gIE9wdGlvbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElucHV0QmFzZUNvbXBvbmVudCB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvYmFzZS1jbGFzc2VzJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERlcHJlY2F0aW9uc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZnV0dXJlJztcblxuLyoqXG4gKiBAbmFtZSBJbnB1dENoZWNrYm94Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wb25lbnQgdGhhdCBkaXNwbGF5cyBhIGNoZWNrYm94IGlucHV0LlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1pbnB1dC1jaGVja2JveC11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1jaGVja2JveC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dENoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgSW5wdXRCYXNlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSBuYXRpdmUgYDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIj5gIGVsZW1lbnRcbiAgICovXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JywgeyBzdGF0aWM6IHRydWUgfSkgaW5wdXRFbGVtZW50PzogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PjtcbiAgLyoqXG4gICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY2hlY2tib3gncyBgaW5kZXRlcm1pbmF0ZWAgdmFsdWUgY2hhbmdlcy5cbiAgICovXG4gIEBPdXRwdXQoKSByZWFkb25seSBpbmRldGVybWluYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgdGhhdCByZXByZXNlbnRzIGluZGV0ZXJtaW5hdGUgc3RhdGUgb2YgY2hlY2tib3hcbiAgICovXG4gIEBJbnB1dCgpXG4gIGdldCBpbmRldGVybWluYXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmluZGV0ZXJtaW5hdGVWYWx1ZTtcbiAgfVxuICBzZXQgaW5kZXRlcm1pbmF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLmluZGV0ZXJtaW5hdGVWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuaW5kZXRlcm1pbmF0ZVZhbHVlID0gdmFsdWU7XG4gICAgICB0aGlzLmluZGV0ZXJtaW5hdGVDaGFuZ2UuZW1pdCh0aGlzLmluZGV0ZXJtaW5hdGUpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIGluZGV0ZXJtaW5hdGVWYWx1ZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBkZXByZWNhdGlvbnNTZXJ2aWNlOiBEZXByZWNhdGlvbnNTZXJ2aWNlLFxuICAgIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHVibGljIHBhcmVudEZvcm1Db250cm9sOiBOZ0NvbnRyb2wsXG4gICkge1xuICAgIHN1cGVyKGNkLCBkZXByZWNhdGlvbnNTZXJ2aWNlKTtcblxuICAgIGlmICh0aGlzLnBhcmVudEZvcm1Db250cm9sKSB7XG4gICAgICB0aGlzLnBhcmVudEZvcm1Db250cm9sLnZhbHVlQWNjZXNzb3IgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIG9uVmFsdWVDaGFuZ2UoKSB7XG4gICAgaWYgKHRoaXMuaW5kZXRlcm1pbmF0ZSAmJiB0aGlzLmlucHV0RWxlbWVudCkge1xuICAgICAgdGhpcy5pbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuaW5wdXRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcbiAgICB9XG4gICAgc3VwZXIub25WYWx1ZUNoYW5nZSgpO1xuICB9XG5cbiAgc2V0Rm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuaW5wdXRFbGVtZW50KSB7XG4gICAgICB0aGlzLmlucHV0RWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgfVxuICB9XG59XG4iLCI8bGFiZWxcbiAgW2F0dHIuZm9yXT1cImlkXCJcbiAgY2xhc3M9XCJiYi1pbnB1dC1jaGVja2JveFwiXG4gIFtuZ0NsYXNzXT1cInsgJ25nLWludmFsaWQnOiBwYXJlbnRGb3JtQ29udHJvbD8uaW52YWxpZCwgJ25nLXRvdWNoZWQnOiBwYXJlbnRGb3JtQ29udHJvbD8udG91Y2hlZCB9XCJcbj5cbiAgPGlucHV0XG4gICAgI2lucHV0XG4gICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICBjbGFzcz1cImJiLWlucHV0LWNoZWNrYm94X19pbnB1dFwiXG4gICAgW2F0dHIuaWRdPVwiaWRcIlxuICAgIFthdHRyLmFyaWEtZGVzY3JpYmVkYnldPVwiYXJpYURlc2NyaWJlZGJ5XCJcbiAgICBbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiYXJpYUxhYmVsbGVkYnlcIlxuICAgIFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiYXJpYUV4cGFuZGVkXCJcbiAgICBbYXR0ci5yb2xlXT1cInJvbGVcIlxuICAgIFthdHRyLmFyaWEtaW52YWxpZF09XCJhcmlhSW52YWxpZFwiXG4gICAgW2F0dHIuYXJpYS1vd25zXT1cImFyaWFPd25zXCJcbiAgICBbYXR0ci5hcmlhLWFjdGl2ZWRlc2NlbmRhbnRdPVwiYXJpYUFjdGl2ZWRlc2NlbmRhbnRcIlxuICAgIFthdHRyLmFyaWEtY2hlY2tlZF09XCJ2YWx1ZVwiXG4gICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICBbcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuICAgIFtyZWFkT25seV09XCJyZWFkb25seVwiXG4gICAgW2luZGV0ZXJtaW5hdGVdPVwiaW5kZXRlcm1pbmF0ZVwiXG4gICAgW2F0dHIuYXJpYS1sYWJlbF09XCIoIWxhYmVsICYmIGFyaWFMYWJlbCkgfHwgbnVsbFwiXG4gICAgWyhuZ01vZGVsKV09XCJ2YWx1ZVwiXG4gICAgKGNoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKClcIlxuICAgIChmb2N1cyk9XCJvbkZvY3VzKCRldmVudClcIlxuICAgIChibHVyKT1cIm9uQmx1cigkZXZlbnQpXCJcbiAgICBbYXR0ci5kYXRhLXJvbGVdPVwiJ2NoZWNrYm94LWlucHV0J1wiXG4gIC8+XG4gIDxzcGFuIGNsYXNzPVwiYmItaW5wdXQtY2hlY2tib3hfX2NvbnRlbnRcIiBbYXR0ci5kYXRhLXJvbGVdPVwiJ2NoZWNrYm94LWxhYmVsJ1wiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJsYWJlbDsgZWxzZSBjb250ZW50XCI+XG4gICAgICB7eyBsYWJlbCB9fVxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy10ZW1wbGF0ZSAjY29udGVudD5cbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICA8L25nLXRlbXBsYXRlPlxuICA8L3NwYW4+XG48L2xhYmVsPlxuIl19