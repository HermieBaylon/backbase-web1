import { ChangeDetectionStrategy, Component, forwardRef, Input, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@backbase/ui-ang/input-checkbox";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
/* eslint-disable */
var position;
(function (position) {
    position["left"] = "left";
    position["right"] = "right";
})(position || (position = {}));
/**
 * @name SwitchComponent
 *
 * @description
 * Component that provides you a switch input.
 */
export class SwitchComponent extends InputBaseComponent {
    constructor(cd, el, deprecationsService) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.el = el;
        this.deprecationsService = deprecationsService;
        /**
         * The label position whether it is left or right.
         */
        this.labelPosition = position.left;
        this.keyboardFocus = false;
        this.focused = false;
    }
    ngOnInit() {
        super.ngOnInit();
        this.role = this.role || 'switch';
    }
    toggleSwitch($event) {
        var _a;
        if (((_a = $event.target) === null || _a === void 0 ? void 0 : _a.tagName) === 'LABEL') {
            return;
        }
        const isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
        if (!isIE11) {
            this.onValueChange(!this.value);
            this.el.nativeElement.dispatchEvent(new Event('change', { bubbles: true }));
        }
        else {
            if ($event.target.type === 'checkbox') {
                this.onValueChange();
            }
            else {
                this.onValueChange(!this.value);
            }
            const event = document.createEvent('Event');
            event.initEvent('change', true, false);
            this.el.nativeElement.dispatchEvent(event);
        }
    }
    onBlur($event) {
        this.focused = false;
        super.onBlur($event);
    }
    isLabelLeft() {
        return this.labelPosition === position.left;
    }
    isLabelRight() {
        return this.labelPosition === position.right;
    }
}
SwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
SwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SwitchComponent, selector: "bb-switch-ui", inputs: { labelPosition: "labelPosition" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => SwitchComponent),
        },
    ], usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-switch\"\n  (click)=\"!disabled && toggleSwitch($event)\"\n  [ngClass]=\"{\n    'bb-switch--align-end': isLabelRight()\n  }\"\n>\n  <label [attr.for]=\"id\" *ngIf=\"label\" class=\"bb-switch__label\">\n    {{ label }}\n  </label>\n\n  <bb-input-checkbox-ui\n    [id]=\"id\"\n    class=\"bb-switch__checkbox sr-only sr-only-focusable\"\n    [(ngModel)]=\"value\"\n    [disabled]=\"disabled\"\n    (change)=\"$event.stopPropagation() && !disabled && toggleSwitch($event)\"\n    [aria-label]=\"ariaLabel\"\n    [required]=\"required\"\n    [aria-describedby]=\"ariaDescribedby\"\n    [aria-labelledby]=\"ariaLabelledby\"\n    [aria-expanded]=\"ariaExpanded\"\n    [role]=\"role\"\n    [aria-invalid]=\"ariaInvalid\"\n    [aria-owns]=\"ariaOwns\"\n    [aria-activedescendant]=\"ariaActivedescendant\"\n    (focus)=\"focused = true\"\n    (blur)=\"onBlur($event)\"\n  >\n  </bb-input-checkbox-ui>\n\n  <span\n    class=\"bb-switch__element\"\n    [ngClass]=\"{\n      'bb-switch__element--checked': value,\n      'bb-switch__element--disabled': disabled,\n      'bb-switch__element--focused': focused\n    }\"\n    (focus)=\"keyboardFocus = true\"\n    (blur)=\"keyboardFocus = false\"\n  >\n    <span class=\"bb-switch__slider slider\"></span>\n  </span>\n</div>\n", components: [{ type: i2.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SwitchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-switch-ui',
                    templateUrl: './switch.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => SwitchComponent),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.DeprecationsService }]; }, propDecorators: { labelPosition: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL3N3aXRjaC9zd2l0Y2guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvc3dpdGNoL3N3aXRjaC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBRXZCLFNBQVMsRUFFVCxVQUFVLEVBQ1YsS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7Ozs7QUFFbkUsb0JBQW9CO0FBQ3BCLElBQUssUUFHSjtBQUhELFdBQUssUUFBUTtJQUNYLHlCQUFhLENBQUE7SUFDYiwyQkFBZSxDQUFBO0FBQ2pCLENBQUMsRUFISSxRQUFRLEtBQVIsUUFBUSxRQUdaO0FBSUQ7Ozs7O0dBS0c7QUFhSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxrQkFBa0I7SUFTckQsWUFDcUIsRUFBcUIsRUFDaEMsRUFBYyxFQUNILG1CQUF3QztRQUUzRCxLQUFLLENBQUMsRUFBRSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFKWixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUNoQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ0gsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVg3RDs7V0FFRztRQUNNLGtCQUFhLEdBQWtCLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFFdEQsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDdEIsWUFBTyxHQUFHLEtBQUssQ0FBQztJQVFoQixDQUFDO0lBRUQsUUFBUTtRQUNOLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxZQUFZLENBQUMsTUFBVzs7UUFDdEIsSUFBSSxDQUFBLE1BQUEsTUFBTSxDQUFDLE1BQU0sMENBQUUsT0FBTyxNQUFLLE9BQU8sRUFBRTtZQUN0QyxPQUFPO1NBQ1I7UUFFRCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUUsTUFBYyxDQUFDLG9CQUFvQixJQUFJLENBQUMsQ0FBRSxRQUFnQixDQUFDLFlBQVksQ0FBQztRQUMxRixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM3RTthQUFNO1lBQ0wsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN0QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFrQjtRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsYUFBYSxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDOUMsQ0FBQztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxhQUFhLEtBQUssUUFBUSxDQUFDLEtBQUssQ0FBQztJQUMvQyxDQUFDOzs2R0F0RFUsZUFBZTtpR0FBZixlQUFlLG1GQVJmO1FBQ1Q7WUFDRSxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLEtBQUssRUFBRSxJQUFJO1lBQ1gsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUM7U0FDL0M7S0FDRixpRENwQ0gsaXdDQTRDQTs0RkROYSxlQUFlO2tCQVozQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixXQUFXLEVBQUUseUJBQXlCO29CQUN0QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLEtBQUssRUFBRSxJQUFJOzRCQUNYLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDO3lCQUMvQztxQkFDRjtpQkFDRjttS0FLVSxhQUFhO3NCQUFyQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBJbnB1dEJhc2VDb21wb25lbnQgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2Jhc2UtY2xhc3Nlcyc7XG5pbXBvcnQgeyBEZXByZWNhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2Z1dHVyZSc7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuZW51bSBwb3NpdGlvbiB7XG4gIGxlZnQgPSAnbGVmdCcsXG4gIHJpZ2h0ID0gJ3JpZ2h0Jyxcbn1cblxuZXhwb3J0IHR5cGUgTGFiZWxQb3NpdGlvbiA9ICdsZWZ0JyB8ICdyaWdodCc7XG5cbi8qKlxuICogQG5hbWUgU3dpdGNoQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wb25lbnQgdGhhdCBwcm92aWRlcyB5b3UgYSBzd2l0Y2ggaW5wdXQuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXN3aXRjaC11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2l0Y2guY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFN3aXRjaENvbXBvbmVudCksXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgU3dpdGNoQ29tcG9uZW50IGV4dGVuZHMgSW5wdXRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBwb3NpdGlvbiB3aGV0aGVyIGl0IGlzIGxlZnQgb3IgcmlnaHQuXG4gICAqL1xuICBASW5wdXQoKSBsYWJlbFBvc2l0aW9uOiBMYWJlbFBvc2l0aW9uID0gcG9zaXRpb24ubGVmdDtcblxuICBrZXlib2FyZEZvY3VzID0gZmFsc2U7XG4gIGZvY3VzZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlcHJlY2F0aW9uc1NlcnZpY2U6IERlcHJlY2F0aW9uc1NlcnZpY2UsXG4gICkge1xuICAgIHN1cGVyKGNkLCBkZXByZWNhdGlvbnNTZXJ2aWNlKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gICAgdGhpcy5yb2xlID0gdGhpcy5yb2xlIHx8ICdzd2l0Y2gnO1xuICB9XG5cbiAgdG9nZ2xlU3dpdGNoKCRldmVudDogYW55KTogdm9pZCB7XG4gICAgaWYgKCRldmVudC50YXJnZXQ/LnRhZ05hbWUgPT09ICdMQUJFTCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpc0lFMTEgPSAhISh3aW5kb3cgYXMgYW55KS5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiAhIShkb2N1bWVudCBhcyBhbnkpLmRvY3VtZW50TW9kZTtcbiAgICBpZiAoIWlzSUUxMSkge1xuICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKCF0aGlzLnZhbHVlKTtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2hhbmdlJywgeyBidWJibGVzOiB0cnVlIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCRldmVudC50YXJnZXQudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICB0aGlzLm9uVmFsdWVDaGFuZ2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25WYWx1ZUNoYW5nZSghdGhpcy52YWx1ZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgZXZlbnQuaW5pdEV2ZW50KCdjaGFuZ2UnLCB0cnVlLCBmYWxzZSk7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKCRldmVudDogRm9jdXNFdmVudCkge1xuICAgIHRoaXMuZm9jdXNlZCA9IGZhbHNlO1xuICAgIHN1cGVyLm9uQmx1cigkZXZlbnQpO1xuICB9XG5cbiAgaXNMYWJlbExlZnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWxQb3NpdGlvbiA9PT0gcG9zaXRpb24ubGVmdDtcbiAgfVxuXG4gIGlzTGFiZWxSaWdodCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbFBvc2l0aW9uID09PSBwb3NpdGlvbi5yaWdodDtcbiAgfVxufVxuIiwiPGRpdlxuICBjbGFzcz1cImJiLXN3aXRjaFwiXG4gIChjbGljayk9XCIhZGlzYWJsZWQgJiYgdG9nZ2xlU3dpdGNoKCRldmVudClcIlxuICBbbmdDbGFzc109XCJ7XG4gICAgJ2JiLXN3aXRjaC0tYWxpZ24tZW5kJzogaXNMYWJlbFJpZ2h0KClcbiAgfVwiXG4+XG4gIDxsYWJlbCBbYXR0ci5mb3JdPVwiaWRcIiAqbmdJZj1cImxhYmVsXCIgY2xhc3M9XCJiYi1zd2l0Y2hfX2xhYmVsXCI+XG4gICAge3sgbGFiZWwgfX1cbiAgPC9sYWJlbD5cblxuICA8YmItaW5wdXQtY2hlY2tib3gtdWlcbiAgICBbaWRdPVwiaWRcIlxuICAgIGNsYXNzPVwiYmItc3dpdGNoX19jaGVja2JveCBzci1vbmx5IHNyLW9ubHktZm9jdXNhYmxlXCJcbiAgICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgIChjaGFuZ2UpPVwiJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpICYmICFkaXNhYmxlZCAmJiB0b2dnbGVTd2l0Y2goJGV2ZW50KVwiXG4gICAgW2FyaWEtbGFiZWxdPVwiYXJpYUxhYmVsXCJcbiAgICBbcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuICAgIFthcmlhLWRlc2NyaWJlZGJ5XT1cImFyaWFEZXNjcmliZWRieVwiXG4gICAgW2FyaWEtbGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiXG4gICAgW2FyaWEtZXhwYW5kZWRdPVwiYXJpYUV4cGFuZGVkXCJcbiAgICBbcm9sZV09XCJyb2xlXCJcbiAgICBbYXJpYS1pbnZhbGlkXT1cImFyaWFJbnZhbGlkXCJcbiAgICBbYXJpYS1vd25zXT1cImFyaWFPd25zXCJcbiAgICBbYXJpYS1hY3RpdmVkZXNjZW5kYW50XT1cImFyaWFBY3RpdmVkZXNjZW5kYW50XCJcbiAgICAoZm9jdXMpPVwiZm9jdXNlZCA9IHRydWVcIlxuICAgIChibHVyKT1cIm9uQmx1cigkZXZlbnQpXCJcbiAgPlxuICA8L2JiLWlucHV0LWNoZWNrYm94LXVpPlxuXG4gIDxzcGFuXG4gICAgY2xhc3M9XCJiYi1zd2l0Y2hfX2VsZW1lbnRcIlxuICAgIFtuZ0NsYXNzXT1cIntcbiAgICAgICdiYi1zd2l0Y2hfX2VsZW1lbnQtLWNoZWNrZWQnOiB2YWx1ZSxcbiAgICAgICdiYi1zd2l0Y2hfX2VsZW1lbnQtLWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAnYmItc3dpdGNoX19lbGVtZW50LS1mb2N1c2VkJzogZm9jdXNlZFxuICAgIH1cIlxuICAgIChmb2N1cyk9XCJrZXlib2FyZEZvY3VzID0gdHJ1ZVwiXG4gICAgKGJsdXIpPVwia2V5Ym9hcmRGb2N1cyA9IGZhbHNlXCJcbiAgPlxuICAgIDxzcGFuIGNsYXNzPVwiYmItc3dpdGNoX19zbGlkZXIgc2xpZGVyXCI+PC9zcGFuPlxuICA8L3NwYW4+XG48L2Rpdj5cbiJdfQ==