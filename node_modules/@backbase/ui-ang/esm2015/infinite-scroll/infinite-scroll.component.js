import { Component, EventEmitter, HostListener, Input, Output, } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, filter, map, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @name InfiniteScrollComponent
 *
 * @description
 * Component that displays an infinite scroll.
 */
export class InfiniteScrollComponent {
    constructor(elRef) {
        this.elRef = elRef;
        /**
         * Event that will be triggered when user has scrolled to
         * bottom of the element
         */
        this.scrollEnd = new EventEmitter();
        /**
         * An offset from the bottom of the element to trigger
         * `scrollEnd` event
         */
        this.offset = 0;
        /**
         * Specify debounce duration in ms
         */
        this.debounce = 100;
        /**
         * If true then `scrollEnd` event should NOT be emitted
         */
        this.disableScrollEnd = false;
        /**
         * Emits a new value on element scroll event
         */
        this.scroll$ = new Subject();
        /**
         * Completes on component destroy lifecycle event
         * used to unsubscribe from infinite observables
         */
        this.ngUnsubscribe$ = new Subject();
    }
    /**
     * Subscribe to `scroll$` observable and emit `scrollEnd` event
     * when element scroll position is at the end of the element
     */
    ngAfterViewInit() {
        this.scroll$
            .pipe(debounceTime(this.debounce), map((scroll) => {
            const y = scroll.y + this.offset;
            return { y, height: scroll.height };
        }), filter(() => !this.disableScrollEnd), filter((scroll) => scroll.y >= scroll.height), takeUntil(this.ngUnsubscribe$))
            .subscribe(() => this.scrollEnd.emit());
    }
    onScroll(scrollTop, scrollheight, offsetHeight) {
        const height = scrollheight;
        const y = scrollTop + offsetHeight;
        this.scroll$.next({ y, height });
    }
    onMouseOver(evTarget) {
        const hasScroll = this.elRef.nativeElement.scrollHeight > this.elRef.nativeElement.clientHeight;
        const firstElementChild = this.elRef.nativeElement.firstElementChild;
        const lastElementChild = firstElementChild && firstElementChild.lastElementChild;
        const isLastElement = evTarget && (lastElementChild === evTarget.parentElement || lastElementChild === evTarget);
        if (!this.disableScrollEnd && !hasScroll && isLastElement) {
            this.scroll$.next({ height: 0, y: 0 });
        }
    }
    /**
     * trigger `ngUnsubscribe` complete on
     * component destroy lifecycle hook
     */
    ngOnDestroy() {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    }
}
InfiniteScrollComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
InfiniteScrollComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: { offset: "offset", debounce: "debounce", disableScrollEnd: "disableScrollEnd" }, outputs: { scrollEnd: "scrollEnd" }, host: { listeners: { "scroll": "onScroll($event.target.scrollTop,$event.target.scrollHeight,$event.target.offsetHeight)", "mouseover": "onMouseOver($event.target)", "touchmove": "onMouseOver()" } }, ngImport: i0, template: "<ng-content></ng-content>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-infinite-scroll-ui',
                    templateUrl: './infinite-scroll.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { scrollEnd: [{
                type: Output
            }], offset: [{
                type: Input
            }], debounce: [{
                type: Input
            }], disableScrollEnd: [{
                type: Input
            }], onScroll: [{
                type: HostListener,
                args: ['scroll', ['$event.target.scrollTop', '$event.target.scrollHeight', '$event.target.offsetHeight']]
            }], onMouseOver: [{
                type: HostListener,
                args: ['mouseover', ['$event.target']]
            }, {
                type: HostListener,
                args: ['touchmove']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2luZmluaXRlLXNjcm9sbC9pbmZpbml0ZS1zY3JvbGwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvaW5maW5pdGUtc2Nyb2xsL2luZmluaXRlLXNjcm9sbC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUVULFlBQVksRUFDWixZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFPdEU7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQU8sdUJBQXVCO0lBb0VsQyxZQUE2QixLQUFpQjtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBbkU5Qzs7O1dBR0c7UUFDYyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUN0RDs7O1dBR0c7UUFDYSxXQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQzNCOztXQUVHO1FBQ2EsYUFBUSxHQUFHLEdBQUcsQ0FBQztRQUMvQjs7V0FFRztRQUNhLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQUN6Qzs7V0FFRztRQUNjLFlBQU8sR0FBb0IsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUNsRTs7O1dBR0c7UUFDYyxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUF5Q0wsQ0FBQztJQXZDbEQ7OztPQUdHO0lBQ0gsZUFBZTtRQUNiLElBQUksQ0FBQyxPQUFPO2FBQ1QsSUFBSSxDQUNILFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzNCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ2IsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRWpDLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN0QyxDQUFDLENBQUMsRUFDRixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFDcEMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFDN0MsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FDL0I7YUFDQSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFHRCxRQUFRLENBQUMsU0FBaUIsRUFBRSxZQUFvQixFQUFFLFlBQW9CO1FBQ3BFLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQztRQUM1QixNQUFNLENBQUMsR0FBRyxTQUFTLEdBQUcsWUFBWSxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUlELFdBQVcsQ0FBQyxRQUF3QjtRQUNsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBQ2hHLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7UUFDckUsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsSUFBSSxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNqRixNQUFNLGFBQWEsR0FBRyxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxRQUFRLENBQUMsYUFBYSxJQUFJLGdCQUFnQixLQUFLLFFBQVEsQ0FBQyxDQUFDO1FBQ2pILElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxTQUFTLElBQUksYUFBYSxFQUFFO1lBQ3pELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFJRDs7O09BR0c7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLENBQUM7O3FIQTdFVSx1QkFBdUI7eUdBQXZCLHVCQUF1QixtWUM1QnBDLDZCQUNBOzRGRDJCYSx1QkFBdUI7a0JBSm5DLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsV0FBVyxFQUFFLGtDQUFrQztpQkFDaEQ7aUdBTWtCLFNBQVM7c0JBQXpCLE1BQU07Z0JBS1MsTUFBTTtzQkFBckIsS0FBSztnQkFJVSxRQUFRO3NCQUF2QixLQUFLO2dCQUlVLGdCQUFnQjtzQkFBL0IsS0FBSztnQkFnQ04sUUFBUTtzQkFEUCxZQUFZO3VCQUFDLFFBQVEsRUFBRSxDQUFDLHlCQUF5QixFQUFFLDRCQUE0QixFQUFFLDRCQUE0QixDQUFDO2dCQVMvRyxXQUFXO3NCQUZWLFlBQVk7dUJBQUMsV0FBVyxFQUFFLENBQUMsZUFBZSxDQUFDOztzQkFDM0MsWUFBWTt1QkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZmlsdGVyLCBtYXAsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW50ZXJmYWNlIFNjcm9sbCB7XG4gIHk6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgSW5maW5pdGVTY3JvbGxDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBvbmVudCB0aGF0IGRpc3BsYXlzIGFuIGluZmluaXRlIHNjcm9sbC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItaW5maW5pdGUtc2Nyb2xsLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2luZmluaXRlLXNjcm9sbC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEluZmluaXRlU2Nyb2xsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIEV2ZW50IHRoYXQgd2lsbCBiZSB0cmlnZ2VyZWQgd2hlbiB1c2VyIGhhcyBzY3JvbGxlZCB0b1xuICAgKiBib3R0b20gb2YgdGhlIGVsZW1lbnRcbiAgICovXG4gIEBPdXRwdXQoKSBwdWJsaWMgc2Nyb2xsRW5kID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICAvKipcbiAgICogQW4gb2Zmc2V0IGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgZWxlbWVudCB0byB0cmlnZ2VyXG4gICAqIGBzY3JvbGxFbmRgIGV2ZW50XG4gICAqL1xuICBASW5wdXQoKSBwdWJsaWMgb2Zmc2V0ID0gMDtcbiAgLyoqXG4gICAqIFNwZWNpZnkgZGVib3VuY2UgZHVyYXRpb24gaW4gbXNcbiAgICovXG4gIEBJbnB1dCgpIHB1YmxpYyBkZWJvdW5jZSA9IDEwMDtcbiAgLyoqXG4gICAqIElmIHRydWUgdGhlbiBgc2Nyb2xsRW5kYCBldmVudCBzaG91bGQgTk9UIGJlIGVtaXR0ZWRcbiAgICovXG4gIEBJbnB1dCgpIHB1YmxpYyBkaXNhYmxlU2Nyb2xsRW5kID0gZmFsc2U7XG4gIC8qKlxuICAgKiBFbWl0cyBhIG5ldyB2YWx1ZSBvbiBlbGVtZW50IHNjcm9sbCBldmVudFxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBzY3JvbGwkOiBTdWJqZWN0PFNjcm9sbD4gPSBuZXcgU3ViamVjdDxTY3JvbGw+KCk7XG4gIC8qKlxuICAgKiBDb21wbGV0ZXMgb24gY29tcG9uZW50IGRlc3Ryb3kgbGlmZWN5Y2xlIGV2ZW50XG4gICAqIHVzZWQgdG8gdW5zdWJzY3JpYmUgZnJvbSBpbmZpbml0ZSBvYnNlcnZhYmxlc1xuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBuZ1Vuc3Vic2NyaWJlJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byBgc2Nyb2xsJGAgb2JzZXJ2YWJsZSBhbmQgZW1pdCBgc2Nyb2xsRW5kYCBldmVudFxuICAgKiB3aGVuIGVsZW1lbnQgc2Nyb2xsIHBvc2l0aW9uIGlzIGF0IHRoZSBlbmQgb2YgdGhlIGVsZW1lbnRcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnNjcm9sbCRcbiAgICAgIC5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUodGhpcy5kZWJvdW5jZSksXG4gICAgICAgIG1hcCgoc2Nyb2xsKSA9PiB7XG4gICAgICAgICAgY29uc3QgeSA9IHNjcm9sbC55ICsgdGhpcy5vZmZzZXQ7XG5cbiAgICAgICAgICByZXR1cm4geyB5LCBoZWlnaHQ6IHNjcm9sbC5oZWlnaHQgfTtcbiAgICAgICAgfSksXG4gICAgICAgIGZpbHRlcigoKSA9PiAhdGhpcy5kaXNhYmxlU2Nyb2xsRW5kKSxcbiAgICAgICAgZmlsdGVyKChzY3JvbGwpID0+IHNjcm9sbC55ID49IHNjcm9sbC5oZWlnaHQpLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5uZ1Vuc3Vic2NyaWJlJCksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuc2Nyb2xsRW5kLmVtaXQoKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdzY3JvbGwnLCBbJyRldmVudC50YXJnZXQuc2Nyb2xsVG9wJywgJyRldmVudC50YXJnZXQuc2Nyb2xsSGVpZ2h0JywgJyRldmVudC50YXJnZXQub2Zmc2V0SGVpZ2h0J10pXG4gIG9uU2Nyb2xsKHNjcm9sbFRvcDogbnVtYmVyLCBzY3JvbGxoZWlnaHQ6IG51bWJlciwgb2Zmc2V0SGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBoZWlnaHQgPSBzY3JvbGxoZWlnaHQ7XG4gICAgY29uc3QgeSA9IHNjcm9sbFRvcCArIG9mZnNldEhlaWdodDtcbiAgICB0aGlzLnNjcm9sbCQubmV4dCh7IHksIGhlaWdodCB9KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNlb3ZlcicsIFsnJGV2ZW50LnRhcmdldCddKVxuICBASG9zdExpc3RlbmVyKCd0b3VjaG1vdmUnKVxuICBvbk1vdXNlT3ZlcihldlRhcmdldDogRWxlbWVudCB8IG51bGwpIHtcbiAgICBjb25zdCBoYXNTY3JvbGwgPSB0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICBjb25zdCBmaXJzdEVsZW1lbnRDaGlsZCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICBjb25zdCBsYXN0RWxlbWVudENoaWxkID0gZmlyc3RFbGVtZW50Q2hpbGQgJiYgZmlyc3RFbGVtZW50Q2hpbGQubGFzdEVsZW1lbnRDaGlsZDtcbiAgICBjb25zdCBpc0xhc3RFbGVtZW50ID0gZXZUYXJnZXQgJiYgKGxhc3RFbGVtZW50Q2hpbGQgPT09IGV2VGFyZ2V0LnBhcmVudEVsZW1lbnQgfHwgbGFzdEVsZW1lbnRDaGlsZCA9PT0gZXZUYXJnZXQpO1xuICAgIGlmICghdGhpcy5kaXNhYmxlU2Nyb2xsRW5kICYmICFoYXNTY3JvbGwgJiYgaXNMYXN0RWxlbWVudCkge1xuICAgICAgdGhpcy5zY3JvbGwkLm5leHQoeyBoZWlnaHQ6IDAsIHk6IDAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbFJlZjogRWxlbWVudFJlZikge31cblxuICAvKipcbiAgICogdHJpZ2dlciBgbmdVbnN1YnNjcmliZWAgY29tcGxldGUgb25cbiAgICogY29tcG9uZW50IGRlc3Ryb3kgbGlmZWN5Y2xlIGhvb2tcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMubmdVbnN1YnNjcmliZSQubmV4dCgpO1xuICAgIHRoaXMubmdVbnN1YnNjcmliZSQuY29tcGxldGUoKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuIl19