import { Component, ContentChild, Directive, forwardRef, HostBinding, HostListener, Inject, Input, SecurityContext, ViewChild, } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { browserIsMsie, getKeyCode, KEY_CODES } from '@backbase/ui-ang/util';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
import * as i2 from "@backbase/foundation-ang/future";
import * as i3 from "@angular/platform-browser";
import * as i4 from "./bb-rich-text-editor-actions/rich-text-editor-bold-action/rich-text-editor-bold-action.component";
import * as i5 from "./bb-rich-text-editor-actions/rich-text-editor-italic-action/rich-text-editor-italic-action.component";
import * as i6 from "./bb-rich-text-editor-actions/rich-text-editor-underline-action/rich-text-editor-underline-action.component";
import * as i7 from "./bb-rich-text-editor-actions/rich-text-editor-strikethrough-action/rich-text-editor-strikethrough-action.component";
import * as i8 from "./bb-rich-text-editor-actions/rich-text-editor-olist-action/rich-text-editor-olist-action.component";
import * as i9 from "./bb-rich-text-editor-actions/rich-text-editor-ulist-action/rich-text-editor-ulist-action.component";
import * as i10 from "./bb-rich-text-editor-actions/rich-text-editor-paragraph-action/rich-text-editor-paragraph-action.component";
import * as i11 from "./bb-rich-text-editor-actions/rich-text-editor-code-action/rich-text-editor-code-action.component";
import * as i12 from "./bb-rich-text-editor-actions/rich-text-editor-link-action/rich-text-editor-link-action.component";
import * as i13 from "@angular/common";
export class RichTextEditorActionsDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
RichTextEditorActionsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
RichTextEditorActionsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorActionsDirective, selector: "ng-template[bbRichTextEditorActions]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorActionsDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbRichTextEditorActions]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * @name RichTextEditorComponent
 *
 * @description
 * Component that provides you input text with editing.
 *
 * @dynamic (to suppress error with resolving Document type during compilation)
 */
export class RichTextEditorComponent extends InputBaseComponent {
    constructor(cd, domAttributesService, deprecationsService, sanitizer, renderer, document) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.domAttributesService = domAttributesService;
        this.deprecationsService = deprecationsService;
        this.sanitizer = sanitizer;
        this.renderer = renderer;
        this.document = document;
        /**
         * The maxLength for the rich-text-editor component.
         */
        this.maxLength = Infinity;
        /**
         * The minLength for the rich-text-editor component.
         */
        this.minLength = 0;
        /**
         * The placeholder for the rich-text-editor component. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Show/hide message length. Defaults to true;
         */
        this.counter = true;
        /**
         * Whether the rich-text-editor component is readonly.
         */
        this.readonly = false;
        /**
         * Placement of the action tooltip relative to the action button: auto | top | bottom | left | right.
         */
        this.actionsTooltipPlacement = 'auto';
        this.focused = false;
        this.hostRef = this;
        this.contentClassName = 'bb-rich-text-editor__content';
        this.mainAreaClassName = 'bb-rich-text-editor__mainarea';
        this.value = '';
        this.replaceSpaces = (value) => value.replace(/&nbsp;|&#160;/g, ' ');
        this.labelId = this.domAttributesService.generateId();
    }
    onKeyEvent($event) {
        if (this.contentEditable && browserIsMsie()) {
            const action = getKeyCode($event);
            if (($event.ctrlKey || $event.metaKey) && action === KEY_CODES.X) {
                this.callOnChange();
            }
            if (action === KEY_CODES.BACKSPACE || action === KEY_CODES.DELETE) {
                this.callOnChange();
            }
        }
    }
    onPaste() {
        if (this.contentEditable && browserIsMsie()) {
            this.callOnChange();
        }
    }
    onClickEvent($event) {
        var _a, _b, _c, _d;
        if ((_a = this.document.getSelection()) === null || _a === void 0 ? void 0 : _a.rangeCount) {
            this.range = (_b = this.document.getSelection()) === null || _b === void 0 ? void 0 : _b.getRangeAt(0);
        }
        if (($event === null || $event === void 0 ? void 0 : $event.target).closest('button') && ((_c = this.range) === null || _c === void 0 ? void 0 : _c.endOffset) === ((_d = this.range) === null || _d === void 0 ? void 0 : _d.startOffset)) {
            this.restoreCaretPosition(this.contentEditableElement);
            this.callOnChange();
        }
    }
    writeValue(inputValue) {
        if (this.contentEditable) {
            const finalValue = this.parseValue(inputValue || '');
            this.renderer.setProperty(this.contentEditable.nativeElement, 'innerHTML', finalValue);
            super.onValueChange(finalValue);
        }
        this.cd.markForCheck();
    }
    callOnChange() {
        const finalValue = (this.contentEditable && this.parseValue(this.contentEditable.nativeElement.innerHTML)) || '';
        super.onValueChange(finalValue);
    }
    validate(control) {
        if (control) {
            console.warn('[bb-rich-text-editor-ui]: "control" argument in "validate" method is deprecated and will be removed ' +
                'in the next major release');
        }
        const value = this.getMessageText() || null;
        const validators = [Validators.maxLength(this.maxLength), Validators.minLength(this.minLength)];
        if (this.required) {
            validators.push(this.customRequiredValidation.bind(this));
        }
        const compose = Validators.compose(validators);
        return compose && compose({ value });
    }
    labelClick() {
        if (this.contentEditable) {
            this.contentEditable.nativeElement.focus();
        }
    }
    callOnFocus() {
        super.onFocus();
        this.focused = true;
    }
    callOnBlur() {
        setTimeout(() => {
            super.onBlur();
            this.focused = false;
            this.cd.markForCheck();
        });
    }
    getMessageText(content) {
        if (content) {
            console.warn('[bb-rich-text-editor-ui]: "content" argument in "getMessageText" method is deprecated and will ' +
                'be removed in the next major release');
        }
        return this.contentEditableElement.textContent || '';
    }
    showCounter() {
        return this.counter && !!this.maxLength && Number.isFinite(this.maxLength);
    }
    linkAdded() {
        this.callOnChange();
        this.restoreCaretPosition(this.contentEditableElement);
    }
    get contentEditableElement() {
        var _a;
        return (_a = this.contentEditable) === null || _a === void 0 ? void 0 : _a.nativeElement;
    }
    parseValue(value) {
        const isHtml = /<\/?[a-z][\s\S]*>/i.test(value);
        return this.replaceSpaces(isHtml ? this.sanitizer.sanitize(SecurityContext.HTML, value) || '' : value);
    }
    customRequiredValidation() {
        const value = this.getMessageText();
        if (!value || (typeof value === 'string' && !value.trim())) {
            return {
                required: true,
            };
        }
        return null;
    }
    restoreCaretPosition(el) {
        var _a, _b;
        const emptyRange = document.createRange();
        const selection = window.getSelection();
        const isEditorSelection = !!((_b = (_a = this.range) === null || _a === void 0 ? void 0 : _a.endContainer.parentElement) === null || _b === void 0 ? void 0 : _b.closest(`.${this.contentClassName}`));
        emptyRange.selectNodeContents(el);
        emptyRange.collapse(false);
        selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
        if (isEditorSelection) {
            selection === null || selection === void 0 ? void 0 : selection.addRange(this.range);
        }
        else {
            selection === null || selection === void 0 ? void 0 : selection.addRange(emptyRange);
        }
    }
}
RichTextEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DomAttributesService }, { token: i2.DeprecationsService }, { token: i3.DomSanitizer }, { token: i0.Renderer2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
RichTextEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RichTextEditorComponent, selector: "bb-rich-text-editor-ui", inputs: { maxLength: "maxLength", minLength: "minLength", placeholder: "placeholder", counter: "counter", readonly: "readonly", actionsTooltipPlacement: "actionsTooltipPlacement" }, host: { listeners: { "keydown": "onKeyEvent($event)", "keyup": "onKeyEvent($event)", "paste": "onPaste()", "mouseup": "onClickEvent($event)" }, properties: { "class.is-focused": "this.focused" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => RichTextEditorComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => RichTextEditorComponent),
            multi: true,
        },
    ], queries: [{ propertyName: "actions", first: true, predicate: RichTextEditorActionsDirective, descendants: true, static: true }], viewQueries: [{ propertyName: "contentEditable", first: true, predicate: ["contenteditable"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-rich-text-editor\">\n  <label class=\"bb-rich-text-editor__label\" [attr.id]=\"labelId\" for=\"{{ id }}\" *ngIf=\"label\" (click)=\"labelClick()\">{{\n    label\n  }}</label>\n  <div\n    tabindex=\"0\"\n    role=\"textbox\"\n    aria-label=\"bb-rich-text-editor-textbox\"\n    aria-labelledby=\"bb-rich-text-editor-textbox\"\n    class=\"form-control bb-rich-text-editor__actionbar\"\n    [ngClass]=\"{ 'bb-rich-text-editor--disabled': readonly || disabled }\"\n  >\n    <div [ngClass]=\"mainAreaClassName\">\n      <div\n        #contenteditable\n        [ngClass]=\"contentClassName\"\n        [attr.contenteditable]=\"!readonly && !disabled\"\n        [attr.placeholder]=\"placeholder\"\n        [attr.readonly]=\"readonly\"\n        [attr.aria-label]=\"ariaLabel || label\"\n        [attr.aria-labelledby]=\"ariaLabelledby ? ariaLabelledby : label ? labelId : null\"\n        [attr.aria-describedby]=\"ariaDescribedby ? ariaDescribedby : null\"\n        (input)=\"callOnChange()\"\n        (blur)=\"callOnBlur()\"\n        (focus)=\"callOnFocus()\"\n      ></div>\n      <div aria-live=\"assertive\" class=\"sr-only\">\n        <span\n          aria-atomic=\"true\"\n          role=\"log\"\n          [attr.aria-hidden]=\"getMessageText().length <= maxLength - 5\"\n          i18n=\"\n            Char counter Length Warning|String above to reached 'maxLength' characters.\n            @@bb-rich-text-editor-ui.length-warning\"\n          >You typed {{ getMessageText().length }} of {{ maxLength }} allowed characters in this field.</span\n        >\n      </div>\n\n      <ng-container *ngIf=\"actions; else defaultActions\">\n        <div class=\"bb-rich-text-editor-buttons\">\n          <ng-container *ngTemplateOutlet=\"actions.templateRef; context: hostRef\"></ng-container>\n        </div>\n      </ng-container>\n\n      <textarea id=\"{{ id }}\" class=\"bb-rich-text-editor__textarea bb-rich-text-editor__textarea--hidden\"></textarea>\n    </div>\n  </div>\n  <p\n    *ngIf=\"showCounter()\"\n    class=\"bb-rich-text-editor__char-counter\"\n    data-role=\"char-counter\"\n    [ngClass]=\"{ 'text-danger': getMessageText().length > maxLength }\"\n  >\n    <span>{{ getMessageText().length }} / {{ maxLength }}</span>\n    <span\n      *ngIf=\"getMessageText().length > maxLength\"\n      i18n=\"Limit exceeded text error@@bb-rich-text-editor-ui.limitExceeded\"\n      >, limit exceeded</span\n    >\n  </p>\n</div>\n\n<ng-template #defaultActions bbRichTextEditorActions>\n  <bb-rich-text-editor-bold-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-bold-action>\n  <bb-rich-text-editor-italic-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-italic-action>\n  <bb-rich-text-editor-underline-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-underline-action>\n  <bb-rich-text-editor-strikethrough-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  >\n  </bb-rich-text-editor-strikethrough-action>\n  <span role=\"separator\" class=\"bb-rich-text-editor__toolbar-separator\"></span>\n  <bb-rich-text-editor-olist-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-olist-action>\n  <bb-rich-text-editor-ulist-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  >\n  </bb-rich-text-editor-ulist-action>\n  <span role=\"separator\" class=\"bb-rich-text-editor__toolbar-separator\"></span>\n  <bb-rich-text-editor-paragraph-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-paragraph-action>\n  <bb-rich-text-editor-code-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [disabled]=\"disabled || readonly\"\n  ></bb-rich-text-editor-code-action>\n  <bb-rich-text-editor-link-action\n    [actionsTooltipPlacement]=\"actionsTooltipPlacement\"\n    [contentClassNames]=\"[contentClassName, mainAreaClassName]\"\n    [disabled]=\"disabled || readonly\"\n    (linkAdded)=\"linkAdded()\"\n  ></bb-rich-text-editor-link-action>\n</ng-template>\n", components: [{ type: i4.RichTextEditorBoldActionComponent, selector: "bb-rich-text-editor-bold-action" }, { type: i5.RichTextEditorItalicActionComponent, selector: "bb-rich-text-editor-italic-action" }, { type: i6.RichTextEditorUnderlineActionComponent, selector: "bb-rich-text-editor-underline-action" }, { type: i7.RichTextEditorStrikethroughActionComponent, selector: "bb-rich-text-editor-strikethrough-action" }, { type: i8.RichTextEditorOlistActionComponent, selector: "bb-rich-text-editor-olist-action" }, { type: i9.RichTextEditorUlistActionComponent, selector: "bb-rich-text-editor-ulist-action" }, { type: i10.RichTextEditorParagraphActionComponent, selector: "bb-rich-text-editor-paragraph-action" }, { type: i11.RichTextEditorCodeActionComponent, selector: "bb-rich-text-editor-code-action" }, { type: i12.RichTextEditorLinkActionComponent, selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }], directives: [{ type: i13.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i13.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i13.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: RichTextEditorActionsDirective, selector: "ng-template[bbRichTextEditorActions]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RichTextEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-rich-text-editor-ui',
                    templateUrl: './rich-text-editor.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RichTextEditorComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => RichTextEditorComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DomAttributesService }, { type: i2.DeprecationsService }, { type: i3.DomSanitizer }, { type: i0.Renderer2 }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], counter: [{
                type: Input
            }], readonly: [{
                type: Input
            }], actionsTooltipPlacement: [{
                type: Input
            }], actions: [{
                type: ContentChild,
                args: [RichTextEditorActionsDirective, { static: true }]
            }], contentEditable: [{
                type: ViewChild,
                args: ['contenteditable', { static: true }]
            }], focused: [{
                type: HostBinding,
                args: ['class.is-focused']
            }], onKeyEvent: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }, {
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onPaste: [{
                type: HostListener,
                args: ['paste']
            }], onClickEvent: [{
                type: HostListener,
                args: ['mouseup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,