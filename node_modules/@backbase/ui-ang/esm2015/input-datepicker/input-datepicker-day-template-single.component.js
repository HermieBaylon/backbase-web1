import { ChangeDetectionStrategy, Component, Input, HostListener, Output, EventEmitter, } from '@angular/core';
import { NgbDateParserFormatter } from '@ng-bootstrap/ng-bootstrap';
import { NgbDateLocaleParserFormatter } from './input-datepicker-formatter';
import { DatePipe } from '@angular/common';
import { KEY_CODES } from '@backbase/ui-ang/util';
import { BrowserService, NAVIGATOR_TOKEN, navigatorFactory } from '@backbase/ui-ang/services';
import * as i0 from "@angular/core";
import * as i1 from "./input-datepicker-formatter";
import * as i2 from "@backbase/ui-ang/services";
import * as i3 from "@angular/common";
/* eslint-disable */
export var Key;
(function (Key) {
    Key[Key["ArrowLeft"] = 37] = "ArrowLeft";
    Key[Key["ArrowUp"] = 38] = "ArrowUp";
    Key[Key["ArrowRight"] = 39] = "ArrowRight";
    Key[Key["ArrowDown"] = 40] = "ArrowDown";
})(Key || (Key = {}));
export class InputDatepickerDayTemplateSingleComponent {
    constructor(formatterHelper, browserService) {
        this.formatterHelper = formatterHelper;
        this.browserService = browserService;
        /**
         * Indicates whether the date is selected
         */
        this.selected = false;
        /**
         * When true the date is rendered as disabled
         */
        this.disabled = false;
        /**
         * Hovered date by a user
         */
        this.hoveredDate = null;
        /**
         * Event to trigger on date hover
         */
        this.hovered = new EventEmitter();
        /**
         * Indicates if the date displayed as greyed out
         */
        this.isTextMuted = false;
        /**
         * Indicates if the date is hovered the range
         */
        this.isHovered = false;
        this.format = (date) => this.formatterHelper.format(date);
        this.isIE = this.browserService.browserIsMSIE();
    }
    ngOnChanges(changes) {
        var _a, _b;
        if ((changes === null || changes === void 0 ? void 0 : changes.selected) || (changes === null || changes === void 0 ? void 0 : changes.disabled) || (changes === null || changes === void 0 ? void 0 : changes.date) || (changes === null || changes === void 0 ? void 0 : changes.currentMonth)) {
            this.isTextMuted = !this.selected && (this.disabled || ((_a = this.date) === null || _a === void 0 ? void 0 : _a.month) !== +this.currentMonth);
        }
        this.isHovered = (_b = this.date) === null || _b === void 0 ? void 0 : _b.equals(this.hoveredDate);
    }
    /**
     *
     * @description
     * Handle mouseover. Emit the hovered date with null.
     *
     */
    onMouseOut() {
        this.hovered.emit({ date: null, isSelecting: false });
    }
    /**
     *
     * @description
     * Handle mouseover. Emit the hovered date with date.
     *
     */
    onMouseOver() {
        this.hovered.emit({ date: this.date, isSelecting: true });
    }
    /**
     * @description
     * Keypress handler
     *
     * @param evt
     * @param curMonth
     * @param curDay
     * @param date
     */
    onKeyUp(event) {
        const day = event.target.textContent;
        const matchKey = this.isIE
            ? Object.values(Key).includes(event === null || event === void 0 ? void 0 : event.keyCode)
            : InputDatepickerDayTemplateSingleComponent.hangledKeyCodes.includes(event === null || event === void 0 ? void 0 : event.key);
        if (Number(day) === this.date.day && Number(this.currentMonth) === this.date.month && matchKey) {
            this.hovered.emit({ date: this.date, isSelecting: true });
        }
    }
}
InputDatepickerDayTemplateSingleComponent.hangledKeyCodes = [KEY_CODES.LEFT, KEY_CODES.UP, KEY_CODES.RIGHT, KEY_CODES.DOWN];
InputDatepickerDayTemplateSingleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerDayTemplateSingleComponent, deps: [{ token: i1.NgbDateLocaleParserFormatter }, { token: i2.BrowserService }], target: i0.ɵɵFactoryTarget.Component });
InputDatepickerDayTemplateSingleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputDatepickerDayTemplateSingleComponent, selector: "bb-input-datepicker-single-day-template-ui", inputs: { date: "date", selected: "selected", disabled: "disabled", currentMonth: "currentMonth", hoveredDate: "hoveredDate" }, outputs: { hovered: "hovered" }, host: { listeners: { "mouseout": "onMouseOut()", "mouseover": "onMouseOver()", "document:keyup": "onKeyUp($event)" } }, providers: [
        DatePipe,
        NgbDateLocaleParserFormatter,
        {
            provide: NgbDateParserFormatter,
            useExisting: NgbDateLocaleParserFormatter,
        },
        BrowserService,
        { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory },
    ], usesOnChanges: true, ngImport: i0, template: "<time\n  class=\"custom-day text-center bb-input-datepicker__single-day\"\n  [ngClass]=\"{\n    'is-selected': selected,\n    'text-muted': isTextMuted\n  }\"\n  [attr.data-role]=\"'calendar-date-item'\"\n  [dateTime]=\"format(date)\"\n>\n  {{ date?.day }}\n</time>\n", directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerDayTemplateSingleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-datepicker-single-day-template-ui',
                    templateUrl: './input-datepicker-day-template-single.component.html',
                    providers: [
                        DatePipe,
                        NgbDateLocaleParserFormatter,
                        {
                            provide: NgbDateParserFormatter,
                            useExisting: NgbDateLocaleParserFormatter,
                        },
                        BrowserService,
                        { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.NgbDateLocaleParserFormatter }, { type: i2.BrowserService }]; }, propDecorators: { date: [{
                type: Input
            }], selected: [{
                type: Input
            }], disabled: [{
                type: Input
            }], currentMonth: [{
                type: Input
            }], hoveredDate: [{
                type: Input
            }], hovered: [{
                type: Output
            }], onMouseOut: [{
                type: HostListener,
                args: ['mouseout']
            }], onMouseOver: [{
                type: HostListener,
                args: ['mouseover']
            }], onKeyUp: [{
                type: HostListener,
                args: ['document:keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,