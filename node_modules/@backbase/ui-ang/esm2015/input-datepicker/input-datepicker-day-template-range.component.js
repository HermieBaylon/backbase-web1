import { ChangeDetectionStrategy, Component, EventEmitter, HostListener, Input, Output, } from '@angular/core';
import { NgbDate, NgbDateParserFormatter } from '@ng-bootstrap/ng-bootstrap';
import { NgbDateLocaleParserFormatter } from './input-datepicker-formatter';
import { DatePipe } from '@angular/common';
import { KEY_CODES } from '@backbase/ui-ang/util';
import { BrowserService, NAVIGATOR_TOKEN, navigatorFactory } from '@backbase/ui-ang/services';
import * as i0 from "@angular/core";
import * as i1 from "./input-datepicker-formatter";
import * as i2 from "@backbase/ui-ang/services";
import * as i3 from "@angular/common";
/* eslint-disable */
export var Key;
(function (Key) {
    Key[Key["ArrowLeft"] = 37] = "ArrowLeft";
    Key[Key["ArrowUp"] = 38] = "ArrowUp";
    Key[Key["ArrowRight"] = 39] = "ArrowRight";
    Key[Key["ArrowDown"] = 40] = "ArrowDown";
})(Key || (Key = {}));
export class InputDatepickerDayTemplateRangeComponent {
    constructor(formatterHelper, browserService) {
        this.formatterHelper = formatterHelper;
        this.browserService = browserService;
        /**
         * When true the date is rendered as disabled
         */
        this.disabled = false;
        /**
         * Selected "from" date
         */
        this.fromDate = null;
        /**
         * Selected "to" date
         */
        this.toDate = null;
        /**
         * If "true" the datepicker is displayed with two input fields for "from" and "to" dates
         */
        this.splitRange = false;
        /**
         * "true" when "splitRange" is "true" and the parent datepicker belongs to
         * second datepicker input (the one for "to" date)
         */
        this.toDateDatepicker = false;
        /**
         * Hovered date by a user
         */
        this.hoveredDate = null;
        /**
         * Date range
         */
        this.rangeSelect = new EventEmitter();
        /**
         * Event to trigger on date hover
         */
        this.hovered = new EventEmitter();
        /**
         * Prevent keypress to be called on toggle button enter
         */
        this.firstKey = true;
        /**
         * Indicates if the date is between the from-date and the hovered date
         */
        this.isWithinRangeHover = false;
        /**
         * Indicates if the date is between the from-date and the to-date date
         */
        this.isWithinSelectedRange = false;
        /**
         * Indicates if the date displayed as greyed out
         */
        this.isTextMuted = false;
        /**
         * Indicates if the date is hovered the range
         */
        this.isHovered = false;
        /**
         * Indicates if the date is the from-date of the range
         */
        this.isFrom = false;
        /**
         * Indicates if the the date is the to-date of the range
         */
        this.isTo = false;
        /**
         * Formatted date
         */
        this.formattedDate = '';
        this.isIE = this.browserService.browserIsMSIE();
    }
    get withinHoverRangeSingle() {
        return (!this.toDate &&
            (this.date.after(this.fromDate) || this.date.equals(this.fromDate)) &&
            (this.date.before(this.hoveredDate) || this.date.equals(this.hoveredDate)));
    }
    get withinHoverRangeSplitTo() {
        return ((this.date.before(this.hoveredDate) || this.date.equals(this.hoveredDate)) &&
            (this.date.after(this.toDate) ||
                this.date.equals(this.toDate) ||
                (this.date.before(this.toDate) && this.date.after(this.fromDate))) &&
            this.toDateDatepicker);
    }
    get withinHoverRangeSplitFrom() {
        return ((this.date.after(this.hoveredDate) || this.date.equals(this.hoveredDate)) &&
            this.date.before(this.toDate) &&
            !this.toDateDatepicker &&
            this.toDate);
    }
    /* eslint-disable complexity */
    ngOnChanges(changes) {
        var _a, _b, _c, _d;
        if (changes === null || changes === void 0 ? void 0 : changes.hoveredDate) {
            this.isWithinRangeHover = !!(this.isValidRange() &&
                this.date &&
                this.hoveredDate &&
                (((this.withinHoverRangeSplitTo || this.withinHoverRangeSplitFrom) && this.splitRange) ||
                    (this.withinHoverRangeSingle && this.toDateDatepicker && this.splitRange) ||
                    (this.withinHoverRangeSingle && !this.splitRange)));
            this.isHovered = (_a = this.date) === null || _a === void 0 ? void 0 : _a.equals(this.hoveredDate);
        }
        if ((changes === null || changes === void 0 ? void 0 : changes.fromDate) || (changes === null || changes === void 0 ? void 0 : changes.toDate) || (changes === null || changes === void 0 ? void 0 : changes.date)) {
            this.isWithinSelectedRange = this.date && this.date.before(this.toDate) && this.date.after(this.fromDate);
            this.isTo = (_b = this.date) === null || _b === void 0 ? void 0 : _b.equals(this.toDate);
            this.formattedDate = this.formatterHelper.format(this.date);
            this.isFrom = (_c = this.date) === null || _c === void 0 ? void 0 : _c.equals(this.fromDate);
        }
        this.isTextMuted =
            !this.isWithinRangeHover &&
                !this.isWithinSelectedRange &&
                !this.isFrom &&
                !this.isTo &&
                (this.disabled || ((_d = this.date) === null || _d === void 0 ? void 0 : _d.month) !== +this.currentMonth);
    }
    /**
     *
     * @description
     * Handle mouseover. Emit the hovered date with null.
     *
     */
    onMouseOut() {
        this.hovered.emit({ date: null, isTo: this.toDateDatepicker, isSelecting: false });
    }
    /**
     *
     * @description
     * Handle mouseover. Emit the hovered date with date.
     *
     */
    onMouseOver() {
        this.hovered.emit({ date: this.date, isTo: this.toDateDatepicker, isSelecting: true });
    }
    /**
     * @description
     * Keypress handler
     *
     * @param evt
     * @param curMonth
     * @param curDay
     * @param date
     */
    onKeyUp(event) {
        const day = event.target.textContent;
        const matchKey = this.isIE
            ? Object.values(Key).includes(event === null || event === void 0 ? void 0 : event.keyCode)
            : InputDatepickerDayTemplateRangeComponent.hangledKeyCodes.includes(event === null || event === void 0 ? void 0 : event.key);
        if (Number(day) === this.date.day && Number(this.currentMonth) === this.date.month && matchKey) {
            this.hovered.emit({ date: this.date, isTo: this.toDateDatepicker, isSelecting: true });
        }
    }
    isValidRange() {
        return (!this.fromDate ||
            !this.toDate ||
            new NgbDate(this.fromDate.year, this.fromDate.month, this.fromDate.day).before(this.toDate));
    }
}
InputDatepickerDayTemplateRangeComponent.hangledKeyCodes = [KEY_CODES.LEFT, KEY_CODES.UP, KEY_CODES.RIGHT, KEY_CODES.DOWN];
InputDatepickerDayTemplateRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerDayTemplateRangeComponent, deps: [{ token: i1.NgbDateLocaleParserFormatter }, { token: i2.BrowserService }], target: i0.ɵɵFactoryTarget.Component });
InputDatepickerDayTemplateRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputDatepickerDayTemplateRangeComponent, selector: "bb-input-datepicker-range-day-template-ui", inputs: { date: "date", disabled: "disabled", currentMonth: "currentMonth", fromDate: "fromDate", toDate: "toDate", splitRange: "splitRange", toDateDatepicker: "toDateDatepicker", hoveredDate: "hoveredDate" }, outputs: { rangeSelect: "rangeSelect", hovered: "hovered" }, host: { listeners: { "mouseout": "onMouseOut()", "mouseover": "onMouseOver()", "document:keyup": "onKeyUp($event)" } }, providers: [
        DatePipe,
        NgbDateLocaleParserFormatter,
        {
            provide: NgbDateParserFormatter,
            useExisting: NgbDateLocaleParserFormatter,
        },
        BrowserService,
        { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory },
    ], usesOnChanges: true, ngImport: i0, template: "<time\n  class=\"custom-day text-center bb-input-datepicker__custom-day\"\n  [ngClass]=\"{\n    'is-range-selected': isWithinSelectedRange,\n    'is-faded': isWithinRangeHover,\n    'is-faded-from-date': isWithinRangeHover && !toDateDatepicker && splitRange,\n    'is-hovered': isHovered,\n    'text-muted': isTextMuted,\n    'from-date': isFrom,\n    'to-date': isTo\n  }\"\n  [attr.data-role]=\"'calendar-date-item'\"\n  [dateTime]=\"formattedDate\"\n>\n  {{ date?.day }}\n</time>\n", directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputDatepickerDayTemplateRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-datepicker-range-day-template-ui',
                    templateUrl: './input-datepicker-day-template-range.component.html',
                    providers: [
                        DatePipe,
                        NgbDateLocaleParserFormatter,
                        {
                            provide: NgbDateParserFormatter,
                            useExisting: NgbDateLocaleParserFormatter,
                        },
                        BrowserService,
                        { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.NgbDateLocaleParserFormatter }, { type: i2.BrowserService }]; }, propDecorators: { date: [{
                type: Input
            }], disabled: [{
                type: Input
            }], currentMonth: [{
                type: Input
            }], fromDate: [{
                type: Input
            }], toDate: [{
                type: Input
            }], splitRange: [{
                type: Input
            }], toDateDatepicker: [{
                type: Input
            }], hoveredDate: [{
                type: Input
            }], rangeSelect: [{
                type: Output
            }], hovered: [{
                type: Output
            }], onMouseOut: [{
                type: HostListener,
                args: ['mouseout']
            }], onMouseOver: [{
                type: HostListener,
                args: ['mouseover']
            }], onKeyUp: [{
                type: HostListener,
                args: ['document:keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,