import { Component, Input, Output, EventEmitter } from '@angular/core';
import { NgbPaginationConfig } from '@ng-bootstrap/ng-bootstrap';
import * as i0 from "@angular/core";
import * as i1 from "@ng-bootstrap/ng-bootstrap";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@angular/common";
/**
 * @name PaginatorComponent
 *
 * @description
 * A component that displays page numbers and allows to customize them in several ways.
 */
export class PaginatorComponent {
    constructor() {
        /**
         * The current page.
         *
         * bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed.  Correct inputs by adding 1.
         */
        this.page = 1;
        /**
         * If `true`, the "First" and "Last" page links are shown.
         */
        this.boundaryLinks = false;
        /**
         * If `true`, the "Next" and "Previous" page links are shown.
         */
        this.directionLinks = false;
        /**
         * The number of items in your paginated collection.
         *
         * Note, that this is not the number of pages. Page numbers are calculated dynamically based on
         * `totalItems` and `itemsPerPage`.
         */
        this.totalItems = 0;
        /**
         * The number of items per page.
         */
        this.itemsPerPage = 10;
        /**
         * The maximum number of pages to display.
         */
        this.maxNavPages = 5;
        /**
         * An event fired when the page is changed. Will fire only if collection size is set and all values are valid.
         *
         * Event payload is the number of the newly selected page.
         *
         * bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed. Correct outputs by subtracting 1.
         */
        this.pageChange = new EventEmitter();
    }
    onPageChange(page) {
        this.pageChange.emit(page - 1);
    }
}
PaginatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaginatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaginatorComponent, selector: "bb-pagination-ui", inputs: { page: "page", boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", totalItems: "totalItems", itemsPerPage: "itemsPerPage", maxNavPages: "maxNavPages" }, outputs: { pageChange: "pageChange" }, providers: [NgbPaginationConfig], ngImport: i0, template: "<ngb-pagination\n  (pageChange)=\"onPageChange($event)\"\n  *ngIf=\"+itemsPerPage < +totalItems\"\n  [boundaryLinks]=\"boundaryLinks\"\n  [collectionSize]=\"totalItems\"\n  [directionLinks]=\"directionLinks\"\n  [maxSize]=\"maxNavPages\"\n  [pageSize]=\"itemsPerPage\"\n  [page]=\"page + 1\"\n  [rotate]=\"true\"\n  class=\"d-flex justify-content-center bb-pagination\"\n>\n  <ng-template ngbPaginationNumber let-page>\n    <span aria-hidden=\"true\">{{ page }}</span>\n    <span class=\"sr-only\" i18n=\"Link Label for Screen Reader@@bb-pagination-ui.pagination.link.number\"\n      >page {{ page }}</span\n    >\n  </ng-template>\n  <ng-template ngbPaginationFirst>\n    <bb-icon-ui data-role=\"pagination-icon-first\" size=\"md\" name=\"first-page\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationPrevious>\n    <bb-icon-ui data-role=\"pagination-icon-previous\" size=\"md\" name=\"chevron-left\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationNext>\n    <bb-icon-ui data-role=\"pagination-icon-next\" size=\"md\" name=\"chevron-right\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationLast>\n    <bb-icon-ui data-role=\"pagination-icon-last\" size=\"md\" name=\"last-page\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationEllipsis>\n    <span class=\"bb-pagination__ellipsis\" data-role=\"pagination-ellipsis\">...</span>\n  </ng-template>\n</ngb-pagination>\n", components: [{ type: i1.NgbPagination, selector: "ngb-pagination", inputs: ["page", "disabled", "boundaryLinks", "directionLinks", "ellipses", "maxSize", "pageSize", "rotate", "size", "collectionSize"], outputs: ["pageChange"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgbPaginationNumber, selector: "ng-template[ngbPaginationNumber]" }, { type: i1.NgbPaginationFirst, selector: "ng-template[ngbPaginationFirst]" }, { type: i1.NgbPaginationPrevious, selector: "ng-template[ngbPaginationPrevious]" }, { type: i1.NgbPaginationNext, selector: "ng-template[ngbPaginationNext]" }, { type: i1.NgbPaginationLast, selector: "ng-template[ngbPaginationLast]" }, { type: i1.NgbPaginationEllipsis, selector: "ng-template[ngbPaginationEllipsis]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaginatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-pagination-ui',
                    templateUrl: './pagination.component.html',
                    providers: [NgbPaginationConfig],
                }]
        }], propDecorators: { page: [{
                type: Input
            }], boundaryLinks: [{
                type: Input
            }], directionLinks: [{
                type: Input
            }], totalItems: [{
                type: Input
            }], itemsPerPage: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], pageChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7O0FBRWpFOzs7OztHQUtHO0FBTUgsTUFBTSxPQUFPLGtCQUFrQjtJQUwvQjtRQU1FOzs7O1dBSUc7UUFDTSxTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCOztXQUVHO1FBQ00sa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDL0I7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUNoQzs7Ozs7V0FLRztRQUNNLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDeEI7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUMzQjs7V0FFRztRQUNNLGdCQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCOzs7Ozs7V0FNRztRQUNPLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0tBS25EO0lBSEMsWUFBWSxDQUFDLElBQVk7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O2dIQXpDVSxrQkFBa0I7b0dBQWxCLGtCQUFrQixrUUFGbEIsQ0FBQyxtQkFBbUIsQ0FBQywwQkNabEMsMjRDQWtDQTs0RkRwQmEsa0JBQWtCO2tCQUw5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFdBQVcsRUFBRSw2QkFBNkI7b0JBQzFDLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO2lCQUNqQzs4QkFPVSxJQUFJO3NCQUFaLEtBQUs7Z0JBSUcsYUFBYTtzQkFBckIsS0FBSztnQkFJRyxjQUFjO3NCQUF0QixLQUFLO2dCQU9HLFVBQVU7c0JBQWxCLEtBQUs7Z0JBSUcsWUFBWTtzQkFBcEIsS0FBSztnQkFJRyxXQUFXO3NCQUFuQixLQUFLO2dCQVFJLFVBQVU7c0JBQW5CLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdiUGFnaW5hdGlvbkNvbmZpZyB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcblxuLyoqXG4gKiBAbmFtZSBQYWdpbmF0b3JDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgY29tcG9uZW50IHRoYXQgZGlzcGxheXMgcGFnZSBudW1iZXJzIGFuZCBhbGxvd3MgdG8gY3VzdG9taXplIHRoZW0gaW4gc2V2ZXJhbCB3YXlzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1wYWdpbmF0aW9uLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BhZ2luYXRpb24uY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtOZ2JQYWdpbmF0aW9uQ29uZmlnXSxcbn0pXG5leHBvcnQgY2xhc3MgUGFnaW5hdG9yQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHBhZ2UuXG4gICAqXG4gICAqIGJiLXBhZ2luYXRvci11aSBpcyAwLWluZGV4ZWQsIGJ1dCBuZ2ItcGFnaW5hdGlvbiBpcyAxLWluZGV4ZWQuICBDb3JyZWN0IGlucHV0cyBieSBhZGRpbmcgMS5cbiAgICovXG4gIEBJbnB1dCgpIHBhZ2UgPSAxO1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgXCJGaXJzdFwiIGFuZCBcIkxhc3RcIiBwYWdlIGxpbmtzIGFyZSBzaG93bi5cbiAgICovXG4gIEBJbnB1dCgpIGJvdW5kYXJ5TGlua3MgPSBmYWxzZTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIFwiTmV4dFwiIGFuZCBcIlByZXZpb3VzXCIgcGFnZSBsaW5rcyBhcmUgc2hvd24uXG4gICAqL1xuICBASW5wdXQoKSBkaXJlY3Rpb25MaW5rcyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBpdGVtcyBpbiB5b3VyIHBhZ2luYXRlZCBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBOb3RlLCB0aGF0IHRoaXMgaXMgbm90IHRoZSBudW1iZXIgb2YgcGFnZXMuIFBhZ2UgbnVtYmVycyBhcmUgY2FsY3VsYXRlZCBkeW5hbWljYWxseSBiYXNlZCBvblxuICAgKiBgdG90YWxJdGVtc2AgYW5kIGBpdGVtc1BlclBhZ2VgLlxuICAgKi9cbiAgQElucHV0KCkgdG90YWxJdGVtcyA9IDA7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGl0ZW1zIHBlciBwYWdlLlxuICAgKi9cbiAgQElucHV0KCkgaXRlbXNQZXJQYWdlID0gMTA7XG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcGFnZXMgdG8gZGlzcGxheS5cbiAgICovXG4gIEBJbnB1dCgpIG1heE5hdlBhZ2VzID0gNTtcbiAgLyoqXG4gICAqIEFuIGV2ZW50IGZpcmVkIHdoZW4gdGhlIHBhZ2UgaXMgY2hhbmdlZC4gV2lsbCBmaXJlIG9ubHkgaWYgY29sbGVjdGlvbiBzaXplIGlzIHNldCBhbmQgYWxsIHZhbHVlcyBhcmUgdmFsaWQuXG4gICAqXG4gICAqIEV2ZW50IHBheWxvYWQgaXMgdGhlIG51bWJlciBvZiB0aGUgbmV3bHkgc2VsZWN0ZWQgcGFnZS5cbiAgICpcbiAgICogYmItcGFnaW5hdG9yLXVpIGlzIDAtaW5kZXhlZCwgYnV0IG5nYi1wYWdpbmF0aW9uIGlzIDEtaW5kZXhlZC4gQ29ycmVjdCBvdXRwdXRzIGJ5IHN1YnRyYWN0aW5nIDEuXG4gICAqL1xuICBAT3V0cHV0KCkgcGFnZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gIG9uUGFnZUNoYW5nZShwYWdlOiBudW1iZXIpIHtcbiAgICB0aGlzLnBhZ2VDaGFuZ2UuZW1pdChwYWdlIC0gMSk7XG4gIH1cbn1cbiIsIjxuZ2ItcGFnaW5hdGlvblxuICAocGFnZUNoYW5nZSk9XCJvblBhZ2VDaGFuZ2UoJGV2ZW50KVwiXG4gICpuZ0lmPVwiK2l0ZW1zUGVyUGFnZSA8ICt0b3RhbEl0ZW1zXCJcbiAgW2JvdW5kYXJ5TGlua3NdPVwiYm91bmRhcnlMaW5rc1wiXG4gIFtjb2xsZWN0aW9uU2l6ZV09XCJ0b3RhbEl0ZW1zXCJcbiAgW2RpcmVjdGlvbkxpbmtzXT1cImRpcmVjdGlvbkxpbmtzXCJcbiAgW21heFNpemVdPVwibWF4TmF2UGFnZXNcIlxuICBbcGFnZVNpemVdPVwiaXRlbXNQZXJQYWdlXCJcbiAgW3BhZ2VdPVwicGFnZSArIDFcIlxuICBbcm90YXRlXT1cInRydWVcIlxuICBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGJiLXBhZ2luYXRpb25cIlxuPlxuICA8bmctdGVtcGxhdGUgbmdiUGFnaW5hdGlvbk51bWJlciBsZXQtcGFnZT5cbiAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj57eyBwYWdlIH19PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPVwic3Itb25seVwiIGkxOG49XCJMaW5rIExhYmVsIGZvciBTY3JlZW4gUmVhZGVyQEBiYi1wYWdpbmF0aW9uLXVpLnBhZ2luYXRpb24ubGluay5udW1iZXJcIlxuICAgICAgPnBhZ2Uge3sgcGFnZSB9fTwvc3BhblxuICAgID5cbiAgPC9uZy10ZW1wbGF0ZT5cbiAgPG5nLXRlbXBsYXRlIG5nYlBhZ2luYXRpb25GaXJzdD5cbiAgICA8YmItaWNvbi11aSBkYXRhLXJvbGU9XCJwYWdpbmF0aW9uLWljb24tZmlyc3RcIiBzaXplPVwibWRcIiBuYW1lPVwiZmlyc3QtcGFnZVwiPjwvYmItaWNvbi11aT5cbiAgPC9uZy10ZW1wbGF0ZT5cbiAgPG5nLXRlbXBsYXRlIG5nYlBhZ2luYXRpb25QcmV2aW91cz5cbiAgICA8YmItaWNvbi11aSBkYXRhLXJvbGU9XCJwYWdpbmF0aW9uLWljb24tcHJldmlvdXNcIiBzaXplPVwibWRcIiBuYW1lPVwiY2hldnJvbi1sZWZ0XCI+PC9iYi1pY29uLXVpPlxuICA8L25nLXRlbXBsYXRlPlxuICA8bmctdGVtcGxhdGUgbmdiUGFnaW5hdGlvbk5leHQ+XG4gICAgPGJiLWljb24tdWkgZGF0YS1yb2xlPVwicGFnaW5hdGlvbi1pY29uLW5leHRcIiBzaXplPVwibWRcIiBuYW1lPVwiY2hldnJvbi1yaWdodFwiPjwvYmItaWNvbi11aT5cbiAgPC9uZy10ZW1wbGF0ZT5cbiAgPG5nLXRlbXBsYXRlIG5nYlBhZ2luYXRpb25MYXN0PlxuICAgIDxiYi1pY29uLXVpIGRhdGEtcm9sZT1cInBhZ2luYXRpb24taWNvbi1sYXN0XCIgc2l6ZT1cIm1kXCIgbmFtZT1cImxhc3QtcGFnZVwiPjwvYmItaWNvbi11aT5cbiAgPC9uZy10ZW1wbGF0ZT5cbiAgPG5nLXRlbXBsYXRlIG5nYlBhZ2luYXRpb25FbGxpcHNpcz5cbiAgICA8c3BhbiBjbGFzcz1cImJiLXBhZ2luYXRpb25fX2VsbGlwc2lzXCIgZGF0YS1yb2xlPVwicGFnaW5hdGlvbi1lbGxpcHNpc1wiPi4uLjwvc3Bhbj5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvbmdiLXBhZ2luYXRpb24+XG4iXX0=