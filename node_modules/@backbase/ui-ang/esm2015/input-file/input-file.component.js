import { ChangeDetectionStrategy, Component, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/button";
import * as i4 from "@angular/common";
/**
 * @name InputFileComponent
 *
 * @description
 * Component that displays a file input button.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 */
export class InputFileComponent extends InputBaseComponent {
    constructor(cd, deprecationsService) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        /**
         * Accepted file formats. Defaults to any ('*');
         */
        this.accept = '*';
        /**
         * Multiple/single file upload flag. Defaults to false;
         */
        this.multiple = false;
        /**
         * Button color. Defaults to 'link';
         */
        this.color = 'link';
        /**
         * This Boolean attribute lets you specify that the button should have input focus when the page
         * loads, unless the user overrides it, for example by typing in a different control. Only one
         * form-associated element in a document can have this attribute specified. Defaults to false.
         */
        this.autofocus = false;
        /**
         * Size of the button. Defaults to 'md'.
         */
        this.buttonSize = 'md';
        /**
         * Button icon name. Defaults to 'attachment';
         */
        this.iconName = 'attachment';
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.maxSizeInMb && Math.sign(Number(this.maxSizeInMb)) !== 1) {
            this.maxSizeInMb = undefined;
            console.warn('[bb-input-file-ui]: invalid maximum file size, falling back to infinite');
        }
    }
    onValueChange(input) {
        var _a;
        const files = ((_a = input.files) === null || _a === void 0 ? void 0 : _a.length) && [...input.files];
        if (Array.isArray(files)) {
            this.value = { files };
            this.onChange(this.value);
        }
    }
    validate() {
        let isMaxSizeExceeded = false;
        const value = this.value && this.value.files;
        if (Array.isArray(value) && this.maxSizeInMb) {
            const maxSizeInBytes = Number(this.maxSizeInMb) * 1024 * 1024;
            isMaxSizeExceeded = value.some((file) => file.size > maxSizeInBytes);
        }
        return isMaxSizeExceeded ? { maxFileSizeExceeded: true } : null;
    }
}
InputFileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputFileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputFileComponent, selector: "bb-input-file-ui", inputs: { accept: "accept", maxSizeInMb: "maxSizeInMb", multiple: "multiple", color: "color", autofocus: "autofocus", buttonText: "buttonText", buttonSize: "buttonSize", iconName: "iconName" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputFileComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => InputFileComponent),
            multi: true,
        },
    ], usesInheritance: true, ngImport: i0, template: "<button\n  bbButton\n  data-role=\"file-input-button\"\n  class=\"bb-block bb-block--xs\"\n  [autofocus]=\"autofocus\"\n  [color]=\"color\"\n  [buttonSize]=\"buttonSize\"\n  (focus)=\"onFocus($event)\"\n  (click)=\"fileInput.click()\"\n  [disabled]=\"disabled\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.role]=\"role\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [attr.aria-activedescendant]=\"ariaActivedescendant\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n>\n  <bb-icon-ui cropped=\"true\" [name]=\"iconName\"></bb-icon-ui>\n  <span *ngIf=\"buttonText; else attachFile\">{{ buttonText }}</span>\n  <ng-template #attachFile i18n=\"Attach file@@fileInputButton.text\">Attach file</ng-template>\n  <input\n    [accept]=\"accept\"\n    [multiple]=\"multiple\"\n    hidden\n    data-role=\"file-input\"\n    type=\"file\"\n    #fileInput\n    (change)=\"onValueChange(fileInput)\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n  />\n</button>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputFileComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-file-ui',
                    templateUrl: './input-file.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputFileComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => InputFileComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }]; }, propDecorators: { accept: [{
                type: Input
            }], maxSizeInMb: [{
                type: Input
            }], multiple: [{
                type: Input
            }], color: [{
                type: Input
            }], autofocus: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], buttonSize: [{
                type: Input
            }], iconName: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,