import { Component, EventEmitter, forwardRef, Input, Output, ViewChild, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { defaultSize, InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@backbase/ui-ang/services";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/button";
import * as i6 from "@angular/forms";
import * as i7 from "@ng-bootstrap/ng-bootstrap";
import * as i8 from "@backbase/ui-ang/focus";
const SIZE_MEDIUM = defaultSize;
const SIZE_SMALL = SIZE_MEDIUM / 2;
const KEYWORD_SMALL = 'sm';
const KEYWORD_MEDIUM = 'md';
/**
 * @name SearchBoxComponent
 *
 * @description
 * Component that provides you a search input field.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - Set aria-describedby  with an element id that contains a detailed decription about the Search box.
 *  - aria-label or  aria-labelledby can be used to display the label for search box.
 *
 * If  showSearch = true , searchLabel is discernible text for search button.
 * If  showClear = true , clearLabel is discernible text for clear button.
 *
 */
export class SearchBoxComponent extends InputBaseComponent {
    constructor(cd, deprecationsService, renderer, domAttrService, elem) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        this.renderer = renderer;
        this.domAttrService = domAttrService;
        this.elem = elem;
        /**
         * The placeholder text to display in the input.
         */
        this.placeholder = '';
        /**
         * The maximum length of the search text.
         */
        this.maxLength = '140';
        /**
         * The square border for search box.
         */
        this.squareBorder = false;
        /**
         * Whether to show the search button icon before the text.
         */
        this.showSearch = false;
        /**
         * Whether to show the clear button icon after the text.
         */
        this.showClear = false;
        /**
         * The aria label used when the search button is in focus.
         */
        this.searchLabel = 'Search button';
        /**
         * The aria label used when the clear button is in focus.
         */
        this.clearLabel = 'Clear button';
        /**
         * The autocomplete attribute value.
         */
        this.autocomplete = '';
        /**
         * The event emitter called when a search is submitted.
         */
        this.submit = new EventEmitter();
        /**
         * The event emitter called when the clear button is clicked.
         */
        this.clear = new EventEmitter();
        this.valueChange = this._valueChange;
        this.labelId = `bb_searchbox_label_${this.id}`;
        this.hasAppendContent = true;
    }
    onSubmit() {
        this.submit.emit(this.value);
    }
    ngAfterViewInit() {
        var _a;
        this.domAttrService.moveAriaAttributes(this.elem.nativeElement, (_a = this.inputField) === null || _a === void 0 ? void 0 : _a.nativeElement, this.renderer);
        if (this.inputField !== undefined) {
            this.inputField.nativeElement.removeAttribute('aria-multiline');
        }
        if (this.content === undefined) {
            return;
        }
        this.hasAppendContent = this.content.nativeElement && this.content.nativeElement.children.length > 0;
        this.cd.detectChanges();
    }
    ngDoCheck() {
        var _a;
        if (this.searchBox) {
            const listBoxElem = (_a = this.searchBox.nativeElement) === null || _a === void 0 ? void 0 : _a.querySelector('[role="listbox"]:not([aria-labelledby])');
            if (listBoxElem) {
                this.renderer.setAttribute(listBoxElem, 'aria-labelledby', this.labelId);
            }
        }
    }
    onClear() {
        this.value = '';
        if (this.inputField !== undefined) {
            this.inputField.nativeElement.focus();
        }
        this.clear.emit();
    }
    onFocus() {
        if (this.searchBox === undefined) {
            return;
        }
        this.searchBox.nativeElement.classList.add('bb-focus');
        super.onFocus();
    }
    onBlur() {
        if (this.searchBox === undefined) {
            return;
        }
        this.searchBox.nativeElement.classList.remove('bb-focus');
        super.onBlur();
    }
    isClearVisible() {
        return this.showClear && this.value;
    }
    focusEditableElement() {
        if (this.searchBox) {
            this.searchBox.nativeElement.focus();
        }
    }
    getKeywordBySize(size) {
        if (size <= SIZE_SMALL) {
            return KEYWORD_SMALL;
        }
        else {
            return KEYWORD_MEDIUM;
        }
    }
    getSizeByKeyword(keyword) {
        const sizeKeywords = {
            [KEYWORD_SMALL]: SIZE_SMALL,
            [KEYWORD_MEDIUM]: SIZE_MEDIUM,
        };
        return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;
    }
    onSelect(event) {
        var _a, _b;
        return (_b = (_a = this.typeaheadOptions) === null || _a === void 0 ? void 0 : _a.selectItem) === null || _b === void 0 ? void 0 : _b.call(_a, event);
    }
}
SearchBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }, { token: i0.Renderer2 }, { token: i2.DomAttributesService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
SearchBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SearchBoxComponent, selector: "bb-search-box-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", squareBorder: "squareBorder", typeaheadOptions: "typeaheadOptions", showSearch: "showSearch", showClear: "showClear", searchLabel: "searchLabel", clearLabel: "clearLabel", autocomplete: "autocomplete" }, outputs: { submit: "submit", clear: "clear", valueChange: "valueChange" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => SearchBoxComponent),
        },
    ], viewQueries: [{ propertyName: "content", first: true, predicate: ["content"], descendants: true }, { propertyName: "searchBox", first: true, predicate: ["searchBox"], descendants: true, static: true }, { propertyName: "inputField", first: true, predicate: ["inputField"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\" [attr.id]=\"labelId\" (click)=\"onFocus()\">{{ label }}</label>\n<div\n  #searchBox\n  role=\"search\"\n  class=\"bb-search-box input-group\"\n  [ngClass]=\"[\n    squareBorder ? 'rounded' : '',\n    showSearch ? 'bb-search-box--has-search bb-search-box-search' : '',\n    showSearch || showClear ? 'bb-search-box-visible' : '',\n    isClearVisible() ? 'bb-search-box--has-clear' : '',\n    typeaheadOptions && typeaheadOptions.groupCssClasses ? typeaheadOptions.groupCssClasses : '',\n    getKeywordBySize(size) ? 'bb-search-box--' + getKeywordBySize(size) : ''\n  ]\"\n>\n  <div class=\"bb-search-box__search-button input-group-prepend\" *ngIf=\"showSearch\">\n    <button\n      bbButton\n      [attr.data-role]=\"'bb-search-button'\"\n      (click)=\"onSubmit()\"\n      color=\"link\"\n      [buttonSize]=\"getKeywordBySize(size)\"\n      [attr.aria-label]=\"searchLabel\"\n      [disabled]=\"disabled\"\n    >\n      <bb-icon-ui name=\"search\" [size]=\"size\"></bb-icon-ui>\n    </button>\n  </div>\n  <ng-container *ngIf=\"typeaheadOptions; else simpleSearch\">\n    <input\n      #inputField\n      type=\"search\"\n      id=\"{{ id }}\"\n      class=\"bb-search-box__input form-control\"\n      [ngClass]=\"[size ? 'form-control-' + getKeywordBySize(size) : '']\"\n      [placeholder]=\"placeholder\"\n      [readOnly]=\"readonly\"\n      [disabled]=\"disabled\"\n      [attr.aria-autocomplete]=\"ariaAutocomplete\"\n      [attr.aria-controls]=\"ariaControls\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-describedby]=\"ariaDescribedby\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-expanded]=\"ariaExpanded\"\n      [attr.role]=\"role\"\n      [attr.aria-invalid]=\"ariaInvalid\"\n      [attr.aria-owns]=\"ariaOwns\"\n      [attr.aria-activedescendant]=\"ariaActivedescendant\"\n      [attr.maxlength]=\"maxLength\"\n      [ngModel]=\"value\"\n      (ngModelChange)=\"onValueChange($event)\"\n      [ngbTypeahead]=\"typeaheadOptions?.ngbTypeahead\"\n      [editable]=\"typeaheadOptions?.editable !== false\"\n      [focusFirst]=\"typeaheadOptions?.focusFirst !== false\"\n      [showHint]=\"typeaheadOptions?.showHint === true\"\n      [placement]=\"typeaheadOptions?.placement || 'bottom-left'\"\n      [inputFormatter]=\"typeaheadOptions?.inputFormatter\"\n      [resultFormatter]=\"typeaheadOptions?.resultFormatter\"\n      [resultTemplate]=\"typeaheadOptions?.resultTemplate\"\n      [required]=\"required\"\n      [bbFocus]=\"autofocus\"\n      (selectItem)=\"onSelect($event)\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (keyup.enter)=\"onSubmit()\"\n      [attr.data-role]=\"'search-input'\"\n      [autocomplete]=\"autocomplete\"\n    />\n  </ng-container>\n\n  <div class=\"bb-search-box__clear-button input-group-append\" *ngIf=\"isClearVisible()\">\n    <button\n      bbButton\n      [attr.data-role]=\"'bb-clear-button'\"\n      (click)=\"onClear()\"\n      color=\"link\"\n      [attr.aria-label]=\"clearLabel\"\n      [buttonSize]=\"getKeywordBySize(size)\"\n      [disabled]=\"disabled\"\n    >\n      <bb-icon-ui name=\"cancel\" size=\"sm\"></bb-icon-ui>\n    </button>\n  </div>\n  <div *ngIf=\"hasAppendContent\" class=\"bb-search-box__append-content input-group-append\" #content>\n    <ng-content></ng-content>\n  </div>\n</div>\n\n<ng-template #simpleSearch>\n  <input\n    #inputField\n    type=\"search\"\n    [attr.id]=\"id\"\n    [attr.aria-autocomplete]=\"ariaAutocomplete\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-describedby]=\"ariaDescribedby\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [attr.aria-expanded]=\"ariaExpanded\"\n    [attr.role]=\"role\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-owns]=\"ariaOwns\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    class=\"bb-search-box__simple-input form-control\"\n    [placeholder]=\"placeholder\"\n    [attr.maxlength]=\"maxLength\"\n    [ngModel]=\"value\"\n    [readOnly]=\"readonly\"\n    [required]=\"required\"\n    [disabled]=\"disabled\"\n    [bbFocus]=\"autofocus\"\n    (ngModelChange)=\"onValueChange($event)\"\n    (keyup.enter)=\"onSubmit()\"\n    (focus)=\"onFocus()\"\n    (blur)=\"onBlur()\"\n    [attr.data-role]=\"'search-input'\"\n    [ngClass]=\"[size ? 'form-control-' + getKeywordBySize(size) : '']\"\n    [autocomplete]=\"autocomplete\"\n  />\n</ng-template>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.NgbTypeahead, selector: "input[ngbTypeahead]", inputs: ["autocomplete", "placement", "container", "editable", "focusFirst", "showHint", "inputFormatter", "ngbTypeahead", "resultFormatter", "resultTemplate", "popupClass"], outputs: ["selectItem"], exportAs: ["ngbTypeahead"] }, { type: i6.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SearchBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-search-box-ui',
                    templateUrl: './search-box.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => SearchBoxComponent),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }, { type: i0.Renderer2 }, { type: i2.DomAttributesService }, { type: i0.ElementRef }]; }, propDecorators: { placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], squareBorder: [{
                type: Input
            }], typeaheadOptions: [{
                type: Input
            }], showSearch: [{
                type: Input
            }], showClear: [{
                type: Input
            }], searchLabel: [{
                type: Input
            }], clearLabel: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], submit: [{
                type: Output
            }], clear: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], content: [{
                type: ViewChild,
                args: ['content']
            }], searchBox: [{
                type: ViewChild,
                args: ['searchBox', { static: true }]
            }], inputField: [{
                type: ViewChild,
                args: ['inputField']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9zZWFyY2gtYm94L3NlYXJjaC1ib3guY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvc2VhcmNoLWJveC9zZWFyY2gtYm94LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFHTCxTQUFTLEVBR1QsWUFBWSxFQUNaLFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUdOLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUduRCxPQUFPLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7Ozs7Ozs7QUFpQmhGLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNoQyxNQUFNLFVBQVUsR0FBRyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBRW5DLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQztBQUMzQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFFNUI7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFZSCxNQUFNLE9BQU8sa0JBQXNCLFNBQVEsa0JBQWtCO0lBd0QzRCxZQUNxQixFQUFxQixFQUNyQixtQkFBd0MsRUFDMUMsUUFBbUIsRUFDbkIsY0FBb0MsRUFDcEMsSUFBZ0I7UUFFakMsS0FBSyxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBTlosT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDckIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUMxQyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLG1CQUFjLEdBQWQsY0FBYyxDQUFzQjtRQUNwQyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBNURuQzs7V0FFRztRQUNNLGdCQUFXLEdBQUcsRUFB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LFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFdBQVcsRUFBRSw2QkFBNkI7b0JBQzFDLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixLQUFLLEVBQUUsSUFBSTs0QkFDWCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQzt5QkFDbEQ7cUJBQ0Y7aUJBQ0Y7OE5BS1UsV0FBVztzQkFBbkIsS0FBSztnQkFJRyxTQUFTO3NCQUFqQixLQUFLO2dCQUlHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBSUcsZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUlHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBSUcsU0FBUztzQkFBakIsS0FBSztnQkFJRyxXQUFXO3NCQUFuQixLQUFLO2dCQUlHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBSUcsWUFBWTtzQkFBcEIsS0FBSztnQkFJSSxNQUFNO3NCQUFmLE1BQU07Z0JBSUcsS0FBSztzQkFBZCxNQUFNO2dCQUVHLFdBQVc7c0JBQXBCLE1BQU07Z0JBRWUsT0FBTztzQkFBNUIsU0FBUzt1QkFBQyxTQUFTO2dCQUNzQixTQUFTO3NCQUFsRCxTQUFTO3VCQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBQ2YsVUFBVTtzQkFBbEMsU0FBUzt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRG9DaGVjayxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBmb3J3YXJkUmVmLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjIsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ2JUeXBlYWhlYWRTZWxlY3RJdGVtRXZlbnQgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBkZWZhdWx0U2l6ZSwgSW5wdXRCYXNlQ29tcG9uZW50IH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9iYXNlLWNsYXNzZXMnO1xuaW1wb3J0IHsgRGVwcmVjYXRpb25zU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9mdXR1cmUnO1xuaW1wb3J0IHsgRG9tQXR0cmlidXRlc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3NlcnZpY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlYWhlYWRPcHRpb25zPFQ+IHtcbiAgbmdiVHlwZWFoZWFkOiAodGV4dDogT2JzZXJ2YWJsZTxzdHJpbmc+KSA9PiBPYnNlcnZhYmxlPEFycmF5PFQ+PjtcbiAgZWRpdGFibGU/OiBib29sZWFuO1xuICBmb2N1c0ZpcnN0PzogYm9vbGVhbjtcbiAgc2hvd0hpbnQ/OiBib29sZWFuO1xuICBwbGFjZW1lbnQ/OiBzdHJpbmc7XG4gIGlucHV0Rm9ybWF0dGVyPzogKGl0ZW06IFQpID0+IHN0cmluZztcbiAgcmVzdWx0Rm9ybWF0dGVyPzogKGl0ZW06IFQpID0+IHN0cmluZztcbiAgcmVzdWx0VGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBzZWxlY3RJdGVtPzogKGl0ZW06IE5nYlR5cGVhaGVhZFNlbGVjdEl0ZW1FdmVudCkgPT4gdm9pZDtcbiAgZ3JvdXBDc3NDbGFzc2VzPzogc3RyaW5nO1xufVxuXG5jb25zdCBTSVpFX01FRElVTSA9IGRlZmF1bHRTaXplO1xuY29uc3QgU0laRV9TTUFMTCA9IFNJWkVfTUVESVVNIC8gMjtcblxuY29uc3QgS0VZV09SRF9TTUFMTCA9ICdzbSc7XG5jb25zdCBLRVlXT1JEX01FRElVTSA9ICdtZCc7XG5cbi8qKlxuICogQG5hbWUgU2VhcmNoQm94Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wb25lbnQgdGhhdCBwcm92aWRlcyB5b3UgYSBzZWFyY2ggaW5wdXQgZmllbGQuXG4gKlxuICogQGExMXkgQ3VycmVudCBjb21wb25lbnQgcHJvdmlkZSBvcHRpb24gdG8gcGFzcyBuZWVkZWQgYWNjZXNzaWJpbGl0eVxuICogYXR0cmlidXRlcy4gWW91IG5lZWQgdG8gdGFrZSBjYXJlIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgcmVxdWlyZWQgaW4geW91ciBjYXNlIDpcbiAqICAtIFNldCBhcmlhLWRlc2NyaWJlZGJ5ICB3aXRoIGFuIGVsZW1lbnQgaWQgdGhhdCBjb250YWlucyBhIGRldGFpbGVkIGRlY3JpcHRpb24gYWJvdXQgdGhlIFNlYXJjaCBib3guXG4gKiAgLSBhcmlhLWxhYmVsIG9yICBhcmlhLWxhYmVsbGVkYnkgY2FuIGJlIHVzZWQgdG8gZGlzcGxheSB0aGUgbGFiZWwgZm9yIHNlYXJjaCBib3guXG4gKlxuICogSWYgIHNob3dTZWFyY2ggPSB0cnVlICwgc2VhcmNoTGFiZWwgaXMgZGlzY2VybmlibGUgdGV4dCBmb3Igc2VhcmNoIGJ1dHRvbi5cbiAqIElmICBzaG93Q2xlYXIgPSB0cnVlICwgY2xlYXJMYWJlbCBpcyBkaXNjZXJuaWJsZSB0ZXh0IGZvciBjbGVhciBidXR0b24uXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1zZWFyY2gtYm94LXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1ib3guY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gU2VhcmNoQm94Q29tcG9uZW50KSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hCb3hDb21wb25lbnQ8VD4gZXh0ZW5kcyBJbnB1dEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBEb0NoZWNrIHtcbiAgLyoqXG4gICAqIFRoZSBwbGFjZWhvbGRlciB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGlucHV0LlxuICAgKi9cbiAgQElucHV0KCkgcGxhY2Vob2xkZXIgPSAnJztcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgc2VhcmNoIHRleHQuXG4gICAqL1xuICBASW5wdXQoKSBtYXhMZW5ndGggPSAnMTQwJztcbiAgLyoqXG4gICAqIFRoZSBzcXVhcmUgYm9yZGVyIGZvciBzZWFyY2ggYm94LlxuICAgKi9cbiAgQElucHV0KCkgc3F1YXJlQm9yZGVyID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBvcHRpb25zIHRvIHVzZSB3aGVuIHR5cGVhaGVhZCBpcyBhdmFpbGFibGUuXG4gICAqL1xuICBASW5wdXQoKSB0eXBlYWhlYWRPcHRpb25zOiBUeXBlYWhlYWRPcHRpb25zPFQ+IHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHRoZSBzZWFyY2ggYnV0dG9uIGljb24gYmVmb3JlIHRoZSB0ZXh0LlxuICAgKi9cbiAgQElucHV0KCkgc2hvd1NlYXJjaCA9IGZhbHNlO1xuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHRoZSBjbGVhciBidXR0b24gaWNvbiBhZnRlciB0aGUgdGV4dC5cbiAgICovXG4gIEBJbnB1dCgpIHNob3dDbGVhciA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIGFyaWEgbGFiZWwgdXNlZCB3aGVuIHRoZSBzZWFyY2ggYnV0dG9uIGlzIGluIGZvY3VzLlxuICAgKi9cbiAgQElucHV0KCkgc2VhcmNoTGFiZWwgPSAnU2VhcmNoIGJ1dHRvbic7XG4gIC8qKlxuICAgKiBUaGUgYXJpYSBsYWJlbCB1c2VkIHdoZW4gdGhlIGNsZWFyIGJ1dHRvbiBpcyBpbiBmb2N1cy5cbiAgICovXG4gIEBJbnB1dCgpIGNsZWFyTGFiZWwgPSAnQ2xlYXIgYnV0dG9uJztcbiAgLyoqXG4gICAqIFRoZSBhdXRvY29tcGxldGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKi9cbiAgQElucHV0KCkgYXV0b2NvbXBsZXRlID0gJyc7XG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgZW1pdHRlciBjYWxsZWQgd2hlbiBhIHNlYXJjaCBpcyBzdWJtaXR0ZWQuXG4gICAqL1xuICBAT3V0cHV0KCkgc3VibWl0ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBib29sZWFuIHwgT2JqZWN0IHwgbnVsbD4oKTtcbiAgLyoqXG4gICAqIFRoZSBldmVudCBlbWl0dGVyIGNhbGxlZCB3aGVuIHRoZSBjbGVhciBidXR0b24gaXMgY2xpY2tlZC5cbiAgICovXG4gIEBPdXRwdXQoKSBjbGVhciA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IHRoaXMuX3ZhbHVlQ2hhbmdlO1xuXG4gIEBWaWV3Q2hpbGQoJ2NvbnRlbnQnKSBjb250ZW50OiBFbGVtZW50UmVmIHwgdW5kZWZpbmVkO1xuICBAVmlld0NoaWxkKCdzZWFyY2hCb3gnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzZWFyY2hCb3g6IEVsZW1lbnRSZWYgfCB1bmRlZmluZWQ7XG4gIEBWaWV3Q2hpbGQoJ2lucHV0RmllbGQnKSBpbnB1dEZpZWxkOiBFbGVtZW50UmVmIHwgdW5kZWZpbmVkO1xuXG4gIHJlYWRvbmx5IGxhYmVsSWQgPSBgYmJfc2VhcmNoYm94X2xhYmVsXyR7dGhpcy5pZH1gO1xuXG4gIGhhc0FwcGVuZENvbnRlbnQgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlcHJlY2F0aW9uc1NlcnZpY2U6IERlcHJlY2F0aW9uc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZG9tQXR0clNlcnZpY2U6IERvbUF0dHJpYnV0ZXNTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZWxlbTogRWxlbWVudFJlZixcbiAgKSB7XG4gICAgc3VwZXIoY2QsIGRlcHJlY2F0aW9uc1NlcnZpY2UpO1xuICB9XG5cbiAgb25TdWJtaXQoKSB7XG4gICAgdGhpcy5zdWJtaXQuZW1pdCh0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmRvbUF0dHJTZXJ2aWNlLm1vdmVBcmlhQXR0cmlidXRlcyh0aGlzLmVsZW0ubmF0aXZlRWxlbWVudCwgdGhpcy5pbnB1dEZpZWxkPy5uYXRpdmVFbGVtZW50LCB0aGlzLnJlbmRlcmVyKTtcblxuICAgIGlmICh0aGlzLmlucHV0RmllbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pbnB1dEZpZWxkLm5hdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW11bHRpbGluZScpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5oYXNBcHBlbmRDb250ZW50ID0gdGhpcy5jb250ZW50Lm5hdGl2ZUVsZW1lbnQgJiYgdGhpcy5jb250ZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID4gMDtcbiAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICBpZiAodGhpcy5zZWFyY2hCb3gpIHtcbiAgICAgIGNvbnN0IGxpc3RCb3hFbGVtID0gdGhpcy5zZWFyY2hCb3gubmF0aXZlRWxlbWVudD8ucXVlcnlTZWxlY3RvcignW3JvbGU9XCJsaXN0Ym94XCJdOm5vdChbYXJpYS1sYWJlbGxlZGJ5XSknKTtcbiAgICAgIGlmIChsaXN0Qm94RWxlbSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShsaXN0Qm94RWxlbSwgJ2FyaWEtbGFiZWxsZWRieScsIHRoaXMubGFiZWxJZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25DbGVhcigpIHtcbiAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgaWYgKHRoaXMuaW5wdXRGaWVsZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmlucHV0RmllbGQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgICB0aGlzLmNsZWFyLmVtaXQoKTtcbiAgfVxuXG4gIG9uRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuc2VhcmNoQm94ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZWFyY2hCb3gubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdiYi1mb2N1cycpO1xuICAgIHN1cGVyLm9uRm9jdXMoKTtcbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5zZWFyY2hCb3ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNlYXJjaEJveC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JiLWZvY3VzJyk7XG4gICAgc3VwZXIub25CbHVyKCk7XG4gIH1cblxuICBpc0NsZWFyVmlzaWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zaG93Q2xlYXIgJiYgdGhpcy52YWx1ZTtcbiAgfVxuXG4gIGZvY3VzRWRpdGFibGVFbGVtZW50KCkge1xuICAgIGlmICh0aGlzLnNlYXJjaEJveCkge1xuICAgICAgdGhpcy5zZWFyY2hCb3gubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIGdldEtleXdvcmRCeVNpemUoc2l6ZTogbnVtYmVyIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoc2l6ZSA8PSBTSVpFX1NNQUxMKSB7XG4gICAgICByZXR1cm4gS0VZV09SRF9TTUFMTDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEtFWVdPUkRfTUVESVVNO1xuICAgIH1cbiAgfVxuXG4gIGdldFNpemVCeUtleXdvcmQoa2V5d29yZDogYW55KTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBzaXplS2V5d29yZHM6IHsgW2luZGV4OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcbiAgICAgIFtLRVlXT1JEX1NNQUxMXTogU0laRV9TTUFMTCxcbiAgICAgIFtLRVlXT1JEX01FRElVTV06IFNJWkVfTUVESVVNLFxuICAgIH07XG5cbiAgICByZXR1cm4gdHlwZW9mIGtleXdvcmQgPT09ICdzdHJpbmcnICYmIHNpemVLZXl3b3Jkcy5oYXNPd25Qcm9wZXJ0eShrZXl3b3JkKSA/IHNpemVLZXl3b3Jkc1trZXl3b3JkXSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIG9uU2VsZWN0KGV2ZW50OiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlYWhlYWRPcHRpb25zPy5zZWxlY3RJdGVtPy4oZXZlbnQpO1xuICB9XG59XG4iLCI8bGFiZWwgKm5nSWY9XCJsYWJlbFwiIGZvcj1cInt7IGlkIH19XCIgW2F0dHIuaWRdPVwibGFiZWxJZFwiIChjbGljayk9XCJvbkZvY3VzKClcIj57eyBsYWJlbCB9fTwvbGFiZWw+XG48ZGl2XG4gICNzZWFyY2hCb3hcbiAgcm9sZT1cInNlYXJjaFwiXG4gIGNsYXNzPVwiYmItc2VhcmNoLWJveCBpbnB1dC1ncm91cFwiXG4gIFtuZ0NsYXNzXT1cIltcbiAgICBzcXVhcmVCb3JkZXIgPyAncm91bmRlZCcgOiAnJyxcbiAgICBzaG93U2VhcmNoID8gJ2JiLXNlYXJjaC1ib3gtLWhhcy1zZWFyY2ggYmItc2VhcmNoLWJveC1zZWFyY2gnIDogJycsXG4gICAgc2hvd1NlYXJjaCB8fCBzaG93Q2xlYXIgPyAnYmItc2VhcmNoLWJveC12aXNpYmxlJyA6ICcnLFxuICAgIGlzQ2xlYXJWaXNpYmxlKCkgPyAnYmItc2VhcmNoLWJveC0taGFzLWNsZWFyJyA6ICcnLFxuICAgIHR5cGVhaGVhZE9wdGlvbnMgJiYgdHlwZWFoZWFkT3B0aW9ucy5ncm91cENzc0NsYXNzZXMgPyB0eXBlYWhlYWRPcHRpb25zLmdyb3VwQ3NzQ2xhc3NlcyA6ICcnLFxuICAgIGdldEtleXdvcmRCeVNpemUoc2l6ZSkgPyAnYmItc2VhcmNoLWJveC0tJyArIGdldEtleXdvcmRCeVNpemUoc2l6ZSkgOiAnJ1xuICBdXCJcbj5cbiAgPGRpdiBjbGFzcz1cImJiLXNlYXJjaC1ib3hfX3NlYXJjaC1idXR0b24gaW5wdXQtZ3JvdXAtcHJlcGVuZFwiICpuZ0lmPVwic2hvd1NlYXJjaFwiPlxuICAgIDxidXR0b25cbiAgICAgIGJiQnV0dG9uXG4gICAgICBbYXR0ci5kYXRhLXJvbGVdPVwiJ2JiLXNlYXJjaC1idXR0b24nXCJcbiAgICAgIChjbGljayk9XCJvblN1Ym1pdCgpXCJcbiAgICAgIGNvbG9yPVwibGlua1wiXG4gICAgICBbYnV0dG9uU2l6ZV09XCJnZXRLZXl3b3JkQnlTaXplKHNpemUpXCJcbiAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwic2VhcmNoTGFiZWxcIlxuICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICA+XG4gICAgICA8YmItaWNvbi11aSBuYW1lPVwic2VhcmNoXCIgW3NpemVdPVwic2l6ZVwiPjwvYmItaWNvbi11aT5cbiAgICA8L2J1dHRvbj5cbiAgPC9kaXY+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0eXBlYWhlYWRPcHRpb25zOyBlbHNlIHNpbXBsZVNlYXJjaFwiPlxuICAgIDxpbnB1dFxuICAgICAgI2lucHV0RmllbGRcbiAgICAgIHR5cGU9XCJzZWFyY2hcIlxuICAgICAgaWQ9XCJ7eyBpZCB9fVwiXG4gICAgICBjbGFzcz1cImJiLXNlYXJjaC1ib3hfX2lucHV0IGZvcm0tY29udHJvbFwiXG4gICAgICBbbmdDbGFzc109XCJbc2l6ZSA/ICdmb3JtLWNvbnRyb2wtJyArIGdldEtleXdvcmRCeVNpemUoc2l6ZSkgOiAnJ11cIlxuICAgICAgW3BsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyXCJcbiAgICAgIFtyZWFkT25seV09XCJyZWFkb25seVwiXG4gICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgW2F0dHIuYXJpYS1hdXRvY29tcGxldGVdPVwiYXJpYUF1dG9jb21wbGV0ZVwiXG4gICAgICBbYXR0ci5hcmlhLWNvbnRyb2xzXT1cImFyaWFDb250cm9sc1wiXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImFyaWFMYWJlbFwiXG4gICAgICBbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XT1cImFyaWFEZXNjcmliZWRieVwiXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiYXJpYUxhYmVsbGVkYnlcIlxuICAgICAgW2F0dHIuYXJpYS1leHBhbmRlZF09XCJhcmlhRXhwYW5kZWRcIlxuICAgICAgW2F0dHIucm9sZV09XCJyb2xlXCJcbiAgICAgIFthdHRyLmFyaWEtaW52YWxpZF09XCJhcmlhSW52YWxpZFwiXG4gICAgICBbYXR0ci5hcmlhLW93bnNdPVwiYXJpYU93bnNcIlxuICAgICAgW2F0dHIuYXJpYS1hY3RpdmVkZXNjZW5kYW50XT1cImFyaWFBY3RpdmVkZXNjZW5kYW50XCJcbiAgICAgIFthdHRyLm1heGxlbmd0aF09XCJtYXhMZW5ndGhcIlxuICAgICAgW25nTW9kZWxdPVwidmFsdWVcIlxuICAgICAgKG5nTW9kZWxDaGFuZ2UpPVwib25WYWx1ZUNoYW5nZSgkZXZlbnQpXCJcbiAgICAgIFtuZ2JUeXBlYWhlYWRdPVwidHlwZWFoZWFkT3B0aW9ucz8ubmdiVHlwZWFoZWFkXCJcbiAgICAgIFtlZGl0YWJsZV09XCJ0eXBlYWhlYWRPcHRpb25zPy5lZGl0YWJsZSAhPT0gZmFsc2VcIlxuICAgICAgW2ZvY3VzRmlyc3RdPVwidHlwZWFoZWFkT3B0aW9ucz8uZm9jdXNGaXJzdCAhPT0gZmFsc2VcIlxuICAgICAgW3Nob3dIaW50XT1cInR5cGVhaGVhZE9wdGlvbnM/LnNob3dIaW50ID09PSB0cnVlXCJcbiAgICAgIFtwbGFjZW1lbnRdPVwidHlwZWFoZWFkT3B0aW9ucz8ucGxhY2VtZW50IHx8ICdib3R0b20tbGVmdCdcIlxuICAgICAgW2lucHV0Rm9ybWF0dGVyXT1cInR5cGVhaGVhZE9wdGlvbnM/LmlucHV0Rm9ybWF0dGVyXCJcbiAgICAgIFtyZXN1bHRGb3JtYXR0ZXJdPVwidHlwZWFoZWFkT3B0aW9ucz8ucmVzdWx0Rm9ybWF0dGVyXCJcbiAgICAgIFtyZXN1bHRUZW1wbGF0ZV09XCJ0eXBlYWhlYWRPcHRpb25zPy5yZXN1bHRUZW1wbGF0ZVwiXG4gICAgICBbcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuICAgICAgW2JiRm9jdXNdPVwiYXV0b2ZvY3VzXCJcbiAgICAgIChzZWxlY3RJdGVtKT1cIm9uU2VsZWN0KCRldmVudClcIlxuICAgICAgKGZvY3VzKT1cIm9uRm9jdXMoKVwiXG4gICAgICAoYmx1cik9XCJvbkJsdXIoKVwiXG4gICAgICAoa2V5dXAuZW50ZXIpPVwib25TdWJtaXQoKVwiXG4gICAgICBbYXR0ci5kYXRhLXJvbGVdPVwiJ3NlYXJjaC1pbnB1dCdcIlxuICAgICAgW2F1dG9jb21wbGV0ZV09XCJhdXRvY29tcGxldGVcIlxuICAgIC8+XG4gIDwvbmctY29udGFpbmVyPlxuXG4gIDxkaXYgY2xhc3M9XCJiYi1zZWFyY2gtYm94X19jbGVhci1idXR0b24gaW5wdXQtZ3JvdXAtYXBwZW5kXCIgKm5nSWY9XCJpc0NsZWFyVmlzaWJsZSgpXCI+XG4gICAgPGJ1dHRvblxuICAgICAgYmJCdXR0b25cbiAgICAgIFthdHRyLmRhdGEtcm9sZV09XCInYmItY2xlYXItYnV0dG9uJ1wiXG4gICAgICAoY2xpY2spPVwib25DbGVhcigpXCJcbiAgICAgIGNvbG9yPVwibGlua1wiXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImNsZWFyTGFiZWxcIlxuICAgICAgW2J1dHRvblNpemVdPVwiZ2V0S2V5d29yZEJ5U2l6ZShzaXplKVwiXG4gICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgID5cbiAgICAgIDxiYi1pY29uLXVpIG5hbWU9XCJjYW5jZWxcIiBzaXplPVwic21cIj48L2JiLWljb24tdWk+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuICA8ZGl2ICpuZ0lmPVwiaGFzQXBwZW5kQ29udGVudFwiIGNsYXNzPVwiYmItc2VhcmNoLWJveF9fYXBwZW5kLWNvbnRlbnQgaW5wdXQtZ3JvdXAtYXBwZW5kXCIgI2NvbnRlbnQ+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICA8L2Rpdj5cbjwvZGl2PlxuXG48bmctdGVtcGxhdGUgI3NpbXBsZVNlYXJjaD5cbiAgPGlucHV0XG4gICAgI2lucHV0RmllbGRcbiAgICB0eXBlPVwic2VhcmNoXCJcbiAgICBbYXR0ci5pZF09XCJpZFwiXG4gICAgW2F0dHIuYXJpYS1hdXRvY29tcGxldGVdPVwiYXJpYUF1dG9jb21wbGV0ZVwiXG4gICAgW2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuICAgIFthdHRyLmFyaWEtZGVzY3JpYmVkYnldPVwiYXJpYURlc2NyaWJlZGJ5XCJcbiAgICBbYXR0ci5hcmlhLWxhYmVsbGVkYnldPVwiYXJpYUxhYmVsbGVkYnlcIlxuICAgIFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiYXJpYUV4cGFuZGVkXCJcbiAgICBbYXR0ci5yb2xlXT1cInJvbGVcIlxuICAgIFthdHRyLmFyaWEtaW52YWxpZF09XCJhcmlhSW52YWxpZFwiXG4gICAgW2F0dHIuYXJpYS1vd25zXT1cImFyaWFPd25zXCJcbiAgICBbYXR0ci5hcmlhLWFjdGl2ZWRlc2NlbmRhbnRdPVwiYXJpYUFjdGl2ZWRlc2NlbmRhbnRcIlxuICAgIGNsYXNzPVwiYmItc2VhcmNoLWJveF9fc2ltcGxlLWlucHV0IGZvcm0tY29udHJvbFwiXG4gICAgW3BsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyXCJcbiAgICBbYXR0ci5tYXhsZW5ndGhdPVwibWF4TGVuZ3RoXCJcbiAgICBbbmdNb2RlbF09XCJ2YWx1ZVwiXG4gICAgW3JlYWRPbmx5XT1cInJlYWRvbmx5XCJcbiAgICBbcmVxdWlyZWRdPVwicmVxdWlyZWRcIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gICAgW2JiRm9jdXNdPVwiYXV0b2ZvY3VzXCJcbiAgICAobmdNb2RlbENoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKCRldmVudClcIlxuICAgIChrZXl1cC5lbnRlcik9XCJvblN1Ym1pdCgpXCJcbiAgICAoZm9jdXMpPVwib25Gb2N1cygpXCJcbiAgICAoYmx1cik9XCJvbkJsdXIoKVwiXG4gICAgW2F0dHIuZGF0YS1yb2xlXT1cIidzZWFyY2gtaW5wdXQnXCJcbiAgICBbbmdDbGFzc109XCJbc2l6ZSA/ICdmb3JtLWNvbnRyb2wtJyArIGdldEtleXdvcmRCeVNpemUoc2l6ZSkgOiAnJ11cIlxuICAgIFthdXRvY29tcGxldGVdPVwiYXV0b2NvbXBsZXRlXCJcbiAgLz5cbjwvbmctdGVtcGxhdGU+XG4iXX0=