import { ChangeDetectionStrategy, Component, Inject, InjectionToken, Input, } from '@angular/core';
import * as i0 from "@angular/core";
export const BB_DROPDOWN_CHANGE_DETECTION_REF_TOKEN = new InjectionToken('BB_DROPDOWN_SINGLE_SELECT');
/**
 * @name DropdownSingleSelectOption
 *
 * @description
 * Component that represents a single option that is part of the dropdown single select component.
 */
export class DropdownSingleSelectOptionComponent {
    constructor(dropdownCDRef) {
        this.dropdownCDRef = dropdownCDRef;
    }
    // NOTES: trigger of detectChanges is needed
    // because DropdownSingleSelectComponent has changeDetection
    // strategy onPush, hence it reacts only to changes
    // of its own @Inputs, but not @Inputs() of options component
    ngOnChanges({ value = {}, label = {} }) {
        const { firstChange: firstChangeValue } = value;
        const { firstChange: firstChangeLabel } = label;
        if (firstChangeLabel && firstChangeValue) {
            return;
        }
        this.dropdownCDRef.detectChanges();
    }
}
DropdownSingleSelectOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectOptionComponent, deps: [{ token: BB_DROPDOWN_CHANGE_DETECTION_REF_TOKEN }], target: i0.ɵɵFactoryTarget.Component });
DropdownSingleSelectOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: { value: "value", label: "label" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-single-select-option-ui',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [BB_DROPDOWN_CHANGE_DETECTION_REF_TOKEN]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], label: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tc2luZ2xlLXNlbGVjdC1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvZHJvcGRvd24tc2luZ2xlLXNlbGVjdC9kcm9wZG93bi1zaW5nbGUtc2VsZWN0LW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUV2QixTQUFTLEVBQ1QsTUFBTSxFQUNOLGNBQWMsRUFDZCxLQUFLLEdBSU4sTUFBTSxlQUFlLENBQUM7O0FBRXZCLE1BQU0sQ0FBQyxNQUFNLHNDQUFzQyxHQUFzQyxJQUFJLGNBQWMsQ0FDekcsMkJBQTJCLENBQzVCLENBQUM7QUFFRjs7Ozs7R0FLRztBQU1ILE1BQU0sT0FBTyxtQ0FBbUM7SUFVOUMsWUFBNkUsYUFBZ0M7UUFBaEMsa0JBQWEsR0FBYixhQUFhLENBQW1CO0lBQUcsQ0FBQztJQUVqSCw0Q0FBNEM7SUFDNUMsNERBQTREO0lBQzVELG1EQUFtRDtJQUNuRCw2REFBNkQ7SUFDN0QsV0FBVyxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQWtCLEVBQUUsS0FBSyxHQUFHLEVBQWtCLEVBQWlCO1FBQ25GLE1BQU0sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDaEQsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUVoRCxJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixFQUFFO1lBQ3hDLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7aUlBekJVLG1DQUFtQyxrQkFVMUIsc0NBQXNDO3FIQVYvQyxtQ0FBbUMsNElBRnBDLEVBQUU7NEZBRUQsbUNBQW1DO2tCQUwvQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQ0FBcUM7b0JBQy9DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUUsRUFBRTtpQkFDYjs7MEJBV2MsTUFBTTsyQkFBQyxzQ0FBc0M7NENBTmpELEtBQUs7c0JBQWIsS0FBSztnQkFJRyxLQUFLO3NCQUFiLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgSW5qZWN0LFxuICBJbmplY3Rpb25Ub2tlbixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlLFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGNvbnN0IEJCX0RST1BET1dOX0NIQU5HRV9ERVRFQ1RJT05fUkVGX1RPS0VOOiBJbmplY3Rpb25Ub2tlbjxDaGFuZ2VEZXRlY3RvclJlZj4gPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdCQl9EUk9QRE9XTl9TSU5HTEVfU0VMRUNUJyxcbik7XG5cbi8qKlxuICogQG5hbWUgRHJvcGRvd25TaW5nbGVTZWxlY3RPcHRpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBvbmVudCB0aGF0IHJlcHJlc2VudHMgYSBzaW5nbGUgb3B0aW9uIHRoYXQgaXMgcGFydCBvZiB0aGUgZHJvcGRvd24gc2luZ2xlIHNlbGVjdCBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWRyb3Bkb3duLXNpbmdsZS1zZWxlY3Qtb3B0aW9uLXVpJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnJyxcbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25TaW5nbGVTZWxlY3RPcHRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBuYXRpdmUgb3B0aW9uIGVsZW1lbnRcbiAgICovXG4gIEBJbnB1dCgpIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIG9wdGlvbiBpdGVtXG4gICAqL1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoQkJfRFJPUERPV05fQ0hBTkdFX0RFVEVDVElPTl9SRUZfVE9LRU4pIHByaXZhdGUgcmVhZG9ubHkgZHJvcGRvd25DRFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgLy8gTk9URVM6IHRyaWdnZXIgb2YgZGV0ZWN0Q2hhbmdlcyBpcyBuZWVkZWRcbiAgLy8gYmVjYXVzZSBEcm9wZG93blNpbmdsZVNlbGVjdENvbXBvbmVudCBoYXMgY2hhbmdlRGV0ZWN0aW9uXG4gIC8vIHN0cmF0ZWd5IG9uUHVzaCwgaGVuY2UgaXQgcmVhY3RzIG9ubHkgdG8gY2hhbmdlc1xuICAvLyBvZiBpdHMgb3duIEBJbnB1dHMsIGJ1dCBub3QgQElucHV0cygpIG9mIG9wdGlvbnMgY29tcG9uZW50XG4gIG5nT25DaGFuZ2VzKHsgdmFsdWUgPSB7fSBhcyBTaW1wbGVDaGFuZ2UsIGxhYmVsID0ge30gYXMgU2ltcGxlQ2hhbmdlIH06IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBjb25zdCB7IGZpcnN0Q2hhbmdlOiBmaXJzdENoYW5nZVZhbHVlIH0gPSB2YWx1ZTtcbiAgICBjb25zdCB7IGZpcnN0Q2hhbmdlOiBmaXJzdENoYW5nZUxhYmVsIH0gPSBsYWJlbDtcblxuICAgIGlmIChmaXJzdENoYW5nZUxhYmVsICYmIGZpcnN0Q2hhbmdlVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRyb3Bkb3duQ0RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG59XG4iXX0=