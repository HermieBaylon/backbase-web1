import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, forwardRef, Input, } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BB_DROPDOWN_CHANGE_DETECTION_REF_TOKEN, DropdownSingleSelectOptionComponent, } from './dropdown-single-select-option.component';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@backbase/ui-ang/focus";
/**
 * @name DropdownSingleSelectComponent
 *
 * @description
 * Component that displays a dropdown with a single select option.
 *
 * @a11y Current component provides option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - aria-label will be linked to the single select dropdown with label
 *  - set aria-labelledby with ID of another element in the DOM as dropdown's label.
 *  - set aria-describedby with ID of another element in the DOM with descriptive text about the dropdown
 *  - set aria-expanded with a boolean value based on the listbox display.
 *  - set aria-invalid to true when a selected option is not valid ans vice versa
 *  - aria-owns handles contextual relationship between a parent and its child elements,
 *    in this case between dropdown menu and dropdown items, use the id from the input binding.
 *
 */
export class DropdownSingleSelectComponent extends InputBaseComponent {
    constructor(cd, deprecationsService) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        /**
         * The placeholder for the select. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * This Boolean attribute determine if default option as placeholder is displayed. Defaults to false.
         */
        this.defaultOptionAsPlaceholder = false;
        /**
         * The value for the input field. It can be a list of strings or list of objects.
         * If the value is a list of objects, you have to provide the `displayAttributePath` property.
         */
        this.options = [];
        // TODO: after backbase-theme-v2 released. Change default value to 'corner-down'.
        /**
         * Right corner icon name.
         * Default name 'toggle-down'
         */
        this.iconName = 'toggle-down';
        /**
         * Allowing override the option comparison algorithm for tracking identities when
         * checking for change
         */
        this.compareWithFn = (a, b) => a === b;
    }
    getOptionDisplayText(option) {
        return this.displayAttributePath && typeof option === 'object' && option !== null
            ? this.resolvePath(this.displayAttributePath, option)
            : option;
    }
    resolvePath(path, object) {
        if (!object && !path) {
            return '';
        }
        let paths;
        let propName;
        if (path.match(/^\[\d\]/) !== null) {
            paths = path.replace(/^[\[\]]/g, '').split(/\./);
            propName = paths[0].replace(/\]/, '')[0];
        }
        else {
            paths = path.split(/[\.\[]/);
            propName = paths[0];
        }
        const remainingPath = paths
            .slice(1)
            .reduce((result, item) => {
            if (item) {
                if (item.match(/^\d\]/)) {
                    item = '[' + item;
                }
                result.push(item);
            }
            return result;
        }, [])
            .join('.');
        if (!remainingPath) {
            const propValue = object[propName];
            return typeof propValue === 'string' ? propValue : propValue ? String(propValue) : '';
        }
        else if (object.hasOwnProperty(propName)) {
            return this.resolvePath(remainingPath, object[propName]);
        }
        else {
            return '';
        }
    }
    trackByFn(index, item) {
        return item.value;
    }
}
DropdownSingleSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
DropdownSingleSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: { placeholder: "placeholder", defaultOptionAsPlaceholder: "defaultOptionAsPlaceholder", options: "options", displayAttributePath: "displayAttributePath", iconName: "iconName", compareWithFn: "compareWithFn" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DropdownSingleSelectComponent),
            multi: true,
        },
        {
            provide: BB_DROPDOWN_CHANGE_DETECTION_REF_TOKEN,
            useExisting: ChangeDetectorRef,
        },
    ], queries: [{ propertyName: "contentOptions", predicate: DropdownSingleSelectOptionComponent }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" class=\"bb-dropdown-single-select__label\" for=\"{{ id }}\" [attr.data-role]=\"'label'\">{{\n  label\n}}</label>\n<!-- Note: in HTML readonly is not supported for <select> like it is for <input> elements -->\n<select\n  [(ngModel)]=\"value\"\n  class=\"form-control bb-dropdown__select\"\n  (blur)=\"onBlur()\"\n  (change)=\"onValueChange()\"\n  (focus)=\"onFocus()\"\n  [compareWith]=\"compareWithFn\"\n  [attr.aria-label]=\"ariaLabel\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  id=\"{{ id }}\"\n  [bbFocus]=\"autofocus\"\n  [attr.data-role]=\"'dropdown'\"\n>\n  <option *ngIf=\"defaultOptionAsPlaceholder && placeholder\" value=\"\">\n    {{ placeholder }}\n  </option>\n  <option\n    class=\"bb-dropdown-single-select__option-hidden\"\n    *ngIf=\"!defaultOptionAsPlaceholder && placeholder\"\n    value=\"\"\n    disabled\n    hidden\n  >\n    {{ placeholder }}\n  </option>\n  <option *ngFor=\"let option of options\" [ngValue]=\"option\">\n    {{ getOptionDisplayText(option) }}\n  </option>\n  <option *ngFor=\"let option of contentOptions; trackBy: trackByFn\" [ngValue]=\"option.value\">\n    {{ option.label }}\n  </option>\n</select>\n<div class=\"bb-dropdown__icon\">\n  <bb-icon-ui color=\"muted\" [name]=\"iconName\" size=\"md\"></bb-icon-ui>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }, { type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-single-select-ui',
                    templateUrl: './dropdown-single-select.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DropdownSingleSelectComponent),
                            multi: true,
                        },
                        {
                            provide: BB_DROPDOWN_CHANGE_DETECTION_REF_TOKEN,
                            useExisting: ChangeDetectorRef,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }]; }, propDecorators: { placeholder: [{
                type: Input
            }], defaultOptionAsPlaceholder: [{
                type: Input
            }], options: [{
                type: Input
            }], contentOptions: [{
                type: ContentChildren,
                args: [DropdownSingleSelectOptionComponent]
            }], displayAttributePath: [{
                type: Input
            }], iconName: [{
                type: Input
            }], compareWithFn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,