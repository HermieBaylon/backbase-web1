import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { DefaultPaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/logo";
import * as i2 from "@backbase/ui-ang/card-vendor";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/payment-card-number-pipe";
/**
 * The prefix for the payment card class names.
 */
const classNamePrefix = 'bb-payment-card-';
export class PaymentCardComponent {
    constructor() {
        /**
         * Configuration of how the card number should be formatted.
         */
        this.paymentCardNumberFormat = DefaultPaymentCardNumberFormat;
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
    get classNames() {
        if (this.paymentCard && this.paymentCard.cardName) {
            const classNamePostfix = this.paymentCard.cardName
                .toLowerCase()
                .replace(/[^a-zA-Z0-9 ]/g, ' ')
                .trim()
                .replace(/\s/g, '-')
                .replace(/-{2,}/g, '-');
            return classNamePostfix ? `${classNamePrefix}${classNamePostfix}` : undefined;
        }
        return undefined;
    }
}
PaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentCardComponent, selector: "bb-payment-card-ui", inputs: { paymentCard: "paymentCard", paymentCardNumberFormat: "paymentCardNumberFormat" }, ngImport: i0, template: "<div class=\"bb-payment-card\" [ngClass]=\"classNames\">\n  <div class=\"bb-payment-card__container\">\n    <div class=\"bb-payment-card__logo\">\n      <bb-logo-ui type=\"emblem\" [isInverse]=\"true\"></bb-logo-ui>\n    </div>\n    <div class=\"bb-payment-card__vendor\">\n      <bb-card-vendor-ui [vendor]=\"paymentCard?.vendor\"></bb-card-vendor-ui>\n    </div>\n    <div class=\"bb-payment-card__number\">\n      {{ paymentCard?.number | paymentCardNumber: paymentCardNumberFormat }}\n    </div>\n    <div class=\"bb-payment-card__name\">\n      {{ paymentCard?.name }}\n    </div>\n    <div class=\"bb-payment-card__expiration-date\">\n      <div class=\"bb-payment-card__expiration-date-label\" i18n=\"Expiration date label@@paymentCard.expirationDateLabel\">\n        VALID THRU\n      </div>\n      <span class=\"bb-payment-card__expiration-date-date\">\n        {{ paymentCard?.expirationDate | date: 'MM/yy' }}\n      </span>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.LogoComponent, selector: "bb-logo-ui", inputs: ["type", "isInverse"] }, { type: i2.CardVendorComponent, selector: "bb-card-vendor-ui", inputs: ["vendor"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "paymentCardNumber": i4.PaymentCardNumberPipe, "date": i3.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-ui',
                    templateUrl: './payment-card.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { paymentCard: [{
                type: Input
            }], paymentCardNumberFormat: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL3BheW1lbnQtY2FyZC9wYXltZW50LWNhcmQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvcGF5bWVudC1jYXJkL3BheW1lbnQtY2FyZC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQTJCLDhCQUE4QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7Ozs7OztBQTRCcEg7O0dBRUc7QUFDSCxNQUFNLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQztBQU8zQyxNQUFNLE9BQU8sb0JBQW9CO0lBVS9CO1FBTEE7O1dBRUc7UUFDTSw0QkFBdUIsR0FBNEIsOEJBQThCLENBQUM7SUFFNUUsQ0FBQztJQUVoQixRQUFRO1FBQ04sSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssV0FBVyxFQUFFO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNsRjtJQUNILENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVE7aUJBQy9DLFdBQVcsRUFBRTtpQkFDYixPQUFPLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDO2lCQUM5QixJQUFJLEVBQUU7aUJBQ04sT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7aUJBQ25CLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFFMUIsT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxlQUFlLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQy9FO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7a0hBL0JVLG9CQUFvQjtzR0FBcEIsb0JBQW9CLHNKQ3ZDakMseThCQXdCQTs0RkRlYSxvQkFBb0I7a0JBTGhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsV0FBVyxFQUFFLCtCQUErQjtvQkFDNUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzBFQUtVLFdBQVc7c0JBQW5CLEtBQUs7Z0JBSUcsdUJBQXVCO3NCQUEvQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGF5bWVudENhcmROdW1iZXJGb3JtYXQsIERlZmF1bHRQYXltZW50Q2FyZE51bWJlckZvcm1hdCB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvcGF5bWVudC1jYXJkLW51bWJlci1waXBlJztcblxuLyoqXG4gKiBQYXltZW50IGNhcmQgZGF0YS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXltZW50Q2FyZCB7XG4gIC8qKlxuICAgKiBVbmZvcm1hdHRlZCBwYXltZW50IGNhcmQgbnVtYmVyLlxuICAgKi9cbiAgbnVtYmVyOiBudW1iZXIgfCBzdHJpbmc7XG4gIC8qKlxuICAgKiBQYXltZW50IGNhcmQgdmVuZG9yLlxuICAgKi9cbiAgdmVuZG9yOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBOYW1lIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgcGF5bWVudCBjYXJkLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogRGF0ZSB0aGUgcGF5bWVudCBjYXJkIGV4cGlyZXMuXG4gICAqL1xuICBleHBpcmF0aW9uRGF0ZTogRGF0ZTtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGNhcmQuXG4gICAqL1xuICBjYXJkTmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBwcmVmaXggZm9yIHRoZSBwYXltZW50IGNhcmQgY2xhc3MgbmFtZXMuXG4gKi9cbmNvbnN0IGNsYXNzTmFtZVByZWZpeCA9ICdiYi1wYXltZW50LWNhcmQtJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItcGF5bWVudC1jYXJkLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BheW1lbnQtY2FyZC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBQYXltZW50Q2FyZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBQYXltZW50IGNhcmQgZGF0YS5cbiAgICovXG4gIEBJbnB1dCgpIHBheW1lbnRDYXJkOiBQYXltZW50Q2FyZCB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb2YgaG93IHRoZSBjYXJkIG51bWJlciBzaG91bGQgYmUgZm9ybWF0dGVkLlxuICAgKi9cbiAgQElucHV0KCkgcGF5bWVudENhcmROdW1iZXJGb3JtYXQ6IFBheW1lbnRDYXJkTnVtYmVyRm9ybWF0ID0gRGVmYXVsdFBheW1lbnRDYXJkTnVtYmVyRm9ybWF0O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMucGF5bWVudENhcmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFwicGF5bWVudENhcmRcIiBpbnB1dCBpcyByZXF1aXJlZCBpbiBcIiR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfVwiYCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZXMoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5wYXltZW50Q2FyZCAmJiB0aGlzLnBheW1lbnRDYXJkLmNhcmROYW1lKSB7XG4gICAgICBjb25zdCBjbGFzc05hbWVQb3N0Zml4ID0gdGhpcy5wYXltZW50Q2FyZC5jYXJkTmFtZVxuICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAucmVwbGFjZSgvW15hLXpBLVowLTkgXS9nLCAnICcpXG4gICAgICAgIC50cmltKClcbiAgICAgICAgLnJlcGxhY2UoL1xccy9nLCAnLScpXG4gICAgICAgIC5yZXBsYWNlKC8tezIsfS9nLCAnLScpO1xuXG4gICAgICByZXR1cm4gY2xhc3NOYW1lUG9zdGZpeCA/IGAke2NsYXNzTmFtZVByZWZpeH0ke2NsYXNzTmFtZVBvc3RmaXh9YCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYmItcGF5bWVudC1jYXJkXCIgW25nQ2xhc3NdPVwiY2xhc3NOYW1lc1wiPlxuICA8ZGl2IGNsYXNzPVwiYmItcGF5bWVudC1jYXJkX19jb250YWluZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYmItcGF5bWVudC1jYXJkX19sb2dvXCI+XG4gICAgICA8YmItbG9nby11aSB0eXBlPVwiZW1ibGVtXCIgW2lzSW52ZXJzZV09XCJ0cnVlXCI+PC9iYi1sb2dvLXVpPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJiYi1wYXltZW50LWNhcmRfX3ZlbmRvclwiPlxuICAgICAgPGJiLWNhcmQtdmVuZG9yLXVpIFt2ZW5kb3JdPVwicGF5bWVudENhcmQ/LnZlbmRvclwiPjwvYmItY2FyZC12ZW5kb3ItdWk+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImJiLXBheW1lbnQtY2FyZF9fbnVtYmVyXCI+XG4gICAgICB7eyBwYXltZW50Q2FyZD8ubnVtYmVyIHwgcGF5bWVudENhcmROdW1iZXI6IHBheW1lbnRDYXJkTnVtYmVyRm9ybWF0IH19XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImJiLXBheW1lbnQtY2FyZF9fbmFtZVwiPlxuICAgICAge3sgcGF5bWVudENhcmQ/Lm5hbWUgfX1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYmItcGF5bWVudC1jYXJkX19leHBpcmF0aW9uLWRhdGVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1wYXltZW50LWNhcmRfX2V4cGlyYXRpb24tZGF0ZS1sYWJlbFwiIGkxOG49XCJFeHBpcmF0aW9uIGRhdGUgbGFiZWxAQHBheW1lbnRDYXJkLmV4cGlyYXRpb25EYXRlTGFiZWxcIj5cbiAgICAgICAgVkFMSUQgVEhSVVxuICAgICAgPC9kaXY+XG4gICAgICA8c3BhbiBjbGFzcz1cImJiLXBheW1lbnQtY2FyZF9fZXhwaXJhdGlvbi1kYXRlLWRhdGVcIj5cbiAgICAgICAge3sgcGF5bWVudENhcmQ/LmV4cGlyYXRpb25EYXRlIHwgZGF0ZTogJ01NL3l5JyB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19