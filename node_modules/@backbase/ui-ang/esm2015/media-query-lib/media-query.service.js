import { Inject, Injectable, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { switchMap } from 'rxjs/operators';
import { from, Observable, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/css-variables-lib";
/**
 * @name MediaQueryService
 *
 * @dynamic (to suppress error with resolving Document type during compilation)
 *
 * @description
 * MediaQueryService is a utility for evaluating media queries and reacting to their changing.
 *
 * @example
 * import { MediaQueryService } from '@backbase/foundation-ang/ui';
 *
 * @Component({...})
 * class MyComponent {
 *
 *   constructor(private readonly mediaQueryService: MediaQueryService) {}
 *
 *   // with standard grid breakpoint
 *   readonly isStandardMdMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'md');
 *   // custom value
 *   readonly isCustomMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 500);
 */
export class MediaQueryService {
    constructor(document, cssVariablesService, ngZone) {
        this.document = document;
        this.cssVariablesService = cssVariablesService;
        this.ngZone = ngZone;
    }
    /**
     * Observe media changes for current window.
     *
     * @param value - breakpoint value (could be custom number/standard grid breakpoint)
     * @param type - breakpoint type
     */
    isMediaBreakpointMatches(type, value) {
        const isCustomBreakpoint = typeof value === 'number';
        if (!isCustomBreakpoint && !this.cssVariablesService) {
            throw new Error('In order to use media breakpoints, please add provider for CssVariablesService.');
        }
        const mediaBreakpointValue$ = isCustomBreakpoint
            ? of(`${value}px`)
            : from(this.cssVariablesService.getCssVariable(`--breakpoint-${value}`));
        return mediaBreakpointValue$.pipe(switchMap((mediaWidth) => {
            const mediaQueryList = this.document.defaultView.matchMedia(`(${type}: ${mediaWidth})`);
            return this.getMediaBreakpoints(mediaQueryList);
        }));
    }
    getMediaBreakpoints(mediaQueryList) {
        return new Observable((observer) => {
            /**
             *   MediaQueryList inherited form EventTarget in some browsers.
             *   Therefore methods like `addEventListener` or `removeEventListener` doesn't work in Safari and IE.
             *   For more details see:
             *   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility
             */
            const isFunctionAvailable = Boolean(mediaQueryList.addEventListener);
            const mediaListener = ({ matches }) => {
                observer.next(matches);
                /**
                 * Safari and IE does not inherit Event interface.
                 * It means that on media match, event will not be dispatched and Angular will not update UI.
                 * Simulating async event to cover this gap.
                 */
                if (this.ngZone.isStable) {
                    this.ngZone.run(() => Promise.resolve());
                }
            };
            // emit initial match
            observer.next(mediaQueryList.matches);
            if (isFunctionAvailable) {
                mediaQueryList.addEventListener('change', mediaListener);
            }
            else {
                mediaQueryList.addListener(mediaListener);
            }
            return () => {
                if (isFunctionAvailable) {
                    mediaQueryList.removeEventListener('change', mediaListener);
                }
                else {
                    mediaQueryList.removeListener(mediaListener);
                }
            };
        });
    }
}
MediaQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryService, deps: [{ token: DOCUMENT }, { token: i1.CssVariablesService, optional: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
MediaQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MediaQueryService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.CssVariablesService, decorators: [{
                    type: Optional
                }] }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtcXVlcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL21lZGlhLXF1ZXJ5LWxpYi9tZWRpYS1xdWVyeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFVLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7O0FBTTVDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CRztBQUVILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUIsWUFDcUMsUUFBa0IsRUFDeEIsbUJBQXdDLEVBQ3BELE1BQWM7UUFGSSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ3hCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDcEQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUM5QixDQUFDO0lBRUo7Ozs7O09BS0c7SUFDSCx3QkFBd0IsQ0FBQyxJQUErQixFQUFFLEtBQWdDO1FBQ3hGLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO1FBRXJELElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUNwRCxNQUFNLElBQUksS0FBSyxDQUFDLGlGQUFpRixDQUFDLENBQUM7U0FDcEc7UUFFRCxNQUFNLHFCQUFxQixHQUFHLGtCQUFrQjtZQUM5QyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUM7WUFDbEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLGdCQUFnQixLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFM0UsT0FBTyxxQkFBcUIsQ0FBQyxJQUFJLENBQy9CLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sY0FBYyxHQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBc0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLEtBQUssVUFBVSxHQUFHLENBQUMsQ0FBQztZQUVwRyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVPLG1CQUFtQixDQUFDLGNBQThCO1FBQ3hELE9BQU8sSUFBSSxVQUFVLENBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUMxQzs7Ozs7ZUFLRztZQUNILE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sYUFBYSxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQXVCLEVBQUUsRUFBRTtnQkFDekQsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFdkI7Ozs7bUJBSUc7Z0JBQ0gsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtvQkFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7aUJBQzFDO1lBQ0gsQ0FBQyxDQUFDO1lBRUYscUJBQXFCO1lBQ3JCLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXRDLElBQUksbUJBQW1CLEVBQUU7Z0JBQ3ZCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDMUQ7aUJBQU07Z0JBQ0wsY0FBYyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUMzQztZQUVELE9BQU8sR0FBRyxFQUFFO2dCQUNWLElBQUksbUJBQW1CLEVBQUU7b0JBQ3ZCLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7aUJBQzdEO3FCQUFNO29CQUNMLGNBQWMsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQzlDO1lBQ0gsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzsrR0F4RVUsaUJBQWlCLGtCQUVsQixRQUFRO21IQUZQLGlCQUFpQjs0RkFBakIsaUJBQWlCO2tCQUQ3QixVQUFVOzBEQUdzQyxRQUFROzBCQUFwRCxNQUFNOzJCQUFDLFFBQVE7OzBCQUNmLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ3NzVmFyaWFibGVzU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvY3NzLXZhcmlhYmxlcy1saWInO1xuXG5leHBvcnQgdHlwZSBNZWRpYUJyZWFrcG9pbnRzID0gJ3hzJyB8ICdzbScgfCAnbWQnIHwgJ2xnJyB8ICd4bCc7XG5cbi8qKlxuICogQG5hbWUgTWVkaWFRdWVyeVNlcnZpY2VcbiAqXG4gKiBAZHluYW1pYyAodG8gc3VwcHJlc3MgZXJyb3Igd2l0aCByZXNvbHZpbmcgRG9jdW1lbnQgdHlwZSBkdXJpbmcgY29tcGlsYXRpb24pXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNZWRpYVF1ZXJ5U2VydmljZSBpcyBhIHV0aWxpdHkgZm9yIGV2YWx1YXRpbmcgbWVkaWEgcXVlcmllcyBhbmQgcmVhY3RpbmcgdG8gdGhlaXIgY2hhbmdpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IE1lZGlhUXVlcnlTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL3VpJztcbiAqXG4gKiBAQ29tcG9uZW50KHsuLi59KVxuICogY2xhc3MgTXlDb21wb25lbnQge1xuICpcbiAqICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBtZWRpYVF1ZXJ5U2VydmljZTogTWVkaWFRdWVyeVNlcnZpY2UpIHt9XG4gKlxuICogICAvLyB3aXRoIHN0YW5kYXJkIGdyaWQgYnJlYWtwb2ludFxuICogICByZWFkb25seSBpc1N0YW5kYXJkTWRNZWRpYSQgPSB0aGlzLm1lZGlhUXVlcnlTZXJ2aWNlLmlzTWVkaWFCcmVha3BvaW50TWF0Y2hlcygnbWF4LXdpZHRoJywgJ21kJyk7XG4gKiAgIC8vIGN1c3RvbSB2YWx1ZVxuICogICByZWFkb25seSBpc0N1c3RvbU1lZGlhJCA9IHRoaXMubWVkaWFRdWVyeVNlcnZpY2UuaXNNZWRpYUJyZWFrcG9pbnRNYXRjaGVzKCdtYXgtd2lkdGgnLCA1MDApO1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWVkaWFRdWVyeVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50OiBEb2N1bWVudCxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHJlYWRvbmx5IGNzc1ZhcmlhYmxlc1NlcnZpY2U6IENzc1ZhcmlhYmxlc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBuZ1pvbmU6IE5nWm9uZSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlIG1lZGlhIGNoYW5nZXMgZm9yIGN1cnJlbnQgd2luZG93LlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgLSBicmVha3BvaW50IHZhbHVlIChjb3VsZCBiZSBjdXN0b20gbnVtYmVyL3N0YW5kYXJkIGdyaWQgYnJlYWtwb2ludClcbiAgICogQHBhcmFtIHR5cGUgLSBicmVha3BvaW50IHR5cGVcbiAgICovXG4gIGlzTWVkaWFCcmVha3BvaW50TWF0Y2hlcyh0eXBlOiAnbWF4LXdpZHRoJyB8ICdtaW4td2lkdGgnLCB2YWx1ZTogTWVkaWFCcmVha3BvaW50cyB8IG51bWJlcik6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGlzQ3VzdG9tQnJlYWtwb2ludCA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG5cbiAgICBpZiAoIWlzQ3VzdG9tQnJlYWtwb2ludCAmJiAhdGhpcy5jc3NWYXJpYWJsZXNTZXJ2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luIG9yZGVyIHRvIHVzZSBtZWRpYSBicmVha3BvaW50cywgcGxlYXNlIGFkZCBwcm92aWRlciBmb3IgQ3NzVmFyaWFibGVzU2VydmljZS4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBtZWRpYUJyZWFrcG9pbnRWYWx1ZSQgPSBpc0N1c3RvbUJyZWFrcG9pbnRcbiAgICAgID8gb2YoYCR7dmFsdWV9cHhgKVxuICAgICAgOiBmcm9tKHRoaXMuY3NzVmFyaWFibGVzU2VydmljZS5nZXRDc3NWYXJpYWJsZShgLS1icmVha3BvaW50LSR7dmFsdWV9YCkpO1xuXG4gICAgcmV0dXJuIG1lZGlhQnJlYWtwb2ludFZhbHVlJC5waXBlKFxuICAgICAgc3dpdGNoTWFwKChtZWRpYVdpZHRoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1lZGlhUXVlcnlMaXN0ID0gKHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXcgYXMgV2luZG93KS5tYXRjaE1lZGlhKGAoJHt0eXBlfTogJHttZWRpYVdpZHRofSlgKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZWRpYUJyZWFrcG9pbnRzKG1lZGlhUXVlcnlMaXN0KTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldE1lZGlhQnJlYWtwb2ludHMobWVkaWFRdWVyeUxpc3Q6IE1lZGlhUXVlcnlMaXN0KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPGJvb2xlYW4+KChvYnNlcnZlcikgPT4ge1xuICAgICAgLyoqXG4gICAgICAgKiAgIE1lZGlhUXVlcnlMaXN0IGluaGVyaXRlZCBmb3JtIEV2ZW50VGFyZ2V0IGluIHNvbWUgYnJvd3NlcnMuXG4gICAgICAgKiAgIFRoZXJlZm9yZSBtZXRob2RzIGxpa2UgYGFkZEV2ZW50TGlzdGVuZXJgIG9yIGByZW1vdmVFdmVudExpc3RlbmVyYCBkb2Vzbid0IHdvcmsgaW4gU2FmYXJpIGFuZCBJRS5cbiAgICAgICAqICAgRm9yIG1vcmUgZGV0YWlscyBzZWU6XG4gICAgICAgKiAgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NZWRpYVF1ZXJ5TGlzdCNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgICAgICAqL1xuICAgICAgY29uc3QgaXNGdW5jdGlvbkF2YWlsYWJsZSA9IEJvb2xlYW4obWVkaWFRdWVyeUxpc3QuYWRkRXZlbnRMaXN0ZW5lcik7XG4gICAgICBjb25zdCBtZWRpYUxpc3RlbmVyID0gKHsgbWF0Y2hlcyB9OiBNZWRpYVF1ZXJ5TGlzdEV2ZW50KSA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQobWF0Y2hlcyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhZmFyaSBhbmQgSUUgZG9lcyBub3QgaW5oZXJpdCBFdmVudCBpbnRlcmZhY2UuXG4gICAgICAgICAqIEl0IG1lYW5zIHRoYXQgb24gbWVkaWEgbWF0Y2gsIGV2ZW50IHdpbGwgbm90IGJlIGRpc3BhdGNoZWQgYW5kIEFuZ3VsYXIgd2lsbCBub3QgdXBkYXRlIFVJLlxuICAgICAgICAgKiBTaW11bGF0aW5nIGFzeW5jIGV2ZW50IHRvIGNvdmVyIHRoaXMgZ2FwLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHRoaXMubmdab25lLmlzU3RhYmxlKSB7XG4gICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gZW1pdCBpbml0aWFsIG1hdGNoXG4gICAgICBvYnNlcnZlci5uZXh0KG1lZGlhUXVlcnlMaXN0Lm1hdGNoZXMpO1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbkF2YWlsYWJsZSkge1xuICAgICAgICBtZWRpYVF1ZXJ5TGlzdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBtZWRpYUxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lZGlhUXVlcnlMaXN0LmFkZExpc3RlbmVyKG1lZGlhTGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbkF2YWlsYWJsZSkge1xuICAgICAgICAgIG1lZGlhUXVlcnlMaXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG1lZGlhTGlzdGVuZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lZGlhUXVlcnlMaXN0LnJlbW92ZUxpc3RlbmVyKG1lZGlhTGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4iXX0=