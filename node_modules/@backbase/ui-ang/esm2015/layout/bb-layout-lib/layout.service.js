import { Inject, Injectable, Optional } from '@angular/core';
import { merge, Subject, of, EMPTY } from 'rxjs';
import { distinctUntilChanged, map, shareReplay, filter, withLatestFrom, switchMap, tap } from 'rxjs/operators';
import { LAYOUT_CONFIG_TOKEN } from './layout.model';
import { NavigationEnd } from '@angular/router';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/media-query-lib";
import * as i2 from "@angular/router";
/**
 * ## Navigation Type Horizontal
 * - On large desktop show the menu in the topbar. On mobile show a side menu
 *
 * ## Navigation Type Vertical
 * - On large desktop, show the sidebar. Toggling collapses the nav items into icons.
 * - On tablet and small desktop, collapse the nav items into icons. Toggling shows the full nav items.
 * - On mobile, don't collapse the sidebar, but hide it. Toggling shows the sidebar.
 */
export class LayoutService {
    constructor(mediaQueryService, router, config) {
        this.mediaQueryService = mediaQueryService;
        this.router = router;
        this.config = config;
        this.isHighResolutionViewSubject = new Subject();
        this.isHighResolutionView$ = this.isHighResolutionViewSubject.asObservable();
        this.manuallyExpanded$ = new Subject();
        this.isNavExpanded = false;
        /**
         * Default breakpoint used by business
         */
        if (!this.config) {
            this.config = { collapseBreakpoint: 'xl' };
        }
        /**
         * Observing the changes for screen resize
         */
        const isLowResolutionView$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', this.config.collapseBreakpoint);
        /**
         * In mobile view after navigation to another route the sidebar should collapse
         */
        const collapseOnRouterNav$ = this.router.events.pipe(filter((event) => event instanceof NavigationEnd), withLatestFrom(isLowResolutionView$), switchMap(([, isLowResolutionView]) => (isLowResolutionView ? of(false) : EMPTY)));
        this.navigationExpanded$ = merge(isLowResolutionView$.pipe(map((isLowResolutionView) => {
            this.isHighResolutionViewSubject.next(!isLowResolutionView);
            return !isLowResolutionView;
        })), collapseOnRouterNav$, this.manuallyExpanded$).pipe(distinctUntilChanged(), shareReplay({ bufferSize: 1, refCount: true }), tap((isExpanded) => {
            this.isNavExpanded = isExpanded;
        }));
    }
    /**
     * Toggling navigation visibility
     */
    toggleNav() {
        this.isNavExpanded = !this.isNavExpanded;
        this.manuallyExpanded$.next(this.isNavExpanded);
    }
}
LayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutService, deps: [{ token: i1.MediaQueryService }, { token: i2.Router }, { token: LAYOUT_CONFIG_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
LayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.MediaQueryService }, { type: i2.Router }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LAYOUT_CONFIG_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9sYXlvdXQvYmItbGF5b3V0LWxpYi9sYXlvdXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoSCxPQUFPLEVBQWdCLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFVLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7O0FBRXhEOzs7Ozs7OztHQVFHO0FBSUgsTUFBTSxPQUFPLGFBQWE7SUFPeEIsWUFDbUIsaUJBQW9DLEVBQ3BDLE1BQWMsRUFDMkIsTUFBb0I7UUFGN0Qsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQzJCLFdBQU0sR0FBTixNQUFNLENBQWM7UUFUL0QsZ0NBQTJCLEdBQXFCLElBQUksT0FBTyxFQUFXLENBQUM7UUFDL0UsMEJBQXFCLEdBQXdCLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVyRixzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBQ3BELGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBTzVCOztXQUVHO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDO1NBQzVDO1FBRUQ7O1dBRUc7UUFDSCxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyx3QkFBd0IsQ0FDMUUsV0FBVyxFQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQy9CLENBQUM7UUFFRjs7V0FFRztRQUNILE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNsRCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssWUFBWSxhQUFhLENBQUMsRUFDakQsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEVBQ3BDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ2xGLENBQUM7UUFFRixJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUM5QixvQkFBb0IsQ0FBQyxJQUFJLENBQ3ZCLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLEVBQUU7WUFDMUIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFFNUQsT0FBTyxDQUFDLG1CQUFtQixDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUNILEVBQ0Qsb0JBQW9CLEVBQ3BCLElBQUksQ0FBQyxpQkFBaUIsQ0FDdkIsQ0FBQyxJQUFJLENBQ0osb0JBQW9CLEVBQUUsRUFDdEIsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFDOUMsR0FBRyxDQUFDLENBQUMsVUFBbUIsRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxTQUFTO1FBQ1AsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7MkdBN0RVLGFBQWEseUVBVUYsbUJBQW1COytHQVY5QixhQUFhLGNBRlosTUFBTTs0RkFFUCxhQUFhO2tCQUh6QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBV0ksUUFBUTs7MEJBQUksTUFBTTsyQkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBtZXJnZSwgU3ViamVjdCwgb2YsIEVNUFRZLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzaGFyZVJlcGxheSwgZmlsdGVyLCB3aXRoTGF0ZXN0RnJvbSwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBNZWRpYVF1ZXJ5U2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvbWVkaWEtcXVlcnktbGliJztcbmltcG9ydCB7IExheW91dENvbmZpZywgTEFZT1VUX0NPTkZJR19UT0tFTiB9IGZyb20gJy4vbGF5b3V0Lm1vZGVsJztcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvbkVuZCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbi8qKlxuICogIyMgTmF2aWdhdGlvbiBUeXBlIEhvcml6b250YWxcbiAqIC0gT24gbGFyZ2UgZGVza3RvcCBzaG93IHRoZSBtZW51IGluIHRoZSB0b3BiYXIuIE9uIG1vYmlsZSBzaG93IGEgc2lkZSBtZW51XG4gKlxuICogIyMgTmF2aWdhdGlvbiBUeXBlIFZlcnRpY2FsXG4gKiAtIE9uIGxhcmdlIGRlc2t0b3AsIHNob3cgdGhlIHNpZGViYXIuIFRvZ2dsaW5nIGNvbGxhcHNlcyB0aGUgbmF2IGl0ZW1zIGludG8gaWNvbnMuXG4gKiAtIE9uIHRhYmxldCBhbmQgc21hbGwgZGVza3RvcCwgY29sbGFwc2UgdGhlIG5hdiBpdGVtcyBpbnRvIGljb25zLiBUb2dnbGluZyBzaG93cyB0aGUgZnVsbCBuYXYgaXRlbXMuXG4gKiAtIE9uIG1vYmlsZSwgZG9uJ3QgY29sbGFwc2UgdGhlIHNpZGViYXIsIGJ1dCBoaWRlIGl0LiBUb2dnbGluZyBzaG93cyB0aGUgc2lkZWJhci5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIExheW91dFNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGlzSGlnaFJlc29sdXRpb25WaWV3U3ViamVjdDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIHJlYWRvbmx5IGlzSGlnaFJlc29sdXRpb25WaWV3JDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuaXNIaWdoUmVzb2x1dGlvblZpZXdTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICByZWFkb25seSBuYXZpZ2F0aW9uRXhwYW5kZWQkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICBwcml2YXRlIHJlYWRvbmx5IG1hbnVhbGx5RXhwYW5kZWQkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgcHJpdmF0ZSBpc05hdkV4cGFuZGVkID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZWRpYVF1ZXJ5U2VydmljZTogTWVkaWFRdWVyeVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSByb3V0ZXI6IFJvdXRlcixcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KExBWU9VVF9DT05GSUdfVE9LRU4pIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBMYXlvdXRDb25maWcsXG4gICkge1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgYnJlYWtwb2ludCB1c2VkIGJ5IGJ1c2luZXNzXG4gICAgICovXG4gICAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5jb25maWcgPSB7IGNvbGxhcHNlQnJlYWtwb2ludDogJ3hsJyB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9ic2VydmluZyB0aGUgY2hhbmdlcyBmb3Igc2NyZWVuIHJlc2l6ZVxuICAgICAqL1xuICAgIGNvbnN0IGlzTG93UmVzb2x1dGlvblZpZXckID0gdGhpcy5tZWRpYVF1ZXJ5U2VydmljZS5pc01lZGlhQnJlYWtwb2ludE1hdGNoZXMoXG4gICAgICAnbWF4LXdpZHRoJyxcbiAgICAgIHRoaXMuY29uZmlnLmNvbGxhcHNlQnJlYWtwb2ludCxcbiAgICApO1xuXG4gICAgLyoqXG4gICAgICogSW4gbW9iaWxlIHZpZXcgYWZ0ZXIgbmF2aWdhdGlvbiB0byBhbm90aGVyIHJvdXRlIHRoZSBzaWRlYmFyIHNob3VsZCBjb2xsYXBzZVxuICAgICAqL1xuICAgIGNvbnN0IGNvbGxhcHNlT25Sb3V0ZXJOYXYkID0gdGhpcy5yb3V0ZXIuZXZlbnRzLnBpcGUoXG4gICAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpLFxuICAgICAgd2l0aExhdGVzdEZyb20oaXNMb3dSZXNvbHV0aW9uVmlldyQpLFxuICAgICAgc3dpdGNoTWFwKChbLCBpc0xvd1Jlc29sdXRpb25WaWV3XSkgPT4gKGlzTG93UmVzb2x1dGlvblZpZXcgPyBvZihmYWxzZSkgOiBFTVBUWSkpLFxuICAgICk7XG5cbiAgICB0aGlzLm5hdmlnYXRpb25FeHBhbmRlZCQgPSBtZXJnZShcbiAgICAgIGlzTG93UmVzb2x1dGlvblZpZXckLnBpcGUoXG4gICAgICAgIG1hcCgoaXNMb3dSZXNvbHV0aW9uVmlldykgPT4ge1xuICAgICAgICAgIHRoaXMuaXNIaWdoUmVzb2x1dGlvblZpZXdTdWJqZWN0Lm5leHQoIWlzTG93UmVzb2x1dGlvblZpZXcpO1xuXG4gICAgICAgICAgcmV0dXJuICFpc0xvd1Jlc29sdXRpb25WaWV3O1xuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgICBjb2xsYXBzZU9uUm91dGVyTmF2JCxcbiAgICAgIHRoaXMubWFudWFsbHlFeHBhbmRlZCQsXG4gICAgKS5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWUgfSksXG4gICAgICB0YXAoKGlzRXhwYW5kZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgdGhpcy5pc05hdkV4cGFuZGVkID0gaXNFeHBhbmRlZDtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xpbmcgbmF2aWdhdGlvbiB2aXNpYmlsaXR5XG4gICAqL1xuICB0b2dnbGVOYXYoKSB7XG4gICAgdGhpcy5pc05hdkV4cGFuZGVkID0gIXRoaXMuaXNOYXZFeHBhbmRlZDtcbiAgICB0aGlzLm1hbnVhbGx5RXhwYW5kZWQkLm5leHQodGhpcy5pc05hdkV4cGFuZGVkKTtcbiAgfVxufVxuIl19