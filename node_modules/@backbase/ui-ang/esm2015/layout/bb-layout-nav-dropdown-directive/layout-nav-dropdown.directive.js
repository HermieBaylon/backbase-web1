import { Directive, ContentChildren } from '@angular/core';
import { RouterLinkActive, NavigationEnd } from '@angular/router';
import { filter, first, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class LayoutNavDropdownDirective {
    constructor(router, ngZone) {
        this.router = router;
        this.ngZone = ngZone;
        this.isActive = false;
    }
    ngAfterContentInit() {
        this.router.events
            .pipe(filter((event) => event instanceof NavigationEnd), switchMap((_) => this.ngZone.onStable.pipe(first())))
            .subscribe(() => {
            this.ngZone.run(() => {
                if (this.routerLinks) {
                    this.isActive = this.routerLinks.toArray().some((navLink) => navLink.isActive);
                }
            });
        });
    }
}
LayoutNavDropdownDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutNavDropdownDirective, deps: [{ token: i1.Router }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
LayoutNavDropdownDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: LayoutNavDropdownDirective, selector: "[bbLayoutNavDropdown]", queries: [{ propertyName: "routerLinks", predicate: RouterLinkActive, descendants: true }], exportAs: ["bbLayoutNavDropdown"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LayoutNavDropdownDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[bbLayoutNavDropdown]', exportAs: 'bbLayoutNavDropdown' }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i0.NgZone }]; }, propDecorators: { routerLinks: [{
                type: ContentChildren,
                args: [RouterLinkActive, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LW5hdi1kcm9wZG93bi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9sYXlvdXQvYmItbGF5b3V0LW5hdi1kcm9wZG93bi1kaXJlY3RpdmUvbGF5b3V0LW5hdi1kcm9wZG93bi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQTBELE1BQU0sZUFBZSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxnQkFBZ0IsRUFBVSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBRzFELE1BQU0sT0FBTywwQkFBMEI7SUFLckMsWUFBNkIsTUFBYyxFQUFtQixNQUFjO1FBQS9DLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBbUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUo1RSxhQUFRLEdBQUcsS0FBSyxDQUFDO0lBSThELENBQUM7SUFFaEYsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTthQUNmLElBQUksQ0FDSCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQTBCLEVBQUUsQ0FBQyxLQUFLLFlBQVksYUFBYSxDQUFDLEVBQ3pFLFNBQVMsQ0FBQyxDQUFDLENBQWdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQ3BFO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDbkIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO29CQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ2hGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O3dIQXBCVSwwQkFBMEI7NEdBQTFCLDBCQUEwQix5RkFHcEIsZ0JBQWdCOzRGQUh0QiwwQkFBMEI7a0JBRHRDLFNBQVM7bUJBQUMsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFO2tIQUlyQixXQUFXO3NCQUFwRSxlQUFlO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgQ29udGVudENoaWxkcmVuLCBBZnRlckNvbnRlbnRJbml0LCBRdWVyeUxpc3QsIE5nWm9uZSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlckxpbmtBY3RpdmUsIFJvdXRlciwgTmF2aWdhdGlvbkVuZCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmaWx0ZXIsIGZpcnN0LCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tiYkxheW91dE5hdkRyb3Bkb3duXScsIGV4cG9ydEFzOiAnYmJMYXlvdXROYXZEcm9wZG93bicgfSlcbmV4cG9ydCBjbGFzcyBMYXlvdXROYXZEcm9wZG93bkRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICBpc0FjdGl2ZSA9IGZhbHNlO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oUm91dGVyTGlua0FjdGl2ZSwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KSByb3V0ZXJMaW5rcz86IFF1ZXJ5TGlzdDxSb3V0ZXJMaW5rQWN0aXZlPjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHJvdXRlcjogUm91dGVyLCBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlci5ldmVudHNcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIoKGV2ZW50KTogZXZlbnQgaXMgTmF2aWdhdGlvbkVuZCA9PiBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpLFxuICAgICAgICBzd2l0Y2hNYXAoKF86IE5hdmlnYXRpb25FbmQpID0+IHRoaXMubmdab25lLm9uU3RhYmxlLnBpcGUoZmlyc3QoKSkpLFxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMucm91dGVyTGlua3MpIHtcbiAgICAgICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0aGlzLnJvdXRlckxpbmtzLnRvQXJyYXkoKS5zb21lKChuYXZMaW5rKSA9PiBuYXZMaW5rLmlzQWN0aXZlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==