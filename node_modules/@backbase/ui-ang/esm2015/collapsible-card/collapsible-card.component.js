import { Component, EventEmitter, Host, Input, Optional, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/collapsible-accordion";
import * as i2 from "@backbase/ui-ang/collapsible";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/keyboard-click-directive";
/**
 * @name CollapsibleCardComponent
 *
 * @description
 * Provides an expandable details-summary/body-header view.
 * Uses bb-collapsible-ui for a predefined template
 *
 * @a11y ariaLabelForIcon is discernible text for chevron icon
 */
export class CollapsibleCardComponent {
    constructor(bbCollapsibleAccordion) {
        this.bbCollapsibleAccordion = bbCollapsibleAccordion;
        this.open = false;
        /**
         * Accessible label for chevron icon.
         */
        this.ariaLabelForIcon = 'Chevron icon';
        /**
         * Accessible label for collapsible card
         */
        this.ariaLabel = 'toggle';
        /**
         * Whether chevron should be displayed.
         *
         * @default true
         */
        this.hasChevron = true;
        /**
         * Whether card should be highlighted.
         *
         * @default false
         */
        this.highlight = false;
        /**
         * Whether card should has shadow effect.
         *
         * @default true
         */
        this.shadow = true;
        /**
         * Card size
         *
         * @default 'md'
         */
        this.size = 'md';
        this.isOpenChange = new EventEmitter();
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.registerNestedPanel(this);
        }
    }
    /**
     * Toggles the content.
     */
    set isOpen(v) {
        this.open = v;
        this.isOpenChange.emit(v);
    }
    get isOpen() {
        return this.open;
    }
    ngOnDestroy() {
        if (this.bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion.unregisterNestedPanel(this);
        }
    }
    toggle() {
        this.isOpen = !this.isOpen;
    }
}
CollapsibleCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardComponent, deps: [{ token: i1.CollapsibleAccordionComponent, host: true, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CollapsibleCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleCardComponent, selector: "bb-collapsible-card-ui", inputs: { isOpen: "isOpen", ariaLabelForIcon: "ariaLabelForIcon", ariaLabel: ["aria-label", "ariaLabel"], hasChevron: "hasChevron", highlight: "highlight", shadow: "shadow", size: "size" }, outputs: { isOpenChange: "isOpenChange" }, ngImport: i0, template: "<bb-collapsible-ui\n  [(isOpen)]=\"isOpen\"\n  class=\"bb-card bb-card--collapsible bb-card--{{ size }}\"\n  [ngClass]=\"{\n    'bb-card--highlight': highlight,\n    'bb-card--shadowless': !shadow\n  }\"\n>\n  <ng-template bbCollapsibleHeader let-toggle=\"toggle\">\n    <div\n      data-role=\"bb-collapsible-card-header\"\n      class=\"bb-card__header bb-card__header--only-child\"\n      role=\"button\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-expanded]=\"isOpen\"\n      tabindex=\"0\"\n      (bbKeyboardClick)=\"toggle()\"\n    >\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--fill\"><ng-content select=\"[bbCollapsibleTitle]\"></ng-content></div>\n        <bb-icon-ui\n          [aria-label]=\"ariaLabelForIcon\"\n          *ngIf=\"hasChevron\"\n          class=\"bb-stack__item\"\n          name=\"{{ isOpen ? 'expand-less' : 'expand-more' }}\"\n          data-role=\"bb-collapsible-card-header__icon\"\n        ></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbCollapsibleBody>\n    <div class=\"bb-card__body\" data-role=\"bb-collapsible-card-body\">\n      <ng-content select=\"[bbCollapsibleBody]\"></ng-content>\n    </div>\n  </ng-template>\n</bb-collapsible-ui>\n", components: [{ type: i2.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i5.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-card-ui',
                    templateUrl: 'collapsible-card.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.CollapsibleAccordionComponent, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }]; }, propDecorators: { isOpen: [{
                type: Input
            }], ariaLabelForIcon: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], hasChevron: [{
                type: Input
            }], highlight: [{
                type: Input
            }], shadow: [{
                type: Input
            }], size: [{
                type: Input
            }], isOpenChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2libGUtY2FyZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9jb2xsYXBzaWJsZS1jYXJkL2NvbGxhcHNpYmxlLWNhcmQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvY29sbGFwc2libGUtY2FyZC9jb2xsYXBzaWJsZS1jYXJkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQWEsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7OztBQUtsRzs7Ozs7Ozs7R0FRRztBQUtILE1BQU0sT0FBTyx3QkFBd0I7SUFtRG5DLFlBR21CLHNCQUFxRDtRQUFyRCwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQStCO1FBckRoRSxTQUFJLEdBQUcsS0FBSyxDQUFDO1FBZXJCOztXQUVHO1FBQ00scUJBQWdCLEdBQUcsY0FBYyxDQUFDO1FBQzNDOztXQUVHO1FBQ2tCLGNBQVMsR0FBa0IsUUFBUSxDQUFDO1FBQ3pEOzs7O1dBSUc7UUFDTSxlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzNCOzs7O1dBSUc7UUFDTSxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQzNCOzs7O1dBSUc7UUFDTSxXQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCOzs7O1dBSUc7UUFDTSxTQUFJLEdBQXdCLElBQUksQ0FBQztRQUVoQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFPbkQsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDL0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQztJQXhERDs7T0FFRztJQUNILElBQ0ksTUFBTSxDQUFDLENBQVU7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUErQ0QsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQy9CLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRCxNQUFNO1FBQ0osSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQzs7c0hBckVVLHdCQUF3QjswR0FBeEIsd0JBQXdCLHVTQ2xCckMsZ3ZDQXFDQTs0RkRuQmEsd0JBQXdCO2tCQUpwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFdBQVcsRUFBRSxpQ0FBaUM7aUJBQy9DOzswQkFxREksUUFBUTs7MEJBQ1IsSUFBSTs0Q0E5Q0gsTUFBTTtzQkFEVCxLQUFLO2dCQWFHLGdCQUFnQjtzQkFBeEIsS0FBSztnQkFJZSxTQUFTO3NCQUE3QixLQUFLO3VCQUFDLFlBQVk7Z0JBTVYsVUFBVTtzQkFBbEIsS0FBSztnQkFNRyxTQUFTO3NCQUFqQixLQUFLO2dCQU1HLE1BQU07c0JBQWQsS0FBSztnQkFNRyxJQUFJO3NCQUFaLEtBQUs7Z0JBRUksWUFBWTtzQkFBckIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0LCBJbnB1dCwgT25EZXN0cm95LCBPcHRpb25hbCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2xsYXBzaWJsZUFjY29yZGlvbkNvbXBvbmVudCwgSUNvbGxhcHNpYmxlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9jb2xsYXBzaWJsZS1hY2NvcmRpb24nO1xuXG5leHBvcnQgdHlwZSBDb2xsYXBzaWJsZUNhcmRTaXplID0gJ3NtJyB8ICdtZCcgfCAnbGcnO1xuXG4vKipcbiAqIEBuYW1lIENvbGxhcHNpYmxlQ2FyZENvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUHJvdmlkZXMgYW4gZXhwYW5kYWJsZSBkZXRhaWxzLXN1bW1hcnkvYm9keS1oZWFkZXIgdmlldy5cbiAqIFVzZXMgYmItY29sbGFwc2libGUtdWkgZm9yIGEgcHJlZGVmaW5lZCB0ZW1wbGF0ZVxuICpcbiAqIEBhMTF5IGFyaWFMYWJlbEZvckljb24gaXMgZGlzY2VybmlibGUgdGV4dCBmb3IgY2hldnJvbiBpY29uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWNvbGxhcHNpYmxlLWNhcmQtdWknLFxuICB0ZW1wbGF0ZVVybDogJ2NvbGxhcHNpYmxlLWNhcmQuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBDb2xsYXBzaWJsZUNhcmRDb21wb25lbnQgaW1wbGVtZW50cyBJQ29sbGFwc2libGUsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgb3BlbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBjb250ZW50LlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGlzT3Blbih2OiBib29sZWFuKSB7XG4gICAgdGhpcy5vcGVuID0gdjtcbiAgICB0aGlzLmlzT3BlbkNoYW5nZS5lbWl0KHYpO1xuICB9XG5cbiAgZ2V0IGlzT3BlbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjY2Vzc2libGUgbGFiZWwgZm9yIGNoZXZyb24gaWNvbi5cbiAgICovXG4gIEBJbnB1dCgpIGFyaWFMYWJlbEZvckljb24gPSAnQ2hldnJvbiBpY29uJztcbiAgLyoqXG4gICAqIEFjY2Vzc2libGUgbGFiZWwgZm9yIGNvbGxhcHNpYmxlIGNhcmRcbiAgICovXG4gIEBJbnB1dCgnYXJpYS1sYWJlbCcpIGFyaWFMYWJlbDogc3RyaW5nIHwgbnVsbCA9ICd0b2dnbGUnO1xuICAvKipcbiAgICogV2hldGhlciBjaGV2cm9uIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIEBJbnB1dCgpIGhhc0NoZXZyb24gPSB0cnVlO1xuICAvKipcbiAgICogV2hldGhlciBjYXJkIHNob3VsZCBiZSBoaWdobGlnaHRlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIEBJbnB1dCgpIGhpZ2hsaWdodCA9IGZhbHNlO1xuICAvKipcbiAgICogV2hldGhlciBjYXJkIHNob3VsZCBoYXMgc2hhZG93IGVmZmVjdC5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgQElucHV0KCkgc2hhZG93ID0gdHJ1ZTtcbiAgLyoqXG4gICAqIENhcmQgc2l6ZVxuICAgKlxuICAgKiBAZGVmYXVsdCAnbWQnXG4gICAqL1xuICBASW5wdXQoKSBzaXplOiBDb2xsYXBzaWJsZUNhcmRTaXplID0gJ21kJztcblxuICBAT3V0cHV0KCkgaXNPcGVuQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEhvc3QoKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgYmJDb2xsYXBzaWJsZUFjY29yZGlvbjogQ29sbGFwc2libGVBY2NvcmRpb25Db21wb25lbnQsXG4gICkge1xuICAgIGlmICh0aGlzLmJiQ29sbGFwc2libGVBY2NvcmRpb24pIHtcbiAgICAgIHRoaXMuYmJDb2xsYXBzaWJsZUFjY29yZGlvbi5yZWdpc3Rlck5lc3RlZFBhbmVsKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmJiQ29sbGFwc2libGVBY2NvcmRpb24pIHtcbiAgICAgIHRoaXMuYmJDb2xsYXBzaWJsZUFjY29yZGlvbi51bnJlZ2lzdGVyTmVzdGVkUGFuZWwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMuaXNPcGVuID0gIXRoaXMuaXNPcGVuO1xuICB9XG59XG4iLCI8YmItY29sbGFwc2libGUtdWlcbiAgWyhpc09wZW4pXT1cImlzT3BlblwiXG4gIGNsYXNzPVwiYmItY2FyZCBiYi1jYXJkLS1jb2xsYXBzaWJsZSBiYi1jYXJkLS17eyBzaXplIH19XCJcbiAgW25nQ2xhc3NdPVwie1xuICAgICdiYi1jYXJkLS1oaWdobGlnaHQnOiBoaWdobGlnaHQsXG4gICAgJ2JiLWNhcmQtLXNoYWRvd2xlc3MnOiAhc2hhZG93XG4gIH1cIlxuPlxuICA8bmctdGVtcGxhdGUgYmJDb2xsYXBzaWJsZUhlYWRlciBsZXQtdG9nZ2xlPVwidG9nZ2xlXCI+XG4gICAgPGRpdlxuICAgICAgZGF0YS1yb2xlPVwiYmItY29sbGFwc2libGUtY2FyZC1oZWFkZXJcIlxuICAgICAgY2xhc3M9XCJiYi1jYXJkX19oZWFkZXIgYmItY2FyZF9faGVhZGVyLS1vbmx5LWNoaWxkXCJcbiAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgW2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIlxuICAgICAgW2F0dHIuYXJpYS1leHBhbmRlZF09XCJpc09wZW5cIlxuICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgIChiYktleWJvYXJkQ2xpY2spPVwidG9nZ2xlKClcIlxuICAgID5cbiAgICAgIDxkaXYgY2xhc3M9XCJiYi1zdGFja1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmItc3RhY2tfX2l0ZW0gYmItc3RhY2tfX2l0ZW0tLWZpbGxcIj48bmctY29udGVudCBzZWxlY3Q9XCJbYmJDb2xsYXBzaWJsZVRpdGxlXVwiPjwvbmctY29udGVudD48L2Rpdj5cbiAgICAgICAgPGJiLWljb24tdWlcbiAgICAgICAgICBbYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxGb3JJY29uXCJcbiAgICAgICAgICAqbmdJZj1cImhhc0NoZXZyb25cIlxuICAgICAgICAgIGNsYXNzPVwiYmItc3RhY2tfX2l0ZW1cIlxuICAgICAgICAgIG5hbWU9XCJ7eyBpc09wZW4gPyAnZXhwYW5kLWxlc3MnIDogJ2V4cGFuZC1tb3JlJyB9fVwiXG4gICAgICAgICAgZGF0YS1yb2xlPVwiYmItY29sbGFwc2libGUtY2FyZC1oZWFkZXJfX2ljb25cIlxuICAgICAgICA+PC9iYi1pY29uLXVpPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvbmctdGVtcGxhdGU+XG5cbiAgPG5nLXRlbXBsYXRlIGJiQ29sbGFwc2libGVCb2R5PlxuICAgIDxkaXYgY2xhc3M9XCJiYi1jYXJkX19ib2R5XCIgZGF0YS1yb2xlPVwiYmItY29sbGFwc2libGUtY2FyZC1ib2R5XCI+XG4gICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbYmJDb2xsYXBzaWJsZUJvZHldXCI+PC9uZy1jb250ZW50PlxuICAgIDwvZGl2PlxuICA8L25nLXRlbXBsYXRlPlxuPC9iYi1jb2xsYXBzaWJsZS11aT5cbiJdfQ==