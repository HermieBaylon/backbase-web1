import { Component, Input } from '@angular/core';
import { BrowserService, NAVIGATOR_TOKEN, navigatorFactory } from '@backbase/ui-ang/services';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
import * as i2 from "@angular/common";
import * as i3 from "@backbase/ui-ang/tooltip-directive";
/**
 * @name EllipsisComponent
 *
 * @description
 * Component that wraps text and shows ellipsis in case text does not fit.
 */
/** @dynamic */
export class EllipsisComponent {
    constructor(browserService) {
        this.browserService = browserService;
        this.isOpen = false;
        /**
         * Specifies the events that should trigger the tooltip (space separated strings). Defaults to 'click'.
         */
        this.tooltipTriggers = 'click';
        this._lineClamp = 0;
    }
    /**
     * Specifies after what text line apply truncating
     */
    set lineClamp(value) {
        this._lineClamp = Math.max(0, Math.floor(value));
    }
    get lineClamp() {
        return this._lineClamp;
    }
    get isIE() {
        return this.browserService.browserIsMSIE();
    }
    onMouseEnter(event) {
        const target = event.target;
        if (target.offsetWidth < target.scrollWidth) {
            this.isOpen = true;
        }
    }
    onMouseLeave() {
        this.isOpen = false;
    }
}
EllipsisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisComponent, deps: [{ token: i1.BrowserService }], target: i0.ɵɵFactoryTarget.Component });
EllipsisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EllipsisComponent, selector: "bb-ellipsis-ui", inputs: { text: "text", tooltipTriggers: "tooltipTriggers", lineClamp: "lineClamp" }, providers: [BrowserService, { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory }], ngImport: i0, template: "<div\n  class=\"bb-ellipsis\"\n  [ngClass]=\"{\n    'bb-ellipsis--single-line': !lineClamp || isIE,\n    'bb-ellipsis--line-clamp': lineClamp && !isIE\n  }\"\n  [style.-webkit-line-clamp]=\"lineClamp || 'none'\"\n  [style.line-clamp]=\"lineClamp || 'none'\"\n  [bbTooltip]=\"text\"\n  [triggers]=\"tooltipTriggers\"\n  [disableTooltip]=\"!isOpen\"\n  (mouseenter)=\"onMouseEnter($event)\"\n  (mouseleave)=\"onMouseLeave()\"\n>\n  <ng-container *ngIf=\"text\">{{ text }}</ng-container>\n  <ng-container *ngIf=\"!text\"><ng-content></ng-content></ng-container>\n  <div></div>\n  <!--fix for safari: removal of display standard tooltip -->\n</div>\n", directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-ellipsis-ui',
                    templateUrl: './ellipsis.component.html',
                    providers: [BrowserService, { provide: NAVIGATOR_TOKEN, useFactory: navigatorFactory }],
                }]
        }], ctorParameters: function () { return [{ type: i1.BrowserService }]; }, propDecorators: { text: [{
                type: Input
            }], tooltipTriggers: [{
                type: Input
            }], lineClamp: [{
                type: Input,
                args: ['lineClamp']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvZWxsaXBzaXMvZWxsaXBzaXMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvZWxsaXBzaXMvZWxsaXBzaXMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7QUFFOUY7Ozs7O0dBS0c7QUFDSCxlQUFlO0FBTWYsTUFBTSxPQUFPLGlCQUFpQjtJQXdCNUIsWUFBNkIsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBbkIzRCxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBRWY7O1dBRUc7UUFDTSxvQkFBZSxHQUFHLE9BQU8sQ0FBQztRQVkzQixlQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRXVDLENBQUM7SUFaL0Q7O09BRUc7SUFDSCxJQUNJLFNBQVMsQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUtELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWlCO1FBQzVCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFxQixDQUFDO1FBQzNDLElBQUksTUFBTSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFO1lBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDOzsrR0F2Q1UsaUJBQWlCO21HQUFqQixpQkFBaUIsK0hBRmpCLENBQUMsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQywwQkNiekYsd29CQW1CQTs0RkRKYSxpQkFBaUI7a0JBTDdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsV0FBVyxFQUFFLDJCQUEyQjtvQkFDeEMsU0FBUyxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztpQkFDeEY7cUdBS1UsSUFBSTtzQkFBWixLQUFLO2dCQU1HLGVBQWU7c0JBQXZCLEtBQUs7Z0JBTUYsU0FBUztzQkFEWixLQUFLO3VCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCcm93c2VyU2VydmljZSwgTkFWSUdBVE9SX1RPS0VOLCBuYXZpZ2F0b3JGYWN0b3J5IH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9zZXJ2aWNlcyc7XG5cbi8qKlxuICogQG5hbWUgRWxsaXBzaXNDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBvbmVudCB0aGF0IHdyYXBzIHRleHQgYW5kIHNob3dzIGVsbGlwc2lzIGluIGNhc2UgdGV4dCBkb2VzIG5vdCBmaXQuXG4gKi9cbi8qKiBAZHluYW1pYyAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItZWxsaXBzaXMtdWknLFxuICB0ZW1wbGF0ZVVybDogJy4vZWxsaXBzaXMuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtCcm93c2VyU2VydmljZSwgeyBwcm92aWRlOiBOQVZJR0FUT1JfVE9LRU4sIHVzZUZhY3Rvcnk6IG5hdmlnYXRvckZhY3RvcnkgfV0sXG59KVxuZXhwb3J0IGNsYXNzIEVsbGlwc2lzQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHdoaWNoIHNob3VsZCBiZSB0cnVuY2F0ZWQuXG4gICAqL1xuICBASW5wdXQoKSB0ZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGlzT3BlbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGV2ZW50cyB0aGF0IHNob3VsZCB0cmlnZ2VyIHRoZSB0b29sdGlwIChzcGFjZSBzZXBhcmF0ZWQgc3RyaW5ncykuIERlZmF1bHRzIHRvICdjbGljaycuXG4gICAqL1xuICBASW5wdXQoKSB0b29sdGlwVHJpZ2dlcnMgPSAnY2xpY2snO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgYWZ0ZXIgd2hhdCB0ZXh0IGxpbmUgYXBwbHkgdHJ1bmNhdGluZ1xuICAgKi9cbiAgQElucHV0KCdsaW5lQ2xhbXAnKVxuICBzZXQgbGluZUNsYW1wKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9saW5lQ2xhbXAgPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKHZhbHVlKSk7XG4gIH1cbiAgZ2V0IGxpbmVDbGFtcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9saW5lQ2xhbXA7XG4gIH1cbiAgcHJpdmF0ZSBfbGluZUNsYW1wID0gMDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGJyb3dzZXJTZXJ2aWNlOiBCcm93c2VyU2VydmljZSkge31cblxuICBnZXQgaXNJRSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5icm93c2VyU2VydmljZS5icm93c2VySXNNU0lFKCk7XG4gIH1cblxuICBvbk1vdXNlRW50ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKHRhcmdldC5vZmZzZXRXaWR0aCA8IHRhcmdldC5zY3JvbGxXaWR0aCkge1xuICAgICAgdGhpcy5pc09wZW4gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VMZWF2ZSgpIHtcbiAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICB9XG59XG4iLCI8ZGl2XG4gIGNsYXNzPVwiYmItZWxsaXBzaXNcIlxuICBbbmdDbGFzc109XCJ7XG4gICAgJ2JiLWVsbGlwc2lzLS1zaW5nbGUtbGluZSc6ICFsaW5lQ2xhbXAgfHwgaXNJRSxcbiAgICAnYmItZWxsaXBzaXMtLWxpbmUtY2xhbXAnOiBsaW5lQ2xhbXAgJiYgIWlzSUVcbiAgfVwiXG4gIFtzdHlsZS4td2Via2l0LWxpbmUtY2xhbXBdPVwibGluZUNsYW1wIHx8ICdub25lJ1wiXG4gIFtzdHlsZS5saW5lLWNsYW1wXT1cImxpbmVDbGFtcCB8fCAnbm9uZSdcIlxuICBbYmJUb29sdGlwXT1cInRleHRcIlxuICBbdHJpZ2dlcnNdPVwidG9vbHRpcFRyaWdnZXJzXCJcbiAgW2Rpc2FibGVUb29sdGlwXT1cIiFpc09wZW5cIlxuICAobW91c2VlbnRlcik9XCJvbk1vdXNlRW50ZXIoJGV2ZW50KVwiXG4gIChtb3VzZWxlYXZlKT1cIm9uTW91c2VMZWF2ZSgpXCJcbj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInRleHRcIj57eyB0ZXh0IH19PC9uZy1jb250YWluZXI+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCIhdGV4dFwiPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L25nLWNvbnRhaW5lcj5cbiAgPGRpdj48L2Rpdj5cbiAgPCEtLWZpeCBmb3Igc2FmYXJpOiByZW1vdmFsIG9mIGRpc3BsYXkgc3RhbmRhcmQgdG9vbHRpcCAtLT5cbjwvZGl2PlxuIl19