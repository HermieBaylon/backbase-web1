import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class IsContentTruncatedDirective {
    constructor(elementRef, cd) {
        this.elementRef = elementRef;
        this.cd = cd;
    }
    ngAfterViewInit() {
        if (!this.hostRef.setIsContentTruncated) {
            throw new Error('"hostRef" should implement "CheckContentTruncationBehaviour" interface to set truncation status');
        }
        setTimeout(() => {
            this.setIsContentTruncatedInParentComponent();
        });
    }
    setIsContentTruncatedInParentComponent() {
        const isContentTruncated = this.isContentTruncated(this.elementRef.nativeElement);
        this.hostRef.setIsContentTruncated(isContentTruncated);
        this.cd.markForCheck();
    }
    isContentTruncated({ offsetHeight, scrollHeight }) {
        return offsetHeight < scrollHeight;
    }
}
IsContentTruncatedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IsContentTruncatedDirective, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
IsContentTruncatedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IsContentTruncatedDirective, selector: "[bbIsContentTruncated]", inputs: { hostRef: "hostRef" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IsContentTruncatedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIsContentTruncated]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { hostRef: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtY29udGVudC10cnVuY2F0ZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvZWxsaXBzaXMvZGlyZWN0aXZlcy9pcy1jb250ZW50LXRydW5jYXRlZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFxQixTQUFTLEVBQWMsS0FBSyxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFZL0YsTUFBTSxPQUFPLDJCQUEyQjtJQUN0QyxZQUE2QixVQUFzQixFQUFtQixFQUFxQjtRQUE5RCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQW1CLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBQUcsQ0FBQztJQUkvRixlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FDYixpR0FBaUcsQ0FDbEcsQ0FBQztTQUNIO1FBQ0QsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLHNDQUFzQztRQUM1QyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQWU7UUFDcEUsT0FBTyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ3JDLENBQUM7O3lIQXhCVSwyQkFBMkI7NkdBQTNCLDJCQUEyQjs0RkFBM0IsMkJBQTJCO2tCQUh2QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7aUJBQ25DO2lJQUlVLE9BQU87c0JBQWYsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hlY2tDb250ZW50VHJ1bmNhdGlvbkJlaGF2aW91ciB7XG4gIC8qKlxuICAgKiBTZXQgdHJ1bmNhdGlvbiBzdGF0dXMgb2Ygbm90aWZpY2F0aW9uIG1lc3NhZ2VcbiAgICovXG4gIHNldElzQ29udGVudFRydW5jYXRlZChpc1RydW5jYXRlZDogYm9vbGVhbik6IHZvaWQ7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYklzQ29udGVudFRydW5jYXRlZF0nLFxufSlcbmV4cG9ydCBjbGFzcyBJc0NvbnRlbnRUcnVuY2F0ZWREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlYWRvbmx5IGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBASW5wdXQoKSBob3N0UmVmITogQ2hlY2tDb250ZW50VHJ1bmNhdGlvbkJlaGF2aW91cjtcblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLmhvc3RSZWYuc2V0SXNDb250ZW50VHJ1bmNhdGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdcImhvc3RSZWZcIiBzaG91bGQgaW1wbGVtZW50IFwiQ2hlY2tDb250ZW50VHJ1bmNhdGlvbkJlaGF2aW91clwiIGludGVyZmFjZSB0byBzZXQgdHJ1bmNhdGlvbiBzdGF0dXMnLFxuICAgICAgKTtcbiAgICB9XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNldElzQ29udGVudFRydW5jYXRlZEluUGFyZW50Q29tcG9uZW50KCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNldElzQ29udGVudFRydW5jYXRlZEluUGFyZW50Q29tcG9uZW50KCk6IHZvaWQge1xuICAgIGNvbnN0IGlzQ29udGVudFRydW5jYXRlZCA9IHRoaXMuaXNDb250ZW50VHJ1bmNhdGVkKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICB0aGlzLmhvc3RSZWYuc2V0SXNDb250ZW50VHJ1bmNhdGVkKGlzQ29udGVudFRydW5jYXRlZCk7XG4gICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNDb250ZW50VHJ1bmNhdGVkKHsgb2Zmc2V0SGVpZ2h0LCBzY3JvbGxIZWlnaHQgfTogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb2Zmc2V0SGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0O1xuICB9XG59XG4iXX0=