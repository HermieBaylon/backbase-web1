import { Component, Input, Optional, SkipSelf } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name CollapsibleAccordionComponent
 *
 * @description
 * Component that groups Collapsible components to show them in an accordion fashion.
 * It can assure that only one Collapsible panel can be opened at a time
 */
export class CollapsibleAccordionComponent {
    constructor(parentAccordion) {
        this.parentAccordion = parentAccordion;
        /**
         * Assures that only one Collapsible panel can be opened at a time.
         */
        this.closeOthers = false;
        /**
         * When true displays the first panel on load.
         */
        this.openFirst = false;
        this.collapsiblePanels = new Map();
        this.nestedAccordions = new Set();
        this.closeOtherPanels = (panel) => (value) => {
            if (!value) {
                return;
            }
            if (!this.closeOthers) {
                return;
            }
            this.collapsiblePanels.forEach((_, item) => {
                if (panel !== item) {
                    item.isOpen = false;
                }
            });
        };
    }
    /**
     * When true the Accordion will inherit the parent Accordion behaviour.
     */
    set obeyParentAccordion(obey) {
        if (!this.parentAccordion) {
            return;
        }
        if (obey) {
            this.parentAccordion.registerNestedAccordion(this);
        }
        else {
            this.parentAccordion.unregisterNestedAccordion(this);
        }
    }
    ngOnDestroy() {
        this.obeyParentAccordion = false;
    }
    registerNestedAccordion(childAccordion) {
        this.nestedAccordions.add(childAccordion);
    }
    unregisterNestedAccordion(childAccordion) {
        this.nestedAccordions.delete(childAccordion);
    }
    registerNestedPanel(panel) {
        const subscription = panel.isOpenChange.subscribe(this.closeOtherPanels(panel));
        this.collapsiblePanels.set(panel, subscription);
    }
    unregisterNestedPanel(panel) {
        const subscription = this.collapsiblePanels.get(panel);
        if (subscription) {
            subscription.unsubscribe();
        }
        this.collapsiblePanels.delete(panel);
    }
    expandAll() {
        if (this.closeOthers) {
            return;
        }
        this.setPanelsState(true);
        this.setNestedAccordionsState(true);
    }
    collapseAll() {
        this.setPanelsState(false);
        this.setNestedAccordionsState(false);
    }
    ngAfterContentInit() {
        if (this.openFirst) {
            this.collapsiblePanels.keys().next().value.isOpen = true;
        }
    }
    setPanelsState(isOpen) {
        this.collapsiblePanels.forEach((_, panel) => (panel.isOpen = isOpen));
    }
    setNestedAccordionsState(isOpen) {
        this.nestedAccordions.forEach((accordion) => {
            if (isOpen) {
                accordion.expandAll();
            }
            else {
                accordion.collapseAll();
            }
        });
    }
}
CollapsibleAccordionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionComponent, deps: [{ token: CollapsibleAccordionComponent, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Component });
CollapsibleAccordionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleAccordionComponent, selector: "bb-collapsible-accordion-ui", inputs: { closeOthers: "closeOthers", openFirst: "openFirst", obeyParentAccordion: "obeyParentAccordion" }, ngImport: i0, template: "<ng-content></ng-content>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CollapsibleAccordionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-collapsible-accordion-ui',
                    templateUrl: 'collapsible-accordion.component.html',
                }]
        }], ctorParameters: function () { return [{ type: CollapsibleAccordionComponent, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { closeOthers: [{
                type: Input
            }], openFirst: [{
                type: Input
            }], obeyParentAccordion: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,