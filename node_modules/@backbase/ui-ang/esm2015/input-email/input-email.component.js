import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewChild, } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
import * as i2 from "@backbase/foundation-ang/future";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@backbase/ui-ang/focus";
/**
 * @name InputEmailComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that displays a email input.
 */
export class InputEmailComponent extends InputBaseComponent {
    constructor(domAttrService, elem, renderer2, cd, deprecationsService) {
        super(cd, deprecationsService);
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        /**
         * The placeholder for the email input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Whether the email input is readonly.
         */
        this.readonly = false;
    }
    validate(control) {
        return Validators.email(control);
    }
    ngAfterViewInit() {
        if (!this.ariaLabel) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);
        }
    }
}
InputEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputEmailComponent, selector: "bb-input-email-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", minLength: "minLength", readonly: "readonly", autocomplete: "autocomplete" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputEmailComponent),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => InputEmailComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputEmail"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\">{{ label }}</label>\n<input\n  id=\"{{ id }}\"\n  #inputEmail\n  [attr.aria-autocomplete]=\"ariaAutocomplete\"\n  [attr.aria-controls]=\"ariaControls\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.aria-activedescendant]=\"ariaActivedescendant\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  (blur)=\"onBlur()\"\n  type=\"email\"\n  class=\"form-control\"\n  (focus)=\"onFocus()\"\n  [disabled]=\"disabled\"\n  [readOnly]=\"readonly\"\n  [placeholder]=\"placeholder\"\n  [required]=\"required\"\n  [bbFocus]=\"autofocus\"\n  [attr.maxlength]=\"maxLength\"\n  [attr.minlength]=\"minLength\"\n  [attr.autocomplete]=\"autocomplete\"\n/>\n", directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }, { type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i4.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-email-ui',
                    templateUrl: './input-email.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputEmailComponent),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef(() => InputEmailComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }]; }, propDecorators: { placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], readonly: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], inputEl: [{
                type: ViewChild,
                args: ['inputEmail']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZW1haWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvaW5wdXQtZW1haWwvaW5wdXQtZW1haWwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvaW5wdXQtZW1haWwvaW5wdXQtZW1haWwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHVCQUF1QixFQUV2QixTQUFTLEVBRVQsVUFBVSxFQUNWLEtBQUssRUFFTCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbkUsT0FBTyxFQUVMLGFBQWEsRUFDYixpQkFBaUIsRUFHakIsVUFBVSxHQUNYLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFJeEI7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFrQkgsTUFBTSxPQUFPLG1CQUFvQixTQUFRLGtCQUFrQjtJQXlCekQsWUFDbUIsY0FBb0MsRUFDcEMsSUFBZ0IsRUFDaEIsU0FBb0IsRUFDbEIsRUFBcUIsRUFDckIsbUJBQXdDO1FBRTNELEtBQUssQ0FBQyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQU5kLG1CQUFjLEdBQWQsY0FBYyxDQUFzQjtRQUNwQyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDbEIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDckIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQTdCN0Q7O1dBRUc7UUFDTSxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQVMxQjs7V0FFRztRQUNNLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFpQjFCLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBd0I7UUFDL0IsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQ3ZCLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQzFDLElBQUksQ0FBQyxTQUFTLENBQ2YsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7aUhBL0NVLG1CQUFtQjtxR0FBbkIsbUJBQW1CLHdMQWJuQjtRQUNUO1lBQ0UsT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO1lBQ2xELEtBQUssRUFBRSxJQUFJO1NBQ1o7UUFDRDtZQUNFLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUM7WUFDbEQsS0FBSyxFQUFFLElBQUk7U0FDWjtLQUNGLHdKQ3ZESCxxN0JBNkJBOzRGRDRCYSxtQkFBbUI7a0JBakIvQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFdBQVcsRUFBRSw4QkFBOEI7b0JBQzNDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUM7NEJBQ2xELEtBQUssRUFBRSxJQUFJO3lCQUNaO3dCQUNEOzRCQUNFLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQzs0QkFDbEQsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7aUJBQ0Y7OE5BS1UsV0FBVztzQkFBbkIsS0FBSztnQkFJRyxTQUFTO3NCQUFqQixLQUFLO2dCQUlHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBSUcsUUFBUTtzQkFBaEIsS0FBSztnQkFLRyxZQUFZO3NCQUFwQixLQUFLO2dCQUVtQixPQUFPO3NCQUEvQixTQUFTO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgZm9yd2FyZFJlZixcbiAgSW5wdXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElucHV0QmFzZUNvbXBvbmVudCB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvYmFzZS1jbGFzc2VzJztcbmltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCxcbiAgTkdfVkFMSURBVE9SUyxcbiAgTkdfVkFMVUVfQUNDRVNTT1IsXG4gIFZhbGlkYXRpb25FcnJvcnMsXG4gIFZhbGlkYXRvcixcbiAgVmFsaWRhdG9ycyxcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRG9tQXR0cmlidXRlc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3NlcnZpY2VzJztcbmltcG9ydCB7IERlcHJlY2F0aW9uc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvZnV0dXJlJztcblxuLyoqXG4gKiBAbmFtZSBJbnB1dEVtYWlsQ29tcG9uZW50XG4gKlxuICogQGExMXkgQ3VycmVudCBjb21wb25lbnQgcHJvdmlkZSBvcHRpb24gdG8gcGFzcyBuZWVkZWQgYWNjZXNzaWJpbGl0eVxuICogYXR0cmlidXRlcy4gWW91IG5lZWQgdG8gdGFrZSBjYXJlIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgcmVxdWlyZWQgaW4geW91ciBjYXNlIDpcbiAqICAtIHJvbGVcbiAqICAtIGFyaWEtYWN0aXZlZGVzY2VuZGFudFxuICogIC0gYXJpYS1kZXNjcmliZWRieVxuICogIC0gYXJpYS1leHBhbmRlZFxuICogIC0gYXJpYS1pbnZhbGlkXG4gKiAgLSBhcmlhLWxhYmVsXG4gKiAgLSBhcmlhLWxhYmVsbGVkYnlcbiAqICAtIGFyaWEtb3duc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgZGlzcGxheXMgYSBlbWFpbCBpbnB1dC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItaW5wdXQtZW1haWwtdWknLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtZW1haWwuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBJbnB1dEVtYWlsQ29tcG9uZW50KSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IElucHV0RW1haWxDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRFbWFpbENvbXBvbmVudCBleHRlbmRzIElucHV0QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIFZhbGlkYXRvciwgQWZ0ZXJWaWV3SW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgcGxhY2Vob2xkZXIgZm9yIHRoZSBlbWFpbCBpbnB1dC4gRGVmYXVsdHMgdG8gYW4gZW1wdHkgc3RyaW5nO1xuICAgKi9cbiAgQElucHV0KCkgcGxhY2Vob2xkZXIgPSAnJztcbiAgLyoqXG4gICAqIFRoZSBtYXhMZW5ndGggZm9yIHRoZSBlbWFpbCBpbnB1dC5cbiAgICovXG4gIEBJbnB1dCgpIG1heExlbmd0aDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlIG1pbkxlbmd0aCBmb3IgdGhlIGVtYWlsIGlucHV0LlxuICAgKi9cbiAgQElucHV0KCkgbWluTGVuZ3RoOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBlbWFpbCBpbnB1dCBpcyByZWFkb25seS5cbiAgICovXG4gIEBJbnB1dCgpIHJlYWRvbmx5ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBhdXRvY29tcGxldGUgdmFsdWUgb2YgZW5jbG9zZWQgaW5wdXQgY29udHJvbC5cbiAgICovXG4gIEBJbnB1dCgpIGF1dG9jb21wbGV0ZTogJ2VtYWlsJyB8ICdvZmYnIHwgJ29uJyB8IHVuZGVmaW5lZDtcblxuICBAVmlld0NoaWxkKCdpbnB1dEVtYWlsJykgaW5wdXRFbDogRWxlbWVudFJlZiB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRvbUF0dHJTZXJ2aWNlOiBEb21BdHRyaWJ1dGVzU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW06IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjI6IFJlbmRlcmVyMixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBkZXByZWNhdGlvbnNTZXJ2aWNlOiBEZXByZWNhdGlvbnNTZXJ2aWNlLFxuICApIHtcbiAgICBzdXBlcihjZCwgZGVwcmVjYXRpb25zU2VydmljZSk7XG4gIH1cblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgcmV0dXJuIFZhbGlkYXRvcnMuZW1haWwoY29udHJvbCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmFyaWFMYWJlbCkge1xuICAgICAgdGhpcy5kb21BdHRyU2VydmljZS5tb3ZlQXJpYUF0dHJpYnV0ZXMoXG4gICAgICAgIHRoaXMuZWxlbS5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLmlucHV0RWwgJiYgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMucmVuZGVyZXIyLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxsYWJlbCAqbmdJZj1cImxhYmVsXCIgZm9yPVwie3sgaWQgfX1cIj57eyBsYWJlbCB9fTwvbGFiZWw+XG48aW5wdXRcbiAgaWQ9XCJ7eyBpZCB9fVwiXG4gICNpbnB1dEVtYWlsXG4gIFthdHRyLmFyaWEtYXV0b2NvbXBsZXRlXT1cImFyaWFBdXRvY29tcGxldGVcIlxuICBbYXR0ci5hcmlhLWNvbnRyb2xzXT1cImFyaWFDb250cm9sc1wiXG4gIFthdHRyLmFyaWEtbGFiZWxdPVwiKCFsYWJlbCAmJiBhcmlhTGFiZWwpIHx8IG51bGxcIlxuICBbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XT1cImFyaWFEZXNjcmliZWRieVwiXG4gIFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJhcmlhTGFiZWxsZWRieVwiXG4gIFthdHRyLmFyaWEtZXhwYW5kZWRdPVwiYXJpYUV4cGFuZGVkXCJcbiAgW2F0dHIuYXJpYS1hY3RpdmVkZXNjZW5kYW50XT1cImFyaWFBY3RpdmVkZXNjZW5kYW50XCJcbiAgW2F0dHIucm9sZV09XCJyb2xlXCJcbiAgW2F0dHIuYXJpYS1pbnZhbGlkXT1cImFyaWFJbnZhbGlkXCJcbiAgW2F0dHIuYXJpYS1vd25zXT1cImFyaWFPd25zXCJcbiAgW25nTW9kZWxdPVwidmFsdWVcIlxuICAobmdNb2RlbENoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKCRldmVudClcIlxuICAoYmx1cik9XCJvbkJsdXIoKVwiXG4gIHR5cGU9XCJlbWFpbFwiXG4gIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgKGZvY3VzKT1cIm9uRm9jdXMoKVwiXG4gIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gIFtyZWFkT25seV09XCJyZWFkb25seVwiXG4gIFtwbGFjZWhvbGRlcl09XCJwbGFjZWhvbGRlclwiXG4gIFtyZXF1aXJlZF09XCJyZXF1aXJlZFwiXG4gIFtiYkZvY3VzXT1cImF1dG9mb2N1c1wiXG4gIFthdHRyLm1heGxlbmd0aF09XCJtYXhMZW5ndGhcIlxuICBbYXR0ci5taW5sZW5ndGhdPVwibWluTGVuZ3RoXCJcbiAgW2F0dHIuYXV0b2NvbXBsZXRlXT1cImF1dG9jb21wbGV0ZVwiXG4vPlxuIl19