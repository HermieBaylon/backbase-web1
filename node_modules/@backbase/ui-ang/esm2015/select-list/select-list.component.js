import { Component, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { filter, distinctUntilChanged, debounceTime, map } from 'rxjs/operators';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
import * as i1 from "@ng-select/ng-select";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
// TODO: set a generic that extends to SelectListItemBase once Ivy check types step supports correctly types
export class SelectListComponent extends InputBaseComponent {
    constructor() {
        super(...arguments);
        /**
         * Flag to determine if the data in the list is loading
         */
        this.loading = false;
        /**
         * Placeholder text to display in the input
         * */
        this.placeholder = '';
        /**
         * Minimum number of characters required before searching for items
         * */
        this.minTermLength = 2;
        /**
         * Maximum number of selected items, 'none' means unlimited
         */
        this.maxSelectedItems = 'none';
        /**
         * Flag to determine if the list allows multiple selection.
         * */
        this.multiple = false;
        /**
         * A list of items to select from based on the input text.
         * */
        this.items = [];
        /**
         * Flag to determine if typeahead should be used to filter the items list.
         * If enabled the items list can not be updated asynchonously as the filtering
         * and the underlying data will get out of sync.
         */
        this.filterEnabled = true;
        /**
         * Output to capture value change event.
         */
        this.valueChange = this._valueChange;
        /**
         * Emitter when search is performed. Outputs search term
         */
        this.search = new EventEmitter();
        /**
         * Emitter when clear is performed.
         */
        this.clear = new EventEmitter();
        /**
         * Delay in ms between autocomplete updates.
         * */
        this.DEBOUNCE_TIME_MS = 500;
        /**
         * Observable of the typeahead input
         */
        this.typeaheadInput$ = new Subject();
        /**
         * Observable of the filtered items
         */
        this.filteredItems$ = this.typeaheadInput$.pipe(filter((term) => term !== null && term.length >= this.minTermLength), distinctUntilChanged(), debounceTime(this.DEBOUNCE_TIME_MS), map((term) => this.items.filter(({ name }) => name.toLowerCase().includes(term.toLowerCase()))));
    }
    writeValue(inputValue) {
        if (inputValue !== null) {
            super.writeValue(inputValue);
        }
        else {
            this.value = inputValue;
            this.cd.markForCheck();
        }
    }
    onSearch(event) {
        const searchTerm = typeof event === 'string' ? event : event.term;
        if (searchTerm.length >= this.minTermLength) {
            this.search.emit(searchTerm);
        }
    }
    ngOnChanges(changes) {
        var _a, _b, _c, _d;
        if (((_b = (_a = changes === null || changes === void 0 ? void 0 : changes.items) === null || _a === void 0 ? void 0 : _a.currentValue) === null || _b === void 0 ? void 0 : _b.length) > 0 && ((_c = this.ngSelect) === null || _c === void 0 ? void 0 : _c.isOpen) === false && ((_d = this.ngSelect) === null || _d === void 0 ? void 0 : _d.searchTerm)) {
            this.ngSelect.isOpen = true;
        }
    }
}
SelectListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
SelectListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectListComponent, selector: "bb-select-list-ui", inputs: { loading: "loading", placeholder: "placeholder", minTermLength: "minTermLength", maxSelectedItems: "maxSelectedItems", multiple: "multiple", items: "items", filterEnabled: "filterEnabled" }, outputs: { valueChange: "valueChange", search: "search", clear: "clear" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef(() => SelectListComponent),
        },
    ], viewQueries: [{ propertyName: "ngSelect", first: true, predicate: ["select"], descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<label *ngIf=\"label\" [attr.for]=\"id\" [attr.data-role]=\"'select-list-ui-label'\">{{ label }}</label>\n<ng-container *ngIf=\"filterEnabled; else filterDisabled\">\n  <ng-select\n    class=\"bb-select-list\"\n    bindLabel=\"name\"\n    [items]=\"filteredItems$ | async\"\n    [hideSelected]=\"true\"\n    [maxSelectedItems]=\"maxSelectedItems\"\n    [multiple]=\"multiple\"\n    [minTermLength]=\"minTermLength\"\n    [typeahead]=\"typeaheadInput$\"\n    [virtualScroll]=\"true\"\n    [placeholder]=\"placeholder\"\n    [attr.data-role]=\"id\"\n    [ngModel]=\"value\"\n    [loading]=\"loading\"\n    (ngModelChange)=\"onValueChange($event)\"\n    (search)=\"onSearch($event)\"\n    [labelForId]=\"id\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    (blur)=\"onBlur($event)\"\n    (focus)=\"onFocus($event)\"\n    (clear)=\"clear.emit()\"\n  >\n  </ng-select>\n</ng-container>\n\n<ng-template #filterDisabled>\n  <ng-select\n    #select\n    class=\"bb-select-list\"\n    bindLabel=\"name\"\n    [items]=\"items\"\n    [hideSelected]=\"true\"\n    [maxSelectedItems]=\"maxSelectedItems\"\n    [multiple]=\"multiple\"\n    [minTermLength]=\"minTermLength\"\n    [virtualScroll]=\"true\"\n    [placeholder]=\"placeholder\"\n    [attr.data-role]=\"id\"\n    [ngModel]=\"value\"\n    [loading]=\"loading\"\n    (ngModelChange)=\"onValueChange($event)\"\n    (search)=\"onSearch($event)\"\n    [labelForId]=\"id\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    (blur)=\"onBlur($event)\"\n    (focus)=\"onFocus($event)\"\n    (clear)=\"clear.emit()\"\n  >\n  </ng-select>\n</ng-template>\n", components: [{ type: i1.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-list-ui',
                    templateUrl: './select-list.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef(() => SelectListComponent),
                        },
                    ],
                }]
        }], propDecorators: { ngSelect: [{
                type: ViewChild,
                args: ['select']
            }], loading: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], minTermLength: [{
                type: Input
            }], maxSelectedItems: [{
                type: Input
            }], multiple: [{
                type: Input
            }], items: [{
                type: Input
            }], filterEnabled: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], search: [{
                type: Output
            }], clear: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,