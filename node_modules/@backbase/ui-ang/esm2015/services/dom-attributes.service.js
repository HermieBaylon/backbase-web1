import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Utility service for DOM manipulations
 */
export class DomAttributesService {
    constructor() {
        this.idPrefix = 'bb_element_';
        this.nextId = 0;
    }
    generateId() {
        return `${this.idPrefix}${this.nextId++}`;
    }
    moveAriaAttributes(hostEl, childEl, renderer2) {
        const nodeMap = hostEl.attributes;
        // CUT every aria attribute from the host element and PASTE it into the specified element
        Object.keys(nodeMap)
            .map((key) => nodeMap.item(Number(key)))
            .filter((item) => item && (item.name.startsWith('aria-') || item.name.toLowerCase() === 'arialabel'))
            .forEach((item) => {
            const { name: attrName, value: attrVal } = item;
            if (attrName.toLowerCase() === 'arialabel') {
                renderer2.setAttribute(childEl, 'aria-label', attrVal);
            }
            else {
                renderer2.setAttribute(childEl, attrName, attrVal);
            }
            renderer2.removeAttribute(hostEl, attrName);
        });
    }
    copyAriaAttributes(hostEl, childEl, renderer2) {
        const nodeMap = hostEl.attributes;
        Object.keys(nodeMap)
            .map((key) => nodeMap.item(Number(key)))
            .filter((item) => item && item.name.startsWith('aria-'))
            .forEach((item) => item && renderer2.setAttribute(childEl, item.name, item.value));
    }
}
DomAttributesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DomAttributesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLWF0dHJpYnV0ZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL3NlcnZpY2VzL2RvbS1hdHRyaWJ1dGVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQzs7QUFFbEU7O0dBRUc7QUFJSCxNQUFNLE9BQU8sb0JBQW9CO0lBSGpDO1FBSVUsYUFBUSxHQUFHLGFBQWEsQ0FBQztRQUN6QixXQUFNLEdBQUcsQ0FBQyxDQUFDO0tBOEJwQjtJQTVCUSxVQUFVO1FBQ2YsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELGtCQUFrQixDQUFDLE1BQW1CLEVBQUUsT0FBb0IsRUFBRSxTQUFvQjtRQUNoRixNQUFNLE9BQU8sR0FBaUIsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNoRCx5RkFBeUY7UUFDekYsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDakIsR0FBRyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQy9DLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxXQUFXLENBQUMsQ0FBQzthQUNwRyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNoQixNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBWSxDQUFDO1lBQ3hELElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLFdBQVcsRUFBRTtnQkFDMUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNO2dCQUNMLFNBQVMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNwRDtZQUNELFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELGtCQUFrQixDQUFDLE1BQW1CLEVBQUUsT0FBd0IsRUFBRSxTQUFvQjtRQUNwRixNQUFNLE9BQU8sR0FBaUIsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUNqQixHQUFHLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDL0MsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDdkQsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDOztrSEEvQlUsb0JBQW9CO3NIQUFwQixvQkFBb0IsY0FGbkIsTUFBTTs0RkFFUCxvQkFBb0I7a0JBSGhDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0YWJsZSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVXRpbGl0eSBzZXJ2aWNlIGZvciBET00gbWFuaXB1bGF0aW9uc1xuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgRG9tQXR0cmlidXRlc1NlcnZpY2Uge1xuICBwcml2YXRlIGlkUHJlZml4ID0gJ2JiX2VsZW1lbnRfJztcbiAgcHJpdmF0ZSBuZXh0SWQgPSAwO1xuXG4gIHB1YmxpYyBnZW5lcmF0ZUlkKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmlkUHJlZml4fSR7dGhpcy5uZXh0SWQrK31gO1xuICB9XG5cbiAgbW92ZUFyaWFBdHRyaWJ1dGVzKGhvc3RFbDogSFRNTEVsZW1lbnQsIGNoaWxkRWw6IEhUTUxFbGVtZW50LCByZW5kZXJlcjI6IFJlbmRlcmVyMikge1xuICAgIGNvbnN0IG5vZGVNYXA6IE5hbWVkTm9kZU1hcCA9IGhvc3RFbC5hdHRyaWJ1dGVzO1xuICAgIC8vIENVVCBldmVyeSBhcmlhIGF0dHJpYnV0ZSBmcm9tIHRoZSBob3N0IGVsZW1lbnQgYW5kIFBBU1RFIGl0IGludG8gdGhlIHNwZWNpZmllZCBlbGVtZW50XG4gICAgT2JqZWN0LmtleXMobm9kZU1hcClcbiAgICAgIC5tYXAoKGtleTogc3RyaW5nKSA9PiBub2RlTWFwLml0ZW0oTnVtYmVyKGtleSkpKVxuICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAmJiAoaXRlbS5uYW1lLnN0YXJ0c1dpdGgoJ2FyaWEtJykgfHwgaXRlbS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhcmlhbGFiZWwnKSlcbiAgICAgIC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbmFtZTogYXR0ck5hbWUsIHZhbHVlOiBhdHRyVmFsIH0gPSBpdGVtIGFzIEF0dHI7XG4gICAgICAgIGlmIChhdHRyTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYXJpYWxhYmVsJykge1xuICAgICAgICAgIHJlbmRlcmVyMi5zZXRBdHRyaWJ1dGUoY2hpbGRFbCwgJ2FyaWEtbGFiZWwnLCBhdHRyVmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW5kZXJlcjIuc2V0QXR0cmlidXRlKGNoaWxkRWwsIGF0dHJOYW1lLCBhdHRyVmFsKTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJlcjIucmVtb3ZlQXR0cmlidXRlKGhvc3RFbCwgYXR0ck5hbWUpO1xuICAgICAgfSk7XG4gIH1cblxuICBjb3B5QXJpYUF0dHJpYnV0ZXMoaG9zdEVsOiBIVE1MRWxlbWVudCwgY2hpbGRFbDogRWxlbWVudFJlZjxhbnk+LCByZW5kZXJlcjI6IFJlbmRlcmVyMikge1xuICAgIGNvbnN0IG5vZGVNYXA6IE5hbWVkTm9kZU1hcCA9IGhvc3RFbC5hdHRyaWJ1dGVzO1xuICAgIE9iamVjdC5rZXlzKG5vZGVNYXApXG4gICAgICAubWFwKChrZXk6IHN0cmluZykgPT4gbm9kZU1hcC5pdGVtKE51bWJlcihrZXkpKSlcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gJiYgaXRlbS5uYW1lLnN0YXJ0c1dpdGgoJ2FyaWEtJykpXG4gICAgICAuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbSAmJiByZW5kZXJlcjIuc2V0QXR0cmlidXRlKGNoaWxkRWwsIGl0ZW0ubmFtZSwgaXRlbS52YWx1ZSkpO1xuICB9XG59XG4iXX0=