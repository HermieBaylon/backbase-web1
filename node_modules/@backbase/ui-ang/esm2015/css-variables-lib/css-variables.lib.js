import { __awaiter } from "tslib";
// Requires Promise and Array polyfills for older browsers
let savedVariables = null;
function findStyleBlocks() {
    return document.querySelectorAll('style:not(.inserted),link[rel="stylesheet"]');
}
function getStyleBlocksTexts(styleBlocks) {
    return __awaiter(this, void 0, void 0, function* () {
        return Promise.all(Array.from(styleBlocks).map((block) => getStyleBlockText(block).catch(ignoreErrorForBlock)));
    });
}
// the error for specific block should be ignored, to enable search in other blocks
function ignoreErrorForBlock(err) {
    console.error(err);
    return '';
}
function getStyleBlockText(styleBlock) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (styleBlock.nodeName) {
            case 'STYLE':
                return getTextForStyleNode(styleBlock);
            case 'LINK':
                return getTextForLinkNode(styleBlock);
            default:
                return '';
        }
    });
}
function getTextForStyleNode(styleBlock) {
    return styleBlock.innerHTML;
}
function getTextForLinkNode(styleBlock) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = styleBlock.getAttribute('href');
        if (!url) {
            return Promise.resolve('');
        }
        return new Promise((resolve, reject) => {
            const request = new XMLHttpRequest();
            request.open('GET', url, true);
            request.overrideMimeType('text/css;');
            request.onload = function () {
                if (request.status >= 200 && request.status < 400) {
                    resolve(request.responseText);
                }
                else {
                    reject(`Error returned from: ${url}`);
                }
            };
            request.onerror = function () {
                reject(`Got nothing from: ${url}`);
            };
            request.send();
        });
    });
}
function extractVariablesListFromCssText(css) {
    return css.match(/(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*)(;|})/g);
}
function reduceVariablesList(variablesList) {
    return variablesList.reduce((variables, variable) => {
        const variablesWithValues = variable.split(/;\s*/);
        return Object.assign(Object.assign({}, variables), variablesWithValues.reduce((variableSet, variableWithValue) => {
            const splitVariable = variableWithValue.split(/:\s*/);
            // Note: For minified css files, the semicolon from last declaration statement is removed by angular cli
            // for optimization purposes. For example below will be sample code in minified css file,
            // :root{--chart-color-6:#c22327;--chart-color-2:#00a1e0}.chart-positive-color{color:#2e7d32}
            // variableWithValue will gives us something like below for '--chart-color-2':-
            // "--chart-color-2: #00a1e0}.chart-positive-color{color:#2e7d32"
            // console.log(splitVariable); // ["--chart-color-2", "#00a1e0}.chart-positive-color{color:#2e7d32"]
            // splitVariable has wrong value for --chart-color-2 variable.
            // we need to split the splitVariable further with "}" so that we can get the right value.
            const variableValue = splitVariable[1] ? splitVariable[1].split('}')[0] : splitVariable[1];
            return Object.assign(Object.assign({}, variableSet), { [splitVariable[0]]: variableValue });
        }, {}));
    }, {});
}
function getCssVariableForOldBrowsers(name) {
    return __awaiter(this, void 0, void 0, function* () {
        if (savedVariables) {
            return savedVariables[name];
        }
        const styleBlocks = findStyleBlocks();
        if (!styleBlocks || !styleBlocks.length) {
            return Promise.resolve(undefined);
        }
        const styleBlocksTexts = yield getStyleBlocksTexts(styleBlocks);
        const variablesList = extractVariablesListFromCssText(styleBlocksTexts.join(''));
        if (!variablesList || !variablesList.length) {
            return Promise.resolve(undefined);
        }
        const cssVariables = reduceVariablesList(variablesList);
        savedVariables = cssVariables;
        return cssVariables[name];
    });
}
function getCssVariableForModernBrowsers(name, elementName = ':root') {
    const element = document.querySelector(elementName);
    if (!element) {
        return '';
    }
    const computedStyle = getComputedStyle(element);
    return computedStyle.getPropertyValue(name);
}
export function getCssVariable(name, elementName = ':root', searchEverywhere = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!searchEverywhere && modernCSSIsSupported()) {
            return getCssVariableForModernBrowsers(name, elementName);
        }
        return getCssVariableForOldBrowsers(name);
    });
}
export function modernCSSIsSupported() {
    const CSS = window.CSS;
    return !!(CSS && CSS.supports);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NzLXZhcmlhYmxlcy5saWIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9jc3MtdmFyaWFibGVzLWxpYi9jc3MtdmFyaWFibGVzLmxpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMERBQTBEO0FBQzFELElBQUksY0FBYyxHQUFxQyxJQUFJLENBQUM7QUFFNUQsU0FBUyxlQUFlO0lBQ3RCLE9BQU8sUUFBUSxDQUFDLGdCQUFnQixDQUFDLDZDQUE2QyxDQUFDLENBQUM7QUFDbEYsQ0FBQztBQUVELFNBQWUsbUJBQW1CLENBQUMsV0FBZ0M7O1FBQ2pFLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xILENBQUM7Q0FBQTtBQUVELG1GQUFtRjtBQUNuRixTQUFTLG1CQUFtQixDQUFDLEdBQVU7SUFDckMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVuQixPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUM7QUFFRCxTQUFlLGlCQUFpQixDQUFDLFVBQW1COztRQUNsRCxRQUFRLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDM0IsS0FBSyxPQUFPO2dCQUNWLE9BQU8sbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDekMsS0FBSyxNQUFNO2dCQUNULE9BQU8sa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDeEM7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNILENBQUM7Q0FBQTtBQUVELFNBQVMsbUJBQW1CLENBQUMsVUFBbUI7SUFDOUMsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFl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c0NvbnRlbnQiOlsiLy8gUmVxdWlyZXMgUHJvbWlzZSBhbmQgQXJyYXkgcG9seWZpbGxzIGZvciBvbGRlciBicm93c2Vyc1xubGV0IHNhdmVkVmFyaWFibGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IHwgbnVsbCA9IG51bGw7XG5cbmZ1bmN0aW9uIGZpbmRTdHlsZUJsb2NrcygpOiBOb2RlTGlzdE9mPEVsZW1lbnQ+IHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlOm5vdCguaW5zZXJ0ZWQpLGxpbmtbcmVsPVwic3R5bGVzaGVldFwiXScpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRTdHlsZUJsb2Nrc1RleHRzKHN0eWxlQmxvY2tzOiBOb2RlTGlzdE9mPEVsZW1lbnQ+KSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChBcnJheS5mcm9tKHN0eWxlQmxvY2tzKS5tYXAoKGJsb2NrKSA9PiBnZXRTdHlsZUJsb2NrVGV4dChibG9jaykuY2F0Y2goaWdub3JlRXJyb3JGb3JCbG9jaykpKTtcbn1cblxuLy8gdGhlIGVycm9yIGZvciBzcGVjaWZpYyBibG9jayBzaG91bGQgYmUgaWdub3JlZCwgdG8gZW5hYmxlIHNlYXJjaCBpbiBvdGhlciBibG9ja3NcbmZ1bmN0aW9uIGlnbm9yZUVycm9yRm9yQmxvY2soZXJyOiBFcnJvcik6ICcnIHtcbiAgY29uc29sZS5lcnJvcihlcnIpO1xuXG4gIHJldHVybiAnJztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U3R5bGVCbG9ja1RleHQoc3R5bGVCbG9jazogRWxlbWVudCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHN3aXRjaCAoc3R5bGVCbG9jay5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ1NUWUxFJzpcbiAgICAgIHJldHVybiBnZXRUZXh0Rm9yU3R5bGVOb2RlKHN0eWxlQmxvY2spO1xuICAgIGNhc2UgJ0xJTksnOlxuICAgICAgcmV0dXJuIGdldFRleHRGb3JMaW5rTm9kZShzdHlsZUJsb2NrKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRleHRGb3JTdHlsZU5vZGUoc3R5bGVCbG9jazogRWxlbWVudCk6IHN0cmluZyB7XG4gIHJldHVybiBzdHlsZUJsb2NrLmlubmVySFRNTDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VGV4dEZvckxpbmtOb2RlKHN0eWxlQmxvY2s6IEVsZW1lbnQpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCB1cmw6IHN0cmluZyB8IG51bGwgPSBzdHlsZUJsb2NrLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L2NzczsnKTtcbiAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA+PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgPCA0MDApIHtcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoYEVycm9yIHJldHVybmVkIGZyb206ICR7dXJsfWApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZWplY3QoYEdvdCBub3RoaW5nIGZyb206ICR7dXJsfWApO1xuICAgIH07XG5cbiAgICByZXF1ZXN0LnNlbmQoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RWYXJpYWJsZXNMaXN0RnJvbUNzc1RleHQoY3NzOiBzdHJpbmcpOiBSZWdFeHBNYXRjaEFycmF5IHwgbnVsbCB7XG4gIHJldHVybiBjc3MubWF0Y2goLygtezJ9XFx3W1xcdy1dKikoPzpcXHMqOlxccyopKFteO10qKSg7fH0pL2cpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VWYXJpYWJsZXNMaXN0KHZhcmlhYmxlc0xpc3Q6IFJlZ0V4cE1hdGNoQXJyYXkpIHtcbiAgcmV0dXJuIHZhcmlhYmxlc0xpc3QucmVkdWNlKCh2YXJpYWJsZXMsIHZhcmlhYmxlKSA9PiB7XG4gICAgY29uc3QgdmFyaWFibGVzV2l0aFZhbHVlcyA9IHZhcmlhYmxlLnNwbGl0KC87XFxzKi8pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnZhcmlhYmxlcyxcbiAgICAgIC4uLnZhcmlhYmxlc1dpdGhWYWx1ZXMucmVkdWNlKCh2YXJpYWJsZVNldCwgdmFyaWFibGVXaXRoVmFsdWUpID0+IHtcbiAgICAgICAgY29uc3Qgc3BsaXRWYXJpYWJsZSA9IHZhcmlhYmxlV2l0aFZhbHVlLnNwbGl0KC86XFxzKi8pO1xuICAgICAgICAvLyBOb3RlOiBGb3IgbWluaWZpZWQgY3NzIGZpbGVzLCB0aGUgc2VtaWNvbG9uIGZyb20gbGFzdCBkZWNsYXJhdGlvbiBzdGF0ZW1lbnQgaXMgcmVtb3ZlZCBieSBhbmd1bGFyIGNsaVxuICAgICAgICAvLyBmb3Igb3B0aW1pemF0aW9uIHB1cnBvc2VzLiBGb3IgZXhhbXBsZSBiZWxvdyB3aWxsIGJlIHNhbXBsZSBjb2RlIGluIG1pbmlmaWVkIGNzcyBmaWxlLFxuICAgICAgICAvLyA6cm9vdHstLWNoYXJ0LWNvbG9yLTY6I2MyMjMyNzstLWNoYXJ0LWNvbG9yLTI6IzAwYTFlMH0uY2hhcnQtcG9zaXRpdmUtY29sb3J7Y29sb3I6IzJlN2QzMn1cbiAgICAgICAgLy8gdmFyaWFibGVXaXRoVmFsdWUgd2lsbCBnaXZlcyB1cyBzb21ldGhpbmcgbGlrZSBiZWxvdyBmb3IgJy0tY2hhcnQtY29sb3ItMic6LVxuICAgICAgICAvLyBcIi0tY2hhcnQtY29sb3ItMjogIzAwYTFlMH0uY2hhcnQtcG9zaXRpdmUtY29sb3J7Y29sb3I6IzJlN2QzMlwiXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNwbGl0VmFyaWFibGUpOyAvLyBbXCItLWNoYXJ0LWNvbG9yLTJcIiwgXCIjMDBhMWUwfS5jaGFydC1wb3NpdGl2ZS1jb2xvcntjb2xvcjojMmU3ZDMyXCJdXG4gICAgICAgIC8vIHNwbGl0VmFyaWFibGUgaGFzIHdyb25nIHZhbHVlIGZvciAtLWNoYXJ0LWNvbG9yLTIgdmFyaWFibGUuXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3BsaXQgdGhlIHNwbGl0VmFyaWFibGUgZnVydGhlciB3aXRoIFwifVwiIHNvIHRoYXQgd2UgY2FuIGdldCB0aGUgcmlnaHQgdmFsdWUuXG4gICAgICAgIGNvbnN0IHZhcmlhYmxlVmFsdWUgPSBzcGxpdFZhcmlhYmxlWzFdID8gc3BsaXRWYXJpYWJsZVsxXS5zcGxpdCgnfScpWzBdIDogc3BsaXRWYXJpYWJsZVsxXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnZhcmlhYmxlU2V0LFxuICAgICAgICAgIFtzcGxpdFZhcmlhYmxlWzBdXTogdmFyaWFibGVWYWx1ZSxcbiAgICAgICAgfTtcbiAgICAgIH0sIHt9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pLFxuICAgIH07XG4gIH0sIHt9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRDc3NWYXJpYWJsZUZvck9sZEJyb3dzZXJzKG5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gIGlmIChzYXZlZFZhcmlhYmxlcykge1xuICAgIHJldHVybiBzYXZlZFZhcmlhYmxlc1tuYW1lXTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlQmxvY2tzID0gZmluZFN0eWxlQmxvY2tzKCk7XG4gIGlmICghc3R5bGVCbG9ja3MgfHwgIXN0eWxlQmxvY2tzLmxlbmd0aCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlQmxvY2tzVGV4dHMgPSBhd2FpdCBnZXRTdHlsZUJsb2Nrc1RleHRzKHN0eWxlQmxvY2tzKTtcbiAgY29uc3QgdmFyaWFibGVzTGlzdCA9IGV4dHJhY3RWYXJpYWJsZXNMaXN0RnJvbUNzc1RleHQoc3R5bGVCbG9ja3NUZXh0cy5qb2luKCcnKSk7XG4gIGlmICghdmFyaWFibGVzTGlzdCB8fCAhdmFyaWFibGVzTGlzdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gIH1cblxuICBjb25zdCBjc3NWYXJpYWJsZXMgPSByZWR1Y2VWYXJpYWJsZXNMaXN0KHZhcmlhYmxlc0xpc3QpO1xuICBzYXZlZFZhcmlhYmxlcyA9IGNzc1ZhcmlhYmxlcztcblxuICByZXR1cm4gY3NzVmFyaWFibGVzW25hbWVdO1xufVxuXG5mdW5jdGlvbiBnZXRDc3NWYXJpYWJsZUZvck1vZGVybkJyb3dzZXJzKG5hbWU6IHN0cmluZywgZWxlbWVudE5hbWU6IHN0cmluZyA9ICc6cm9vdCcpOiBzdHJpbmcge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50TmFtZSk7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBjb25zdCBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICByZXR1cm4gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q3NzVmFyaWFibGUoXG4gIG5hbWU6IHN0cmluZyxcbiAgZWxlbWVudE5hbWU6IHN0cmluZyA9ICc6cm9vdCcsXG4gIHNlYXJjaEV2ZXJ5d2hlcmUgPSBmYWxzZSxcbik6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gIGlmICghc2VhcmNoRXZlcnl3aGVyZSAmJiBtb2Rlcm5DU1NJc1N1cHBvcnRlZCgpKSB7XG4gICAgcmV0dXJuIGdldENzc1ZhcmlhYmxlRm9yTW9kZXJuQnJvd3NlcnMobmFtZSwgZWxlbWVudE5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIGdldENzc1ZhcmlhYmxlRm9yT2xkQnJvd3NlcnMobmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2Rlcm5DU1NJc1N1cHBvcnRlZCgpIHtcbiAgY29uc3QgQ1NTID0gKHdpbmRvdyBhcyBhbnkpLkNTUztcblxuICByZXR1cm4gISEoQ1NTICYmIENTUy5zdXBwb3J0cyk7XG59XG4iXX0=