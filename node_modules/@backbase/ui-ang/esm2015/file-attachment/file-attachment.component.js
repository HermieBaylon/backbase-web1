import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { isObservable } from 'rxjs';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/loading-indicator";
import * as i3 from "@backbase/ui-ang/keyboard-click-directive";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/button";
/**
 * @name FileAttachmentComponent
 *
 * @description
 * Component displays file attachment.
 *
 * @dynamic (to suppress error with resolving statics declarations during compilation)
 */
export class FileAttachmentComponent {
    constructor(document, renderer) {
        this.document = document;
        this.renderer = renderer;
        /**
         * Loading indicator flag. Defaults to false.
         */
        this.loading = false;
        /**
         * Show delete button flag. Defaults to false.
         */
        this.deletable = false;
        /**
         * Disabled state flag. Defaults to false.
         */
        this.disabled = false;
        /**
         * The flag to indicate whether the file-attachment should fill the container that it is in. Defaults to 'false'.
         */
        this.block = false;
        /**
         * Event emitted on delete button click.
         */
        this.delete = new EventEmitter();
        /**
         * File type which is determined by file extension. Defaults to 'unknown'.
         */
        this.fileType = 'unknown';
    }
    /**
     * Set name (required).
     */
    set name(value) {
        if (value === null || value === void 0 ? void 0 : value.trim()) {
            this._name = value;
            this.fileType = this.getFileType(value);
        }
        else {
            throw new Error(`"name" input is invalid in "${this.constructor.name}"`);
        }
    }
    /**
     * Get name.
     */
    get name() {
        return this._name;
    }
    /**
     * Set file size (required).
     */
    set size(value) {
        if (value !== undefined) {
            const valueAsNumber = Math.trunc(Number(value));
            this._sizeInUnits = this.formatBytes(valueAsNumber, 2);
        }
    }
    /**
     * Get file size in information units (Bytes, Kbs, etc.).
     */
    get sizeInUnits() {
        return this._sizeInUnits;
    }
    /**
     * Set file content (required if disabled property is not set to true).
     */
    set fileContent(value) {
        if (value && isObservable(value)) {
            this._fileContent = value;
        }
        else {
            throw new Error(`"fileContent" stream input is invalid in "${this.constructor.name}"`);
        }
    }
    /**
     * Get file content.
     */
    get fileContent() {
        return this._fileContent;
    }
    ngOnInit() {
        if (!this._name) {
            throw new Error(`"name" input is required in "${this.constructor.name}"`);
        }
        if (!this.disabled && !this._fileContent) {
            throw new Error(`"fileContent" input is required in "${this.constructor.name}"`);
        }
    }
    /**
     * Download attachment method.
     *
     * @param $event Download button click event
     */
    onDownload($event) {
        $event.stopPropagation();
        if (this.fileContent) {
            this.fileContent.pipe(take(1)).subscribe((response) => {
                if (!this.document.defaultView) {
                    return;
                }
                const window = this.document.defaultView;
                const blob = new window.Blob([response]);
                if (window.navigator.msSaveBlob) {
                    window.navigator.msSaveBlob(blob, this.name);
                }
                else {
                    const fileURL = window.URL.createObjectURL(blob);
                    const link = this.renderer.createElement('a');
                    link.setAttribute('href', fileURL);
                    link.setAttribute('target', '_blank');
                    link.setAttribute('download', this.name || '');
                    link.click();
                    URL.revokeObjectURL(fileURL);
                }
            });
        }
    }
    /**
     * Delete attachment event emitter.
     *
     * @param event Delete button click event.
     */
    onDelete(event) {
        event.stopPropagation();
        this.delete.emit();
    }
    getFileType(fileName) {
        return fileName.includes('.') ? fileName.toLowerCase().split('.').pop() || 'unknown' : 'unknown';
    }
    formatBytes(bytes, decimals) {
        if (bytes === 0) {
            return {
                value: 0,
                unit: 'Bytes',
            };
        }
        const k = 1024;
        const dm = decimals <= 0 ? 0 : decimals || 2;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return {
            value: parseFloat((bytes / Math.pow(k, i)).toFixed(dm)),
            unit: sizes[i],
        };
    }
}
FileAttachmentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentComponent, deps: [{ token: DOCUMENT }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
FileAttachmentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FileAttachmentComponent, selector: "bb-file-attachment-ui", inputs: { name: "name", size: "size", fileContent: "fileContent", loading: "loading", deletable: "deletable", disabled: "disabled", block: "block" }, outputs: { delete: "delete" }, ngImport: i0, template: "<div\n  class=\"bb-attachment-ui bb-card bb-card--sm\"\n  [class.bb-attachment-ui--block]=\"block\"\n  [attr.role]=\"disabled || deletable ? null : 'button'\"\n  [tabindex]=\"disabled ? -1 : 0\"\n  data-role=\"download-attachment\"\n  aria-describedby=\"file-attachment-card-body\"\n  (bbKeyboardClick)=\"!disabled && onDownload($event)\"\n>\n  <div class=\"bb-stack bb-stack--align-top bb-card__body\" id=\"file-attachment-card-body\">\n    <div class=\"bb-stack__item\">\n      <em\n        data-role=\"file-type-icon\"\n        [attr.aria-label]=\"fileType\"\n        [ngClass]=\"'bb-icon-file-' + fileType\"\n        class=\"bb-icon bb-icon--md bb-message-attachment__content\"\n        [class.bb-message-attachment__content--disabled]=\"loading\"\n      ></em>\n    </div>\n    <div class=\"bb-stack__item text-truncate\" [class.bb-message-attachment__content--disabled]=\"loading\">\n      <span class=\"bb-block bb-block--xs\" data-role=\"attachment-name\">{{ name }}</span>\n      <div *ngIf=\"sizeInUnits\">\n        <span class=\"bb-text-support\" data-role=\"attachment-size\"\n          >{{ sizeInUnits.value }}\n          <span i18n=\"File size|Attachment file size in units@@fileAttachment.fileSize\"\n            >{ sizeInUnits.unit, select, Bytes {Bytes} KB {KB} MB {MB} GB {GB} TB {TB} }</span\n          ></span\n        >\n      </div>\n    </div>\n    <div *ngIf=\"loading || deletable\" class=\"bb-stack__item bb-stack__item--push-right\">\n      <button\n        bbButton\n        color=\"link-text\"\n        *ngIf=\"deletable && !loading\"\n        class=\"bb-text-support\"\n        aria-label=\"Delete file\"\n        i18n-aria-label=\"Delete file button@@fileAttachment.deleteButton.ariaLabel\"\n        data-role=\"file-attachment-delete-button\"\n        (click)=\"onDelete($event)\"\n      >\n        <bb-icon-ui name=\"times\"></bb-icon-ui>\n      </button>\n\n      <bb-loading-indicator-ui\n        *ngIf=\"loading\"\n        class=\"bb-message-attachment__loader\"\n        loaderSize=\"sm\"\n        aria-label=\"Loading\"\n        i18n-aria-label=\"Loading|File attachment loading indicator@@fileAttachment.loadingIndicator.ariaLabel\"\n      >\n      </bb-loading-indicator-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i3.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-file-attachment-ui',
                    templateUrl: './file-attachment.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.Renderer2 }]; }, propDecorators: { name: [{
                type: Input
            }], size: [{
                type: Input
            }], fileContent: [{
                type: Input
            }], loading: [{
                type: Input
            }], deletable: [{
                type: Input
            }], disabled: [{
                type: Input
            }], block: [{
                type: Input
            }], delete: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,