import { Inject, Injectable, Optional } from '@angular/core';
import { ACCOUNTS_DISPLAYING_FORMAT, DefaultAccountsDisplayingFormat, } from './constants';
import * as i0 from "@angular/core";
/**
 * A configuration service for account numbers displaying format
 */
export class AccountsDisplayingFormatService {
    /**
     * @name AccountsDisplayingFormatService#constructor
     * @param accountsDisplayingFormat - (Optional) AccountsDisplayingFormatConfiguration
     *
     * @internal
     */
    constructor(accountsDisplayingFormat) {
        this.accountsDisplayingFormat = accountsDisplayingFormat;
    }
    /**
     * @name AccountsDisplayingFormatService#getDefaultFormat
     * @param attributeType - numbers format attributeType
     * @param cardProviderName - card provider name
     *
     * @description
     * Gets default account numbers format per attribute type
     */
    getDefaultFormat(attributeType, cardProviderName) {
        var _a, _b;
        if (attributeType === 'cardNumber') {
            return this.getCardNumberFormat(cardProviderName);
        }
        return (_b = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a[attributeType]) !== null && _b !== void 0 ? _b : DefaultAccountsDisplayingFormat;
    }
    getCardNumberFormat(cardProviderName) {
        var _a;
        const cardNumber = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a.cardNumber;
        const providersConfiguration = Object.entries((cardNumber === null || cardNumber === void 0 ? void 0 : cardNumber.cardProviders) || {}).reduce((configuration, entry) => (Object.assign(Object.assign({}, configuration), { [entry[0].toLowerCase()]: entry[1] })), {});
        if (cardProviderName && providersConfiguration[cardProviderName.toLowerCase()]) {
            return providersConfiguration[cardProviderName.toLowerCase()];
        }
        return cardNumber !== null && cardNumber !== void 0 ? cardNumber : DefaultAccountsDisplayingFormat;
    }
}
AccountsDisplayingFormatService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDisplayingFormatService, deps: [{ token: ACCOUNTS_DISPLAYING_FORMAT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountsDisplayingFormatService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDisplayingFormatService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDisplayingFormatService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNTS_DISPLAYING_FORMAT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudHMtZGlzcGxheWluZy1mb3JtYXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2FjY291bnQtbnVtYmVyLXBpcGUvYWNjb3VudHMtZGlzcGxheWluZy1mb3JtYXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUNMLDBCQUEwQixFQUMxQiwrQkFBK0IsR0FJaEMsTUFBTSxhQUFhLENBQUM7O0FBRXJCOztHQUVHO0FBSUgsTUFBTSxPQUFPLCtCQUErQjtJQUMxQzs7Ozs7T0FLRztJQUNILFlBR21CLHdCQUErRDtRQUEvRCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQXVDO0lBQy9FLENBQUM7SUFFSjs7Ozs7OztPQU9HO0lBQ0gsZ0JBQWdCLENBQUMsYUFBZ0MsRUFBRSxnQkFBeUI7O1FBQzFFLElBQUksYUFBYSxLQUFLLFlBQVksRUFBRTtZQUNsQyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsT0FBTyxNQUFBLE1BQUEsSUFBSSxDQUFDLHdCQUF3QiwwQ0FBRyxhQUFhLENBQUMsbUNBQUksK0JBQStCLENBQUM7SUFDM0YsQ0FBQztJQUVPLG1CQUFtQixDQUFDLGdCQUF5Qjs7UUFDbkQsTUFBTSxVQUFVLEdBQUcsTUFBQSxJQUFJLENBQUMsd0JBQXdCLDBDQUFFLFVBQVUsQ0FBQztRQUM3RCxNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQSxVQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsYUFBYSxLQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FDbkYsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxpQ0FBTSxhQUFhLEtBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUcsRUFDcEYsRUFBOEMsQ0FDL0MsQ0FBQztRQUVGLElBQUksZ0JBQWdCLElBQUksc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRTtZQUM5RSxPQUFPLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDL0Q7UUFFRCxPQUFPLFVBQVUsYUFBVixVQUFVLGNBQVYsVUFBVSxHQUFJLCtCQUErQixDQUFDO0lBQ3ZELENBQUM7OzZIQXpDVSwrQkFBK0Isa0JBU2hDLDBCQUEwQjtpSUFUekIsK0JBQStCLGNBRjlCLE1BQU07NEZBRVAsK0JBQStCO2tCQUgzQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBU0ksUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQywwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBQ0NPVU5UU19ESVNQTEFZSU5HX0ZPUk1BVCxcbiAgRGVmYXVsdEFjY291bnRzRGlzcGxheWluZ0Zvcm1hdCxcbiAgQWNjb3VudE51bWJlclR5cGUsXG4gIEFjY291bnRzRGlzcGxheWluZ0Zvcm1hdCxcbiAgQWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0Q29uZmlndXJhdGlvbixcbn0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciBhY2NvdW50IG51bWJlcnMgZGlzcGxheWluZyBmb3JtYXRcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEFjY291bnRzRGlzcGxheWluZ0Zvcm1hdFNlcnZpY2Uge1xuICAvKipcbiAgICogQG5hbWUgQWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0U2VydmljZSNjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gYWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0IC0gKE9wdGlvbmFsKSBBY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXRDb25maWd1cmF0aW9uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEFDQ09VTlRTX0RJU1BMQVlJTkdfRk9STUFUKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgYWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0OiBBY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXRDb25maWd1cmF0aW9uLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBuYW1lIEFjY291bnRzRGlzcGxheWluZ0Zvcm1hdFNlcnZpY2UjZ2V0RGVmYXVsdEZvcm1hdFxuICAgKiBAcGFyYW0gYXR0cmlidXRlVHlwZSAtIG51bWJlcnMgZm9ybWF0IGF0dHJpYnV0ZVR5cGVcbiAgICogQHBhcmFtIGNhcmRQcm92aWRlck5hbWUgLSBjYXJkIHByb3ZpZGVyIG5hbWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldHMgZGVmYXVsdCBhY2NvdW50IG51bWJlcnMgZm9ybWF0IHBlciBhdHRyaWJ1dGUgdHlwZVxuICAgKi9cbiAgZ2V0RGVmYXVsdEZvcm1hdChhdHRyaWJ1dGVUeXBlOiBBY2NvdW50TnVtYmVyVHlwZSwgY2FyZFByb3ZpZGVyTmFtZT86IHN0cmluZyk6IEFjY291bnRzRGlzcGxheWluZ0Zvcm1hdCB7XG4gICAgaWYgKGF0dHJpYnV0ZVR5cGUgPT09ICdjYXJkTnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FyZE51bWJlckZvcm1hdChjYXJkUHJvdmlkZXJOYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXQ/LlthdHRyaWJ1dGVUeXBlXSA/PyBEZWZhdWx0QWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYXJkTnVtYmVyRm9ybWF0KGNhcmRQcm92aWRlck5hbWU/OiBzdHJpbmcpOiBBY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXQge1xuICAgIGNvbnN0IGNhcmROdW1iZXIgPSB0aGlzLmFjY291bnRzRGlzcGxheWluZ0Zvcm1hdD8uY2FyZE51bWJlcjtcbiAgICBjb25zdCBwcm92aWRlcnNDb25maWd1cmF0aW9uID0gT2JqZWN0LmVudHJpZXMoY2FyZE51bWJlcj8uY2FyZFByb3ZpZGVycyB8fCB7fSkucmVkdWNlKFxuICAgICAgKGNvbmZpZ3VyYXRpb24sIGVudHJ5KSA9PiAoeyAuLi5jb25maWd1cmF0aW9uLCBbZW50cnlbMF0udG9Mb3dlckNhc2UoKV06IGVudHJ5WzFdIH0pLFxuICAgICAge30gYXMgUmVjb3JkPHN0cmluZywgQWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0PixcbiAgICApO1xuXG4gICAgaWYgKGNhcmRQcm92aWRlck5hbWUgJiYgcHJvdmlkZXJzQ29uZmlndXJhdGlvbltjYXJkUHJvdmlkZXJOYW1lLnRvTG93ZXJDYXNlKCldKSB7XG4gICAgICByZXR1cm4gcHJvdmlkZXJzQ29uZmlndXJhdGlvbltjYXJkUHJvdmlkZXJOYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgIH1cblxuICAgIHJldHVybiBjYXJkTnVtYmVyID8/IERlZmF1bHRBY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXQ7XG4gIH1cbn1cbiJdfQ==