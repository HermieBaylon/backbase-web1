import { Pipe } from '@angular/core';
import { segment } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "./accounts-displaying-format.service";
/**
 * Formats account numbers, applies different format configurations per number type
 */
export class AccountNumberPipe {
    /**
     * @name AccountNumberPipe#constructor
     * @param accountsDisplayingFormatService - AccountsDisplayingFormatService
     *
     * @internal
     */
    constructor(accountsDisplayingFormatService) {
        this.accountsDisplayingFormatService = accountsDisplayingFormatService;
    }
    /**
     * @name AccountNumberPipe#transform
     * @param value - the string to transform
     * @param configuration - type of the value (iban, bban or number) or a custom numbers format
     * @param cardProviderName - card provider name
     *
     * @description
     * Formats account numbers
     *
     * to use with a global accountsFormat configuration
     * - '12345678' | bbAccountNumber:'iban'
     * to apply a custom configuration
     * - '12345678' | bbAccountNumber:{ segments: [2, 4, 2] }
     * to apply a 'visa' card number configuration
     * - '12345678' | bbAccountNumber:'cardNumber':'visa'
     */
    transform(value, configuration, cardProviderName) {
        const accountNumber = value.toString();
        const displayingFormat = typeof configuration === 'object'
            ? configuration
            : this.accountsDisplayingFormatService.getDefaultFormat(configuration, cardProviderName);
        return segment(accountNumber, displayingFormat.segments);
    }
}
AccountNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipe, deps: [{ token: i1.AccountsDisplayingFormatService }], target: i0.ɵɵFactoryTarget.Pipe });
AccountNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipe, name: "bbAccountNumber" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbAccountNumber',
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountsDisplayingFormatService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1udW1iZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2FjY291bnQtbnVtYmVyLXBpcGUvYWNjb3VudC1udW1iZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUdwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7OztBQUVoRDs7R0FFRztBQUlILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7Ozs7O09BS0c7SUFDSCxZQUE2QiwrQkFBZ0U7UUFBaEUsb0NBQStCLEdBQS9CLCtCQUErQixDQUFpQztJQUFHLENBQUM7SUFFakc7Ozs7Ozs7Ozs7Ozs7OztPQWVHO0lBQ0gsU0FBUyxDQUNQLEtBQXNCLEVBQ3RCLGFBQTJELEVBQzNELGdCQUF5QjtRQUV6QixNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkMsTUFBTSxnQkFBZ0IsR0FDcEIsT0FBTyxhQUFhLEtBQUssUUFBUTtZQUMvQixDQUFDLENBQUUsYUFBMEM7WUFDN0MsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUU3RixPQUFPLE9BQU8sQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7K0dBckNVLGlCQUFpQjs2R0FBakIsaUJBQWlCOzRGQUFqQixpQkFBaUI7a0JBSDdCLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLGlCQUFpQjtpQkFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY2NvdW50TnVtYmVyVHlwZSwgQWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0IH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0U2VydmljZSB9IGZyb20gJy4vYWNjb3VudHMtZGlzcGxheWluZy1mb3JtYXQuc2VydmljZSc7XG5pbXBvcnQgeyBzZWdtZW50IH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy91dGlsJztcblxuLyoqXG4gKiBGb3JtYXRzIGFjY291bnQgbnVtYmVycywgYXBwbGllcyBkaWZmZXJlbnQgZm9ybWF0IGNvbmZpZ3VyYXRpb25zIHBlciBudW1iZXIgdHlwZVxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdiYkFjY291bnROdW1iZXInLFxufSlcbmV4cG9ydCBjbGFzcyBBY2NvdW50TnVtYmVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAvKipcbiAgICogQG5hbWUgQWNjb3VudE51bWJlclBpcGUjY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGFjY291bnRzRGlzcGxheWluZ0Zvcm1hdFNlcnZpY2UgLSBBY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXRTZXJ2aWNlXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXRTZXJ2aWNlOiBBY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXRTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBAbmFtZSBBY2NvdW50TnVtYmVyUGlwZSN0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHZhbHVlIC0gdGhlIHN0cmluZyB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIGNvbmZpZ3VyYXRpb24gLSB0eXBlIG9mIHRoZSB2YWx1ZSAoaWJhbiwgYmJhbiBvciBudW1iZXIpIG9yIGEgY3VzdG9tIG51bWJlcnMgZm9ybWF0XG4gICAqIEBwYXJhbSBjYXJkUHJvdmlkZXJOYW1lIC0gY2FyZCBwcm92aWRlciBuYW1lXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBGb3JtYXRzIGFjY291bnQgbnVtYmVyc1xuICAgKlxuICAgKiB0byB1c2Ugd2l0aCBhIGdsb2JhbCBhY2NvdW50c0Zvcm1hdCBjb25maWd1cmF0aW9uXG4gICAqIC0gJzEyMzQ1Njc4JyB8IGJiQWNjb3VudE51bWJlcjonaWJhbidcbiAgICogdG8gYXBwbHkgYSBjdXN0b20gY29uZmlndXJhdGlvblxuICAgKiAtICcxMjM0NTY3OCcgfCBiYkFjY291bnROdW1iZXI6eyBzZWdtZW50czogWzIsIDQsIDJdIH1cbiAgICogdG8gYXBwbHkgYSAndmlzYScgY2FyZCBudW1iZXIgY29uZmlndXJhdGlvblxuICAgKiAtICcxMjM0NTY3OCcgfCBiYkFjY291bnROdW1iZXI6J2NhcmROdW1iZXInOid2aXNhJ1xuICAgKi9cbiAgdHJhbnNmb3JtKFxuICAgIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsXG4gICAgY29uZmlndXJhdGlvbjogQWNjb3VudE51bWJlclR5cGUgfCBBY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXQsXG4gICAgY2FyZFByb3ZpZGVyTmFtZT86IHN0cmluZyxcbiAgKTogc3RyaW5nIHtcbiAgICBjb25zdCBhY2NvdW50TnVtYmVyID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICBjb25zdCBkaXNwbGF5aW5nRm9ybWF0ID1cbiAgICAgIHR5cGVvZiBjb25maWd1cmF0aW9uID09PSAnb2JqZWN0J1xuICAgICAgICA/IChjb25maWd1cmF0aW9uIGFzIEFjY291bnRzRGlzcGxheWluZ0Zvcm1hdClcbiAgICAgICAgOiB0aGlzLmFjY291bnRzRGlzcGxheWluZ0Zvcm1hdFNlcnZpY2UuZ2V0RGVmYXVsdEZvcm1hdChjb25maWd1cmF0aW9uLCBjYXJkUHJvdmlkZXJOYW1lKTtcblxuICAgIHJldHVybiBzZWdtZW50KGFjY291bnROdW1iZXIsIGRpc3BsYXlpbmdGb3JtYXQuc2VnbWVudHMpO1xuICB9XG59XG4iXX0=