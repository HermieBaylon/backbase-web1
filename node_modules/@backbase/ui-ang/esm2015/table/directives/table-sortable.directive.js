import { ContentChild, ContentChildren, Directive, EventEmitter, HostBinding, HostListener, Input, Output, } from '@angular/core';
import { switchMap } from 'rxjs/operators';
import { merge } from 'rxjs';
import { DropdownMenuToken, DropdownMenuOptionToken } from '@backbase/ui-ang/dropdown-menu';
import * as i0 from "@angular/core";
import * as i1 from "./table.directive";
const rotate = { asc: 'desc', desc: '', '': 'asc' };
export class TableSortableDirective {
    constructor(parentTable, renderer) {
        this.parentTable = parentTable;
        this.renderer = renderer;
        /**
         * The current sort direction. Accepts one of the values of 'asc', 'desc' or ''
         */
        this.direction = '';
        /**
         * An event emitter for on sort actions.
         */
        this.sort = new EventEmitter();
        this.sortable = true;
        this.parentTable.registerHeader(this);
    }
    get asc() {
        return this.direction === 'asc';
    }
    get desc() {
        return this.direction === 'desc';
    }
    rotate() {
        if (this.dropdown) {
            return;
        }
        this.emitSortEvent();
    }
    ngAfterViewInit() {
        if (this.dropdown) {
            this.presetDropdown(this.dropdown);
        }
        this.getMenuOptionSelectionChanges(this.bbMenuOptions).subscribe((menuOption) => this.onMenuOptionSelect(menuOption));
    }
    onMenuOptionSelect(menuOption) {
        var _a;
        const columnValue = menuOption.bbDropdownMenuOption;
        const activeMenuOption = (_a = this.bbMenuOptions) === null || _a === void 0 ? void 0 : _a.find((option) => option.active);
        // Reset currently active item
        if (activeMenuOption) {
            activeMenuOption.active = false;
        }
        // If same menu item is not clicked, then reset the direction for new menuitem
        if (activeMenuOption && columnValue !== activeMenuOption.bbDropdownMenuOption) {
            this.direction = '';
        }
        this.bbSortable = menuOption.bbDropdownMenuOption;
        this.emitSortEvent();
        this.markMenuOptionAsActive(menuOption);
        this.updateAriaSortAttribute();
    }
    /** Notify table with new sorting params */
    emitSortEvent() {
        if (this.bbSortable) {
            this.direction = rotate[this.direction];
            this.parentTable.onSort({ column: this.bbSortable, direction: this.direction });
        }
    }
    /** Combined stream of all of the bbTableMenuitem selectionChange events. */
    getMenuOptionSelectionChanges(menuOptions) {
        return menuOptions.changes.pipe(switchMap((_) => merge(...menuOptions.map((menuOption) => menuOption.selectionChange))));
    }
    /** mark the new menuitem as active only if sorting order is asc/desc */
    markMenuOptionAsActive(menuOption) {
        if (this.direction !== '') {
            menuOption.active = true;
        }
    }
    markAllMenuOptionAsInactive() {
        if (this.bbMenuOptions.length) {
            this.bbMenuOptions.forEach((menuOption) => (menuOption.active = false));
        }
    }
    updateAriaSortAttribute() {
        var _a;
        if (this.dropdown) {
            const buttonEl = (_a = this.dropdown.buttonEl) === null || _a === void 0 ? void 0 : _a.nativeElement;
            if (!this.direction) {
                this.renderer.removeAttribute(buttonEl, 'aria-sort');
            }
            else {
                this.renderer.setAttribute(buttonEl, 'aria-sort', this.getAriaSortAttribute(this.direction));
            }
        }
    }
    getAriaSortAttribute(direction) {
        return direction === 'asc' ? 'ascending' : 'descending';
    }
    /** Preset bb-dropdown button to add role for a11y and set full height and width of table column */
    presetDropdown(dropdown) {
        var _a;
        const buttonEl = (_a = dropdown.buttonEl) === null || _a === void 0 ? void 0 : _a.nativeElement;
        this.renderer.setAttribute(buttonEl, 'role', 'columnheader');
        this.renderer.setStyle(buttonEl, 'height', '100%');
        this.renderer.setStyle(buttonEl, 'width', '100%');
    }
    ngOnDestroy() {
        this.parentTable.unRegisterHeader(this);
    }
}
TableSortableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableSortableDirective, deps: [{ token: i1.TableDirective }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
TableSortableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TableSortableDirective, selector: "th[bbSortable]", inputs: { bbSortable: "bbSortable", direction: "direction" }, outputs: { sort: "sort" }, host: { listeners: { "click": "rotate()", "keyup.enter": "rotate()", "keyup.space": "rotate()" }, properties: { "class.sortable": "this.sortable", "class.asc": "this.asc", "class.desc": "this.desc" } }, queries: [{ propertyName: "dropdown", first: true, predicate: DropdownMenuToken, descendants: true }, { propertyName: "bbMenuOptions", predicate: DropdownMenuOptionToken, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableSortableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'th[bbSortable]',
                }]
        }], ctorParameters: function () { return [{ type: i1.TableDirective }, { type: i0.Renderer2 }]; }, propDecorators: { bbSortable: [{
                type: Input
            }], direction: [{
                type: Input
            }], sort: [{
                type: Output
            }], dropdown: [{
                type: ContentChild,
                args: [DropdownMenuToken]
            }], bbMenuOptions: [{
                type: ContentChildren,
                args: [DropdownMenuOptionToken, { descendants: true }]
            }], sortable: [{
                type: HostBinding,
                args: ['class.sortable']
            }], asc: [{
                type: HostBinding,
                args: ['class.asc']
            }], desc: [{
                type: HostBinding,
                args: ['class.desc']
            }], rotate: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['keyup.enter']
            }, {
                type: HostListener,
                args: ['keyup.space']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtc29ydGFibGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvdGFibGUvZGlyZWN0aXZlcy90YWJsZS1zb3J0YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFlBQVksRUFDWixlQUFlLEVBQ2YsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFFTCxNQUFNLEdBR1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxLQUFLLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7OztBQUk1RixNQUFNLE1BQU0sR0FBcUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBVXRGLE1BQU0sT0FBTyxzQkFBc0I7SUFrQmpDLFlBQTZCLFdBQTJCLEVBQW1CLFFBQW1CO1FBQWpFLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUFtQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBYjlGOztXQUVHO1FBQ00sY0FBUyxHQUFrQixFQUFFLENBQUM7UUFDdkM7O1dBRUc7UUFDTyxTQUFJLEdBQUcsSUFBSSxZQUFZLEVBQWEsQ0FBQztRQVVoQixhQUFRLEdBQUcsSUFBSSxDQUFDO1FBSDdDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFJRCxJQUNJLEdBQUc7UUFDTCxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUNJLElBQUk7UUFDTixPQUFPLElBQUks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QU07Z0JBRTBCLFFBQVE7c0JBQXhDLFlBQVk7dUJBQUMsaUJBQWlCO2dCQUUvQixhQUFhO3NCQURaLGVBQWU7dUJBQUMsdUJBQXVCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO2dCQU9oQyxRQUFRO3NCQUF0QyxXQUFXO3VCQUFDLGdCQUFnQjtnQkFHekIsR0FBRztzQkFETixXQUFXO3VCQUFDLFdBQVc7Z0JBTXBCLElBQUk7c0JBRFAsV0FBVzt1QkFBQyxZQUFZO2dCQVF6QixNQUFNO3NCQUhMLFlBQVk7dUJBQUMsT0FBTzs7c0JBQ3BCLFlBQVk7dUJBQUMsYUFBYTs7c0JBQzFCLFlBQVk7dUJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbnRlbnRDaGlsZCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBEaXJlY3RpdmUsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIFJlbmRlcmVyMixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBtZXJnZSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRHJvcGRvd25NZW51VG9rZW4sIERyb3Bkb3duTWVudU9wdGlvblRva2VuIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9kcm9wZG93bi1tZW51JztcbmltcG9ydCB7IFRhYmxlRGlyZWN0aXZlIH0gZnJvbSAnLi90YWJsZS5kaXJlY3RpdmUnO1xuXG5leHBvcnQgdHlwZSBTb3J0RGlyZWN0aW9uID0gJ2FzYycgfCAnZGVzYycgfCAnJztcbmNvbnN0IHJvdGF0ZTogeyBba2V5OiBzdHJpbmddOiBTb3J0RGlyZWN0aW9uIH0gPSB7IGFzYzogJ2Rlc2MnLCBkZXNjOiAnJywgJyc6ICdhc2MnIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU29ydEV2ZW50IHtcbiAgY29sdW1uOiBzdHJpbmc7XG4gIGRpcmVjdGlvbjogU29ydERpcmVjdGlvbjtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAndGhbYmJTb3J0YWJsZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZVNvcnRhYmxlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBjb2x1bW4gdG8gYmUgc29ydGVkXG4gICAqL1xuICBASW5wdXQoKSBiYlNvcnRhYmxlPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc29ydCBkaXJlY3Rpb24uIEFjY2VwdHMgb25lIG9mIHRoZSB2YWx1ZXMgb2YgJ2FzYycsICdkZXNjJyBvciAnJ1xuICAgKi9cbiAgQElucHV0KCkgZGlyZWN0aW9uOiBTb3J0RGlyZWN0aW9uID0gJyc7XG4gIC8qKlxuICAgKiBBbiBldmVudCBlbWl0dGVyIGZvciBvbiBzb3J0IGFjdGlvbnMuXG4gICAqL1xuICBAT3V0cHV0KCkgc29ydCA9IG5ldyBFdmVudEVtaXR0ZXI8U29ydEV2ZW50PigpO1xuXG4gIEBDb250ZW50Q2hpbGQoRHJvcGRvd25NZW51VG9rZW4pIGRyb3Bkb3duOiBEcm9wZG93bk1lbnVUb2tlbiB8IHVuZGVmaW5lZDtcbiAgQENvbnRlbnRDaGlsZHJlbihEcm9wZG93bk1lbnVPcHRpb25Ub2tlbiwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICBiYk1lbnVPcHRpb25zITogUXVlcnlMaXN0PERyb3Bkb3duTWVudU9wdGlvblRva2VuPjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHBhcmVudFRhYmxlOiBUYWJsZURpcmVjdGl2ZSwgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgdGhpcy5wYXJlbnRUYWJsZS5yZWdpc3RlckhlYWRlcih0aGlzKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc29ydGFibGUnKSBzb3J0YWJsZSA9IHRydWU7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hc2MnKVxuICBnZXQgYXNjKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbiA9PT0gJ2FzYyc7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRlc2MnKVxuICBnZXQgZGVzYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24gPT09ICdkZXNjJztcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgQEhvc3RMaXN0ZW5lcigna2V5dXAuZW50ZXInKVxuICBASG9zdExpc3RlbmVyKCdrZXl1cC5zcGFjZScpXG4gIHJvdGF0ZSgpIHtcbiAgICBpZiAodGhpcy5kcm9wZG93bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVtaXRTb3J0RXZlbnQoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kcm9wZG93bikge1xuICAgICAgdGhpcy5wcmVzZXREcm9wZG93bih0aGlzLmRyb3Bkb3duKTtcbiAgICB9XG4gICAgdGhpcy5nZXRNZW51T3B0aW9uU2VsZWN0aW9uQ2hhbmdlcyh0aGlzLmJiTWVudU9wdGlvbnMpLnN1YnNjcmliZSgobWVudU9wdGlvbikgPT5cbiAgICAgIHRoaXMub25NZW51T3B0aW9uU2VsZWN0KG1lbnVPcHRpb24pLFxuICAgICk7XG4gIH1cblxuICBvbk1lbnVPcHRpb25TZWxlY3QobWVudU9wdGlvbjogRHJvcGRvd25NZW51T3B0aW9uVG9rZW4pOiB2b2lkIHtcbiAgICBjb25zdCBjb2x1bW5WYWx1ZSA9IG1lbnVPcHRpb24uYmJEcm9wZG93bk1lbnVPcHRpb247XG4gICAgY29uc3QgYWN0aXZlTWVudU9wdGlvbiA9IHRoaXMuYmJNZW51T3B0aW9ucz8uZmluZCgob3B0aW9uKSA9PiBvcHRpb24uYWN0aXZlKTtcbiAgICAvLyBSZXNldCBjdXJyZW50bHkgYWN0aXZlIGl0ZW1cbiAgICBpZiAoYWN0aXZlTWVudU9wdGlvbikge1xuICAgICAgYWN0aXZlTWVudU9wdGlvbi5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gSWYgc2FtZSBtZW51IGl0ZW0gaXMgbm90IGNsaWNrZWQsIHRoZW4gcmVzZXQgdGhlIGRpcmVjdGlvbiBmb3IgbmV3IG1lbnVpdGVtXG4gICAgaWYgKGFjdGl2ZU1lbnVPcHRpb24gJiYgY29sdW1uVmFsdWUgIT09IGFjdGl2ZU1lbnVPcHRpb24uYmJEcm9wZG93bk1lbnVPcHRpb24pIHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uID0gJyc7XG4gICAgfVxuICAgIHRoaXMuYmJTb3J0YWJsZSA9IG1lbnVPcHRpb24uYmJEcm9wZG93bk1lbnVPcHRpb247XG4gICAgdGhpcy5lbWl0U29ydEV2ZW50KCk7XG4gICAgdGhpcy5tYXJrTWVudU9wdGlvbkFzQWN0aXZlKG1lbnVPcHRpb24pO1xuICAgIHRoaXMudXBkYXRlQXJpYVNvcnRBdHRyaWJ1dGUoKTtcbiAgfVxuXG4gIC8qKiBOb3RpZnkgdGFibGUgd2l0aCBuZXcgc29ydGluZyBwYXJhbXMgKi9cbiAgZW1pdFNvcnRFdmVudCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5iYlNvcnRhYmxlKSB7XG4gICAgICB0aGlzLmRpcmVjdGlvbiA9IHJvdGF0ZVt0aGlzLmRpcmVjdGlvbl07XG4gICAgICB0aGlzLnBhcmVudFRhYmxlLm9uU29ydCh7IGNvbHVtbjogdGhpcy5iYlNvcnRhYmxlLCBkaXJlY3Rpb246IHRoaXMuZGlyZWN0aW9uIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDb21iaW5lZCBzdHJlYW0gb2YgYWxsIG9mIHRoZSBiYlRhYmxlTWVudWl0ZW0gc2VsZWN0aW9uQ2hhbmdlIGV2ZW50cy4gKi9cbiAgZ2V0TWVudU9wdGlvblNlbGVjdGlvbkNoYW5nZXMobWVudU9wdGlvbnM6IFF1ZXJ5TGlzdDxEcm9wZG93bk1lbnVPcHRpb25Ub2tlbj4pIHtcbiAgICByZXR1cm4gbWVudU9wdGlvbnMuY2hhbmdlcy5waXBlKFxuICAgICAgc3dpdGNoTWFwKChfKSA9PiBtZXJnZSguLi5tZW51T3B0aW9ucy5tYXAoKG1lbnVPcHRpb24pID0+IG1lbnVPcHRpb24uc2VsZWN0aW9uQ2hhbmdlKSkpLFxuICAgICkgYXMgT2JzZXJ2YWJsZTxEcm9wZG93bk1lbnVPcHRpb25Ub2tlbj47XG4gIH1cblxuICAvKiogbWFyayB0aGUgbmV3IG1lbnVpdGVtIGFzIGFjdGl2ZSBvbmx5IGlmIHNvcnRpbmcgb3JkZXIgaXMgYXNjL2Rlc2MgKi9cbiAgbWFya01lbnVPcHRpb25Bc0FjdGl2ZShtZW51T3B0aW9uOiBEcm9wZG93bk1lbnVPcHRpb25Ub2tlbik6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpcmVjdGlvbiAhPT0gJycpIHtcbiAgICAgIG1lbnVPcHRpb24uYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBtYXJrQWxsTWVudU9wdGlvbkFzSW5hY3RpdmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYmJNZW51T3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYmJNZW51T3B0aW9ucy5mb3JFYWNoKChtZW51T3B0aW9uKSA9PiAobWVudU9wdGlvbi5hY3RpdmUgPSBmYWxzZSkpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUFyaWFTb3J0QXR0cmlidXRlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRyb3Bkb3duKSB7XG4gICAgICBjb25zdCBidXR0b25FbCA9IHRoaXMuZHJvcGRvd24uYnV0dG9uRWw/Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICBpZiAoIXRoaXMuZGlyZWN0aW9uKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKGJ1dHRvbkVsLCAnYXJpYS1zb3J0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZShidXR0b25FbCwgJ2FyaWEtc29ydCcsIHRoaXMuZ2V0QXJpYVNvcnRBdHRyaWJ1dGUodGhpcy5kaXJlY3Rpb24pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEFyaWFTb3J0QXR0cmlidXRlKGRpcmVjdGlvbjogU29ydERpcmVjdGlvbik6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gJ2FzYycgPyAnYXNjZW5kaW5nJyA6ICdkZXNjZW5kaW5nJztcbiAgfVxuXG4gIC8qKiBQcmVzZXQgYmItZHJvcGRvd24gYnV0dG9uIHRvIGFkZCByb2xlIGZvciBhMTF5IGFuZCBzZXQgZnVsbCBoZWlnaHQgYW5kIHdpZHRoIG9mIHRhYmxlIGNvbHVtbiAqL1xuICBwcml2YXRlIHByZXNldERyb3Bkb3duKGRyb3Bkb3duOiBEcm9wZG93bk1lbnVUb2tlbik6IHZvaWQge1xuICAgIGNvbnN0IGJ1dHRvbkVsID0gZHJvcGRvd24uYnV0dG9uRWw/Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoYnV0dG9uRWwsICdyb2xlJywgJ2NvbHVtbmhlYWRlcicpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoYnV0dG9uRWwsICdoZWlnaHQnLCAnMTAwJScpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoYnV0dG9uRWwsICd3aWR0aCcsICcxMDAlJyk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnBhcmVudFRhYmxlLnVuUmVnaXN0ZXJIZWFkZXIodGhpcyk7XG4gIH1cbn1cbiJdfQ==