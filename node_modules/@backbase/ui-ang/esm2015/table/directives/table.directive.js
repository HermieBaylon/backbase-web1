import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name TableDirective
 *
 * @description
 * Directive that displays a table.
 *
 * @a11y
 * The table directive doesn't provide any specific properties for accessibility.
 * But aria-sort tag can be set on the sortable header cells with ascending and descending values.
 *
 */
export class TableDirective {
    constructor() {
        /**
         * An event emitter for on select row action.
         */
        this.selectRow = new EventEmitter();
        /**
         * An event emitter for on row click action.
         */
        this.rowClick = new EventEmitter();
        /**
         * An event emitter for on column sort action.
         */
        this.sort = new EventEmitter();
        this.selectedRows = new Set();
        this.headers = new Set();
    }
    registerHeader(header) {
        this.headers.add(header);
    }
    unRegisterHeader(header) {
        this.headers.delete(header);
    }
    onRowClick(rowItem) {
        this.rowClick.emit(rowItem);
    }
    isSelected(row) {
        return this.selectedRows.has(row);
    }
    toggleItem(row, isChecked) {
        if (isChecked) {
            this.selectedRows.add(row);
        }
        else {
            this.selectedRows.delete(row);
        }
        this.selectRow.emit(this.selectedRows);
    }
    toggleAllItems() {
        if (this.isSelectedAll()) {
            this.selectedRows = new Set();
        }
        else {
            this.selectedRows = new Set(this.dataSource);
        }
        this.selectRow.emit(this.selectedRows);
    }
    isSelectedAll() {
        if (this.dataSource) {
            const matches = this.dataSource.filter((item) => this.selectedRows.has(item));
            return matches.length === this.dataSource.length;
        }
        return false;
    }
    isSelectedPart() {
        if (this.dataSource) {
            return this.selectedRows.size > 0 && this.selectedRows.size < this.dataSource.length;
        }
        return false;
    }
    onSort(sortEvent) {
        this.headers.forEach((header) => {
            if (header.bbSortable !== sortEvent.column) {
                header.direction = '';
                header.markAllMenuOptionAsInactive();
            }
        });
        this.sort.emit(sortEvent);
    }
}
TableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TableDirective, selector: "table[bbTable]", inputs: { dataSource: ["bbTable", "dataSource"] }, outputs: { selectRow: "selectRow", rowClick: "rowClick", sort: "sort" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'table[bbTable]',
                }]
        }], propDecorators: { dataSource: [{
                type: Input,
                args: ['bbTable']
            }], selectRow: [{
                type: Output
            }], rowClick: [{
                type: Output
            }], sort: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvdGFibGUvZGlyZWN0aXZlcy90YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFHdkU7Ozs7Ozs7Ozs7R0FVRztBQUlILE1BQU0sT0FBTyxjQUFjO0lBSDNCO1FBU0U7O1dBRUc7UUFDTyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN6Qzs7V0FFRztRQUNPLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hDOztXQUVHO1FBQ08sU0FBSSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFcEMsaUJBQVksR0FBZ0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN0QyxZQUFPLEdBQWdDLElBQUksR0FBRyxFQUFFLENBQUM7S0ErRGxEO0lBN0RDLGNBQWMsQ0FBQyxNQUE4QjtRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsZ0JBQWdCLENBQUMsTUFBOEI7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUFZO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBUSxFQUFFLFNBQWtCO1FBQ3JDLElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQy9CO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM5QztRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUU5RSxPQUFPLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7U0FDbEQ7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1NBQ3RGO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQW9CO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDOUIsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQzFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixNQUFNLENBQUMsMkJBQTJCLEVBQUUsQ0FBQzthQUN0QztRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7NEdBbEZVLGNBQWM7Z0dBQWQsY0FBYzs0RkFBZCxjQUFjO2tCQUgxQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzNCOzhCQU1tQixVQUFVO3NCQUEzQixLQUFLO3VCQUFDLFNBQVM7Z0JBSU4sU0FBUztzQkFBbEIsTUFBTTtnQkFJRyxRQUFRO3NCQUFqQixNQUFNO2dCQUlHLElBQUk7c0JBQWIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTb3J0RXZlbnQsIFRhYmxlU29ydGFibGVEaXJlY3RpdmUgfSBmcm9tICcuL3RhYmxlLXNvcnRhYmxlLmRpcmVjdGl2ZSc7XG5cbi8qKlxuICogQG5hbWUgVGFibGVEaXJlY3RpdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IGRpc3BsYXlzIGEgdGFibGUuXG4gKlxuICogQGExMXlcbiAqIFRoZSB0YWJsZSBkaXJlY3RpdmUgZG9lc24ndCBwcm92aWRlIGFueSBzcGVjaWZpYyBwcm9wZXJ0aWVzIGZvciBhY2Nlc3NpYmlsaXR5LlxuICogQnV0IGFyaWEtc29ydCB0YWcgY2FuIGJlIHNldCBvbiB0aGUgc29ydGFibGUgaGVhZGVyIGNlbGxzIHdpdGggYXNjZW5kaW5nIGFuZCBkZXNjZW5kaW5nIHZhbHVlcy5cbiAqXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3RhYmxlW2JiVGFibGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgVGFibGVEaXJlY3RpdmUge1xuICAvKipcbiAgICogVGhlIGRhdGEgc291cmNlIGZvciB0aGUgdGFibGUuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ2JiVGFibGUnKSBkYXRhU291cmNlPzogQXJyYXk8T2JqZWN0PjtcbiAgLyoqXG4gICAqIEFuIGV2ZW50IGVtaXR0ZXIgZm9yIG9uIHNlbGVjdCByb3cgYWN0aW9uLlxuICAgKi9cbiAgQE91dHB1dCgpIHNlbGVjdFJvdyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLyoqXG4gICAqIEFuIGV2ZW50IGVtaXR0ZXIgZm9yIG9uIHJvdyBjbGljayBhY3Rpb24uXG4gICAqL1xuICBAT3V0cHV0KCkgcm93Q2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIC8qKlxuICAgKiBBbiBldmVudCBlbWl0dGVyIGZvciBvbiBjb2x1bW4gc29ydCBhY3Rpb24uXG4gICAqL1xuICBAT3V0cHV0KCkgc29ydCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBzZWxlY3RlZFJvd3M6IFNldDxPYmplY3Q+ID0gbmV3IFNldCgpO1xuICBoZWFkZXJzOiBTZXQ8VGFibGVTb3J0YWJsZURpcmVjdGl2ZT4gPSBuZXcgU2V0KCk7XG5cbiAgcmVnaXN0ZXJIZWFkZXIoaGVhZGVyOiBUYWJsZVNvcnRhYmxlRGlyZWN0aXZlKSB7XG4gICAgdGhpcy5oZWFkZXJzLmFkZChoZWFkZXIpO1xuICB9XG5cbiAgdW5SZWdpc3RlckhlYWRlcihoZWFkZXI6IFRhYmxlU29ydGFibGVEaXJlY3RpdmUpIHtcbiAgICB0aGlzLmhlYWRlcnMuZGVsZXRlKGhlYWRlcik7XG4gIH1cblxuICBvblJvd0NsaWNrKHJvd0l0ZW06IGFueSkge1xuICAgIHRoaXMucm93Q2xpY2suZW1pdChyb3dJdGVtKTtcbiAgfVxuXG4gIGlzU2VsZWN0ZWQocm93OiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3RlZFJvd3MuaGFzKHJvdyk7XG4gIH1cblxuICB0b2dnbGVJdGVtKHJvdzogYW55LCBpc0NoZWNrZWQ6IGJvb2xlYW4pIHtcbiAgICBpZiAoaXNDaGVja2VkKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkUm93cy5hZGQocm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZFJvd3MuZGVsZXRlKHJvdyk7XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0Um93LmVtaXQodGhpcy5zZWxlY3RlZFJvd3MpO1xuICB9XG5cbiAgdG9nZ2xlQWxsSXRlbXMoKSB7XG4gICAgaWYgKHRoaXMuaXNTZWxlY3RlZEFsbCgpKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkUm93cyA9IG5ldyBTZXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZFJvd3MgPSBuZXcgU2V0KHRoaXMuZGF0YVNvdXJjZSk7XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0Um93LmVtaXQodGhpcy5zZWxlY3RlZFJvd3MpO1xuICB9XG5cbiAgaXNTZWxlY3RlZEFsbCgpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5kYXRhU291cmNlKSB7XG4gICAgICBjb25zdCBtYXRjaGVzID0gdGhpcy5kYXRhU291cmNlLmZpbHRlcigoaXRlbSkgPT4gdGhpcy5zZWxlY3RlZFJvd3MuaGFzKGl0ZW0pKTtcblxuICAgICAgcmV0dXJuIG1hdGNoZXMubGVuZ3RoID09PSB0aGlzLmRhdGFTb3VyY2UubGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzU2VsZWN0ZWRQYXJ0KCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmRhdGFTb3VyY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkUm93cy5zaXplID4gMCAmJiB0aGlzLnNlbGVjdGVkUm93cy5zaXplIDwgdGhpcy5kYXRhU291cmNlLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBvblNvcnQoc29ydEV2ZW50OiBTb3J0RXZlbnQpIHtcbiAgICB0aGlzLmhlYWRlcnMuZm9yRWFjaCgoaGVhZGVyKSA9PiB7XG4gICAgICBpZiAoaGVhZGVyLmJiU29ydGFibGUgIT09IHNvcnRFdmVudC5jb2x1bW4pIHtcbiAgICAgICAgaGVhZGVyLmRpcmVjdGlvbiA9ICcnO1xuICAgICAgICBoZWFkZXIubWFya0FsbE1lbnVPcHRpb25Bc0luYWN0aXZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zb3J0LmVtaXQoc29ydEV2ZW50KTtcbiAgfVxufVxuIl19