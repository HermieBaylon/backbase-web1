import { Component } from '@angular/core';
import { Validators, } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-number";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@backbase/ui-ang/input-range";
import * as i5 from "@angular/common";
export class InputRangeExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.form = this.formBuilder.group({
            range: this.formBuilder.group({
                min: [0, Validators.min(10)],
                max: [100, Validators.max(90)],
            }, {
                validator: (g) => {
                    const min = g.get('min').errors;
                    const max = g.get('max').errors;
                    const errors = min || max ? Object.assign(Object.assign({}, min), max) : null;
                    console.log(errors);
                    return errors;
                },
            }),
        });
    }
}
InputRangeExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeExampleComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputRangeExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeExampleComponent, selector: "bb-input-range-example-ui", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <div bbInputRange formGroupName=\"range\">\n    <bb-input-number-ui\n      bbInputRangeMin\n      formControlName=\"min\"\n      label=\"Minimum\"\n      [aria-describedby]=\"'error-min'\"\n    ></bb-input-number-ui>\n    <bb-input-number-ui\n      bbInputRangeMax\n      formControlName=\"max\"\n      label=\"Maximum\"\n      [aria-describedby]=\"'error-max'\"\n    ></bb-input-number-ui>\n  </div>\n  <ng-container\n    *ngTemplateOutlet=\"\n      errors;\n      context: { $implicit: form.get('range') }\n    \"\n  ></ng-container>\n</form>\n\n<ng-template #errors let-control>\n  <bb-input-validation-message-ui\n    *ngIf=\"control?.errors as errors\"\n    [showErrors]=\"control?.touched\"\n  >\n    <div id=\"error-min\" *ngIf=\"errors?.min as min\">\n      Minimum value is {{ min.min }}\n    </div>\n    <div id=\"error-max\" *ngIf=\"errors?.max as max\">\n      Maximum value is {{ max.max }}\n    </div>\n  </bb-input-validation-message-ui>\n</ng-template>\n", components: [{ type: i2.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.InputRangeDirective, selector: "[bbInputRange]" }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i4.InputRangeMinDirective, selector: "bb-input-number-ui[bbInputRangeMin]", inputs: ["bbInputRangeMin"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.InputRangeMaxDirective, selector: "bb-input-number-ui[bbInputRangeMax]", inputs: ["bbInputRangeMax"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRangeExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-range-example-ui',
                    templateUrl: './input-range.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcmFuZ2UuZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9fZXhhbXBsZS9pbnB1dC1yYW5nZS9leGFtcGxlcy9pbnB1dC1yYW5nZS5leGFtcGxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2lucHV0LXJhbmdlL2V4YW1wbGVzL2lucHV0LXJhbmdlLmV4YW1wbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBSUwsVUFBVSxHQUNYLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFNeEIsTUFBTSxPQUFPLDBCQUEwQjtJQXNCckMsWUFBNkIsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFyQnJELFNBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUM1QixLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQzNCO2dCQUNFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM1QixHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMvQixFQUNEO2dCQUNFLFNBQVMsRUFBRSxDQUFDLENBQVksRUFBRSxFQUFFO29CQUMxQixNQUFNLEdBQUcsR0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBaUIsQ0FBQyxNQUFNLENBQUM7b0JBQ2pELE1BQU0sR0FBRyxHQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFpQixDQUFDLE1BQU0sQ0FBQztvQkFFakQsTUFBTSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLGlDQUFNLEdBQUcsR0FBSyxHQUFHLEVBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFFdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFFcEIsT0FBTyxNQUFNLENBQUM7Z0JBQ2hCLENBQUM7YUFDRixDQUNGO1NBQ0YsQ0FBQyxDQUFDO0lBRXFELENBQUM7O3dIQXRCOUMsMEJBQTBCOzRHQUExQiwwQkFBMEIsaUVDWnZDLDIrQkFvQ0E7NEZEeEJhLDBCQUEwQjtrQkFKdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxXQUFXLEVBQUUsc0NBQXNDO2lCQUNwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRm9ybUJ1aWxkZXIsXG4gIEZvcm1Db250cm9sLFxuICBGb3JtR3JvdXAsXG4gIFZhbGlkYXRvcnMsXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItaW5wdXQtcmFuZ2UtZXhhbXBsZS11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1yYW5nZS5leGFtcGxlLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRSYW5nZUV4YW1wbGVDb21wb25lbnQge1xuICBmb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgcmFuZ2U6IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoXG4gICAgICB7XG4gICAgICAgIG1pbjogWzAsIFZhbGlkYXRvcnMubWluKDEwKV0sXG4gICAgICAgIG1heDogWzEwMCwgVmFsaWRhdG9ycy5tYXgoOTApXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHZhbGlkYXRvcjogKGc6IEZvcm1Hcm91cCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG1pbiA9IChnLmdldCgnbWluJykgYXMgRm9ybUNvbnRyb2wpLmVycm9ycztcbiAgICAgICAgICBjb25zdCBtYXggPSAoZy5nZXQoJ21heCcpIGFzIEZvcm1Db250cm9sKS5lcnJvcnM7XG5cbiAgICAgICAgICBjb25zdCBlcnJvcnMgPSBtaW4gfHwgbWF4ID8geyAuLi5taW4sIC4uLm1heCB9IDogbnVsbDtcblxuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9ycyk7XG5cbiAgICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICApLFxuICB9KTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcikge31cbn1cbiIsIjxmb3JtIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxuICA8ZGl2IGJiSW5wdXRSYW5nZSBmb3JtR3JvdXBOYW1lPVwicmFuZ2VcIj5cbiAgICA8YmItaW5wdXQtbnVtYmVyLXVpXG4gICAgICBiYklucHV0UmFuZ2VNaW5cbiAgICAgIGZvcm1Db250cm9sTmFtZT1cIm1pblwiXG4gICAgICBsYWJlbD1cIk1pbmltdW1cIlxuICAgICAgW2FyaWEtZGVzY3JpYmVkYnldPVwiJ2Vycm9yLW1pbidcIlxuICAgID48L2JiLWlucHV0LW51bWJlci11aT5cbiAgICA8YmItaW5wdXQtbnVtYmVyLXVpXG4gICAgICBiYklucHV0UmFuZ2VNYXhcbiAgICAgIGZvcm1Db250cm9sTmFtZT1cIm1heFwiXG4gICAgICBsYWJlbD1cIk1heGltdW1cIlxuICAgICAgW2FyaWEtZGVzY3JpYmVkYnldPVwiJ2Vycm9yLW1heCdcIlxuICAgID48L2JiLWlucHV0LW51bWJlci11aT5cbiAgPC9kaXY+XG4gIDxuZy1jb250YWluZXJcbiAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgZXJyb3JzO1xuICAgICAgY29udGV4dDogeyAkaW1wbGljaXQ6IGZvcm0uZ2V0KCdyYW5nZScpIH1cbiAgICBcIlxuICA+PC9uZy1jb250YWluZXI+XG48L2Zvcm0+XG5cbjxuZy10ZW1wbGF0ZSAjZXJyb3JzIGxldC1jb250cm9sPlxuICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpXG4gICAgKm5nSWY9XCJjb250cm9sPy5lcnJvcnMgYXMgZXJyb3JzXCJcbiAgICBbc2hvd0Vycm9yc109XCJjb250cm9sPy50b3VjaGVkXCJcbiAgPlxuICAgIDxkaXYgaWQ9XCJlcnJvci1taW5cIiAqbmdJZj1cImVycm9ycz8ubWluIGFzIG1pblwiPlxuICAgICAgTWluaW11bSB2YWx1ZSBpcyB7eyBtaW4ubWluIH19XG4gICAgPC9kaXY+XG4gICAgPGRpdiBpZD1cImVycm9yLW1heFwiICpuZ0lmPVwiZXJyb3JzPy5tYXggYXMgbWF4XCI+XG4gICAgICBNYXhpbXVtIHZhbHVlIGlzIHt7IG1heC5tYXggfX1cbiAgICA8L2Rpdj5cbiAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG48L25nLXRlbXBsYXRlPlxuIl19