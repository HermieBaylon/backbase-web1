import { Component, Input } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./configuration-input.service";
import * as i3 from "@backbase/ui-ang/input-checkbox";
import * as i4 from "@backbase/ui-ang/input-radio-group";
import * as i5 from "@backbase/ui-ang/dropdown-single-select";
import * as i6 from "@angular/common";
export class ConfigurationInputComponent {
    constructor(formBuilder, configurationInputService) {
        this.formBuilder = formBuilder;
        this.configurationInputService = configurationInputService;
        this.checkboxList = [];
        this.radioList = [];
        this.dropdownList = [];
        this.vform = this.formBuilder.group({
            checkbox: new FormGroup({}),
            radio: new FormGroup({}),
            dropdown: new FormGroup({}),
        });
    }
    ngOnInit() {
        if (this.dropdownList) {
            this.dropdownList.forEach((dropdownItem) => {
                this.dropdown.addControl(dropdownItem.formControlName, new FormControl(dropdownItem.dropdownItemList[0]));
            });
        }
        if (this.radioList) {
            this.radioList.forEach((radioItem) => {
                this.radio.addControl(radioItem.formControlName, new FormControl(radioItem.radioItems[0].value));
            });
        }
        if (this.checkboxList) {
            this.checkboxList.forEach((checkboxItem) => {
                this.checkbox.addControl(checkboxItem.formControlName, new FormControl(checkboxItem.value));
            });
        }
        this.configurationInputService.sharedField.next(this.vform.value);
        this.vform.valueChanges.subscribe((val) => {
            this.configurationInputService.sharedField.next(val);
        });
    }
    get dropdown() {
        return this.vform.get('dropdown');
    }
    get radio() {
        return this.vform.get('radio');
    }
    get checkbox() {
        return this.vform.get('checkbox');
    }
}
ConfigurationInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfigurationInputComponent, deps: [{ token: i1.FormBuilder }, { token: i2.ConfigurationInputService }], target: i0.ɵɵFactoryTarget.Component });
ConfigurationInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfigurationInputComponent, selector: "bb-configuration-input-ui", inputs: { checkboxList: "checkboxList", radioList: "radioList", dropdownList: "dropdownList" }, ngImport: i0, template: "<div style=\"height: 15%; padding: 10px; border-bottom: 1px solid #eee\">\n  <span>Configuration</span>\n</div>\n<div style=\"padding: 10px\">\n  <form [formGroup]=\"vform\">\n    <div formGroupName=\"checkbox\" class=\"mb-4\">\n      <div *ngFor=\"let item of checkbox.controls | keyvalue; let i = index\" class=\"mb-3\">\n        <bb-input-checkbox-ui\n          label=\"{{ this.checkboxList[i].label }}\"\n          formControlName=\"{{ item.key }}\"\n        ></bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div formGroupName=\"radio\">\n      <div *ngFor=\"let item of radio.controls | keyvalue; let i = index\">\n        <label>{{ radioList[i].label }}</label>\n        <bb-input-radio-group-ui\n          formControlName=\"{{ item.key }}\"\n          [horizontal]=\"true\"\n          [preselect]=\"true\"\n          [required]=\"true\"\n        >\n          <bb-input-radio-ui\n            *ngFor=\"let radioData of radioList[i].radioItems\"\n            [label]=\"radioData.label\"\n            [value]=\"radioData.value\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n      </div>\n    </div>\n\n    <div formGroupName=\"dropdown\">\n      <div *ngFor=\"let item of dropdown.controls | keyvalue; let i = index\">\n        <bb-dropdown-single-select-ui\n          [label]=\"dropdownList[i].label\"\n          [formControlName]=\"dropdownList[i].formControlName\"\n        >\n          <bb-dropdown-single-select-option-ui\n            *ngFor=\"let dropdownData of dropdownList[i].dropdownItemList\"\n            class=\"text-capitalize\"\n            [value]=\"dropdownData\"\n            [label]=\"dropdownData\"\n          ></bb-dropdown-single-select-option-ui>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n  </form>\n</div>\n", components: [{ type: i3.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i4.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i4.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i5.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i5.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "keyvalue": i6.KeyValuePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfigurationInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-configuration-input-ui',
                    templateUrl: './configuration-input.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.ConfigurationInputService }]; }, propDecorators: { checkboxList: [{
                type: Input
            }], radioList: [{
                type: Input
            }], dropdownList: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,