import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/ellipsis";
import * as i2 from "@angular/common";
let EllipsisShowcaseComponent = class EllipsisShowcaseComponent {
    constructor() {
        this.hostRef = this;
        this.isMessageTruncated = false;
        this.textToEllipse = 'Lorem ipsum dolor sit amet.';
    }
    setIsContentTruncated(isMessageTruncated) {
        this.isMessageTruncated = isMessageTruncated;
    }
};
EllipsisShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
EllipsisShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EllipsisShowcaseComponent, selector: "bb-ellipsis-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h2>Max width 100px:</h2>\n  <div [style.width.px]=\"100\">\n    <bb-ellipsis-ui [text]=\"textToEllipse\"></bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Max width 200px:</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui [text]=\"textToEllipse\" [tooltipTriggers]=\"'hover'\"></bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Line clamp (Truncating Multiple Line Text)</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui\n      [text]=\"\n        'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aperiam eligendi iusto aliquid quaerat maxime totam, tenetur unde aut illum minus?'\n      \"\n      [tooltipTriggers]=\"''\"\n      [lineClamp]=\"3\"\n    ></bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Custom html template via ng-content</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui [lineClamp]=\"3\">\n      <span\n        >Lorem <a href=\"#\">ipsum</a> dolor, sit amet <strong>consectetur adipisicing elit.</strong> Perspiciatis nam\n        <strong>otam, vel accusantium aspernatu</strong> quisquam vero cupiditate architecto laudantium molestias.</span\n      >\n    </bb-ellipsis-ui>\n  </div>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h2>Checking content truncation</h2>\n  <div [style.width.px]=\"200\">\n    <bb-ellipsis-ui [lineClamp]=\"2\">\n      <div bbIsContentTruncated [hostRef]=\"hostRef\">\n        <span\n          >Lorem <a href=\"#\">ipsum</a> dolor, sit amet <strong>consectetur adipisicing elit.</strong> Perspiciatis nam\n          <strong>otam, vel accusantium aspernatu</strong> quisquam vero cupiditate architecto laudantium\n          molestias.</span\n        >\n      </div>\n    </bb-ellipsis-ui>\n  </div>\n  <button *ngIf=\"isMessageTruncated\" class=\"btn-link-text bb-text-bold\">See more</button>\n</div>\n", components: [{ type: i1.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i1.IsContentTruncatedDirective, selector: "[bbIsContentTruncated]", inputs: ["hostRef"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
EllipsisShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], EllipsisShowcaseComponent);
export { EllipsisShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EllipsisShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-ellipsis-ui-showcase',
                    templateUrl: 'ellipsis-showcase.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMtc2hvd2Nhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvZWxsaXBzaXMvc2hvd2Nhc2UvZWxsaXBzaXMtc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvZWxsaXBzaXMvc2hvd2Nhc2UvZWxsaXBzaXMtc2hvd2Nhc2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7O0lBVXhDLHlCQUF5QixTQUF6Qix5QkFBeUI7O1FBQzNCLFlBQU8sR0FBOEIsSUFBSSxDQUFDO1FBQ25ELHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixrQkFBYSxHQUFHLDZCQUE2QixDQUFDO0tBSy9DO0lBSEMscUJBQXFCLENBQUMsa0JBQTJCO1FBQy9DLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztJQUMvQyxDQUFDO0NBQ0YsQ0FBQTt1SEFSWSx5QkFBeUI7MkdBQXpCLHlCQUF5QiwrRENYdEMsKzREQWtEQTtBRHZDYSx5QkFBeUI7SUFIckMsWUFBWSxDQUFDO1FBQ1osY0FBYyxFQUFFLElBQUk7S0FDckIsQ0FBQztHQUNXLHlCQUF5QixDQVFyQztTQVJZLHlCQUF5Qjs0RkFBekIseUJBQXlCO2tCQVByQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFdBQVcsRUFBRSxrQ0FBa0M7aUJBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYWNrYmFzZURvY3MgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3V0aWwnO1xuaW1wb3J0IHsgQ2hlY2tDb250ZW50VHJ1bmNhdGlvbkJlaGF2aW91ciB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvZWxsaXBzaXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1lbGxpcHNpcy11aS1zaG93Y2FzZScsXG4gIHRlbXBsYXRlVXJsOiAnZWxsaXBzaXMtc2hvd2Nhc2UuY29tcG9uZW50Lmh0bWwnLFxufSlcbkBCYWNrYmFzZURvY3Moe1xuICBpc1RoZW1lMlN0YWJsZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgRWxsaXBzaXNTaG93Y2FzZUNvbXBvbmVudCBpbXBsZW1lbnRzIENoZWNrQ29udGVudFRydW5jYXRpb25CZWhhdmlvdXIge1xuICByZWFkb25seSBob3N0UmVmOiBFbGxpcHNpc1Nob3djYXNlQ29tcG9uZW50ID0gdGhpcztcbiAgaXNNZXNzYWdlVHJ1bmNhdGVkID0gZmFsc2U7XG4gIHRleHRUb0VsbGlwc2UgPSAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQuJztcblxuICBzZXRJc0NvbnRlbnRUcnVuY2F0ZWQoaXNNZXNzYWdlVHJ1bmNhdGVkOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc01lc3NhZ2VUcnVuY2F0ZWQgPSBpc01lc3NhZ2VUcnVuY2F0ZWQ7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tbGdcIj5cbiAgPGgyPk1heCB3aWR0aCAxMDBweDo8L2gyPlxuICA8ZGl2IFtzdHlsZS53aWR0aC5weF09XCIxMDBcIj5cbiAgICA8YmItZWxsaXBzaXMtdWkgW3RleHRdPVwidGV4dFRvRWxsaXBzZVwiPjwvYmItZWxsaXBzaXMtdWk+XG4gIDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLWxnXCI+XG4gIDxoMj5NYXggd2lkdGggMjAwcHg6PC9oMj5cbiAgPGRpdiBbc3R5bGUud2lkdGgucHhdPVwiMjAwXCI+XG4gICAgPGJiLWVsbGlwc2lzLXVpIFt0ZXh0XT1cInRleHRUb0VsbGlwc2VcIiBbdG9vbHRpcFRyaWdnZXJzXT1cIidob3ZlcidcIj48L2JiLWVsbGlwc2lzLXVpPlxuICA8L2Rpdj5cbjwvZGl2PlxuPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1sZ1wiPlxuICA8aDI+TGluZSBjbGFtcCAoVHJ1bmNhdGluZyBNdWx0aXBsZSBMaW5lIFRleHQpPC9oMj5cbiAgPGRpdiBbc3R5bGUud2lkdGgucHhdPVwiMjAwXCI+XG4gICAgPGJiLWVsbGlwc2lzLXVpXG4gICAgICBbdGV4dF09XCJcbiAgICAgICAgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyLCBhZGlwaXNpY2luZyBlbGl0LiBBcGVyaWFtIGVsaWdlbmRpIGl1c3RvIGFsaXF1aWQgcXVhZXJhdCBtYXhpbWUgdG90YW0sIHRlbmV0dXIgdW5kZSBhdXQgaWxsdW0gbWludXM/J1xuICAgICAgXCJcbiAgICAgIFt0b29sdGlwVHJpZ2dlcnNdPVwiJydcIlxuICAgICAgW2xpbmVDbGFtcF09XCIzXCJcbiAgICA+PC9iYi1lbGxpcHNpcy11aT5cbiAgPC9kaXY+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tbGdcIj5cbiAgPGgyPkN1c3RvbSBodG1sIHRlbXBsYXRlIHZpYSBuZy1jb250ZW50PC9oMj5cbiAgPGRpdiBbc3R5bGUud2lkdGgucHhdPVwiMjAwXCI+XG4gICAgPGJiLWVsbGlwc2lzLXVpIFtsaW5lQ2xhbXBdPVwiM1wiPlxuICAgICAgPHNwYW5cbiAgICAgICAgPkxvcmVtIDxhIGhyZWY9XCIjXCI+aXBzdW08L2E+IGRvbG9yLCBzaXQgYW1ldCA8c3Ryb25nPmNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuPC9zdHJvbmc+IFBlcnNwaWNpYXRpcyBuYW1cbiAgICAgICAgPHN0cm9uZz5vdGFtLCB2ZWwgYWNjdXNhbnRpdW0gYXNwZXJuYXR1PC9zdHJvbmc+IHF1aXNxdWFtIHZlcm8gY3VwaWRpdGF0ZSBhcmNoaXRlY3RvIGxhdWRhbnRpdW0gbW9sZXN0aWFzLjwvc3BhblxuICAgICAgPlxuICAgIDwvYmItZWxsaXBzaXMtdWk+XG4gIDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLWxnXCI+XG4gIDxoMj5DaGVja2luZyBjb250ZW50IHRydW5jYXRpb248L2gyPlxuICA8ZGl2IFtzdHlsZS53aWR0aC5weF09XCIyMDBcIj5cbiAgICA8YmItZWxsaXBzaXMtdWkgW2xpbmVDbGFtcF09XCIyXCI+XG4gICAgICA8ZGl2IGJiSXNDb250ZW50VHJ1bmNhdGVkIFtob3N0UmVmXT1cImhvc3RSZWZcIj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICA+TG9yZW0gPGEgaHJlZj1cIiNcIj5pcHN1bTwvYT4gZG9sb3IsIHNpdCBhbWV0IDxzdHJvbmc+Y29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC48L3N0cm9uZz4gUGVyc3BpY2lhdGlzIG5hbVxuICAgICAgICAgIDxzdHJvbmc+b3RhbSwgdmVsIGFjY3VzYW50aXVtIGFzcGVybmF0dTwvc3Ryb25nPiBxdWlzcXVhbSB2ZXJvIGN1cGlkaXRhdGUgYXJjaGl0ZWN0byBsYXVkYW50aXVtXG4gICAgICAgICAgbW9sZXN0aWFzLjwvc3BhblxuICAgICAgICA+XG4gICAgICA8L2Rpdj5cbiAgICA8L2JiLWVsbGlwc2lzLXVpPlxuICA8L2Rpdj5cbiAgPGJ1dHRvbiAqbmdJZj1cImlzTWVzc2FnZVRydW5jYXRlZFwiIGNsYXNzPVwiYnRuLWxpbmstdGV4dCBiYi10ZXh0LWJvbGRcIj5TZWUgbW9yZTwvYnV0dG9uPlxuPC9kaXY+XG4iXX0=