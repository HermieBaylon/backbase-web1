import { __decorate } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { of } from 'rxjs';
import { COUNTRIES } from './countries';
import { TableDirective } from '@backbase/ui-ang/table';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/dropdown-menu";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/badge";
import * as i4 from "@backbase/ui-ang/pagination";
import * as i5 from "@backbase/ui-ang/table";
import * as i6 from "@angular/common";
let TableShowcaseComponent = class TableShowcaseComponent {
    constructor() {
        this.currentPage = 0;
        this.pageSize = 10;
        this.rotate = { asc: 'ascending', desc: 'descending', '': '' };
        this.iconMap = { asc: 'caret-up', desc: 'caret-down', '': '' };
        this.sortDirection = '';
        this.activeSortingOption = {};
        this.sortingOptions = [
            { label: 'Capital', value: 'capital', direction: '' },
            { label: 'Population', value: 'population', direction: '' },
        ];
        this.countries$ = of(this.getItems(0, this.pageSize));
    }
    onSort({ column, direction }) {
        this.activeSortingOption = {};
        const selectedOption = this.sortingOptions.find((option) => option.value === column);
        if (selectedOption && direction !== '') {
            this.activeSortingOption = selectedOption;
            this.activeSortingOption.direction = direction;
        }
        this.countries$ = of(this.sort(this.getItems(this.currentPage * this.pageSize, this.currentPage * this.pageSize + this.pageSize), column, direction));
    }
    onRowSelect(data) {
        this.selected = data;
    }
    onRowClick(data) {
        this.tableRef.toggleItem(data, !this.tableRef.isSelected(data));
    }
    search(value) {
        this.countries$ =
            value === ''
                ? of(this.getItems(this.currentPage, this.pageSize))
                : of(COUNTRIES.filter((country) => country.name.toLowerCase().includes(value)));
    }
    sort(countries, column, direction) {
        this.sortDirection = this.rotate[direction];
        if (direction === '') {
            return countries;
        }
        else {
            return [...countries].sort((a, b) => {
                const res = this.compare(a[column], b[column]);
                return direction === 'asc' ? res : -res;
            });
        }
    }
    compare(v1, v2) {
        return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;
    }
    getItems(start, end) {
        return COUNTRIES.slice(start, end);
    }
    get paginator() {
        return {
            page: this.currentPage,
            boundaryLinks: false,
            directionLinks: true,
            totalItems: COUNTRIES.length,
            itemsPerPage: this.pageSize,
            maxNavPages: 3,
            onPageChange: (page) => {
                this.countries$ = of(this.getItems(page * this.pageSize, page * this.pageSize + this.pageSize));
            },
        };
    }
};
TableShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableShowcaseComponent, selector: "bb-table-ui-showcase", viewQueries: [{ propertyName: "tableRef", first: true, predicate: ["tableRef"], descendants: true, read: TableDirective, static: true }], ngImport: i0, template: "<div class=\"card shadow-sm\">\n  <div class=\"card-body\">\n    <div class=\"table-responsive\">\n      <table\n        #tableRef\n        (rowClick)=\"onRowClick($event)\"\n        (selectRow)=\"onRowSelect($event)\"\n        (sort)=\"onSort($event)\"\n        [bbTable]=\"countries$ | async\"\n        bbTableFocus\n        class=\"table table-hover\"\n        data-role=\"table-showcase\"\n      >\n        <!--Add empty caption to fix sonar warning-->\n        <caption></caption>\n        <thead>\n          <tr>\n            <th\n              [attr.aria-sort]=\"sortDirection\"\n              [bbSortable]=\"'name'\"\n              scope=\"col\"\n              tabindex=\"0\"\n              data-role=\"table-sort-name\"\n            >\n              <span class=\"th-content\"> Data left aligned </span>\n            </th>\n            <!--set position relative is required. Since the dropdown button(set as position absolute) requires full height and width of the parent element-->\n            <th class=\"position-relative\" bbSortable scope=\"col\" role=\"presentation\" data-role=\"table-sort-dropdown\">\n              <span class=\"th-content\">Capital, Population</span>\n              <!--Add th-dropdown-menu class on dropdown to make it work with <th> tag-->\n              <!--Set role as presentation for dropdown so that screen reader will not read this dropdown.-->\n              <!--bbSortable directive will add necessary role to dropdown button so that button will be actually read as colunmheader by screen readers-->\n              <bb-dropdown-menu-ui\n                btnColor=\"unstyled\"\n                buttonSize=\"sm\"\n                class=\"th-dropdown-menu\"\n                dropDownButtonLabel=\"Capital, Population\"\n                role=\"presentation\"\n                position=\"bottom-left\"\n              >\n                <ng-template bbDropdownMenuItem>\n                  <div class=\"dropdown-header\">\n                    <h3 class=\"bb-subheader bb-text-support\">SORT BY</h3>\n                  </div>\n                  <!--bbTableMenuitem directive is added to facilitate the common behaviour of dropdown item such as active class and click event-->\n                  <button\n                    role=\"menuitem\"\n                    *ngFor=\"let option of sortingOptions\"\n                    class=\"dropdown-item bb-stack\"\n                    [bbDropdownMenuOption]=\"option.value\"\n                  >\n                    <span>\n                      {{ option.label }}\n                    </span>\n                    <bb-icon-ui\n                      class=\"bb-stack__item--push-right\"\n                      *ngIf=\"activeSortingOption.value === option.value\"\n                      [name]=\"iconMap[activeSortingOption.direction]\"\n                    >\n                    </bb-icon-ui>\n                  </button>\n                </ng-template>\n              </bb-dropdown-menu-ui>\n            </th>\n            <th class=\"text-center\" scope=\"col\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <th [attr.aria-sort]=\"sortDirection\" bbSortable=\"area\" scope=\"col\" tabindex=\"0\" data-role=\"table-sort-area\">\n              <span class=\"th-content\"> Area (left aligned) </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <th class=\"text-right\" scope=\"col\">\n              <span class=\"th-content\"> Data right aligned </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let country of countries$ | async\" [bbRow]=\"country\">\n            <th scope=\"row\">\n              <span class=\"th-content\"> Data left aligned </span>\n            </th>\n            <td>\n              <div class=\"bb-stack\">\n                <img\n                  [src]=\"'https://upload.wikimedia.org/wikipedia/commons/' + country.flag\"\n                  [style.width]=\"'20px'\"\n                  [style.verticalAlign]=\"'baseline'\"\n                  alt=\"flag\"\n                  class=\"bb-stack__item--spacing-sm\"\n                  src=\"#\"\n                />\n                {{ country.name }}\n              </div>\n            </td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Capital (left aligned) </span>\n            </th>\n            <td>\n              <span class=\"bb-block bb-block--sm\">{{ country.capital }}</span>\n              <span class=\"text-support\">({{ country.capitalPopulation | number }})</span>\n            </td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <td class=\"text-center\">Some random text here</td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Area (left aligned) </span>\n            </th>\n            <td>Area: {{ country.area }}</td>\n            <th scope=\"row\">\n              <span class=\"th-content\"> Data center aligned </span>\n            </th>\n            <td class=\"bb-text-align-center\">\n              <bb-badge-ui color=\"info\" text=\"test\"></bb-badge-ui>\n            </td>\n            <th scope=\"row\" class=\"bb-text-align-right\">\n              <span class=\"th-content\"> Data right aligned </span>\n            </th>\n            <td class=\"bb-text-align-right\">\n              {{ country.population | number }}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <bb-pagination-ui\n      (pageChange)=\"paginator.onPageChange($event)\"\n      [boundaryLinks]=\"paginator.boundaryLinks\"\n      [directionLinks]=\"paginator.directionLinks\"\n      [itemsPerPage]=\"paginator.itemsPerPage\"\n      [maxNavPages]=\"paginator.maxNavPages\"\n      [page]=\"paginator.page\"\n      [totalItems]=\"paginator.totalItems\"\n    >\n    </bb-pagination-ui>\n  </div>\n</div>\n", components: [{ type: i1.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i4.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }], directives: [{ type: i5.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i5.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i5.TableSortableDirective, selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i1.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.DropdownMenuOptionDirective, selector: "[bbDropdownMenuOption]", inputs: ["bbDropdownMenuOption", "active"], outputs: ["selectionChange"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }], pipes: { "async": i6.AsyncPipe, "number": i6.DecimalPipe } });
TableShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], TableShowcaseComponent);
export { TableShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-ui-showcase',
                    templateUrl: './table-showcase.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { tableRef: [{
                type: ViewChild,
                args: ['tableRef', { static: true, read: TableDirective }]
            }] } });
//# sourceMappingURL=data:application/json;base64,