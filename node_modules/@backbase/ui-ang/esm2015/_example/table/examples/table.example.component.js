import { Component } from '@angular/core';
import { of } from 'rxjs';
import { countryData } from './countries';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/table";
import * as i2 from "@angular/common";
const sortInteger = {
    asc: 1,
    desc: -1,
};
export class TableExampleComponent {
    constructor() {
        this.countries = countryData;
        this.countries$ = of(this.countries);
        this.sortDirection = 0;
        this.sortKey = '';
        this.pathFlagAssets = 'https://upload.wikimedia.org/wikipedia/commons/';
    }
    onRowClick(country) {
        alert(`You clicked on ${country.name}`);
    }
    onSort({ column, direction }) {
        this.sortDirection = sortInteger[direction] || 0;
        this.sortKey = column;
        this.countries$ = of(this.sort(this.countries, this.sortKey, this.sortDirection));
    }
    sort(countries, column, direction) {
        return [...countries].sort((a, b) => direction * this.compare(a[column], b[column]));
    }
    compare(v1, v2) {
        return v1 === v2 ? 0 : v1 < v2 ? -1 : 1;
    }
    getAriaSort(key) {
        if (this.sortKey === key) {
            if (this.sortDirection < 0) {
                return 'descending';
            }
            else if (this.sortDirection > 0) {
                return 'ascending';
            }
        }
        return null;
    }
}
TableExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableExampleComponent, selector: "bb-table-example-ui", ngImport: i0, template: "<table\n  [bbTable]=\"countries$ | async\"\n  bbTableFocus\n  (rowClick)=\"onRowClick($event)\"\n  (sort)=\"onSort($event)\"\n  class=\"table table-hover\"\n>\n  <thead>\n    <tr>\n      <th\n        [attr.aria-sort]=\"getAriaSort('name')\"\n        [bbSortable]=\"'name'\"\n        scope=\"col\"\n        tabindex=\"0\"\n      >\n        Country\n      </th>\n      <th\n        [attr.aria-sort]=\"getAriaSort('area')\"\n        [bbSortable]=\"'area'\"\n        scope=\"col\"\n        tabindex=\"0\"\n      >\n        Area (km\u00B2)\n      </th>\n      <th\n        [attr.aria-sort]=\"getAriaSort('population')\"\n        [bbSortable]=\"'population'\"\n        scope=\"col\"\n        tabindex=\"0\"\n      >\n        Population\n      </th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let country of countries$ | async\" [bbRow]=\"country\">\n      <td>\n        {{ country.name }}\n      </td>\n      <td>\n        {{ country.area | number }}\n      </td>\n      <td>\n        {{ country.population | number }}\n      </td>\n      <td>\n        <img\n          [alt]=\"'Flag of ' + country.name\"\n          [src]=\"pathFlagAssets + country.flag\"\n          width=\"32\"\n        />\n      </td>\n    </tr>\n  </tbody>\n</table>\n", directives: [{ type: i1.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i1.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i1.TableSortableDirective, selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }], pipes: { "async": i2.AsyncPipe, "number": i2.DecimalPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-example-ui',
                    templateUrl: './table.example.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9fZXhhbXBsZS90YWJsZS9leGFtcGxlcy90YWJsZS5leGFtcGxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL3RhYmxlL2V4YW1wbGVzL3RhYmxlLmV4YW1wbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSXRDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7Ozs7QUFFMUMsTUFBTSxXQUFXLEdBQThCO0lBQzdDLEdBQUcsRUFBRSxDQUFDO0lBQ04sSUFBSSxFQUFFLENBQUMsQ0FBQztDQUNULENBQUM7QUFNRixNQUFNLE9BQU8scUJBQXFCO0lBSmxDO1FBS0UsY0FBUyxHQUFrQixXQUFXLENBQUM7UUFDdkMsZUFBVSxHQUErQixFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVELGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFFYixtQkFBYyxHQUFHLGlEQUFpRCxDQUFDO0tBd0NwRTtJQXRDQyxVQUFVLENBQUMsT0FBb0I7UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBYTtRQUNyQyxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FDNUQsQ0FBQztJQUNKLENBQUM7SUFFRCxJQUFJLENBQ0YsU0FBd0IsRUFDeEIsTUFBYyxFQUNkLFNBQWlCO1FBRWpCLE9BQU8sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDeEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ3pELENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQW1CLEVBQUUsRUFBbUI7UUFDOUMsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFXO1FBQ3JCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRTtnQkFDMUIsT0FBTyxZQUFZLENBQUM7YUFDckI7aUJBQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRTtnQkFDakMsT0FBTyxXQUFXLENBQUM7YUFDcEI7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7bUhBOUNVLHFCQUFxQjt1R0FBckIscUJBQXFCLDJEQ2hCbEMsNnVDQXlEQTs0RkR6Q2EscUJBQXFCO2tCQUpqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFdBQVcsRUFBRSxnQ0FBZ0M7aUJBQzlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuLy8gUGxlYXNlIHJlcGxhY2UgcmVsYXRpdmUgcGF0aCBpbXBvcnRzIGUuZy4gJy4uLyonIHdpdGggJ0BiYWNrYmFzZS91aS1hbmcnLlxuaW1wb3J0IHsgU29ydEV2ZW50IH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy90YWJsZSc7XG5pbXBvcnQgeyBDb3VudHJ5RGF0YSB9IGZyb20gJy4vdGFibGUuZXhhbXBsZS5tb2RlbCc7XG5pbXBvcnQgeyBjb3VudHJ5RGF0YSB9IGZyb20gJy4vY291bnRyaWVzJztcblxuY29uc3Qgc29ydEludGVnZXI6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7XG4gIGFzYzogMSxcbiAgZGVzYzogLTEsXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi10YWJsZS1leGFtcGxlLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYmxlLmV4YW1wbGUuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBUYWJsZUV4YW1wbGVDb21wb25lbnQge1xuICBjb3VudHJpZXM6IENvdW50cnlEYXRhW10gPSBjb3VudHJ5RGF0YTtcbiAgY291bnRyaWVzJD86IE9ic2VydmFibGU8Q291bnRyeURhdGFbXT4gPSBvZih0aGlzLmNvdW50cmllcyk7XG5cbiAgc29ydERpcmVjdGlvbiA9IDA7XG4gIHNvcnRLZXkgPSAnJztcblxuICBwYXRoRmxhZ0Fzc2V0cyA9ICdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLyc7XG5cbiAgb25Sb3dDbGljayhjb3VudHJ5OiBDb3VudHJ5RGF0YSkge1xuICAgIGFsZXJ0KGBZb3UgY2xpY2tlZCBvbiAke2NvdW50cnkubmFtZX1gKTtcbiAgfVxuXG4gIG9uU29ydCh7IGNvbHVtbiwgZGlyZWN0aW9uIH06IFNvcnRFdmVudCkge1xuICAgIHRoaXMuc29ydERpcmVjdGlvbiA9IHNvcnRJbnRlZ2VyW2RpcmVjdGlvbl0gfHwgMDtcbiAgICB0aGlzLnNvcnRLZXkgPSBjb2x1bW47XG5cbiAgICB0aGlzLmNvdW50cmllcyQgPSBvZihcbiAgICAgIHRoaXMuc29ydCh0aGlzLmNvdW50cmllcywgdGhpcy5zb3J0S2V5LCB0aGlzLnNvcnREaXJlY3Rpb24pLFxuICAgICk7XG4gIH1cblxuICBzb3J0KFxuICAgIGNvdW50cmllczogQ291bnRyeURhdGFbXSxcbiAgICBjb2x1bW46IHN0cmluZyxcbiAgICBkaXJlY3Rpb246IG51bWJlcixcbiAgKTogQ291bnRyeURhdGFbXSB7XG4gICAgcmV0dXJuIFsuLi5jb3VudHJpZXNdLnNvcnQoXG4gICAgICAoYSwgYikgPT4gZGlyZWN0aW9uICogdGhpcy5jb21wYXJlKGFbY29sdW1uXSwgYltjb2x1bW5dKSxcbiAgICApO1xuICB9XG5cbiAgY29tcGFyZSh2MTogbnVtYmVyIHwgc3RyaW5nLCB2MjogbnVtYmVyIHwgc3RyaW5nKSB7XG4gICAgcmV0dXJuIHYxID09PSB2MiA/IDAgOiB2MSA8IHYyID8gLTEgOiAxO1xuICB9XG5cbiAgZ2V0QXJpYVNvcnQoa2V5OiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAodGhpcy5zb3J0S2V5ID09PSBrZXkpIHtcbiAgICAgIGlmICh0aGlzLnNvcnREaXJlY3Rpb24gPCAwKSB7XG4gICAgICAgIHJldHVybiAnZGVzY2VuZGluZyc7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc29ydERpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgcmV0dXJuICdhc2NlbmRpbmcnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iLCI8dGFibGVcbiAgW2JiVGFibGVdPVwiY291bnRyaWVzJCB8IGFzeW5jXCJcbiAgYmJUYWJsZUZvY3VzXG4gIChyb3dDbGljayk9XCJvblJvd0NsaWNrKCRldmVudClcIlxuICAoc29ydCk9XCJvblNvcnQoJGV2ZW50KVwiXG4gIGNsYXNzPVwidGFibGUgdGFibGUtaG92ZXJcIlxuPlxuICA8dGhlYWQ+XG4gICAgPHRyPlxuICAgICAgPHRoXG4gICAgICAgIFthdHRyLmFyaWEtc29ydF09XCJnZXRBcmlhU29ydCgnbmFtZScpXCJcbiAgICAgICAgW2JiU29ydGFibGVdPVwiJ25hbWUnXCJcbiAgICAgICAgc2NvcGU9XCJjb2xcIlxuICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgPlxuICAgICAgICBDb3VudHJ5XG4gICAgICA8L3RoPlxuICAgICAgPHRoXG4gICAgICAgIFthdHRyLmFyaWEtc29ydF09XCJnZXRBcmlhU29ydCgnYXJlYScpXCJcbiAgICAgICAgW2JiU29ydGFibGVdPVwiJ2FyZWEnXCJcbiAgICAgICAgc2NvcGU9XCJjb2xcIlxuICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgPlxuICAgICAgICBBcmVhIChrbcKyKVxuICAgICAgPC90aD5cbiAgICAgIDx0aFxuICAgICAgICBbYXR0ci5hcmlhLXNvcnRdPVwiZ2V0QXJpYVNvcnQoJ3BvcHVsYXRpb24nKVwiXG4gICAgICAgIFtiYlNvcnRhYmxlXT1cIidwb3B1bGF0aW9uJ1wiXG4gICAgICAgIHNjb3BlPVwiY29sXCJcbiAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgID5cbiAgICAgICAgUG9wdWxhdGlvblxuICAgICAgPC90aD5cbiAgICAgIDx0aD48L3RoPlxuICAgIDwvdHI+XG4gIDwvdGhlYWQ+XG4gIDx0Ym9keT5cbiAgICA8dHIgKm5nRm9yPVwibGV0IGNvdW50cnkgb2YgY291bnRyaWVzJCB8IGFzeW5jXCIgW2JiUm93XT1cImNvdW50cnlcIj5cbiAgICAgIDx0ZD5cbiAgICAgICAge3sgY291bnRyeS5uYW1lIH19XG4gICAgICA8L3RkPlxuICAgICAgPHRkPlxuICAgICAgICB7eyBjb3VudHJ5LmFyZWEgfCBudW1iZXIgfX1cbiAgICAgIDwvdGQ+XG4gICAgICA8dGQ+XG4gICAgICAgIHt7IGNvdW50cnkucG9wdWxhdGlvbiB8IG51bWJlciB9fVxuICAgICAgPC90ZD5cbiAgICAgIDx0ZD5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIFthbHRdPVwiJ0ZsYWcgb2YgJyArIGNvdW50cnkubmFtZVwiXG4gICAgICAgICAgW3NyY109XCJwYXRoRmxhZ0Fzc2V0cyArIGNvdW50cnkuZmxhZ1wiXG4gICAgICAgICAgd2lkdGg9XCIzMlwiXG4gICAgICAgIC8+XG4gICAgICA8L3RkPlxuICAgIDwvdHI+XG4gIDwvdGJvZHk+XG48L3RhYmxlPlxuIl19