import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-text";
let InputTextShowcaseComponent = class InputTextShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.test = 'egy';
        this.vForm = this.formBuilder.group({
            inputText: [''],
            inputText2: [''],
            inputText3: [''],
            inputText4: [''],
        });
    }
    isFieldValid(fieldName) {
        var _a;
        const control = (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.get(fieldName);
        return control && (control.valid || control.untouched);
    }
};
InputTextShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputTextShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputTextShowcaseComponent, selector: "bb-input-text-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\">\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputText'\"\n          [attr.data-role]=\"'input-text'\"\n          label=\"Enabled text input label\"\n          formControlName=\"inputText\"\n          [readonly]=\"false\"\n          [aria-invalid]=\"vForm && vForm.invalid\"\n          placeholder=\"Please enter a value, at most 35 chars...\"\n          [maxLength]=\"35\"\n          [autocomplete]=\"'name'\"\n        >\n        </bb-input-text-ui>\n      </p>\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputTextDisabled'\"\n          [attr.data-role]=\"'input-text-disabled'\"\n          label=\"Disabled text input label\"\n          formControlName=\"inputText2\"\n          [disabled]=\"true\"\n          placeholder=\"Disabled input\"\n        >\n        </bb-input-text-ui>\n      </p>\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputTextMask3'\"\n          [attr.data-role]=\"'input-text'\"\n          label=\"Text input with a 5-digit mask '00000'\"\n          formControlName=\"inputText3\"\n          [readonly]=\"false\"\n          [aria-invalid]=\"vForm && vForm.invalid\"\n          [mask]=\"'0{5}'\"\n          [maskValidator]=\"true\"\n          placeholder=\"Only up to 5 digits can be entered (e.g., zipcode)\"\n        >\n        </bb-input-text-ui>\n      </p>\n      <p>\n        <bb-input-text-ui\n          [id]=\"'inputTextMask4'\"\n          [attr.data-role]=\"'input-text'\"\n          label=\"Text input with a phone mask '(000) 000-0000'\"\n          formControlName=\"inputText4\"\n          [readonly]=\"false\"\n          [aria-invalid]=\"vForm && vForm.invalid\"\n          [mask]=\"'(000) 000-0000'\"\n          placeholder=\"Only 10 digits can be entered, with/without separators\"\n        >\n        </bb-input-text-ui>\n      </p>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
InputTextShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputTextShowcaseComponent);
export { InputTextShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputTextShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-text-ui-showcase',
                    templateUrl: './input-text-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdGV4dC1zaG93Y2FzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9fZXhhbXBsZS9pbnB1dC10ZXh0L3Nob3djYXNlL2lucHV0LXRleHQtc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvaW5wdXQtdGV4dC9zaG93Y2FzZS9pbnB1dC10ZXh0LXNob3djYXNlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztJQVN4QywwQkFBMEIsU0FBMUIsMEJBQTBCO0lBR3JDLFlBQTZCLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBRnJELFNBQUksR0FBRyxLQUFLLENBQUM7UUFHWCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ2xDLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNmLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNoQixVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDaEIsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQ2pCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsU0FBaUI7O1FBQzVCLE1BQU0sT0FBTyxHQUFHLE1BQUEsSUFBSSxDQUFDLEtBQUssMENBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNDLE9BQU8sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNGLENBQUE7d0hBakJZLDBCQUEwQjs0R0FBMUIsMEJBQTBCLGlFQ1h2QyxzNERBMERBO0FEL0NhLDBCQUEwQjtJQUh0QyxZQUFZLENBQUM7UUFDWixjQUFjLEVBQUUsSUFBSTtLQUNyQixDQUFDO0dBQ1csMEJBQTBCLENBaUJ0QztTQWpCWSwwQkFBMEI7NEZBQTFCLDBCQUEwQjtrQkFQdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxXQUFXLEVBQUUsc0NBQXNDO2lCQUNwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEJhY2tiYXNlRG9jcyB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWlucHV0LXRleHQtdWktc2hvd2Nhc2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtdGV4dC1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCcsXG59KVxuQEJhY2tiYXNlRG9jcyh7XG4gIGlzVGhlbWUyU3RhYmxlOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dFRleHRTaG93Y2FzZUNvbXBvbmVudCB7XG4gIHRlc3QgPSAnZWd5JztcbiAgdkZvcm06IEZvcm1Hcm91cCB8IHVuZGVmaW5lZDtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIpIHtcbiAgICB0aGlzLnZGb3JtID0gdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICBpbnB1dFRleHQ6IFsnJ10sXG4gICAgICBpbnB1dFRleHQyOiBbJyddLFxuICAgICAgaW5wdXRUZXh0MzogWycnXSxcbiAgICAgIGlucHV0VGV4dDQ6IFsnJ10sXG4gICAgfSk7XG4gIH1cblxuICBpc0ZpZWxkVmFsaWQoZmllbGROYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb250cm9sID0gdGhpcy52Rm9ybT8uZ2V0KGZpZWxkTmFtZSk7XG5cbiAgICByZXR1cm4gY29udHJvbCAmJiAoY29udHJvbC52YWxpZCB8fCBjb250cm9sLnVudG91Y2hlZCk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC02XCI+XG4gICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJ2Rm9ybVwiPlxuICAgICAgPHA+XG4gICAgICAgIDxiYi1pbnB1dC10ZXh0LXVpXG4gICAgICAgICAgW2lkXT1cIidpbnB1dFRleHQnXCJcbiAgICAgICAgICBbYXR0ci5kYXRhLXJvbGVdPVwiJ2lucHV0LXRleHQnXCJcbiAgICAgICAgICBsYWJlbD1cIkVuYWJsZWQgdGV4dCBpbnB1dCBsYWJlbFwiXG4gICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiaW5wdXRUZXh0XCJcbiAgICAgICAgICBbcmVhZG9ubHldPVwiZmFsc2VcIlxuICAgICAgICAgIFthcmlhLWludmFsaWRdPVwidkZvcm0gJiYgdkZvcm0uaW52YWxpZFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSwgYXQgbW9zdCAzNSBjaGFycy4uLlwiXG4gICAgICAgICAgW21heExlbmd0aF09XCIzNVwiXG4gICAgICAgICAgW2F1dG9jb21wbGV0ZV09XCInbmFtZSdcIlxuICAgICAgICA+XG4gICAgICAgIDwvYmItaW5wdXQtdGV4dC11aT5cbiAgICAgIDwvcD5cbiAgICAgIDxwPlxuICAgICAgICA8YmItaW5wdXQtdGV4dC11aVxuICAgICAgICAgIFtpZF09XCInaW5wdXRUZXh0RGlzYWJsZWQnXCJcbiAgICAgICAgICBbYXR0ci5kYXRhLXJvbGVdPVwiJ2lucHV0LXRleHQtZGlzYWJsZWQnXCJcbiAgICAgICAgICBsYWJlbD1cIkRpc2FibGVkIHRleHQgaW5wdXQgbGFiZWxcIlxuICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cImlucHV0VGV4dDJcIlxuICAgICAgICAgIFtkaXNhYmxlZF09XCJ0cnVlXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRpc2FibGVkIGlucHV0XCJcbiAgICAgICAgPlxuICAgICAgICA8L2JiLWlucHV0LXRleHQtdWk+XG4gICAgICA8L3A+XG4gICAgICA8cD5cbiAgICAgICAgPGJiLWlucHV0LXRleHQtdWlcbiAgICAgICAgICBbaWRdPVwiJ2lucHV0VGV4dE1hc2szJ1wiXG4gICAgICAgICAgW2F0dHIuZGF0YS1yb2xlXT1cIidpbnB1dC10ZXh0J1wiXG4gICAgICAgICAgbGFiZWw9XCJUZXh0IGlucHV0IHdpdGggYSA1LWRpZ2l0IG1hc2sgJzAwMDAwJ1wiXG4gICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiaW5wdXRUZXh0M1wiXG4gICAgICAgICAgW3JlYWRvbmx5XT1cImZhbHNlXCJcbiAgICAgICAgICBbYXJpYS1pbnZhbGlkXT1cInZGb3JtICYmIHZGb3JtLmludmFsaWRcIlxuICAgICAgICAgIFttYXNrXT1cIicwezV9J1wiXG4gICAgICAgICAgW21hc2tWYWxpZGF0b3JdPVwidHJ1ZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJPbmx5IHVwIHRvIDUgZGlnaXRzIGNhbiBiZSBlbnRlcmVkIChlLmcuLCB6aXBjb2RlKVwiXG4gICAgICAgID5cbiAgICAgICAgPC9iYi1pbnB1dC10ZXh0LXVpPlxuICAgICAgPC9wPlxuICAgICAgPHA+XG4gICAgICAgIDxiYi1pbnB1dC10ZXh0LXVpXG4gICAgICAgICAgW2lkXT1cIidpbnB1dFRleHRNYXNrNCdcIlxuICAgICAgICAgIFthdHRyLmRhdGEtcm9sZV09XCInaW5wdXQtdGV4dCdcIlxuICAgICAgICAgIGxhYmVsPVwiVGV4dCBpbnB1dCB3aXRoIGEgcGhvbmUgbWFzayAnKDAwMCkgMDAwLTAwMDAnXCJcbiAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJpbnB1dFRleHQ0XCJcbiAgICAgICAgICBbcmVhZG9ubHldPVwiZmFsc2VcIlxuICAgICAgICAgIFthcmlhLWludmFsaWRdPVwidkZvcm0gJiYgdkZvcm0uaW52YWxpZFwiXG4gICAgICAgICAgW21hc2tdPVwiJygwMDApIDAwMC0wMDAwJ1wiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJPbmx5IDEwIGRpZ2l0cyBjYW4gYmUgZW50ZXJlZCwgd2l0aC93aXRob3V0IHNlcGFyYXRvcnNcIlxuICAgICAgICA+XG4gICAgICAgIDwvYmItaW5wdXQtdGV4dC11aT5cbiAgICAgIDwvcD5cbiAgICA8L2Zvcm0+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=