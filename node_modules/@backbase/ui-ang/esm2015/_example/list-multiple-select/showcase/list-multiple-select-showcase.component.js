import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/list-multiple-select";
let ListMultipleSelectShowcaseComponent = class ListMultipleSelectShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.listMultipleSelectItemsConfig = {
            'List Item 1': {},
            'List Item 2': {
                items: {
                    q2: {
                        icon: 'warning',
                    },
                },
            },
        };
        this.vForm = this.formBuilder.group({
            listMultipleSelect: this.formBuilder.group({
                'List item 1': true,
                'List item 2': this.formBuilder.group({
                    'Sub item 1': false,
                    'Sub item 2': true,
                    'Sub item 3': this.formBuilder.group({
                        'Sub sub item 1': { value: true, disabled: false },
                        'Disabled sub item 2': { value: false, disabled: true },
                    }),
                }),
            }),
        });
    }
    onListMultipleSelectClearAll($event) {
        $event.preventDefault();
        if (this.vForm) {
            this.vForm.controls['listMultipleSelect'].patchValue({
                i1: false,
                i2: false,
                i3: {
                    q1: false,
                    q2: false,
                },
            });
        }
    }
};
ListMultipleSelectShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ListMultipleSelectShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ListMultipleSelectShowcaseComponent, selector: "bb-list-multiple-select-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-list-multiple-select-ui\n    formGroupName=\"listMultipleSelect\"\n    [config]=\"listMultipleSelectItemsConfig\"\n    aria-label=\"List multiple select\"\n  >\n    <ng-template bbListMultipleSelectAction>\n      <a href=\"\" (click)=\"onListMultipleSelectClearAll($event)\">Clear All</a>\n    </ng-template>\n  </bb-list-multiple-select-ui>\n</form>\n", components: [{ type: i2.ListMultipleSelectComponent, selector: "bb-list-multiple-select-ui", inputs: ["config"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2.ListMultipleSelectActionDirective, selector: "ng-template[bbListMultipleSelectAction]" }] });
ListMultipleSelectShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], ListMultipleSelectShowcaseComponent);
export { ListMultipleSelectShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-list-multiple-select-ui-showcase',
                    templateUrl: './list-multiple-select-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1tdWx0aXBsZS1zZWxlY3Qtc2hvd2Nhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvbGlzdC1tdWx0aXBsZS1zZWxlY3Qvc2hvd2Nhc2UvbGlzdC1tdWx0aXBsZS1zZWxlY3Qtc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvbGlzdC1tdWx0aXBsZS1zZWxlY3Qvc2hvd2Nhc2UvbGlzdC1tdWx0aXBsZS1zZWxlY3Qtc2hvd2Nhc2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHMUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7O0lBU3hDLG1DQUFtQyxTQUFuQyxtQ0FBbUM7SUFjOUMsWUFBNkIsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFickQsa0NBQTZCLEdBQTRCO1lBQ3ZELGFBQWEsRUFBRSxFQUFFO1lBQ2pCLGFBQWEsRUFBRTtnQkFDYixLQUFLLEVBQUU7b0JBQ0wsRUFBRSxFQUFFO3dCQUNGLElBQUksRUFBRSxTQUFTO3FCQUNoQjtpQkFDRjthQUNGO1NBQ0YsQ0FBQztRQUtBLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDbEMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7Z0JBQ3pDLGFBQWEsRUFBRSxJQUFJO2dCQUNuQixhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7b0JBQ3BDLFlBQVksRUFBRSxLQUFLO29CQUNuQixZQUFZLEVBQUUsSUFBSTtvQkFDbEIsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO3dCQUNuQyxnQkFBZ0IsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTt3QkFDbEQscUJBQXFCLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7cUJBQ3hELENBQUM7aUJBQ0gsQ0FBQzthQUNILENBQUM7U0FDSCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsNEJBQTRCLENBQUMsTUFBVztRQUN0QyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxVQUFVLENBQUM7Z0JBQ25ELEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRTtvQkFDRixFQUFFLEVBQUUsS0FBSztvQkFDVCxFQUFFLEVBQUUsS0FBSztpQkFDVjthQUNGLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztDQUNGLENBQUE7aUlBM0NZLG1DQUFtQztxSEFBbkMsbUNBQW1DLDJFQ1poRCxzWUFXQTtBRENhLG1DQUFtQztJQUgvQyxZQUFZLENBQUM7UUFDWixjQUFjLEVBQUUsSUFBSTtLQUNyQixDQUFDO0dBQ1csbUNBQW1DLENBMkMvQztTQTNDWSxtQ0FBbUM7NEZBQW5DLG1DQUFtQztrQkFQL0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUNBQXFDO29CQUMvQyxXQUFXLEVBQUUsZ0RBQWdEO2lCQUM5RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlzdE11bHRpcGxlU2VsZWN0SXRlbXMgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2xpc3QtbXVsdGlwbGUtc2VsZWN0JztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCYWNrYmFzZURvY3MgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1saXN0LW11bHRpcGxlLXNlbGVjdC11aS1zaG93Y2FzZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXN0LW11bHRpcGxlLXNlbGVjdC1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCcsXG59KVxuQEJhY2tiYXNlRG9jcyh7XG4gIGlzVGhlbWUyU3RhYmxlOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBMaXN0TXVsdGlwbGVTZWxlY3RTaG93Y2FzZUNvbXBvbmVudCB7XG4gIGxpc3RNdWx0aXBsZVNlbGVjdEl0ZW1zQ29uZmlnOiBMaXN0TXVsdGlwbGVTZWxlY3RJdGVtcyA9IHtcbiAgICAnTGlzdCBJdGVtIDEnOiB7fSxcbiAgICAnTGlzdCBJdGVtIDInOiB7XG4gICAgICBpdGVtczoge1xuICAgICAgICBxMjoge1xuICAgICAgICAgIGljb246ICd3YXJuaW5nJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2Rm9ybTogRm9ybUdyb3VwIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZm9ybUJ1aWxkZXI6IEZvcm1CdWlsZGVyKSB7XG4gICAgdGhpcy52Rm9ybSA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgbGlzdE11bHRpcGxlU2VsZWN0OiB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgJ0xpc3QgaXRlbSAxJzogdHJ1ZSxcbiAgICAgICAgJ0xpc3QgaXRlbSAyJzogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgJ1N1YiBpdGVtIDEnOiBmYWxzZSxcbiAgICAgICAgICAnU3ViIGl0ZW0gMic6IHRydWUsXG4gICAgICAgICAgJ1N1YiBpdGVtIDMnOiB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgICAgICAgICdTdWIgc3ViIGl0ZW0gMSc6IHsgdmFsdWU6IHRydWUsIGRpc2FibGVkOiBmYWxzZSB9LFxuICAgICAgICAgICAgJ0Rpc2FibGVkIHN1YiBpdGVtIDInOiB7IHZhbHVlOiBmYWxzZSwgZGlzYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIG9uTGlzdE11bHRpcGxlU2VsZWN0Q2xlYXJBbGwoJGV2ZW50OiBhbnkpIHtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy52Rm9ybSkge1xuICAgICAgdGhpcy52Rm9ybS5jb250cm9sc1snbGlzdE11bHRpcGxlU2VsZWN0J10ucGF0Y2hWYWx1ZSh7XG4gICAgICAgIGkxOiBmYWxzZSxcbiAgICAgICAgaTI6IGZhbHNlLFxuICAgICAgICBpMzoge1xuICAgICAgICAgIHExOiBmYWxzZSxcbiAgICAgICAgICBxMjogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsIjxmb3JtIFtmb3JtR3JvdXBdPVwidkZvcm1cIj5cbiAgPGJiLWxpc3QtbXVsdGlwbGUtc2VsZWN0LXVpXG4gICAgZm9ybUdyb3VwTmFtZT1cImxpc3RNdWx0aXBsZVNlbGVjdFwiXG4gICAgW2NvbmZpZ109XCJsaXN0TXVsdGlwbGVTZWxlY3RJdGVtc0NvbmZpZ1wiXG4gICAgYXJpYS1sYWJlbD1cIkxpc3QgbXVsdGlwbGUgc2VsZWN0XCJcbiAgPlxuICAgIDxuZy10ZW1wbGF0ZSBiYkxpc3RNdWx0aXBsZVNlbGVjdEFjdGlvbj5cbiAgICAgIDxhIGhyZWY9XCJcIiAoY2xpY2spPVwib25MaXN0TXVsdGlwbGVTZWxlY3RDbGVhckFsbCgkZXZlbnQpXCI+Q2xlYXIgQWxsPC9hPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIDwvYmItbGlzdC1tdWx0aXBsZS1zZWxlY3QtdWk+XG48L2Zvcm0+XG4iXX0=