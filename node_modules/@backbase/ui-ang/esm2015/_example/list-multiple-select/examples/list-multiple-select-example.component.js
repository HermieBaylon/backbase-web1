import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/list-multiple-select";
export class ListMultipleSelectExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.listMultipleSelectItemsConfig = {
            i2: {
                icon: 'warning',
                iconColor: 'warning',
            },
            i3: {
                icon: 'warning',
                iconColor: 'secondary',
                items: {
                    q2: {
                        icon: 'warning',
                    },
                },
            },
        };
        this.vForm = this.formBuilder.group({
            listMultipleSelect: this.formBuilder.group({
                i1: true,
                i2: true,
                i3: this.formBuilder.group({
                    q1: false,
                    q2: true,
                    q3: this.formBuilder.group({
                        w1: { value: true, disabled: true },
                        w2: { value: false, disabled: true },
                    }),
                }),
            }),
        });
    }
    onListMultipleSelectClearAll($event) {
        $event.preventDefault();
        if (this.vForm) {
            this.vForm.controls['listMultipleSelect'].patchValue({
                i1: false,
                i2: false,
                i3: {
                    q1: false,
                    q2: false,
                },
            });
        }
    }
}
ListMultipleSelectExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectExampleComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ListMultipleSelectExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ListMultipleSelectExampleComponent, selector: "bb-list-multiple-select-example-ui", ngImport: i0, template: "<form class=\"col-6\" [formGroup]=\"vForm\">\n  <bb-list-multiple-select-ui\n    formGroupName=\"listMultipleSelect\"\n    [config]=\"listMultipleSelectItemsConfig\"\n    aria-label=\"List multiple select\"\n  >\n    <ng-template bbListMultipleSelectAction>\n      <a href=\"\" (click)=\"onListMultipleSelectClearAll($event)\">Clear All</a>\n    </ng-template>\n  </bb-list-multiple-select-ui>\n</form>\n", components: [{ type: i2.ListMultipleSelectComponent, selector: "bb-list-multiple-select-ui", inputs: ["config"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i2.ListMultipleSelectActionDirective, selector: "ng-template[bbListMultipleSelectAction]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ListMultipleSelectExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-list-multiple-select-example-ui',
                    templateUrl: './list-multiple-select-example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1tdWx0aXBsZS1zZWxlY3QtZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9fZXhhbXBsZS9saXN0LW11bHRpcGxlLXNlbGVjdC9leGFtcGxlcy9saXN0LW11bHRpcGxlLXNlbGVjdC1leGFtcGxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2xpc3QtbXVsdGlwbGUtc2VsZWN0L2V4YW1wbGVzL2xpc3QtbXVsdGlwbGUtc2VsZWN0LWV4YW1wbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQVMxQyxNQUFNLE9BQU8sa0NBQWtDO0lBbUI3QyxZQUE2QixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQWxCckQsa0NBQTZCLEdBQTRCO1lBQ3ZELEVBQUUsRUFBRTtnQkFDRixJQUFJLEVBQUUsU0FBUztnQkFDZixTQUFTLEVBQUUsU0FBUzthQUNyQjtZQUNELEVBQUUsRUFBRTtnQkFDRixJQUFJLEVBQUUsU0FBUztnQkFDZixTQUFTLEVBQUUsV0FBVztnQkFDdEIsS0FBSyxFQUFFO29CQUNMLEVBQUUsRUFBRTt3QkFDRixJQUFJLEVBQUUsU0FBUztxQkFDaEI7aUJBQ0Y7YUFDRjtTQUNGLENBQUM7UUFLQSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ2xDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO2dCQUN6QyxFQUFFLEVBQUUsSUFBSTtnQkFDUixFQUFFLEVBQUUsSUFBSTtnQkFDUixFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7b0JBQ3pCLEVBQUUsRUFBRSxLQUFLO29CQUNULEVBQUUsRUFBRSxJQUFJO29CQUNSLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQzt3QkFDekIsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO3dCQUNuQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7cUJBQ3JDLENBQUM7aUJBQ0gsQ0FBQzthQUNILENBQUM7U0FDSCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsNEJBQTRCLENBQUMsTUFBVztRQUN0QyxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxVQUFVLENBQUM7Z0JBQ25ELEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRTtvQkFDRixFQUFFLEVBQUUsS0FBSztvQkFDVCxFQUFFLEVBQUUsS0FBSztpQkFDVjthQUNGLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7Z0lBaERVLGtDQUFrQztvSEFBbEMsa0NBQWtDLDBFQ1QvQyxzWkFXQTs0RkRGYSxrQ0FBa0M7a0JBSjlDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9DQUFvQztvQkFDOUMsV0FBVyxFQUFFLCtDQUErQztpQkFDN0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8vIFBsZWFzZSByZXBsYWNlIHJlbGF0aXZlIHBhdGggaW1wb3J0cyBlLmcuICcuLi8qJyB3aXRoICdAYmFja2Jhc2UvdWktYW5nJy5cbmltcG9ydCB7IExpc3RNdWx0aXBsZVNlbGVjdEl0ZW1zIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9saXN0LW11bHRpcGxlLXNlbGVjdCc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1CdWlsZGVyIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1saXN0LW11bHRpcGxlLXNlbGVjdC1leGFtcGxlLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3QtbXVsdGlwbGUtc2VsZWN0LWV4YW1wbGUuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBMaXN0TXVsdGlwbGVTZWxlY3RFeGFtcGxlQ29tcG9uZW50IHtcbiAgbGlzdE11bHRpcGxlU2VsZWN0SXRlbXNDb25maWc6IExpc3RNdWx0aXBsZVNlbGVjdEl0ZW1zID0ge1xuICAgIGkyOiB7XG4gICAgICBpY29uOiAnd2FybmluZycsXG4gICAgICBpY29uQ29sb3I6ICd3YXJuaW5nJyxcbiAgICB9LFxuICAgIGkzOiB7XG4gICAgICBpY29uOiAnd2FybmluZycsXG4gICAgICBpY29uQ29sb3I6ICdzZWNvbmRhcnknLFxuICAgICAgaXRlbXM6IHtcbiAgICAgICAgcTI6IHtcbiAgICAgICAgICBpY29uOiAnd2FybmluZycsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdkZvcm06IEZvcm1Hcm91cCB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcikge1xuICAgIHRoaXMudkZvcm0gPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgIGxpc3RNdWx0aXBsZVNlbGVjdDogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgIGkxOiB0cnVlLFxuICAgICAgICBpMjogdHJ1ZSxcbiAgICAgICAgaTM6IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICAgIHExOiBmYWxzZSxcbiAgICAgICAgICBxMjogdHJ1ZSxcbiAgICAgICAgICBxMzogdGhpcy5mb3JtQnVpbGRlci5ncm91cCh7XG4gICAgICAgICAgICB3MTogeyB2YWx1ZTogdHJ1ZSwgZGlzYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHcyOiB7IHZhbHVlOiBmYWxzZSwgZGlzYWJsZWQ6IHRydWUgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICB9KTtcbiAgfVxuXG4gIG9uTGlzdE11bHRpcGxlU2VsZWN0Q2xlYXJBbGwoJGV2ZW50OiBhbnkpIHtcbiAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy52Rm9ybSkge1xuICAgICAgdGhpcy52Rm9ybS5jb250cm9sc1snbGlzdE11bHRpcGxlU2VsZWN0J10ucGF0Y2hWYWx1ZSh7XG4gICAgICAgIGkxOiBmYWxzZSxcbiAgICAgICAgaTI6IGZhbHNlLFxuICAgICAgICBpMzoge1xuICAgICAgICAgIHExOiBmYWxzZSxcbiAgICAgICAgICBxMjogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsIjxmb3JtIGNsYXNzPVwiY29sLTZcIiBbZm9ybUdyb3VwXT1cInZGb3JtXCI+XG4gIDxiYi1saXN0LW11bHRpcGxlLXNlbGVjdC11aVxuICAgIGZvcm1Hcm91cE5hbWU9XCJsaXN0TXVsdGlwbGVTZWxlY3RcIlxuICAgIFtjb25maWddPVwibGlzdE11bHRpcGxlU2VsZWN0SXRlbXNDb25maWdcIlxuICAgIGFyaWEtbGFiZWw9XCJMaXN0IG11bHRpcGxlIHNlbGVjdFwiXG4gID5cbiAgICA8bmctdGVtcGxhdGUgYmJMaXN0TXVsdGlwbGVTZWxlY3RBY3Rpb24+XG4gICAgICA8YSBocmVmPVwiXCIgKGNsaWNrKT1cIm9uTGlzdE11bHRpcGxlU2VsZWN0Q2xlYXJBbGwoJGV2ZW50KVwiPkNsZWFyIEFsbDwvYT5cbiAgICA8L25nLXRlbXBsYXRlPlxuICA8L2JiLWxpc3QtbXVsdGlwbGUtc2VsZWN0LXVpPlxuPC9mb3JtPlxuIl19