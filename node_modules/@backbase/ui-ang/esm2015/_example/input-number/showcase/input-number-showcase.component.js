import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-number";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@angular/common";
let InputNumberShowcaseComponent = class InputNumberShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            inputNumber: ['', Validators.compose([Validators.required, Validators.min(2), Validators.max(20)])],
            inputNumberOnlyDigits: ['', Validators.compose([Validators.required, Validators.min(2), Validators.max(20)])],
            inputNumberNegative: ['', Validators.compose([Validators.required, Validators.min(2), Validators.max(20)])],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
    hasMinError(field) {
        return this.hasError(field, 'min');
    }
    hasMaxError(field) {
        return this.hasError(field, 'max');
    }
};
InputNumberShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputNumberShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputNumberShowcaseComponent, selector: "bb-input-number-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\">\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-text-bold\" id=\"numberFieldLabel1\">\n          Default Number field\n          <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n        </div>\n        <bb-input-number-ui\n          placeholder=\"Enter a number\"\n          formControlName=\"inputNumber\"\n          [min]=\"2\"\n          [max]=\"20\"\n          [required]=\"true\"\n          [aria-describedby]=\"'input-number-showcase-error'\"\n          [aria-labelledby]=\"'numberFieldLabel1'\"\n          [ariaLabel]=\"'Count'\"\n          [allowNonDigits]=\"true\"\n        >\n        </bb-input-number-ui>\n        <bb-input-validation-message-ui\n          [showErrors]=\"vForm?.touched && vForm?.get('inputNumber')?.errors\"\n          [id]=\"'input-number-showcase-error'\"\n        >\n          <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n          <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n          <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--md\">\n        <div class=\"bb-text-bold\" id=\"numberFieldLabel2\">\n          Number field with only digits\n          <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n        </div>\n        <bb-input-number-ui\n          placeholder=\"Enter a number\"\n          formControlName=\"inputNumberOnlyDigits\"\n          [min]=\"2\"\n          [max]=\"20\"\n          [required]=\"true\"\n          [aria-describedby]=\"'input-number-showcase-error'\"\n          [aria-labelledby]=\"'numberFieldLabel2'\"\n          [ariaLabel]=\"'Count'\"\n        >\n        </bb-input-number-ui>\n        <bb-input-validation-message-ui\n          [showErrors]=\"vForm?.touched && vForm?.get('inputNumberOnlyDigits')?.errors\"\n          [id]=\"'input-number-showcase-error'\"\n        >\n          <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n          <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n          <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div>\n        <div class=\"bb-text-bold\" id=\"numberFieldLabel3\">\n          Number field with negative sign allowed\n          <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n        </div>\n        <bb-input-number-ui\n          placeholder=\"Enter a number\"\n          formControlName=\"inputNumberNegative\"\n          [min]=\"2\"\n          [max]=\"20\"\n          [required]=\"true\"\n          [aria-describedby]=\"'input-number-showcase-error'\"\n          [aria-labelledby]=\"'numberFieldLabel3'\"\n          [ariaLabel]=\"'Count'\"\n          [allowNegativeSign]=\"true\"\n        >\n        </bb-input-number-ui>\n        <bb-input-validation-message-ui\n          [showErrors]=\"vForm?.touched && vForm?.get('inputNumberNegative')?.errors\"\n          [id]=\"'input-number-showcase-error'\"\n        >\n          <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n          <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n          <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </form>\n  </div>\n  formgroup\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\" class=\"form-group is-valid\">\n      <div class=\"bb-text-bold\" id=\"numberFieldLabel\">\n        Number field\n        <span class=\"bb-text-support bb-text-default\">(min 2, max 20)</span>\n      </div>\n      <bb-input-number-ui\n        placeholder=\"Enter a number\"\n        formControlName=\"inputNumber\"\n        [min]=\"2\"\n        [max]=\"20\"\n        [required]=\"true\"\n        [aria-describedby]=\"'input-number-showcase-error'\"\n        [aria-labelledby]=\"'numberFieldLabel'\"\n        [ariaLabel]=\"'Count'\"\n      >\n      </bb-input-number-ui>\n      <bb-input-validation-message-ui\n        [showErrors]=\"vForm?.touched && vForm?.get('inputNumber')?.errors\"\n        [id]=\"'input-number-showcase-error'\"\n      >\n        <span *ngIf=\"hasRequiredError('inputNumber')\"> Field is required. </span>\n        <span *ngIf=\"hasMinError('inputNumber')\"> Minimum number allowed is 2. </span>\n        <span *ngIf=\"hasMaxError('inputNumber')\"> Maximum number allowed is 20. </span>\n      </bb-input-validation-message-ui>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InputNumberShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputNumberShowcaseComponent);
export { InputNumberShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputNumberShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-number-ui-showcase',
                    templateUrl: './input-number-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,