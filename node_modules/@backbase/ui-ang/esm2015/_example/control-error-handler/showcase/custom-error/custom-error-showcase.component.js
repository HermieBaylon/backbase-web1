import { Component } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class CustomErrorShowcaseComponent {
    constructor() {
        this.errorId = 'testID';
    }
}
CustomErrorShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomErrorShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CustomErrorShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CustomErrorShowcaseComponent, selector: "bb-custom-error-showcase", ngImport: i0, template: `
    <small @fade [id]="errorId" *ngIf="text" role="alert" class="bb-input-validation-message">
      Custom error component - {{ text }}
    </small>
  `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [
        trigger('fade', [
            transition('void => *', [style({ opacity: 0, height: '0px' }), animate(150, style({ opacity: 1, height: '*' }))]),
        ]),
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomErrorShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-custom-error-showcase',
                    template: `
    <small @fade [id]="errorId" *ngIf="text" role="alert" class="bb-input-validation-message">
      Custom error component - {{ text }}
    </small>
  `,
                    animations: [
                        trigger('fade', [
                            transition('void => *', [style({ opacity: 0, height: '0px' }), animate(150, style({ opacity: 1, height: '*' }))]),
                        ]),
                    ],
                }]
        }] });
export const customErrorMessagesShowcase = { required: () => 'My Field is required' };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWVycm9yLXNob3djYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2NvbnRyb2wtZXJyb3ItaGFuZGxlci9zaG93Y2FzZS9jdXN0b20tZXJyb3IvY3VzdG9tLWVycm9yLXNob3djYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBZ0IxRSxNQUFNLE9BQU8sNEJBQTRCO0lBYnpDO1FBY0UsWUFBTyxHQUFHLFFBQVEsQ0FBQztLQUVwQjs7MEhBSFksNEJBQTRCOzhHQUE1Qiw0QkFBNEIsZ0VBWDdCOzs7O0dBSVQsNkhBQ1c7UUFDVixPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2QsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsSCxDQUFDO0tBQ0g7NEZBRVUsNEJBQTRCO2tCQWJ4QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFFBQVEsRUFBRTs7OztHQUlUO29CQUNELFVBQVUsRUFBRTt3QkFDVixPQUFPLENBQUMsTUFBTSxFQUFFOzRCQUNkLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7eUJBQ2xILENBQUM7cUJBQ0g7aUJBQ0Y7O0FBTUQsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYW5pbWF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvckNvbXBvbmVudE1vZGVsIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9jb250cm9sLWVycm9yLWhhbmRsZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1jdXN0b20tZXJyb3Itc2hvd2Nhc2UnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzbWFsbCBAZmFkZSBbaWRdPVwiZXJyb3JJZFwiICpuZ0lmPVwidGV4dFwiIHJvbGU9XCJhbGVydFwiIGNsYXNzPVwiYmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlXCI+XG4gICAgICBDdXN0b20gZXJyb3IgY29tcG9uZW50IC0ge3sgdGV4dCB9fVxuICAgIDwvc21hbGw+XG4gIGAsXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCdmYWRlJywgW1xuICAgICAgdHJhbnNpdGlvbigndm9pZCA9PiAqJywgW3N0eWxlKHsgb3BhY2l0eTogMCwgaGVpZ2h0OiAnMHB4JyB9KSwgYW5pbWF0ZSgxNTAsIHN0eWxlKHsgb3BhY2l0eTogMSwgaGVpZ2h0OiAnKicgfSkpXSksXG4gICAgXSksXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbUVycm9yU2hvd2Nhc2VDb21wb25lbnQgaW1wbGVtZW50cyBWYWxpZGF0aW9uRXJyb3JDb21wb25lbnRNb2RlbCB7XG4gIGVycm9ySWQgPSAndGVzdElEJztcbiAgdGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgY3VzdG9tRXJyb3JNZXNzYWdlc1Nob3djYXNlID0geyByZXF1aXJlZDogKCkgPT4gJ015IEZpZWxkIGlzIHJlcXVpcmVkJyB9O1xuIl19