import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-text";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@angular/common";
let InputValidationMessageShowcaseComponent = class InputValidationMessageShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            name: ['', Validators.compose([Validators.required, Validators.minLength(5)])],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
    hasLengthError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.minlength;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
};
InputValidationMessageShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputValidationMessageShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputValidationMessageShowcaseComponent, selector: "bb-input-validation-message-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"row\">\n    <div class=\"col-md-3\">\n      <bb-input-text-ui\n        label=\"Validation on Blur\"\n        formControlName=\"name\"\n        aria-describedby=\"input-validation-example-error\"\n      >\n      </bb-input-text-ui>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('name')\" [id]=\"'input-validation-example-error'\">\n        <span *ngIf=\"hasRequiredError('name')\"> Field is required. </span>\n        <span *ngIf=\"hasLengthError('name')\"> Field has minlength of 5. </span>\n      </bb-input-validation-message-ui>\n    </div>\n  </div>\n</form>\n", components: [{ type: i2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InputValidationMessageShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputValidationMessageShowcaseComponent);
export { InputValidationMessageShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-validation-message-ui-showcase',
                    templateUrl: './input-validation-message-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXNob3djYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2lucHV0LXZhbGlkYXRpb24tbWVzc2FnZS9zaG93Y2FzZS9pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2Utc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlL3Nob3djYXNlL2lucHV0LXZhbGlkYXRpb24tbWVzc2FnZS1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQTBCLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7O0lBU3hDLHVDQUF1QyxTQUF2Qyx1Q0FBdUM7SUFHbEQsWUFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUNsQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0UsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFlBQVksQ0FBQyxTQUFpQjtRQUM1QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNDLE9BQU8sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLFVBQVUsQ0FBQyxTQUFpQjs7UUFDbEMsT0FBTyxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWEsRUFBRSxJQUFZO1FBQ2xDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDekMsT0FBTztTQUNSO1FBRUQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjLENBQUMsS0FBYTtRQUMxQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ3pDLE9BQU87U0FDUjtRQUVELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQWE7UUFDNUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUN6QyxPQUFPO1NBQ1I7UUFFRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3RDLENBQUM7Q0FDRixDQUFBO3FJQTdDWSx1Q0FBdUM7eUhBQXZDLHVDQUF1QywrRUNYcEQseW5CQWdCQTtBRExhLHVDQUF1QztJQUhuRCxZQUFZLENBQUM7UUFDWixjQUFjLEVBQUUsSUFBSTtLQUNyQixDQUFDO0dBQ1csdUNBQXVDLENBNkNuRDtTQTdDWSx1Q0FBdUM7NEZBQXZDLHVDQUF1QztrQkFQbkQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUNBQXlDO29CQUNuRCxXQUFXLEVBQUUsb0RBQW9EO2lCQUNsRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQnVpbGRlciwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEJhY2tiYXNlRG9jcyB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aS1zaG93Y2FzZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2Utc2hvd2Nhc2UuY29tcG9uZW50Lmh0bWwnLFxufSlcbkBCYWNrYmFzZURvY3Moe1xuICBpc1RoZW1lMlN0YWJsZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgSW5wdXRWYWxpZGF0aW9uTWVzc2FnZVNob3djYXNlQ29tcG9uZW50IHtcbiAgdkZvcm06IEZvcm1Hcm91cCB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcikge1xuICAgIHRoaXMudkZvcm0gPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgIG5hbWU6IFsnJywgVmFsaWRhdG9ycy5jb21wb3NlKFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbkxlbmd0aCg1KV0pXSxcbiAgICB9KTtcbiAgfVxuXG4gIGlzRmllbGRWYWxpZChmaWVsZE5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGNvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woZmllbGROYW1lKTtcblxuICAgIHJldHVybiBjb250cm9sICYmIChjb250cm9sLnZhbGlkIHx8IGNvbnRyb2wudW50b3VjaGVkKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udHJvbChmaWVsZE5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnZGb3JtPy5jb250cm9sc1tmaWVsZE5hbWVdO1xuICB9XG5cbiAgaGFzRXJyb3IoZmllbGQ6IHN0cmluZywgdHlwZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZmllbGRDb250cm9sID0gdGhpcy5nZXRDb250cm9sKGZpZWxkKTtcbiAgICBpZiAoIWZpZWxkQ29udHJvbCB8fCAhZmllbGRDb250cm9sLmVycm9ycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBmaWVsZENvbnRyb2wuZXJyb3JzW3R5cGVdO1xuICB9XG5cbiAgaGFzTGVuZ3RoRXJyb3IoZmllbGQ6IHN0cmluZykge1xuICAgIGNvbnN0IGZpZWxkQ29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbChmaWVsZCk7XG4gICAgaWYgKCFmaWVsZENvbnRyb2wgfHwgIWZpZWxkQ29udHJvbC5lcnJvcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGRDb250cm9sLmVycm9ycy5taW5sZW5ndGg7XG4gIH1cblxuICBoYXNSZXF1aXJlZEVycm9yKGZpZWxkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWVsZENvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woZmllbGQpO1xuICAgIGlmICghZmllbGRDb250cm9sIHx8ICFmaWVsZENvbnRyb2wuZXJyb3JzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpZWxkQ29udHJvbC5lcnJvcnMucmVxdWlyZWQ7XG4gIH1cbn1cbiIsIjxmb3JtIFtmb3JtR3JvdXBdPVwidkZvcm1cIj5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtM1wiPlxuICAgICAgPGJiLWlucHV0LXRleHQtdWlcbiAgICAgICAgbGFiZWw9XCJWYWxpZGF0aW9uIG9uIEJsdXJcIlxuICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJuYW1lXCJcbiAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImlucHV0LXZhbGlkYXRpb24tZXhhbXBsZS1lcnJvclwiXG4gICAgICA+XG4gICAgICA8L2JiLWlucHV0LXRleHQtdWk+XG4gICAgICA8YmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpIFtzaG93RXJyb3JzXT1cIiFpc0ZpZWxkVmFsaWQoJ25hbWUnKVwiIFtpZF09XCInaW5wdXQtdmFsaWRhdGlvbi1leGFtcGxlLWVycm9yJ1wiPlxuICAgICAgICA8c3BhbiAqbmdJZj1cImhhc1JlcXVpcmVkRXJyb3IoJ25hbWUnKVwiPiBGaWVsZCBpcyByZXF1aXJlZC4gPC9zcGFuPlxuICAgICAgICA8c3BhbiAqbmdJZj1cImhhc0xlbmd0aEVycm9yKCduYW1lJylcIj4gRmllbGQgaGFzIG1pbmxlbmd0aCBvZiA1LiA8L3NwYW4+XG4gICAgICA8L2JiLWlucHV0LXZhbGlkYXRpb24tbWVzc2FnZS11aT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Zvcm0+XG4iXX0=