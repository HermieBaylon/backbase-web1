import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-text";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@angular/common";
export class InputValidationMessageExampleComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            name: [
                '',
                Validators.compose([
                    Validators.required,
                    Validators.minLength(5),
                ]),
            ],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasError(field, type) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors[type];
    }
    hasLengthError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.minlength;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
}
InputValidationMessageExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageExampleComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputValidationMessageExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputValidationMessageExampleComponent, selector: "bb-input-validation-message-example-ui", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <bb-input-text-ui\n    label=\"First Name\"\n    formControlName=\"name\"\n    [aria-describedby]=\"'name-errors'\"\n  ></bb-input-text-ui>\n  <bb-input-validation-message-ui\n    id=\"name-errors\"\n    [showErrors]=\"!isFieldValid('name')\"\n  >\n    <span *ngIf=\"hasRequiredError('name')\"> Field is required. </span>\n    <span *ngIf=\"hasLengthError('name')\">\n      Field has minlength of 5.\n    </span>\n  </bb-input-validation-message-ui>\n</form>\n", components: [{ type: i2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputValidationMessageExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-validation-message-example-ui',
                    templateUrl: './input-validation-message.example.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLmV4YW1wbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlL2V4YW1wbGVzL2lucHV0LXZhbGlkYXRpb24tbWVzc2FnZS5leGFtcGxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2lucHV0LXZhbGlkYXRpb24tbWVzc2FnZS9leGFtcGxlcy9pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UuZXhhbXBsZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBMEIsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7OztBQU1wRSxNQUFNLE9BQU8sc0NBQXNDO0lBV2pELFlBQTZCLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBVnJELFVBQUssR0FBYyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUN4QyxJQUFJLEVBQUU7Z0JBQ0osRUFBRTtnQkFDRixVQUFVLENBQUMsT0FBTyxDQUFDO29CQUNqQixVQUFVLENBQUMsUUFBUTtvQkFDbkIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7aUJBQ3hCLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQztJQUVxRCxDQUFDO0lBRXpELFlBQVksQ0FBQyxTQUFpQjtRQUM1QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNDLE9BQU8sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLFVBQVUsQ0FBQyxTQUFpQjs7UUFDbEMsT0FBTyxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWEsRUFBRSxJQUFZO1FBQ2xDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDekMsT0FBTztTQUNSO1FBRUQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxjQUFjLENBQUMsS0FBYTtRQUMxQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ3pDLE9BQU87U0FDUjtRQUVELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQWE7UUFDNUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUN6QyxPQUFPO1NBQ1I7UUFFRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ3RDLENBQUM7O29JQWhEVSxzQ0FBc0M7d0hBQXRDLHNDQUFzQyw4RUNQbkQsOGVBZ0JBOzRGRFRhLHNDQUFzQztrQkFKbEQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsd0NBQXdDO29CQUNsRCxXQUFXLEVBQUUsbURBQW1EO2lCQUNqRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLWV4YW1wbGUtdWknLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLmV4YW1wbGUuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dFZhbGlkYXRpb25NZXNzYWdlRXhhbXBsZUNvbXBvbmVudCB7XG4gIHZGb3JtOiBGb3JtR3JvdXAgPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICBuYW1lOiBbXG4gICAgICAnJyxcbiAgICAgIFZhbGlkYXRvcnMuY29tcG9zZShbXG4gICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQsXG4gICAgICAgIFZhbGlkYXRvcnMubWluTGVuZ3RoKDUpLFxuICAgICAgXSksXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIpIHt9XG5cbiAgaXNGaWVsZFZhbGlkKGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbChmaWVsZE5hbWUpO1xuXG4gICAgcmV0dXJuIGNvbnRyb2wgJiYgKGNvbnRyb2wudmFsaWQgfHwgY29udHJvbC51bnRvdWNoZWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb250cm9sKGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudkZvcm0/LmNvbnRyb2xzW2ZpZWxkTmFtZV07XG4gIH1cblxuICBoYXNFcnJvcihmaWVsZDogc3RyaW5nLCB0eXBlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWVsZENvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woZmllbGQpO1xuICAgIGlmICghZmllbGRDb250cm9sIHx8ICFmaWVsZENvbnRyb2wuZXJyb3JzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpZWxkQ29udHJvbC5lcnJvcnNbdHlwZV07XG4gIH1cblxuICBoYXNMZW5ndGhFcnJvcihmaWVsZDogc3RyaW5nKSB7XG4gICAgY29uc3QgZmllbGRDb250cm9sID0gdGhpcy5nZXRDb250cm9sKGZpZWxkKTtcbiAgICBpZiAoIWZpZWxkQ29udHJvbCB8fCAhZmllbGRDb250cm9sLmVycm9ycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBmaWVsZENvbnRyb2wuZXJyb3JzLm1pbmxlbmd0aDtcbiAgfVxuXG4gIGhhc1JlcXVpcmVkRXJyb3IoZmllbGQ6IHN0cmluZykge1xuICAgIGNvbnN0IGZpZWxkQ29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbChmaWVsZCk7XG4gICAgaWYgKCFmaWVsZENvbnRyb2wgfHwgIWZpZWxkQ29udHJvbC5lcnJvcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGRDb250cm9sLmVycm9ycy5yZXF1aXJlZDtcbiAgfVxufVxuIiwiPGZvcm0gW2Zvcm1Hcm91cF09XCJ2Rm9ybVwiPlxuICA8YmItaW5wdXQtdGV4dC11aVxuICAgIGxhYmVsPVwiRmlyc3QgTmFtZVwiXG4gICAgZm9ybUNvbnRyb2xOYW1lPVwibmFtZVwiXG4gICAgW2FyaWEtZGVzY3JpYmVkYnldPVwiJ25hbWUtZXJyb3JzJ1wiXG4gID48L2JiLWlucHV0LXRleHQtdWk+XG4gIDxiYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWlcbiAgICBpZD1cIm5hbWUtZXJyb3JzXCJcbiAgICBbc2hvd0Vycm9yc109XCIhaXNGaWVsZFZhbGlkKCduYW1lJylcIlxuICA+XG4gICAgPHNwYW4gKm5nSWY9XCJoYXNSZXF1aXJlZEVycm9yKCduYW1lJylcIj4gRmllbGQgaXMgcmVxdWlyZWQuIDwvc3Bhbj5cbiAgICA8c3BhbiAqbmdJZj1cImhhc0xlbmd0aEVycm9yKCduYW1lJylcIj5cbiAgICAgIEZpZWxkIGhhcyBtaW5sZW5ndGggb2YgNS5cbiAgICA8L3NwYW4+XG4gIDwvYmItaW5wdXQtdmFsaWRhdGlvbi1tZXNzYWdlLXVpPlxuPC9mb3JtPlxuIl19