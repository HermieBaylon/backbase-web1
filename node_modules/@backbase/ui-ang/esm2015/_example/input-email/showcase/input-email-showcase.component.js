import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-email";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@angular/common";
let InputEmailShowcaseComponent = class InputEmailShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            inputEmail: ['', Validators.required],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        return control && (control.valid || control.untouched);
    }
    getControl(fieldName) {
        var _a;
        return (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls[fieldName];
    }
    hasEmailError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.email;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
};
InputEmailShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputEmailShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputEmailShowcaseComponent, selector: "bb-input-email-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <form [formGroup]=\"vForm\">\n      <label for=\"inputEmail\">\n        E-mail field <span class=\"bb-text-support bb-text-default\">(max {{ inputEmail?.maxLength }} characters)</span>\n      </label>\n      <bb-input-email-ui\n        #inputEmail\n        [id]=\"'inputEmail'\"\n        formControlName=\"inputEmail\"\n        [readonly]=\"false\"\n        [required]=\"true\"\n        placeholder=\"Please enter an email address...\"\n        [maxLength]=\"70\"\n        [aria-labelledby]=\"'inputEmailLabel'\"\n        [aria-describedby]=\"'inputEmailErrors'\"\n        [aria-invalid]=\"!isFieldValid('inputEmail')\"\n      >\n      </bb-input-email-ui>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('inputEmail')\" id=\"inputEmailErrors\">\n        <p *ngIf=\"hasRequiredError('inputEmail')\">Field is required.</p>\n        <p *ngIf=\"hasEmailError('inputEmail')\">Email format is incorrect.</p>\n      </bb-input-validation-message-ui>\n    </form>\n  </div>\n</div>\n", components: [{ type: i2.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InputEmailShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputEmailShowcaseComponent);
export { InputEmailShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputEmailShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-email-ui-showcase',
                    templateUrl: './input-email-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZW1haWwtc2hvd2Nhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvaW5wdXQtZW1haWwvc2hvd2Nhc2UvaW5wdXQtZW1haWwtc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvaW5wdXQtZW1haWwvc2hvd2Nhc2UvaW5wdXQtZW1haWwtc2hvd2Nhc2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUEwQixVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztJQVN4QywyQkFBMkIsU0FBM0IsMkJBQTJCO0lBRXRDLFlBQTZCLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ25ELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDbEMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUM7U0FDdEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNELFlBQVksQ0FBQyxTQUFpQjtRQUM1QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNDLE9BQU8sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVPLFVBQVUsQ0FBQyxTQUFpQjs7UUFDbEMsT0FBTyxNQUFBLElBQUksQ0FBQyxLQUFLLDBDQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQWE7UUFDekIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUN6QyxPQUFPO1NBQ1I7UUFFRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ25DLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFhO1FBQzVCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDekMsT0FBTztTQUNSO1FBRUQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUN0QyxDQUFDO0NBQ0YsQ0FBQTt5SEFsQ1ksMkJBQTJCOzZHQUEzQiwyQkFBMkIsa0VDWHhDLDJoQ0EwQkE7QURmYSwyQkFBMkI7SUFIdkMsWUFBWSxDQUFDO1FBQ1osY0FBYyxFQUFFLElBQUk7S0FDckIsQ0FBQztHQUNXLDJCQUEyQixDQWtDdkM7U0FsQ1ksMkJBQTJCOzRGQUEzQiwyQkFBMkI7a0JBUHZDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsV0FBVyxFQUFFLHVDQUF1QztpQkFDckQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUJ1aWxkZXIsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCYWNrYmFzZURvY3MgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1pbnB1dC1lbWFpbC11aS1zaG93Y2FzZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC1lbWFpbC1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCcsXG59KVxuQEJhY2tiYXNlRG9jcyh7XG4gIGlzVGhlbWUyU3RhYmxlOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBJbnB1dEVtYWlsU2hvd2Nhc2VDb21wb25lbnQge1xuICB2Rm9ybTogRm9ybUdyb3VwIHwgdW5kZWZpbmVkO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcikge1xuICAgIHRoaXMudkZvcm0gPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgIGlucHV0RW1haWw6IFsnJywgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgfSk7XG4gIH1cbiAgaXNGaWVsZFZhbGlkKGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbChmaWVsZE5hbWUpO1xuXG4gICAgcmV0dXJuIGNvbnRyb2wgJiYgKGNvbnRyb2wudmFsaWQgfHwgY29udHJvbC51bnRvdWNoZWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb250cm9sKGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMudkZvcm0/LmNvbnRyb2xzW2ZpZWxkTmFtZV07XG4gIH1cblxuICBoYXNFbWFpbEVycm9yKGZpZWxkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWVsZENvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woZmllbGQpO1xuICAgIGlmICghZmllbGRDb250cm9sIHx8ICFmaWVsZENvbnRyb2wuZXJyb3JzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpZWxkQ29udHJvbC5lcnJvcnMuZW1haWw7XG4gIH1cblxuICBoYXNSZXF1aXJlZEVycm9yKGZpZWxkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWVsZENvbnRyb2wgPSB0aGlzLmdldENvbnRyb2woZmllbGQpO1xuICAgIGlmICghZmllbGRDb250cm9sIHx8ICFmaWVsZENvbnRyb2wuZXJyb3JzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpZWxkQ29udHJvbC5lcnJvcnMucmVxdWlyZWQ7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC02XCI+XG4gICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJ2Rm9ybVwiPlxuICAgICAgPGxhYmVsIGZvcj1cImlucHV0RW1haWxcIj5cbiAgICAgICAgRS1tYWlsIGZpZWxkIDxzcGFuIGNsYXNzPVwiYmItdGV4dC1zdXBwb3J0IGJiLXRleHQtZGVmYXVsdFwiPihtYXgge3sgaW5wdXRFbWFpbD8ubWF4TGVuZ3RoIH19IGNoYXJhY3RlcnMpPC9zcGFuPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxiYi1pbnB1dC1lbWFpbC11aVxuICAgICAgICAjaW5wdXRFbWFpbFxuICAgICAgICBbaWRdPVwiJ2lucHV0RW1haWwnXCJcbiAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiaW5wdXRFbWFpbFwiXG4gICAgICAgIFtyZWFkb25seV09XCJmYWxzZVwiXG4gICAgICAgIFtyZXF1aXJlZF09XCJ0cnVlXCJcbiAgICAgICAgcGxhY2Vob2xkZXI9XCJQbGVhc2UgZW50ZXIgYW4gZW1haWwgYWRkcmVzcy4uLlwiXG4gICAgICAgIFttYXhMZW5ndGhdPVwiNzBcIlxuICAgICAgICBbYXJpYS1sYWJlbGxlZGJ5XT1cIidpbnB1dEVtYWlsTGFiZWwnXCJcbiAgICAgICAgW2FyaWEtZGVzY3JpYmVkYnldPVwiJ2lucHV0RW1haWxFcnJvcnMnXCJcbiAgICAgICAgW2FyaWEtaW52YWxpZF09XCIhaXNGaWVsZFZhbGlkKCdpbnB1dEVtYWlsJylcIlxuICAgICAgPlxuICAgICAgPC9iYi1pbnB1dC1lbWFpbC11aT5cbiAgICAgIDxiYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWkgW3Nob3dFcnJvcnNdPVwiIWlzRmllbGRWYWxpZCgnaW5wdXRFbWFpbCcpXCIgaWQ9XCJpbnB1dEVtYWlsRXJyb3JzXCI+XG4gICAgICAgIDxwICpuZ0lmPVwiaGFzUmVxdWlyZWRFcnJvcignaW5wdXRFbWFpbCcpXCI+RmllbGQgaXMgcmVxdWlyZWQuPC9wPlxuICAgICAgICA8cCAqbmdJZj1cImhhc0VtYWlsRXJyb3IoJ2lucHV0RW1haWwnKVwiPkVtYWlsIGZvcm1hdCBpcyBpbmNvcnJlY3QuPC9wPlxuICAgICAgPC9iYi1pbnB1dC12YWxpZGF0aW9uLW1lc3NhZ2UtdWk+XG4gICAgPC9mb3JtPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19