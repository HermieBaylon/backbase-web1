import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { of } from 'rxjs';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/file-attachment";
import * as i2 from "@angular/common";
const attachment = {
    name: 'examplePDF.pdf',
    deletable: false,
    disabled: false,
    size: 10000,
    loading: false,
    fileContent: of(new ArrayBuffer(2000000)),
};
let FileAttachmentShowcaseComponent = class FileAttachmentShowcaseComponent {
    constructor() {
        this.defaultFileAttachmentsList = [
            attachment,
            Object.assign(Object.assign({}, attachment), { name: 'exampleXLS.xls' }),
            Object.assign(Object.assign({}, attachment), { name: 'exampleCSV.csv' }),
            Object.assign(Object.assign({}, attachment), { name: 'examplePNG.png' }),
            Object.assign(Object.assign({}, attachment), { name: 'exampleUnknown' }),
        ];
        this.deletableFileAttachmentsList = this.defaultFileAttachmentsList.map((defaultAttachment) => (Object.assign(Object.assign({}, defaultAttachment), { deletable: true, disabled: true })));
    }
    deleteAttachment(filesList, index) {
        filesList[index].loading = true;
        setTimeout(() => {
            filesList[index].loading = false;
            filesList.splice(index, 1);
        }, 1000);
    }
};
FileAttachmentShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FileAttachmentShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FileAttachmentShowcaseComponent, selector: "bb-file-attachment-ui-showcase", ngImport: i0, template: "<h4>Default downloadable file attachments</h4>\n<div class=\"row\">\n  <div class=\"col-auto\" *ngFor=\"let attachment of defaultFileAttachmentsList\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui\n        [name]=\"attachment.name\"\n        [size]=\"attachment.size\"\n        [loading]=\"attachment.loading\"\n        [fileContent]=\"attachment.fileContent\"\n      ></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n<br />\n<h4>Disabled file attachments</h4>\n<div class=\"row\">\n  <div class=\"col-auto\" *ngFor=\"let attachment of defaultFileAttachmentsList\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui disabled=\"true\" [name]=\"attachment.name\" [size]=\"attachment.size\"></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n<br />\n<h4>Deletable file attachments with disabled download</h4>\n<div class=\"row\">\n  <div class=\"col-auto\" *ngFor=\"let attachment of deletableFileAttachmentsList; let i = index\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui\n        [name]=\"attachment.name\"\n        [deletable]=\"attachment.deletable\"\n        [disabled]=\"attachment.disabled\"\n        [size]=\"attachment.size\"\n        [loading]=\"attachment.loading\"\n        (delete)=\"deleteAttachment(deletableFileAttachmentsList, i)\"\n        [fileContent]=\"attachment.fileContent\"\n      ></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n<br />\n<h4>File attachments that fill their container</h4>\n<div class=\"row\">\n  <div class=\"col-md-4\" *ngFor=\"let attachment of defaultFileAttachmentsList; let i = index\">\n    <div class=\"bb-block bb-block--md\">\n      <bb-file-attachment-ui\n        [name]=\"attachment.name\"\n        [size]=\"attachment.size\"\n        [loading]=\"attachment.loading\"\n        [fileContent]=\"attachment.fileContent\"\n        [block]=\"true\"\n      ></bb-file-attachment-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.FileAttachmentComponent, selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
FileAttachmentShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], FileAttachmentShowcaseComponent);
export { FileAttachmentShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FileAttachmentShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-file-attachment-ui-showcase',
                    templateUrl: 'file-attachment-showcase.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1hdHRhY2htZW50LXNob3djYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2ZpbGUtYXR0YWNobWVudC9zaG93Y2FzZS9maWxlLWF0dGFjaG1lbnQtc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvZmlsZS1hdHRhY2htZW50L3Nob3djYXNlL2ZpbGUtYXR0YWNobWVudC1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQVdyRCxNQUFNLFVBQVUsR0FBZTtJQUM3QixJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsSUFBSSxFQUFFLEtBQUs7SUFDWCxPQUFPLEVBQUUsS0FBSztJQUNkLFdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7Q0FDMUMsQ0FBQztJQVNXLCtCQUErQixTQUEvQiwrQkFBK0I7O1FBQzFDLCtCQUEwQixHQUFpQjtZQUN6QyxVQUFVOzRDQUNMLFVBQVUsS0FBRSxJQUFJLEVBQUUsZ0JBQWdCOzRDQUNsQyxVQUFVLEtBQUUsSUFBSSxFQUFFLGdCQUFnQjs0Q0FDbEMsVUFBVSxLQUFFLElBQUksRUFBRSxnQkFBZ0I7NENBQ2xDLFVBQVUsS0FBRSxJQUFJLEVBQUUsZ0JBQWdCO1NBQ3hDLENBQUM7UUFFRixpQ0FBNEIsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLENBQUMsaUJBQTZCLEVBQUUsRUFBRSxDQUFDLGlDQUNqRyxpQkFBaUIsS0FDcEIsU0FBUyxFQUFFLElBQUksRUFDZixRQUFRLEVBQUUsSUFBSSxJQUNkLENBQUMsQ0FBQztLQVNMO0lBUEMsZ0JBQWdCLENBQUMsU0FBdUIsRUFBRSxLQUFhO1FBQ3JELFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNqQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDWCxDQUFDO0NBQ0YsQ0FBQTs2SEF0QlksK0JBQStCO2lIQUEvQiwrQkFBK0Isc0VDN0I1QywyNkRBc0RBO0FEekJhLCtCQUErQjtJQUgzQyxZQUFZLENBQUM7UUFDWixjQUFjLEVBQUUsSUFBSTtLQUNyQixDQUFDO0dBQ1csK0JBQStCLENBc0IzQztTQXRCWSwrQkFBK0I7NEZBQS9CLCtCQUErQjtrQkFQM0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxXQUFXLEVBQUUseUNBQXlDO2lCQUN2RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJhY2tiYXNlRG9jcyB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvdXRpbCc7XG5cbmludGVyZmFjZSBBdHRhY2htZW50IHtcbiAgbmFtZTogc3RyaW5nO1xuICBzaXplOiBudW1iZXI7XG4gIGxvYWRpbmc6IGJvb2xlYW47XG4gIGRlbGV0YWJsZTogYm9vbGVhbjtcbiAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gIGZpbGVDb250ZW50OiBPYnNlcnZhYmxlPEFycmF5QnVmZmVyPjtcbn1cblxuY29uc3QgYXR0YWNobWVudDogQXR0YWNobWVudCA9IHtcbiAgbmFtZTogJ2V4YW1wbGVQREYucGRmJyxcbiAgZGVsZXRhYmxlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBzaXplOiAxMDAwMCxcbiAgbG9hZGluZzogZmFsc2UsXG4gIGZpbGVDb250ZW50OiBvZihuZXcgQXJyYXlCdWZmZXIoMjAwMDAwMCkpLFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItZmlsZS1hdHRhY2htZW50LXVpLXNob3djYXNlJyxcbiAgdGVtcGxhdGVVcmw6ICdmaWxlLWF0dGFjaG1lbnQtc2hvd2Nhc2UuY29tcG9uZW50Lmh0bWwnLFxufSlcbkBCYWNrYmFzZURvY3Moe1xuICBpc1RoZW1lMlN0YWJsZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgRmlsZUF0dGFjaG1lbnRTaG93Y2FzZUNvbXBvbmVudCB7XG4gIGRlZmF1bHRGaWxlQXR0YWNobWVudHNMaXN0OiBBdHRhY2htZW50W10gPSBbXG4gICAgYXR0YWNobWVudCxcbiAgICB7IC4uLmF0dGFjaG1lbnQsIG5hbWU6ICdleGFtcGxlWExTLnhscycgfSxcbiAgICB7IC4uLmF0dGFjaG1lbnQsIG5hbWU6ICdleGFtcGxlQ1NWLmNzdicgfSxcbiAgICB7IC4uLmF0dGFjaG1lbnQsIG5hbWU6ICdleGFtcGxlUE5HLnBuZycgfSxcbiAgICB7IC4uLmF0dGFjaG1lbnQsIG5hbWU6ICdleGFtcGxlVW5rbm93bicgfSxcbiAgXTtcblxuICBkZWxldGFibGVGaWxlQXR0YWNobWVudHNMaXN0ID0gdGhpcy5kZWZhdWx0RmlsZUF0dGFjaG1lbnRzTGlzdC5tYXAoKGRlZmF1bHRBdHRhY2htZW50OiBBdHRhY2htZW50KSA9PiAoe1xuICAgIC4uLmRlZmF1bHRBdHRhY2htZW50LFxuICAgIGRlbGV0YWJsZTogdHJ1ZSxcbiAgICBkaXNhYmxlZDogdHJ1ZSxcbiAgfSkpO1xuXG4gIGRlbGV0ZUF0dGFjaG1lbnQoZmlsZXNMaXN0OiBBdHRhY2htZW50W10sIGluZGV4OiBudW1iZXIpIHtcbiAgICBmaWxlc0xpc3RbaW5kZXhdLmxvYWRpbmcgPSB0cnVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZmlsZXNMaXN0W2luZGV4XS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICBmaWxlc0xpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9LCAxMDAwKTtcbiAgfVxufVxuIiwiPGg0PkRlZmF1bHQgZG93bmxvYWRhYmxlIGZpbGUgYXR0YWNobWVudHM8L2g0PlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLWF1dG9cIiAqbmdGb3I9XCJsZXQgYXR0YWNobWVudCBvZiBkZWZhdWx0RmlsZUF0dGFjaG1lbnRzTGlzdFwiPlxuICAgIDxkaXYgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tbWRcIj5cbiAgICAgIDxiYi1maWxlLWF0dGFjaG1lbnQtdWlcbiAgICAgICAgW25hbWVdPVwiYXR0YWNobWVudC5uYW1lXCJcbiAgICAgICAgW3NpemVdPVwiYXR0YWNobWVudC5zaXplXCJcbiAgICAgICAgW2xvYWRpbmddPVwiYXR0YWNobWVudC5sb2FkaW5nXCJcbiAgICAgICAgW2ZpbGVDb250ZW50XT1cImF0dGFjaG1lbnQuZmlsZUNvbnRlbnRcIlxuICAgICAgPjwvYmItZmlsZS1hdHRhY2htZW50LXVpPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPGJyIC8+XG48aDQ+RGlzYWJsZWQgZmlsZSBhdHRhY2htZW50czwvaDQ+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtYXV0b1wiICpuZ0Zvcj1cImxldCBhdHRhY2htZW50IG9mIGRlZmF1bHRGaWxlQXR0YWNobWVudHNMaXN0XCI+XG4gICAgPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1tZFwiPlxuICAgICAgPGJiLWZpbGUtYXR0YWNobWVudC11aSBkaXNhYmxlZD1cInRydWVcIiBbbmFtZV09XCJhdHRhY2htZW50Lm5hbWVcIiBbc2l6ZV09XCJhdHRhY2htZW50LnNpemVcIj48L2JiLWZpbGUtYXR0YWNobWVudC11aT5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjxiciAvPlxuPGg0PkRlbGV0YWJsZSBmaWxlIGF0dGFjaG1lbnRzIHdpdGggZGlzYWJsZWQgZG93bmxvYWQ8L2g0PlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLWF1dG9cIiAqbmdGb3I9XCJsZXQgYXR0YWNobWVudCBvZiBkZWxldGFibGVGaWxlQXR0YWNobWVudHNMaXN0OyBsZXQgaSA9IGluZGV4XCI+XG4gICAgPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS1tZFwiPlxuICAgICAgPGJiLWZpbGUtYXR0YWNobWVudC11aVxuICAgICAgICBbbmFtZV09XCJhdHRhY2htZW50Lm5hbWVcIlxuICAgICAgICBbZGVsZXRhYmxlXT1cImF0dGFjaG1lbnQuZGVsZXRhYmxlXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cImF0dGFjaG1lbnQuZGlzYWJsZWRcIlxuICAgICAgICBbc2l6ZV09XCJhdHRhY2htZW50LnNpemVcIlxuICAgICAgICBbbG9hZGluZ109XCJhdHRhY2htZW50LmxvYWRpbmdcIlxuICAgICAgICAoZGVsZXRlKT1cImRlbGV0ZUF0dGFjaG1lbnQoZGVsZXRhYmxlRmlsZUF0dGFjaG1lbnRzTGlzdCwgaSlcIlxuICAgICAgICBbZmlsZUNvbnRlbnRdPVwiYXR0YWNobWVudC5maWxlQ29udGVudFwiXG4gICAgICA+PC9iYi1maWxlLWF0dGFjaG1lbnQtdWk+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48YnIgLz5cbjxoND5GaWxlIGF0dGFjaG1lbnRzIHRoYXQgZmlsbCB0aGVpciBjb250YWluZXI8L2g0PlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTRcIiAqbmdGb3I9XCJsZXQgYXR0YWNobWVudCBvZiBkZWZhdWx0RmlsZUF0dGFjaG1lbnRzTGlzdDsgbGV0IGkgPSBpbmRleFwiPlxuICAgIDxkaXYgY2xhc3M9XCJiYi1ibG9jayBiYi1ibG9jay0tbWRcIj5cbiAgICAgIDxiYi1maWxlLWF0dGFjaG1lbnQtdWlcbiAgICAgICAgW25hbWVdPVwiYXR0YWNobWVudC5uYW1lXCJcbiAgICAgICAgW3NpemVdPVwiYXR0YWNobWVudC5zaXplXCJcbiAgICAgICAgW2xvYWRpbmddPVwiYXR0YWNobWVudC5sb2FkaW5nXCJcbiAgICAgICAgW2ZpbGVDb250ZW50XT1cImF0dGFjaG1lbnQuZmlsZUNvbnRlbnRcIlxuICAgICAgICBbYmxvY2tdPVwidHJ1ZVwiXG4gICAgICA+PC9iYi1maWxlLWF0dGFjaG1lbnQtdWk+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=