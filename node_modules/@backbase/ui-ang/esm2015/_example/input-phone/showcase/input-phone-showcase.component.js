import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-text";
import * as i3 from "@backbase/ui-ang/input-phone";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/phone-number-format-pipe";
let InputPhoneShowcaseComponent = class InputPhoneShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.country = [
            {
                countryCode: '+91',
                isoCode: 'IN',
                countryName: 'India',
            },
        ];
        this.countries = [
            {
                countryCode: '+1',
                isoCode: 'US',
                countryName: 'United States',
            },
            {
                countryCode: '+31',
                isoCode: 'NL',
                countryName: 'Netherlands',
            },
            {
                countryCode: '+34',
                isoCode: 'NZ',
                countryName: 'New Zealand',
            },
            {
                countryCode: '+355',
                isoCode: 'AL',
                countryName: 'Albania',
            },
            {
                countryCode: '+91',
                isoCode: 'IN',
                countryName: 'India',
            },
            {
                countryCode: '+55',
                isoCode: 'BR',
                countryName: 'Brazil',
            },
            {
                countryCode: '+420',
                isoCode: 'CZ',
                countryName: 'Czech Republic',
            },
            {
                countryCode: '+49',
                isoCode: 'DE',
                countryName: 'Germany',
            },
        ];
    }
    ngOnInit() {
        this.vForm = this.formBuilder.group({
            phoneNumberCountryCode: 'CA',
            phoneNumber: '',
        });
        this.vForm.controls.phoneNumber.setValue('16045555555');
    }
};
InputPhoneShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
InputPhoneShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputPhoneShowcaseComponent, selector: "bb-input-phone-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <section class=\"showcase__section\">\n      <form [formGroup]=\"vForm\">\n        <div class=\"bb-stack\">\n          <div class=\"form-group bb-stack__item\">\n            <label for=\"countryCode\">Country Code</label>\n            <bb-input-text-ui\n              [id]=\"'countryCode'\"\n              [maxLength]=\"2\"\n              [size]=\"2\"\n              class=\"bb-block\"\n              [inputClassName]=\"'bb-text-align-center'\"\n              formControlName=\"phoneNumberCountryCode\"\n            ></bb-input-text-ui>\n          </div>\n          <div class=\"form-group bb-stack__item bb-stack__item--fill\">\n            <bb-input-phone-ui\n              [id]=\"'phoneNumber'\"\n              label=\"Phone Number\"\n              formControlName=\"phoneNumber\"\n              placeholder=\"Enter a phone number\"\n              [required]=\"true\"\n            >\n            </bb-input-phone-ui>\n          </div>\n        </div>\n        <p *ngIf=\"vForm\">\n          <strong>Formatted number: </strong><br />\n          {{ vForm.get('phoneNumberCountryCode')?.value }}\n          {{ vForm.get('phoneNumber')?.value | phoneNumber: vForm.get('phoneNumberCountryCode')?.value }}\n        </p>\n        <div class=\"bb-stack form-group bb-stack__item bb-stack__item--fill\">\n          <bb-input-phone-ui\n            [id]=\"'phoneNumber1'\"\n            label=\"Phone Number\"\n            formControlName=\"phoneNumber\"\n            placeholder=\"Enter a phone number\"\n            [required]=\"true\"\n            [enableCountryCode]=\"true\"\n            defaultCountryIsoCode=\"BR\"\n            [countryList]=\"countries\"\n          >\n          </bb-input-phone-ui>\n        </div>\n        <div class=\"bb-stack form-group bb-stack__item bb-stack__item--fill\">\n          <bb-input-phone-ui\n            [id]=\"'phoneNumber2'\"\n            label=\"Phone Number\"\n            formControlName=\"phoneNumber\"\n            placeholder=\"Enter a phone number\"\n            [required]=\"true\"\n            [enableCountryCode]=\"true\"\n            [countryList]=\"country\"\n          >\n          </bb-input-phone-ui>\n        </div>\n      </form>\n    </section>\n    <section class=\"showcase__section\">\n      <h1>Other examples</h1>\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Country Code</th>\n            <th scope=\"col\">Unformatted Number</th>\n            <th scope=\"col\">Formatted Number</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>CA</td>\n            <td>16045555555</td>\n            <td>{{ '16045555555' | phoneNumber: 'BT' }}</td>\n          </tr>\n          <tr>\n            <td>NL</td>\n            <td>0612345622</td>\n            <td>{{ '0612345622' | phoneNumber: 'NL' }}</td>\n          </tr>\n          <tr>\n            <td>GB</td>\n            <td>07744556677</td>\n            <td>{{ '07744556677' | phoneNumber: 'GB' }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  </div>\n</div>\n", components: [{ type: i2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputPhoneComponent, selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "phoneNumber": i5.PhoneNumberPipe } });
InputPhoneShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InputPhoneShowcaseComponent);
export { InputPhoneShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-phone-ui-showcase',
                    templateUrl: './input-phone-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,