import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/stepper";
import * as i2 from "@angular/common";
let StepperShowcaseComponent = class StepperShowcaseComponent {
    constructor() {
        this.data = '';
        this.steps = [
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: true,
                isActive: true,
            },
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                isCurrent: true,
                isChecked: false,
                isActive: true,
            },
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: false,
                isActive: false,
            },
        ];
        this.stepsWithChildren = [
            {
                label: 'Select a category',
                stateLabel: 'Successful',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: true,
                isActive: true,
            },
            {
                label: 'Select a category',
                ariaLabel: 'Select a category step',
                stateLabel: 'Done',
                data: 'category-1',
                isCurrent: false,
                isChecked: true,
                isActive: true,
            },
            {
                label: 'Select a category',
                stateLabel: 'Open',
                ariaLabel: 'Select a category step',
                isCurrent: true,
                isChecked: false,
                isActive: true,
                children: [
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        data: 'category-2',
                        isCurrent: false,
                        isChecked: true,
                        isActive: true,
                    },
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        isCurrent: true,
                        isChecked: false,
                        isActive: true,
                    },
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        data: 'category-3',
                        isCurrent: false,
                        isChecked: false,
                        isActive: false,
                    },
                    {
                        label: 'Select a category',
                        ariaLabel: 'Select a category step',
                        isCurrent: false,
                        isChecked: false,
                        isActive: false,
                    },
                ],
            },
            {
                label: 'Select a category',
                stateLabel: 'Open',
                data: 'category-4',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: false,
                isActive: false,
            },
            {
                label: 'Select a category',
                stateLabel: 'Open',
                ariaLabel: 'Select a category step',
                isCurrent: false,
                isChecked: false,
                isActive: false,
            },
        ];
    }
    showData(data) {
        this.data = data;
    }
};
StepperShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
StepperShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StepperShowcaseComponent, selector: "bb-stepper-ui-showcase", ngImport: i0, template: "<div class=\"mb-4\">\n  <h2>With labels</h2>\n  <div class=\"mt-4 col-8\">\n    <bb-stepper-ui>\n      <bb-stepper-step-ui\n        *ngFor=\"let step of steps\"\n        [label]=\"step.label\"\n        [ariaLabel]=\"step.ariaLabel\"\n        [isCurrent]=\"step.isCurrent\"\n        [isChecked]=\"step.isChecked\"\n        [isActive]=\"step.isActive\"\n      ></bb-stepper-step-ui>\n    </bb-stepper-ui>\n  </div>\n</div>\n<div class=\"mb-4\">\n  <h2>Without labels</h2>\n  <div class=\"mt-4 col-3\">\n    <bb-stepper-ui>\n      <bb-stepper-step-ui\n        *ngFor=\"let step of steps\"\n        [isCurrent]=\"step.isCurrent\"\n        [isChecked]=\"step.isChecked\"\n        [isActive]=\"step.isActive\"\n      ></bb-stepper-step-ui>\n    </bb-stepper-ui>\n  </div>\n</div>\n<div class=\"mb-4\">\n  <h2>Vertical with sub-steps, state labels and links</h2>\n  <p>Steps 2, 3.1, 3.3 and 4 are links and change state on hover. URL: {{ data || 'click on links...' }}</p>\n  <div class=\"mt-4 col-4\">\n    <bb-stepper-ui class=\"bb-stepper--vertical\" (select)=\"showData($event)\">\n      <bb-stepper-step-ui\n        *ngFor=\"let step of stepsWithChildren\"\n        [label]=\"step.label\"\n        [ariaLabel]=\"step.ariaLabel\"\n        [stateLabel]=\"step.stateLabel\"\n        [data]=\"step.data\"\n        [isCurrent]=\"step.isCurrent\"\n        [isChecked]=\"step.isChecked\"\n        [isActive]=\"step.isActive\"\n      >\n        <bb-stepper-step-ui\n          *ngFor=\"let step of step.children\"\n          [label]=\"step.label\"\n          [ariaLabel]=\"step.label\"\n          [data]=\"step.data\"\n          [isCurrent]=\"step.isCurrent\"\n          [isActive]=\"step.isActive\"\n          [isChecked]=\"step.isChecked\"\n        ></bb-stepper-step-ui>\n      </bb-stepper-step-ui>\n    </bb-stepper-ui>\n  </div>\n</div>\n", components: [{ type: i1.StepperComponent, selector: "bb-stepper-ui", outputs: ["select"] }, { type: i1.StepperStepComponent, selector: "bb-stepper-step-ui", inputs: ["label", "stateLabel", "data", "ariaLabel", "isCurrent", "isChecked", "isActive"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
StepperShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], StepperShowcaseComponent);
export { StepperShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stepper-ui-showcase',
                    templateUrl: './stepper-showcase.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,