import { Component } from '@angular/core';
import { accounts } from './accounts';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/account-selector";
export class AccountSelectorExampleComponent {
    constructor() {
        this.items = accounts;
        this.selectedItems = this.items[0];
    }
    onChange($event) {
        const count = Array.isArray($event)
            ? $event.length
            : $event
                ? 1
                : 0;
        console.log(`${count} items selected`);
    }
    onSearch($event) {
        console.log(`Search for query: ${$event}`);
    }
    onClearSearch() {
        console.log('Search cleared');
    }
    onScrollToEnd() {
        console.log('Scrolled to end');
    }
}
AccountSelectorExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
AccountSelectorExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountSelectorExampleComponent, selector: "bb-account-selector-example-ui", ngImport: i0, template: "<h2 id=\"ariaLabelledById\">Account Selector</h2>\n<div id=\"ariaDescribedById\">\n  Account selector Component that supports single select, multi select\n  and auto complete\n</div>\n<bb-account-selector-ui\n  [items]=\"items\"\n  [disableScrollEnd]=\"false\"\n  [multiple]=\"true\"\n  [closeOnSelect]=\"true\"\n  [filterItems]=\"true\"\n  [selectedItems]=\"selectedItems\"\n  [dropdownPosition]=\"'bottom'\"\n  (change)=\"onChange($event)\"\n  (clearSearch)=\"onClearSearch()\"\n  (scrollToEnd)=\"onScrollToEnd()\"\n  (search)=\"onSearch($event)\"\n  placeholder=\"Select Accounts\"\n  [aria-describedby]=\"'ariaLabelledById'\"\n  [aria-labelledby]=\"'ariaDescribedById'\"\n>\n</bb-account-selector-ui>\n", components: [{ type: i1.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountSelectorExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-selector-example-ui',
                    templateUrl: './account-selector.example.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1zZWxlY3Rvci5leGFtcGxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2FjY291bnQtc2VsZWN0b3IvZXhhbXBsZXMvYWNjb3VudC1zZWxlY3Rvci5leGFtcGxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2FjY291bnQtc2VsZWN0b3IvZXhhbXBsZXMvYWNjb3VudC1zZWxlY3Rvci5leGFtcGxlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQzs7O0FBTXRDLE1BQU0sT0FBTywrQkFBK0I7SUFKNUM7UUFLRSxVQUFLLEdBQWtCLFFBQVEsQ0FBQztRQUNoQyxrQkFBYSxHQUFnQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBdUI1RDtJQXJCQyxRQUFRLENBQUMsTUFBbUM7UUFDMUMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNO1lBQ2YsQ0FBQyxDQUFDLE1BQU07Z0JBQ1IsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVOLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLGlCQUFpQixDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELFFBQVEsQ0FBQyxNQUFjO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDakMsQ0FBQzs7NkhBeEJVLCtCQUErQjtpSEFBL0IsK0JBQStCLHNFQ1I1Qyxvc0JBc0JBOzRGRGRhLCtCQUErQjtrQkFKM0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxXQUFXLEVBQUUsMkNBQTJDO2lCQUN6RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWNjb3VudERhdGEgfSBmcm9tICcuL2FjY291bnQtc2VsZWN0b3IuZXhhbXBsZS5tb2RlbCc7XG5pbXBvcnQgeyBhY2NvdW50cyB9IGZyb20gJy4vYWNjb3VudHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1hY2NvdW50LXNlbGVjdG9yLWV4YW1wbGUtdWknLFxuICB0ZW1wbGF0ZVVybDogJy4vYWNjb3VudC1zZWxlY3Rvci5leGFtcGxlLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQWNjb3VudFNlbGVjdG9yRXhhbXBsZUNvbXBvbmVudCB7XG4gIGl0ZW1zOiBBY2NvdW50RGF0YVtdID0gYWNjb3VudHM7XG4gIHNlbGVjdGVkSXRlbXM6IEFjY291bnREYXRhIHwgQWNjb3VudERhdGFbXSA9IHRoaXMuaXRlbXNbMF07XG5cbiAgb25DaGFuZ2UoJGV2ZW50OiBBY2NvdW50RGF0YSB8IEFjY291bnREYXRhW10pIHtcbiAgICBjb25zdCBjb3VudCA9IEFycmF5LmlzQXJyYXkoJGV2ZW50KVxuICAgICAgPyAkZXZlbnQubGVuZ3RoXG4gICAgICA6ICRldmVudFxuICAgICAgPyAxXG4gICAgICA6IDA7XG5cbiAgICBjb25zb2xlLmxvZyhgJHtjb3VudH0gaXRlbXMgc2VsZWN0ZWRgKTtcbiAgfVxuXG4gIG9uU2VhcmNoKCRldmVudDogc3RyaW5nKSB7XG4gICAgY29uc29sZS5sb2coYFNlYXJjaCBmb3IgcXVlcnk6ICR7JGV2ZW50fWApO1xuICB9XG5cbiAgb25DbGVhclNlYXJjaCgpIHtcbiAgICBjb25zb2xlLmxvZygnU2VhcmNoIGNsZWFyZWQnKTtcbiAgfVxuXG4gIG9uU2Nyb2xsVG9FbmQoKSB7XG4gICAgY29uc29sZS5sb2coJ1Njcm9sbGVkIHRvIGVuZCcpO1xuICB9XG59XG4iLCI8aDIgaWQ9XCJhcmlhTGFiZWxsZWRCeUlkXCI+QWNjb3VudCBTZWxlY3RvcjwvaDI+XG48ZGl2IGlkPVwiYXJpYURlc2NyaWJlZEJ5SWRcIj5cbiAgQWNjb3VudCBzZWxlY3RvciBDb21wb25lbnQgdGhhdCBzdXBwb3J0cyBzaW5nbGUgc2VsZWN0LCBtdWx0aSBzZWxlY3RcbiAgYW5kIGF1dG8gY29tcGxldGVcbjwvZGl2PlxuPGJiLWFjY291bnQtc2VsZWN0b3ItdWlcbiAgW2l0ZW1zXT1cIml0ZW1zXCJcbiAgW2Rpc2FibGVTY3JvbGxFbmRdPVwiZmFsc2VcIlxuICBbbXVsdGlwbGVdPVwidHJ1ZVwiXG4gIFtjbG9zZU9uU2VsZWN0XT1cInRydWVcIlxuICBbZmlsdGVySXRlbXNdPVwidHJ1ZVwiXG4gIFtzZWxlY3RlZEl0ZW1zXT1cInNlbGVjdGVkSXRlbXNcIlxuICBbZHJvcGRvd25Qb3NpdGlvbl09XCInYm90dG9tJ1wiXG4gIChjaGFuZ2UpPVwib25DaGFuZ2UoJGV2ZW50KVwiXG4gIChjbGVhclNlYXJjaCk9XCJvbkNsZWFyU2VhcmNoKClcIlxuICAoc2Nyb2xsVG9FbmQpPVwib25TY3JvbGxUb0VuZCgpXCJcbiAgKHNlYXJjaCk9XCJvblNlYXJjaCgkZXZlbnQpXCJcbiAgcGxhY2Vob2xkZXI9XCJTZWxlY3QgQWNjb3VudHNcIlxuICBbYXJpYS1kZXNjcmliZWRieV09XCInYXJpYUxhYmVsbGVkQnlJZCdcIlxuICBbYXJpYS1sYWJlbGxlZGJ5XT1cIidhcmlhRGVzY3JpYmVkQnlJZCdcIlxuPlxuPC9iYi1hY2NvdW50LXNlbGVjdG9yLXVpPlxuIl19