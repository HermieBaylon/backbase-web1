import { __decorate } from "tslib";
import { Component, ViewChild } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/notification";
import * as i2 from "@angular/common";
import * as i3 from "@backbase/ui-ang/button";
let NotificationShowcaseComponent = class NotificationShowcaseComponent {
    constructor(notificationService, cdRef) {
        this.notificationService = notificationService;
        this.cdRef = cdRef;
    }
    ngAfterViewInit() {
        this.notificationsConfig = [
            {
                btn: {
                    text: 'Launch info notification',
                    color: 'primary',
                    type: 'info',
                },
                notification: {
                    header: 'This is the header of notification',
                    message: 'This is the default info notification. It breaks words, so you can have long text here.',
                    modifier: 'info',
                    dismissible: false,
                    ttl: 1500,
                },
            },
            {
                btn: {
                    text: 'Launch success notification',
                    color: 'success',
                    type: 'success',
                },
                notification: {
                    header: 'This is the header of notification',
                    message: 'This is the default success notification. It breaks words, so you can have long text here.',
                    modifier: 'success',
                    dismissible: true,
                    ttl: 2000,
                },
            },
            {
                btn: {
                    text: 'Launch alert notification',
                    color: 'danger',
                    type: 'danger',
                },
                notification: {
                    header: 'This is the header of notification',
                    message: 'This is the default error notification. It breaks words, so you can have long text here.',
                    modifier: 'error',
                    dismissible: true,
                    ttl: 10000,
                },
            },
            {
                btn: {
                    text: 'Launch warning notification',
                    color: 'primary',
                    type: 'warning',
                },
                notification: {
                    ttl: 10000,
                    header: 'This is the header of notification',
                    message: 'This is the default warning notification. It breaks words, so you can have long text here.',
                    modifier: 'warning',
                    dismissible: true,
                },
            },
            {
                btn: {
                    text: 'Launch two buttons notification',
                    color: 'primary',
                    type: 'two-buttons',
                },
                notification: {
                    ttl: 0,
                    header: 'This is the header of notification',
                    message: 'This is a notification with both primary and secondary actions. Both buttons allow callbacks and will close the notification when pressed. This notification also has no timeout, ensure this by setting ttl to 0.',
                    modifier: 'error',
                    dismissible: true,
                    primaryAction: () => this.showMessage('primary'),
                    secondaryAction: () => this.showMessage('secondary'),
                    primaryActionText: 'Primary',
                    secondaryActionText: 'Secondary',
                },
            },
            {
                btn: {
                    text: 'Launch custom notification with context',
                    color: 'primary',
                    type: 'custom',
                },
                notification: {
                    ttl: 10000,
                    header: 'File was uploaded',
                    message: 'Sample file.txt. was successfully uploaded',
                    modifier: 'success',
                    dismissible: true,
                },
            },
            {
                btn: {
                    text: 'Launch two customisable buttons notification',
                    color: 'primary',
                    type: 'two-buttons',
                },
                notification: {
                    ttl: 0,
                    header: 'This is the header of notification',
                    message: 'This is a notification with both primary and secondary actions. Both buttons allow callbacks and will close the notification when pressed. This notification also has no timeout, ensure this by setting ttl to 0.',
                    modifier: 'error',
                    dismissible: true,
                    primaryActionTemplate: this.default1,
                    secondaryActionTemplate: this.default2,
                    primaryAction: () => this.showMessage('primary'),
                    secondaryAction: () => this.showMessage('secondary'),
                    primaryActionText: 'Primary',
                    secondaryActionText: 'Secondary',
                },
            },
            {
                btn: {
                    text: 'Launch htm template text',
                    color: 'primary',
                    type: 'two-buttons',
                },
                notification: {
                    ttl: 0,
                    header: 'This is the header of notification',
                    message: this.messageTemplate,
                    modifier: 'error',
                    dismissible: true,
                    primaryActionTemplate: this.default1,
                    secondaryActionTemplate: this.default2,
                    primaryAction: () => this.showMessage('primary'),
                    secondaryAction: () => this.showMessage('secondary'),
                    primaryActionText: 'Primary',
                    secondaryActionText: 'Secondary',
                },
            },
        ];
    }
    ngAfterViewChecked() {
        this.cdRef.detectChanges();
    }
    showNotification({ header, message, dismissible, ttl, modifier, primaryActionText, secondaryActionText, primaryAction, secondaryAction, primaryActionTemplate, secondaryActionTemplate, }) {
        this.notificationService.showNotification({
            ttl,
            header,
            message,
            modifier,
            dismissible,
            primaryAction,
            secondaryAction,
            primaryActionText,
            secondaryActionText,
            primaryActionTemplate,
            secondaryActionTemplate,
        });
    }
    showMessage(buttonType) {
        this.notificationService.showNotification({
            header: 'This is the header of notification',
            message: `The notification triggered by clicking on ${buttonType} button.`,
            dismissible: true,
            ttl: 0,
        });
    }
};
NotificationShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseComponent, deps: [{ token: i1.NotificationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NotificationShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NotificationShowcaseComponent, selector: "bb-notification-ui-showcase", viewQueries: [{ propertyName: "default1", first: true, predicate: ["default1"], descendants: true, static: true }, { propertyName: "default2", first: true, predicate: ["default2"], descendants: true, static: true }, { propertyName: "messageTemplate", first: true, predicate: ["messageTemplate"], descendants: true, static: true }], ngImport: i0, template: "<div *ngFor=\"let config of notificationsConfig\" class=\"row mb-4\">\n  <div class=\"col-12\">\n    <button\n      (click)=\"showNotification(config.notification)\"\n      [buttonSize]=\"'md'\"\n      [color]=\"config.btn.color\"\n      bbButton\n      [attr.data-role]=\"'notification-' + config.btn.color + '-' + config.btn.type\"\n    >\n      {{ config.btn.text }}\n    </button>\n  </div>\n</div>\n\n<ng-template #default1>\n  <span>Save</span>\n</ng-template>\n\n<ng-template #default2>\n  <span>Discard</span>\n</ng-template>\n\n<ng-template #messageTemplate>\n  <p>This is an html message message template</p>\n</ng-template>\n", directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
NotificationShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], NotificationShowcaseComponent);
export { NotificationShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NotificationShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-notification-ui-showcase',
                    templateUrl: 'notification-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { default1: [{
                type: ViewChild,
                args: ['default1', { static: true }]
            }], default2: [{
                type: ViewChild,
                args: ['default2', { static: true }]
            }], messageTemplate: [{
                type: ViewChild,
                args: ['messageTemplate', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,