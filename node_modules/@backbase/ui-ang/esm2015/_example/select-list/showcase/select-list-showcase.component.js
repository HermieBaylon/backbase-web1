import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { delay, switchMap, tap } from 'rxjs/operators';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/select-list";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
let SelectListShowcaseComponent = class SelectListShowcaseComponent {
    constructor() {
        /** Examples for standard data structure - e.g. { name: '', value: '' } */
        this.singleSelectItems = [
            { name: 'Single One', value: 'single-one' },
            { name: 'Single Two', value: 'single-two' },
            { name: 'Single Three', value: 'single-three' },
        ];
        this.multiSelectItems = [
            { name: 'Multi One', value: 'multi-one' },
            { name: 'Multi Two', value: 'multi-two' },
            { name: 'Multi Three', value: 'multi-three' },
            { name: 'Multi Four', value: 'multi-four' },
            { name: 'Multi Five', value: 'multi-five' },
        ];
        /** Example for non-standard data structure - e.g. { name: '', code: '' } */
        this.countries = [
            { name: 'France', code: 'FRA' },
            { name: 'Germany', code: 'GER' },
            { name: 'Italy', code: 'ITA' },
            { name: 'United Kingdom', code: 'UK' },
        ];
        this.itemsObservable$ = of([
            { name: 'Item One', value: 'item-one' },
            { name: 'Item Two', value: 'item-two' },
        ]);
        this.searchOnLoadSubject = new BehaviorSubject('');
        this.searchAfterValueSubject = new Subject();
        this.loadingSubject = new BehaviorSubject(false);
        this.searchOnLoadItems$ = this.searchOnLoadSubject.pipe(tap(() => this.loadingSubject.next(true)), delay(1000), switchMap(() => this.itemsObservable$), tap(() => this.loadingSubject.next(false)));
        this.loading = this.loadingSubject.asObservable();
        this.searchAfterValueItems$ = this.searchAfterValueSubject.pipe(switchMap(() => this.itemsObservable$));
    }
    ngOnInit() {
        this.form = new FormGroup({
            singleSelect: new FormControl(null),
            multipleSelect: new FormControl([]),
            multipleSelectDestinations: new FormControl([]),
            multipleSelectObservable: new FormControl([]),
            searchOnLoad: new FormControl(undefined),
            searchAfterValue: new FormControl(undefined),
        });
    }
    searchOnLoad(value) {
        this.searchOnLoadSubject.next(value);
    }
    searchAfterValue(value) {
        this.searchAfterValueSubject.next(value);
    }
};
SelectListShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
SelectListShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectListShowcaseComponent, selector: "bb-select-list-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"form\">\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"singleSelectLabel\">Single Select</h4>\n    <bb-select-list-ui\n      id=\"select-list\"\n      formControlName=\"singleSelect\"\n      placeholder=\"Start typing. e.g. single\"\n      [items]=\"singleSelectItems\"\n      minTermLength=\"3\"\n      aria-labelledby=\"singleSelectLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <bb-select-list-ui\n      id=\"select-list2\"\n      formControlName=\"singleSelect\"\n      placeholder=\"Start typing. e.g. single\"\n      [items]=\"singleSelectItems\"\n      minTermLength=\"3\"\n      label=\"Embed label\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"multipleSelectLabel\">Multiple Select - Max. 3 selections</h4>\n    <bb-select-list-ui\n      id=\"select-list-multi\"\n      formControlName=\"multipleSelect\"\n      placeholder=\"Start typing. e.g. multi\"\n      [items]=\"multiSelectItems\"\n      minTermLength=\"3\"\n      [multiple]=\"true\"\n      maxSelectedItems=\"3\"\n      aria-labelledby=\"multipleSelectLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"multipleSelectLabelDestinations\">Multiple Select - Non-Standard Data Structure</h4>\n    <bb-select-list-ui\n      id=\"select-list-multi-destinations\"\n      formControlName=\"multipleSelectDestinations\"\n      placeholder=\"Start typing. e.g. germany\"\n      [items]=\"countries\"\n      minTermLength=\"3\"\n      [multiple]=\"true\"\n      aria-labelledby=\"multipleSelectLabelDestinations\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"multipleSelectLabelObservable\">Multiple Select - Items from Observable</h4>\n    <bb-select-list-ui\n      id=\"select-list-multi-observable\"\n      formControlName=\"multipleSelectObservable\"\n      placeholder=\"Start typing. e.g. item\"\n      [items]=\"itemsObservable$ | async\"\n      minTermLength=\"3\"\n      [multiple]=\"true\"\n      aria-labelledby=\"multipleSelectLabelObservable\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"searchOnLoadLabel\">Single Select - Dynamic items list, retrieved on page load</h4>\n    <bb-select-list-ui\n      label=\"Search on load\"\n      formControlName=\"searchOnLoad\"\n      placeholder=\"Click to open dropdown, items are loaded when page is. Typing will return back the input value\"\n      [items]=\"searchOnLoadItems$ | async\"\n      [filterEnabled]=\"false\"\n      minTermLength=\"3\"\n      [loading]=\"loading | async\"\n      (search)=\"searchOnLoad($event)\"\n      aria-labelledby=\"searchOnLoadLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4 id=\"searchAfterValueLabel\">Single Select - Dynamic items list, retrieved after first search</h4>\n    <bb-select-list-ui\n      formControlName=\"searchAfterValue\"\n      placeholder=\"Items are loaded when you search. Typing will return back the input value\"\n      [items]=\"searchAfterValueItems$ | async\"\n      [filterEnabled]=\"false\"\n      minTermLength=\"3\"\n      (search)=\"searchAfterValue($event)\"\n      aria-labelledby=\"searchAfterValueLabel\"\n    >\n    </bb-select-list-ui>\n  </div>\n</form>\n", components: [{ type: i1.SelectListComponent, selector: "bb-select-list-ui", inputs: ["loading", "placeholder", "minTermLength", "maxSelectedItems", "multiple", "items", "filterEnabled"], outputs: ["valueChange", "search", "clear"] }], directives: [{ type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i3.AsyncPipe } });
SelectListShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], SelectListShowcaseComponent);
export { SelectListShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectListShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-list-ui-showcase',
                    templateUrl: './select-list-showcase.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,