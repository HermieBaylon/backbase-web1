import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/textarea";
let CharCounterShowcaseComponent = class CharCounterShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.vForm = this.formBuilder.group({
            textarea: '',
            textareaAlmostFull: '123456789012345678',
            textareaFull: '12345678901234567890',
        });
    }
    reset() {
        if (this.vForm) {
            const control = this.vForm.get('textareaFull');
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            control && control.reset();
        }
    }
};
CharCounterShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
CharCounterShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CharCounterShowcaseComponent, selector: "bb-char-counter-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Char counter</h4>\n    <bb-textarea-ui\n      [id]=\"'textarea'\"\n      label=\"Description\"\n      placeholder=\"Enter text...\"\n      formControlName=\"textarea\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"3\"\n      [maxLength]=\"160\"\n      [rows]=\"3\"\n      [cols]=\"50\"\n      wrap=\"hard\"\n    ></bb-textarea-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Char counter (almost full)</h4>\n    <bb-textarea-ui\n      [id]=\"'textarea'\"\n      label=\"Description\"\n      placeholder=\"Enter text...\"\n      formControlName=\"textareaAlmostFull\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"3\"\n      [maxLength]=\"20\"\n      [rows]=\"3\"\n      [cols]=\"50\"\n      wrap=\"hard\"\n    ></bb-textarea-ui>\n  </div>\n\n  <div class=\"bb-block bb-block--xl\">\n    <h4>Char counter (full)</h4>\n    <bb-textarea-ui\n      [id]=\"'textarea'\"\n      label=\"Description\"\n      placeholder=\"Enter text...\"\n      formControlName=\"textareaFull\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"3\"\n      [maxLength]=\"20\"\n      [rows]=\"3\"\n      [cols]=\"50\"\n      wrap=\"hard\"\n    ></bb-textarea-ui>\n    <button class=\"btn btn-primary\" (click)=\"reset()\">CLEAR VALUE</button>\n  </div>\n</form>\n", components: [{ type: i2.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
CharCounterShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], CharCounterShowcaseComponent);
export { CharCounterShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-char-counter-ui-showcase',
                    templateUrl: 'char-counter-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhci1jb3VudGVyLXNob3djYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2NoYXItY291bnRlci9zaG93Y2FzZS9jaGFyLWNvdW50ZXItc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvY2hhci1jb3VudGVyL3Nob3djYXNlL2NoYXItY291bnRlci1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7SUFTeEMsNEJBQTRCLFNBQTVCLDRCQUE0QjtJQUd2QyxZQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUMxQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ2xDLFFBQVEsRUFBRSxFQUFFO1lBQ1osa0JBQWtCLEVBQUUsb0JBQW9CO1lBQ3hDLFlBQVksRUFBRSxzQkFBc0I7U0FDckMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUMvQyxvRUFBb0U7WUFDcEUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7Q0FDRixDQUFBOzBIQWxCWSw0QkFBNEI7OEdBQTVCLDRCQUE0QixtRUNYekMsODBDQWtEQTtBRHZDYSw0QkFBNEI7SUFIeEMsWUFBWSxDQUFDO1FBQ1osY0FBYyxFQUFFLElBQUk7S0FDckIsQ0FBQztHQUNXLDRCQUE0QixDQWtCeEM7U0FsQlksNEJBQTRCOzRGQUE1Qiw0QkFBNEI7a0JBUHhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtvQkFDdkMsV0FBVyxFQUFFLHNDQUFzQztpQkFDcEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCYWNrYmFzZURvY3MgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1jaGFyLWNvdW50ZXItdWktc2hvd2Nhc2UnLFxuICB0ZW1wbGF0ZVVybDogJ2NoYXItY291bnRlci1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCcsXG59KVxuQEJhY2tiYXNlRG9jcyh7XG4gIGlzVGhlbWUyU3RhYmxlOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBDaGFyQ291bnRlclNob3djYXNlQ29tcG9uZW50IHtcbiAgdkZvcm06IEZvcm1Hcm91cCB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcikge1xuICAgIHRoaXMudkZvcm0gPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgIHRleHRhcmVhOiAnJyxcbiAgICAgIHRleHRhcmVhQWxtb3N0RnVsbDogJzEyMzQ1Njc4OTAxMjM0NTY3OCcsXG4gICAgICB0ZXh0YXJlYUZ1bGw6ICcxMjM0NTY3ODkwMTIzNDU2Nzg5MCcsXG4gICAgfSk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICBpZiAodGhpcy52Rm9ybSkge1xuICAgICAgY29uc3QgY29udHJvbCA9IHRoaXMudkZvcm0uZ2V0KCd0ZXh0YXJlYUZ1bGwnKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICBjb250cm9sICYmIGNvbnRyb2wucmVzZXQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxmb3JtIFtmb3JtR3JvdXBdPVwidkZvcm1cIj5cbiAgPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS14bFwiPlxuICAgIDxoND5DaGFyIGNvdW50ZXI8L2g0PlxuICAgIDxiYi10ZXh0YXJlYS11aVxuICAgICAgW2lkXT1cIid0ZXh0YXJlYSdcIlxuICAgICAgbGFiZWw9XCJEZXNjcmlwdGlvblwiXG4gICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHRleHQuLi5cIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwidGV4dGFyZWFcIlxuICAgICAgW3Nob3dDaGFyQ291bnRlcl09XCJ0cnVlXCJcbiAgICAgIFttaW5MZW5ndGhdPVwiM1wiXG4gICAgICBbbWF4TGVuZ3RoXT1cIjE2MFwiXG4gICAgICBbcm93c109XCIzXCJcbiAgICAgIFtjb2xzXT1cIjUwXCJcbiAgICAgIHdyYXA9XCJoYXJkXCJcbiAgICA+PC9iYi10ZXh0YXJlYS11aT5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cImJiLWJsb2NrIGJiLWJsb2NrLS14bFwiPlxuICAgIDxoND5DaGFyIGNvdW50ZXIgKGFsbW9zdCBmdWxsKTwvaDQ+XG4gICAgPGJiLXRleHRhcmVhLXVpXG4gICAgICBbaWRdPVwiJ3RleHRhcmVhJ1wiXG4gICAgICBsYWJlbD1cIkRlc2NyaXB0aW9uXCJcbiAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgdGV4dC4uLlwiXG4gICAgICBmb3JtQ29udHJvbE5hbWU9XCJ0ZXh0YXJlYUFsbW9zdEZ1bGxcIlxuICAgICAgW3Nob3dDaGFyQ291bnRlcl09XCJ0cnVlXCJcbiAgICAgIFttaW5MZW5ndGhdPVwiM1wiXG4gICAgICBbbWF4TGVuZ3RoXT1cIjIwXCJcbiAgICAgIFtyb3dzXT1cIjNcIlxuICAgICAgW2NvbHNdPVwiNTBcIlxuICAgICAgd3JhcD1cImhhcmRcIlxuICAgID48L2JiLXRleHRhcmVhLXVpPlxuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLXhsXCI+XG4gICAgPGg0PkNoYXIgY291bnRlciAoZnVsbCk8L2g0PlxuICAgIDxiYi10ZXh0YXJlYS11aVxuICAgICAgW2lkXT1cIid0ZXh0YXJlYSdcIlxuICAgICAgbGFiZWw9XCJEZXNjcmlwdGlvblwiXG4gICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHRleHQuLi5cIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwidGV4dGFyZWFGdWxsXCJcbiAgICAgIFtzaG93Q2hhckNvdW50ZXJdPVwidHJ1ZVwiXG4gICAgICBbbWluTGVuZ3RoXT1cIjNcIlxuICAgICAgW21heExlbmd0aF09XCIyMFwiXG4gICAgICBbcm93c109XCIzXCJcbiAgICAgIFtjb2xzXT1cIjUwXCJcbiAgICAgIHdyYXA9XCJoYXJkXCJcbiAgICA+PC9iYi10ZXh0YXJlYS11aT5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgKGNsaWNrKT1cInJlc2V0KClcIj5DTEVBUiBWQUxVRTwvYnV0dG9uPlxuICA8L2Rpdj5cbjwvZm9ybT5cbiJdfQ==