import { Component } from '@angular/core';
import { Subject, merge, of } from 'rxjs';
import { startWith, mergeMap, map, delay, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/load-button";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@angular/common";
const LOADING_DURATION = 1500;
export class LoadButtonExampleComponent {
    constructor() {
        this.itemsPerPage = 4;
        this.page = 0;
        this.totalItems = 12;
        this.loadRequest = new Subject();
        this.loadProcedure = this.loadRequest.pipe(mergeMap((params) => this.loadMore(params)));
        this.isLoading = merge(this.loadRequest.pipe(map(() => true)), this.loadProcedure.pipe(map(() => false))).pipe(startWith(false));
    }
    onLoadButtonPress(params) {
        this.loadRequest.next(params);
    }
    loadMore(params) {
        console.log('Loading more...');
        return of(params).pipe(delay(LOADING_DURATION), tap(() => {
            this.page = params.from;
        }));
    }
}
LoadButtonExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LoadButtonExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadButtonExampleComponent, selector: "bb-load-button-example-ui", ngImport: i0, template: "<bb-load-button-ui\n  color=\"primary\"\n  [size]=\"itemsPerPage\"\n  [from]=\"page\"\n  [totalCount]=\"totalItems\"\n  [isLoading]=\"isLoading | async\"\n  buttonSize=\"md\"\n  (paramChange)=\"onLoadButtonPress($event)\"\n>\n  <bb-icon-ui name=\"search\" size=\"lg\" cropped></bb-icon-ui>\n  Show more results...\n</bb-load-button-ui>\n", components: [{ type: i1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoadButtonExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-load-button-example-ui',
                    templateUrl: './load-button.example.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1idXR0b24uZXhhbXBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9fZXhhbXBsZS9sb2FkLWJ1dHRvbi9leGFtcGxlcy9sb2FkLWJ1dHRvbi5leGFtcGxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2xvYWQtYnV0dG9uL2V4YW1wbGVzL2xvYWQtYnV0dG9uLmV4YW1wbGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsT0FBTyxFQUFjLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFJdEUsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7QUFNOUIsTUFBTSxPQUFPLDBCQUEwQjtJQUp2QztRQUtFLGlCQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLFNBQUksR0FBRyxDQUFDLENBQUM7UUFDVCxlQUFVLEdBQUcsRUFBRSxDQUFDO1FBRWhCLGdCQUFXLEdBQTRCLElBQUksT0FBTyxFQUFFLENBQUM7UUFDckQsa0JBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FDbkMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQzVDLENBQUM7UUFFRixjQUFTLEdBQXdCLEtBQUssQ0FDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQ3RDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUMxQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQWdCMUI7SUFkQyxpQkFBaUIsQ0FBQyxNQUFzQjtRQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsUUFBUSxDQUFDLE1BQXNCO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUUvQixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQ3BCLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUN2QixHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzt3SEE1QlUsMEJBQTBCOzRHQUExQiwwQkFBMEIsaUVDWnZDLG1WQVlBOzRGREFhLDBCQUEwQjtrQkFKdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxXQUFXLEVBQUUsc0NBQXNDO2lCQUNwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSwgbWVyZ2UsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzdGFydFdpdGgsIG1lcmdlTWFwLCBtYXAsIGRlbGF5LCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG4vLyBQbGVhc2UgcmVwbGFjZSByZWxhdGl2ZSBwYXRoIGltcG9ydHMgZS5nLiAnLi4vKicgd2l0aCAnQGJhY2tiYXNlL3VpLWFuZycuXG5pbXBvcnQgeyBMb2FkTW9yZVBhcmFtcyB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvbG9hZC1idXR0b24nO1xuXG5jb25zdCBMT0FESU5HX0RVUkFUSU9OID0gMTUwMDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItbG9hZC1idXR0b24tZXhhbXBsZS11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2FkLWJ1dHRvbi5leGFtcGxlLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9hZEJ1dHRvbkV4YW1wbGVDb21wb25lbnQge1xuICBpdGVtc1BlclBhZ2UgPSA0O1xuICBwYWdlID0gMDtcbiAgdG90YWxJdGVtcyA9IDEyO1xuXG4gIGxvYWRSZXF1ZXN0OiBTdWJqZWN0PExvYWRNb3JlUGFyYW1zPiA9IG5ldyBTdWJqZWN0KCk7XG4gIGxvYWRQcm9jZWR1cmUgPSB0aGlzLmxvYWRSZXF1ZXN0LnBpcGUoXG4gICAgbWVyZ2VNYXAoKHBhcmFtcykgPT4gdGhpcy5sb2FkTW9yZShwYXJhbXMpKSxcbiAgKTtcblxuICBpc0xvYWRpbmc6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSBtZXJnZShcbiAgICB0aGlzLmxvYWRSZXF1ZXN0LnBpcGUobWFwKCgpID0+IHRydWUpKSxcbiAgICB0aGlzLmxvYWRQcm9jZWR1cmUucGlwZShtYXAoKCkgPT4gZmFsc2UpKSxcbiAgKS5waXBlKHN0YXJ0V2l0aChmYWxzZSkpO1xuXG4gIG9uTG9hZEJ1dHRvblByZXNzKHBhcmFtczogTG9hZE1vcmVQYXJhbXMpIHtcbiAgICB0aGlzLmxvYWRSZXF1ZXN0Lm5leHQocGFyYW1zKTtcbiAgfVxuXG4gIGxvYWRNb3JlKHBhcmFtczogTG9hZE1vcmVQYXJhbXMpIHtcbiAgICBjb25zb2xlLmxvZygnTG9hZGluZyBtb3JlLi4uJyk7XG5cbiAgICByZXR1cm4gb2YocGFyYW1zKS5waXBlKFxuICAgICAgZGVsYXkoTE9BRElOR19EVVJBVElPTiksXG4gICAgICB0YXAoKCkgPT4ge1xuICAgICAgICB0aGlzLnBhZ2UgPSBwYXJhbXMuZnJvbTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiIsIjxiYi1sb2FkLWJ1dHRvbi11aVxuICBjb2xvcj1cInByaW1hcnlcIlxuICBbc2l6ZV09XCJpdGVtc1BlclBhZ2VcIlxuICBbZnJvbV09XCJwYWdlXCJcbiAgW3RvdGFsQ291bnRdPVwidG90YWxJdGVtc1wiXG4gIFtpc0xvYWRpbmddPVwiaXNMb2FkaW5nIHwgYXN5bmNcIlxuICBidXR0b25TaXplPVwibWRcIlxuICAocGFyYW1DaGFuZ2UpPVwib25Mb2FkQnV0dG9uUHJlc3MoJGV2ZW50KVwiXG4+XG4gIDxiYi1pY29uLXVpIG5hbWU9XCJzZWFyY2hcIiBzaXplPVwibGdcIiBjcm9wcGVkPjwvYmItaWNvbi11aT5cbiAgU2hvdyBtb3JlIHJlc3VsdHMuLi5cbjwvYmItbG9hZC1idXR0b24tdWk+XG4iXX0=