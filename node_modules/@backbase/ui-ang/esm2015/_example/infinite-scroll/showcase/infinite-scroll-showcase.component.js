import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/infinite-scroll";
import * as i2 from "@backbase/ui-ang/amount";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@angular/common";
let InfiniteScrollShowcaseComponent = class InfiniteScrollShowcaseComponent {
    constructor() {
        this.items = [1, 2, 3, 4];
        this.complete = false;
        this.loading = false;
        this.page = 0;
    }
    loadMore() {
        if (!this.loading) {
            this.loading = true;
            this.page = this.page + 1;
            window.setTimeout(() => {
                this.items = Array.from({ length: this.page * 4 + 4 }).map((_, i) => i + 1);
                this.loading = false;
                this.complete = this.page >= 4;
            }, 1000);
        }
    }
};
InfiniteScrollShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InfiniteScrollShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InfiniteScrollShowcaseComponent, selector: "bb-infinite-scroll-ui-showcase", ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"card\">\n      <div class=\"bb-infinite-scroll-container card-body\">\n        <bb-infinite-scroll-ui\n          class=\"bb-infinite-scroll\"\n          (scrollEnd)=\"loadMore()\"\n          [disableScrollEnd]=\"complete || loading\"\n        >\n          <div\n            class=\"bb-list bb-subtitle bb-list--density-sm\"\n            [attr.aria-busy]=\"loading\"\n            [class.bb-list--infinite]=\"!complete\"\n          >\n            <div *ngFor=\"let item of items\" class=\"bb-list__item\">\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\">Some kind of data:</div>\n                <bb-amount-ui\n                  [amount]=\"item\"\n                  [currency]=\"'USD'\"\n                  class=\"bb-stack__item bb-stack__item--push-right\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"loading\" class=\"bb-block bb-block--md\">\n            <bb-loading-indicator-ui loaderSize=\"sm\"></bb-loading-indicator-ui>\n          </div>\n          <div *ngIf=\"complete\" class=\"bb-text-align-center\">All items loaded</div>\n        </bb-infinite-scroll-ui>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
InfiniteScrollShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], InfiniteScrollShowcaseComponent);
export { InfiniteScrollShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-infinite-scroll-ui-showcase',
                    templateUrl: './infinite-scroll-showcase.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLXNob3djYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2luZmluaXRlLXNjcm9sbC9zaG93Y2FzZS9pbmZpbml0ZS1zY3JvbGwtc2hvd2Nhc2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvaW5maW5pdGUtc2Nyb2xsL3Nob3djYXNlL2luZmluaXRlLXNjcm9sbC1zaG93Y2FzZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztJQVN4QywrQkFBK0IsU0FBL0IsK0JBQStCOztRQUMxQyxVQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFDUixTQUFJLEdBQUcsQ0FBQyxDQUFDO0tBYWxCO0lBWEMsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDNUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ1Y7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs2SEFqQlksK0JBQStCO2lIQUEvQiwrQkFBK0Isc0VDVjVDLDZ3Q0FrQ0E7QUR4QmEsK0JBQStCO0lBSDNDLFlBQVksQ0FBQztRQUNaLGNBQWMsRUFBRSxJQUFJO0tBQ3JCLENBQUM7R0FDVywrQkFBK0IsQ0FpQjNDO1NBakJZLCtCQUErQjs0RkFBL0IsK0JBQStCO2tCQVAzQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQ0FBZ0M7b0JBQzFDLFdBQVcsRUFBRSwyQ0FBMkM7aUJBQ3pEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYWNrYmFzZURvY3MgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1pbmZpbml0ZS1zY3JvbGwtdWktc2hvd2Nhc2UnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5maW5pdGUtc2Nyb2xsLXNob3djYXNlLmNvbXBvbmVudC5odG1sJyxcbn0pXG5AQmFja2Jhc2VEb2NzKHtcbiAgaXNUaGVtZTJTdGFibGU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIEluZmluaXRlU2Nyb2xsU2hvd2Nhc2VDb21wb25lbnQge1xuICBpdGVtcyA9IFsxLCAyLCAzLCA0XTtcbiAgY29tcGxldGUgPSBmYWxzZTtcbiAgbG9hZGluZyA9IGZhbHNlO1xuICBwcml2YXRlIHBhZ2UgPSAwO1xuXG4gIGxvYWRNb3JlKCkge1xuICAgIGlmICghdGhpcy5sb2FkaW5nKSB7XG4gICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlICsgMTtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5pdGVtcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IHRoaXMucGFnZSAqIDQgKyA0IH0pLm1hcCgoXywgaSkgPT4gaSArIDEpO1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb21wbGV0ZSA9IHRoaXMucGFnZSA+PSA0O1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtNlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItaW5maW5pdGUtc2Nyb2xsLWNvbnRhaW5lciBjYXJkLWJvZHlcIj5cbiAgICAgICAgPGJiLWluZmluaXRlLXNjcm9sbC11aVxuICAgICAgICAgIGNsYXNzPVwiYmItaW5maW5pdGUtc2Nyb2xsXCJcbiAgICAgICAgICAoc2Nyb2xsRW5kKT1cImxvYWRNb3JlKClcIlxuICAgICAgICAgIFtkaXNhYmxlU2Nyb2xsRW5kXT1cImNvbXBsZXRlIHx8IGxvYWRpbmdcIlxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJiYi1saXN0IGJiLXN1YnRpdGxlIGJiLWxpc3QtLWRlbnNpdHktc21cIlxuICAgICAgICAgICAgW2F0dHIuYXJpYS1idXN5XT1cImxvYWRpbmdcIlxuICAgICAgICAgICAgW2NsYXNzLmJiLWxpc3QtLWluZmluaXRlXT1cIiFjb21wbGV0ZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtc1wiIGNsYXNzPVwiYmItbGlzdF9faXRlbVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmItc3RhY2tcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmItc3RhY2tfX2l0ZW1cIj5Tb21lIGtpbmQgb2YgZGF0YTo8L2Rpdj5cbiAgICAgICAgICAgICAgICA8YmItYW1vdW50LXVpXG4gICAgICAgICAgICAgICAgICBbYW1vdW50XT1cIml0ZW1cIlxuICAgICAgICAgICAgICAgICAgW2N1cnJlbmN5XT1cIidVU0QnXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYmItc3RhY2tfX2l0ZW0gYmItc3RhY2tfX2l0ZW0tLXB1c2gtcmlnaHRcIlxuICAgICAgICAgICAgICAgID48L2JiLWFtb3VudC11aT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2ICpuZ0lmPVwibG9hZGluZ1wiIGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLW1kXCI+XG4gICAgICAgICAgICA8YmItbG9hZGluZy1pbmRpY2F0b3ItdWkgbG9hZGVyU2l6ZT1cInNtXCI+PC9iYi1sb2FkaW5nLWluZGljYXRvci11aT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2ICpuZ0lmPVwiY29tcGxldGVcIiBjbGFzcz1cImJiLXRleHQtYWxpZ24tY2VudGVyXCI+QWxsIGl0ZW1zIGxvYWRlZDwvZGl2PlxuICAgICAgICA8L2JiLWluZmluaXRlLXNjcm9sbC11aT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19