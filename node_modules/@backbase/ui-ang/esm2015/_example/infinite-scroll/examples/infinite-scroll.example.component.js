import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/infinite-scroll";
import * as i2 from "@backbase/ui-ang/loading-indicator";
import * as i3 from "@angular/common";
export class InfiniteScrollExampleComponent {
    constructor() {
        this.items = [1, 2, 3, 4];
        this.complete = false;
        this.loading = false;
        this.maxCount = 42;
    }
    loadMore() {
        if (!this.loading) {
            this.loading = true;
            window.setTimeout(() => {
                this.loading = false;
                this.complete = this.items.length >= this.maxCount;
                this.generateMore(5);
            }, 1000);
        }
    }
    generateMore(count) {
        const length = Math.max(0, Math.min(this.maxCount, this.items.length + count) -
            this.items.length);
        const start = 1 + (this.items[this.items.length - 1] || 0);
        console.log(start, length);
        this.items = [
            ...this.items,
            ...new Array(length).fill(0).map((_, index) => start + index),
        ];
    }
}
InfiniteScrollExampleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollExampleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InfiniteScrollExampleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InfiniteScrollExampleComponent, selector: "bb-infinite-scroll-example-ui", ngImport: i0, template: "<div style=\"max-height: 320px; overflow: scroll\">\n  <bb-infinite-scroll-ui\n    [disableScrollEnd]=\"complete || loading\"\n    (scrollEnd)=\"loadMore()\"\n  >\n    <ul>\n      <li *ngFor=\"let item of items\">Item {{ item }}</li>\n    </ul>\n    <p *ngIf=\"loading\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </p>\n    <p *ngIf=\"complete\">All items loaded</p>\n  </bb-infinite-scroll-ui>\n</div>\n", components: [{ type: i1.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InfiniteScrollExampleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-infinite-scroll-example-ui',
                    templateUrl: './infinite-scroll.example.component.html',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLmV4YW1wbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvX2V4YW1wbGUvaW5maW5pdGUtc2Nyb2xsL2V4YW1wbGVzL2luZmluaXRlLXNjcm9sbC5leGFtcGxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL19leGFtcGxlL2luZmluaXRlLXNjcm9sbC9leGFtcGxlcy9pbmZpbml0ZS1zY3JvbGwuZXhhbXBsZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztBQU0xQyxNQUFNLE9BQU8sOEJBQThCO0lBSjNDO1FBS0UsVUFBSyxHQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRU4sYUFBUSxHQUFHLEVBQUUsQ0FBQztLQTZCekI7SUEzQkMsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBRXBCLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztnQkFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUVuRCxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNWO0lBQ0gsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFhO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3JCLENBQUMsRUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUNwQixDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUUzRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1gsR0FBRyxJQUFJLENBQUMsS0FBSztZQUNiLEdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDOUQsQ0FBQztJQUNKLENBQUM7OzRIQWpDVSw4QkFBOEI7Z0hBQTlCLDhCQUE4QixxRUNOM0MsNGFBY0E7NEZEUmEsOEJBQThCO2tCQUoxQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwrQkFBK0I7b0JBQ3pDLFdBQVcsRUFBRSwwQ0FBMEM7aUJBQ3hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWluZmluaXRlLXNjcm9sbC1leGFtcGxlLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2luZmluaXRlLXNjcm9sbC5leGFtcGxlLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgSW5maW5pdGVTY3JvbGxFeGFtcGxlQ29tcG9uZW50IHtcbiAgaXRlbXM6IG51bWJlcltdID0gWzEsIDIsIDMsIDRdO1xuICBjb21wbGV0ZSA9IGZhbHNlO1xuICBsb2FkaW5nID0gZmFsc2U7XG5cbiAgcHJvdGVjdGVkIG1heENvdW50ID0gNDI7XG5cbiAgbG9hZE1vcmUoKSB7XG4gICAgaWYgKCF0aGlzLmxvYWRpbmcpIHtcbiAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG5cbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tcGxldGUgPSB0aGlzLml0ZW1zLmxlbmd0aCA+PSB0aGlzLm1heENvdW50O1xuXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVNb3JlKDUpO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG5cbiAgZ2VuZXJhdGVNb3JlKGNvdW50OiBudW1iZXIpIHtcbiAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChcbiAgICAgIDAsXG4gICAgICBNYXRoLm1pbih0aGlzLm1heENvdW50LCB0aGlzLml0ZW1zLmxlbmd0aCArIGNvdW50KSAtXG4gICAgICAgIHRoaXMuaXRlbXMubGVuZ3RoLFxuICAgICk7XG4gICAgY29uc3Qgc3RhcnQgPSAxICsgKHRoaXMuaXRlbXNbdGhpcy5pdGVtcy5sZW5ndGggLSAxXSB8fCAwKTtcblxuICAgIGNvbnNvbGUubG9nKHN0YXJ0LCBsZW5ndGgpO1xuICAgIHRoaXMuaXRlbXMgPSBbXG4gICAgICAuLi50aGlzLml0ZW1zLFxuICAgICAgLi4ubmV3IEFycmF5KGxlbmd0aCkuZmlsbCgwKS5tYXAoKF8sIGluZGV4KSA9PiBzdGFydCArIGluZGV4KSxcbiAgICBdO1xuICB9XG59XG4iLCI8ZGl2IHN0eWxlPVwibWF4LWhlaWdodDogMzIwcHg7IG92ZXJmbG93OiBzY3JvbGxcIj5cbiAgPGJiLWluZmluaXRlLXNjcm9sbC11aVxuICAgIFtkaXNhYmxlU2Nyb2xsRW5kXT1cImNvbXBsZXRlIHx8IGxvYWRpbmdcIlxuICAgIChzY3JvbGxFbmQpPVwibG9hZE1vcmUoKVwiXG4gID5cbiAgICA8dWw+XG4gICAgICA8bGkgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIj5JdGVtIHt7IGl0ZW0gfX08L2xpPlxuICAgIDwvdWw+XG4gICAgPHAgKm5nSWY9XCJsb2FkaW5nXCI+XG4gICAgICA8YmItbG9hZGluZy1pbmRpY2F0b3ItdWk+PC9iYi1sb2FkaW5nLWluZGljYXRvci11aT5cbiAgICA8L3A+XG4gICAgPHAgKm5nSWY9XCJjb21wbGV0ZVwiPkFsbCBpdGVtcyBsb2FkZWQ8L3A+XG4gIDwvYmItaW5maW5pdGUtc2Nyb2xsLXVpPlxuPC9kaXY+XG4iXX0=