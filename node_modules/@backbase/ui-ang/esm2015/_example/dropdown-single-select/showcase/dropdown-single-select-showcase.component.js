import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/dropdown-single-select";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@angular/common";
const frequencies = [
    {
        value: 'ONCE',
        every: 1,
    },
    {
        value: 'DAILY',
        every: 1,
    },
    {
        value: 'WEEKLY',
        every: 1,
    },
    {
        value: 'BIWEEKLY',
        every: 1,
    },
    {
        value: 'MONTHLY',
        every: 1,
    },
    {
        value: 'QUARTERLY',
        every: 1,
    },
    {
        value: 'YEARLY',
        every: 1,
    },
];
let DropdownSingleSelectShowcaseComponent = class DropdownSingleSelectShowcaseComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.stringDropdownOptions = ['Option One', 'Option Two', 'Option Three'];
        this.objectDropdownOptions = [{ title: 'Option One' }, { title: 'Option Two' }, { title: 'Option Three' }];
        this.frequencies = frequencies;
        this.modelDropdownOptions = [
            { model: { displayNames: ['Selection A'], value: 'A' } },
            { model: { displayNames: ['Selection B'], value: 'B' } },
            { model: { displayNames: ['Selection C'], value: 'C' } },
        ];
        this.assetClassesOptions = [
            { name: 'Stock', id: 'stock' },
            { name: 'Bond', id: 'bonds' },
            { name: ' Liquid Assets', id: 'liquidassets' },
            { name: 'Real Estate', id: 'realestate' },
            { name: 'Cash', id: 'cash' },
        ];
        this.dropdownMenuOptions = [
            { name: 'google', url: 'https://google.com' },
            { name: 'twitter', url: 'https://twitter.com' },
            { name: 'facebook', url: 'https://www.facebook.com' },
        ];
        this.vForm = this.formBuilder.group({
            stringDropdownOptions: [this.stringDropdownOptions[0], Validators.required],
            objectDropdownOptions: [this.objectDropdownOptions[0], Validators.required],
            modelSingleSelect: [undefined, Validators.required],
            customSingleSelect: undefined,
            frequency: [
                {
                    value: 'ONCE',
                    every: 1,
                },
            ],
            i18nSingleSelect: ['one'],
            modelSingleSelectDisabled: [{ value: this.modelDropdownOptions[0], disabled: true }, Validators.required],
        });
    }
    isFieldValid(fieldName) {
        const control = this.getControl(fieldName);
        if (control) {
            return control.valid || control.untouched;
        }
        return undefined;
    }
    getControl(fieldName) {
        if (this.vForm) {
            return this.vForm.controls[fieldName];
        }
        return undefined;
    }
    compareByValue(p1, p2) {
        if (!p1 || !p2)
            return;
        return p1.value === p2.value;
    }
    hasRequiredError(field) {
        const fieldControl = this.getControl(field);
        if (!fieldControl || !fieldControl.errors) {
            return;
        }
        return fieldControl.errors.required;
    }
};
DropdownSingleSelectShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
DropdownSingleSelectShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownSingleSelectShowcaseComponent, selector: "bb-dropdown-single-select-ui-showcase", ngImport: i0, template: "<form [formGroup]=\"vForm\">\n  <div class=\"mb-3\">\n    <h4>Default with list of string as options</h4>\n    <bb-dropdown-single-select-ui\n      id=\"dropdownSingleSelect\"\n      [options]=\"stringDropdownOptions\"\n      formControlName=\"stringDropdownOptions\"\n      [required]=\"false\"\n      [attr.data-role]=\"'dropdown-single-select'\"\n    ></bb-dropdown-single-select-ui>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Default with list of object as options</h4>\n    <bb-dropdown-single-select-ui\n      id=\"dropdownSingleSelectObject\"\n      [options]=\"objectDropdownOptions\"\n      displayAttributePath=\"title\"\n      formControlName=\"objectDropdownOptions\"\n      [required]=\"false\"\n      [attr.data-role]=\"'dropdown-single-select'\"\n    ></bb-dropdown-single-select-ui>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>With a label</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectWithLabel\"\n        label=\"Label\"\n        [options]=\"stringDropdownOptions\"\n        formControlName=\"stringDropdownOptions\"\n        [required]=\"false\"\n        [attr.data-role]=\"'dropdown-single-select-with-label'\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Translatable options</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectI18n\"\n        displayAttributePath=\"label\"\n        formControlName=\"i18nSingleSelect\"\n      >\n        <bb-dropdown-single-select-option-ui value=\"one\" label=\"Option One\"></bb-dropdown-single-select-option-ui>\n        <bb-dropdown-single-select-option-ui value=\"two\" label=\"Option Two\"></bb-dropdown-single-select-option-ui>\n      </bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Validation error</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectFromModel\"\n        [options]=\"modelDropdownOptions\"\n        formControlName=\"modelSingleSelect\"\n        displayAttributePath=\"model.displayNames[0]\"\n        [required]=\"true\"\n        placeholder=\"- Select An Item -\"\n        [attr.data-role]=\"'dropdown-single-select-with-validation'\"\n      ></bb-dropdown-single-select-ui>\n      <bb-input-validation-message-ui [showErrors]=\"!isFieldValid('modelSingleSelect')\">\n        <span *ngIf=\"hasRequiredError('modelSingleSelect')\"> Field is required. </span>\n      </bb-input-validation-message-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>Disabled</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectDisabled\"\n        [options]=\"modelDropdownOptions\"\n        formControlName=\"modelSingleSelectDisabled\"\n        displayAttributePath=\"model.displayNames[0]\"\n        [required]=\"true\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>With placeholder</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectPlaceholder\"\n        [options]=\"assetClassesOptions\"\n        placeholder=\"All\"\n        displayAttributePath=\"name\"\n        formControlName=\"customSingleSelect\"\n        [attr.data-role]=\"'dropdown-single-select-with-placeholder'\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"mb-3\">\n    <h4>With default option as placeholder</h4>\n    <div class=\"form-group\">\n      <bb-dropdown-single-select-ui\n        id=\"dropdownSingleSelectPlaceholderDefault\"\n        [options]=\"assetClassesOptions\"\n        [defaultOptionAsPlaceholder]=\"true\"\n        placeholder=\"All\"\n        displayAttributePath=\"name\"\n        formControlName=\"customSingleSelect\"\n      ></bb-dropdown-single-select-ui>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"form-group col-12 col-md-4 mb-4\">\n      <bb-dropdown-single-select-ui\n        [compareWithFn]=\"compareByValue\"\n        label=\"Frequency\"\n        displayAttributePath=\"value\"\n        formControlName=\"frequency\"\n        data-role=\"frequency-selector\"\n        ><bb-dropdown-single-select-option-ui\n          *ngFor=\"let frequency of frequencies\"\n          class=\"text-capitalize\"\n          [value]=\"frequency\"\n          [label]=\"frequency.value\"\n        ></bb-dropdown-single-select-option-ui>\n      </bb-dropdown-single-select-ui>\n    </div>\n  </div>\n</form>\n", components: [{ type: i2.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
DropdownSingleSelectShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], DropdownSingleSelectShowcaseComponent);
export { DropdownSingleSelectShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownSingleSelectShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-single-select-ui-showcase',
                    templateUrl: './dropdown-single-select-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,