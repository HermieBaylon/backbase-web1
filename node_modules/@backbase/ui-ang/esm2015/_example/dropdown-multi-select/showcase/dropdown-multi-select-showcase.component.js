import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { BackbaseDocs } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/dropdown-multi-select";
import * as i3 from "@angular/common";
import * as i4 from "@backbase/ui-ang/button";
let DropdownMultiSelectShowcaseComponent = class DropdownMultiSelectShowcaseComponent {
    constructor(fb) {
        this.fb = fb;
        this.flatListDropdownMultiSelect = new FormControl('');
        this.parentChildDropdownMultiSelect = new FormControl('');
        this.disabledDropdownMultiSelect = new FormControl('');
        this.options = [
            { value: 'one', label: 'One' },
            { value: 'two', label: 'Two' },
            { value: 'three', label: 'Three' },
            { value: 'four', label: 'Four' },
            { value: 'five', label: 'Five' },
            { value: 'eleven', label: 'Eleven' },
        ];
        this.parentChildOptions = [];
        this.form = this.fb.group({
            categories: new FormControl(),
        });
    }
    resetForm() {
        this.form.reset();
    }
};
DropdownMultiSelectShowcaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
DropdownMultiSelectShowcaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMultiSelectShowcaseComponent, selector: "bb-dropdown-multi-select-ui-showcase", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <h4>Default usage</h4>\n  <p>\n    <small\n      >Aria-labelledby used with the header bellow. Screen readers should read out both the placeholder and the content\n      of the header bellow</small\n    >\n  </p>\n  <h5 id=\"D231FE2E-A39B-4EE3-9937-751C955C4D2C\">Select a number</h5>\n  <bb-dropdown-multi-select-ui\n    [aria-labelledby]=\"'D231FE2E-A39B-4EE3-9937-751C955C4D2C'\"\n    [attr.data-role]=\"'dropdown-default'\"\n    [placeholder]=\"'No numbers selected'\"\n    [filtering]=\"true\"\n    [required]=\"true\"\n  >\n    <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n    </bb-dropdown-multi-select-option-ui>\n  </bb-dropdown-multi-select-ui>\n</div>\n<div class=\"bb-block bb-block--lg\">\n  <h4>Default usage with inline listbox header</h4>\n  <p>\n    <small\n      >Aria-labelledby used with the header bellow. Screen readers should read out both the placeholder and the content\n      of the header bellow.</small\n    >\n  </p>\n  <p>\n    <small>\n      Additional inline header provided for the inner listbox. Screen readers should read out the inline header togheter\n      with the first selected item. Voice over will fail doing so, while NVDA behaves as expected.\n    </small>\n  </p>\n  <h5 id=\"D231FE2E-A39B-4EE3-9937-751C955C4D2D\">Select another number</h5>\n  <bb-dropdown-multi-select-ui\n    [aria-labelledby]=\"'D231FE2E-A39B-4EE3-9937-751C955C4D2D'\"\n    [dropdownHeaderText]=\"'Ordered numbers'\"\n  >\n    <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n    </bb-dropdown-multi-select-option-ui>\n  </bb-dropdown-multi-select-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"D231FE2E-A39B-4EE3-9937-751C955C4D2DD\">Using embed label</h4>\n  <p>\n    <small\n      >Label content is used in order to indicate information about the control. Screen readers should read out both the\n      placeholder and the label bellow.</small\n    >\n  </p>\n  <bb-dropdown-multi-select-ui [label]=\"'Select another number'\" [placeholder]=\"''\">\n    <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n    </bb-dropdown-multi-select-option-ui>\n  </bb-dropdown-multi-select-ui>\n</div>\n\n<div class=\"bb-block bb-block--lg\">\n  <h4 id=\"B4DD9EEF-2963-47A9-B2F0-374BC217DA9E\">Disabled control</h4>\n  <bb-dropdown-multi-select-ui\n    [aria-labelledby]=\"'B4DD9EEF-2963-47A9-B2F0-374BC217DA9E'\"\n    [formControl]=\"disabledDropdownMultiSelect\"\n    [disabled]=\"true\"\n    [attr.data-role]=\"'dropdown-disabled'\"\n  >\n  </bb-dropdown-multi-select-ui>\n</div>\n\n<div [formGroup]=\"form\">\n  <h4>Using reactive form control</h4>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-dropdown-multi-select-ui\n      formControlName=\"categories\"\n      [required]=\"true\"\n      data-role=\"categories-filter\"\n      placeholder=\"\u2013 select a category \u2013\"\n      label=\"Category\"\n    >\n      <bb-dropdown-multi-select-option-ui *ngFor=\"let option of options\" [label]=\"option.label\" [value]=\"option.value\">\n      </bb-dropdown-multi-select-option-ui>\n    </bb-dropdown-multi-select-ui>\n  </div>\n  <div class=\"bb-button-bar\">\n    <button bbButton (click)=\"resetForm()\" class=\"bb-button-bar__button\">reset form</button>\n  </div>\n</div>\n", components: [{ type: i2.DropdownMultiSelectComponent, selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i2.DropdownMultiSelectOptionComponent, selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
DropdownMultiSelectShowcaseComponent = __decorate([
    BackbaseDocs({
        isTheme2Stable: true,
    })
], DropdownMultiSelectShowcaseComponent);
export { DropdownMultiSelectShowcaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectShowcaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-multi-select-ui-showcase',
                    templateUrl: 'dropdown-multi-select-showcase.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; } });
//# sourceMappingURL=data:application/json;base64,