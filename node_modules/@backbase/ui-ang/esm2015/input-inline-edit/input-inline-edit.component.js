import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, HostListener, Input, Output, } from '@angular/core';
import { FormControl, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { defaultAriaLabels, defaultTooltips } from './input-inline-edit.model';
import { idListAttr } from '@backbase/ui-ang/util';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@backbase/ui-ang/services";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
import * as i9 from "@backbase/ui-ang/tooltip-directive";
import * as i10 from "@angular/forms";
export var InputInlineEditState;
(function (InputInlineEditState) {
    InputInlineEditState[InputInlineEditState["IDLE"] = 0] = "IDLE";
    InputInlineEditState[InputInlineEditState["LOADING"] = 1] = "LOADING";
    InputInlineEditState[InputInlineEditState["EDITING"] = 2] = "EDITING";
})(InputInlineEditState || (InputInlineEditState = {}));
/**
 * @name InputInlineEditComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that enables inline input editing.
 */
export class InputInlineEditComponent extends InputBaseComponent {
    constructor(cd, deprecationsService, domAttributesService) {
        super(cd, deprecationsService);
        this.domAttributesService = domAttributesService;
        this._state = InputInlineEditState.IDLE;
        /**
         * Emit on edit state changes
         */
        this.stateChange = new EventEmitter();
        /**
         * Flag represents visibility of edit button
         *
         * @default: true
         */
        this.canEdit = true;
        /**
         * Applies additional loading state for edit flow
         *
         * @default: false
         */
        this.hasLoadingState = false;
        /**
         * The maxLength for the text input.
         */
        this.maxLength = Infinity;
        /**
         * The minLength for the text input.
         */
        this.minLength = 0;
        /**
         * Whether the text input should be auto-focused when shown.
         */
        this.autofocus = false;
        /**
         * The event that's fired after on Cancel.
         */
        this.cancel = new EventEmitter();
        /**
         * The event that's fired after on Accept.
         */
        this.accept = new EventEmitter();
        /**
         * string for aria label on Accept button
         */
        this.ariaLabelAccept = defaultAriaLabels.accept;
        /**
         * string for aria label on Cancel button
         */
        this.ariaLabelCancel = defaultAriaLabels.cancel;
        /**
         * string for aria label on Edit button
         */
        this.ariaLabelEdit = defaultAriaLabels.edit;
        /**
         * string for tooltip on Accept button
         */
        this.tooltipAccept = defaultTooltips.accept;
        /**
         * string for tooltip on Cancel button
         */
        this.tooltipCancel = defaultTooltips.cancel;
        /**
         * string for tooltip on Edit button
         */
        this.tooltipEdit = defaultTooltips.edit;
        /**
         * Utility function for use in template
         */
        this.idListAttr = idListAttr;
        this.validationMessagesId = this.domAttributesService.generateId();
    }
    /**
     * State for inline edit
     */
    set state(value) {
        this._state = value;
        if (this.vForm && value === InputInlineEditState.IDLE) {
            this.vForm.controls.inputInline.setValue(this._inputText);
        }
    }
    /**
     * string for editing
     */
    set inputText(value) {
        var _a;
        this._inputText = value;
        (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls.inputInline.setValue(this._inputText);
    }
    get inputText() {
        return this._inputText;
    }
    ngAfterContentInit() {
        const validators = [Validators.maxLength(this.maxLength), Validators.minLength(this.minLength)];
        if (this.required) {
            validators.push(Validators.required);
        }
        if (this.pattern) {
            validators.push(Validators.pattern(this.pattern));
        }
        if (this.minValue) {
            validators.push(Validators.min(this.minValue));
        }
        if (this.maxValue) {
            validators.push(Validators.max(this.maxValue));
        }
        this.vForm = new FormGroup({
            inputInline: new FormControl(this._inputText, Validators.compose(validators)),
        });
    }
    writeValue(inputValue) {
        if (typeof inputValue === 'string') {
            this._inputText = inputValue;
        }
        super.writeValue(inputValue);
    }
    onEdit(event) {
        event.stopPropagation();
        this.updateState(InputInlineEditState.EDITING);
    }
    onCancel(event) {
        var _a;
        if (event) {
            event.stopPropagation();
        }
        (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls.inputInline.setValue(this._inputText);
        this.updateState(InputInlineEditState.IDLE);
        this.cancel.emit();
    }
    get isLoading() {
        return this._state === InputInlineEditState.LOADING;
    }
    get editMode() {
        return this._state === InputInlineEditState.EDITING;
    }
    get isIdleMode() {
        return this._state === InputInlineEditState.IDLE;
    }
    /**
     * Emits the updated value from input
     *
     * If the {@link InputInlineEditComponent.hasLoadingState } set to true -> the state is not changed,
     * as component state should be updated from outside, otherwise the value will be updated with the
     * new one and state will be switched to `IDLE`
     *
     */
    onAccept() {
        const newString = this.vForm ? this.vForm.controls.inputInline.value : '';
        if (!this.hasLoadingState) {
            this.updateState(InputInlineEditState.IDLE);
            this._inputText = newString;
            this.onValueChange(newString);
        }
        this.accept.emit(newString);
    }
    hasError(type) {
        const fieldControl = this.vForm ? this.vForm.controls.inputInline : null;
        if (!fieldControl || !fieldControl.errors) {
            return undefined;
        }
        return type ? fieldControl.errors[type] : fieldControl.errors;
    }
    onKeydownHandler(evt) {
        if (this.editMode) {
            this.onCancel();
        }
    }
    updateState(value) {
        this._state = value;
        this.stateChange.emit(value);
    }
}
InputInlineEditComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }, { token: i2.DomAttributesService }], target: i0.ɵɵFactoryTarget.Component });
InputInlineEditComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputInlineEditComponent, selector: "bb-input-inline-edit-ui", inputs: { state: "state", canEdit: "canEdit", hasLoadingState: "hasLoadingState", inputInlineTemplate: "inputInlineTemplate", inputText: "inputText", maxLength: "maxLength", minLength: "minLength", maxValue: "maxValue", minValue: "minValue", autofocus: "autofocus", ariaLabelAccept: "ariaLabelAccept", ariaLabelCancel: "ariaLabelCancel", ariaLabelEdit: "ariaLabelEdit", tooltipAccept: "tooltipAccept", tooltipCancel: "tooltipCancel", tooltipEdit: "tooltipEdit", autocomplete: "autocomplete", pattern: "pattern", hint: "hint" }, outputs: { stateChange: "stateChange", cancel: "cancel", accept: "accept" }, host: { listeners: { "document:keydown.escape": "onKeydownHandler($event)" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputInlineEditComponent),
            multi: true,
        },
    ], usesInheritance: true, ngImport: i0, template: "<div class=\"bb-input-inline-edit-ui\">\n  <ng-container *ngIf=\"isIdleMode; else editingState\">\n    <div class=\"bb-stack bb-input-inline-edit-ui__idle-wrapper\">\n      <ng-container\n        *ngTemplateOutlet=\"inputInlineTemplate ? inputInlineTemplate : defaultInlineTemplate; context: this\"\n      >\n      </ng-container>\n      <ng-template #defaultInlineTemplate>\n        <span class=\"bb-stack__item bb-stack__item--spacing-none\" data-role=\"inline-edit-text\">\n          {{ inputText }}\n        </span>\n      </ng-template>\n\n      <button\n        *ngIf=\"canEdit\"\n        bbButton\n        class=\"bb-stack__item bb-stack__item--no-shrink\"\n        (click)=\"onEdit($event)\"\n        [attr.aria-describedby]=\"ariaDescribedby\"\n        [attr.aria-label]=\"ariaLabelEdit\"\n        [attr.aria-labelledby]=\"ariaLabelledby\"\n        color=\"link-dark\"\n        [attr.data-role]=\"'inline-edit-btn'\"\n        [circle]=\"true\"\n        type=\"button\"\n        buttonSize=\"sm\"\n        [bbTooltip]=\"tooltipEdit\"\n        container=\"body\"\n        triggers=\"hover focus\"\n        placement=\"auto\"\n      >\n        <bb-icon-ui class=\"bb-text-support\" name=\"edit\"></bb-icon-ui>\n      </button>\n    </div>\n  </ng-container>\n  <ng-template #editingState>\n    <div class=\"form-group\">\n      <form [formGroup]=\"vForm\" (ngSubmit)=\"!hasError() && onAccept()\">\n        <bb-input-text-ui\n          [attr.data-role]=\"'inline-edit-input'\"\n          label=\"{{ label }}\"\n          formControlName=\"inputInline\"\n          [attr.aria-autocomplete]=\"ariaAutocomplete\"\n          [attr.aria-controls]=\"ariaControls\"\n          [attr.aria-labelledby]=\"ariaLabelledby\"\n          [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n          [attr.aria-expanded]=\"ariaExpanded\"\n          [attr.aria-activedescendant]=\"ariaActivedescendant\"\n          [attr.role]=\"role\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-owns]=\"ariaOwns\"\n          [required]=\"required\"\n          [readonly]=\"readonly\"\n          [maxLength]=\"maxLength\"\n          [minLength]=\"minLength\"\n          [autofocus]=\"true\"\n          [ngClass]=\"inputClassName\"\n          [attr.size]=\"size\"\n          (click)=\"$event.stopPropagation()\"\n          (blur)=\"onBlur($event)\"\n          id=\"{{ id }}\"\n          [autocomplete]=\"autocomplete\"\n        >\n        </bb-input-text-ui>\n        <div class=\"bb-stack bb-stack--align-top bb-stack--density-md\">\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <div class=\"bb-subtitle bb-text-support\" data-role=\"inline-edit-hint\" *ngIf=\"hint && !hasError()\">\n              {{ hint }}\n            </div>\n            <bb-input-validation-message-ui [showErrors]=\"hasError()\" [id]=\"validationMessagesId\">\n              <div\n                *ngIf=\"hasError('maxlength')\"\n                i18n=\"Max Length Error|String is more than 'maxLength' characters @@input-inline-edit-ui.maxLengthError\"\n              >\n                Insert max {{ maxLength }} characters\n              </div>\n              <div\n                *ngIf=\"hasError('minlength')\"\n                i18n=\"Min Length Error|String is less than 'minLength' characters @@input-inline-edit-ui.minLengthError\"\n              >\n                Insert min {{ minLength }} characters\n              </div>\n              <div\n                *ngIf=\"hasError('min')\"\n                i18n=\"Min value Error|Number is less than 'minValue' @@input-inline-edit-ui.minValueError\"\n              >\n                Insert min {{ minValue }}\n              </div>\n              <div\n                *ngIf=\"hasError('max')\"\n                i18n=\"Max value Error|Number is more than 'maxValue' @@input-inline-edit-ui.maxValueError\"\n              >\n                Insert max {{ maxValue }}\n              </div>\n              <div\n                *ngIf=\"hasError('pattern')\"\n                i18n=\"Format value error|Format value is invalid @@input-inline-edit-ui.formatValueError\"\n              >\n                Input value provided is invalid\n              </div>\n              <div\n                *ngIf=\"hasError('required')\"\n                i18n=\"Required error|String is required @@input-inline-edit-ui.requiredError\"\n              >\n                Field is required\n              </div>\n            </bb-input-validation-message-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right flex-shrink-0\">\n            <button\n              bbButton\n              type=\"reset\"\n              (click)=\"onCancel($event)\"\n              class=\"bb-stack__item bb-stack__item--push-right\"\n              color=\"danger\"\n              [attr.data-role]=\"'inline-edit-cancel'\"\n              [circle]=\"true\"\n              [attr.aria-label]=\"ariaLabelCancel\"\n              buttonSize=\"sm\"\n              [bbTooltip]=\"tooltipCancel\"\n              container=\"body\"\n              triggers=\"hover focus\"\n              placement=\"auto\"\n            >\n              <bb-icon-ui name=\"times\"></bb-icon-ui>\n            </button>\n            <button\n              bbButton\n              (click)=\"$event.stopPropagation()\"\n              color=\"success\"\n              [attr.data-role]=\"'inline-edit-accept'\"\n              type=\"submit\"\n              [circle]=\"true\"\n              [attr.aria-label]=\"ariaLabelAccept\"\n              buttonSize=\"sm\"\n              class=\"bb-load-button\"\n              [bbTooltip]=\"tooltipAccept\"\n              container=\"body\"\n              triggers=\"hover focus\"\n              placement=\"auto\"\n            >\n              <bb-loading-indicator-ui\n                *ngIf=\"isLoading; else checkIcon\"\n                class=\"bb-load-button__loading-indicator\"\n                loaderSize=\"sm\"\n              ></bb-loading-indicator-ui>\n              <ng-template #checkIcon>\n                <bb-icon-ui name=\"check\"></bb-icon-ui>\n              </ng-template>\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </ng-template>\n</div>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i10.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i10.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i10.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i10.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputInlineEditComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-inline-edit-ui',
                    templateUrl: './input-inline-edit.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputInlineEditComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }, { type: i2.DomAttributesService }]; }, propDecorators: { state: [{
                type: Input
            }], stateChange: [{
                type: Output
            }], canEdit: [{
                type: Input
            }], hasLoadingState: [{
                type: Input
            }], inputInlineTemplate: [{
                type: Input
            }], inputText: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], minValue: [{
                type: Input
            }], autofocus: [{
                type: Input
            }], cancel: [{
                type: Output
            }], accept: [{
                type: Output
            }], ariaLabelAccept: [{
                type: Input
            }], ariaLabelCancel: [{
                type: Input
            }], ariaLabelEdit: [{
                type: Input
            }], tooltipAccept: [{
                type: Input
            }], tooltipCancel: [{
                type: Input
            }], tooltipEdit: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], pattern: [{
                type: Input
            }], hint: [{
                type: Input
            }], onKeydownHandler: [{
                type: HostListener,
                args: ['document:keydown.escape', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,