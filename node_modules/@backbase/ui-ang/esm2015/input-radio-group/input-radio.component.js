import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name InputRadioComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that represents a single radio that is part of the radio group component.
 */
export class InputRadioComponent {
    constructor() {
        this.disabled = false;
    }
}
InputRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
InputRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputRadioComponent, selector: "bb-input-radio-ui", inputs: { labelTemplate: "labelTemplate", labelTemplateContext: "labelTemplateContext", value: "value", label: "label", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], role: "role", ariaActivedescendant: ["aria-activedescendant", "ariaActivedescendant"], ariaExpanded: ["aria-expanded", "ariaExpanded"], ariaInvalid: ["aria-invalid", "ariaInvalid"], ariaOwns: ["aria-owns", "ariaOwns"], disabled: "disabled" }, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputRadioComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-radio-ui',
                    template: '',
                }]
        }], propDecorators: { labelTemplate: [{
                type: Input
            }], labelTemplateContext: [{
                type: Input
            }], value: [{
                type: Input
            }], label: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], role: [{
                type: Input
            }], ariaActivedescendant: [{
                type: Input,
                args: ['aria-activedescendant']
            }], ariaExpanded: [{
                type: Input,
                args: ['aria-expanded']
            }], ariaInvalid: [{
                type: Input,
                args: ['aria-invalid']
            }], ariaOwns: [{
                type: Input,
                args: ['aria-owns']
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvaW5wdXQtcmFkaW8tZ3JvdXAvaW5wdXQtcmFkaW8uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFlLE1BQU0sZUFBZSxDQUFDOztBQUU5RDs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUtILE1BQU0sT0FBTyxtQkFBbUI7SUFKaEM7UUFvRFcsYUFBUSxHQUFHLEtBQUssQ0FBQztLQUMzQjs7aUhBakRZLG1CQUFtQjtxR0FBbkIsbUJBQW1CLDZqQkFGcEIsRUFBRTs0RkFFRCxtQkFBbUI7a0JBSi9CLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7OEJBS1UsYUFBYTtzQkFBckIsS0FBSztnQkFJRyxvQkFBb0I7c0JBQTVCLEtBQUs7Z0JBS0csS0FBSztzQkFBYixLQUFLO2dCQUlHLEtBQUs7c0JBQWIsS0FBSztnQkFLZSxTQUFTO3NCQUE3QixLQUFLO3VCQUFDLFlBQVk7Z0JBS08sY0FBYztzQkFBdkMsS0FBSzt1QkFBQyxpQkFBaUI7Z0JBS0csZUFBZTtzQkFBekMsS0FBSzt1QkFBQyxrQkFBa0I7Z0JBRWhCLElBQUk7c0JBQVosS0FBSztnQkFHMEIsb0JBQW9CO3NCQUFuRCxLQUFLO3VCQUFDLHVCQUF1QjtnQkFHTixZQUFZO3NCQUFuQyxLQUFLO3VCQUFDLGVBQWU7Z0JBR0MsV0FBVztzQkFBakMsS0FBSzt1QkFBQyxjQUFjO2dCQUdELFFBQVE7c0JBQTNCLEtBQUs7dUJBQUMsV0FBVztnQkFFVCxRQUFRO3NCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBJbnB1dFJhZGlvQ29tcG9uZW50XG4gKlxuICogQGExMXkgQ3VycmVudCBjb21wb25lbnQgcHJvdmlkZSBvcHRpb24gdG8gcGFzcyBuZWVkZWQgYWNjZXNzaWJpbGl0eVxuICogYXR0cmlidXRlcy4gWW91IG5lZWQgdG8gdGFrZSBjYXJlIG9mIHByb3BlcnRpZXMgdGhhdCBhcmUgcmVxdWlyZWQgaW4geW91ciBjYXNlIDpcbiAqICAtIHJvbGVcbiAqICAtIGFyaWEtYWN0aXZlZGVzY2VuZGFudFxuICogIC0gYXJpYS1kZXNjcmliZWRieVxuICogIC0gYXJpYS1leHBhbmRlZFxuICogIC0gYXJpYS1pbnZhbGlkXG4gKiAgLSBhcmlhLWxhYmVsXG4gKiAgLSBhcmlhLWxhYmVsbGVkYnlcbiAqICAtIGFyaWEtb3duc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgcmVwcmVzZW50cyBhIHNpbmdsZSByYWRpbyB0aGF0IGlzIHBhcnQgb2YgdGhlIHJhZGlvIGdyb3VwIGNvbXBvbmVudC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItaW5wdXQtcmFkaW8tdWknLFxuICB0ZW1wbGF0ZTogJycsXG59KVxuZXhwb3J0IGNsYXNzIElucHV0UmFkaW9Db21wb25lbnQge1xuICAvKipcbiAgICogQ3VzdG9tIGxhYmVsIHRlbXBsYXRlXG4gICAqL1xuICBASW5wdXQoKSBsYWJlbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+IHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogTGFiZWwgdGVtcGxhdGUgY29udGV4dFxuICAgKi9cbiAgQElucHV0KCkgbGFiZWxUZW1wbGF0ZUNvbnRleHQ6IGFueSB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBuYXRpdmUgcmFkaW8gZWxlbWVudFxuICAgKi9cbiAgQElucHV0KCkgdmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBvZiB0aGUgcmFkaW8gaXRlbVxuICAgKi9cbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIEFjY2Vzc2libGUgbGFiZWwgd2hlbiBjb250cm9sIGRvZXMgbm90IG5lZWQgdG8gcmVuZGVyIGxhYmVsIHRhZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dCgnYXJpYS1sYWJlbCcpIGFyaWFMYWJlbDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlICdhcmlhLWxhYmVsbGVkYnknIGF0dHJpYnV0ZSBmb3IgdGhlIHJhZGlvIGJ1dHRvblxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1pbnB1dC1yZW5hbWVcbiAgQElucHV0KCdhcmlhLWxhYmVsbGVkYnknKSBhcmlhTGFiZWxsZWRieTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlICdhcmlhLWRlc2NyaWJlZGJ5JyBhdHRyaWJ1dGUgZm9yIHRoZSByYWRpbyBidXR0b25cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dCgnYXJpYS1kZXNjcmliZWRieScpIGFyaWFEZXNjcmliZWRieTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIEBJbnB1dCgpIHJvbGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLWlucHV0LXJlbmFtZVxuICBASW5wdXQoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpIGFyaWFBY3RpdmVkZXNjZW5kYW50OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1pbnB1dC1yZW5hbWVcbiAgQElucHV0KCdhcmlhLWV4cGFuZGVkJykgYXJpYUV4cGFuZGVkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1pbnB1dC1yZW5hbWVcbiAgQElucHV0KCdhcmlhLWludmFsaWQnKSBhcmlhSW52YWxpZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dCgnYXJpYS1vd25zJykgYXJpYU93bnM6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xufVxuIl19