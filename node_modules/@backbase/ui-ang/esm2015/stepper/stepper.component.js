import { Component, ContentChild, ContentChildren, Directive, EventEmitter, Output, TemplateRef, } from '@angular/core';
import { StepperStepComponent } from './stepper-step/stepper-step.component';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@angular/common";
export class CustomStepperStepDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomStepperStepDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomStepperStepDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
CustomStepperStepDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomStepperStepDirective, selector: "ng-template[bbCustomStepperStep]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CustomStepperStepDirective, decorators: [{
            type: Directive,
            args: [{ selector: 'ng-template[bbCustomStepperStep]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * @name StepperComponent
 *
 * @description
 * Component that represents a navigation stepper.
 */
export class StepperComponent {
    constructor() {
        /**
         * Output of clicked link
         */
        this.select = new EventEmitter();
    }
    /**
     * Returns the current selected step
     */
    get currentStep() {
        return this.steps && this.steps.find((step) => step.isCurrent);
    }
    /**
     * Returns the current selected sub-step
     */
    hasCurrentChildStep({ steps }) {
        return steps === null || steps === void 0 ? void 0 : steps.find(({ isCurrent }) => isCurrent);
    }
    onClickHandler(data) {
        this.select.emit(data);
    }
}
StepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
StepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StepperComponent, selector: "bb-stepper-ui", outputs: { select: "select" }, queries: [{ propertyName: "stepperStepTemplate", first: true, predicate: CustomStepperStepDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: "steps", predicate: StepperStepComponent }], ngImport: i0, template: "<div [class.bb-stepper__label]=\"currentStep?.label\" class=\"bb-stepper\">\n  <ng-container *ngFor=\"let step of steps; last as isLast; index as i\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        stepperStepTemplate || defaultStepperStepTemplate;\n        context: {\n          $implicit: step,\n          number: i + 1,\n          isLast: isLast,\n          isChild: false\n        }\n      \"\n    >\n    </ng-container>\n\n    <div *ngIf=\"!isLast\" aria-hidden=\"true\" class=\"bb-stepper__separator\"></div>\n  </ng-container>\n</div>\n\n<ng-template #defaultStepperStepTemplate let-step let-number=\"number\" let-isLast=\"isLast\" let-isChild=\"isChild\">\n  <div\n    [class.bb-step--active]=\"step.isActive\"\n    [class.bb-step--current]=\"step.isCurrent && (isChild || !hasCurrentChildStep(step))\"\n    [class.bb-step--child]=\"isChild\"\n    [class.bb-step--last]=\"isLast\"\n    [class.bb-step--container]=\"step.steps?.length\"\n    [attr.aria-label]=\"step.ariaLabel\"\n    [attr.aria-current]=\"step.isActive ? 'step' : null\"\n    class=\"bb-step\"\n  >\n    <div class=\"bb-step__icon\">\n      <ng-container *ngIf=\"step.isCurrent || !step.isChecked; else checkIcon\">\n        {{ number }}\n      </ng-container>\n    </div>\n    <div *ngIf=\"step.label\" [title]=\"step.label\" [class.text-support]=\"!step.isActive\" class=\"bb-step__label\">\n      <a *ngIf=\"step.data && !step.isCurrent\" (click)=\"onClickHandler(step.data)\" href=\"javascript:void(0)\">\n        <ng-container *ngTemplateOutlet=\"simpleStep; context: { $implicit: step }\"></ng-container>\n      </a>\n      <ng-container *ngIf=\"!step.data || step.isCurrent\">\n        <ng-container *ngTemplateOutlet=\"simpleStep; context: { $implicit: step }\"></ng-container>\n      </ng-container>\n    </div>\n  </div>\n  <ng-container *ngFor=\"let subStep of step.steps; last as isLastSubStep\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        defaultStepperStepTemplate;\n        context: {\n          $implicit: subStep,\n          isChild: true,\n          isLast: !isLast && isLastSubStep\n        }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #checkIcon>\n  <bb-icon-ui name=\"check\" size=\"sm\"></bb-icon-ui>\n</ng-template>\n\n<ng-template #simpleStep let-step>\n  {{ step.label }}\n  <span *ngIf=\"!step.steps?.length\" [title]=\"step.stateLabel\" class=\"bb-step__state-label\">{{ step.stateLabel }}</span>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stepper-ui',
                    templateUrl: './stepper.component.html',
                }]
        }], propDecorators: { steps: [{
                type: ContentChildren,
                args: [StepperStepComponent]
            }], stepperStepTemplate: [{
                type: ContentChild,
                args: [CustomStepperStepDirective, { read: TemplateRef, static: true }]
            }], select: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9zdGVwcGVyL3N0ZXBwZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvc3RlcHBlci9zdGVwcGVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLGVBQWUsRUFDZixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFFTixXQUFXLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7Ozs7QUFHN0UsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBRyxDQUFDOzt3SEFEekMsMEJBQTBCOzRHQUExQiwwQkFBMEI7NEZBQTFCLDBCQUEwQjtrQkFEdEMsU0FBUzttQkFBQyxFQUFFLFFBQVEsRUFBRSxrQ0FBa0MsRUFBRTs7QUFLM0Q7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQU8sZ0JBQWdCO0lBSjdCO1FBZ0JFOztXQUVHO1FBRUgsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7S0FtQmxDO0lBakJDOztPQUVHO0lBQ0gsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsbUJBQW1CLENBQUMsRUFBRSxLQUFLLEVBQXdCO1FBQ2pELE9BQU8sS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxjQUFjLENBQUMsSUFBUztRQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDOzs4R0FsQ1UsZ0JBQWdCO2tHQUFoQixnQkFBZ0IscUlBU2IsMEJBQTBCLDJCQUFVLFdBQVcsc0RBTDVDLG9CQUFvQiw2QkMvQnZDLHE3RUFtRUE7NEZEeENhLGdCQUFnQjtrQkFKNUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsV0FBVyxFQUFFLDBCQUEwQjtpQkFDeEM7OEJBS3dDLEtBQUs7c0JBQTNDLGVBQWU7dUJBQUMsb0JBQW9CO2dCQU1yQyxtQkFBbUI7c0JBRGxCLFlBQVk7dUJBQUMsMEJBQTBCLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBTzdFLE1BQU07c0JBREwsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3RlcHBlclN0ZXBDb21wb25lbnQgfSBmcm9tICcuL3N0ZXBwZXItc3RlcC9zdGVwcGVyLXN0ZXAuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnbmctdGVtcGxhdGVbYmJDdXN0b21TdGVwcGVyU3RlcF0nIH0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tU3RlcHBlclN0ZXBEaXJlY3RpdmUge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHt9XG59XG5cbi8qKlxuICogQG5hbWUgU3RlcHBlckNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgcmVwcmVzZW50cyBhIG5hdmlnYXRpb24gc3RlcHBlci5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItc3RlcHBlci11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9zdGVwcGVyLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlckNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBSZXByZXNlbnRzIHN0ZXBwZXIncyBzdGVwc1xuICAgKi9cbiAgQENvbnRlbnRDaGlsZHJlbihTdGVwcGVyU3RlcENvbXBvbmVudCkgc3RlcHM6IFF1ZXJ5TGlzdDxTdGVwcGVyU3RlcENvbXBvbmVudD4gfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgc3RlcHBlciBzdGVwJ3MgY3VzdG9tIHRlbXBsYXRlXG4gICAqL1xuICBAQ29udGVudENoaWxkKEN1c3RvbVN0ZXBwZXJTdGVwRGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmLCBzdGF0aWM6IHRydWUgfSlcbiAgc3RlcHBlclN0ZXBUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogT3V0cHV0IG9mIGNsaWNrZWQgbGlua1xuICAgKi9cbiAgQE91dHB1dCgpXG4gIHNlbGVjdCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHNlbGVjdGVkIHN0ZXBcbiAgICovXG4gIGdldCBjdXJyZW50U3RlcCgpOiBTdGVwcGVyU3RlcENvbXBvbmVudCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuc3RlcHMgJiYgdGhpcy5zdGVwcy5maW5kKChzdGVwKSA9PiBzdGVwLmlzQ3VycmVudCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBzZWxlY3RlZCBzdWItc3RlcFxuICAgKi9cbiAgaGFzQ3VycmVudENoaWxkU3RlcCh7IHN0ZXBzIH06IFN0ZXBwZXJTdGVwQ29tcG9uZW50KTogU3RlcHBlclN0ZXBDb21wb25lbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBzdGVwcz8uZmluZCgoeyBpc0N1cnJlbnQgfSkgPT4gaXNDdXJyZW50KTtcbiAgfVxuXG4gIG9uQ2xpY2tIYW5kbGVyKGRhdGE6IGFueSkge1xuICAgIHRoaXMuc2VsZWN0LmVtaXQoZGF0YSk7XG4gIH1cbn1cbiIsIjxkaXYgW2NsYXNzLmJiLXN0ZXBwZXJfX2xhYmVsXT1cImN1cnJlbnRTdGVwPy5sYWJlbFwiIGNsYXNzPVwiYmItc3RlcHBlclwiPlxuICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBzdGVwIG9mIHN0ZXBzOyBsYXN0IGFzIGlzTGFzdDsgaW5kZXggYXMgaVwiPlxuICAgIDxuZy1jb250YWluZXJcbiAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXG4gICAgICAgIHN0ZXBwZXJTdGVwVGVtcGxhdGUgfHwgZGVmYXVsdFN0ZXBwZXJTdGVwVGVtcGxhdGU7XG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAkaW1wbGljaXQ6IHN0ZXAsXG4gICAgICAgICAgbnVtYmVyOiBpICsgMSxcbiAgICAgICAgICBpc0xhc3Q6IGlzTGFzdCxcbiAgICAgICAgICBpc0NoaWxkOiBmYWxzZVxuICAgICAgICB9XG4gICAgICBcIlxuICAgID5cbiAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgIDxkaXYgKm5nSWY9XCIhaXNMYXN0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgY2xhc3M9XCJiYi1zdGVwcGVyX19zZXBhcmF0b3JcIj48L2Rpdj5cbiAgPC9uZy1jb250YWluZXI+XG48L2Rpdj5cblxuPG5nLXRlbXBsYXRlICNkZWZhdWx0U3RlcHBlclN0ZXBUZW1wbGF0ZSBsZXQtc3RlcCBsZXQtbnVtYmVyPVwibnVtYmVyXCIgbGV0LWlzTGFzdD1cImlzTGFzdFwiIGxldC1pc0NoaWxkPVwiaXNDaGlsZFwiPlxuICA8ZGl2XG4gICAgW2NsYXNzLmJiLXN0ZXAtLWFjdGl2ZV09XCJzdGVwLmlzQWN0aXZlXCJcbiAgICBbY2xhc3MuYmItc3RlcC0tY3VycmVudF09XCJzdGVwLmlzQ3VycmVudCAmJiAoaXNDaGlsZCB8fCAhaGFzQ3VycmVudENoaWxkU3RlcChzdGVwKSlcIlxuICAgIFtjbGFzcy5iYi1zdGVwLS1jaGlsZF09XCJpc0NoaWxkXCJcbiAgICBbY2xhc3MuYmItc3RlcC0tbGFzdF09XCJpc0xhc3RcIlxuICAgIFtjbGFzcy5iYi1zdGVwLS1jb250YWluZXJdPVwic3RlcC5zdGVwcz8ubGVuZ3RoXCJcbiAgICBbYXR0ci5hcmlhLWxhYmVsXT1cInN0ZXAuYXJpYUxhYmVsXCJcbiAgICBbYXR0ci5hcmlhLWN1cnJlbnRdPVwic3RlcC5pc0FjdGl2ZSA/ICdzdGVwJyA6IG51bGxcIlxuICAgIGNsYXNzPVwiYmItc3RlcFwiXG4gID5cbiAgICA8ZGl2IGNsYXNzPVwiYmItc3RlcF9faWNvblwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInN0ZXAuaXNDdXJyZW50IHx8ICFzdGVwLmlzQ2hlY2tlZDsgZWxzZSBjaGVja0ljb25cIj5cbiAgICAgICAge3sgbnVtYmVyIH19XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2ICpuZ0lmPVwic3RlcC5sYWJlbFwiIFt0aXRsZV09XCJzdGVwLmxhYmVsXCIgW2NsYXNzLnRleHQtc3VwcG9ydF09XCIhc3RlcC5pc0FjdGl2ZVwiIGNsYXNzPVwiYmItc3RlcF9fbGFiZWxcIj5cbiAgICAgIDxhICpuZ0lmPVwic3RlcC5kYXRhICYmICFzdGVwLmlzQ3VycmVudFwiIChjbGljayk9XCJvbkNsaWNrSGFuZGxlcihzdGVwLmRhdGEpXCIgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwic2ltcGxlU3RlcDsgY29udGV4dDogeyAkaW1wbGljaXQ6IHN0ZXAgfVwiPjwvbmctY29udGFpbmVyPlxuICAgICAgPC9hPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFzdGVwLmRhdGEgfHwgc3RlcC5pc0N1cnJlbnRcIj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInNpbXBsZVN0ZXA7IGNvbnRleHQ6IHsgJGltcGxpY2l0OiBzdGVwIH1cIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgc3ViU3RlcCBvZiBzdGVwLnN0ZXBzOyBsYXN0IGFzIGlzTGFzdFN1YlN0ZXBcIj5cbiAgICA8bmctY29udGFpbmVyXG4gICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICBkZWZhdWx0U3RlcHBlclN0ZXBUZW1wbGF0ZTtcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICRpbXBsaWNpdDogc3ViU3RlcCxcbiAgICAgICAgICBpc0NoaWxkOiB0cnVlLFxuICAgICAgICAgIGlzTGFzdDogIWlzTGFzdCAmJiBpc0xhc3RTdWJTdGVwXG4gICAgICAgIH1cbiAgICAgIFwiXG4gICAgPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L25nLWNvbnRhaW5lcj5cbjwvbmctdGVtcGxhdGU+XG5cbjxuZy10ZW1wbGF0ZSAjY2hlY2tJY29uPlxuICA8YmItaWNvbi11aSBuYW1lPVwiY2hlY2tcIiBzaXplPVwic21cIj48L2JiLWljb24tdWk+XG48L25nLXRlbXBsYXRlPlxuXG48bmctdGVtcGxhdGUgI3NpbXBsZVN0ZXAgbGV0LXN0ZXA+XG4gIHt7IHN0ZXAubGFiZWwgfX1cbiAgPHNwYW4gKm5nSWY9XCIhc3RlcC5zdGVwcz8ubGVuZ3RoXCIgW3RpdGxlXT1cInN0ZXAuc3RhdGVMYWJlbFwiIGNsYXNzPVwiYmItc3RlcF9fc3RhdGUtbGFiZWxcIj57eyBzdGVwLnN0YXRlTGFiZWwgfX08L3NwYW4+XG48L25nLXRlbXBsYXRlPlxuIl19