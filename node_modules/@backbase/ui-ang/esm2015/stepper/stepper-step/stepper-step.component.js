import { Component, Input, ContentChildren } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @name StepperStepComponent
 *
 * @description
 * Component that represents a single step that is a part of the stepper component.
 */
export class StepperStepComponent {
    constructor() {
        /**
         * Marks step as current
         */
        this.isCurrent = false;
        /**
         * Marks step as checked
         */
        this.isChecked = false;
        /**
         * Marks step as active
         */
        this.isActive = false;
    }
    ngAfterContentChecked() {
        var _a;
        // TODO: workaround for angular bug https://github.com/angular/angular/issues/10098#issuecomment-235157642
        // an infinite loop takes place in banking schematics
        // it requires more investigation to see the root cause
        this.steps = (_a = this._steps) === null || _a === void 0 ? void 0 : _a.filter((item) => item !== this);
    }
}
StepperStepComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperStepComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
StepperStepComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StepperStepComponent, selector: "bb-stepper-step-ui", inputs: { label: "label", stateLabel: "stateLabel", data: "data", ariaLabel: "ariaLabel", isCurrent: "isCurrent", isChecked: "isChecked", isActive: "isActive" }, queries: [{ propertyName: "_steps", predicate: StepperStepComponent }], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StepperStepComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stepper-step-ui',
                    template: '',
                }]
        }], propDecorators: { _steps: [{
                type: ContentChildren,
                args: [StepperStepComponent]
            }], label: [{
                type: Input
            }], stateLabel: [{
                type: Input
            }], data: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], isCurrent: [{
                type: Input
            }], isChecked: [{
                type: Input
            }], isActive: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci1zdGVwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL3N0ZXBwZXIvc3RlcHBlci1zdGVwL3N0ZXBwZXItc3RlcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFrQyxNQUFNLGVBQWUsQ0FBQzs7QUFFbEc7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQU8sb0JBQW9CO0lBSmpDO1FBZ0NFOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBQztRQUUzQjs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFM0I7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO0tBUTNCO0lBTkMscUJBQXFCOztRQUNuQiwwR0FBMEc7UUFDMUcscURBQXFEO1FBQ3JELHVEQUF1RDtRQUN2RCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQUEsSUFBSSxDQUFDLE1BQU0sMENBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7a0hBaERVLG9CQUFvQjtzR0FBcEIsb0JBQW9CLG1QQUlkLG9CQUFvQiw2QkFOM0IsRUFBRTs0RkFFRCxvQkFBb0I7a0JBSmhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7OEJBS3lELE1BQU07c0JBQTdELGVBQWU7dUJBQUMsb0JBQW9CO2dCQU81QixLQUFLO3NCQUFiLEtBQUs7Z0JBS0csVUFBVTtzQkFBbEIsS0FBSztnQkFLRyxJQUFJO3NCQUFaLEtBQUs7Z0JBS0csU0FBUztzQkFBakIsS0FBSztnQkFLRyxTQUFTO3NCQUFqQixLQUFLO2dCQUtHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBS0csUUFBUTtzQkFBaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0LCBBZnRlckNvbnRlbnRDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgU3RlcHBlclN0ZXBDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBvbmVudCB0aGF0IHJlcHJlc2VudHMgYSBzaW5nbGUgc3RlcCB0aGF0IGlzIGEgcGFydCBvZiB0aGUgc3RlcHBlciBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLXN0ZXBwZXItc3RlcC11aScsXG4gIHRlbXBsYXRlOiAnJyxcbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlclN0ZXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRDaGVja2VkIHtcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgc3RlcHBlcidzIHN0ZXBzLmNoaWxkcmVuXG4gICAqL1xuICBAQ29udGVudENoaWxkcmVuKFN0ZXBwZXJTdGVwQ29tcG9uZW50KSBwcml2YXRlIHJlYWRvbmx5IF9zdGVwczogUXVlcnlMaXN0PFN0ZXBwZXJTdGVwQ29tcG9uZW50PiB8IHVuZGVmaW5lZDtcblxuICBzdGVwczogU3RlcHBlclN0ZXBDb21wb25lbnRbXSB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyBzdGVwJ3MgbGFiZWxcbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgc3RlcCdzIHN0YXRlIGxhYmVsXG4gICAqL1xuICBASW5wdXQoKSBzdGF0ZUxhYmVsOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgc3RlcCdzIGRhdGFcbiAgICovXG4gIEBJbnB1dCgpIGRhdGE6IGFueSB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyBzdGVwJ3MgYXJlYS1sYWJlbFxuICAgKi9cbiAgQElucHV0KCkgYXJpYUxhYmVsOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIE1hcmtzIHN0ZXAgYXMgY3VycmVudFxuICAgKi9cbiAgQElucHV0KCkgaXNDdXJyZW50ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIE1hcmtzIHN0ZXAgYXMgY2hlY2tlZFxuICAgKi9cbiAgQElucHV0KCkgaXNDaGVja2VkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIE1hcmtzIHN0ZXAgYXMgYWN0aXZlXG4gICAqL1xuICBASW5wdXQoKSBpc0FjdGl2ZSA9IGZhbHNlO1xuXG4gIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpIHtcbiAgICAvLyBUT0RPOiB3b3JrYXJvdW5kIGZvciBhbmd1bGFyIGJ1ZyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMDA5OCNpc3N1ZWNvbW1lbnQtMjM1MTU3NjQyXG4gICAgLy8gYW4gaW5maW5pdGUgbG9vcCB0YWtlcyBwbGFjZSBpbiBiYW5raW5nIHNjaGVtYXRpY3NcbiAgICAvLyBpdCByZXF1aXJlcyBtb3JlIGludmVzdGlnYXRpb24gdG8gc2VlIHRoZSByb290IGNhdXNlXG4gICAgdGhpcy5zdGVwcyA9IHRoaXMuX3N0ZXBzPy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gIT09IHRoaXMpO1xuICB9XG59XG4iXX0=