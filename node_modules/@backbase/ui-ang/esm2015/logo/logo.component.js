import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @name LogoComponent
 *
 * @description
 * Component that displays the company logo.
 */
export class LogoComponent {
    constructor() {
        /**
         * The type of the logo.  Defaults to 'full'.
         */
        this.type = 'full';
        /**
         * Flag to indicate whether to use the inverse colors or not.  Defaults to false.
         */
        this.isInverse = false;
    }
    /**
     * @name LogoComponent#isEmblem
     * @returns Whether this component should show the emblem only or the full logo.
     *
     * @description
     * Returns whether this component should show the emblem only or the full logo.
     */
    get isEmblem() {
        return this.type === 'emblem';
    }
    ngOnInit() { }
}
LogoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
LogoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LogoComponent, selector: "bb-logo-ui", inputs: { type: "type", isInverse: "isInverse" }, ngImport: i0, template: "<div\n  class=\"bb-logo\"\n  [ngClass]=\"{\n    'bb-logo--emblem': isEmblem,\n    'bb-logo--inverse': isInverse\n  }\"\n></div>\n", directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LogoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-logo-ui',
                    templateUrl: './logo.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { type: [{
                type: Input
            }], isInverse: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9sb2dvL2xvZ28uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvbG9nby9sb2dvLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFJekQ7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQU8sYUFBYTtJQXFCeEI7UUFwQkE7O1dBRUc7UUFDTSxTQUFJLEdBQWEsTUFBTSxDQUFDO1FBQ2pDOztXQUVHO1FBQ00sY0FBUyxHQUFHLEtBQUssQ0FBQztJQWFaLENBQUM7SUFYaEI7Ozs7OztPQU1HO0lBQ0gsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztJQUNoQyxDQUFDO0lBSUQsUUFBUSxLQUFJLENBQUM7OzJHQXZCRixhQUFhOytGQUFiLGFBQWEsb0dDZDFCLG1JQU9BOzRGRE9hLGFBQWE7a0JBSnpCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLFdBQVcsRUFBRSx1QkFBdUI7aUJBQ3JDOzBFQUtVLElBQUk7c0JBQVosS0FBSztnQkFJRyxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIExvZ29UeXBlID0gJ2Z1bGwnIHwgJ2VtYmxlbSc7XG5cbi8qKlxuICogQG5hbWUgTG9nb0NvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgZGlzcGxheXMgdGhlIGNvbXBhbnkgbG9nby5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItbG9nby11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2dvLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgTG9nb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgbG9nby4gIERlZmF1bHRzIHRvICdmdWxsJy5cbiAgICovXG4gIEBJbnB1dCgpIHR5cGU6IExvZ29UeXBlID0gJ2Z1bGwnO1xuICAvKipcbiAgICogRmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRvIHVzZSB0aGUgaW52ZXJzZSBjb2xvcnMgb3Igbm90LiAgRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAqL1xuICBASW5wdXQoKSBpc0ludmVyc2UgPSBmYWxzZTtcblxuICAvKipcbiAgICogQG5hbWUgTG9nb0NvbXBvbmVudCNpc0VtYmxlbVxuICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoaXMgY29tcG9uZW50IHNob3VsZCBzaG93IHRoZSBlbWJsZW0gb25seSBvciB0aGUgZnVsbCBsb2dvLlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgY29tcG9uZW50IHNob3VsZCBzaG93IHRoZSBlbWJsZW0gb25seSBvciB0aGUgZnVsbCBsb2dvLlxuICAgKi9cbiAgZ2V0IGlzRW1ibGVtKCkge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09ICdlbWJsZW0nO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG5nT25Jbml0KCkge31cbn1cbiIsIjxkaXZcbiAgY2xhc3M9XCJiYi1sb2dvXCJcbiAgW25nQ2xhc3NdPVwie1xuICAgICdiYi1sb2dvLS1lbWJsZW0nOiBpc0VtYmxlbSxcbiAgICAnYmItbG9nby0taW52ZXJzZSc6IGlzSW52ZXJzZVxuICB9XCJcbj48L2Rpdj5cbiJdfQ==