import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, forwardRef, Input, ViewChild, ViewChildren, } from '@angular/core';
import { FormControl, FormGroup, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { map, takeUntil, withLatestFrom } from 'rxjs/operators';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { idListAttr } from '@backbase/ui-ang/util';
import { KEY_CODES } from '@backbase/ui-ang/util';
import { BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN, DropdownMultiSelectOptionComponent, } from './dropdown-multi-select-option.component';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
import * as i2 from "@backbase/foundation-ang/future";
import * as i3 from "@backbase/ui-ang/dropdown-panel";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/button";
import * as i7 from "@angular/forms";
/**
 * @name DropdownMultiSelectComponent
 *
 * @description
 * Component that use for DropDown Multi Select.
 */
export class DropdownMultiSelectComponent extends InputBaseComponent {
    constructor(cd, domAttributesService, deprecationsService) {
        super(cd, deprecationsService);
        this.cd = cd;
        this.domAttributesService = domAttributesService;
        this.deprecationsService = deprecationsService;
        this.unsubscribe$ = new Subject();
        /**
         * The placeholder for the multi select.
         */
        this.placeholder = 'No items selected';
        /**
         * The label for the Dropdown multi select. Defaults to an empty string.
         */
        this.label = '';
        /**
         * Enable filtering; Defaults to false.
         */
        this.filtering = false;
        /**
         * Whether the Dropdown multi select is read only. Defaults to false.
         */
        this.readonly = false;
        /**
         * The child option components of type DropDownMultiSelectSingleOption
         */
        this.isIE = navigator.userAgent.indexOf('MSIE ') > -1 || navigator.userAgent.indexOf('Trident/') > -1;
        this.activeOptionIndex = -1;
        this.isOptionsFocused = false;
        this.formGroup = new FormGroup({});
        this.formValue$ = this.formGroup.valueChanges.pipe(map((formValue) => this.getSelectedValues(formValue)), takeUntil(this.unsubscribe$));
        this.labelsMap = {};
        this.buttonLabelId = this.domAttributesService.generateId();
        this.clearOptions$ = new Subject();
        this.selectedValuesSubject$ = new BehaviorSubject([]);
        this.selectedValues$ = this.selectedValuesSubject$.asObservable();
        this.searchKey = '';
        this.cachedValue = {};
        this.isOpen = false;
        this.buttonLabelId = this.domAttributesService.generateId();
        this.formValue$.subscribe(this.selectedValuesSubject$);
        this.formValue$.subscribe((value) => {
            if (value && value.length === 0) {
                this.onChange(undefined);
            }
            else {
                this.onValueChange(value);
            }
        });
        this.clearOptions$
            .pipe(withLatestFrom(this.selectedValues$), takeUntil(this.unsubscribe$))
            .subscribe(([, items]) => {
            items.forEach((item) => {
                this.formGroup.patchValue({ [item]: false }, { emitEvent: false });
            });
            this.formGroup.updateValueAndValidity();
        });
    }
    ngAfterContentInit() {
        if (this.contentOptions) {
            this.contentOptions.forEach(({ value, label }) => {
                this.formGroup.registerControl(value, new FormControl(this.cachedValue[value] || false));
                Object.assign(this.labelsMap, { [value]: label });
            });
            if (Object.keys(this.cachedValue).length) {
                this.formGroup.updateValueAndValidity();
            }
        }
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    /**
     * Unselect all selected options from the listbox
     *
     * @param $event
     */
    clearAll($event) {
        $event.preventDefault();
        this.clearOptions$.next();
    }
    /**
     *
     * @param index
     * @param item
     */
    trackByValueFn(index, item) {
        return item.value;
    }
    /**
     *
     * @param value
     */
    writeValue(value) {
        const valuesMap = (value || []).reduce((acc, item) => Object.assign(acc, { [item]: true }), {});
        this.cachedValue = valuesMap;
        Object.keys(this.formGroup.controls).forEach((key) => {
            this.formGroup.controls[key].setValue(valuesMap[key] || false, { emitEvent: false });
        });
        this.formGroup.updateValueAndValidity({ emitEvent: false });
        const selectedValues = this.getSelectedValues(this.formGroup.value);
        this.selectedValuesSubject$.next(selectedValues);
    }
    /**
     * Updating labels while searching
     *
     * @param label
     */
    getLabel(label) {
        return this.searchKey.toLocaleLowerCase() === label[0].toLocaleLowerCase() && this.filtering
            ? `<b>${label[0]}</b>${label.substring(1)}`
            : label;
    }
    onListboxFocus() {
        this.activeOptionIndex = 0;
        this.isOptionsFocused = true;
    }
    /* eslint-disable complexity */
    onListboxKeyDown(event) {
        if (!this.disabled && this.isOpen && this.isOptionsFocused) {
            const keyCode = this.isIE ? event.keyCode : event.key;
            switch (keyCode) {
                case 40:
                case KEY_CODES.DOWN:
                    this.activeOptionIndex = Math.min(this.activeOptionIndex + 1, this.options.length - 1);
                    break;
                case 38:
                case KEY_CODES.UP:
                    this.activeOptionIndex = Math.max(this.activeOptionIndex - 1, 0);
                    break;
                case 13:
                case 32:
                case KEY_CODES.ENTER:
                case KEY_CODES.SPACE:
                    this.selectActiveOption();
                    break;
                default:
                    if (this.filtering) {
                        this.searchKey = event.key;
                        this.setActiveOptionBaseOnSearchKey(event.key);
                    }
            }
            // let Tab key to jump out and close the dropdown menu
            if (keyCode !== 9 && keyCode !== KEY_CODES.TAB) {
                event.preventDefault();
            }
        }
    }
    /* eslint-enable complexity */
    /**
     *
     */
    onListboxBlur() {
        this.activeOptionIndex = -1;
        this.isOptionsFocused = false;
    }
    /**
     *
     * @param isOpen
     */
    onDropdownToggle(isOpen) {
        this.activeOptionIndex = -1;
        this.isOptionsFocused = false;
        this.isOpen = isOpen;
    }
    getLabeledByIds(...tokens) {
        return idListAttr(...tokens);
    }
    // only taking consideration the focusable elements of the control
    onFocusOut(event) {
        const nextFocusedElement = event.relatedTarget;
        const focusOutElement = event.target;
        if ((focusOutElement === this.toggleButton.nativeElement &&
            nextFocusedElement !== this.clearAllButton.nativeElement &&
            nextFocusedElement !== this.listbox.nativeElement) ||
            (focusOutElement === this.clearAllButton.nativeElement &&
                nextFocusedElement !== this.toggleButton.nativeElement &&
                nextFocusedElement !== this.listbox.nativeElement) ||
            (focusOutElement === this.listbox.nativeElement &&
                nextFocusedElement !== this.toggleButton.nativeElement &&
                nextFocusedElement !== this.clearAllButton.nativeElement)) {
            super.onBlur();
        }
    }
    getSelectedValues(formValue) {
        return Object.keys(formValue).reduce((acc, key) => {
            if (formValue[key]) {
                acc.push(key);
            }
            return acc;
        }, []);
    }
    selectActiveOption() {
        const el = this.options.toArray()[this.activeOptionIndex];
        el === null || el === void 0 ? void 0 : el.nativeElement.click();
    }
    setActiveOptionBaseOnSearchKey(key) {
        this.activeOptionIndex = this.options
            .toArray()
            .findIndex((item) => key.toLocaleLowerCase() === item.nativeElement.innerText[0].toLocaleLowerCase());
    }
}
DropdownMultiSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DomAttributesService }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
DropdownMultiSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMultiSelectComponent, selector: "bb-dropdown-multi-select-ui", inputs: { dropdownHeaderText: "dropdownHeaderText", placeholder: "placeholder", label: "label", filtering: "filtering", readonly: "readonly" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => DropdownMultiSelectComponent),
            multi: true,
        },
        {
            provide: BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN,
            useExisting: ChangeDetectorRef,
        },
    ], queries: [{ propertyName: "contentOptions", predicate: DropdownMultiSelectOptionComponent }], viewQueries: [{ propertyName: "clearAllButton", first: true, predicate: ["clearOptions"], descendants: true }, { propertyName: "dropDownMenu", first: true, predicate: ["dropDownMenu"], descendants: true }, { propertyName: "toggleButton", first: true, predicate: ["toggleButton"], descendants: true }, { propertyName: "listbox", first: true, predicate: ["listbox"], descendants: true }, { propertyName: "options", predicate: ["option"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}_dropdown-option_input\" [id]=\"'bb-dropdown-multi-select-label' + id\">\n  {{ label }}\n</label>\n<div #dropDownMenu>\n  <bb-dropdown-panel-ui\n    (open)=\"onDropdownToggle($event)\"\n    [ngClass]=\"{ 'bb-dropdown-multi-select--disabled': disabled || readonly }\"\n    class=\"bb-dropdown-multi-select\"\n  >\n    <ng-template bbDropdownToggle let-isOpen=\"isOpen\">\n      <button\n        [attr.data-role]=\"'expand-button'\"\n        #toggleButton\n        [attr.required]=\"required ? true : undefined\"\n        [attr.aria-expanded]=\"isOpen\"\n        [attr.aria-labelledby]=\"getLabeledByIds('bb-dropdown-multi-select-label' + id, ariaLabelledby, buttonLabelId)\"\n        [attr.aria-describedby]=\"ariaDescribedby\"\n        [attr.aria-activedescendant]=\"ariaActivedescendant\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-owns]=\"ariaOwns\"\n        [attr.aria-label]=\"ariaLabel\"\n        [disabled]=\"disabled\"\n        aria-haspopup=\"listbox\"\n        (focus)=\"onFocus()\"\n        (focusout)=\"onFocusOut($event)\"\n        class=\"\n          bb-stack--wrap\n          bb-dropdown-multi-select__toggle\n          bb-stack bb-text-align-left\n          bb-stack--align-top\n          form-control\n        \"\n        type=\"button\"\n        id=\"{{ id }}\"\n      >\n        <span class=\"bb-dropdown-multi-select__result\" [id]=\"buttonLabelId\" [attr.data-role]=\"'dropdown-result'\">\n          <span *ngIf=\"(selectedValues$ | async)?.length; else placeholderTemplate\">\n            <ng-container *ngFor=\"let item of selectedValues$ | async; last as last\">\n              {{ labelsMap[item] + (last ? '' : ', ') }}\n            </ng-container>\n          </span>\n          <ng-template #placeholderTemplate>\n            <span class=\"bb-text-support\">{{ placeholder }}</span>\n          </ng-template>\n        </span>\n        <span class=\"bb-stack__item--push-right\">\n          <bb-icon-ui [cropped]=\"true\" [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n        </span>\n      </button>\n    </ng-template>\n    <ng-template bbDropdownMenu>\n      <div>\n        <button\n          [attr.data-role]=\"'clear-btn'\"\n          #clearOptions\n          bbButton\n          color=\"unstyled\"\n          class=\"bb-dropdown-multi-select__clear-button\"\n          (click)=\"clearAll($event)\"\n          i18n=\"Clear selection button text@@dropdown-multiple-select.clear-selection.button\"\n          (focusout)=\"onFocusOut($event)\"\n        >\n          Clear selection\n        </button>\n      </div>\n      <div class=\"dropdown-divider\"></div>\n      <div *ngIf=\"dropdownHeaderText\" [id]=\"'bb-dropdown-multi-select-header_' + id\" class=\"dropdown-header\">\n        {{ dropdownHeaderText }}\n      </div>\n      <div\n        #listbox\n        role=\"listbox\"\n        aria-multiselectable=\"true\"\n        tabindex=\"0\"\n        [attr.aria-labelledby]=\"dropdownHeaderText ? getLabeledByIds('bb-dropdown-multi-select-header_' + id) : null\"\n        class=\"bb-dropdown-multi-select__options-list\"\n        [attr.aria-activedescendant]=\"\n          activeOptionIndex >= 0 ? 'bb-dropdown-multi-select-option-' + (id + activeOptionIndex) : undefined\n        \"\n        *ngIf=\"contentOptions?.length && formGroup.controls[contentOptions?.first.value]\"\n        (keydown)=\"onListboxKeyDown($event)\"\n        (focus)=\"onListboxFocus()\"\n        (blur)=\"onListboxBlur()\"\n        (focusout)=\"onFocusOut($event)\"\n      >\n        <label\n          *ngFor=\"let contentOption of contentOptions; index as i; trackBy: trackByValueFn\"\n          #option\n          (click)=\"activeOptionIndex = i\"\n          role=\"option\"\n          class=\"dropdown-item dropdown-option\"\n          [ngClass]=\"{\n            'active dropdown-option--active': activeOptionIndex === i,\n            'dropdown-option--selected': !!formGroup.controls[contentOption.value].value\n          }\"\n          [attr.data-role]=\"'option-' + i\"\n          [attr.aria-selected]=\"formGroup.controls[contentOption.value].value\"\n          [id]=\"'bb-dropdown-multi-select-option-' + id + i\"\n        >\n          <input\n            class=\"dropdown-option__input\"\n            type=\"checkbox\"\n            id=\"{{ id }}_dropdown-option_input\"\n            [attr.data-role]=\"'option-' + (id + i + 1)\"\n            [formControl]=\"formGroup.controls[contentOption.value]\"\n          />\n          <span [innerHTML]=\"getLabel(contentOption.label)\"></span>\n        </label>\n      </div>\n    </ng-template>\n  </bb-dropdown-panel-ui>\n</div>\n", components: [{ type: i3.DropdownPanelComponent, selector: "bb-dropdown-panel-ui", outputs: ["open"] }, { type: i4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.DropdownToggleDirective, selector: "ng-template[bbDropdownToggle]" }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.DropdownMenuDirective, selector: "ng-template[bbDropdownMenu]" }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-multi-select-ui',
                    templateUrl: './dropdown-multi-select.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => DropdownMultiSelectComponent),
                            multi: true,
                        },
                        {
                            provide: BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN,
                            useExisting: ChangeDetectorRef,
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DomAttributesService }, { type: i2.DeprecationsService }]; }, propDecorators: { dropdownHeaderText: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], label: [{
                type: Input
            }], filtering: [{
                type: Input
            }], readonly: [{
                type: Input
            }], contentOptions: [{
                type: ContentChildren,
                args: [DropdownMultiSelectOptionComponent]
            }], options: [{
                type: ViewChildren,
                args: ['option']
            }], clearAllButton: [{
                type: ViewChild,
                args: ['clearOptions']
            }], dropDownMenu: [{
                type: ViewChild,
                args: ['dropDownMenu']
            }], toggleButton: [{
                type: ViewChild,
                args: ['toggleButton']
            }], listbox: [{
                type: ViewChild,
                args: ['listbox']
            }] } });
//# sourceMappingURL=data:application/json;base64,