import { ChangeDetectionStrategy, Component, Inject, InjectionToken, Input, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
export const BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN = new InjectionToken('BB_MULTI_SELECT_SINGLE_SELECT');
/**
 * @name MultiSelectSingleSelectOption
 *
 * @description
 * Component that represents a single option that is part of the multi select component.
 */
export class DropdownMultiSelectOptionComponent {
    constructor(dropdownCDRef, domAttributesService) {
        this.dropdownCDRef = dropdownCDRef;
        this.domAttributesService = domAttributesService;
        /**
         * The value of the native option element
         */
        this.value = '';
        /**
         * The label of the option item
         */
        this.label = '';
        this.state = false;
        this._id = this.domAttributesService.generateId();
    }
    /**
     * The id for the input. Defaults to unique string.
     */
    set id(value) {
        this._id = value;
    }
    get id() {
        return this._id;
    }
    // NOTES: trigger of detectChanges is needed
    // because DropdownSingleSelectComponent has changeDetection
    // strategy onPush, hence it reacts only to changes
    // of its own @Inputs, but not @Inputs() of options component
    ngOnChanges({ value = {}, label = {} }) {
        const { firstChange: firstChangeValue } = value;
        const { firstChange: firstChangeLabel } = label;
        if (firstChangeLabel && firstChangeValue) {
            return;
        }
        this.dropdownCDRef.detectChanges();
    }
}
DropdownMultiSelectOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectOptionComponent, deps: [{ token: BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN }, { token: i1.DomAttributesService }], target: i0.ɵɵFactoryTarget.Component });
DropdownMultiSelectOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMultiSelectOptionComponent, selector: "bb-dropdown-multi-select-option-ui", inputs: { id: "id", value: "value", label: "label", state: "state" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DropdownMultiSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-dropdown-multi-select-option-ui',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN]
                }] }, { type: i1.DomAttributesService }]; }, propDecorators: { id: [{
                type: Input
            }], value: [{
                type: Input
            }], label: [{
                type: Input
            }], state: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tbXVsdGktc2VsZWN0LW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3VpLWFuZy9kcm9wZG93bi1tdWx0aS1zZWxlY3QvZHJvcGRvd24tbXVsdGktc2VsZWN0LW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUV2QixTQUFTLEVBQ1QsTUFBTSxFQUNOLGNBQWMsRUFDZCxLQUFLLEdBSU4sTUFBTSxlQUFlLENBQUM7OztBQUd2QixNQUFNLENBQUMsTUFBTSwwQ0FBMEMsR0FBc0MsSUFBSSxjQUFjLENBQzdHLCtCQUErQixDQUNoQyxDQUFDO0FBRUY7Ozs7O0dBS0c7QUFNSCxNQUFNLE9BQU8sa0NBQWtDO0lBeUI3QyxZQUN1RSxhQUFnQyxFQUNwRixvQkFBMEM7UUFEVSxrQkFBYSxHQUFiLGFBQWEsQ0FBbUI7UUFDcEYseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQVo3RDs7V0FFRztRQUNNLFVBQUssR0FBRyxFQUFFLENBQUM7UUFDcEI7O1dBRUc7UUFDTSxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBRVgsVUFBSyxHQUF3QixLQUFLLENBQUM7UUFLMUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQTNCRDs7T0FFRztJQUNILElBQ0ksRUFBRSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQUksRUFBRTtRQUNKLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBbUJELDRDQUE0QztJQUM1Qyw0REFBNEQ7SUFDNUQsbURBQW1EO0lBQ25ELDZEQUE2RDtJQUM3RCxXQUFXLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBa0IsRUFBRSxLQUFLLEdBQUcsRUFBa0IsRUFBaUI7UUFDbkYsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNoRCxNQUFNLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRWhELElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLEVBQUU7WUFDeEMsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNyQyxDQUFDOztnSUE3Q1Usa0NBQWtDLGtCQTBCbkMsMENBQTBDO29IQTFCekMsa0NBQWtDLHFLQUZuQyxFQUFFOzRGQUVELGtDQUFrQztrQkFMOUMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0NBQW9DO29CQUM5QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFLEVBQUU7aUJBQ2I7OzBCQTJCSSxNQUFNOzJCQUFDLDBDQUEwQzsrRUFuQmhELEVBQUU7c0JBREwsS0FBSztnQkFZRyxLQUFLO3NCQUFiLEtBQUs7Z0JBSUcsS0FBSztzQkFBYixLQUFLO2dCQUVHLEtBQUs7c0JBQWIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBJbmplY3QsXG4gIEluamVjdGlvblRva2VuLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2UsXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tQXR0cmlidXRlc1NlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3NlcnZpY2VzJztcblxuZXhwb3J0IGNvbnN0IEJCX01VTFRJX1NFTEVDVF9DSEFOR0VfREVURUNUSU9OX1JFRl9UT0tFTjogSW5qZWN0aW9uVG9rZW48Q2hhbmdlRGV0ZWN0b3JSZWY+ID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnQkJfTVVMVElfU0VMRUNUX1NJTkdMRV9TRUxFQ1QnLFxuKTtcblxuLyoqXG4gKiBAbmFtZSBNdWx0aVNlbGVjdFNpbmdsZVNlbGVjdE9wdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgcmVwcmVzZW50cyBhIHNpbmdsZSBvcHRpb24gdGhhdCBpcyBwYXJ0IG9mIHRoZSBtdWx0aSBzZWxlY3QgY29tcG9uZW50LlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1kcm9wZG93bi1tdWx0aS1zZWxlY3Qtb3B0aW9uLXVpJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnJyxcbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25NdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIHByaXZhdGUgX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpZCBmb3IgdGhlIGlucHV0LiBEZWZhdWx0cyB0byB1bmlxdWUgc3RyaW5nLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pZCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgbmF0aXZlIG9wdGlvbiBlbGVtZW50XG4gICAqL1xuICBASW5wdXQoKSB2YWx1ZSA9ICcnO1xuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBvcHRpb24gaXRlbVxuICAgKi9cbiAgQElucHV0KCkgbGFiZWwgPSAnJztcblxuICBASW5wdXQoKSBzdGF0ZTogYm9vbGVhbiB8IHVuZGVmaW5lZCA9IGZhbHNlO1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KEJCX01VTFRJX1NFTEVDVF9DSEFOR0VfREVURUNUSU9OX1JFRl9UT0tFTikgcHJpdmF0ZSByZWFkb25seSBkcm9wZG93bkNEUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRvbUF0dHJpYnV0ZXNTZXJ2aWNlOiBEb21BdHRyaWJ1dGVzU2VydmljZSxcbiAgKSB7XG4gICAgdGhpcy5faWQgPSB0aGlzLmRvbUF0dHJpYnV0ZXNTZXJ2aWNlLmdlbmVyYXRlSWQoKTtcbiAgfVxuXG4gIC8vIE5PVEVTOiB0cmlnZ2VyIG9mIGRldGVjdENoYW5nZXMgaXMgbmVlZGVkXG4gIC8vIGJlY2F1c2UgRHJvcGRvd25TaW5nbGVTZWxlY3RDb21wb25lbnQgaGFzIGNoYW5nZURldGVjdGlvblxuICAvLyBzdHJhdGVneSBvblB1c2gsIGhlbmNlIGl0IHJlYWN0cyBvbmx5IHRvIGNoYW5nZXNcbiAgLy8gb2YgaXRzIG93biBASW5wdXRzLCBidXQgbm90IEBJbnB1dHMoKSBvZiBvcHRpb25zIGNvbXBvbmVudFxuICBuZ09uQ2hhbmdlcyh7IHZhbHVlID0ge30gYXMgU2ltcGxlQ2hhbmdlLCBsYWJlbCA9IHt9IGFzIFNpbXBsZUNoYW5nZSB9OiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgY29uc3QgeyBmaXJzdENoYW5nZTogZmlyc3RDaGFuZ2VWYWx1ZSB9ID0gdmFsdWU7XG4gICAgY29uc3QgeyBmaXJzdENoYW5nZTogZmlyc3RDaGFuZ2VMYWJlbCB9ID0gbGFiZWw7XG5cbiAgICBpZiAoZmlyc3RDaGFuZ2VMYWJlbCAmJiBmaXJzdENoYW5nZVZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kcm9wZG93bkNEUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIl19