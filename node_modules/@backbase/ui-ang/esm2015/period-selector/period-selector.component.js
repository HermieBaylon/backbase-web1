import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/button";
/**
 * @name PeriodSelectorComponent
 *
 * @description
 * Component that selects a period.
 */
export class PeriodSelectorComponent {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.combinedFormatters = {
            title: (date) => this.datePipe.transform(date, 'MMMM') || '',
            start: (date) => this.datePipe.transform(date, 'mediumDate') || '',
            end: (date) => this.datePipe.transform(date, 'mediumDate') || '',
        };
        /**
         * Period step
         */
        this.period = 'month';
        /**
         * EventEmitter for triggering a periodChange event.
         */
        this.periodChange = new EventEmitter();
    }
    /**
     * Custom date period formatter.
     */
    set periodFormatters(formatters) {
        this.combinedFormatters = Object.assign(this.combinedFormatters, formatters);
    }
    get isLastPeriod() {
        if (!this.periodStart) {
            return true;
        }
        const now = new Date();
        return now.getFullYear() === this.periodStart.getFullYear() && now.getMonth() === this.periodStart.getMonth();
    }
    ngOnInit() {
        if (typeof this.periodStart === 'undefined' || typeof this.periodEnd === 'undefined') {
            throw new Error('`periodStart`, and `periodEnd` inputs are required in `bb-period-selector-ui` component');
        }
        this.setFormattedValues();
    }
    setFormattedValues() {
        this.formattedTitle = this.combinedFormatters.title(this.periodStart);
        this.formattedStart = this.combinedFormatters.start(this.periodStart);
        this.formattedEnd = this.combinedFormatters.end(this.periodEnd);
    }
    changePeriod(next) {
        if (!this.periodStart || (next && this.isLastPeriod)) {
            return;
        }
        this.periodStart.setMonth(this.periodStart.getMonth() + (next ? 1 : -1));
        this.periodEnd = this.isLastPeriod
            ? new Date(this.periodStart.getFullYear(), this.periodStart.getMonth(), new Date().getDate(), 23, 59, 59, 999)
            : new Date(this.periodStart.getFullYear(), this.periodStart.getMonth() + 1, 0, 23, 59, 59, 999);
        this.setFormattedValues();
        this.periodChange.emit({
            start: this.periodStart,
            end: this.periodEnd,
        });
    }
}
PeriodSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorComponent, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
PeriodSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PeriodSelectorComponent, selector: "bb-period-selector-ui", inputs: { periodStart: "periodStart", periodEnd: "periodEnd", periodFormatters: "periodFormatters", period: "period" }, outputs: { periodChange: "periodChange" }, ngImport: i0, template: "<div class=\"bb-period-selector\">\n  <div>\n    <button bbButton circle=\"\u201Ctrue\u201D\" (click)=\"changePeriod(false)\" color=\"link-dark\" size=\"sm\">\n      <bb-icon-ui size=\"md\" name=\"chevron-left\"></bb-icon-ui>\n    </button>\n  </div>\n  <div class=\"bb-period-selector__date\">\n    <div class=\"bb-period-selector__month\">{{ formattedTitle }}</div>\n    <div class=\"bb-period-selector__period\">\n      <time>{{ formattedStart }}</time> - <time>{{ formattedEnd }}</time>\n    </div>\n  </div>\n  <div>\n    <button\n      bbButton\n      [circle]=\"true\"\n      (click)=\"changePeriod(true)\"\n      [ngClass]=\"{ disabled: isLastPeriod }\"\n      color=\"link-dark\"\n      size=\"sm\"\n    >\n      <bb-icon-ui size=\"md\" name=\"chevron-right\"></bb-icon-ui>\n    </button>\n  </div>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PeriodSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-period-selector-ui',
                    templateUrl: './period-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; }, propDecorators: { periodStart: [{
                type: Input
            }], periodEnd: [{
                type: Input
            }], periodFormatters: [{
                type: Input
            }], period: [{
                type: Input
            }], periodChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyaW9kLXNlbGVjdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL3BlcmlvZC1zZWxlY3Rvci9wZXJpb2Qtc2VsZWN0b3IuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvcGVyaW9kLXNlbGVjdG9yL3BlcmlvZC1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztBQXNCeEc7Ozs7O0dBS0c7QUFNSCxNQUFNLE9BQU8sdUJBQXVCO0lBZ0NsQyxZQUE2QixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBL0J2Qyx1QkFBa0IsR0FBdUI7WUFDL0MsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRTtZQUM1RCxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFO1lBQ2xFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxJQUFJLEVBQUU7U0FDakUsQ0FBQztRQWlCRjs7V0FFRztRQUNNLFdBQU0sR0FBZSxPQUFPLENBQUM7UUFFdEM7O1dBRUc7UUFDTyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7SUFFRixDQUFDO0lBakJuRDs7T0FFRztJQUNILElBQ0ksZ0JBQWdCLENBQUMsVUFBNEI7UUFDL0MsSUFB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S0FBSztnQkFLRixnQkFBZ0I7c0JBRG5CLEtBQUs7Z0JBT0csTUFBTTtzQkFBZCxLQUFLO2dCQUtJLFlBQVk7c0JBQXJCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5leHBvcnQgdHlwZSBGb3JtYXRGbiA9IChkYXRlOiBEYXRlKSA9PiBzdHJpbmc7XG4vLyBAVE9ETzogc2hvdWxkIGJlIGV4dGVuZGVkIHdpdGggd2VlaywgeWVhciwgZXRjLiBvbmNlIHdlIGdldCByZXF1aXJlbWVudCBmb3IgaXRcbmV4cG9ydCB0eXBlIFBlcmlvZFNpemUgPSAnbW9udGgnO1xuZXhwb3J0IGludGVyZmFjZSBQZXJpb2Qge1xuICBzdGFydDogRGF0ZTtcbiAgZW5kOiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSBQZXJpb2RGb3JtYXR0ZXJzIHtcbiAgdGl0bGU/OiBGb3JtYXRGbjtcbiAgc3RhcnQ/OiBGb3JtYXRGbjtcbiAgZW5kPzogRm9ybWF0Rm47XG59XG5cbmludGVyZmFjZSBDb21iaW5lZEZvcm1hdHRlcnMge1xuICB0aXRsZTogRm9ybWF0Rm47XG4gIHN0YXJ0OiBGb3JtYXRGbjtcbiAgZW5kOiBGb3JtYXRGbjtcbn1cblxuLyoqXG4gKiBAbmFtZSBQZXJpb2RTZWxlY3RvckNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgc2VsZWN0cyBhIHBlcmlvZC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItcGVyaW9kLXNlbGVjdG9yLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BlcmlvZC1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBQZXJpb2RTZWxlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgY29tYmluZWRGb3JtYXR0ZXJzOiBDb21iaW5lZEZvcm1hdHRlcnMgPSB7XG4gICAgdGl0bGU6IChkYXRlKSA9PiB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShkYXRlLCAnTU1NTScpIHx8ICcnLFxuICAgIHN0YXJ0OiAoZGF0ZSkgPT4gdGhpcy5kYXRlUGlwZS50cmFuc2Zvcm0oZGF0ZSwgJ21lZGl1bURhdGUnKSB8fCAnJyxcbiAgICBlbmQ6IChkYXRlKSA9PiB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShkYXRlLCAnbWVkaXVtRGF0ZScpIHx8ICcnLFxuICB9O1xuXG4gIC8qKlxuICAgKiBTdGFydCBkYXRlIG9mIHRoZSBwZXJpb2QuXG4gICAqL1xuICBASW5wdXQoKSBwZXJpb2RTdGFydDogRGF0ZSB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIEVuZCBkYXRlIG9mIHRoZSBwZXJpb2QuXG4gICAqL1xuICBASW5wdXQoKSBwZXJpb2RFbmQ6IERhdGUgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBDdXN0b20gZGF0ZSBwZXJpb2QgZm9ybWF0dGVyLlxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IHBlcmlvZEZvcm1hdHRlcnMoZm9ybWF0dGVyczogUGVyaW9kRm9ybWF0dGVycykge1xuICAgIHRoaXMuY29tYmluZWRGb3JtYXR0ZXJzID0gT2JqZWN0LmFzc2lnbih0aGlzLmNvbWJpbmVkRm9ybWF0dGVycywgZm9ybWF0dGVycyk7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmlvZCBzdGVwXG4gICAqL1xuICBASW5wdXQoKSBwZXJpb2Q6IFBlcmlvZFNpemUgPSAnbW9udGgnO1xuXG4gIC8qKlxuICAgKiBFdmVudEVtaXR0ZXIgZm9yIHRyaWdnZXJpbmcgYSBwZXJpb2RDaGFuZ2UgZXZlbnQuXG4gICAqL1xuICBAT3V0cHV0KCkgcGVyaW9kQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxQZXJpb2Q+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkYXRlUGlwZTogRGF0ZVBpcGUpIHt9XG5cbiAgZm9ybWF0dGVkVGl0bGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZm9ybWF0dGVkU3RhcnQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZm9ybWF0dGVkRW5kOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgZ2V0IGlzTGFzdFBlcmlvZCgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMucGVyaW9kU3RhcnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgICByZXR1cm4gbm93LmdldEZ1bGxZZWFyKCkgPT09IHRoaXMucGVyaW9kU3RhcnQuZ2V0RnVsbFllYXIoKSAmJiBub3cuZ2V0TW9udGgoKSA9PT0gdGhpcy5wZXJpb2RTdGFydC5nZXRNb250aCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnBlcmlvZFN0YXJ0ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdGhpcy5wZXJpb2RFbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BwZXJpb2RTdGFydGAsIGFuZCBgcGVyaW9kRW5kYCBpbnB1dHMgYXJlIHJlcXVpcmVkIGluIGBiYi1wZXJpb2Qtc2VsZWN0b3ItdWlgIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0Rm9ybWF0dGVkVmFsdWVzKCk7XG4gIH1cblxuICBwcml2YXRlIHNldEZvcm1hdHRlZFZhbHVlcygpIHtcbiAgICB0aGlzLmZvcm1hdHRlZFRpdGxlID0gdGhpcy5jb21iaW5lZEZvcm1hdHRlcnMudGl0bGUodGhpcy5wZXJpb2RTdGFydCBhcyBEYXRlKTtcbiAgICB0aGlzLmZvcm1hdHRlZFN0YXJ0ID0gdGhpcy5jb21iaW5lZEZvcm1hdHRlcnMuc3RhcnQodGhpcy5wZXJpb2RTdGFydCBhcyBEYXRlKTtcbiAgICB0aGlzLmZvcm1hdHRlZEVuZCA9IHRoaXMuY29tYmluZWRGb3JtYXR0ZXJzLmVuZCh0aGlzLnBlcmlvZEVuZCBhcyBEYXRlKTtcbiAgfVxuXG4gIGNoYW5nZVBlcmlvZChuZXh0OiBib29sZWFuKSB7XG4gICAgaWYgKCF0aGlzLnBlcmlvZFN0YXJ0IHx8IChuZXh0ICYmIHRoaXMuaXNMYXN0UGVyaW9kKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyaW9kU3RhcnQuc2V0TW9udGgodGhpcy5wZXJpb2RTdGFydC5nZXRNb250aCgpICsgKG5leHQgPyAxIDogLTEpKTtcbiAgICB0aGlzLnBlcmlvZEVuZCA9IHRoaXMuaXNMYXN0UGVyaW9kXG4gICAgICA/IG5ldyBEYXRlKHRoaXMucGVyaW9kU3RhcnQuZ2V0RnVsbFllYXIoKSwgdGhpcy5wZXJpb2RTdGFydC5nZXRNb250aCgpLCBuZXcgRGF0ZSgpLmdldERhdGUoKSwgMjMsIDU5LCA1OSwgOTk5KVxuICAgICAgOiBuZXcgRGF0ZSh0aGlzLnBlcmlvZFN0YXJ0LmdldEZ1bGxZZWFyKCksIHRoaXMucGVyaW9kU3RhcnQuZ2V0TW9udGgoKSArIDEsIDAsIDIzLCA1OSwgNTksIDk5OSk7XG5cbiAgICB0aGlzLnNldEZvcm1hdHRlZFZhbHVlcygpO1xuICAgIHRoaXMucGVyaW9kQ2hhbmdlLmVtaXQoe1xuICAgICAgc3RhcnQ6IHRoaXMucGVyaW9kU3RhcnQsXG4gICAgICBlbmQ6IHRoaXMucGVyaW9kRW5kLFxuICAgIH0pO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYmItcGVyaW9kLXNlbGVjdG9yXCI+XG4gIDxkaXY+XG4gICAgPGJ1dHRvbiBiYkJ1dHRvbiBjaXJjbGU9XCLigJx0cnVl4oCdXCIgKGNsaWNrKT1cImNoYW5nZVBlcmlvZChmYWxzZSlcIiBjb2xvcj1cImxpbmstZGFya1wiIHNpemU9XCJzbVwiPlxuICAgICAgPGJiLWljb24tdWkgc2l6ZT1cIm1kXCIgbmFtZT1cImNoZXZyb24tbGVmdFwiPjwvYmItaWNvbi11aT5cbiAgICA8L2J1dHRvbj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJiYi1wZXJpb2Qtc2VsZWN0b3JfX2RhdGVcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYmItcGVyaW9kLXNlbGVjdG9yX19tb250aFwiPnt7IGZvcm1hdHRlZFRpdGxlIH19PC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImJiLXBlcmlvZC1zZWxlY3Rvcl9fcGVyaW9kXCI+XG4gICAgICA8dGltZT57eyBmb3JtYXR0ZWRTdGFydCB9fTwvdGltZT4gLSA8dGltZT57eyBmb3JtYXR0ZWRFbmQgfX08L3RpbWU+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2PlxuICAgIDxidXR0b25cbiAgICAgIGJiQnV0dG9uXG4gICAgICBbY2lyY2xlXT1cInRydWVcIlxuICAgICAgKGNsaWNrKT1cImNoYW5nZVBlcmlvZCh0cnVlKVwiXG4gICAgICBbbmdDbGFzc109XCJ7IGRpc2FibGVkOiBpc0xhc3RQZXJpb2QgfVwiXG4gICAgICBjb2xvcj1cImxpbmstZGFya1wiXG4gICAgICBzaXplPVwic21cIlxuICAgID5cbiAgICAgIDxiYi1pY29uLXVpIHNpemU9XCJtZFwiIG5hbWU9XCJjaGV2cm9uLXJpZ2h0XCI+PC9iYi1pY29uLXVpPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19