import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { noop } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
let _nextId = 0;
export function getInputNextId() {
    return `bb_input_${_nextId++}`;
}
export const defaultSize = 20;
/**
 * Widget roles specified in ARIA 1.1
 */
const VALID_WIDGET_ROLES = [
    'button',
    'checkbox',
    'combobox',
    'grid',
    'gridcell',
    'link',
    'listbox',
    'menu',
    'menubar',
    'menuitem',
    'menuitemcheckbox',
    'menuitemradio',
    'option',
    'progressbar',
    'radio',
    'radiogroup',
    'scrollbar',
    'searchbox',
    'separator',
    'slider',
    'spinbutton',
    'switch',
    'tab',
    'tablist',
    'tabpanel',
    'textbox',
    'tree',
    'treegrid',
    'treeitem',
];
/**
 * @name InputBaseComponent
 *
 * @description
 * Base component for input fields.
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes to custom components
 */
export class InputBaseComponent {
    constructor(cd, deprecationsService) {
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        this._id = getInputNextId();
        this.onTouched = noop;
        /**
         * The label for the input. Defaults to an empty string.
         */
        this.label = '';
        this._size = defaultSize;
        // `aria-readonly` is not needed, use `readonly` instead
        // `aria-required` is not needed, use `required` instead
        /**
         * Whether the input is required. Defaults to false.
         */
        this.required = false;
        /**
         * Whether the input is read only. Defaults to false.
         */
        this.readonly = false;
        /**
         * An event emitter for on blur actions.
         */
        this.blur = new EventEmitter();
        /**
         * An event emitter for on focus actions.
         */
        this.focus = new EventEmitter();
        /**
         * Whether the text input should be auto-focused when shown.
         */
        this.autofocus = false;
        this._valueChange = new EventEmitter();
        this.disabled = false;
        this.value = '';
        this.onChange = () => { };
    }
    /**
     * The id for the input. Defaults to unique string.
     * Used to map the label to the input.
     */
    set id(value) {
        this._id = value;
    }
    get id() {
        return this._id;
    }
    /**
     * Customize the ARIA role for the HTML input/select/textarea element inside this component.
     *
     * This can be used to improve accessibility for components, for example by configuring `[role]="'combobox'"`
     * for a component that provides an autocomplete list.
     *
     * Values that are valid for the native HTML form elements are allowed.
     */
    set role(value) {
        if (typeof value === 'string' && VALID_WIDGET_ROLES.indexOf(value) === -1) {
            // Prevent setting invalid roles
            // TODO: Log a warning about the invalid role
            value = undefined;
        }
        this._role = value;
    }
    get role() {
        return this._role;
    }
    /**
     * Configure the minimum width to fit the specified number of characters that should fit for HTML `<input>`
     */
    get size() {
        return this._size;
    }
    set size(arg) {
        const size = this.getSizeByKeyword(arg);
        // Optionally convert a `size` keyword to an integer value.
        // This can be supported by subclasses of `InputBaseComponent`
        arg = typeof size !== 'undefined' ? size : arg;
        const int = parseInt(String(arg), 10);
        if (int >= 1 && !isNaN(int)) {
            this._size = int;
        }
    }
    ngOnInit() {
        if (!(this.label || this.ariaLabel || this.ariaLabelledby)) {
            console.warn(`Found an input from '${this.constructor.name}' without label, please provide it.`);
        }
    }
    onBlur($event) {
        this.blur.emit($event);
        this.onTouched();
    }
    onValueChange(newValue) {
        if (newValue === undefined) {
            this.onChange(this.value);
        }
        else {
            this.onChange(newValue);
            this.value = newValue;
            this._valueChange.emit(this.value);
        }
    }
    onFocus($event) {
        this.focus.emit($event);
    }
    writeValue(inputValue) {
        this.value = inputValue === null ? '' : inputValue;
        this.cd.markForCheck();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
    /**
     * Returns the `input` `size` value for a keyword, such as "xxl".
     * Subclasses can choose to implement a custom mapping, which will be used to configure `size`.
     */
    getSizeByKeyword(arg) {
        return undefined;
    }
}
InputBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputBaseComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputBaseComponent, selector: "ng-component", inputs: { id: "id", label: "label", role: "role", size: "size", inputClassName: "inputClassName", ariaAutocomplete: ["aria-autocomplete", "ariaAutocomplete"], ariaActivedescendant: ["aria-activedescendant", "ariaActivedescendant"], ariaControls: ["aria-controls", "ariaControls"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaExpanded: ["aria-expanded", "ariaExpanded"], ariaInvalid: ["aria-invalid", "ariaInvalid"], ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaOwns: ["aria-owns", "ariaOwns"], required: "required", readonly: "readonly", autofocus: "autofocus", disabled: "disabled" }, outputs: { blur: "blur", focus: "focus" }, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputBaseComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.DeprecationsService }]; }, propDecorators: { id: [{
                type: Input
            }], label: [{
                type: Input
            }], role: [{
                type: Input
            }], size: [{
                type: Input
            }], inputClassName: [{
                type: Input
            }], ariaAutocomplete: [{
                type: Input,
                args: ['aria-autocomplete']
            }], ariaActivedescendant: [{
                type: Input,
                args: ['aria-activedescendant']
            }], ariaControls: [{
                type: Input,
                args: ['aria-controls']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], ariaExpanded: [{
                type: Input,
                args: ['aria-expanded']
            }], ariaInvalid: [{
                type: Input,
                args: ['aria-invalid']
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaOwns: [{
                type: Input,
                args: ['aria-owns']
            }], required: [{
                type: Input
            }], readonly: [{
                type: Input
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], autofocus: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,