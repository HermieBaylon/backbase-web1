import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * @name CharCounterComponent
 *
 * @description
 * Component for counting characters typed inside a form element
 */
export class CharCounterComponent {
    constructor(renderer, cd) {
        this.renderer = renderer;
        this.cd = cd;
        /**
         * Indicator for maximum character count.
         */
        this.maxLength = 150;
        this._blockTyping = false;
        this.counter = 0;
        this.valid = true;
    }
    /**
     * Whether the element should be blocked when maximum character count is reached.
     */
    set blockTyping(val) {
        this._blockTyping = val;
        if (this.blockTyping && this.element) {
            this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());
        }
        else {
            this.renderer.removeAttribute(this.element, 'maxlength');
        }
    }
    get blockTyping() {
        return this._blockTyping;
    }
    ngOnInit() {
        if (this.blockTyping && this.element) {
            this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());
        }
        // Cover by setTimeout for handling value change in input/textarea
        // This change cannot be checked by lifecycle hooks.
        setTimeout(() => {
            this.calculateElementValue();
        }, 0);
        this.renderer.listen(this.element, 'input', () => this.calculateElementValue());
    }
    ngOnChanges(changes) {
        const { inputValue } = changes;
        if (inputValue && inputValue.previousValue !== inputValue.currentValue) {
            this.counter = inputValue.currentValue.length;
            this.valid = this.counter <= this.maxLength;
        }
    }
    // It should be deprecated, because it doesn't allow to count
    // value that was updated programmatically, for instance by patchValue
    calculateElementValue() {
        this.counter = this.element ? this.element.value.length : 0;
        this.valid = this.counter <= this.maxLength;
        this.cd.detectChanges();
    }
}
CharCounterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
CharCounterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CharCounterComponent, selector: "bb-char-counter-ui", inputs: { inputValue: "inputValue", element: "element", maxLength: "maxLength", blockTyping: "blockTyping" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"bb-char-counter\" [class.bb-char-counter--invalid]=\"!valid\">\n  <div [ngSwitch]=\"true\" aria-live=\"assertive\" class=\"sr-only\" aria-atomic=\"true\" role=\"log\">\n    <div\n      *ngSwitchCase=\"counter > maxLength - 4 && counter !== maxLength\"\n      i18n=\"\n        Above to reach Max Length Error|String is almost has 'maxLength' characters.\n        @@bb-char-counter-ui.pre-max-length-warning\"\n    >\n      You can type only {{ maxLength - counter }} more characters in this field.\n    </div>\n    <div\n      *ngSwitchCase=\"counter === maxLength\"\n      [attr.data-role]=\"'char-counter-error-message'\"\n      i18n=\"Max Length Error|String is more than 'maxLength' characters. @@bb-char-counter-ui.max-length-warning\"\n    >\n      Limit reached. You can only use {{ maxLength }} characters in this field.\n    </div>\n  </div>\n\n  <div *ngIf=\"element\" [attr.data-role]=\"'char-counter-current-max'\">{{ counter }}/{{ maxLength }}</div>\n</div>\n", directives: [{ type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CharCounterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-char-counter-ui',
                    templateUrl: './char-counter.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { inputValue: [{
                type: Input
            }], element: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], blockTyping: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhci1jb3VudGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2NoYXItY291bnRlci9jaGFyLWNvdW50ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy91aS1hbmcvY2hhci1jb3VudGVyL2NoYXItY291bnRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBa0UsTUFBTSxlQUFlLENBQUM7OztBQUVqSDs7Ozs7R0FLRztBQUtILE1BQU0sT0FBTyxvQkFBb0I7SUFpQy9CLFlBQTZCLFFBQW1CLEVBQW1CLEVBQXFCO1FBQTNELGFBQVEsR0FBUixRQUFRLENBQVc7UUFBbUIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUF2QnhGOztXQUVHO1FBQ00sY0FBUyxHQUFHLEdBQUcsQ0FBQztRQWdCakIsaUJBQVksR0FBRyxLQUFLLENBQUM7UUFDN0IsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUNaLFVBQUssR0FBRyxJQUFJLENBQUM7SUFFOEUsQ0FBQztJQW5CNUY7O09BRUc7SUFDSCxJQUFhLFdBQVcsQ0FBQyxHQUFZO1FBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUNsRjthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQU9ELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDbEY7UUFFRCxrRUFBa0U7UUFDbEUsb0RBQW9EO1FBQ3BELFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUMvQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFTixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUMvQixJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsYUFBYSxLQUFLLFVBQVUsQ0FBQyxZQUFZLEVBQUU7WUFDdEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztZQUM5QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFDRCw2REFBNkQ7SUFDN0Qsc0VBQXNFO0lBQ3RFLHFCQUFxQjtRQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzVDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7a0hBOURVLG9CQUFvQjtzR0FBcEIsb0JBQW9CLDZMQ1pqQywwOUJBcUJBOzRGRFRhLG9CQUFvQjtrQkFKaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixXQUFXLEVBQUUsK0JBQStCO2lCQUM3QztnSUFNVSxVQUFVO3NCQUFsQixLQUFLO2dCQUlHLE9BQU87c0JBQWYsS0FBSztnQkFJRyxTQUFTO3NCQUFqQixLQUFLO2dCQUlPLFdBQVc7c0JBQXZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIENoYXJDb3VudGVyQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wb25lbnQgZm9yIGNvdW50aW5nIGNoYXJhY3RlcnMgdHlwZWQgaW5zaWRlIGEgZm9ybSBlbGVtZW50XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWNoYXItY291bnRlci11aScsXG4gIHRlbXBsYXRlVXJsOiAnLi9jaGFyLWNvdW50ZXIuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBDaGFyQ291bnRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgLyoqXG4gICAqIFBhc3NlZCB2YWx1ZSBmcm9tIHBhcmVudCBpbnB1dCwgaXQgZ2l2ZXMgb3B0aW9uIHRvIGNvdW50XG4gICAqIGNoYXIgZXZlbnQgaWYgdmFsdWUgd2FzIHByb2dyYW1tYXRpY2FsbHkgY2hhbmdlZFxuICAgKi9cbiAgQElucHV0KCkgaW5wdXRWYWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogVGhlIGVsZW1lbnQgcmVmZXJlbmNlIHdoaWNoIHRoZSBjaGFyYWN0ZXJzIGFyZSB0eXBlZCBpbi5cbiAgICovXG4gIEBJbnB1dCgpIGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogSW5kaWNhdG9yIGZvciBtYXhpbXVtIGNoYXJhY3RlciBjb3VudC5cbiAgICovXG4gIEBJbnB1dCgpIG1heExlbmd0aCA9IDE1MDtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGVsZW1lbnQgc2hvdWxkIGJlIGJsb2NrZWQgd2hlbiBtYXhpbXVtIGNoYXJhY3RlciBjb3VudCBpcyByZWFjaGVkLlxuICAgKi9cbiAgQElucHV0KCkgc2V0IGJsb2NrVHlwaW5nKHZhbDogYm9vbGVhbikge1xuICAgIHRoaXMuX2Jsb2NrVHlwaW5nID0gdmFsO1xuICAgIGlmICh0aGlzLmJsb2NrVHlwaW5nICYmIHRoaXMuZWxlbWVudCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50LCAnbWF4bGVuZ3RoJywgdGhpcy5tYXhMZW5ndGgudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxlbWVudCwgJ21heGxlbmd0aCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBibG9ja1R5cGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tUeXBpbmc7XG4gIH1cbiAgcHJpdmF0ZSBfYmxvY2tUeXBpbmcgPSBmYWxzZTtcbiAgY291bnRlciA9IDA7XG4gIHZhbGlkID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgcmVhZG9ubHkgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmJsb2NrVHlwaW5nICYmIHRoaXMuZWxlbWVudCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50LCAnbWF4bGVuZ3RoJywgdGhpcy5tYXhMZW5ndGgudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgLy8gQ292ZXIgYnkgc2V0VGltZW91dCBmb3IgaGFuZGxpbmcgdmFsdWUgY2hhbmdlIGluIGlucHV0L3RleHRhcmVhXG4gICAgLy8gVGhpcyBjaGFuZ2UgY2Fubm90IGJlIGNoZWNrZWQgYnkgbGlmZWN5Y2xlIGhvb2tzLlxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jYWxjdWxhdGVFbGVtZW50VmFsdWUoKTtcbiAgICB9LCAwKTtcblxuICAgIHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMuZWxlbWVudCwgJ2lucHV0JywgKCkgPT4gdGhpcy5jYWxjdWxhdGVFbGVtZW50VmFsdWUoKSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgeyBpbnB1dFZhbHVlIH0gPSBjaGFuZ2VzO1xuICAgIGlmIChpbnB1dFZhbHVlICYmIGlucHV0VmFsdWUucHJldmlvdXNWYWx1ZSAhPT0gaW5wdXRWYWx1ZS5jdXJyZW50VmFsdWUpIHtcbiAgICAgIHRoaXMuY291bnRlciA9IGlucHV0VmFsdWUuY3VycmVudFZhbHVlLmxlbmd0aDtcbiAgICAgIHRoaXMudmFsaWQgPSB0aGlzLmNvdW50ZXIgPD0gdGhpcy5tYXhMZW5ndGg7XG4gICAgfVxuICB9XG4gIC8vIEl0IHNob3VsZCBiZSBkZXByZWNhdGVkLCBiZWNhdXNlIGl0IGRvZXNuJ3QgYWxsb3cgdG8gY291bnRcbiAgLy8gdmFsdWUgdGhhdCB3YXMgdXBkYXRlZCBwcm9ncmFtbWF0aWNhbGx5LCBmb3IgaW5zdGFuY2UgYnkgcGF0Y2hWYWx1ZVxuICBjYWxjdWxhdGVFbGVtZW50VmFsdWUoKTogdm9pZCB7XG4gICAgdGhpcy5jb3VudGVyID0gdGhpcy5lbGVtZW50ID8gdGhpcy5lbGVtZW50LnZhbHVlLmxlbmd0aCA6IDA7XG4gICAgdGhpcy52YWxpZCA9IHRoaXMuY291bnRlciA8PSB0aGlzLm1heExlbmd0aDtcbiAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImJiLWNoYXItY291bnRlclwiIFtjbGFzcy5iYi1jaGFyLWNvdW50ZXItLWludmFsaWRdPVwiIXZhbGlkXCI+XG4gIDxkaXYgW25nU3dpdGNoXT1cInRydWVcIiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBjbGFzcz1cInNyLW9ubHlcIiBhcmlhLWF0b21pYz1cInRydWVcIiByb2xlPVwibG9nXCI+XG4gICAgPGRpdlxuICAgICAgKm5nU3dpdGNoQ2FzZT1cImNvdW50ZXIgPiBtYXhMZW5ndGggLSA0ICYmIGNvdW50ZXIgIT09IG1heExlbmd0aFwiXG4gICAgICBpMThuPVwiXG4gICAgICAgIEFib3ZlIHRvIHJlYWNoIE1heCBMZW5ndGggRXJyb3J8U3RyaW5nIGlzIGFsbW9zdCBoYXMgJ21heExlbmd0aCcgY2hhcmFjdGVycy5cbiAgICAgICAgQEBiYi1jaGFyLWNvdW50ZXItdWkucHJlLW1heC1sZW5ndGgtd2FybmluZ1wiXG4gICAgPlxuICAgICAgWW91IGNhbiB0eXBlIG9ubHkge3sgbWF4TGVuZ3RoIC0gY291bnRlciB9fSBtb3JlIGNoYXJhY3RlcnMgaW4gdGhpcyBmaWVsZC5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2XG4gICAgICAqbmdTd2l0Y2hDYXNlPVwiY291bnRlciA9PT0gbWF4TGVuZ3RoXCJcbiAgICAgIFthdHRyLmRhdGEtcm9sZV09XCInY2hhci1jb3VudGVyLWVycm9yLW1lc3NhZ2UnXCJcbiAgICAgIGkxOG49XCJNYXggTGVuZ3RoIEVycm9yfFN0cmluZyBpcyBtb3JlIHRoYW4gJ21heExlbmd0aCcgY2hhcmFjdGVycy4gQEBiYi1jaGFyLWNvdW50ZXItdWkubWF4LWxlbmd0aC13YXJuaW5nXCJcbiAgICA+XG4gICAgICBMaW1pdCByZWFjaGVkLiBZb3UgY2FuIG9ubHkgdXNlIHt7IG1heExlbmd0aCB9fSBjaGFyYWN0ZXJzIGluIHRoaXMgZmllbGQuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4gIDxkaXYgKm5nSWY9XCJlbGVtZW50XCIgW2F0dHIuZGF0YS1yb2xlXT1cIidjaGFyLWNvdW50ZXItY3VycmVudC1tYXgnXCI+e3sgY291bnRlciB9fS97eyBtYXhMZW5ndGggfX08L2Rpdj5cbjwvZGl2PlxuIl19