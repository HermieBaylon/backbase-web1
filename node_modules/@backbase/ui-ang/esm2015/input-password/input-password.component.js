import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, Self, Optional, } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
import * as i2 from "@backbase/foundation-ang/future";
import * as i3 from "@angular/forms";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/focus";
import * as i7 from "@backbase/ui-ang/button";
/**
 * @name InputPasswordComponent
 *
 * @description
 * Component that displays a password input
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * visibilityControlLabel is discernible text for show/hide password button.
 * ariaLabel is discernible text for password input
 */
export class InputPasswordComponent extends InputBaseComponent {
    constructor(domAttrService, elem, renderer2, cd, deprecationsService, parentFormControl) {
        super(cd, deprecationsService);
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        this.parentFormControl = parentFormControl;
        /**
         * The placeholder for the password input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Whether the password input is readonly.
         */
        this.readonly = false;
        /**
         * Whether to show the visibility button icon after the text.
         */
        this.showVisibilityControl = false;
        /**
         * Whether to show password in plain text.
         */
        this.showPassword = false;
        /**
         * The aria label used when the visibility button is in focus.
         */
        this.visibilityControlLabel = 'Show/Hide password button';
        /**
         * Aria label for the password input
         */
        this.ariaLabel = 'Password Input';
        /**
         * The event emitter called when the visibility button is clicked.
         */
        this.toggleVisibility = new EventEmitter();
        if (this.parentFormControl) {
            this.parentFormControl.valueAccessor = this;
        }
    }
    ngAfterViewInit() {
        if (!this.ariaLabel) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);
        }
    }
    onVisibilityChange() {
        this.showPassword = !this.showPassword;
        this.toggleVisibility.emit(this.showPassword);
    }
}
InputPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }, { token: i3.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
InputPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputPasswordComponent, selector: "bb-input-password-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", minLength: "minLength", readonly: "readonly", autocomplete: "autocomplete", showVisibilityControl: "showVisibilityControl", showPassword: "showPassword", visibilityControlLabel: "visibilityControlLabel", ariaLabel: "ariaLabel" }, outputs: { toggleVisibility: "toggleVisibility" }, viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputPassword"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-input-password\"\n  [ngClass]=\"{ 'ng-invalid': parentFormControl?.invalid, 'ng-touched': parentFormControl?.touched }\"\n>\n  <label *ngIf=\"label\" for=\"{{ id }}\">{{ label }}</label>\n  <div class=\"input-group\">\n    <input\n      id=\"{{ id }}\"\n      #inputPassword\n      [attr.aria-autocomplete]=\"ariaAutocomplete\"\n      [attr.aria-controls]=\"ariaControls\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-describedby]=\"ariaDescribedby\"\n      [attr.aria-expanded]=\"ariaExpanded\"\n      [attr.aria-activedescendant]=\"ariaActivedescendant\"\n      [attr.role]=\"role\"\n      [attr.aria-invalid]=\"ariaInvalid\"\n      [attr.aria-owns]=\"ariaOwns\"\n      [attr.aria-label]=\"(!label && ariaLabel) || null\"\n      [ngModel]=\"value\"\n      (ngModelChange)=\"onValueChange($event)\"\n      (blur)=\"onBlur()\"\n      [type]=\"showPassword ? 'text' : 'password'\"\n      class=\"form-control bb-input-password__input\"\n      (focus)=\"onFocus()\"\n      [disabled]=\"disabled\"\n      [readonly]=\"readonly\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [bbFocus]=\"autofocus\"\n      [attr.autocomplete]=\"autocomplete\"\n      [attr.maxlength]=\"maxLength\"\n      [attr.minlength]=\"minLength\"\n    />\n    <div *ngIf=\"showVisibilityControl\" class=\"input-group-append\">\n      <button\n        bbButton\n        (click)=\"onVisibilityChange()\"\n        color=\"link\"\n        [attr.aria-label]=\"visibilityControlLabel\"\n        class=\"bb-input-password__visibility-toggle-button\"\n        data-role=\"bb-input-password-visibility-toggle-button\"\n      >\n        <bb-icon-ui [name]=\"showPassword ? 'visibility-off' : 'visibility'\" size=\"md\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n</div>\n", components: [{ type: i4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i6.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }, { type: i3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i3.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPasswordComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-password-ui',
                    templateUrl: './input-password.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }, { type: i3.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }]; }, propDecorators: { placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], readonly: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], showVisibilityControl: [{
                type: Input
            }], showPassword: [{
                type: Input
            }], visibilityControlLabel: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], toggleVisibility: [{
                type: Output
            }], inputEl: [{
                type: ViewChild,
                args: ['inputPassword']
            }] } });
//# sourceMappingURL=data:application/json;base64,