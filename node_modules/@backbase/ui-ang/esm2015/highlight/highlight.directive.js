import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
export const DEFAULT_POSITIVE_CLASS = 'bb-amount--positive';
export const DEFAULT_NEGATIVE_CLASS = 'bb-amount--negative';
/**
 * @name HighlightDirective
 *
 * @description
 * Directive that encapsulate logic for highlighting positive/negative numbers.
 * Example usage with bb-amount-ui (AmountModule)
 */
export class HighlightDirective {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        /**
         * The class for positive value.
         */
        this.negativeClass = DEFAULT_NEGATIVE_CLASS;
        /**
         * The class for negative value.
         */
        this.positiveClass = DEFAULT_POSITIVE_CLASS;
        this.amountValue = 0;
        this.highlightValue = true;
    }
    /**
     * Setter (Input) for value of highlighted number
     *
     * @param amount Value of highlighted number
     */
    set amount(amount) {
        this.amountValue = typeof amount === 'number' ? amount : parseFloat(amount);
    }
    /**
     * Setter (Input) that turn on/off highlight
     *
     * @param value Highlight flag
     */
    set bbHighlight(value) {
        this.highlightValue = value === '' || value;
    }
    get isPositive() {
        return this.amountValue >= 0;
    }
    ngOnChanges(change) {
        if (change.negativeClass) {
            this.renderer.removeClass(this.elementRef.nativeElement, change.negativeClass.previousValue);
        }
        if (change.positiveClass) {
            this.renderer.removeClass(this.elementRef.nativeElement, change.positiveClass.previousValue);
        }
        if (change.amount || change.highlight || change.bbHighlight) {
            this.renderer.removeClass(this.elementRef.nativeElement, this.negativeClass);
            this.renderer.removeClass(this.elementRef.nativeElement, this.positiveClass);
        }
        if (this.highlightValue) {
            const highlight = this.isPositive ? this.positiveClass : this.negativeClass;
            this.renderer.addClass(this.elementRef.nativeElement, highlight);
        }
    }
}
HighlightDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
HighlightDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: HighlightDirective, selector: "[bbHighlight]", inputs: { amount: "amount", bbHighlight: "bbHighlight", negativeClass: "negativeClass", positiveClass: "positiveClass" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HighlightDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbHighlight]',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { amount: [{
                type: Input
            }], bbHighlight: [{
                type: Input
            }], negativeClass: [{
                type: Input
            }], positiveClass: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvdWktYW5nL2hpZ2hsaWdodC9oaWdobGlnaHQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUF1QyxNQUFNLGVBQWUsQ0FBQzs7QUFFbEcsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcscUJBQXFCLENBQUM7QUFDNUQsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcscUJBQXFCLENBQUM7QUFFNUQ7Ozs7OztHQU1HO0FBSUgsTUFBTSxPQUFPLGtCQUFrQjtJQWlDN0IsWUFBNkIsUUFBbUIsRUFBbUIsVUFBc0I7UUFBNUQsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFtQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBWnpGOztXQUVHO1FBQ00sa0JBQWEsR0FBRyxzQkFBc0IsQ0FBQztRQUNoRDs7V0FFRztRQUNNLGtCQUFhLEdBQUcsc0JBQXNCLENBQUM7UUFFeEMsZ0JBQVcsR0FBRyxDQUFDLENBQUM7UUFDaEIsbUJBQWMsR0FBRyxJQUFJLENBQUM7SUFFOEQsQ0FBQztJQWhDN0Y7Ozs7T0FJRztJQUNILElBQ0ksTUFBTSxDQUFDLE1BQXVCO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQ0ksV0FBVyxDQUFDLEtBQW1CO1FBQ2pDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUM7SUFDOUMsQ0FBQztJQWdCRCxJQUFZLFVBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQXFCO1FBQy9CLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzlGO1FBRUQsSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUY7UUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO1lBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM3RSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUU7UUFFRCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUM1RSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNsRTtJQUNILENBQUM7O2dIQXpEVSxrQkFBa0I7b0dBQWxCLGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUg5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjt5SEFRSyxNQUFNO3NCQURULEtBQUs7Z0JBV0YsV0FBVztzQkFEZCxLQUFLO2dCQVFHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBSUcsYUFBYTtzQkFBckIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BPU0lUSVZFX0NMQVNTID0gJ2JiLWFtb3VudC0tcG9zaXRpdmUnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfTkVHQVRJVkVfQ0xBU1MgPSAnYmItYW1vdW50LS1uZWdhdGl2ZSc7XG5cbi8qKlxuICogQG5hbWUgSGlnaGxpZ2h0RGlyZWN0aXZlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEaXJlY3RpdmUgdGhhdCBlbmNhcHN1bGF0ZSBsb2dpYyBmb3IgaGlnaGxpZ2h0aW5nIHBvc2l0aXZlL25lZ2F0aXZlIG51bWJlcnMuXG4gKiBFeGFtcGxlIHVzYWdlIHdpdGggYmItYW1vdW50LXVpIChBbW91bnRNb2R1bGUpXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkhpZ2hsaWdodF0nLFxufSlcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvKipcbiAgICogU2V0dGVyIChJbnB1dCkgZm9yIHZhbHVlIG9mIGhpZ2hsaWdodGVkIG51bWJlclxuICAgKlxuICAgKiBAcGFyYW0gYW1vdW50IFZhbHVlIG9mIGhpZ2hsaWdodGVkIG51bWJlclxuICAgKi9cbiAgQElucHV0KClcbiAgc2V0IGFtb3VudChhbW91bnQ6IHN0cmluZyB8IG51bWJlcikge1xuICAgIHRoaXMuYW1vdW50VmFsdWUgPSB0eXBlb2YgYW1vdW50ID09PSAnbnVtYmVyJyA/IGFtb3VudCA6IHBhcnNlRmxvYXQoYW1vdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXR0ZXIgKElucHV0KSB0aGF0IHR1cm4gb24vb2ZmIGhpZ2hsaWdodFxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgSGlnaGxpZ2h0IGZsYWdcbiAgICovXG4gIEBJbnB1dCgpXG4gIHNldCBiYkhpZ2hsaWdodCh2YWx1ZTogYm9vbGVhbiB8ICcnKSB7XG4gICAgdGhpcy5oaWdobGlnaHRWYWx1ZSA9IHZhbHVlID09PSAnJyB8fCB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgY2xhc3MgZm9yIHBvc2l0aXZlIHZhbHVlLlxuICAgKi9cbiAgQElucHV0KCkgbmVnYXRpdmVDbGFzcyA9IERFRkFVTFRfTkVHQVRJVkVfQ0xBU1M7XG4gIC8qKlxuICAgKiBUaGUgY2xhc3MgZm9yIG5lZ2F0aXZlIHZhbHVlLlxuICAgKi9cbiAgQElucHV0KCkgcG9zaXRpdmVDbGFzcyA9IERFRkFVTFRfUE9TSVRJVkVfQ0xBU1M7XG5cbiAgcHJpdmF0ZSBhbW91bnRWYWx1ZSA9IDA7XG4gIHByaXZhdGUgaGlnaGxpZ2h0VmFsdWUgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIHByaXZhdGUgZ2V0IGlzUG9zaXRpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYW1vdW50VmFsdWUgPj0gMDtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZTogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2UubmVnYXRpdmVDbGFzcykge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgY2hhbmdlLm5lZ2F0aXZlQ2xhc3MucHJldmlvdXNWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZS5wb3NpdGl2ZUNsYXNzKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBjaGFuZ2UucG9zaXRpdmVDbGFzcy5wcmV2aW91c1ZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlLmFtb3VudCB8fCBjaGFuZ2UuaGlnaGxpZ2h0IHx8IGNoYW5nZS5iYkhpZ2hsaWdodCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5uZWdhdGl2ZUNsYXNzKTtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMucG9zaXRpdmVDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGlnaGxpZ2h0VmFsdWUpIHtcbiAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHRoaXMuaXNQb3NpdGl2ZSA/IHRoaXMucG9zaXRpdmVDbGFzcyA6IHRoaXMubmVnYXRpdmVDbGFzcztcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGhpZ2hsaWdodCk7XG4gICAgfVxuICB9XG59XG4iXX0=