import { ChangeDetectionStrategy, Component, forwardRef, Input, ViewChild, } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgSelectComponent } from '@ng-select/ng-select';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/services";
import * as i2 from "@backbase/foundation-ang/future";
import * as i3 from "@ng-select/ng-select";
import * as i4 from "@backbase/ui-ang/search-box";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "@backbase/ui-ang/focus";
import * as i9 from "./country-flag-pipe";
export class InputPhoneComponent extends InputBaseComponent {
    constructor(domAttrService, elem, renderer2, cd, deprecationsService) {
        super(cd, deprecationsService);
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        this.cd = cd;
        this.deprecationsService = deprecationsService;
        /**
         * The placeholder for the phone input. Defaults to an empty string;
         */
        this.placeholder = '';
        /**
         * Whether the phone input is readonly.
         */
        this.readonly = false;
        /**
         * Aria label for the phone input
         */
        this.ariaLabel = 'Phone Input';
        /**
         * Allow to clear selected value.
         */
        this.clearable = false;
        /**
         * Allow to search for value.
         */
        this.searchable = false;
        /**
         * Enable/Disable Country code dropdown
         */
        this.enableCountryCode = false;
        this.resultCount = 0;
        this._statusId = this.domAttrService.generateId();
    }
    get statusId() {
        return this._statusId;
    }
    constructCountryData() {
        if (this.enableCountryCode && this.countryList) {
            this.countryDropdowndisabled = this.countryList.length === 1;
            if (!this.countryDropdowndisabled) {
                const defaultCountry = this.countryList.find((city) => city.isoCode === this.defaultCountryIsoCode);
                this.defaultCountryCode = defaultCountry === null || defaultCountry === void 0 ? void 0 : defaultCountry.countryCode;
                this.defaultCountryName = defaultCountry === null || defaultCountry === void 0 ? void 0 : defaultCountry.countryName;
            }
            else {
                this.defaultCountryCode = this.countryList[0].countryCode;
                this.defaultCountryName = this.countryList[0].countryName;
            }
        }
    }
    ngAfterViewInit() {
        if (!this.ariaLabel) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl && this.inputEl.nativeElement, this.renderer2);
        }
        this.constructCountryData();
    }
    onChanges(event) {
        this.defaultCountryName = event.countryName;
    }
    onClose() {
        if (this.ngSelect && !this.ngSelect.isOpen) {
            this.ngSelect.constructor.prototype.focus.call(this.ngSelect);
        }
    }
    onClear() {
        this.onFilterChange(undefined);
    }
    onFilterChange(query) {
        if (this.ngSelect) {
            this.ngSelect.filter(query || '');
        }
        this.updateResultCount();
    }
    updateResultCount() {
        var _a;
        this.resultCount = ((_a = this.ngSelect) === null || _a === void 0 ? void 0 : _a.itemsList.filteredItems.filter(({ children }) => !children).length) || 0;
    }
    searchFunc(term, item) {
        term = term.toLocaleLowerCase();
        return (item.countryCode.toLocaleLowerCase().indexOf(term) > -1 ||
            item.countryName.toLocaleLowerCase().indexOf(term) > -1 ||
            item.isoCode.toLocaleLowerCase().indexOf(term) > -1);
    }
}
InputPhoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneComponent, deps: [{ token: i1.DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
InputPhoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputPhoneComponent, selector: "bb-input-phone-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", minLength: "minLength", readonly: "readonly", ariaLabel: "ariaLabel", autocomplete: "autocomplete", countryList: "countryList", dropdownPosition: "dropdownPosition", clearable: "clearable", searchable: "searchable", defaultCountryIsoCode: "defaultCountryIsoCode", enableCountryCode: "enableCountryCode" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => InputPhoneComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputPhone"], descendants: true }, { propertyName: "ngSelect", first: true, predicate: NgSelectComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<label *ngIf=\"label\" for=\"{{ id }}\">{{ label }}</label>\n<div class=\"bb-phone\">\n  <ng-select\n    #countryCodeSelector\n    *ngIf=\"enableCountryCode\"\n    (change)=\"onChanges($event)\"\n    (close)=\"onClose()\"\n    [dropdownPosition]=\"dropdownPosition\"\n    [clearable]=\"clearable\"\n    [searchable]=\"searchable\"\n    [items]=\"countryList\"\n    [(ngModel)]=\"defaultCountryCode\"\n    bindLabel=\"countryCode\"\n    bindValue=\"countryCode\"\n    [searchFn]=\"searchFunc\"\n    [readonly]=\"countryDropdowndisabled\"\n    class=\"bb-phone-country-code\"\n    [attr.aria-label]=\"defaultCountryCode + ' ' + defaultCountryName\"\n  >\n    <ng-template ng-label-tmp let-item=\"item\">\n      <i class=\"flag-icon\" [ngClass]=\"item.isoCode | countryFlag\" aria-hidden=\"true\"> </i>\n      {{ item.countryCode }}\n    </ng-template>\n    <ng-template ng-header-tmp>\n      <bb-search-box-ui\n        (clear)=\"onClear()\"\n        (valueChange)=\"onFilterChange($event)\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autofocus]=\"true\"\n        placeholder=\"Search\"\n        i18n-placeholder=\"Search|Search placeholder@@bb-input-phone-ui.search.placeholder\"\n        [aria-controls]=\"statusId\"\n        [aria-expanded]=\"ngSelect?.isOpen\"\n        [aria-owns]=\"ngSelect?.isOpen ? ngSelect?.dropdownId : null\"\n        [aria-activedescendant]=\"ngSelect?.isOpen ? ngSelect?.itemsList?.markedItem?.htmlId : null\"\n      ></bb-search-box-ui>\n      <div\n        [id]=\"statusId\"\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n        class=\"sr-only\"\n        role=\"status\"\n        i18n=\"\n          Number of options|Screen reader description of the number of options after filtering the\n          combobox@@bb-input-phone-ui.options.count\"\n      >\n        {{ resultCount }} options\n      </div>\n    </ng-template>\n    <ng-template ng-option-tmp let-item=\"item\" let-index=\"index\" let-search=\"searchTerm\">\n      <div class=\"dropdown-option-item\">\n        <i class=\"flag-icon col-md-1\" [ngClass]=\"item.isoCode | countryFlag\" aria-hidden=\"true\"> </i>\n        <span class=\"col-md-3 pr-0\">{{ item.countryCode }}</span\n        >&nbsp;\n        <span class=\"col-md-6 px-0 dropdown-option-item__country-name\">{{ item.countryName }}</span>\n        <bb-icon-ui\n          class=\"col-md-2 px-0\"\n          *ngIf=\"this.ngSelect?.itemsList.items[index].selected\"\n          name=\"check\"\n          color=\"color-neutral-dark\"\n        >\n        </bb-icon-ui>\n      </div>\n    </ng-template>\n  </ng-select>\n\n  <input\n    id=\"{{ id }}\"\n    #inputPhone\n    [attr.aria-autocomplete]=\"ariaAutocomplete\"\n    [attr.aria-controls]=\"ariaControls\"\n    [attr.aria-describedby]=\"ariaDescribedby ? ariaDescribedby : id + '-country-code'\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [attr.aria-expanded]=\"ariaExpanded\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    [attr.role]=\"role\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-owns]=\"ariaOwns\"\n    [attr.aria-label]=\"(!label && ariaLabel) || null\"\n    [ngModel]=\"value\"\n    (ngModelChange)=\"onValueChange($event)\"\n    (blur)=\"onBlur()\"\n    type=\"tel\"\n    class=\"form-control\"\n    (focus)=\"onFocus()\"\n    [disabled]=\"disabled\"\n    [readOnly]=\"readonly\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [attr.maxlength]=\"maxLength\"\n    [attr.minlength]=\"minLength\"\n    [attr.size]=\"size\"\n    [bbFocus]=\"autofocus\"\n    [ngClass]=\"inputClassName\"\n    [attr.autocomplete]=\"autocomplete\"\n  />\n  <div id=\"{{ id }}-country-code\" class=\"sr-only\" *ngIf=\"!ariaDescribedby && countryDropdowndisabled\">\n    <span\n      i18n=\"\n        Selected Country is|Selected Country is group By label\n        @@bb-account-selector-ui.groupBy.selected-country-is.label\"\n      >Selected Country is </span\n    >{{ defaultCountryName }}\n    <span i18n=\"and code is|and code is group By label @@bb-account-selector-ui.groupBy.and-code-is.label\"\n      >and code is </span\n    >{{ defaultCountryCode }}\n  </div>\n</div>\n", components: [{ type: i3.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i4.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.ɵh, selector: "[ng-label-tmp]" }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.ɵj, selector: "[ng-header-tmp]" }, { type: i3.ɵf, selector: "[ng-option-tmp]" }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i7.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { type: i8.FocusDirective, selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }], pipes: { "countryFlag": i9.CountryFlagPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InputPhoneComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-phone-ui',
                    templateUrl: './input-phone.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => InputPhoneComponent),
                            multi: true,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.DeprecationsService }]; }, propDecorators: { placeholder: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], readonly: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], countryList: [{
                type: Input
            }], dropdownPosition: [{
                type: Input
            }], clearable: [{
                type: Input
            }], searchable: [{
                type: Input
            }], defaultCountryIsoCode: [{
                type: Input
            }], enableCountryCode: [{
                type: Input
            }], inputEl: [{
                type: ViewChild,
                args: ['inputPhone']
            }], ngSelect: [{
                type: ViewChild,
                args: [NgSelectComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,