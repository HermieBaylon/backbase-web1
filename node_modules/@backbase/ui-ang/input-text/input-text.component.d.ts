import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name InputTextComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that displays a text input.
 */
export declare class InputTextComponent extends InputBaseComponent implements AfterViewInit {
    private readonly domAttrService;
    private readonly elem;
    private readonly renderer2;
    protected readonly cd: ChangeDetectorRef;
    protected readonly deprecationsService: DeprecationsService;
    /**
     * The placeholder for the text input. Defaults to an empty string;
     */
    placeholder: string;
    /**
     * The maxLength for the text input.
     */
    maxLength: number | undefined;
    /**
     * The minLength for the text input.
     */
    minLength: number | undefined;
    autocomplete: string | undefined;
    /**
     * Whether the text input is readonly.
     */
    readonly: boolean;
    /**
     * ngx-mask related; default value imply no mask is used
     */
    mask: string;
    /**
     * ngx-mask related; default value imply validation is applied on mask pattern
     */
    maskValidator: boolean;
    /**
     * Shows character counter based on `maxLength`
     */
    showCharCounter: boolean;
    valueChange: EventEmitter<any>;
    charCounterId: string;
    /**
     * Utility function for use in template
     */
    idListAttr: (...tokens: any[]) => string | undefined;
    inputEl: ElementRef | undefined;
    constructor(domAttrService: DomAttributesService, elem: ElementRef, renderer2: Renderer2, cd: ChangeDetectorRef, deprecationsService: DeprecationsService);
    ngAfterViewInit(): void;
    focusEditableElement(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputTextComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputTextComponent, "bb-input-text-ui", never, { "placeholder": "placeholder"; "maxLength": "maxLength"; "minLength": "minLength"; "autocomplete": "autocomplete"; "readonly": "readonly"; "mask": "mask"; "maskValidator": "maskValidator"; "showCharCounter": "showCharCounter"; }, { "valueChange": "valueChange"; }, never, never>;
}
