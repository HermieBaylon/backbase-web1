"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rule_1 = require("../utils/rule");
const eslint_1 = require("../utils/eslint");
const manualProcess = `

## Install '@backbase/ui-ang' latest version

Install @backbase/ui-ang latest version as a dependency using the following command:

    npm install --save @backbase/ui-ang@latest


## Import directly from '@backbase/ui-ang' to be restricted from eslint

All the imports from @backbase/ui-ang will throw a warning. As the eslint rule is added in .eslintrc.json:

    {overrides: {
      rules: {
        "space-before-function-paren": "off",
        "@typescript-eslint/naming-convention": "off",
        "@angular-eslint/no-output-native": "off",
      }
    }}

should become:
{overrides: {
  rules: {
    "space-before-function-paren": "off",
    "@typescript-eslint/naming-convention": "off",
    "@angular-eslint/no-output-native": "off",
    "no-restricted-imports": ["warning", {
      paths: [{
        name: "@backbase/ui-ang",
        message: "@backbase/ui-ang import is deprecated.Please use secondary imports instead."}],
    }
  }
}}

`;
function default_1() {
    return rule_1.tryRule((tree) => {
        var _a, _b, _c;
        const eslint = eslint_1.getEsLint(tree);
        if (eslint) {
            const preExistingRestrictedImports = ((_c = (_b = (_a = eslint.overrides) === null || _a === void 0 ? void 0 : _a[0].rules) === null || _b === void 0 ? void 0 : _b['no-restricted-imports']) === null || _c === void 0 ? void 0 : _c[1]) || [];
            const newOverridden = Object.assign(Object.assign({}, eslint.overrides[0]), { rules: Object.assign(Object.assign({}, eslint.overrides[0].rules), {
                    'no-restricted-imports': [
                        'error',
                        Object.assign(Object.assign({}, preExistingRestrictedImports), { paths: [
                                ...((preExistingRestrictedImports === null || preExistingRestrictedImports === void 0 ? void 0 : preExistingRestrictedImports.paths) || []),
                                {
                                    name: '@backbase/ui-ang',
                                    message: 'Please use secondary imports instead.',
                                },
                            ] }),
                    ],
                }) });
            const finalOverride = [...eslint.overrides].reduce((final, overridden) => {
                if (overridden.files.includes('*.ts')) {
                    overridden = Object.assign(Object.assign({}, overridden), newOverridden);
                }
                final.push(overridden);
                return final;
            }, []);
            const newEsLint = Object.assign(Object.assign({}, eslint), { overrides: [...finalOverride] });
            tree.overwrite('./.eslintrc.json', JSON.stringify(newEsLint, null, 2));
        }
    }, manualProcess);
}
exports.default = default_1;
//# sourceMappingURL=7.0.0.js.map