"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const collectionPath = path.join(__dirname, '../../migrations.json');
const packageJsonPath = '/package.json';
const packageJson = `
{
  "scripts": {
    "update": "ng update @bb-cli/schematics@2"
  },
  "dependencies": {
    "@backbase/foundation-ang": "^4.12.0"
  }
}
`;
const angularJsonPath = `/angular.json`;
const angularJson = `{
  "version": 1,
  "projects": {
    "my-example-app": {
      "projectType": "application",
      "root": "apps/my-example-app",
      "sourceRoot": "apps/my-example-app/src",
      "architect": {
        "serve": {},
        "build": {
          "configurations": {}
        }
      }
    }
  }
}`;
const esLintJson = `{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/ng-cli-compat",
        "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "plugins": [
        "eslint-plugin-no-null"
      ],
      "rules": {
        "space-before-function-paren": "off",
        "@typescript-eslint/naming-convention": "off",
        "@angular-eslint/no-output-native": "off",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "extendDefaults": true,
            "types": {
              "object": false,
              "Object": false,
              "Function": false
            }
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "bb",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "bb",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/no-input-rename": "off",
        "@typescript-eslint/array-type": [
          "off",
          {
            "default": "array"
          }
        ],
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/explicit-member-accessibility": [
          "off",
          {
            "accessibility": "explicit"
          }
        ],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "arrow-parens": [
          "off",
          "always"
        ],
        "comma-dangle": [
          "error",
          "always-multiline"
        ],
        "complexity": [
          "error",
          {
            "max": 10
          }
        ],
        "curly": "off",
        "id-blacklist": "off",
        "id-match": "off",
        "linebreak-style": [
          "error",
          "unix"
        ],
        "max-len": [
          "error",
          {
            "ignorePattern": "^import [^,]+ from |^export | implements",
            "code": 120,
            "ignoreStrings": true
          }
        ],
        "no-multiple-empty-lines": [
          "error",
          {
            "max": 1
          }
        ],
        "no-null/no-null": "off",
        "no-redeclare": "error",
        "no-template-curly-in-string": "error",
        "no-underscore-dangle": "off",
        "object-shorthand": "off",
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "prev": "*",
            "next": "return"
          }
        ],
        "prefer-arrow/prefer-arrow-functions": "off",
        "prefer-template": "off",
        "@typescript-eslint/member-ordering": "off",
        "no-restricted-imports": [
          "error",
          {
            "patterns": [
              {
                "group": ["@backbase/ui-ang"],
                "message": "Do the right thing"
              }
            ]
          }
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {
        "@angular-eslint/template/no-autofocus": "off",
        "@angular-eslint/template/no-positive-tabindex": "error"
      }
    }
  ]
}
`;
const esLintJsonPath = `/.eslintrc.json`;
describe('7.0.0', () => {
    let tree;
    let runner;
    beforeEach(() => {
        tree = schematics_1.Tree.empty();
        tree.create(esLintJsonPath, esLintJson);
        tree.create(angularJsonPath, angularJson);
        tree.create(packageJsonPath, packageJson);
        runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    });
    it('should  update eslintrc.json', () => __awaiter(void 0, void 0, void 0, function* () {
        const updatedTree = yield runner.runSchematicAsync('7.0.0', {}, tree).toPromise();
        const eslintFile = updatedTree.readContent(esLintJsonPath);
        expect(eslintFile).toContain(`"no-restricted-imports"`);
    }));
    it('should  update eslintrc.json with existing no-restricted-imports', () => __awaiter(void 0, void 0, void 0, function* () {
        const updatedTree = yield runner.runSchematicAsync('7.0.0', {}, tree).toPromise();
        const eslintFile = JSON.parse(updatedTree.readContent(esLintJsonPath));
        const error = [
            'error',
            {
                patterns: [
                    {
                        group: ['@backbase/ui-ang'],
                        message: 'Do the right thing',
                    },
                ],
                paths: [
                    {
                        name: '@backbase/ui-ang',
                        message: 'Please use secondary imports instead.',
                    },
                ],
            },
        ];
        expect(eslintFile.overrides[0].rules['no-restricted-imports']).toEqual(error);
    }));
});
//# sourceMappingURL=7.0.0_spec.js.map