"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.update = void 0;
const package_utils_1 = require("../utils/package-utils");
const ui_ang_map_1 = require("../utils/ui-ang-map");
const ts_morph_1 = require("ts-morph");
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
function update(_options) {
    return (tree, _context) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield package_utils_1.getWorkspace(tree);
        const astProject = new ts_morph_1.Project({
            manipulationSettings: {
                indentationText: ts_morph_1.IndentationText.TwoSpaces,
                quoteKind: ts_morph_1.QuoteKind.Single,
            },
        });
        workspace.projects.forEach((project) => {
            if (!project.sourceRoot)
                return;
            tree.getDir(project.sourceRoot).visit((path) => {
                if (!path.endsWith('.ts'))
                    return;
                const buffer = tree.read(path);
                const file = astProject.createSourceFile(path, (buffer === null || buffer === void 0 ? void 0 : buffer.toString('utf-8')) || '', {
                    overwrite: true,
                });
                const isOverwritten = processImport(file);
                if (isOverwritten) {
                    tree.overwrite(path, file.getText());
                }
            });
        });
    });
    function processImport(file) {
        const allImport = file.getImportDeclarations();
        const uiAngImports = allImport.filter((imports) => imports.getModuleSpecifier().getText().replace(/['"]/g, '') === '@backbase/ui-ang');
        const organizedImports = organizeImports(uiAngImports);
        organizedImports.forEach((namedImports, moduleSpecifier) => {
            file.addImportDeclaration({ namedImports, moduleSpecifier });
        });
        uiAngImports.forEach((uiAngImport) => {
            uiAngImport.remove();
        });
        return uiAngImports.length > 0;
    }
    function organizeImports(imports) {
        var _a;
        const result = new Map();
        for (const moduleImport of imports) {
            for (const moduleName of moduleImport.getNamedImports()) {
                const modulePath = ui_ang_map_1.uiAngMap.get(((_a = moduleName.getFirstChildByKind(ts_morph_1.SyntaxKind.Identifier)) === null || _a === void 0 ? void 0 : _a.getText()) || '');
                const moduleResult = modulePath ? modulePath : '@backbase/ui-ang';
                let curModuleNames = result.get(moduleResult);
                if (!curModuleNames) {
                    curModuleNames = [];
                    result.set(moduleResult, curModuleNames);
                }
                curModuleNames.push(moduleName.getText());
            }
        }
        return result;
    }
}
exports.update = update;
//# sourceMappingURL=index.js.map