"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const collectionPath = path.join(__dirname, '../collection.json');
const packageJsonPath = '/package.json';
const packageJson = `
{
  "scripts": {
    "update": "ng update @bb-cli/schematics@2"
  },
  "dependencies": {
    "@backbase/foundation-ang": "^4.12.0"
  }
}
`;
const angularJsonPath = '/angular.json';
const angularJson = `{
  "version": 1,
  "projects": {
    "my-example-app": {
      "projectType": "application",
      "root": "apps/my-example-app",
      "sourceRoot": "apps/my-example-app/src",
      "architect": {
        "serve": {},
        "build": {
          "configurations": {}
        }
      }
    }
  }
}`;
const module1 = `
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import {
  EmptyStateModule,
  ErrorCommonStateModule,
  LoadingIndicatorModule,
  IconModule,
  ButtonModule,
  CollapsibleModule,
  CollapsibleAccordionModule,
  InputCheckboxModule,
  AccountsDisplayingFormat,
  AccountsDisplayingFormatConfiguration,
} from '@backbase/ui-ang';

import { PlacesConfigProvider } from './config.providers';
import { MapModule } from './bb-map-ui/map.module';
import { PlacesService } from './services/places.service';
import { PlacesWidgetComponent } from './places-widget.component';
import {
  PlacesListComponent,
  PlaceHeaderCustomizableDirective,
  PlaceBodyCustomizableDirective,
} from './places-list/places-list.component';
import { PlaceDetailsComponent } from './place-details/place-details.component';
import { MapViewComponent, PlacesInfoWindowCustomizableDirective } from './map-view/map-view.component';
import {
  PlacesContainerComponent,
  PlacesContainerCustomizableDirective,
  PlacesSearchCustomizableDirective,
  PlacesSearchByTypeCustomizableDirective,
  PlacesListCustomizableDirective,
  PlacesMapCustomizableDirective,
  PlacesCurrentLocationCustomizableDirective,
  PlacesViewsButtonsGroupCustomizableDirective,
} from './places-container.component';
import { BackbaseUiModule, AccountNumberType } from '@backbase/ui-ang';
import {
  AvatarModule as AvatarNewModule,
} from "@backbase/ui-ang";
import { WorkTimesComponent } from './work-times/work-times.component';
import { KeyboardAccessibilityDirective } from './keyboard-accessibility.directive';

const components = [
  PlacesWidgetComponent,
  PlacesListComponent,
  MapViewComponent,
  PlacesContainerComponent,
  PlaceDetailsComponent,
  WorkTimesComponent,
  KeyboardAccessibilityDirective,
];

const customizables = [
  PlacesContainerCustomizableDirective,
  PlacesSearchCustomizableDirective,
  PlacesSearchByTypeCustomizableDirective,
  PlacesListCustomizableDirective,
  PlacesMapCustomizableDirective,
  PlacesInfoWindowCustomizableDirective,
  PlacesCurrentLocationCustomizableDirective,
  PlacesViewsButtonsGroupCustomizableDirective,
  PlaceHeaderCustomizableDirective,
  PlaceBodyCustomizableDirective,
];

const modules = [
  EmptyStateModule,
  ErrorCommonStateModule,
  LoadingIndicatorModule,
  IconModule,
  ButtonModule,
  MapModule,
  CollapsibleModule,
  CollapsibleAccordionModule,
  InputCheckboxModule,
];

@NgModule({
  imports: [
    CommonModule,
    FormsModule,
    BackbaseCoreModule.withConfig({
      classMap: { PlacesWidgetComponent },
    }),
    ...modules,
  ],
  declarations: [...components, ...customizables],
  exports: [...components, ...customizables, ...modules],
  providers: [PlacesService, PlacesConfigProvider],
})
export class PlacesWidgetModule {}
`;
const appModuleTsPath1 = '/apps/my-example-app/src/app/app.module.ts';
const module2 = `
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';

import { PlacesConfigProvider } from './config.providers';
import { MapModule } from './bb-map-ui/map.module';
import { PlacesService } from './services/places.service';
import { PlacesWidgetComponent } from './places-widget.component';
import {
  PlacesListComponent,
  PlaceHeaderCustomizableDirective,
  PlaceBodyCustomizableDirective,
} from './places-list/places-list.component';
import { PlaceDetailsComponent } from './place-details/place-details.component';
import { MapViewComponent, PlacesInfoWindowCustomizableDirective } from './map-view/map-view.component';
import {
  PlacesContainerComponent,
  PlacesContainerCustomizableDirective,
  PlacesSearchCustomizableDirective,
  PlacesSearchByTypeCustomizableDirective,
  PlacesListCustomizableDirective,
  PlacesMapCustomizableDirective,
  PlacesCurrentLocationCustomizableDirective,
  PlacesViewsButtonsGroupCustomizableDirective,
} from './places-container.component';

import { WorkTimesComponent } from './work-times/work-times.component';
import { KeyboardAccessibilityDirective } from './keyboard-accessibility.directive';

const components = [
  PlacesWidgetComponent,
  PlacesListComponent,
  MapViewComponent,
  PlacesContainerComponent,
  PlaceDetailsComponent,
  WorkTimesComponent,
  KeyboardAccessibilityDirective,
];

const customizables = [
  PlacesContainerCustomizableDirective,
  PlacesSearchCustomizableDirective,
  PlacesSearchByTypeCustomizableDirective,
  PlacesListCustomizableDirective,
  PlacesMapCustomizableDirective,
  PlacesInfoWindowCustomizableDirective,
  PlacesCurrentLocationCustomizableDirective,
  PlacesViewsButtonsGroupCustomizableDirective,
  PlaceHeaderCustomizableDirective,
  PlaceBodyCustomizableDirective,
];

const modules = [
  EmptyStateModule,
  ErrorCommonStateModule,
  LoadingIndicatorModule,
  IconModule,
  ButtonModule,
  MapModule,
  CollapsibleModule,
  CollapsibleAccordionModule,
  InputCheckboxModule,
];

@NgModule({
  imports: [
    CommonModule,
    FormsModule,
    BackbaseCoreModule.withConfig({
      classMap: { PlacesWidgetComponent },
    }),
    ...modules,
  ],
  declarations: [...components, ...customizables],
  exports: [...components, ...customizables, ...modules],
  providers: [PlacesService, PlacesConfigProvider],
})
export class PlacesWidgetModule {}
`;
const appModuleTsPath2 = '/apps/my-example-app/src/app/components/component.module.ts';
describe('migrateImports', () => {
    let tree;
    let runner;
    beforeEach(() => {
        tree = schematics_1.Tree.empty();
        tree.create(angularJsonPath, angularJson);
        tree.create(packageJsonPath, packageJson);
        tree.create(appModuleTsPath1, module1);
        tree.create(appModuleTsPath2, module2);
        runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
    });
    it('add ui-ang package', () => __awaiter(void 0, void 0, void 0, function* () {
        const updatedTree = yield runner.runSchematicAsync('migrateImports', {}, tree).toPromise();
        const appModule = updatedTree.readContent(appModuleTsPath1);
        expect(appModule).toContain('import { ButtonModule } from \'@backbase/ui-ang/button\';');
    }));
    it('should optimize the imports to not duplicate them', () => __awaiter(void 0, void 0, void 0, function* () {
        const updatedTree = yield runner.runSchematicAsync('migrateImports', {}, tree).toPromise();
        const appModule = updatedTree.readContent(appModuleTsPath1);
        expect(appModule).toContain(
        // eslint-disable-next-line max-len
        'import { AccountsDisplayingFormat, AccountsDisplayingFormatConfiguration, AccountNumberType } from \'@backbase/ui-ang/account-number-pipe\';');
    }));
    it('should not update if there is no ui-ang import', () => __awaiter(void 0, void 0, void 0, function* () {
        const updatedTree = yield runner.runSchematicAsync('migrateImports', {}, tree).toPromise();
        const moduleFile = updatedTree.readContent(module2);
        expect(moduleFile).toEqual(moduleFile);
    }));
});
//# sourceMappingURL=index_spec.js.map