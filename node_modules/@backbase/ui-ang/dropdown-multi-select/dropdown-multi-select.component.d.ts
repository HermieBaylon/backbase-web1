import { AfterContentInit, ChangeDetectorRef, ElementRef, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor, FormGroup } from '@angular/forms';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { Observable, Subject } from 'rxjs';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { DropdownSingleSelectOptionComponent } from '@backbase/ui-ang/dropdown-single-select';
import { DomAttributesService } from '@backbase/ui-ang/services';
import { DropdownMultiSelectOptionComponent } from './dropdown-multi-select-option.component';
import * as i0 from "@angular/core";
/**
 * @name DropdownMultiSelectComponent
 *
 * @description
 * Component that use for DropDown Multi Select.
 */
export declare class DropdownMultiSelectComponent extends InputBaseComponent implements AfterContentInit, ControlValueAccessor, OnDestroy {
    protected readonly cd: ChangeDetectorRef;
    private readonly domAttributesService;
    protected readonly deprecationsService: DeprecationsService;
    private readonly unsubscribe$;
    /**
     * The dropdown header text
     */
    dropdownHeaderText: string | undefined;
    /**
     * The placeholder for the multi select.
     */
    placeholder: string;
    /**
     * The label for the Dropdown multi select. Defaults to an empty string.
     */
    label: string;
    /**
     * Enable filtering; Defaults to false.
     */
    filtering: boolean;
    /**
     * Whether the Dropdown multi select is read only. Defaults to false.
     */
    readonly: boolean;
    /**
     * The child option components of type DropDownMultiSelectSingleOption
     */
    isIE: boolean;
    contentOptions: QueryList<DropdownMultiSelectOptionComponent> | undefined;
    /**
     * The list of options.
     */
    options: QueryList<ElementRef>;
    clearAllButton: ElementRef;
    dropDownMenu: ElementRef;
    /**
     * The toggle button of the dropdown
     */
    toggleButton: ElementRef;
    listbox: ElementRef;
    activeOptionIndex: number;
    isOptionsFocused: boolean;
    readonly formGroup: FormGroup;
    readonly formValue$: Observable<string[]>;
    readonly labelsMap: {
        [key: string]: string;
    };
    readonly buttonLabelId: string;
    readonly clearOptions$: Subject<void>;
    private selectedValuesSubject$;
    readonly selectedValues$: Observable<string[]>;
    private searchKey;
    private cachedValue;
    private isOpen;
    constructor(cd: ChangeDetectorRef, domAttributesService: DomAttributesService, deprecationsService: DeprecationsService);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Unselect all selected options from the listbox
     *
     * @param $event
     */
    clearAll($event: Event): void;
    /**
     *
     * @param index
     * @param item
     */
    trackByValueFn(index: number, item: DropdownSingleSelectOptionComponent): string | undefined;
    /**
     *
     * @param value
     */
    writeValue(value: string[] | null): void;
    /**
     * Updating labels while searching
     *
     * @param label
     */
    getLabel(label: string): string;
    onListboxFocus(): void;
    onListboxKeyDown(event: KeyboardEvent): void;
    /**
     *
     */
    onListboxBlur(): void;
    /**
     *
     * @param isOpen
     */
    onDropdownToggle(isOpen: boolean): void;
    getLabeledByIds(...tokens: Array<string | undefined>): string | undefined;
    onFocusOut(event: FocusEvent): void;
    private getSelectedValues;
    private selectActiveOption;
    private setActiveOptionBaseOnSearchKey;
    static ɵfac: i0.ɵɵFactoryDeclaration<DropdownMultiSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DropdownMultiSelectComponent, "bb-dropdown-multi-select-ui", never, { "dropdownHeaderText": "dropdownHeaderText"; "placeholder": "placeholder"; "label": "label"; "filtering": "filtering"; "readonly": "readonly"; }, {}, ["contentOptions"], never>;
}
