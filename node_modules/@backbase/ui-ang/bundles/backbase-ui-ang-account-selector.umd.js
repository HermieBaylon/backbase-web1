(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@ng-select/ng-select'), require('@backbase/ui-ang/product-item-basic-account'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/payment-card-number-pipe'), require('@backbase/ui-ang/services'), require('@backbase/ui-ang/ellipsis')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/account-selector', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@ng-select/ng-select', '@backbase/ui-ang/product-item-basic-account', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/search-box', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/button', '@backbase/ui-ang/payment-card-number-pipe', '@backbase/ui-ang/services', '@backbase/ui-ang/ellipsis'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["account-selector"] = {}), global.ng.core, global.ng.common, global.ng.forms, global.i2, global.backbase["ui-ang"]["product-item-basic-account"], global.backbase["ui-ang"]["input-text"], global.backbase["ui-ang"]["input-checkbox"], global.backbase["ui-ang"]["search-box"], global.backbase["ui-ang"]["loading-indicator"], global.backbase["ui-ang"].button, global.backbase["ui-ang"]["payment-card-number-pipe"], global.backbase["ui-ang"].services, global.backbase["ui-ang"].ellipsis));
})(this, (function (exports, i0, i10, i9, i2, i3, i5, i7, i6, i8, i11, paymentCardNumberPipe, i1, i4) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);

    var possibleAccountDataKeys = ['balance', 'number', 'IBAN', 'BBAN', 'BIC', 'currency', 'bankBranchCode'];
    var isAccountData = function (arg) { return !!arg && possibleAccountDataKeys.some(function (key) { return arg.hasOwnProperty(key); }); };
    var isAccountDataArray = function (arg) { return Array.isArray(arg) && arg.every(isAccountData); };
    var CustomSingleSelectedItemLabelDirective = /** @class */ (function () {
        function CustomSingleSelectedItemLabelDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CustomSingleSelectedItemLabelDirective;
    }());
    CustomSingleSelectedItemLabelDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomSingleSelectedItemLabelDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CustomSingleSelectedItemLabelDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomSingleSelectedItemLabelDirective, selector: "ng-template[bbCustomSingleSelectedItemLabel]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomSingleSelectedItemLabelDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCustomSingleSelectedItemLabel]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var CustomMultiSelectedItemsLabelDirective = /** @class */ (function () {
        function CustomMultiSelectedItemsLabelDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CustomMultiSelectedItemsLabelDirective;
    }());
    CustomMultiSelectedItemsLabelDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomMultiSelectedItemsLabelDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CustomMultiSelectedItemsLabelDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomMultiSelectedItemsLabelDirective, selector: "ng-template[bbCustomMultiSelectedItemsLabel]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomMultiSelectedItemsLabelDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCustomMultiSelectedItemsLabel]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var CustomOptionsHeaderDirective = /** @class */ (function () {
        function CustomOptionsHeaderDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CustomOptionsHeaderDirective;
    }());
    CustomOptionsHeaderDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomOptionsHeaderDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CustomOptionsHeaderDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomOptionsHeaderDirective, selector: "ng-template[bbCustomOptionsHeader]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomOptionsHeaderDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCustomOptionsHeader]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var CustomOptionItemDirective = /** @class */ (function () {
        function CustomOptionItemDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CustomOptionItemDirective;
    }());
    CustomOptionItemDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomOptionItemDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CustomOptionItemDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomOptionItemDirective, selector: "ng-template[bbCustomOptionItem]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomOptionItemDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCustomOptionItem]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var CustomGroupItemsHeaderDirective = /** @class */ (function () {
        function CustomGroupItemsHeaderDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CustomGroupItemsHeaderDirective;
    }());
    CustomGroupItemsHeaderDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomGroupItemsHeaderDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CustomGroupItemsHeaderDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomGroupItemsHeaderDirective, selector: "ng-template[bbCustomGroupItemsHeader]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomGroupItemsHeaderDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCustomGroupItemsHeader]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var CustomLoadingTemplateDirective = /** @class */ (function () {
        function CustomLoadingTemplateDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CustomLoadingTemplateDirective;
    }());
    CustomLoadingTemplateDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomLoadingTemplateDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CustomLoadingTemplateDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CustomLoadingTemplateDirective, selector: "ng-template[bbCustomLoadingTemplate]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CustomLoadingTemplateDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCustomLoadingTemplate]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    /**
     * @name AccountSelectorComponent
     *
     * @description
     * Component that provides a select, multiselect and auto complete feature.
     *
     * @a11y Current component provide option to pass needed accessibility
     * attributes. You need to take care of properties that are required in your case :
     *  - aria-describedby will be linked to the account selector component, dropdown list and search box
     *  - aria-invalid will be linked to the search box
     *  - aria-labelledby will be linked to the account selector component, dropdown list and search box
     *
     */
    var AccountSelectorComponent = /** @class */ (function () {
        function AccountSelectorComponent(renderer, domAttributesService) {
            this.renderer = renderer;
            this.domAttributesService = domAttributesService;
            this.hostRef = this;
            this._items = [];
            this._showError = false;
            this.notFoundTextLabel = 'No items found';
            this.resultCount = 0;
            this.statusId = this.domAttributesService.generateId();
            this.accountSelectorSizeClass = '';
            /**
             * Emitter when search is performed. Outputs search term
             */
            this.search = new i0.EventEmitter();
            /**
             * Emitter when clear search
             */
            this.clearSearch = new i0.EventEmitter();
            /**
             * Emitter when scroll is triggered (will emmit scroll events if virtualScroll is enabled)
             */
            this.scroll = new i0.EventEmitter();
            /**
             * Emitter when scrollToEnd is triggered
             */
            this.scrollToEnd = new i0.EventEmitter();
            /**
             * Emitter when item is removed
             */
            this.remove = new i0.EventEmitter();
            /**
             * Emitter when item is added to selected items or removed from selected items.
             * When Multiple is true: Output is Items[]
             * When Multuple is false: Output is Item
             */
            this.change = new i0.EventEmitter();
            /**
             * Emitter when filter value is changed
             */
            this.filterChange = new i0.EventEmitter();
            /**
             * Emit event when account selector is focused
             */
            this.focus = new i0.EventEmitter();
            /**
             * Emit event when account selector is blurred
             */
            this.blur = new i0.EventEmitter();
            /**
             * Disabled attr for ng-select
             */
            this.disabled = false;
            /**
             * Configuration of how the product number should be formatted (you can hide or show specific numbers).
             */
            this.productNumberFormat = paymentCardNumberPipe.DefaultPaymentCardNumberFormat;
            /**
             * Selected items
             */
            this.selectedItems = [];
            /**
             * Allows to select multiple items
             */
            this.multiple = false;
            /**
             * Whether to close the menu when a value is selected
             */
            this.closeOnSelect = true;
            /**
             * Allow to search for value. Default from ng-select is `true`.
             */
            this.searchable = true;
            /**
             * Allow to clear selected value.
             */
            this.clearable = false;
            /**
             * Placeholder text
             */
            this.placeholder = '';
            /**
             * Loading state from the outside (async items loading)
             */
            this.loading = false;
            /**
             * Dropdown Position (bottom | top | auto)
             */
            this.dropdownPosition = 'bottom';
            /**
             * If true then `scrollEnd` event should NOT be emitted
             */
            this.disableScrollEnd = false;
            /**
             * Turn on or turn off bbHighlight directive in child product items
             */
            this.highlight = true;
            /**
             * Filter items.
             */
            this.filterItems = false;
            /**
             * Marks first item as focused when opening/filtering.
             */
            this.markFirst = false;
            /**
             * Enables NgSelect internal filtering functionality
             */
            this.internalFiltering = true;
            /**
             * Enables virtual scrolling mechanism
             */
            this.virtualScroll = false;
            /**
             * Enable required validation for ng-select
             */
            this.required = false;
            // eslint-disable-next-line @angular-eslint/no-input-rename
            this.ariaInvalid = 'false';
            /**
             * Will show currency Symbol in amount. Default value true
             */
            this.showCurrencySymbol = true;
            /**
             * Will show the bank branch code. Defaults to false
             */
            this.showBankBranchCode = false;
            /**
             * Function expression to provide group value
             */
            this.groupValueFn = function (_, children) { return ({
                name: _,
                total: children.length,
            }); };
            /**
             * Set account selector view size
             */
            this.compareItemsWith = function (a, b) { return a === b; };
        }
        Object.defineProperty(AccountSelectorComponent.prototype, "items", {
            get: function () {
                return this._items;
            },
            /**
             * `AccountSelectorItem`s array
             */
            set: function (val) {
                this._items = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountSelectorComponent.prototype, "notFoundText", {
            /**
             * Not found text for ng-select
             */
            set: function (val) {
                if (val) {
                    this.notFoundTextLabel = val;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountSelectorComponent.prototype, "showError", {
            get: function () {
                return this._showError;
            },
            /**
             * Show the error border around account selector.
             * By default, error message will be visible on invalid and touch state.
             * If user wants to show it on submit or some other scenario,
             * then by passing the value for showError, error borders can be triggered.
             */
            set: function (flag) {
                var _a;
                this._showError = flag;
                if (this.required && ((_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.invalid)) {
                    if (this._showError) {
                        this.markAccountSelectorModelAsTouched();
                    }
                    else {
                        this.markAccountSelectorModelAsUnTouched();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AccountSelectorComponent.prototype, "size", {
            /**
             * Set account selector view size
             *
             * @param size
             */
            set: function (size) {
                this.accountSelectorSizeClass = size === 'sm' ? 'bb-account-selector--sm' : '';
            },
            enumerable: false,
            configurable: true
        });
        AccountSelectorComponent.prototype.onSearch = function (event) {
            if (typeof event === 'string') {
                this.search.emit(event);
            }
        };
        AccountSelectorComponent.prototype.onClear = function () {
            this.clearSearch.emit();
            this.onFilterChange(undefined);
        };
        AccountSelectorComponent.prototype.onScroll = function (position) {
            this.scroll.emit(position);
        };
        AccountSelectorComponent.prototype.onScrollToEnd = function () {
            if (!this.disableScrollEnd) {
                this.scrollToEnd.emit();
            }
        };
        AccountSelectorComponent.prototype.onRemove = function (event) {
            this.remove.emit(event);
        };
        AccountSelectorComponent.prototype.onChange = function (event) {
            if (event.type === 'change') {
                event.preventDefault();
                event.stopPropagation();
                return;
            }
            if (isAccountData(event) || isAccountDataArray(event)) {
                this.change.emit(event);
            }
        };
        AccountSelectorComponent.prototype.selectAll = function () {
            this.selectedItems = this.items;
            this.onChange(this.selectedItems);
        };
        AccountSelectorComponent.prototype.unselectAll = function () {
            this.selectedItems = [];
            this.onChange(this.selectedItems);
        };
        AccountSelectorComponent.prototype.resetAccountSelectorModel = function () {
            var _a;
            (_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.control.reset();
        };
        AccountSelectorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            //https://github.com/ng-select/ng-select/issues/951
            //remove role, because of accessibility issues, role=listbox need to be set only if it has child element
            //input need have aria-hidden=true, because it not vissible element
            if (this.ngSelect) {
                this.ngSelect.focus = function () { return _this.focusEditableElement(); };
                this.renderer.removeAttribute(this.ngSelect.element, 'role');
                var inputContainers = this.ngSelect.element.getElementsByClassName('ng-input');
                /* eslint-disable */
                for (var i = 0; i < inputContainers.length; i++) {
                    var inputElements = inputContainers[i].getElementsByTagName('input');
                    /* eslint-disable */
                    for (var j = 0; j < inputElements.length; j++) {
                        if (this.ariaInvalid) {
                            this.renderer.setAttribute(inputElements[j], 'aria-invalid', this.ariaInvalid);
                        }
                        if (this.ariaLabelledby) {
                            this.renderer.setAttribute(inputElements[j], 'aria-labelledby', this.ariaLabelledby);
                        }
                        if (this.ariaDescribedby) {
                            this.renderer.setAttribute(inputElements[j], 'aria-describedby', this.ariaDescribedby);
                        }
                        if (!(this.ariaInvalid || this.ariaLabelledby || this.ariaDescribedby)) {
                            this.renderer.setAttribute(inputElements[j], 'aria-hidden', 'true');
                        }
                        this.renderer.addClass(inputElements[j], 'sr-only');
                    }
                }
            }
        };
        AccountSelectorComponent.prototype.onFocus = function () {
            this.focus.emit();
        };
        AccountSelectorComponent.prototype.onBlur = function () {
            var _a;
            // Emit blur event only if ng-select is not open(e.g: tabbing through the account selector).
            if (!((_a = this.ngSelect) === null || _a === void 0 ? void 0 : _a.isOpen)) {
                this.blur.emit();
            }
        };
        AccountSelectorComponent.prototype.onOpen = function () {
            //set role, because of accessibility issues, when child element appear in dom
            if (this.ngSelect) {
                this.renderer.setAttribute(this.ngSelect.element, 'role', 'listbox');
                this.updateResultCount();
            }
        };
        AccountSelectorComponent.prototype.onClose = function () {
            //remove role, because of accessibility issues, role=listbox need to be set only if it has child element
            if (this.ngSelect) {
                this.renderer.removeAttribute(this.ngSelect.element, 'role');
                this.focusEditableElement();
                // Used to show validation(incase used inside form) message after account selector is closed
                this.blur.emit();
            }
        };
        AccountSelectorComponent.prototype.onFilterChange = function (query) {
            var filterValue = query || '';
            if (this.ngSelect && this.internalFiltering) {
                this.ngSelect.filter(filterValue);
            }
            this.updateResultCount();
            this.filterChange.next(filterValue);
        };
        AccountSelectorComponent.prototype.focusEditableElement = function () {
            var input = this.textInput || this.searchBox;
            if (this.ngSelect && !this.ngSelect.isOpen) {
                this.focusNgSelect();
            }
            else if (input) {
                input.focusEditableElement();
            }
        };
        /**
         * Call the native `ngSelect` `focus()` method
         * because ngSelect focus has been override in AccountSelectorComponent ngAfterViewInit
         */
        AccountSelectorComponent.prototype.focusNgSelect = function () {
            if (this.ngSelect) {
                this.ngSelect.constructor.prototype.focus.call(this.ngSelect);
            }
        };
        AccountSelectorComponent.prototype.markAccountSelectorModelAsTouched = function () {
            var _a;
            (_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.control.markAsTouched();
        };
        AccountSelectorComponent.prototype.markAccountSelectorModelAsUnTouched = function () {
            var _a;
            (_a = this.accountSelectorModel) === null || _a === void 0 ? void 0 : _a.control.markAsUntouched();
        };
        AccountSelectorComponent.prototype.updateResultCount = function () {
            var _a;
            this.resultCount = ((_a = this.ngSelect) === null || _a === void 0 ? void 0 : _a.itemsList.filteredItems.filter(function (_b) {
                var children = _b.children;
                return !children;
            }).length) || 0;
        };
        return AccountSelectorComponent;
    }());
    AccountSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountSelectorComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i1__namespace.DomAttributesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AccountSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: { items: "items", disabled: "disabled", notFoundText: "notFoundText", showError: "showError", productNumberFormat: "productNumberFormat", selectedItems: "selectedItems", multiple: "multiple", closeOnSelect: "closeOnSelect", searchable: "searchable", clearable: "clearable", placeholder: "placeholder", loading: "loading", dropdownPosition: "dropdownPosition", disableScrollEnd: "disableScrollEnd", highlight: "highlight", filterItems: "filterItems", markFirst: "markFirst", internalFiltering: "internalFiltering", virtualScroll: "virtualScroll", required: "required", typeahead: "typeahead", minTermLength: "minTermLength", typeToSearchText: "typeToSearchText", ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaInvalid: ["aria-invalid", "ariaInvalid"], searchFunc: "searchFunc", showCurrencySymbol: "showCurrencySymbol", showBankBranchCode: "showBankBranchCode", groupByFn: "groupByFn", groupValueFn: "groupValueFn", size: "size", compareItemsWith: "compareItemsWith" }, outputs: { search: "search", clearSearch: "clearSearch", scroll: "scroll", scrollToEnd: "scrollToEnd", remove: "remove", change: "change", filterChange: "filterChange", focus: "focus", blur: "blur" }, queries: [{ propertyName: "customSingleSelectedItemLabel", first: true, predicate: CustomSingleSelectedItemLabelDirective, descendants: true }, { propertyName: "customMultiSelectedItemsLabel", first: true, predicate: CustomMultiSelectedItemsLabelDirective, descendants: true }, { propertyName: "customOptionsHeader", first: true, predicate: CustomOptionsHeaderDirective, descendants: true }, { propertyName: "customOptionItem", first: true, predicate: CustomOptionItemDirective, descendants: true }, { propertyName: "customGroupItemsHeader", first: true, predicate: CustomGroupItemsHeaderDirective, descendants: true }, { propertyName: "customLoadingTemplate", first: true, predicate: CustomLoadingTemplateDirective, descendants: true }], viewQueries: [{ propertyName: "ngSelect", first: true, predicate: i2.NgSelectComponent, descendants: true }, { propertyName: "accountSelectorModel", first: true, predicate: ["accountSelectorModel"], descendants: true }, { propertyName: "textInput", first: true, predicate: i6.SearchBoxComponent, descendants: true }, { propertyName: "searchBox", first: true, predicate: i5.InputTextComponent, descendants: true }], ngImport: i0__namespace, template: "<ng-select\n  #accountSelector\n  #accountSelectorModel=\"ngModel\"\n  (change)=\"onChange($event)\"\n  (clear)=\"onClear()\"\n  (remove)=\"onRemove($event)\"\n  (close)=\"onClose()\"\n  (open)=\"onOpen()\"\n  (scroll)=\"onScroll($event)\"\n  (scrollToEnd)=\"onScrollToEnd()\"\n  [searchFn]=\"searchFunc\"\n  [dropdownPosition]=\"dropdownPosition\"\n  [groupBy]=\"groupByFn\"\n  [groupValue]=\"groupValueFn\"\n  (search)=\"onSearch($event)\"\n  [(ngModel)]=\"selectedItems\"\n  [items]=\"items\"\n  [clearable]=\"clearable\"\n  [closeOnSelect]=\"closeOnSelect\"\n  [multiple]=\"multiple\"\n  [placeholder]=\"placeholder\"\n  [loading]=\"loading\"\n  [markFirst]=\"markFirst\"\n  [searchable]=\"searchable\"\n  [disabled]=\"disabled\"\n  [notFoundText]=\"notFoundTextLabel\"\n  [ngClass]=\"accountSelectorSizeClass\"\n  [compareWith]=\"compareItemsWith\"\n  [virtualScroll]=\"virtualScroll\"\n  [required]=\"required\"\n  [typeahead]=\"typeahead\"\n  [minTermLength]=\"minTermLength\"\n  [typeToSearchText]=\"typeToSearchText\"\n  (focus)=\"onFocus()\"\n  (blur)=\"onBlur()\"\n  bindLabel=\"name\"\n  class=\"bb-account-selector\"\n  name=\"bb-account-selector-ui\"\n  ngDefaultControl\n>\n  <!-- Template for item selected (single:ng-label-tmp) ng-label-tmp-->\n  <ng-template *ngIf=\"!multiple\" let-item=\"item\" ng-label-tmp>\n    <ng-container *ngIf=\"customSingleSelectedItemLabel; else nglabeltmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customSingleSelectedItemLabel?.templateRef;\n          context: {\n            hostRef: hostRef,\n            item: item\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-label-tmp -->\n    <ng-template #nglabeltmp>\n      <bb-product-item-basic-account-ui\n        [selected]=\"true\"\n        [active]=\"true\"\n        [amount]=\"item.balance\"\n        [currency]=\"item.currency\"\n        [productNumberFormat]=\"productNumberFormat\"\n        [productNumber]=\"item.number\"\n        [bankBranchCode]=\"showBankBranchCode ? selectedItems.bankBranchCode : undefined\"\n        [showCurrencySymbol]=\"showCurrencySymbol\"\n        [title]=\"item.name\"\n        [type]=\"item.type\"\n        [status]=\"item.status\"\n        [highlight]=\"highlight\"\n      ></bb-product-item-basic-account-ui>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for items selected (multiple:ng-multi-label-tmp) -->\n  <ng-template *ngIf=\"multiple\" let-items=\"items\" ng-multi-label-tmp>\n    <ng-container *ngIf=\"customMultiSelectedItemsLabel; else ngmultilabeltmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customMultiSelectedItemsLabel?.templateRef;\n          context: {\n            hostRef: hostRef,\n            items: items\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-multi-label-tmp -->\n    <ng-template #ngmultilabeltmp>\n      <div class=\"bb-account-selector__selected\">\n        <div class=\"bb-account-selector__selected-accounts-number bb-text-bold\">\n          <span\n            i18n=\"Selected Accounts|Selected Accounts multi label @@bb-account-selector-ui.multi.label\"\n            data-role=\"selected-account-count\"\n          >\n            { items.length, plural, =1 {1 account selected} other\n            {{{hostRef.items.length === selectedItems.length ? 'All' : items.length}} accounts selected}}\n          </span>\n        </div>\n        <div class=\"bb-account-selector__selected-accounts bb-text-subtitle\" data-role=\"selected-account\">\n          <ng-container *ngIf=\"hostRef.items.length === selectedItems.length; else selectedAccountstmp\">\n            {{ items.length }}\n            <span\n              i18n=\"\n                All Selected Accounts|All Selected Accounts label @@bb-account-selector-ui.allSelectedAccounts.label\"\n              class=\"bb-account-selector__selected-account\"\n            >\n              accounts\n            </span>\n          </ng-container>\n          <ng-template #selectedAccountstmp>\n            <bb-ellipsis-ui>\n              <ng-container *ngFor=\"let item of items; let i = index\">\n                <span class=\"bb-account-selector__selected-account\"\n                  >{{ item.name\n                  }}<span *ngIf=\"i !== items.length - 1\" class=\"bb-account-selector__selected-account-separator\"\n                    >,\n                  </span>\n                </span>\n              </ng-container>\n            </bb-ellipsis-ui>\n          </ng-template>\n        </div>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for header, with search (ng-header-tmp) -->\n  <ng-template ng-header-tmp>\n    <ng-container class=\"bb-account-selector-dropdown__header\" *ngIf=\"customOptionsHeader; else ngheadertmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customOptionsHeader?.templateRef;\n          context: {\n            hostRef: hostRef,\n            multiple: multiple,\n            filterItems: filterItems\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-header-tmp -->\n    <ng-template #ngheadertmp>\n      <section\n        class=\"bb-account-selector-dropdown__header\"\n        [ngClass]=\"{ 'bb-account-selector-dropdown__header--hidden': !searchable }\"\n      >\n        <bb-input-text-ui\n          *ngIf=\"filterItems\"\n          (valueChange)=\"onFilterChange($event)\"\n          (focus)=\"ngSelect?.onInputFocus($event)\"\n          (blur)=\"ngSelect?.onInputBlur($event)\"\n          i18n-placeholder=\"Filter|Filter placeholder@@bb-account-selector-ui.filter.placeholder\"\n          placeholder=\"Filter\"\n          [autofocus]=\"true\"\n          [id]=\"ngSelect?.labelForId\"\n          [disabled]=\"ngSelect?.disabled\"\n          [readonly]=\"ngSelect?.itemsList.maxItemsSelected\"\n          [aria-autocomplete]=\"'list'\"\n          [aria-controls]=\"statusId\"\n          [aria-expanded]=\"ngSelect?.isOpen\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-owns]=\"ngSelect?.isOpen ? ngSelect?.dropdownId : null\"\n          [aria-activedescendant]=\"ngSelect?.isOpen ? ngSelect?.itemsList?.markedItem?.htmlId : null\"\n          [aria-labelledby]=\"ariaLabelledby\"\n          [aria-describedby]=\"ariaDescribedby\"\n        ></bb-input-text-ui>\n        <bb-search-box-ui\n          *ngIf=\"!filterItems\"\n          (clear)=\"onClear()\"\n          (valueChange)=\"onFilterChange($event)\"\n          (submit)=\"onSearch($event)\"\n          (focus)=\"ngSelect?.onInputFocus($event)\"\n          (blur)=\"ngSelect?.onInputBlur($event)\"\n          placeholder=\"Search\"\n          i18n-placeholder=\"Search|Search placeholder@@bb-account-selector-ui.search.placeholder\"\n          [showClear]=\"true\"\n          showSearch=\"true\"\n          [role]=\"'combobox'\"\n          [autofocus]=\"true\"\n          [id]=\"ngSelect?.labelForId\"\n          [disabled]=\"ngSelect?.disabled\"\n          [readonly]=\"ngSelect?.itemsList.maxItemsSelected\"\n          [aria-autocomplete]=\"'list'\"\n          [aria-controls]=\"statusId\"\n          [aria-expanded]=\"ngSelect?.isOpen\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-owns]=\"ngSelect?.isOpen ? ngSelect?.dropdownId : null\"\n          [aria-activedescendant]=\"ngSelect?.isOpen ? ngSelect?.itemsList?.markedItem?.htmlId : null\"\n          [aria-labelledby]=\"ariaLabelledby\"\n          [aria-describedby]=\"ariaDescribedby\"\n        ></bb-search-box-ui>\n      </section>\n      <ng-container *ngIf=\"multiple\">\n        <div class=\"bb-account-selector--multiple__selected-account-filters\">\n          <button\n            (click)=\"selectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Select all|Select all text@@bb-account-selector-ui.select.all.text\"\n            data-role=\"select-all\"\n          >\n            Select all\n          </button>\n          <button\n            (click)=\"unselectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Unselect all|Unselect all text@@bb-account-selector-ui.unselect.all.text\"\n            data-role=\"unselect-all\"\n          >\n            Unselect all\n          </button>\n        </div>\n      </ng-container>\n      <div\n        [id]=\"statusId\"\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        class=\"sr-only\"\n        role=\"status\"\n        i18n=\"\n          Number of options|Screen reader description of the number of options after filtering the\n          combobox@@bb-account-selector-ui.options.count\"\n      >\n        {{ resultCount }} options\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for dropdown items list (ng-option-tmp) -->\n  <ng-template let-index=\"index\" let-item=\"item\" let-item$=\"item$\" ng-option-tmp>\n    <ng-container *ngIf=\"customOptionItem; else ngoptiontmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customOptionItem?.templateRef;\n          context: {\n            hostRef: hostRef,\n            multiple: multiple,\n            item: item,\n            item$: item$,\n            index: index\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <!-- Default template for ng-option-tmp -->\n    <ng-template #ngoptiontmp>\n      <ng-container *ngIf=\"multiple\">\n        <div class=\"bb-stack bb-account-selector__option\">\n          <div class=\"bb-stack__item\">\n            <bb-input-checkbox-ui (click)=\"$event.preventDefault()\" [id]=\"index\" [ngModel]=\"item$.selected\">\n            </bb-input-checkbox-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <bb-product-item-basic-account-ui\n              [active]=\"false\"\n              [productNumber]=\"item.number\"\n              [amount]=\"item.balance\"\n              [currency]=\"item.currency\"\n              [productNumberFormat]=\"productNumberFormat\"\n              [showCurrencySymbol]=\"showCurrencySymbol\"\n              [bankBranchCode]=\"showBankBranchCode ? item.bankBranchCode : undefined\"\n              [title]=\"item.name\"\n              [highlight]=\"highlight\"\n            ></bb-product-item-basic-account-ui>\n          </div>\n        </div>\n      </ng-container>\n\n      <ng-container *ngIf=\"!multiple\">\n        <bb-product-item-basic-account-ui\n          [active]=\"item$.selected\"\n          [productNumber]=\"item.number\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [productNumberFormat]=\"productNumberFormat\"\n          [showCurrencySymbol]=\"showCurrencySymbol\"\n          [bankBranchCode]=\"showBankBranchCode ? item.bankBranchCode : undefined\"\n          [title]=\"item.name\"\n          [status]=\"item.status\"\n          [highlight]=\"highlight\"\n        ></bb-product-item-basic-account-ui>\n      </ng-container>\n    </ng-template>\n  </ng-template>\n\n  <!-- Template for group option header(ng-optgroup-tmp) -->\n  <ng-template let-item=\"item\" ng-optgroup-tmp>\n    <ng-container *ngIf=\"customGroupItemsHeader; else ngoptgrouptmp\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          customGroupItemsHeader?.templateRef;\n          context: {\n            hostRef: hostRef,\n            item: item\n          }\n        \"\n      ></ng-container>\n    </ng-container>\n    <ng-template #ngoptgrouptmp>\n      <span *ngIf=\"!item.name\" i18n=\"All|All group By label @@bb-account-selector-ui.groupBy.all.label\">All</span>\n      <span *ngIf=\"item.name\" i18n=\"Favorite|Favorite group By label @@bb-account-selector-ui.groupBy.default.label\">\n        Favorite\n      </span>\n      ({{ item.total }})\n    </ng-template>\n  </ng-template>\n\n  <ng-template ng-loadingtext-tmp>\n    <ng-container *ngIf=\"customLoadingTemplate; else ngloadingtexttmp\">\n      <ng-container *ngTemplateOutlet=\"customGroupItemsHeader?.templateRef\"></ng-container>\n    </ng-container>\n    <ng-template #ngloadingtexttmp>\n      <bb-loading-indicator-ui\n        i18n-text=\"Loading Accounts|Loading Accounts label @@bb-account-selector-ui.loading.accounts\"\n        text=\"Loading Accounts\"\n      ></bb-loading-indicator-ui>\n    </ng-template>\n  </ng-template>\n</ng-select>\n", components: [{ type: i2__namespace.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i3__namespace.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i4__namespace.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i5__namespace.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i6__namespace.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i7__namespace.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i8__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i9__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i9__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i10__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i10__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.ɵh, selector: "[ng-label-tmp]" }, { type: i10__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2__namespace.ɵi, selector: "[ng-multi-label-tmp]" }, { type: i10__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.ɵj, selector: "[ng-header-tmp]" }, { type: i11__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace.ɵf, selector: "[ng-option-tmp]" }, { type: i2__namespace.ɵg, selector: "[ng-optgroup-tmp]" }, { type: i2__namespace.ɵn, selector: "[ng-loadingtext-tmp]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush, encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-selector-ui',
                        templateUrl: './account-selector.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i1__namespace.DomAttributesService }]; }, propDecorators: { customSingleSelectedItemLabel: [{
                    type: i0.ContentChild,
                    args: [CustomSingleSelectedItemLabelDirective]
                }], customMultiSelectedItemsLabel: [{
                    type: i0.ContentChild,
                    args: [CustomMultiSelectedItemsLabelDirective]
                }], customOptionsHeader: [{
                    type: i0.ContentChild,
                    args: [CustomOptionsHeaderDirective]
                }], customOptionItem: [{
                    type: i0.ContentChild,
                    args: [CustomOptionItemDirective]
                }], customGroupItemsHeader: [{
                    type: i0.ContentChild,
                    args: [CustomGroupItemsHeaderDirective]
                }], customLoadingTemplate: [{
                    type: i0.ContentChild,
                    args: [CustomLoadingTemplateDirective]
                }], ngSelect: [{
                    type: i0.ViewChild,
                    args: [i2.NgSelectComponent]
                }], accountSelectorModel: [{
                    type: i0.ViewChild,
                    args: ['accountSelectorModel']
                }], textInput: [{
                    type: i0.ViewChild,
                    args: [i6.SearchBoxComponent]
                }], searchBox: [{
                    type: i0.ViewChild,
                    args: [i5.InputTextComponent]
                }], search: [{
                    type: i0.Output
                }], clearSearch: [{
                    type: i0.Output
                }], scroll: [{
                    type: i0.Output
                }], scrollToEnd: [{
                    type: i0.Output
                }], remove: [{
                    type: i0.Output
                }], change: [{
                    type: i0.Output
                }], filterChange: [{
                    type: i0.Output
                }], focus: [{
                    type: i0.Output
                }], blur: [{
                    type: i0.Output
                }], items: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], notFoundText: [{
                    type: i0.Input
                }], showError: [{
                    type: i0.Input
                }], productNumberFormat: [{
                    type: i0.Input
                }], selectedItems: [{
                    type: i0.Input
                }], multiple: [{
                    type: i0.Input
                }], closeOnSelect: [{
                    type: i0.Input
                }], searchable: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], dropdownPosition: [{
                    type: i0.Input
                }], disableScrollEnd: [{
                    type: i0.Input
                }], highlight: [{
                    type: i0.Input
                }], filterItems: [{
                    type: i0.Input
                }], markFirst: [{
                    type: i0.Input
                }], internalFiltering: [{
                    type: i0.Input
                }], virtualScroll: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], typeahead: [{
                    type: i0.Input
                }], minTermLength: [{
                    type: i0.Input
                }], typeToSearchText: [{
                    type: i0.Input
                }], ariaDescribedby: [{
                    type: i0.Input,
                    args: ['aria-describedby']
                }], ariaLabelledby: [{
                    type: i0.Input,
                    args: ['aria-labelledby']
                }], ariaInvalid: [{
                    type: i0.Input,
                    args: ['aria-invalid']
                }], searchFunc: [{
                    type: i0.Input
                }], showCurrencySymbol: [{
                    type: i0.Input
                }], showBankBranchCode: [{
                    type: i0.Input
                }], groupByFn: [{
                    type: i0.Input
                }], groupValueFn: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }], compareItemsWith: [{
                    type: i0.Input
                }] } });

    var AccountSelectorModule = /** @class */ (function () {
        function AccountSelectorModule() {
        }
        return AccountSelectorModule;
    }());
    AccountSelectorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountSelectorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AccountSelectorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountSelectorModule, declarations: [AccountSelectorComponent,
            CustomGroupItemsHeaderDirective,
            CustomLoadingTemplateDirective,
            CustomMultiSelectedItemsLabelDirective,
            CustomOptionItemDirective,
            CustomOptionsHeaderDirective,
            CustomSingleSelectedItemLabelDirective], imports: [i10.CommonModule,
            i2.NgSelectModule,
            i9.FormsModule,
            i3.ProductItemBasicAccountModule,
            i5.InputTextModule,
            i7.InputCheckboxModule,
            i6.SearchBoxModule,
            i8.LoadingIndicatorModule,
            i11.ButtonModule,
            i4.EllipsisModule], exports: [AccountSelectorComponent,
            CustomGroupItemsHeaderDirective,
            CustomLoadingTemplateDirective,
            CustomMultiSelectedItemsLabelDirective,
            CustomOptionItemDirective,
            CustomOptionsHeaderDirective,
            CustomSingleSelectedItemLabelDirective] });
    AccountSelectorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountSelectorModule, imports: [[
                i10.CommonModule,
                i2.NgSelectModule,
                i9.FormsModule,
                i3.ProductItemBasicAccountModule,
                i5.InputTextModule,
                i7.InputCheckboxModule,
                i6.SearchBoxModule,
                i8.LoadingIndicatorModule,
                i11.ButtonModule,
                i4.EllipsisModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountSelectorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i10.CommonModule,
                            i2.NgSelectModule,
                            i9.FormsModule,
                            i3.ProductItemBasicAccountModule,
                            i5.InputTextModule,
                            i7.InputCheckboxModule,
                            i6.SearchBoxModule,
                            i8.LoadingIndicatorModule,
                            i11.ButtonModule,
                            i4.EllipsisModule,
                        ],
                        declarations: [
                            AccountSelectorComponent,
                            CustomGroupItemsHeaderDirective,
                            CustomLoadingTemplateDirective,
                            CustomMultiSelectedItemsLabelDirective,
                            CustomOptionItemDirective,
                            CustomOptionsHeaderDirective,
                            CustomSingleSelectedItemLabelDirective,
                        ],
                        exports: [
                            AccountSelectorComponent,
                            CustomGroupItemsHeaderDirective,
                            CustomLoadingTemplateDirective,
                            CustomMultiSelectedItemsLabelDirective,
                            CustomOptionItemDirective,
                            CustomOptionsHeaderDirective,
                            CustomSingleSelectedItemLabelDirective,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccountSelectorComponent = AccountSelectorComponent;
    exports.AccountSelectorModule = AccountSelectorModule;
    exports.CustomGroupItemsHeaderDirective = CustomGroupItemsHeaderDirective;
    exports.CustomLoadingTemplateDirective = CustomLoadingTemplateDirective;
    exports.CustomMultiSelectedItemsLabelDirective = CustomMultiSelectedItemsLabelDirective;
    exports.CustomOptionItemDirective = CustomOptionItemDirective;
    exports.CustomOptionsHeaderDirective = CustomOptionsHeaderDirective;
    exports.CustomSingleSelectedItemLabelDirective = CustomSingleSelectedItemLabelDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-account-selector.umd.js.map
