(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/infinite-scroll', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["infinite-scroll"] = {}), global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, common, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * @name InfiniteScrollComponent
     *
     * @description
     * Component that displays an infinite scroll.
     */
    var InfiniteScrollComponent = /** @class */ (function () {
        function InfiniteScrollComponent(elRef) {
            this.elRef = elRef;
            /**
             * Event that will be triggered when user has scrolled to
             * bottom of the element
             */
            this.scrollEnd = new i0.EventEmitter();
            /**
             * An offset from the bottom of the element to trigger
             * `scrollEnd` event
             */
            this.offset = 0;
            /**
             * Specify debounce duration in ms
             */
            this.debounce = 100;
            /**
             * If true then `scrollEnd` event should NOT be emitted
             */
            this.disableScrollEnd = false;
            /**
             * Emits a new value on element scroll event
             */
            this.scroll$ = new rxjs.Subject();
            /**
             * Completes on component destroy lifecycle event
             * used to unsubscribe from infinite observables
             */
            this.ngUnsubscribe$ = new rxjs.Subject();
        }
        /**
         * Subscribe to `scroll$` observable and emit `scrollEnd` event
         * when element scroll position is at the end of the element
         */
        InfiniteScrollComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.scroll$
                .pipe(operators.debounceTime(this.debounce), operators.map(function (scroll) {
                var y = scroll.y + _this.offset;
                return { y: y, height: scroll.height };
            }), operators.filter(function () { return !_this.disableScrollEnd; }), operators.filter(function (scroll) { return scroll.y >= scroll.height; }), operators.takeUntil(this.ngUnsubscribe$))
                .subscribe(function () { return _this.scrollEnd.emit(); });
        };
        InfiniteScrollComponent.prototype.onScroll = function (scrollTop, scrollheight, offsetHeight) {
            var height = scrollheight;
            var y = scrollTop + offsetHeight;
            this.scroll$.next({ y: y, height: height });
        };
        InfiniteScrollComponent.prototype.onMouseOver = function (evTarget) {
            var hasScroll = this.elRef.nativeElement.scrollHeight > this.elRef.nativeElement.clientHeight;
            var firstElementChild = this.elRef.nativeElement.firstElementChild;
            var lastElementChild = firstElementChild && firstElementChild.lastElementChild;
            var isLastElement = evTarget && (lastElementChild === evTarget.parentElement || lastElementChild === evTarget);
            if (!this.disableScrollEnd && !hasScroll && isLastElement) {
                this.scroll$.next({ height: 0, y: 0 });
            }
        };
        /**
         * trigger `ngUnsubscribe` complete on
         * component destroy lifecycle hook
         */
        InfiniteScrollComponent.prototype.ngOnDestroy = function () {
            this.ngUnsubscribe$.next();
            this.ngUnsubscribe$.complete();
        };
        return InfiniteScrollComponent;
    }());
    InfiniteScrollComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InfiniteScrollComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    InfiniteScrollComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: { offset: "offset", debounce: "debounce", disableScrollEnd: "disableScrollEnd" }, outputs: { scrollEnd: "scrollEnd" }, host: { listeners: { "scroll": "onScroll($event.target.scrollTop,$event.target.scrollHeight,$event.target.offsetHeight)", "mouseover": "onMouseOver($event.target)", "touchmove": "onMouseOver()" } }, ngImport: i0__namespace, template: "<ng-content></ng-content>\n" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InfiniteScrollComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-infinite-scroll-ui',
                        templateUrl: './infinite-scroll.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { scrollEnd: [{
                    type: i0.Output
                }], offset: [{
                    type: i0.Input
                }], debounce: [{
                    type: i0.Input
                }], disableScrollEnd: [{
                    type: i0.Input
                }], onScroll: [{
                    type: i0.HostListener,
                    args: ['scroll', ['$event.target.scrollTop', '$event.target.scrollHeight', '$event.target.offsetHeight']]
                }], onMouseOver: [{
                    type: i0.HostListener,
                    args: ['mouseover', ['$event.target']]
                }, {
                    type: i0.HostListener,
                    args: ['touchmove']
                }] } });

    var InfiniteScrollModule = /** @class */ (function () {
        function InfiniteScrollModule() {
        }
        return InfiniteScrollModule;
    }());
    InfiniteScrollModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InfiniteScrollModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    InfiniteScrollModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InfiniteScrollModule, declarations: [InfiniteScrollComponent], imports: [common.CommonModule], exports: [InfiniteScrollComponent] });
    InfiniteScrollModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InfiniteScrollModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InfiniteScrollModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [InfiniteScrollComponent],
                        exports: [InfiniteScrollComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.InfiniteScrollComponent = InfiniteScrollComponent;
    exports.InfiniteScrollModule = InfiniteScrollModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-infinite-scroll.umd.js.map
