(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/util'), require('@angular/common'), require('@backbase/ui-ang/services'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/button')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/dropdown-menu', ['exports', '@angular/core', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/util', '@angular/common', '@backbase/ui-ang/services', '@backbase/foundation-ang/core', '@backbase/ui-ang/icon', '@backbase/ui-ang/button'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["dropdown-menu"] = {}), global.ng.core, global.i4, global.backbase["ui-ang"].util, global.ng.common, global.backbase["ui-ang"].services, global.i2, global.backbase["ui-ang"].icon, global.backbase["ui-ang"].button));
})(this, (function (exports, i0, i4, util, i6, i1, i2, i3, i5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);

    var DROPDOWN_MENU_OPTIONS = [
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
        'PDF',
        'RTF',
    ];
    var DROPDOWN_TEMPLATE_MENU_OPTIONS = [
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
        { name: 'google', url: 'https://google.com' },
        { name: 'twitter', url: 'https://twitter.com' },
        { name: 'facebook', url: 'https://www.facebook.com' },
    ];

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var DropdownMenuOptionToken = /** @class */ (function () {
        function DropdownMenuOptionToken() {
        }
        return DropdownMenuOptionToken;
    }());
    var DropdownMenuOptionDirective = /** @class */ (function (_super) {
        __extends(DropdownMenuOptionDirective, _super);
        function DropdownMenuOptionDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            /**
             * Boolean value to add/remove the active class on menuitem
             *
             * @default false
             */
            _this.active = false;
            /**
             * Event that is emitted when user clicks on menuitem
             */
            _this.selectionChange = new i0.EventEmitter();
            return _this;
        }
        DropdownMenuOptionDirective.prototype.onSelect = function () {
            this.selectionChange.emit(this);
        };
        return DropdownMenuOptionDirective;
    }(DropdownMenuOptionToken));
    DropdownMenuOptionDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuOptionDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    DropdownMenuOptionDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuOptionDirective, selector: "[bbDropdownMenuOption]", inputs: { bbDropdownMenuOption: "bbDropdownMenuOption", active: "active" }, outputs: { selectionChange: "selectionChange" }, host: { listeners: { "click": "onSelect()", "keydown.enter": "onSelect()", "keydown.space": "onSelect()" }, properties: { "class.active": "this.active" } }, providers: [
            {
                provide: DropdownMenuOptionToken,
                useExisting: DropdownMenuOptionDirective,
            },
        ], usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuOptionDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDropdownMenuOption]',
                        providers: [
                            {
                                provide: DropdownMenuOptionToken,
                                useExisting: DropdownMenuOptionDirective,
                            },
                        ],
                    }]
            }], propDecorators: { bbDropdownMenuOption: [{
                    type: i0.Input
                }], active: [{
                    type: i0.HostBinding,
                    args: ['class.active']
                }, {
                    type: i0.Input
                }], selectionChange: [{
                    type: i0.Output
                }], onSelect: [{
                    type: i0.HostListener,
                    args: ['click']
                }, {
                    type: i0.HostListener,
                    args: ['keydown.enter']
                }, {
                    type: i0.HostListener,
                    args: ['keydown.space']
                }] } });

    var DROPDOWN_MENU_MIN_INDENT_TO_HORIZONTAL_AXIS = 1 / 10;
    var COUNT_OF_ELEMENTS_TO_SHOW_IN_THE_DROPDOWN_LIST = 8;

    var DropdownMenuItemDirective = /** @class */ (function () {
        function DropdownMenuItemDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return DropdownMenuItemDirective;
    }());
    DropdownMenuItemDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuItemDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DropdownMenuItemDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuItemDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbDropdownMenuItem]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var DropdownLabelDirective = /** @class */ (function () {
        function DropdownLabelDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return DropdownLabelDirective;
    }());
    DropdownLabelDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownLabelDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DropdownLabelDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownLabelDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbDropdownLabel]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var DropdownMenuToken = /** @class */ (function () {
        function DropdownMenuToken() {
        }
        return DropdownMenuToken;
    }());
    /**
     * @name DropdownMenuComponent
     *
     * @description
     * Component that displays a button with a dropdown
     *
     * @a11y dropDownButtonLabel is discernible text for dropdown button.
     *
     * `aria-owns` handles contextual relationship between a parent and its child elements,
     * in this case between dropdown menu and dropdown items, it's internally handled by the component with unique ids.
     *
     * `aria-activedescendant` identifies currently active element of dropdown item. It's internally handled but
     * when `bbDropdownMenuItem`directive and [role=menuitem] is used for listing dropdown elements
     * then use [id]="option". Example:
     * ```
      <ng-template bbDropdownMenuItem>
        <button role="menuitem" [id]="option" class="dropdown-item" *ngFor="let option of [1,2,3]">
          {{ option}}
       </button>
      </ng-template>
     ```
     */
    // @dynamic (to suppress error with resolving Document type during compilation)
    var DropdownMenuComponent = /** @class */ (function (_super) {
        __extends(DropdownMenuComponent, _super);
        function DropdownMenuComponent(domAttrService, elem, renderer, deprecationsService, cdr, document) {
            var _this = _super.call(this) || this;
            _this.domAttrService = domAttrService;
            _this.elem = elem;
            _this.renderer = renderer;
            _this.deprecationsService = deprecationsService;
            _this.cdr = cdr;
            _this.document = document;
            _this.keyActionsConfig = [
                {
                    predicate: function (key) { return key === util.KEY_CODES.DOWN; },
                    resolver: function (event, itemList) {
                        event.preventDefault();
                        if (_this.focusedItemIndex === undefined) {
                            _this.focusedItemIndex = 0;
                            _this.focusListItem(itemList);
                            return;
                        }
                        if (_this.focusedItemIndex < itemList.length - 1) {
                            _this.focusedItemIndex = _this.focusedItemIndex + 1;
                        }
                        _this.focusListItem(itemList);
                    },
                },
                {
                    predicate: function (key) { return key === util.KEY_CODES.UP; },
                    resolver: function (event, itemList) {
                        event.preventDefault();
                        if (_this.focusedItemIndex === undefined) {
                            _this.focusedItemIndex = 0;
                            _this.focusListItem(itemList);
                            return;
                        }
                        if (_this.focusedItemIndex > 0) {
                            _this.focusedItemIndex = _this.focusedItemIndex - 1;
                        }
                        _this.focusListItem(itemList);
                    },
                },
                {
                    predicate: function (key) { return key === util.KEY_CODES.SPACE || key === util.KEY_CODES.ENTER; },
                    resolver: function (event) {
                        event.preventDefault();
                        // eslint-disable-next-line @typescript-eslint/no-unused-expressions
                        _this.dropdownDir && _this.dropdownDir.close();
                        if (_this.dropDownToggle) {
                            _this.dropDownToggle.nativeElement.focus();
                        }
                    },
                },
                {
                    predicate: function (key) { return key === util.KEY_CODES.TAB; },
                    resolver: function (event, itemList) {
                        if (_this.isDropDownOpen() && _this.focusedItemIndex === undefined) {
                            if (event.shiftKey) {
                                _this.closeDropDown();
                            }
                            else {
                                event.preventDefault();
                                _this.focusedItemIndex = 0;
                                _this.focusListItem(itemList);
                            }
                            return;
                        }
                        if (_this.isFirstListItemInFocus(itemList) && event.shiftKey) {
                            event.preventDefault();
                            _this.focusToggle();
                            _this.focusedItemIndex = undefined;
                            return;
                        }
                        if (_this.isLastListItemInFocus(itemList) && !event.shiftKey) {
                            _this.focusToggle();
                            _this.closeDropDown();
                            _this.focusedItemIndex = undefined;
                            return;
                        }
                        if (_this.focusedItemIndex !== undefined) {
                            _this.focusedItemIndex = event.shiftKey ? _this.focusedItemIndex - 1 : _this.focusedItemIndex + 1;
                        }
                    },
                },
            ];
            _this.dropdownContainerAdjustedMaxHeight = 0;
            _this.ariaActivedescendant = null;
            _this.dropdownId = util.getDynamicId() + '_dropdown_menu';
            /**
             * The label for the button dropdown. Defaults to an empty string.
             */
            _this.label = '';
            /**
             * The disabled state for the button dropdown. Defaults to false.
             */
            _this.disabled = false;
            /**
             * If the value is an object, please provide a optionLabelKey.
             */
            _this.options = [];
            /**
             * Event (Output) that emits the value of selected dropdown item.
             */
            _this.select = new i0.EventEmitter();
            /**
             * The size of the icon to be displayed. Defaults to md.
             */
            _this.iconSize = 'md';
            /**
             * Color of the button. Defaults to primary.
             */
            _this.btnColor = 'primary';
            /**
             * The flag to indicate whether the dropdown button should be in a circular shape. Defaults to 'false'.
             * This will only work when there's only an icon inside the button without a text.
             */
            _this.btnCircle = false;
            /**
             * If true it will stretch the button inside to 100% width
             */
            _this.fullWidth = false;
            /**
             * Whether the dropdown should be closed when clicking one of dropdown items or pressing ESC
             */
            _this.autoClose = true;
            /**
             * Specifies which element the dropdown should be appended to.
             */
            _this.container = '';
            /**
             * The position of the dropdown. Defaults to bottom-right.
             */
            _this.position = 'bottom-right';
            /**
             * The role of the dropdown menu defaults to menu
             */
            _this.dropDownMenuRole = 'menu';
            /**
             * Predefined button sizes
             */
            _this.buttonSize = 'md';
            /**
             * Dropdown menu (toggle) button aria label
             */
            // todo add translation when adding default value
            _this.dropDownButtonLabel = '';
            /**
             * Count of elements which is used in showing elements in the dropdown list.
             */
            _this.visibleElementDependingOnViewport = COUNT_OF_ELEMENTS_TO_SHOW_IN_THE_DROPDOWN_LIST;
            /**
             * Add role=group onto host
             */
            _this.role = 'group';
            _this.window = _this.document.defaultView;
            return _this;
        }
        DropdownMenuComponent.prototype.ngOnInit = function () {
            // the buttons size will be set from the group size
            if (this.elem.nativeElement.parentElement.className.indexOf('btn-group-sm') > -1) {
                this.buttonSize = 'sm';
            }
        };
        DropdownMenuComponent.prototype.ngAfterViewInit = function () {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.buttonEl && this.buttonEl.nativeElement, this.renderer);
            var itemList = this.getItemList();
            if (itemList) {
                this.setItemsTabIndex(itemList);
            }
        };
        /**
         * Internal handler for clicks on dropdown items
         *
         * @param event Event
         * @param item Item that has been clicked
         */
        DropdownMenuComponent.prototype.onClick = function (event, item) {
            event.preventDefault();
            this.select.emit(item);
        };
        /**
         * Drop down change state event handler
         *
         * @param isOpen
         */
        DropdownMenuComponent.prototype.onOpenChange = function (isOpen) {
            if (isOpen) {
                this.adjustDropdownListToViewport();
            }
            else {
                this.focusedItemIndex = undefined;
                if (this.buttonEl) {
                    this.ariaActivedescendant = null;
                }
            }
        };
        /**
         * Function that returns the label of the dropdown item
         *
         * @param option Item that has been clicked
         * @param labelKey Key that contains the label of the option object
         */
        DropdownMenuComponent.prototype.getOptionLabel = function (option) {
            return this.optionLabelKey && typeof option === 'object' ? option[this.optionLabelKey] : option;
        };
        DropdownMenuComponent.prototype.onKeyUp = function (event) {
            if (!this.isDropDownOpen()) {
                return;
            }
            var itemList = this.getItemList();
            if (!itemList) {
                return;
            }
            this.setItemsTabIndex(itemList);
            var config = this.keyActionsConfig.find(function (cv) { return cv.predicate(util.getKeyCode(event)); });
            if (config) {
                config.resolver(event, itemList);
            }
            var selectedItem = this.getSelectedItem(itemList);
            if (this.buttonEl && this.isDropDownOpen() && selectedItem) {
                this.ariaActivedescendant = selectedItem.id;
            }
        };
        DropdownMenuComponent.prototype.isLastListItemInFocus = function (itemList) {
            return document.activeElement === itemList.item(itemList.length - 1);
        };
        DropdownMenuComponent.prototype.isFirstListItemInFocus = function (itemList) {
            return document.activeElement === itemList.item(0);
        };
        DropdownMenuComponent.prototype.focusToggle = function () {
            if (this.dropDownToggle) {
                this.dropDownToggle.nativeElement.focus();
            }
        };
        DropdownMenuComponent.prototype.closeDropDown = function () {
            if (this.dropdownDir) {
                this.dropdownDir.close();
            }
        };
        DropdownMenuComponent.prototype.isDropDownOpen = function () {
            return Boolean(this.dropdownDir && this.dropdownDir.isOpen());
        };
        DropdownMenuComponent.prototype.getItemList = function () {
            var _a, _b, _c;
            //TODO: don't access private API
            return (_c = (_b = (_a = this.dropdownDir) === null || _a === void 0 ? void 0 : _a['_menu']) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.querySelectorAll('[role=menuitem]');
        };
        DropdownMenuComponent.prototype.setItemsTabIndex = function (itemList) {
            var _this = this;
            Array.prototype.forEach.call(itemList, function (cv) {
                _this.renderer.setAttribute(cv, 'tabindex', '0');
            });
        };
        DropdownMenuComponent.prototype.focusListItem = function (itemList) {
            var item = this.getSelectedItem(itemList);
            if (item) {
                item.focus();
            }
        };
        DropdownMenuComponent.prototype.getSelectedItem = function (itemList) {
            var item;
            if (itemList) {
                // @ts-ignore
                item = itemList.item(this.focusedItemIndex);
            }
            return item;
        };
        DropdownMenuComponent.prototype.adjustDropdownListToViewport = function () {
            var _this = this;
            if (!this.doElementsExist()) {
                return;
            }
            this.dropdownContainerAdjustedMaxHeight = 0;
            setTimeout(function () {
                _this.defineAdjustedDropdownMenuHeight();
                _this.cdr.detectChanges();
            }, 0);
        };
        DropdownMenuComponent.prototype.defineAdjustedDropdownMenuHeight = function () {
            var _a, _b, _c, _d;
            this.dropdownMenuItemHeight = this.customDropdownMenuItem
                ? ((_a = this.dropdownMenuInnerContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.firstChild).clientHeight
                : (_b = this.dropdownListElement) === null || _b === void 0 ? void 0 : _b.nativeElement.offsetHeight;
            if (!this.dropdownMenuItemHeight) {
                this.clearStyles();
                return;
            }
            // The min height of dropdown container list started from height of 1 element;
            var heightOfAllDropdownItems = this.dropdownMenuItemHeight;
            var containerHeightOfDropdownItems = (((_c = this.dropdownMenuContainer) === null || _c === void 0 ? void 0 : _c.nativeElement.offsetHeight) || 0) + heightOfAllDropdownItems;
            this.defineMaxDropdownContainerHeight();
            var iterationsForIncreasingHeight = Math.min(this.visibleElementDependingOnViewport, 
            // when we pass custom template items, this.options.length can be 0;
            this.options.length || ((_d = this.dropdownMenuInnerContainer) === null || _d === void 0 ? void 0 : _d.nativeElement.childNodes.length));
            for (var i = 1; i < iterationsForIncreasingHeight &&
                // here we should avoid redundant increasing;
                containerHeightOfDropdownItems + this.dropdownMenuItemHeight <= Number(this.dropdownContainerMaxHeight); i++) {
                heightOfAllDropdownItems += this.dropdownMenuItemHeight;
                containerHeightOfDropdownItems += this.dropdownMenuItemHeight;
            }
            this.dropdownContainerAdjustedMaxHeight = heightOfAllDropdownItems;
        };
        DropdownMenuComponent.prototype.defineMaxDropdownContainerHeight = function () {
            if (!this.window || !this.dropDownToggle)
                return;
            var relativeIndent = DROPDOWN_MENU_MIN_INDENT_TO_HORIZONTAL_AXIS;
            var viewportHeight = this.window.innerHeight;
            var _e = this.dropDownToggle.nativeElement.getBoundingClientRect(), bottom = _e.bottom, top = _e.top;
            this.dropdownContainerMaxHeight = this.dropdownMenuItemHeight;
            if (this.position.includes('bottom')) {
                var viewportIndent = Math.floor(viewportHeight * relativeIndent);
                var boundingHeight = viewportHeight - bottom;
                // we should include a viewport indent because dropdownContainerMaxHeight must not overlap window.
                this.dropdownContainerMaxHeight = boundingHeight - viewportIndent;
            }
            if (this.position === 'left' || this.position === 'right') {
                var offsetDifference = top + bottom - viewportHeight;
                // here we should calculate the smallest offset between top and bottom because dropdown list renders at middle;
                var offset = offsetDifference <= 0 ? top : viewportHeight - bottom;
                // here we multiply by 2 because left or right position renders dropdown list at middle;
                this.dropdownContainerMaxHeight = Math.floor(2 * offset * (1 - relativeIndent));
            }
            if (this.position.includes('top')) {
                this.dropdownContainerMaxHeight = Math.floor(top * (1 - relativeIndent));
            }
            if (this.position === 'auto') {
                // auto calculates the most suitable position that`s why it is enough to set wider limitations;
                this.dropdownContainerMaxHeight = Math.floor(viewportHeight * (1 - 2 * relativeIndent));
            }
        };
        DropdownMenuComponent.prototype.doElementsExist = function () {
            var _a;
            var requiredElementPresented = this.customDropdownMenuItem
                ? (_a = this.dropdownMenuInnerContainer) === null || _a === void 0 ? void 0 : _a.nativeElement.firstChild
                : !this.disabled;
            return Boolean(requiredElementPresented);
        };
        DropdownMenuComponent.prototype.clearStyles = function () {
            // if we can`t define item height we should discard style properties for disabling adjusting.
            if (this.dropdownMenuInnerContainer && this.dropdownMenuContainer) {
                this.renderer.removeStyle(this.dropdownMenuInnerContainer.nativeElement, 'maxHeight');
                this.renderer.removeStyle(this.dropdownMenuContainer.nativeElement, 'visibility');
            }
        };
        return DropdownMenuComponent;
    }(DropdownMenuToken));
    DropdownMenuComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuComponent, deps: [{ token: i1__namespace.DomAttributesService }, { token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }, { token: i2__namespace.DeprecationsService }, { token: i0__namespace.ChangeDetectorRef }, { token: i6.DOCUMENT }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DropdownMenuComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: { label: "label", disabled: "disabled", options: "options", icon: "icon", iconSize: "iconSize", iconColor: "iconColor", btnColor: "btnColor", btnCircle: "btnCircle", optionLabelKey: "optionLabelKey", fullWidth: "fullWidth", autoClose: "autoClose", container: "container", position: "position", ariaLabel: "ariaLabel", dropDownMenuRole: "dropDownMenuRole", dropDownMenuId: "dropDownMenuId", buttonSize: "buttonSize", dropDownButtonLabel: "dropDownButtonLabel", visibleElementDependingOnViewport: "visibleElementDependingOnViewport", role: "role" }, outputs: { select: "select" }, host: { listeners: { "window:keydown": "onKeyUp($event)" }, properties: { "attr.role": "this.role" } }, providers: [
            {
                provide: DropdownMenuToken,
                useExisting: DropdownMenuComponent,
            },
        ], queries: [{ propertyName: "customLabel", first: true, predicate: DropdownLabelDirective, descendants: true, read: i0.TemplateRef, static: true }, { propertyName: "customDropdownMenuItem", first: true, predicate: DropdownMenuItemDirective, descendants: true, read: i0.TemplateRef, static: true }], viewQueries: [{ propertyName: "dropdownDir", first: true, predicate: i4.NgbDropdown, descendants: true, static: true }, { propertyName: "dropDownToggle", first: true, predicate: i4.NgbDropdownToggle, descendants: true, read: i0.ElementRef, static: true }, { propertyName: "dropdownListElement", first: true, predicate: ["dropdownListElement"], descendants: true }, { propertyName: "dropdownMenuContainer", first: true, predicate: ["dropdownMenuContainer"], descendants: true }, { propertyName: "dropdownMenuInnerContainer", first: true, predicate: ["dropdownMenuInnerContainer"], descendants: true }, { propertyName: "buttonEl", first: true, predicate: ["button"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div\n  (openChange)=\"onOpenChange($event)\"\n  [autoClose]=\"autoClose\"\n  [container]=\"container\"\n  [placement]=\"position\"\n  class=\"bb-dropdown-btn-group-wrapper\"\n  ngbDropdown\n>\n  <button\n    bbButton\n    #button\n    [attr.aria-label]=\"dropDownButtonLabel\"\n    [attr.data-role]=\"'dropdown-menu-toggle-button'\"\n    [attr.aria-owns]=\"dropdownId\"\n    [attr.aria-activedescendant]=\"ariaActivedescendant\"\n    [block]=\"fullWidth\"\n    [circle]=\"btnCircle\"\n    [color]=\"btnColor\"\n    [buttonSize]=\"buttonSize\"\n    [disabled]=\"disabled\"\n    ngbDropdownToggle\n  >\n    <div\n      class=\"dropdown-menu-toggle-button__content\"\n      [ngClass]=\"{ 'dropdown-menu-toggle-button__content--full-width': fullWidth }\"\n    >\n      <ng-container *ngIf=\"customLabel; else bbDefaultDropdownLabel\">\n        <ng-container *ngTemplateOutlet=\"customLabel\"></ng-container>\n      </ng-container>\n      <ng-template #bbDefaultDropdownLabel>\n        <span\n          class=\"dropdown-menu__label\"\n          [ngClass]=\"{ 'dropdown-menu__label--full-width': fullWidth }\"\n          *ngIf=\"label\"\n          [attr.data-role]=\"'dropdown-menu-label'\"\n          >{{ label }}</span\n        >\n      </ng-template>\n      <ng-container *ngIf=\"icon\">\n        <bb-icon-ui [color]=\"iconColor\" [name]=\"icon\" [size]=\"iconSize\" [cropped]=\"!btnCircle\"></bb-icon-ui>\n      </ng-container>\n    </div>\n  </button>\n  <div\n    #dropdownMenuContainer\n    class=\"dropdown-menu\"\n    ngbDropdownMenu\n    *ngIf=\"!disabled\"\n    [attr.role]=\"dropDownMenuRole\"\n    [attr.data-role]=\"'dropdown-menu'\"\n    [attr.id]=\"dropDownMenuId\"\n    [style.visibility]=\"dropdownContainerAdjustedMaxHeight ? 'visible' : 'hidden'\"\n  >\n    <div\n      [attr.id]=\"dropdownId\"\n      #dropdownMenuInnerContainer\n      class=\"dropdown-menu-inner-container\"\n      [attr.data-role]=\"'inner-dropdown-menu'\"\n      [style.maxHeight.px]=\"dropdownContainerAdjustedMaxHeight\"\n    >\n      <ng-container *ngIf=\"customDropdownMenuItem; else bbDefaultDropdown\">\n        <ng-container *ngTemplateOutlet=\"customDropdownMenuItem\"></ng-container>\n      </ng-container>\n\n      <ng-template #bbDefaultDropdown>\n        <a\n          ngbDropdownItem\n          role=\"menuitem\"\n          href=\"#\"\n          [attr.id]=\"dropdownId + i\"\n          class=\"dropdown-item\"\n          #dropdownListElement\n          *ngFor=\"let option of options; let i = index\"\n          (click)=\"onClick($event, option)\"\n          [attr.data-role]=\"'dropdown-menu-item'\"\n        >\n          {{ getOptionLabel(option) }}\n        </a>\n      </ng-template>\n    </div>\n  </div>\n</div>\n", components: [{ type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i5__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i6__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i6__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-dropdown-menu-ui',
                        templateUrl: './dropdown-menu.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: DropdownMenuToken,
                                useExisting: DropdownMenuComponent,
                            },
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.DomAttributesService }, { type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }, { type: i2__namespace.DeprecationsService }, { type: i0__namespace.ChangeDetectorRef }, { type: Document, decorators: [{
                            type: i0.Inject,
                            args: [i6.DOCUMENT]
                        }] }];
        }, propDecorators: { customLabel: [{
                    type: i0.ContentChild,
                    args: [DropdownLabelDirective, { read: i0.TemplateRef, static: true }]
                }], customDropdownMenuItem: [{
                    type: i0.ContentChild,
                    args: [DropdownMenuItemDirective, { read: i0.TemplateRef, static: true }]
                }], dropdownDir: [{
                    type: i0.ViewChild,
                    args: [i4.NgbDropdown, { static: true }]
                }], dropDownToggle: [{
                    type: i0.ViewChild,
                    args: [i4.NgbDropdownToggle, { read: i0.ElementRef, static: true }]
                }], dropdownListElement: [{
                    type: i0.ViewChild,
                    args: ['dropdownListElement']
                }], dropdownMenuContainer: [{
                    type: i0.ViewChild,
                    args: ['dropdownMenuContainer']
                }], dropdownMenuInnerContainer: [{
                    type: i0.ViewChild,
                    args: ['dropdownMenuInnerContainer']
                }], label: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], select: [{
                    type: i0.Output
                }], icon: [{
                    type: i0.Input
                }], iconSize: [{
                    type: i0.Input
                }], iconColor: [{
                    type: i0.Input
                }], btnColor: [{
                    type: i0.Input
                }], btnCircle: [{
                    type: i0.Input
                }], optionLabelKey: [{
                    type: i0.Input
                }], fullWidth: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], position: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], dropDownMenuRole: [{
                    type: i0.Input
                }], dropDownMenuId: [{
                    type: i0.Input
                }], buttonSize: [{
                    type: i0.Input
                }], dropDownButtonLabel: [{
                    type: i0.Input
                }], visibleElementDependingOnViewport: [{
                    type: i0.Input
                }], role: [{
                    type: i0.HostBinding,
                    args: ['attr.role']
                }, {
                    type: i0.Input
                }], buttonEl: [{
                    type: i0.ViewChild,
                    args: ['button']
                }], onKeyUp: [{
                    type: i0.HostListener,
                    args: ['window:keydown', ['$event']]
                }] } });

    var DropdownMenuFullWidthDirective = /** @class */ (function () {
        function DropdownMenuFullWidthDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            /**
             * If true it will stretch the dropdown menu to 100% width
             */
            this.bbDropdownToggleFullWidth = false;
        }
        DropdownMenuFullWidthDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            var dropdownBtn = this.elementRef.nativeElement.querySelector('[ngbDropdownToggle]');
            var dropdownMenu = this.elementRef.nativeElement.querySelector('[ngbDropdownMenu]');
            var splitBtnWrapper = dropdownBtn === null || dropdownBtn === void 0 ? void 0 : dropdownBtn.closest('div.btn-group');
            if (this.bbDropdownToggleFullWidth) {
                this.dropdownMenuChanges = new MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        if (mutation.attributeName === 'class' && dropdownMenu.classList.contains('show')) {
                            var minWidth = splitBtnWrapper ? splitBtnWrapper.clientWidth : dropdownBtn.clientWidth;
                            _this.renderer.setStyle(dropdownMenu, 'min-width', minWidth + "px");
                        }
                    });
                });
                this.dropdownMenuChanges.observe(dropdownMenu, {
                    attributes: true,
                });
            }
        };
        DropdownMenuFullWidthDirective.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.dropdownMenuChanges) === null || _a === void 0 ? void 0 : _a.disconnect();
        };
        return DropdownMenuFullWidthDirective;
    }());
    DropdownMenuFullWidthDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuFullWidthDirective, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DropdownMenuFullWidthDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuFullWidthDirective, selector: "[bbDropdownToggleFullWidth]", inputs: { bbDropdownToggleFullWidth: "bbDropdownToggleFullWidth" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuFullWidthDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDropdownToggleFullWidth]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { bbDropdownToggleFullWidth: [{
                    type: i0.Input
                }] } });

    var DropdownMenuModule = /** @class */ (function () {
        function DropdownMenuModule() {
        }
        return DropdownMenuModule;
    }());
    DropdownMenuModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DropdownMenuModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuModule, declarations: [DropdownMenuComponent,
            DropdownMenuItemDirective,
            DropdownLabelDirective,
            DropdownMenuOptionDirective,
            DropdownMenuFullWidthDirective], imports: [i6.CommonModule, i4.NgbDropdownModule, i3.IconModule, i5.ButtonModule], exports: [DropdownMenuComponent,
            DropdownMenuItemDirective,
            DropdownLabelDirective,
            DropdownMenuOptionDirective,
            DropdownMenuFullWidthDirective] });
    DropdownMenuModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuModule, imports: [[i6.CommonModule, i4.NgbDropdownModule, i3.IconModule, i5.ButtonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i6.CommonModule, i4.NgbDropdownModule, i3.IconModule, i5.ButtonModule],
                        declarations: [
                            DropdownMenuComponent,
                            DropdownMenuItemDirective,
                            DropdownLabelDirective,
                            DropdownMenuOptionDirective,
                            DropdownMenuFullWidthDirective,
                        ],
                        exports: [
                            DropdownMenuComponent,
                            DropdownMenuItemDirective,
                            DropdownLabelDirective,
                            DropdownMenuOptionDirective,
                            DropdownMenuFullWidthDirective,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DROPDOWN_MENU_OPTIONS = DROPDOWN_MENU_OPTIONS;
    exports.DROPDOWN_TEMPLATE_MENU_OPTIONS = DROPDOWN_TEMPLATE_MENU_OPTIONS;
    exports.DropdownLabelDirective = DropdownLabelDirective;
    exports.DropdownMenuComponent = DropdownMenuComponent;
    exports.DropdownMenuFullWidthDirective = DropdownMenuFullWidthDirective;
    exports.DropdownMenuItemDirective = DropdownMenuItemDirective;
    exports.DropdownMenuModule = DropdownMenuModule;
    exports.DropdownMenuOptionDirective = DropdownMenuOptionDirective;
    exports.DropdownMenuOptionToken = DropdownMenuOptionToken;
    exports.DropdownMenuToken = DropdownMenuToken;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-dropdown-menu.umd.js.map
