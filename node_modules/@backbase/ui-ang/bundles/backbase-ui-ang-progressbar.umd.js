(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@ng-bootstrap/ng-bootstrap')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/progressbar', ['exports', '@angular/core', '@angular/common', '@ng-bootstrap/ng-bootstrap'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].progressbar = {}), global.ng.core, global.ng.common, global.i1));
})(this, (function (exports, i0, common, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /**
     * @name ProgressbarComponent
     *
     * @description
     * Component that represents the progress of a task.
     */
    var ProgressbarComponent = /** @class */ (function () {
        function ProgressbarComponent() {
            /**
             * Maximum value of the progressbar. Defaults to 100
             */
            this.max = 100;
            /**
             * A flag indicating if the current value should be displayed within the progressbar. Defaults to false
             */
            this.showValue = false;
            /**
             * A flag indicating if the progress bar should be striped. Defaults to false
             */
            this.striped = false;
            /**
             * A flag indicating if the stripes of the progress bar should be animated. Defaults to false
             */
            this.animated = false;
            /**
             * Current value of the progressbar. Defaults to 0 and should be less than max
             */
            this.value = 0;
        }
        return ProgressbarComponent;
    }());
    ProgressbarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProgressbarComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ProgressbarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProgressbarComponent, selector: "bb-progressbar-ui", inputs: { height: "height", max: "max", showValue: "showValue", striped: "striped", animated: "animated", type: "type", value: "value" }, ngImport: i0__namespace, template: "<ngb-progressbar\n  class=\"bb-progress-bar\"\n  [type]=\"type\"\n  [max]=\"max\"\n  [value]=\"value\"\n  [showValue]=\"showValue\"\n  [striped]=\"striped\"\n  [animated]=\"animated\"\n  [height]=\"height\"\n>\n  <ng-content></ng-content>\n</ngb-progressbar>\n", components: [{ type: i1__namespace.NgbProgressbar, selector: "ngb-progressbar", inputs: ["value", "max", "animated", "striped", "textType", "type", "showValue", "height"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProgressbarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-progressbar-ui',
                        templateUrl: './progressbar.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { height: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], showValue: [{
                    type: i0.Input
                }], striped: [{
                    type: i0.Input
                }], animated: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }] } });

    var ProgressbarModule = /** @class */ (function () {
        function ProgressbarModule() {
        }
        return ProgressbarModule;
    }());
    ProgressbarModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProgressbarModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ProgressbarModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProgressbarModule, declarations: [ProgressbarComponent], imports: [common.CommonModule, i1.NgbProgressbarModule], exports: [ProgressbarComponent] });
    ProgressbarModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProgressbarModule, imports: [[common.CommonModule, i1.NgbProgressbarModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProgressbarModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule, i1.NgbProgressbarModule],
                        declarations: [ProgressbarComponent],
                        exports: [ProgressbarComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ProgressbarComponent = ProgressbarComponent;
    exports.ProgressbarModule = ProgressbarModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-progressbar.umd.js.map
