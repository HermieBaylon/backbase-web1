(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/operators'), require('rxjs'), require('@backbase/ui-ang/css-variables-lib')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/media-query-lib', ['exports', '@angular/core', '@angular/common', 'rxjs/operators', 'rxjs', '@backbase/ui-ang/css-variables-lib'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["media-query-lib"] = {}), global.ng.core, global.ng.common, global.rxjs.operators, global.rxjs, global.backbase["ui-ang"]["css-variables-lib"]));
})(this, (function (exports, i0, common, operators, rxjs, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /**
     * @name MediaQueryService
     *
     * @dynamic (to suppress error with resolving Document type during compilation)
     *
     * @description
     * MediaQueryService is a utility for evaluating media queries and reacting to their changing.
     *
     * @example
     * import { MediaQueryService } from '@backbase/foundation-ang/ui';
     *
     * @Component({...})
     * class MyComponent {
     *
     *   constructor(private readonly mediaQueryService: MediaQueryService) {}
     *
     *   // with standard grid breakpoint
     *   readonly isStandardMdMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'md');
     *   // custom value
     *   readonly isCustomMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 500);
     */
    var MediaQueryService = /** @class */ (function () {
        function MediaQueryService(document, cssVariablesService, ngZone) {
            this.document = document;
            this.cssVariablesService = cssVariablesService;
            this.ngZone = ngZone;
        }
        /**
         * Observe media changes for current window.
         *
         * @param value - breakpoint value (could be custom number/standard grid breakpoint)
         * @param type - breakpoint type
         */
        MediaQueryService.prototype.isMediaBreakpointMatches = function (type, value) {
            var _this = this;
            var isCustomBreakpoint = typeof value === 'number';
            if (!isCustomBreakpoint && !this.cssVariablesService) {
                throw new Error('In order to use media breakpoints, please add provider for CssVariablesService.');
            }
            var mediaBreakpointValue$ = isCustomBreakpoint
                ? rxjs.of(value + "px")
                : rxjs.from(this.cssVariablesService.getCssVariable("--breakpoint-" + value));
            return mediaBreakpointValue$.pipe(operators.switchMap(function (mediaWidth) {
                var mediaQueryList = _this.document.defaultView.matchMedia("(" + type + ": " + mediaWidth + ")");
                return _this.getMediaBreakpoints(mediaQueryList);
            }));
        };
        MediaQueryService.prototype.getMediaBreakpoints = function (mediaQueryList) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                /**
                 *   MediaQueryList inherited form EventTarget in some browsers.
                 *   Therefore methods like `addEventListener` or `removeEventListener` doesn't work in Safari and IE.
                 *   For more details see:
                 *   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility
                 */
                var isFunctionAvailable = Boolean(mediaQueryList.addEventListener);
                var mediaListener = function (_a) {
                    var matches = _a.matches;
                    observer.next(matches);
                    /**
                     * Safari and IE does not inherit Event interface.
                     * It means that on media match, event will not be dispatched and Angular will not update UI.
                     * Simulating async event to cover this gap.
                     */
                    if (_this.ngZone.isStable) {
                        _this.ngZone.run(function () { return Promise.resolve(); });
                    }
                };
                // emit initial match
                observer.next(mediaQueryList.matches);
                if (isFunctionAvailable) {
                    mediaQueryList.addEventListener('change', mediaListener);
                }
                else {
                    mediaQueryList.addListener(mediaListener);
                }
                return function () {
                    if (isFunctionAvailable) {
                        mediaQueryList.removeEventListener('change', mediaListener);
                    }
                    else {
                        mediaQueryList.removeListener(mediaListener);
                    }
                };
            });
        };
        return MediaQueryService;
    }());
    MediaQueryService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MediaQueryService, deps: [{ token: common.DOCUMENT }, { token: i1__namespace.CssVariablesService, optional: true }, { token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MediaQueryService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MediaQueryService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MediaQueryService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: Document, decorators: [{
                            type: i0.Inject,
                            args: [common.DOCUMENT]
                        }] }, { type: i1__namespace.CssVariablesService, decorators: [{
                            type: i0.Optional
                        }] }, { type: i0__namespace.NgZone }];
        } });

    var MediaQueryModule = /** @class */ (function () {
        function MediaQueryModule() {
        }
        return MediaQueryModule;
    }());
    MediaQueryModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MediaQueryModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MediaQueryModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MediaQueryModule, imports: [common.CommonModule] });
    MediaQueryModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MediaQueryModule, providers: [i1.CssVariablesService, MediaQueryService], imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MediaQueryModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        providers: [i1.CssVariablesService, MediaQueryService],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MediaQueryModule = MediaQueryModule;
    exports.MediaQueryService = MediaQueryService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-media-query-lib.umd.js.map
