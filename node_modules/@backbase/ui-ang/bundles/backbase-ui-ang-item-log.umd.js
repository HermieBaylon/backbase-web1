(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/ui-ang/icon')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/item-log', ['exports', '@angular/core', '@angular/common', '@backbase/ui-ang/icon'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["item-log"] = {}), global.ng.core, global.ng.common, global.backbase["ui-ang"].icon));
})(this, (function (exports, i0, i2, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var ItemLogRecordDirective = /** @class */ (function () {
        function ItemLogRecordDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return ItemLogRecordDirective;
    }());
    ItemLogRecordDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogRecordDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ItemLogRecordDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ItemLogRecordDirective, selector: "ng-template[bbItemLogRecord]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogRecordDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbItemLogRecord]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var ItemLogComponent = /** @class */ (function () {
        function ItemLogComponent() {
            /**
             * Flag that denotes if item log status is pending. Defaults to false
             */
            this.isPending = false;
        }
        return ItemLogComponent;
    }());
    ItemLogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ItemLogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ItemLogComponent, selector: "bb-item-log-ui", inputs: { isPending: "isPending", records: "records" }, queries: [{ propertyName: "customItemLog", first: true, predicate: ItemLogRecordDirective, descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"bb-item-log\">\n  <div *ngIf=\"isPending\" class=\"bb-item-log__pending-record\" data-role=\"item-log-details-pending-row\">\n    <bb-icon-ui class=\"bb-text-support bb-item-log-record__icon\" name=\"watch-later\" size=\"md\"></bb-icon-ui>\n    <div class=\"bb-item-log__pending-record--details bb-text-bold\" i18n=\"@@item-log-waiting-for-approvals.label\">\n      Waiting for further approval(s)\n    </div>\n  </div>\n  <div *ngFor=\"let itemLogRecord of records\" class=\"bb-item-log__record\" data-role=\"item-log-details-record\">\n    <ng-container *ngIf=\"customItemLog; else default\">\n      <ng-container *ngTemplateOutlet=\"customItemLog?.templateRef; context: { $implicit: itemLogRecord }\">\n      </ng-container>\n    </ng-container>\n\n    <ng-template #default>\n      <div class=\"bb-stack bb-stack--align-top\">\n        <bb-icon-ui\n          class=\"bb-item-log-record__icon\"\n          size=\"md\"\n          [name]=\"itemLogRecord?.status === 'REJECTED' ? 'cancel' : 'success'\"\n          [color]=\"itemLogRecord?.status === 'REJECTED' ? 'danger' : 'success'\"\n        ></bb-icon-ui>\n        <div class=\"bb-item-log-record__details\">\n          <span class=\"bb-text-bold\" i18n=\"@@item-log-waiting-for-approvals.status\">\n            { itemLogRecord?.status, select, REJECTED {Rejected} APPROVED {Approved} other {} }\n          </span>\n\n          <span>\n            <ng-container i18n=\"@@item-log-approved-by.label\"> by {{ itemLogRecord.userFullName }}</ng-container>\n            <ng-container *ngIf=\"itemLogRecord?.externalUserId\"> ({{ itemLogRecord.externalUserId }})</ng-container>\n          </span>\n\n          <div class=\"bb-item-log-record__time\">\n            <time> {{ itemLogRecord?.createdAt | date }}</time>\n            <ng-container i18n=\"@@item.log.details.created.at\"> at</ng-container>\n            <time> {{ itemLogRecord?.createdAt | date: 'shortTime' }}</time>\n          </div>\n        </div>\n\n        <div class=\"bb-item-log-record__comment bb-stack bb-stack--density-sm\" *ngIf=\"itemLogRecord?.comment\">\n          <div class=\"bb-stack__item bb-stack__item--align-top\">\n            <bb-icon-ui color=\"secondary\" name=\"forum\" size=\"sm\"></bb-icon-ui>\n          </div>\n\n          <div class=\"bb-stack__item\">\n            {{ itemLogRecord?.comment }}\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "date": i2__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-item-log-ui',
                        templateUrl: './item-log.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { customItemLog: [{
                    type: i0.ContentChild,
                    args: [ItemLogRecordDirective, { static: true }]
                }], isPending: [{
                    type: i0.Input
                }], records: [{
                    type: i0.Input
                }] } });

    var ItemLogModule = /** @class */ (function () {
        function ItemLogModule() {
        }
        return ItemLogModule;
    }());
    ItemLogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ItemLogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogModule, declarations: [ItemLogComponent, ItemLogRecordDirective], imports: [i2.CommonModule, i1.IconModule], exports: [ItemLogComponent, ItemLogRecordDirective] });
    ItemLogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogModule, imports: [[i2.CommonModule, i1.IconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ItemLogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, i1.IconModule],
                        declarations: [ItemLogComponent, ItemLogRecordDirective],
                        exports: [ItemLogComponent, ItemLogRecordDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ItemLogComponent = ItemLogComponent;
    exports.ItemLogModule = ItemLogModule;
    exports.ItemLogRecordDirective = ItemLogRecordDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-item-log.umd.js.map
