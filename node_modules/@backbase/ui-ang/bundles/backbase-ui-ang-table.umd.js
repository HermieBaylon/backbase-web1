(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs/operators'), require('rxjs'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/util')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/table', ['exports', '@angular/common', '@angular/core', 'rxjs/operators', 'rxjs', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].table = {}), global.ng.common, global.ng.core, global.rxjs.operators, global.rxjs, global.backbase["ui-ang"]["dropdown-menu"], global.backbase["ui-ang"].util));
})(this, (function (exports, common, i0, operators, rxjs, dropdownMenu, util) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /**
     * @name TableDirective
     *
     * @description
     * Directive that displays a table.
     *
     * @a11y
     * The table directive doesn't provide any specific properties for accessibility.
     * But aria-sort tag can be set on the sortable header cells with ascending and descending values.
     *
     */
    var TableDirective = /** @class */ (function () {
        function TableDirective() {
            /**
             * An event emitter for on select row action.
             */
            this.selectRow = new i0.EventEmitter();
            /**
             * An event emitter for on row click action.
             */
            this.rowClick = new i0.EventEmitter();
            /**
             * An event emitter for on column sort action.
             */
            this.sort = new i0.EventEmitter();
            this.selectedRows = new Set();
            this.headers = new Set();
        }
        TableDirective.prototype.registerHeader = function (header) {
            this.headers.add(header);
        };
        TableDirective.prototype.unRegisterHeader = function (header) {
            this.headers.delete(header);
        };
        TableDirective.prototype.onRowClick = function (rowItem) {
            this.rowClick.emit(rowItem);
        };
        TableDirective.prototype.isSelected = function (row) {
            return this.selectedRows.has(row);
        };
        TableDirective.prototype.toggleItem = function (row, isChecked) {
            if (isChecked) {
                this.selectedRows.add(row);
            }
            else {
                this.selectedRows.delete(row);
            }
            this.selectRow.emit(this.selectedRows);
        };
        TableDirective.prototype.toggleAllItems = function () {
            if (this.isSelectedAll()) {
                this.selectedRows = new Set();
            }
            else {
                this.selectedRows = new Set(this.dataSource);
            }
            this.selectRow.emit(this.selectedRows);
        };
        TableDirective.prototype.isSelectedAll = function () {
            var _this = this;
            if (this.dataSource) {
                var matches = this.dataSource.filter(function (item) { return _this.selectedRows.has(item); });
                return matches.length === this.dataSource.length;
            }
            return false;
        };
        TableDirective.prototype.isSelectedPart = function () {
            if (this.dataSource) {
                return this.selectedRows.size > 0 && this.selectedRows.size < this.dataSource.length;
            }
            return false;
        };
        TableDirective.prototype.onSort = function (sortEvent) {
            this.headers.forEach(function (header) {
                if (header.bbSortable !== sortEvent.column) {
                    header.direction = '';
                    header.markAllMenuOptionAsInactive();
                }
            });
            this.sort.emit(sortEvent);
        };
        return TableDirective;
    }());
    TableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TableDirective, selector: "table[bbTable]", inputs: { dataSource: ["bbTable", "dataSource"] }, outputs: { selectRow: "selectRow", rowClick: "rowClick", sort: "sort" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'table[bbTable]',
                    }]
            }], propDecorators: { dataSource: [{
                    type: i0.Input,
                    args: ['bbTable']
                }], selectRow: [{
                    type: i0.Output
                }], rowClick: [{
                    type: i0.Output
                }], sort: [{
                    type: i0.Output
                }] } });

    var TableRowDirective = /** @class */ (function () {
        function TableRowDirective(parentTable) {
            this.parentTable = parentTable;
        }
        Object.defineProperty(TableRowDirective.prototype, "selected", {
            get: function () {
                return this.parentTable.isSelected(this.bbRow);
            },
            enumerable: false,
            configurable: true
        });
        TableRowDirective.prototype.onRowClick = function () {
            this.parentTable.onRowClick(this.bbRow);
        };
        return TableRowDirective;
    }());
    TableRowDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableRowDirective, deps: [{ token: TableDirective }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TableRowDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TableRowDirective, selector: "tr[bbRow]", inputs: { bbRow: "bbRow" }, host: { listeners: { "click": "onRowClick()" }, properties: { "class.selected": "this.selected" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableRowDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'tr[bbRow]',
                    }]
            }], ctorParameters: function () { return [{ type: TableDirective }]; }, propDecorators: { bbRow: [{
                    type: i0.Input
                }], selected: [{
                    type: i0.HostBinding,
                    args: ['class.selected']
                }], onRowClick: [{
                    type: i0.HostListener,
                    args: ['click']
                }] } });

    var rotate = { asc: 'desc', desc: '', '': 'asc' };
    var TableSortableDirective = /** @class */ (function () {
        function TableSortableDirective(parentTable, renderer) {
            this.parentTable = parentTable;
            this.renderer = renderer;
            /**
             * The current sort direction. Accepts one of the values of 'asc', 'desc' or ''
             */
            this.direction = '';
            /**
             * An event emitter for on sort actions.
             */
            this.sort = new i0.EventEmitter();
            this.sortable = true;
            this.parentTable.registerHeader(this);
        }
        Object.defineProperty(TableSortableDirective.prototype, "asc", {
            get: function () {
                return this.direction === 'asc';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableSortableDirective.prototype, "desc", {
            get: function () {
                return this.direction === 'desc';
            },
            enumerable: false,
            configurable: true
        });
        TableSortableDirective.prototype.rotate = function () {
            if (this.dropdown) {
                return;
            }
            this.emitSortEvent();
        };
        TableSortableDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.dropdown) {
                this.presetDropdown(this.dropdown);
            }
            this.getMenuOptionSelectionChanges(this.bbMenuOptions).subscribe(function (menuOption) { return _this.onMenuOptionSelect(menuOption); });
        };
        TableSortableDirective.prototype.onMenuOptionSelect = function (menuOption) {
            var _a;
            var columnValue = menuOption.bbDropdownMenuOption;
            var activeMenuOption = (_a = this.bbMenuOptions) === null || _a === void 0 ? void 0 : _a.find(function (option) { return option.active; });
            // Reset currently active item
            if (activeMenuOption) {
                activeMenuOption.active = false;
            }
            // If same menu item is not clicked, then reset the direction for new menuitem
            if (activeMenuOption && columnValue !== activeMenuOption.bbDropdownMenuOption) {
                this.direction = '';
            }
            this.bbSortable = menuOption.bbDropdownMenuOption;
            this.emitSortEvent();
            this.markMenuOptionAsActive(menuOption);
            this.updateAriaSortAttribute();
        };
        /** Notify table with new sorting params */
        TableSortableDirective.prototype.emitSortEvent = function () {
            if (this.bbSortable) {
                this.direction = rotate[this.direction];
                this.parentTable.onSort({ column: this.bbSortable, direction: this.direction });
            }
        };
        /** Combined stream of all of the bbTableMenuitem selectionChange events. */
        TableSortableDirective.prototype.getMenuOptionSelectionChanges = function (menuOptions) {
            return menuOptions.changes.pipe(operators.switchMap(function (_) { return rxjs.merge.apply(void 0, __spreadArray([], __read(menuOptions.map(function (menuOption) { return menuOption.selectionChange; })))); }));
        };
        /** mark the new menuitem as active only if sorting order is asc/desc */
        TableSortableDirective.prototype.markMenuOptionAsActive = function (menuOption) {
            if (this.direction !== '') {
                menuOption.active = true;
            }
        };
        TableSortableDirective.prototype.markAllMenuOptionAsInactive = function () {
            if (this.bbMenuOptions.length) {
                this.bbMenuOptions.forEach(function (menuOption) { return (menuOption.active = false); });
            }
        };
        TableSortableDirective.prototype.updateAriaSortAttribute = function () {
            var _a;
            if (this.dropdown) {
                var buttonEl = (_a = this.dropdown.buttonEl) === null || _a === void 0 ? void 0 : _a.nativeElement;
                if (!this.direction) {
                    this.renderer.removeAttribute(buttonEl, 'aria-sort');
                }
                else {
                    this.renderer.setAttribute(buttonEl, 'aria-sort', this.getAriaSortAttribute(this.direction));
                }
            }
        };
        TableSortableDirective.prototype.getAriaSortAttribute = function (direction) {
            return direction === 'asc' ? 'ascending' : 'descending';
        };
        /** Preset bb-dropdown button to add role for a11y and set full height and width of table column */
        TableSortableDirective.prototype.presetDropdown = function (dropdown) {
            var _a;
            var buttonEl = (_a = dropdown.buttonEl) === null || _a === void 0 ? void 0 : _a.nativeElement;
            this.renderer.setAttribute(buttonEl, 'role', 'columnheader');
            this.renderer.setStyle(buttonEl, 'height', '100%');
            this.renderer.setStyle(buttonEl, 'width', '100%');
        };
        TableSortableDirective.prototype.ngOnDestroy = function () {
            this.parentTable.unRegisterHeader(this);
        };
        return TableSortableDirective;
    }());
    TableSortableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableSortableDirective, deps: [{ token: TableDirective }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TableSortableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TableSortableDirective, selector: "th[bbSortable]", inputs: { bbSortable: "bbSortable", direction: "direction" }, outputs: { sort: "sort" }, host: { listeners: { "click": "rotate()", "keyup.enter": "rotate()", "keyup.space": "rotate()" }, properties: { "class.sortable": "this.sortable", "class.asc": "this.asc", "class.desc": "this.desc" } }, queries: [{ propertyName: "dropdown", first: true, predicate: dropdownMenu.DropdownMenuToken, descendants: true }, { propertyName: "bbMenuOptions", predicate: dropdownMenu.DropdownMenuOptionToken, descendants: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableSortableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'th[bbSortable]',
                    }]
            }], ctorParameters: function () { return [{ type: TableDirective }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { bbSortable: [{
                    type: i0.Input
                }], direction: [{
                    type: i0.Input
                }], sort: [{
                    type: i0.Output
                }], dropdown: [{
                    type: i0.ContentChild,
                    args: [dropdownMenu.DropdownMenuToken]
                }], bbMenuOptions: [{
                    type: i0.ContentChildren,
                    args: [dropdownMenu.DropdownMenuOptionToken, { descendants: true }]
                }], sortable: [{
                    type: i0.HostBinding,
                    args: ['class.sortable']
                }], asc: [{
                    type: i0.HostBinding,
                    args: ['class.asc']
                }], desc: [{
                    type: i0.HostBinding,
                    args: ['class.desc']
                }], rotate: [{
                    type: i0.HostListener,
                    args: ['click']
                }, {
                    type: i0.HostListener,
                    args: ['keyup.enter']
                }, {
                    type: i0.HostListener,
                    args: ['keyup.space']
                }] } });

    var TableFocusDirective = /** @class */ (function () {
        function TableFocusDirective(renderer) {
            this.renderer = renderer;
            this.focusedItemIndex = -1;
            this.focusFirstRowOnChanges = false;
            this.destroy$ = new rxjs.Subject();
        }
        TableFocusDirective.prototype.onKeyEvent = function (event) {
            var _this = this;
            switch (util.getKeyCode(event)) {
                case util.KEY_CODES.DOWN:
                    this.focusedItemIndex = Math.min(this.focusedItemIndex + 1, this.listItems.length - 1);
                    this.focusItem();
                    event.preventDefault();
                    break;
                case util.KEY_CODES.UP:
                    this.focusedItemIndex = Math.max(this.focusedItemIndex - 1, 0);
                    this.focusItem();
                    event.preventDefault();
                    break;
                case util.KEY_CODES.ENTER:
                    var currentActiveItem = this.listItems.find(function (item, index) { return index === _this.focusedItemIndex; });
                    if (currentActiveItem) {
                        currentActiveItem.nativeElement.click();
                        event.preventDefault();
                    }
                    break;
            }
        };
        TableFocusDirective.prototype.focusItem = function (focusNativeElement) {
            var _this = this;
            if (focusNativeElement === void 0) { focusNativeElement = true; }
            this.listItems.forEach(function (el, index) {
                if (index === _this.focusedItemIndex) {
                    _this.renderer.addClass(el.nativeElement, 'active');
                    _this.renderer.setAttribute(el.nativeElement, 'tabIndex', '0');
                    if (focusNativeElement) {
                        el.nativeElement.focus();
                    }
                }
                else {
                    _this.renderer.removeClass(el.nativeElement, 'active');
                    _this.renderer.setAttribute(el.nativeElement, 'tabIndex', '-1');
                }
            });
        };
        /**
         * @internal
         */
        TableFocusDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            // make first row in a table focusable
            this.listItems.changes.pipe(operators.takeUntil(this.destroy$)).subscribe(function (items) {
                var _a;
                if ((_a = items.first) === null || _a === void 0 ? void 0 : _a.nativeElement) {
                    _this.focusedItemIndex = 0;
                    _this.focusItem(_this.focusFirstRowOnChanges);
                }
            });
        };
        /**
         * @internal
         */
        TableFocusDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        return TableFocusDirective;
    }());
    TableFocusDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableFocusDirective, deps: [{ token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TableFocusDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TableFocusDirective, selector: "[bbTableFocus]", inputs: { focusFirstRowOnChanges: "focusFirstRowOnChanges" }, host: { listeners: { "keydown": "onKeyEvent($event)" } }, queries: [{ propertyName: "listItems", predicate: TableRowDirective, emitDistinctChangesOnly: false, descendants: true, read: i0.ElementRef }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableFocusDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTableFocus]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }]; }, propDecorators: { listItems: [{
                    type: i0.ContentChildren,
                    args: [TableRowDirective, { read: i0.ElementRef, descendants: true, emitDistinctChangesOnly: false }]
                }], focusFirstRowOnChanges: [{
                    type: i0.Input
                }], onKeyEvent: [{
                    type: i0.HostListener,
                    args: ['keydown', ['$event']]
                }] } });

    var directives = [TableRowDirective, TableDirective, TableSortableDirective, TableFocusDirective];
    var TableModule = /** @class */ (function () {
        function TableModule() {
        }
        return TableModule;
    }());
    TableModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TableModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableModule, declarations: [TableRowDirective, TableDirective, TableSortableDirective, TableFocusDirective], imports: [common.CommonModule], exports: [TableRowDirective, TableDirective, TableSortableDirective, TableFocusDirective] });
    TableModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: __spreadArray([], __read(directives)),
                        exports: __spreadArray([], __read(directives)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TableDirective = TableDirective;
    exports.TableFocusDirective = TableFocusDirective;
    exports.TableModule = TableModule;
    exports.TableRowDirective = TableRowDirective;
    exports.TableSortableDirective = TableSortableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-table.umd.js.map
