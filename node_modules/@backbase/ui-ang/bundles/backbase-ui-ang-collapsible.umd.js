(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/ui-ang/collapsible-accordion'), require('@angular/common'), require('@ng-bootstrap/ng-bootstrap')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/collapsible', ['exports', '@angular/core', '@backbase/ui-ang/collapsible-accordion', '@angular/common', '@ng-bootstrap/ng-bootstrap'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].collapsible = {}), global.ng.core, global.backbase["ui-ang"]["collapsible-accordion"], global.ng.common, global.i3));
})(this, (function (exports, i0, i1, i2, i3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    var CollapsibleHeaderDirective = /** @class */ (function () {
        function CollapsibleHeaderDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CollapsibleHeaderDirective;
    }());
    CollapsibleHeaderDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleHeaderDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CollapsibleHeaderDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleHeaderDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCollapsibleHeader]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var CollapsibleBodyDirective = /** @class */ (function () {
        function CollapsibleBodyDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return CollapsibleBodyDirective;
    }());
    CollapsibleBodyDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleBodyDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    CollapsibleBodyDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleBodyDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbCollapsibleBody]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    /**
     * @name CollapsibleComponent
     *
     * @description
     * Provides an expandable details-summary/body-header view.
     */
    var CollapsibleComponent = /** @class */ (function () {
        //TODO: review approach with such dependency on Accordion
        function CollapsibleComponent(bbCollapsibleAccordion) {
            var _this = this;
            this.bbCollapsibleAccordion = bbCollapsibleAccordion;
            /**
             * If true, it will use the ngIf approach to create the content
             * which is less performant but removes the extra div.
             * In case of styling issues, set this to true.
             */
            this.recreateBodyContent = false;
            /**
             * Whether chevron should be displayed. Defaults to true.
             */
            this.hasChevron = true;
            this.open = false;
            /**
             * Emits the toggle content event.
             */
            this.isOpenChange = new i0.EventEmitter();
            this.toggle = function () {
                _this.isOpen = !_this.isOpen;
            };
            if (this.bbCollapsibleAccordion) {
                this.bbCollapsibleAccordion.registerNestedPanel(this);
            }
            this.headerContext = {
                toggle: this.toggle,
                isOpen: this.isOpen,
            };
        }
        Object.defineProperty(CollapsibleComponent.prototype, "isOpen", {
            get: function () {
                return this.open;
            },
            /**
             * Toggles the content.
             */
            set: function (v) {
                this.open = v;
                this.isOpenChange.emit(v);
                this.headerContext.isOpen = v;
            },
            enumerable: false,
            configurable: true
        });
        CollapsibleComponent.prototype.ngOnDestroy = function () {
            if (this.bbCollapsibleAccordion) {
                this.bbCollapsibleAccordion.unregisterNestedPanel(this);
            }
        };
        return CollapsibleComponent;
    }());
    CollapsibleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleComponent, deps: [{ token: i1__namespace.CollapsibleAccordionComponent, host: true, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CollapsibleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleComponent, selector: "bb-collapsible-ui", inputs: { recreateBodyContent: "recreateBodyContent", hasChevron: "hasChevron", isOpen: "isOpen" }, outputs: { isOpenChange: "isOpenChange" }, queries: [{ propertyName: "collapsibleHeader", first: true, predicate: CollapsibleHeaderDirective, descendants: true, read: i0.TemplateRef, static: true }, { propertyName: "collapsibleBody", first: true, predicate: CollapsibleBodyDirective, descendants: true, read: i0.TemplateRef, static: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"collapsibleHeader\">\n  <ng-container *ngTemplateOutlet=\"collapsibleHeader; context: headerContext\"> </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"collapsibleBody && !recreateBodyContent\">\n  <div [ngbCollapse]=\"!isOpen\">\n    <ng-container *ngTemplateOutlet=\"collapsibleBody; context: headerContext\"> </ng-container>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"collapsibleBody && recreateBodyContent\">\n  <ng-container *ngIf=\"!isOpen\">\n    <ng-container *ngTemplateOutlet=\"collapsibleBody; context: headerContext\"> </ng-container>\n  </ng-container>\n</ng-container>\n", directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3__namespace.NgbCollapse, selector: "[ngbCollapse]", inputs: ["ngbCollapse", "animation"], outputs: ["ngbCollapseChange", "shown", "hidden"], exportAs: ["ngbCollapse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-collapsible-ui',
                        templateUrl: './collapsible.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.CollapsibleAccordionComponent, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Host
                        }] }];
        }, propDecorators: { collapsibleHeader: [{
                    type: i0.ContentChild,
                    args: [CollapsibleHeaderDirective, { read: i0.TemplateRef, static: true }]
                }], collapsibleBody: [{
                    type: i0.ContentChild,
                    args: [CollapsibleBodyDirective, { read: i0.TemplateRef, static: true }]
                }], recreateBodyContent: [{
                    type: i0.Input
                }], hasChevron: [{
                    type: i0.Input
                }], isOpen: [{
                    type: i0.Input
                }], isOpenChange: [{
                    type: i0.Output
                }] } });

    var CollapsibleModule = /** @class */ (function () {
        function CollapsibleModule() {
        }
        return CollapsibleModule;
    }());
    CollapsibleModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CollapsibleModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleModule, declarations: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective], imports: [i2.CommonModule, i3.NgbCollapseModule], exports: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective] });
    CollapsibleModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleModule, imports: [[i2.CommonModule, i3.NgbCollapseModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, i3.NgbCollapseModule],
                        declarations: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective],
                        exports: [CollapsibleComponent, CollapsibleHeaderDirective, CollapsibleBodyDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CollapsibleBodyDirective = CollapsibleBodyDirective;
    exports.CollapsibleComponent = CollapsibleComponent;
    exports.CollapsibleHeaderDirective = CollapsibleHeaderDirective;
    exports.CollapsibleModule = CollapsibleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-collapsible.umd.js.map
