(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('bignumber.js')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/amount', ['exports', '@angular/common', '@angular/core', 'bignumber.js'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].amount = {}), global.ng.common, global.ng.core, global.BigNumber));
})(this, (function (exports, i1, i0, BigNumber) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var BigNumber__default = /*#__PURE__*/_interopDefaultLegacy(BigNumber);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /**
     * @name AmountComponent
     *
     * @description
     * Component for representing amount in currency format .
     *
     * @dynamic (to suppress error with resolving statics declarations during compilation)
     *
     * @a11y
     * The amount component doesn't provide any specific properties for accessibility. But handles accessibility internally.
     *
     */
    var AmountComponent = /** @class */ (function () {
        function AmountComponent(locale) {
            this.locale = locale;
            /**
             * Determines currency type.
             * If nothing provided, wouldn't be displayed.
             */
            this.currency = '';
            /**
             * If "true" and amount is positive adds plus sign at the beginning.
             * Default value false.
             */
            this.showPlusSign = false;
            /**
             * Whether currency local should be transformed to symbol.
             * Default value true.
             */
            this.mapCurrency = true;
            /**
             * Whether percent symbol should be shown.
             * Default value false.
             */
            this.showPercent = false;
            /**
             * Whether abbreviation should be applied.
             * Default value false.
             */
            this.abbreviate = false;
            /**
             * Whether to display trailing zeroes.
             * Default value true
             */
            this.trailingZeroes = true;
            this._amountValue = new BigNumber__default["default"](NaN);
            this.setupConfiguration();
        }
        AmountComponent.prototype.ngOnChanges = function () {
            if (this.isUnsafeAmount) {
                console.warn('[bb-amount]: the amount was passed as a non safe number, the display can be wrong');
            }
            this.updateNumberFormat();
            this._amountValue = new BigNumber__default["default"](this.amount);
            this.amountTemplate = this.getAmountTemplate(this.transformedAmount);
        };
        Object.defineProperty(AmountComponent.prototype, "isNumeric", {
            get: function () {
                return !this._amountValue.isNaN();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountComponent.prototype, "isPositive", {
            get: function () {
                return this._amountValue.isPositive();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountComponent.prototype, "isZero", {
            get: function () {
                return this._amountValue.isZero();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountComponent.prototype, "isUnsafeAmount", {
            get: function () {
                return (typeof this.amount === 'number' &&
                    (this.amount > Number.MAX_SAFE_INTEGER ||
                        this.amount.toString().replace(/\D/, '').length > AmountComponent.maxSafeIntegerLength));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountComponent.prototype, "configDecimalPlaces", {
            get: function () {
                return this.decimalPlaces === undefined ? i1.getNumberOfCurrencyDigits(this.currency) : this.decimalPlaces;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountComponent.prototype, "amountFormat", {
            /**
             * Currency format depends on locale and could be represented for negative and
             * positive values differently (separated by `;` symbol).
             * See more http://cldr.unicode.org/translation/numbers-currency/number-patterns
             *
             * Example:
             * en-NL locale: '¤ #,##0.00;¤ -#,##0.00'
             */
            get: function () {
                var _a = AmountComponent.localeConfig, currencyFormat = _a.currencyFormat, decimalFormat = _a.decimalFormat, percentFormat = _a.percentFormat, minusSymbol = _a.minusSymbol, plusSymbol = _a.plusSymbol;
                var formatPattern = decimalFormat;
                if (this.showPercent) {
                    formatPattern = percentFormat;
                }
                if (this.currency) {
                    if (this.showPercent) {
                        console.warn('[bb-amount]: wrong configuration, `currency` and `showPercent` were set at the same time, therefore showPercent format will be ignored');
                    }
                    formatPattern = currencyFormat;
                }
                var _b = __read(formatPattern.split(';'), 2), generalPattern = _b[0], negativePattern = _b[1];
                if (this.isZero) {
                    return generalPattern;
                }
                else if (this.isPositive) {
                    return this.showPlusSign ? plusSymbol + generalPattern : generalPattern;
                }
                else {
                    return negativePattern || minusSymbol + generalPattern;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AmountComponent.prototype, "transformedAmount", {
            get: function () {
                var positiveAmount = this._amountValue.abs();
                var configDecimalPlaces = this.configDecimalPlaces;
                var shouldAbbreviate = this.abbreviate && positiveAmount.isGreaterThanOrEqualTo(AmountComponent.abbreviationConfig.minAmount);
                /**
                 * Example:
                 *
                 * {@link groupSymbol} = ','
                 * {@link decimalSymbol} = '.'
                 * {@link configDecimalPlaces} = '2'
                 *
                 * Here how regexp source looks line with config above: ([\d,]+[.]\d{2}).*
                 * This regexp has two selections:
                 * - selection for the group `([\d,]+[.]\d{2})` to match the decimal precision (no rounding)
                 * - and full string selection `.*` (used to replace full string with the group)
                 *
                 * REGEXP GROUP MATCHES ONLY THE AMOUNTS THAT HAVE TO BE UPDATED (TRIMMED)
                 *
                 * There are the cases when it does not have an effect, and it means that amount is already in appropriate format
                 */
                var regexp = new RegExp("([\\d" + this.groupSymbol + "]+[" + this.decimalSymbol + "]\\d{" + configDecimalPlaces + "}).*", 'g');
                var amount = shouldAbbreviate ? this.getAbbreviatedAmount(positiveAmount) : positiveAmount;
                var amountDecimalPlaces = amount.decimalPlaces();
                // In order to keep the precision keeping the original decimal places and replace with regexp
                var formattedAmount = amount
                    .toFormat(amountDecimalPlaces, BigNumber__default["default"].ROUND_CEIL, this.numberFormat)
                    .replace(regexp, '$1');
                return this.getAmountWithZeroPaddings(formattedAmount, configDecimalPlaces, amountDecimalPlaces);
            },
            enumerable: false,
            configurable: true
        });
        AmountComponent.prototype.getAmountWithZeroPaddings = function (formattedAmount, configDecimalPlaces, amountDecimalPlaces) {
            if (!this.trailingZeroes || amountDecimalPlaces >= configDecimalPlaces) {
                return formattedAmount;
            }
            var amountOfZeros = configDecimalPlaces - amountDecimalPlaces;
            var stringToAppend = '0'.repeat(amountOfZeros);
            if (!formattedAmount.includes(this.decimalSymbol)) {
                stringToAppend = this.decimalSymbol + stringToAppend;
            }
            return formattedAmount + stringToAppend;
        };
        AmountComponent.prototype.setupConfiguration = function () {
            if (!AmountComponent.localeConfig) {
                AmountComponent.localeConfig = {
                    currencyFormat: i1.getLocaleNumberFormat(this.locale, i1.NumberFormatStyle.Currency),
                    decimalFormat: i1.getLocaleNumberFormat(this.locale, i1.NumberFormatStyle.Decimal),
                    percentFormat: i1.getLocaleNumberFormat(this.locale, i1.NumberFormatStyle.Percent),
                    decimalSymbol: i1.getLocaleNumberSymbol(this.locale, i1.NumberSymbol.Decimal),
                    groupSymbol: i1.getLocaleNumberSymbol(this.locale, i1.NumberSymbol.Group),
                    currencyGroupSymbol: i1.getLocaleNumberSymbol(this.locale, i1.NumberSymbol.CurrencyGroup),
                    currencyDecimalSymbol: i1.getLocaleNumberSymbol(this.locale, i1.NumberSymbol.CurrencyDecimal),
                    minusSymbol: i1.getLocaleNumberSymbol(this.locale, i1.NumberSymbol.MinusSign),
                    plusSymbol: i1.getLocaleNumberSymbol(this.locale, i1.NumberSymbol.PlusSign),
                    percentSymbol: i1.getLocaleNumberSymbol(this.locale, i1.NumberSymbol.PercentSign),
                };
            }
        };
        AmountComponent.prototype.updateNumberFormat = function () {
            var _a = AmountComponent.localeConfig, decimalSymbol = _a.decimalSymbol, currencyDecimalSymbol = _a.currencyDecimalSymbol, groupSymbol = _a.groupSymbol, currencyGroupSymbol = _a.currencyGroupSymbol;
            this.groupSymbol = this.currency ? currencyGroupSymbol : groupSymbol;
            this.decimalSymbol = this.currency ? currencyDecimalSymbol : decimalSymbol;
            this.numberFormat = {
                groupSeparator: this.groupSymbol,
                decimalSeparator: this.decimalSymbol,
                groupSize: 3,
            };
        };
        /**
         * Converts original amount to abbreviated
         * Max abbreviated suffix value is 'T' (trillion) see {@link AmountComponent.abbreviationConfig}
         */
        AmountComponent.prototype.getAbbreviatedAmount = function (positiveAmount) {
            var suffixes = AmountComponent.abbreviationConfig.suffixes;
            var config = { suffix: suffixes[0], amount: positiveAmount.shiftedBy(-3) };
            for (var i = 1; i < suffixes.length; i++) {
                if (!config.amount.isGreaterThanOrEqualTo(1000)) {
                    break;
                }
                config.suffix = suffixes[i];
                config.amount = config.amount.shiftedBy(-3);
            }
            this.abbreviationSuffix = config.suffix;
            return config.amount;
        };
        AmountComponent.prototype.getAmountTemplate = function (amount) {
            var _a = AmountComponent.localeConfig, percentSymbol = _a.percentSymbol, minusSymbol = _a.minusSymbol, plusSymbol = _a.plusSymbol;
            var signSymbol = this.isPositive ? plusSymbol : minusSymbol;
            var currencySymbol = this.mapCurrency ? i1.getCurrencySymbol(this.currency, 'wide', this.locale) : this.currency;
            return this.amountFormat
                .replace(signSymbol, this.fillTemplate('sign', signSymbol))
                .replace('¤', this.fillTemplate('currency', currencySymbol))
                .replace('%', this.fillTemplate('percent', percentSymbol))
                .replace(/[#0,.]+/g, this.wrapAmount(amount));
        };
        AmountComponent.prototype.wrapAmount = function (amount) {
            var _a = __read(amount.split(this.decimalSymbol), 2), integer = _a[0], decimals = _a[1];
            return (this.fillTemplate('integer', integer) +
                (decimals ? this.fillTemplate('separator', this.decimalSymbol) + this.fillTemplate('decimals', decimals) : ''));
        };
        AmountComponent.prototype.fillTemplate = function (templateKey, value) {
            return AmountComponent.templates[templateKey].replace(AmountComponent.placeholder, value);
        };
        return AmountComponent;
    }());
    AmountComponent.placeholder = '{{}}';
    AmountComponent.templates = {
        sign: "<span class=\"sign\">" + AmountComponent.placeholder + "</span>",
        currency: "<span class=\"symbol\">" + AmountComponent.placeholder + "</span>",
        integer: "<span class=\"integer\">" + AmountComponent.placeholder + "</span>",
        separator: "<span class=\"decimal-separator\">" + AmountComponent.placeholder + "</span>",
        decimals: "<span class=\"decimals\">" + AmountComponent.placeholder + "</span>",
        percent: "<span class=\"percent\">" + AmountComponent.placeholder + "</span>",
    };
    AmountComponent.abbreviationConfig = {
        minAmount: 100000,
        suffixes: ['K', 'M', 'B', 'T'],
    };
    AmountComponent.maxSafeIntegerLength = Number.MAX_SAFE_INTEGER.toString().length;
    AmountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountComponent, deps: [{ token: i0.LOCALE_ID }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AmountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AmountComponent, selector: "bb-amount-ui", inputs: { currency: "currency", showPlusSign: "showPlusSign", mapCurrency: "mapCurrency", showPercent: "showPercent", abbreviate: "abbreviate", decimalPlaces: "decimalPlaces", trailingZeroes: "trailingZeroes", amount: "amount" }, usesOnChanges: true, ngImport: i0__namespace, template: "<span *ngIf=\"isNumeric\" data-role=\"bb-amount-value\" class=\"bb-amount\">\n  <span [innerHtml]=\"amountTemplate\" class=\"amount bb-amount__value\" data-role=\"bb-amount-value__amount\"></span>\n  <ng-container *ngIf=\"abbreviationSuffix\"\n    >&nbsp;<span class=\"sr-only\" i18n=\"Amount abbreviation long suffix@@bb-amount-ui.abbr.long\" #abbrTitle\n      >{ abbreviationSuffix, select, K {Thousand} M {Million} B {Billion} T {Trillion} }</span\n    ><abbr\n      [title]=\"abbrTitle.textContent\"\n      aria-hidden=\"true\"\n      data-role=\"bb-amount-value__abbreviation\"\n      i18n=\"Amount abbreviation short suffix@@bb-amount-ui.abbr.short\"\n      class=\"abbreviation bb-amount__abbreviation\"\n      >{ abbreviationSuffix, select, K {K} M {M} B {B} T {T} }</abbr\n    >\n  </ng-container>\n</span>\n", directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-amount-ui',
                        templateUrl: './amount.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }];
        }, propDecorators: { currency: [{
                    type: i0.Input
                }], showPlusSign: [{
                    type: i0.Input
                }], mapCurrency: [{
                    type: i0.Input
                }], showPercent: [{
                    type: i0.Input
                }], abbreviate: [{
                    type: i0.Input
                }], decimalPlaces: [{
                    type: i0.Input
                }], trailingZeroes: [{
                    type: i0.Input
                }], amount: [{
                    type: i0.Input
                }] } });

    var AmountModule = /** @class */ (function () {
        function AmountModule() {
        }
        return AmountModule;
    }());
    AmountModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AmountModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountModule, declarations: [AmountComponent], imports: [i1.CommonModule], exports: [AmountComponent] });
    AmountModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountModule, imports: [[i1.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule],
                        declarations: [AmountComponent],
                        exports: [AmountComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AmountComponent = AmountComponent;
    exports.AmountModule = AmountModule;
    exports.FormatAmountComponent = AmountComponent;
    exports.FormatAmountModule = AmountModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-amount.umd.js.map
