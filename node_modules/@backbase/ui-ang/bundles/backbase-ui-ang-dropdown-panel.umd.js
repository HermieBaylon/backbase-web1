(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ng-bootstrap/ng-bootstrap'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/dropdown-panel', ['exports', '@angular/core', '@ng-bootstrap/ng-bootstrap', 'rxjs', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["dropdown-panel"] = {}), global.ng.core, global.i1, global.rxjs, global.ng.common));
})(this, (function (exports, i0, i1, rxjs, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var DropdownMenuDirective = /** @class */ (function () {
        function DropdownMenuDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return DropdownMenuDirective;
    }());
    DropdownMenuDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DropdownMenuDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMenuDirective, selector: "ng-template[bbDropdownMenu]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMenuDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbDropdownMenu]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    var DropdownToggleDirective = /** @class */ (function () {
        function DropdownToggleDirective(templateRef) {
            this.templateRef = templateRef;
        }
        return DropdownToggleDirective;
    }());
    DropdownToggleDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownToggleDirective, deps: [{ token: i0__namespace.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DropdownToggleDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DropdownToggleDirective, selector: "ng-template[bbDropdownToggle]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownToggleDirective, decorators: [{
                type: i0.Directive,
                args: [{ selector: 'ng-template[bbDropdownToggle]' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.TemplateRef }]; } });
    /**
     * @name DropdownPanelComponent
     *
     * @description
     * Component incapsulating logic for showing/hiding dropdown.
     */
    var DropdownPanelComponent = /** @class */ (function () {
        function DropdownPanelComponent(config) {
            this.isOpen = new rxjs.Subject();
            /**
             * Event emitted when dropdown open/close.
             */
            this.open = this.isOpen.asObservable();
            config.autoClose = 'outside';
        }
        DropdownPanelComponent.prototype.changeState = function (state) {
            this.isOpen.next(state);
        };
        DropdownPanelComponent.prototype.ngAfterContentInit = function () {
            if (!this.customDropdownToggle) {
                throw new Error('BB Dropdown ui. Toggle content is required.');
            }
            if (!this.customDropdownContent) {
                throw new Error('BB Dropdown ui. Dropdown content is required.');
            }
        };
        DropdownPanelComponent.prototype.closeMenu = function () {
            if (this.dropdown) {
                this.dropdown.close();
            }
        };
        return DropdownPanelComponent;
    }());
    DropdownPanelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownPanelComponent, deps: [{ token: i1__namespace.NgbDropdownConfig }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DropdownPanelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownPanelComponent, selector: "bb-dropdown-panel-ui", outputs: { open: "open" }, providers: [i1.NgbDropdownConfig], queries: [{ propertyName: "customDropdownContent", first: true, predicate: DropdownMenuDirective, descendants: true, read: i0.TemplateRef, static: true }, { propertyName: "customDropdownToggle", first: true, predicate: DropdownToggleDirective, descendants: true, read: i0.TemplateRef, static: true }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: i1.NgbDropdown, descendants: true, static: true }], ngImport: i0__namespace, template: "<div\n  [attr.data-role]=\"'dropdown-panel'\"\n  class=\"bb-dropdown-panel\"\n  [placement]=\"'bottom'\"\n  (openChange)=\"changeState($event)\"\n  ngbDropdown\n>\n  <div ngbDropdownToggle [attr.data-role]=\"'dropdown-toggle'\" class=\"bb-dropdown-panel__dropdown-toggle\">\n    <ng-container *ngTemplateOutlet=\"customDropdownToggle; context: { isOpen: isOpen | async }\"></ng-container>\n  </div>\n  <div class=\"bb-dropdown-panel__dropdown\" ngbDropdownMenu position=\"top\" [attr.data-role]=\"'dropdown-panel-menu'\">\n    <ng-container *ngTemplateOutlet=\"customDropdownContent\"></ng-container>\n  </div>\n</div>\n", directives: [{ type: i1__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i1__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }], pipes: { "async": i2__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownPanelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-dropdown-panel-ui',
                        templateUrl: './dropdown-panel.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [i1.NgbDropdownConfig],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.NgbDropdownConfig }]; }, propDecorators: { open: [{
                    type: i0.Output
                }], customDropdownContent: [{
                    type: i0.ContentChild,
                    args: [DropdownMenuDirective, { read: i0.TemplateRef, static: true }]
                }], customDropdownToggle: [{
                    type: i0.ContentChild,
                    args: [DropdownToggleDirective, { read: i0.TemplateRef, static: true }]
                }], dropdown: [{
                    type: i0.ViewChild,
                    args: [i1.NgbDropdown, { static: true }]
                }] } });

    var DropdownPanelModule = /** @class */ (function () {
        function DropdownPanelModule() {
        }
        return DropdownPanelModule;
    }());
    DropdownPanelModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownPanelModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DropdownPanelModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownPanelModule, declarations: [DropdownPanelComponent, DropdownMenuDirective, DropdownToggleDirective], imports: [i2.CommonModule, i1.NgbDropdownModule], exports: [DropdownPanelComponent, DropdownToggleDirective, DropdownMenuDirective] });
    DropdownPanelModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownPanelModule, imports: [[i2.CommonModule, i1.NgbDropdownModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownPanelModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, i1.NgbDropdownModule],
                        declarations: [DropdownPanelComponent, DropdownMenuDirective, DropdownToggleDirective],
                        exports: [DropdownPanelComponent, DropdownToggleDirective, DropdownMenuDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DropdownMenuDirective = DropdownMenuDirective;
    exports.DropdownPanelComponent = DropdownPanelComponent;
    exports.DropdownPanelModule = DropdownPanelModule;
    exports.DropdownToggleDirective = DropdownToggleDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-dropdown-panel.umd.js.map
