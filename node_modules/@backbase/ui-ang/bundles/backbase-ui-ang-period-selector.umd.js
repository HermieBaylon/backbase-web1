(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/button')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/period-selector', ['exports', '@angular/core', '@angular/common', '@backbase/ui-ang/icon', '@backbase/ui-ang/button'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["period-selector"] = {}), global.ng.core, global.ng.common, global.backbase["ui-ang"].icon, global.backbase["ui-ang"].button));
})(this, (function (exports, i0, i1, i2, i3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    /**
     * @name PeriodSelectorComponent
     *
     * @description
     * Component that selects a period.
     */
    var PeriodSelectorComponent = /** @class */ (function () {
        function PeriodSelectorComponent(datePipe) {
            var _this = this;
            this.datePipe = datePipe;
            this.combinedFormatters = {
                title: function (date) { return _this.datePipe.transform(date, 'MMMM') || ''; },
                start: function (date) { return _this.datePipe.transform(date, 'mediumDate') || ''; },
                end: function (date) { return _this.datePipe.transform(date, 'mediumDate') || ''; },
            };
            /**
             * Period step
             */
            this.period = 'month';
            /**
             * EventEmitter for triggering a periodChange event.
             */
            this.periodChange = new i0.EventEmitter();
        }
        Object.defineProperty(PeriodSelectorComponent.prototype, "periodFormatters", {
            /**
             * Custom date period formatter.
             */
            set: function (formatters) {
                this.combinedFormatters = Object.assign(this.combinedFormatters, formatters);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PeriodSelectorComponent.prototype, "isLastPeriod", {
            get: function () {
                if (!this.periodStart) {
                    return true;
                }
                var now = new Date();
                return now.getFullYear() === this.periodStart.getFullYear() && now.getMonth() === this.periodStart.getMonth();
            },
            enumerable: false,
            configurable: true
        });
        PeriodSelectorComponent.prototype.ngOnInit = function () {
            if (typeof this.periodStart === 'undefined' || typeof this.periodEnd === 'undefined') {
                throw new Error('`periodStart`, and `periodEnd` inputs are required in `bb-period-selector-ui` component');
            }
            this.setFormattedValues();
        };
        PeriodSelectorComponent.prototype.setFormattedValues = function () {
            this.formattedTitle = this.combinedFormatters.title(this.periodStart);
            this.formattedStart = this.combinedFormatters.start(this.periodStart);
            this.formattedEnd = this.combinedFormatters.end(this.periodEnd);
        };
        PeriodSelectorComponent.prototype.changePeriod = function (next) {
            if (!this.periodStart || (next && this.isLastPeriod)) {
                return;
            }
            this.periodStart.setMonth(this.periodStart.getMonth() + (next ? 1 : -1));
            this.periodEnd = this.isLastPeriod
                ? new Date(this.periodStart.getFullYear(), this.periodStart.getMonth(), new Date().getDate(), 23, 59, 59, 999)
                : new Date(this.periodStart.getFullYear(), this.periodStart.getMonth() + 1, 0, 23, 59, 59, 999);
            this.setFormattedValues();
            this.periodChange.emit({
                start: this.periodStart,
                end: this.periodEnd,
            });
        };
        return PeriodSelectorComponent;
    }());
    PeriodSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PeriodSelectorComponent, deps: [{ token: i1__namespace.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PeriodSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PeriodSelectorComponent, selector: "bb-period-selector-ui", inputs: { periodStart: "periodStart", periodEnd: "periodEnd", periodFormatters: "periodFormatters", period: "period" }, outputs: { periodChange: "periodChange" }, ngImport: i0__namespace, template: "<div class=\"bb-period-selector\">\n  <div>\n    <button bbButton circle=\"\u201Ctrue\u201D\" (click)=\"changePeriod(false)\" color=\"link-dark\" size=\"sm\">\n      <bb-icon-ui size=\"md\" name=\"chevron-left\"></bb-icon-ui>\n    </button>\n  </div>\n  <div class=\"bb-period-selector__date\">\n    <div class=\"bb-period-selector__month\">{{ formattedTitle }}</div>\n    <div class=\"bb-period-selector__period\">\n      <time>{{ formattedStart }}</time> - <time>{{ formattedEnd }}</time>\n    </div>\n  </div>\n  <div>\n    <button\n      bbButton\n      [circle]=\"true\"\n      (click)=\"changePeriod(true)\"\n      [ngClass]=\"{ disabled: isLastPeriod }\"\n      color=\"link-dark\"\n      size=\"sm\"\n    >\n      <bb-icon-ui size=\"md\" name=\"chevron-right\"></bb-icon-ui>\n    </button>\n  </div>\n</div>\n", components: [{ type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PeriodSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-period-selector-ui',
                        templateUrl: './period-selector.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.DatePipe }]; }, propDecorators: { periodStart: [{
                    type: i0.Input
                }], periodEnd: [{
                    type: i0.Input
                }], periodFormatters: [{
                    type: i0.Input
                }], period: [{
                    type: i0.Input
                }], periodChange: [{
                    type: i0.Output
                }] } });

    var PeriodSelectorModule = /** @class */ (function () {
        function PeriodSelectorModule() {
        }
        return PeriodSelectorModule;
    }());
    PeriodSelectorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PeriodSelectorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PeriodSelectorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PeriodSelectorModule, declarations: [PeriodSelectorComponent], imports: [i1.CommonModule, i2.IconModule, i3.ButtonModule], exports: [PeriodSelectorComponent] });
    PeriodSelectorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PeriodSelectorModule, providers: [i1.DatePipe], imports: [[i1.CommonModule, i2.IconModule, i3.ButtonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PeriodSelectorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule, i2.IconModule, i3.ButtonModule],
                        declarations: [PeriodSelectorComponent],
                        exports: [PeriodSelectorComponent],
                        providers: [i1.DatePipe],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PeriodSelectorComponent = PeriodSelectorComponent;
    exports.PeriodSelectorModule = PeriodSelectorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-period-selector.umd.js.map
