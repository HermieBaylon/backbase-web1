(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@backbase/ui-ang/base-classes'), require('@angular/localize/init'), require('@backbase/ui-ang/util'), require('@backbase/foundation-ang/future'), require('@backbase/ui-ang/services'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/loading-indicator'), require('@angular/common'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/tooltip-directive')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/input-inline-edit', ['exports', '@angular/core', '@angular/forms', '@backbase/ui-ang/base-classes', '@angular/localize/init', '@backbase/ui-ang/util', '@backbase/foundation-ang/future', '@backbase/ui-ang/services', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/loading-indicator', '@angular/common', '@backbase/ui-ang/button', '@backbase/ui-ang/tooltip-directive'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["input-inline-edit"] = {}), global.ng.core, global.ng.forms, global.backbase["ui-ang"]["base-classes"], global.ng.localize.init, global.backbase["ui-ang"].util, global.i1, global.backbase["ui-ang"].services, global.backbase["ui-ang"].icon, global.backbase["ui-ang"]["input-text"], global.backbase["ui-ang"]["input-validation-message"], global.backbase["ui-ang"]["loading-indicator"], global.ng.common, global.backbase["ui-ang"].button, global.backbase["ui-ang"]["tooltip-directive"]));
})(this, (function (exports, i0, i10, baseClasses, init, util, i1, i2, i3, i4, i5, i6, i7, i8, i9) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var defaultAriaLabels = {
        accept: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":Aria label for accept button@@input-inline-edit-ui.button.aria-label.accept:Accept"], [":Aria label for accept button@@input-inline-edit-ui.button.aria-label.accept:Accept"]))),
        edit: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":Aria label for edit button@@input-inline-edit-ui.button.aria-label.edit:Edit"], [":Aria label for edit button@@input-inline-edit-ui.button.aria-label.edit:Edit"]))),
        cancel: $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":Aria label for cancel button@@input-inline-edit-ui.button.aria-label.cancel:Cancel"], [":Aria label for cancel button@@input-inline-edit-ui.button.aria-label.cancel:Cancel"]))),
    };
    var defaultTooltips = Object.assign({}, defaultAriaLabels);
    var templateObject_1, templateObject_2, templateObject_3;

    exports.InputInlineEditState = void 0;
    (function (InputInlineEditState) {
        InputInlineEditState[InputInlineEditState["IDLE"] = 0] = "IDLE";
        InputInlineEditState[InputInlineEditState["LOADING"] = 1] = "LOADING";
        InputInlineEditState[InputInlineEditState["EDITING"] = 2] = "EDITING";
    })(exports.InputInlineEditState || (exports.InputInlineEditState = {}));
    /**
     * @name InputInlineEditComponent
     *
     * @a11y Current component provide option to pass needed accessibility
     * attributes. You need to take care of properties that are required in your case :
     *  - role
     *  - aria-activedescendant
     *  - aria-describedby
     *  - aria-expanded
     *  - aria-invalid
     *  - aria-label
     *  - aria-labelledby
     *  - aria-owns
     *
     * @description
     * Component that enables inline input editing.
     */
    var InputInlineEditComponent = /** @class */ (function (_super) {
        __extends(InputInlineEditComponent, _super);
        function InputInlineEditComponent(cd, deprecationsService, domAttributesService) {
            var _this = _super.call(this, cd, deprecationsService) || this;
            _this.domAttributesService = domAttributesService;
            _this._state = exports.InputInlineEditState.IDLE;
            /**
             * Emit on edit state changes
             */
            _this.stateChange = new i0.EventEmitter();
            /**
             * Flag represents visibility of edit button
             *
             * @default: true
             */
            _this.canEdit = true;
            /**
             * Applies additional loading state for edit flow
             *
             * @default: false
             */
            _this.hasLoadingState = false;
            /**
             * The maxLength for the text input.
             */
            _this.maxLength = Infinity;
            /**
             * The minLength for the text input.
             */
            _this.minLength = 0;
            /**
             * Whether the text input should be auto-focused when shown.
             */
            _this.autofocus = false;
            /**
             * The event that's fired after on Cancel.
             */
            _this.cancel = new i0.EventEmitter();
            /**
             * The event that's fired after on Accept.
             */
            _this.accept = new i0.EventEmitter();
            /**
             * string for aria label on Accept button
             */
            _this.ariaLabelAccept = defaultAriaLabels.accept;
            /**
             * string for aria label on Cancel button
             */
            _this.ariaLabelCancel = defaultAriaLabels.cancel;
            /**
             * string for aria label on Edit button
             */
            _this.ariaLabelEdit = defaultAriaLabels.edit;
            /**
             * string for tooltip on Accept button
             */
            _this.tooltipAccept = defaultTooltips.accept;
            /**
             * string for tooltip on Cancel button
             */
            _this.tooltipCancel = defaultTooltips.cancel;
            /**
             * string for tooltip on Edit button
             */
            _this.tooltipEdit = defaultTooltips.edit;
            /**
             * Utility function for use in template
             */
            _this.idListAttr = util.idListAttr;
            _this.validationMessagesId = _this.domAttributesService.generateId();
            return _this;
        }
        Object.defineProperty(InputInlineEditComponent.prototype, "state", {
            /**
             * State for inline edit
             */
            set: function (value) {
                this._state = value;
                if (this.vForm && value === exports.InputInlineEditState.IDLE) {
                    this.vForm.controls.inputInline.setValue(this._inputText);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputInlineEditComponent.prototype, "inputText", {
            get: function () {
                return this._inputText;
            },
            /**
             * string for editing
             */
            set: function (value) {
                var _a;
                this._inputText = value;
                (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls.inputInline.setValue(this._inputText);
            },
            enumerable: false,
            configurable: true
        });
        InputInlineEditComponent.prototype.ngAfterContentInit = function () {
            var validators = [i10.Validators.maxLength(this.maxLength), i10.Validators.minLength(this.minLength)];
            if (this.required) {
                validators.push(i10.Validators.required);
            }
            if (this.pattern) {
                validators.push(i10.Validators.pattern(this.pattern));
            }
            if (this.minValue) {
                validators.push(i10.Validators.min(this.minValue));
            }
            if (this.maxValue) {
                validators.push(i10.Validators.max(this.maxValue));
            }
            this.vForm = new i10.FormGroup({
                inputInline: new i10.FormControl(this._inputText, i10.Validators.compose(validators)),
            });
        };
        InputInlineEditComponent.prototype.writeValue = function (inputValue) {
            if (typeof inputValue === 'string') {
                this._inputText = inputValue;
            }
            _super.prototype.writeValue.call(this, inputValue);
        };
        InputInlineEditComponent.prototype.onEdit = function (event) {
            event.stopPropagation();
            this.updateState(exports.InputInlineEditState.EDITING);
        };
        InputInlineEditComponent.prototype.onCancel = function (event) {
            var _a;
            if (event) {
                event.stopPropagation();
            }
            (_a = this.vForm) === null || _a === void 0 ? void 0 : _a.controls.inputInline.setValue(this._inputText);
            this.updateState(exports.InputInlineEditState.IDLE);
            this.cancel.emit();
        };
        Object.defineProperty(InputInlineEditComponent.prototype, "isLoading", {
            get: function () {
                return this._state === exports.InputInlineEditState.LOADING;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputInlineEditComponent.prototype, "editMode", {
            get: function () {
                return this._state === exports.InputInlineEditState.EDITING;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputInlineEditComponent.prototype, "isIdleMode", {
            get: function () {
                return this._state === exports.InputInlineEditState.IDLE;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Emits the updated value from input
         *
         * If the {@link InputInlineEditComponent.hasLoadingState } set to true -> the state is not changed,
         * as component state should be updated from outside, otherwise the value will be updated with the
         * new one and state will be switched to `IDLE`
         *
         */
        InputInlineEditComponent.prototype.onAccept = function () {
            var newString = this.vForm ? this.vForm.controls.inputInline.value : '';
            if (!this.hasLoadingState) {
                this.updateState(exports.InputInlineEditState.IDLE);
                this._inputText = newString;
                this.onValueChange(newString);
            }
            this.accept.emit(newString);
        };
        InputInlineEditComponent.prototype.hasError = function (type) {
            var fieldControl = this.vForm ? this.vForm.controls.inputInline : null;
            if (!fieldControl || !fieldControl.errors) {
                return undefined;
            }
            return type ? fieldControl.errors[type] : fieldControl.errors;
        };
        InputInlineEditComponent.prototype.onKeydownHandler = function (evt) {
            if (this.editMode) {
                this.onCancel();
            }
        };
        InputInlineEditComponent.prototype.updateState = function (value) {
            this._state = value;
            this.stateChange.emit(value);
        };
        return InputInlineEditComponent;
    }(baseClasses.InputBaseComponent));
    InputInlineEditComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputInlineEditComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: i1__namespace.DeprecationsService }, { token: i2__namespace.DomAttributesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    InputInlineEditComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputInlineEditComponent, selector: "bb-input-inline-edit-ui", inputs: { state: "state", canEdit: "canEdit", hasLoadingState: "hasLoadingState", inputInlineTemplate: "inputInlineTemplate", inputText: "inputText", maxLength: "maxLength", minLength: "minLength", maxValue: "maxValue", minValue: "minValue", autofocus: "autofocus", ariaLabelAccept: "ariaLabelAccept", ariaLabelCancel: "ariaLabelCancel", ariaLabelEdit: "ariaLabelEdit", tooltipAccept: "tooltipAccept", tooltipCancel: "tooltipCancel", tooltipEdit: "tooltipEdit", autocomplete: "autocomplete", pattern: "pattern", hint: "hint" }, outputs: { stateChange: "stateChange", cancel: "cancel", accept: "accept" }, host: { listeners: { "document:keydown.escape": "onKeydownHandler($event)" } }, providers: [
            {
                provide: i10.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return InputInlineEditComponent; }),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"bb-input-inline-edit-ui\">\n  <ng-container *ngIf=\"isIdleMode; else editingState\">\n    <div class=\"bb-stack bb-input-inline-edit-ui__idle-wrapper\">\n      <ng-container\n        *ngTemplateOutlet=\"inputInlineTemplate ? inputInlineTemplate : defaultInlineTemplate; context: this\"\n      >\n      </ng-container>\n      <ng-template #defaultInlineTemplate>\n        <span class=\"bb-stack__item bb-stack__item--spacing-none\" data-role=\"inline-edit-text\">\n          {{ inputText }}\n        </span>\n      </ng-template>\n\n      <button\n        *ngIf=\"canEdit\"\n        bbButton\n        class=\"bb-stack__item bb-stack__item--no-shrink\"\n        (click)=\"onEdit($event)\"\n        [attr.aria-describedby]=\"ariaDescribedby\"\n        [attr.aria-label]=\"ariaLabelEdit\"\n        [attr.aria-labelledby]=\"ariaLabelledby\"\n        color=\"link-dark\"\n        [attr.data-role]=\"'inline-edit-btn'\"\n        [circle]=\"true\"\n        type=\"button\"\n        buttonSize=\"sm\"\n        [bbTooltip]=\"tooltipEdit\"\n        container=\"body\"\n        triggers=\"hover focus\"\n        placement=\"auto\"\n      >\n        <bb-icon-ui class=\"bb-text-support\" name=\"edit\"></bb-icon-ui>\n      </button>\n    </div>\n  </ng-container>\n  <ng-template #editingState>\n    <div class=\"form-group\">\n      <form [formGroup]=\"vForm\" (ngSubmit)=\"!hasError() && onAccept()\">\n        <bb-input-text-ui\n          [attr.data-role]=\"'inline-edit-input'\"\n          label=\"{{ label }}\"\n          formControlName=\"inputInline\"\n          [attr.aria-autocomplete]=\"ariaAutocomplete\"\n          [attr.aria-controls]=\"ariaControls\"\n          [attr.aria-labelledby]=\"ariaLabelledby\"\n          [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n          [attr.aria-expanded]=\"ariaExpanded\"\n          [attr.aria-activedescendant]=\"ariaActivedescendant\"\n          [attr.role]=\"role\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-owns]=\"ariaOwns\"\n          [required]=\"required\"\n          [readonly]=\"readonly\"\n          [maxLength]=\"maxLength\"\n          [minLength]=\"minLength\"\n          [autofocus]=\"true\"\n          [ngClass]=\"inputClassName\"\n          [attr.size]=\"size\"\n          (click)=\"$event.stopPropagation()\"\n          (blur)=\"onBlur($event)\"\n          id=\"{{ id }}\"\n          [autocomplete]=\"autocomplete\"\n        >\n        </bb-input-text-ui>\n        <div class=\"bb-stack bb-stack--align-top bb-stack--density-md\">\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <div class=\"bb-subtitle bb-text-support\" data-role=\"inline-edit-hint\" *ngIf=\"hint && !hasError()\">\n              {{ hint }}\n            </div>\n            <bb-input-validation-message-ui [showErrors]=\"hasError()\" [id]=\"validationMessagesId\">\n              <div\n                *ngIf=\"hasError('maxlength')\"\n                i18n=\"Max Length Error|String is more than 'maxLength' characters @@input-inline-edit-ui.maxLengthError\"\n              >\n                Insert max {{ maxLength }} characters\n              </div>\n              <div\n                *ngIf=\"hasError('minlength')\"\n                i18n=\"Min Length Error|String is less than 'minLength' characters @@input-inline-edit-ui.minLengthError\"\n              >\n                Insert min {{ minLength }} characters\n              </div>\n              <div\n                *ngIf=\"hasError('min')\"\n                i18n=\"Min value Error|Number is less than 'minValue' @@input-inline-edit-ui.minValueError\"\n              >\n                Insert min {{ minValue }}\n              </div>\n              <div\n                *ngIf=\"hasError('max')\"\n                i18n=\"Max value Error|Number is more than 'maxValue' @@input-inline-edit-ui.maxValueError\"\n              >\n                Insert max {{ maxValue }}\n              </div>\n              <div\n                *ngIf=\"hasError('pattern')\"\n                i18n=\"Format value error|Format value is invalid @@input-inline-edit-ui.formatValueError\"\n              >\n                Input value provided is invalid\n              </div>\n              <div\n                *ngIf=\"hasError('required')\"\n                i18n=\"Required error|String is required @@input-inline-edit-ui.requiredError\"\n              >\n                Field is required\n              </div>\n            </bb-input-validation-message-ui>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right flex-shrink-0\">\n            <button\n              bbButton\n              type=\"reset\"\n              (click)=\"onCancel($event)\"\n              class=\"bb-stack__item bb-stack__item--push-right\"\n              color=\"danger\"\n              [attr.data-role]=\"'inline-edit-cancel'\"\n              [circle]=\"true\"\n              [attr.aria-label]=\"ariaLabelCancel\"\n              buttonSize=\"sm\"\n              [bbTooltip]=\"tooltipCancel\"\n              container=\"body\"\n              triggers=\"hover focus\"\n              placement=\"auto\"\n            >\n              <bb-icon-ui name=\"times\"></bb-icon-ui>\n            </button>\n            <button\n              bbButton\n              (click)=\"$event.stopPropagation()\"\n              color=\"success\"\n              [attr.data-role]=\"'inline-edit-accept'\"\n              type=\"submit\"\n              [circle]=\"true\"\n              [attr.aria-label]=\"ariaLabelAccept\"\n              buttonSize=\"sm\"\n              class=\"bb-load-button\"\n              [bbTooltip]=\"tooltipAccept\"\n              container=\"body\"\n              triggers=\"hover focus\"\n              placement=\"auto\"\n            >\n              <bb-loading-indicator-ui\n                *ngIf=\"isLoading; else checkIcon\"\n                class=\"bb-load-button__loading-indicator\"\n                loaderSize=\"sm\"\n              ></bb-loading-indicator-ui>\n              <ng-template #checkIcon>\n                <bb-icon-ui name=\"check\"></bb-icon-ui>\n              </ng-template>\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  </ng-template>\n</div>\n", components: [{ type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4__namespace.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i7__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i10__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i10__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i10__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i10__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputInlineEditComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-input-inline-edit-ui',
                        templateUrl: './input-inline-edit.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: i10.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return InputInlineEditComponent; }),
                                multi: true,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace.DeprecationsService }, { type: i2__namespace.DomAttributesService }]; }, propDecorators: { state: [{
                    type: i0.Input
                }], stateChange: [{
                    type: i0.Output
                }], canEdit: [{
                    type: i0.Input
                }], hasLoadingState: [{
                    type: i0.Input
                }], inputInlineTemplate: [{
                    type: i0.Input
                }], inputText: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], maxValue: [{
                    type: i0.Input
                }], minValue: [{
                    type: i0.Input
                }], autofocus: [{
                    type: i0.Input
                }], cancel: [{
                    type: i0.Output
                }], accept: [{
                    type: i0.Output
                }], ariaLabelAccept: [{
                    type: i0.Input
                }], ariaLabelCancel: [{
                    type: i0.Input
                }], ariaLabelEdit: [{
                    type: i0.Input
                }], tooltipAccept: [{
                    type: i0.Input
                }], tooltipCancel: [{
                    type: i0.Input
                }], tooltipEdit: [{
                    type: i0.Input
                }], autocomplete: [{
                    type: i0.Input
                }], pattern: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], onKeydownHandler: [{
                    type: i0.HostListener,
                    args: ['document:keydown.escape', ['$event']]
                }] } });

    var InputInlineEditModule = /** @class */ (function () {
        function InputInlineEditModule() {
        }
        return InputInlineEditModule;
    }());
    InputInlineEditModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputInlineEditModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    InputInlineEditModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputInlineEditModule, declarations: [InputInlineEditComponent], imports: [i7.CommonModule,
            i3.IconModule,
            i10.ReactiveFormsModule,
            baseClasses.BaseClassesModule,
            i8.ButtonModule,
            i4.InputTextModule,
            i5.InputValidationMessageModule,
            i6.LoadingIndicatorModule,
            i9.TooltipModule], exports: [InputInlineEditComponent] });
    InputInlineEditModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputInlineEditModule, imports: [[
                i7.CommonModule,
                i3.IconModule,
                i10.ReactiveFormsModule,
                baseClasses.BaseClassesModule,
                i8.ButtonModule,
                i4.InputTextModule,
                i5.InputValidationMessageModule,
                i6.LoadingIndicatorModule,
                i9.TooltipModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputInlineEditModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i7.CommonModule,
                            i3.IconModule,
                            i10.ReactiveFormsModule,
                            baseClasses.BaseClassesModule,
                            i8.ButtonModule,
                            i4.InputTextModule,
                            i5.InputValidationMessageModule,
                            i6.LoadingIndicatorModule,
                            i9.TooltipModule,
                        ],
                        declarations: [InputInlineEditComponent],
                        exports: [InputInlineEditComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.InputInlineEditComponent = InputInlineEditComponent;
    exports.InputInlineEditModule = InputInlineEditModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-input-inline-edit.umd.js.map
