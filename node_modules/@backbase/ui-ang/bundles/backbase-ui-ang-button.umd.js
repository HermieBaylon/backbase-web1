(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/button', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].button = {}), global.ng.core, global.ng.common));
})(this, (function (exports, i0, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /**
     * @name ButtonComponent
     *
     * @description
     * Component that displays a button.
     */
    var ButtonComponent = /** @class */ (function () {
        function ButtonComponent(elRef, renderer2) {
            this.elRef = elRef;
            this.renderer2 = renderer2;
            /**
             * This Boolean attribute lets you specify that the button should have input focus when the page
             * loads, unless the user overrides it, for example by typing in a different control.  Only one
             * form-associated element in a document can have this attribute specified.
             */
            this.autofocus = false;
            /**
             * The HTML5 button type.  Defaults to 'button'.
             */
            this.type = 'button';
            /**
             * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to
             * false.
             */
            this.disabled = false;
            /**
             * Size of the button.
             */
            this.buttonSize = 'md';
            /**
             * The color for the button.  Defaults to 'primary'.
             */
            this.color = 'primary';
            /**
             * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.
             */
            this.block = false;
        }
        ButtonComponent.prototype.moveAriaAttributes = function (hostEl, childEl) {
            var _this = this;
            var nodeMap = hostEl.attributes;
            // CUT every aria attribute from the host element and PASTE it into the button element
            Object.keys(nodeMap).forEach(function (key) {
                var item = nodeMap.item(Number(key));
                var attrName;
                var attrVal;
                if (item) {
                    attrName = item.name;
                    attrVal = item.value;
                    if (attrName.includes('aria')) {
                        _this.renderer2.setAttribute(childEl, attrName, attrVal);
                        _this.renderer2.removeAttribute(hostEl, attrName);
                    }
                }
            });
        };
        ButtonComponent.prototype.ngAfterViewInit = function () {
            this.moveAriaAttributes(this.elRef.nativeElement, this.buttonEl && this.buttonEl.nativeElement);
        };
        return ButtonComponent;
    }());
    ButtonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ButtonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ButtonComponent, selector: "bb-button-ui", inputs: { autofocus: "autofocus", type: "type", disabled: "disabled", buttonSize: "buttonSize", color: "color", block: "block" }, host: { properties: { "class.btn-block": "this.block" } }, viewQueries: [{ propertyName: "buttonEl", first: true, predicate: ["button"], descendants: true, static: true }], ngImport: i0__namespace, template: "<button\n  #button\n  [type]=\"type\"\n  class=\"btn bb-button btn-{{ color }}\"\n  [autofocus]=\"autofocus\"\n  [disabled]=\"disabled\"\n  [class.btn-block]=\"block\"\n  [ngClass]=\"buttonSize === 'sm' ? 'btn-sm' : 'btn-md'\"\n>\n  <ng-content></ng-content>\n</button>\n", directives: [{ type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-button-ui',
                        templateUrl: './button.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { autofocus: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], buttonSize: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], block: [{
                    type: i0.HostBinding,
                    args: ['class.btn-block']
                }, {
                    type: i0.Input
                }], buttonEl: [{
                    type: i0.ViewChild,
                    args: ['button', { static: true }]
                }] } });

    /**
     * @name ButtonDirective
     *
     * @description
     * Directive for styling button.
     *
     * @a11y
     * The `bbButton` directive doesn't provide any specific properties for accessibility.
     * In case of necessity add `aria-*` attributes to the `button` element.
     */
    var ButtonDirective = /** @class */ (function () {
        function ButtonDirective(renderer, hostElement) {
            this.renderer = renderer;
            this.hostElement = hostElement;
            /**
             * Button's type atrribute with default value.
             */
            this.type = 'button';
            /**
             * The color for the button. Defaults to 'primary'.
             * If a custom string used, then a css class is going to be added. The pattern is as follows:
             * `btn-customColor`
             */
            this.color = 'primary';
            /**
             * Size of the button.
             */
            this.buttonSize = 'md';
            /**
             * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.
             */
            this.block = false;
            /**
             * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.
             * This will only work when there's only an icon inside the button without a text.
             */
            this.circle = false;
        }
        ButtonDirective.prototype.ngOnInit = function () {
            this.renderer.addClass(this.hostElement.nativeElement, 'btn');
            this.renderer.addClass(this.hostElement.nativeElement, "btn-" + this.color);
            this.renderer.addClass(this.hostElement.nativeElement, "btn-" + this.buttonSize);
        };
        ButtonDirective.prototype.ngOnChanges = function (changes) {
            if (changes.color) {
                if (changes.color.previousValue) {
                    this.renderer.removeClass(this.hostElement.nativeElement, "btn-" + changes.color.previousValue);
                }
                if (changes.color.currentValue) {
                    this.renderer.addClass(this.hostElement.nativeElement, "btn-" + changes.color.currentValue);
                }
            }
            if (changes.buttonSize) {
                if (changes.buttonSize.previousValue) {
                    this.renderer.removeClass(this.hostElement.nativeElement, "btn-" + changes.buttonSize.previousValue);
                }
                if (changes.buttonSize.currentValue) {
                    this.renderer.addClass(this.hostElement.nativeElement, "btn-" + changes.buttonSize.currentValue);
                }
            }
        };
        return ButtonDirective;
    }());
    ButtonDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonDirective, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    ButtonDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ButtonDirective, selector: "button[bbButton]", inputs: { type: "type", color: "color", buttonSize: "buttonSize", block: "block", circle: "circle" }, host: { properties: { "type": "this.type", "class.btn-block": "this.block", "class.btn-circle": "this.circle" } }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'button[bbButton]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.ElementRef }]; }, propDecorators: { type: [{
                    type: i0.HostBinding,
                    args: ['type']
                }, {
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], buttonSize: [{
                    type: i0.Input
                }], block: [{
                    type: i0.HostBinding,
                    args: ['class.btn-block']
                }, {
                    type: i0.Input
                }], circle: [{
                    type: i0.HostBinding,
                    args: ['class.btn-circle']
                }, {
                    type: i0.Input
                }] } });

    var ButtonModule = /** @class */ (function () {
        function ButtonModule() {
        }
        return ButtonModule;
    }());
    ButtonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ButtonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonModule, declarations: [ButtonComponent, ButtonDirective], imports: [i1.CommonModule], exports: [ButtonComponent, ButtonDirective] });
    ButtonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonModule, imports: [[i1.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ButtonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule],
                        declarations: [ButtonComponent, ButtonDirective],
                        exports: [ButtonComponent, ButtonDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ButtonComponent = ButtonComponent;
    exports.ButtonDirective = ButtonDirective;
    exports.ButtonModule = ButtonModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-button.umd.js.map
