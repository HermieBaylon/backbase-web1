(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/services', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].services = {}), global.ng.core));
})(this, (function (exports, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    function navigatorFactory() {
        return navigator;
    }
    var NAVIGATOR_TOKEN = new i0.InjectionToken('Navigator object');
    var BrowserService = /** @class */ (function () {
        // 'any' due to issue https://github.com/angular/angular/issues/15640
        function BrowserService(navigator) {
            this.navigator = navigator;
        }
        BrowserService.prototype.browserIsMSIE = function () {
            return this.navigator.userAgent.indexOf('MSIE') > -1 || this.navigator.userAgent.indexOf('Trident/') > -1;
        };
        return BrowserService;
    }());
    BrowserService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BrowserService, deps: [{ token: NAVIGATOR_TOKEN }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BrowserService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BrowserService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BrowserService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [NAVIGATOR_TOKEN]
                        }] }];
        } });

    /**
     * Utility service for DOM manipulations
     */
    var DomAttributesService = /** @class */ (function () {
        function DomAttributesService() {
            this.idPrefix = 'bb_element_';
            this.nextId = 0;
        }
        DomAttributesService.prototype.generateId = function () {
            return "" + this.idPrefix + this.nextId++;
        };
        DomAttributesService.prototype.moveAriaAttributes = function (hostEl, childEl, renderer2) {
            var nodeMap = hostEl.attributes;
            // CUT every aria attribute from the host element and PASTE it into the specified element
            Object.keys(nodeMap)
                .map(function (key) { return nodeMap.item(Number(key)); })
                .filter(function (item) { return item && (item.name.startsWith('aria-') || item.name.toLowerCase() === 'arialabel'); })
                .forEach(function (item) {
                var attrName = item.name, attrVal = item.value;
                if (attrName.toLowerCase() === 'arialabel') {
                    renderer2.setAttribute(childEl, 'aria-label', attrVal);
                }
                else {
                    renderer2.setAttribute(childEl, attrName, attrVal);
                }
                renderer2.removeAttribute(hostEl, attrName);
            });
        };
        DomAttributesService.prototype.copyAriaAttributes = function (hostEl, childEl, renderer2) {
            var nodeMap = hostEl.attributes;
            Object.keys(nodeMap)
                .map(function (key) { return nodeMap.item(Number(key)); })
                .filter(function (item) { return item && item.name.startsWith('aria-'); })
                .forEach(function (item) { return item && renderer2.setAttribute(childEl, item.name, item.value); });
        };
        return DomAttributesService;
    }());
    DomAttributesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DomAttributesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BrowserService = BrowserService;
    exports.DomAttributesService = DomAttributesService;
    exports.NAVIGATOR_TOKEN = NAVIGATOR_TOKEN;
    exports.navigatorFactory = navigatorFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-services.umd.js.map
