{"version":3,"file":"backbase-ui-ang-media-query-lib.umd.js","sources":["../../../../libs/ui-ang/media-query-lib/media-query.service.ts","../../../../libs/ui-ang/media-query-lib/media-query.module.ts","../../../../libs/ui-ang/media-query-lib/backbase-ui-ang-media-query-lib.ts"],"sourcesContent":["import { Inject, Injectable, NgZone, Optional } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { switchMap } from 'rxjs/operators';\nimport { from, Observable, of } from 'rxjs';\n\nimport { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';\n\nexport type MediaBreakpoints = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\n/**\n * @name MediaQueryService\n *\n * @dynamic (to suppress error with resolving Document type during compilation)\n *\n * @description\n * MediaQueryService is a utility for evaluating media queries and reacting to their changing.\n *\n * @example\n * import { MediaQueryService } from '@backbase/foundation-ang/ui';\n *\n * @Component({...})\n * class MyComponent {\n *\n *   constructor(private readonly mediaQueryService: MediaQueryService) {}\n *\n *   // with standard grid breakpoint\n *   readonly isStandardMdMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 'md');\n *   // custom value\n *   readonly isCustomMedia$ = this.mediaQueryService.isMediaBreakpointMatches('max-width', 500);\n */\n@Injectable()\nexport class MediaQueryService {\n  constructor(\n    @Inject(DOCUMENT) private readonly document: Document,\n    @Optional() private readonly cssVariablesService: CssVariablesService,\n    private readonly ngZone: NgZone,\n  ) {}\n\n  /**\n   * Observe media changes for current window.\n   *\n   * @param value - breakpoint value (could be custom number/standard grid breakpoint)\n   * @param type - breakpoint type\n   */\n  isMediaBreakpointMatches(type: 'max-width' | 'min-width', value: MediaBreakpoints | number): Observable<boolean> {\n    const isCustomBreakpoint = typeof value === 'number';\n\n    if (!isCustomBreakpoint && !this.cssVariablesService) {\n      throw new Error('In order to use media breakpoints, please add provider for CssVariablesService.');\n    }\n\n    const mediaBreakpointValue$ = isCustomBreakpoint\n      ? of(`${value}px`)\n      : from(this.cssVariablesService.getCssVariable(`--breakpoint-${value}`));\n\n    return mediaBreakpointValue$.pipe(\n      switchMap((mediaWidth) => {\n        const mediaQueryList = (this.document.defaultView as Window).matchMedia(`(${type}: ${mediaWidth})`);\n\n        return this.getMediaBreakpoints(mediaQueryList);\n      }),\n    );\n  }\n\n  private getMediaBreakpoints(mediaQueryList: MediaQueryList): Observable<boolean> {\n    return new Observable<boolean>((observer) => {\n      /**\n       *   MediaQueryList inherited form EventTarget in some browsers.\n       *   Therefore methods like `addEventListener` or `removeEventListener` doesn't work in Safari and IE.\n       *   For more details see:\n       *   https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#Browser_compatibility\n       */\n      const isFunctionAvailable = Boolean(mediaQueryList.addEventListener);\n      const mediaListener = ({ matches }: MediaQueryListEvent) => {\n        observer.next(matches);\n\n        /**\n         * Safari and IE does not inherit Event interface.\n         * It means that on media match, event will not be dispatched and Angular will not update UI.\n         * Simulating async event to cover this gap.\n         */\n        if (this.ngZone.isStable) {\n          this.ngZone.run(() => Promise.resolve());\n        }\n      };\n\n      // emit initial match\n      observer.next(mediaQueryList.matches);\n\n      if (isFunctionAvailable) {\n        mediaQueryList.addEventListener('change', mediaListener);\n      } else {\n        mediaQueryList.addListener(mediaListener);\n      }\n\n      return () => {\n        if (isFunctionAvailable) {\n          mediaQueryList.removeEventListener('change', mediaListener);\n        } else {\n          mediaQueryList.removeListener(mediaListener);\n        }\n      };\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';\nimport { MediaQueryService } from './media-query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [CssVariablesService, MediaQueryService],\n})\nexport class MediaQueryModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["of","from","switchMap","Observable","i0","DOCUMENT","i1","Injectable","Inject","Optional","CommonModule","CssVariablesService","NgModule"],"mappings":"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"}