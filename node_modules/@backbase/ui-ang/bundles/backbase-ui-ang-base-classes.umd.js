(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@backbase/foundation-ang/future')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/base-classes', ['exports', '@angular/core', '@angular/common', 'rxjs', '@backbase/foundation-ang/future'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["base-classes"] = {}), global.ng.core, global.ng.common, global.rxjs, global.i1));
})(this, (function (exports, i0, common, rxjs, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var _nextId = 0;
    function getInputNextId() {
        return "bb_input_" + _nextId++;
    }
    var defaultSize = 20;
    /**
     * Widget roles specified in ARIA 1.1
     */
    var VALID_WIDGET_ROLES = [
        'button',
        'checkbox',
        'combobox',
        'grid',
        'gridcell',
        'link',
        'listbox',
        'menu',
        'menubar',
        'menuitem',
        'menuitemcheckbox',
        'menuitemradio',
        'option',
        'progressbar',
        'radio',
        'radiogroup',
        'scrollbar',
        'searchbox',
        'separator',
        'slider',
        'spinbutton',
        'switch',
        'tab',
        'tablist',
        'tabpanel',
        'textbox',
        'tree',
        'treegrid',
        'treeitem',
    ];
    /**
     * @name InputBaseComponent
     *
     * @description
     * Base component for input fields.
     *
     * @a11y Current component provide option to pass needed accessibility
     * attributes to custom components
     */
    var InputBaseComponent = /** @class */ (function () {
        function InputBaseComponent(cd, deprecationsService) {
            this.cd = cd;
            this.deprecationsService = deprecationsService;
            this._id = getInputNextId();
            this.onTouched = rxjs.noop;
            /**
             * The label for the input. Defaults to an empty string.
             */
            this.label = '';
            this._size = defaultSize;
            // `aria-readonly` is not needed, use `readonly` instead
            // `aria-required` is not needed, use `required` instead
            /**
             * Whether the input is required. Defaults to false.
             */
            this.required = false;
            /**
             * Whether the input is read only. Defaults to false.
             */
            this.readonly = false;
            /**
             * An event emitter for on blur actions.
             */
            this.blur = new i0.EventEmitter();
            /**
             * An event emitter for on focus actions.
             */
            this.focus = new i0.EventEmitter();
            /**
             * Whether the text input should be auto-focused when shown.
             */
            this.autofocus = false;
            this._valueChange = new i0.EventEmitter();
            this.disabled = false;
            this.value = '';
            this.onChange = function () { };
        }
        Object.defineProperty(InputBaseComponent.prototype, "id", {
            get: function () {
                return this._id;
            },
            /**
             * The id for the input. Defaults to unique string.
             * Used to map the label to the input.
             */
            set: function (value) {
                this._id = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputBaseComponent.prototype, "role", {
            get: function () {
                return this._role;
            },
            /**
             * Customize the ARIA role for the HTML input/select/textarea element inside this component.
             *
             * This can be used to improve accessibility for components, for example by configuring `[role]="'combobox'"`
             * for a component that provides an autocomplete list.
             *
             * Values that are valid for the native HTML form elements are allowed.
             */
            set: function (value) {
                if (typeof value === 'string' && VALID_WIDGET_ROLES.indexOf(value) === -1) {
                    // Prevent setting invalid roles
                    // TODO: Log a warning about the invalid role
                    value = undefined;
                }
                this._role = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(InputBaseComponent.prototype, "size", {
            /**
             * Configure the minimum width to fit the specified number of characters that should fit for HTML `<input>`
             */
            get: function () {
                return this._size;
            },
            set: function (arg) {
                var size = this.getSizeByKeyword(arg);
                // Optionally convert a `size` keyword to an integer value.
                // This can be supported by subclasses of `InputBaseComponent`
                arg = typeof size !== 'undefined' ? size : arg;
                var int = parseInt(String(arg), 10);
                if (int >= 1 && !isNaN(int)) {
                    this._size = int;
                }
            },
            enumerable: false,
            configurable: true
        });
        InputBaseComponent.prototype.ngOnInit = function () {
            if (!(this.label || this.ariaLabel || this.ariaLabelledby)) {
                console.warn("Found an input from '" + this.constructor.name + "' without label, please provide it.");
            }
        };
        InputBaseComponent.prototype.onBlur = function ($event) {
            this.blur.emit($event);
            this.onTouched();
        };
        InputBaseComponent.prototype.onValueChange = function (newValue) {
            if (newValue === undefined) {
                this.onChange(this.value);
            }
            else {
                this.onChange(newValue);
                this.value = newValue;
                this._valueChange.emit(this.value);
            }
        };
        InputBaseComponent.prototype.onFocus = function ($event) {
            this.focus.emit($event);
        };
        InputBaseComponent.prototype.writeValue = function (inputValue) {
            this.value = inputValue === null ? '' : inputValue;
            this.cd.markForCheck();
        };
        InputBaseComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        InputBaseComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        InputBaseComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.cd.markForCheck();
        };
        /**
         * Returns the `input` `size` value for a keyword, such as "xxl".
         * Subclasses can choose to implement a custom mapping, which will be used to configure `size`.
         */
        InputBaseComponent.prototype.getSizeByKeyword = function (arg) {
            return undefined;
        };
        return InputBaseComponent;
    }());
    InputBaseComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputBaseComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: i1__namespace.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    InputBaseComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InputBaseComponent, selector: "ng-component", inputs: { id: "id", label: "label", role: "role", size: "size", inputClassName: "inputClassName", ariaAutocomplete: ["aria-autocomplete", "ariaAutocomplete"], ariaActivedescendant: ["aria-activedescendant", "ariaActivedescendant"], ariaControls: ["aria-controls", "ariaControls"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaExpanded: ["aria-expanded", "ariaExpanded"], ariaInvalid: ["aria-invalid", "ariaInvalid"], ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaOwns: ["aria-owns", "ariaOwns"], required: "required", readonly: "readonly", autofocus: "autofocus", disabled: "disabled" }, outputs: { blur: "blur", focus: "focus" }, ngImport: i0__namespace, template: '', isInline: true, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputBaseComponent, decorators: [{
                type: i0.Component,
                args: [{
                        template: '',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace.DeprecationsService }]; }, propDecorators: { id: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], role: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }], inputClassName: [{
                    type: i0.Input
                }], ariaAutocomplete: [{
                    type: i0.Input,
                    args: ['aria-autocomplete']
                }], ariaActivedescendant: [{
                    type: i0.Input,
                    args: ['aria-activedescendant']
                }], ariaControls: [{
                    type: i0.Input,
                    args: ['aria-controls']
                }], ariaDescribedby: [{
                    type: i0.Input,
                    args: ['aria-describedby']
                }], ariaExpanded: [{
                    type: i0.Input,
                    args: ['aria-expanded']
                }], ariaInvalid: [{
                    type: i0.Input,
                    args: ['aria-invalid']
                }], ariaLabel: [{
                    type: i0.Input,
                    args: ['aria-label']
                }], ariaLabelledby: [{
                    type: i0.Input,
                    args: ['aria-labelledby']
                }], ariaOwns: [{
                    type: i0.Input,
                    args: ['aria-owns']
                }], required: [{
                    type: i0.Input
                }], readonly: [{
                    type: i0.Input
                }], blur: [{
                    type: i0.Output
                }], focus: [{
                    type: i0.Output
                }], autofocus: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }] } });

    var InputBaseModule = /** @class */ (function () {
        function InputBaseModule() {
        }
        return InputBaseModule;
    }());
    InputBaseModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputBaseModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    InputBaseModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputBaseModule, declarations: [InputBaseComponent], imports: [common.CommonModule], exports: [InputBaseComponent] });
    InputBaseModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputBaseModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputBaseModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [InputBaseComponent],
                        exports: [InputBaseComponent],
                    }]
            }] });

    var BaseClassesModule = /** @class */ (function () {
        function BaseClassesModule() {
        }
        return BaseClassesModule;
    }());
    BaseClassesModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseClassesModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BaseClassesModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseClassesModule, imports: [InputBaseModule], exports: [InputBaseModule] });
    BaseClassesModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseClassesModule, imports: [[InputBaseModule], InputBaseModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseClassesModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [InputBaseModule],
                        exports: [InputBaseModule],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BaseClassesModule = BaseClassesModule;
    exports.InputBaseComponent = InputBaseComponent;
    exports.InputBaseModule = InputBaseModule;
    exports.defaultSize = defaultSize;
    exports.getInputNextId = getInputNextId;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-base-classes.umd.js.map
