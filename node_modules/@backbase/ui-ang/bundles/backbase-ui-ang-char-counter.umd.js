(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/char-counter', ['exports', '@angular/common', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["char-counter"] = {}), global.ng.common, global.ng.core));
})(this, (function (exports, i1, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * @name CharCounterComponent
     *
     * @description
     * Component for counting characters typed inside a form element
     */
    var CharCounterComponent = /** @class */ (function () {
        function CharCounterComponent(renderer, cd) {
            this.renderer = renderer;
            this.cd = cd;
            /**
             * Indicator for maximum character count.
             */
            this.maxLength = 150;
            this._blockTyping = false;
            this.counter = 0;
            this.valid = true;
        }
        Object.defineProperty(CharCounterComponent.prototype, "blockTyping", {
            get: function () {
                return this._blockTyping;
            },
            /**
             * Whether the element should be blocked when maximum character count is reached.
             */
            set: function (val) {
                this._blockTyping = val;
                if (this.blockTyping && this.element) {
                    this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());
                }
                else {
                    this.renderer.removeAttribute(this.element, 'maxlength');
                }
            },
            enumerable: false,
            configurable: true
        });
        CharCounterComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.blockTyping && this.element) {
                this.renderer.setAttribute(this.element, 'maxlength', this.maxLength.toString());
            }
            // Cover by setTimeout for handling value change in input/textarea
            // This change cannot be checked by lifecycle hooks.
            setTimeout(function () {
                _this.calculateElementValue();
            }, 0);
            this.renderer.listen(this.element, 'input', function () { return _this.calculateElementValue(); });
        };
        CharCounterComponent.prototype.ngOnChanges = function (changes) {
            var inputValue = changes.inputValue;
            if (inputValue && inputValue.previousValue !== inputValue.currentValue) {
                this.counter = inputValue.currentValue.length;
                this.valid = this.counter <= this.maxLength;
            }
        };
        // It should be deprecated, because it doesn't allow to count
        // value that was updated programmatically, for instance by patchValue
        CharCounterComponent.prototype.calculateElementValue = function () {
            this.counter = this.element ? this.element.value.length : 0;
            this.valid = this.counter <= this.maxLength;
            this.cd.detectChanges();
        };
        return CharCounterComponent;
    }());
    CharCounterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CharCounterComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CharCounterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CharCounterComponent, selector: "bb-char-counter-ui", inputs: { inputValue: "inputValue", element: "element", maxLength: "maxLength", blockTyping: "blockTyping" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"bb-char-counter\" [class.bb-char-counter--invalid]=\"!valid\">\n  <div [ngSwitch]=\"true\" aria-live=\"assertive\" class=\"sr-only\" aria-atomic=\"true\" role=\"log\">\n    <div\n      *ngSwitchCase=\"counter > maxLength - 4 && counter !== maxLength\"\n      i18n=\"\n        Above to reach Max Length Error|String is almost has 'maxLength' characters.\n        @@bb-char-counter-ui.pre-max-length-warning\"\n    >\n      You can type only {{ maxLength - counter }} more characters in this field.\n    </div>\n    <div\n      *ngSwitchCase=\"counter === maxLength\"\n      [attr.data-role]=\"'char-counter-error-message'\"\n      i18n=\"Max Length Error|String is more than 'maxLength' characters. @@bb-char-counter-ui.max-length-warning\"\n    >\n      Limit reached. You can only use {{ maxLength }} characters in this field.\n    </div>\n  </div>\n\n  <div *ngIf=\"element\" [attr.data-role]=\"'char-counter-current-max'\">{{ counter }}/{{ maxLength }}</div>\n</div>\n", directives: [{ type: i1__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CharCounterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-char-counter-ui',
                        templateUrl: './char-counter.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { inputValue: [{
                    type: i0.Input
                }], element: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], blockTyping: [{
                    type: i0.Input
                }] } });

    var CharCounterModule = /** @class */ (function () {
        function CharCounterModule() {
        }
        return CharCounterModule;
    }());
    CharCounterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CharCounterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CharCounterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CharCounterModule, declarations: [CharCounterComponent], imports: [i1.CommonModule], exports: [CharCounterComponent] });
    CharCounterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CharCounterModule, imports: [[i1.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CharCounterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule],
                        declarations: [CharCounterComponent],
                        exports: [CharCounterComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CharCounterComponent = CharCounterComponent;
    exports.CharCounterModule = CharCounterModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-char-counter.umd.js.map
