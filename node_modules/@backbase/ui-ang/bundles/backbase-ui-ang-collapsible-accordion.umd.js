(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/collapsible-accordion', ['exports', '@angular/common', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["collapsible-accordion"] = {}), global.ng.common, global.ng.core));
})(this, (function (exports, common, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * @name CollapsibleAccordionComponent
     *
     * @description
     * Component that groups Collapsible components to show them in an accordion fashion.
     * It can assure that only one Collapsible panel can be opened at a time
     */
    var CollapsibleAccordionComponent = /** @class */ (function () {
        function CollapsibleAccordionComponent(parentAccordion) {
            var _this = this;
            this.parentAccordion = parentAccordion;
            /**
             * Assures that only one Collapsible panel can be opened at a time.
             */
            this.closeOthers = false;
            /**
             * When true displays the first panel on load.
             */
            this.openFirst = false;
            this.collapsiblePanels = new Map();
            this.nestedAccordions = new Set();
            this.closeOtherPanels = function (panel) { return function (value) {
                if (!value) {
                    return;
                }
                if (!_this.closeOthers) {
                    return;
                }
                _this.collapsiblePanels.forEach(function (_, item) {
                    if (panel !== item) {
                        item.isOpen = false;
                    }
                });
            }; };
        }
        Object.defineProperty(CollapsibleAccordionComponent.prototype, "obeyParentAccordion", {
            /**
             * When true the Accordion will inherit the parent Accordion behaviour.
             */
            set: function (obey) {
                if (!this.parentAccordion) {
                    return;
                }
                if (obey) {
                    this.parentAccordion.registerNestedAccordion(this);
                }
                else {
                    this.parentAccordion.unregisterNestedAccordion(this);
                }
            },
            enumerable: false,
            configurable: true
        });
        CollapsibleAccordionComponent.prototype.ngOnDestroy = function () {
            this.obeyParentAccordion = false;
        };
        CollapsibleAccordionComponent.prototype.registerNestedAccordion = function (childAccordion) {
            this.nestedAccordions.add(childAccordion);
        };
        CollapsibleAccordionComponent.prototype.unregisterNestedAccordion = function (childAccordion) {
            this.nestedAccordions.delete(childAccordion);
        };
        CollapsibleAccordionComponent.prototype.registerNestedPanel = function (panel) {
            var subscription = panel.isOpenChange.subscribe(this.closeOtherPanels(panel));
            this.collapsiblePanels.set(panel, subscription);
        };
        CollapsibleAccordionComponent.prototype.unregisterNestedPanel = function (panel) {
            var subscription = this.collapsiblePanels.get(panel);
            if (subscription) {
                subscription.unsubscribe();
            }
            this.collapsiblePanels.delete(panel);
        };
        CollapsibleAccordionComponent.prototype.expandAll = function () {
            if (this.closeOthers) {
                return;
            }
            this.setPanelsState(true);
            this.setNestedAccordionsState(true);
        };
        CollapsibleAccordionComponent.prototype.collapseAll = function () {
            this.setPanelsState(false);
            this.setNestedAccordionsState(false);
        };
        CollapsibleAccordionComponent.prototype.ngAfterContentInit = function () {
            if (this.openFirst) {
                this.collapsiblePanels.keys().next().value.isOpen = true;
            }
        };
        CollapsibleAccordionComponent.prototype.setPanelsState = function (isOpen) {
            this.collapsiblePanels.forEach(function (_, panel) { return (panel.isOpen = isOpen); });
        };
        CollapsibleAccordionComponent.prototype.setNestedAccordionsState = function (isOpen) {
            this.nestedAccordions.forEach(function (accordion) {
                if (isOpen) {
                    accordion.expandAll();
                }
                else {
                    accordion.collapseAll();
                }
            });
        };
        return CollapsibleAccordionComponent;
    }());
    CollapsibleAccordionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleAccordionComponent, deps: [{ token: CollapsibleAccordionComponent, optional: true, skipSelf: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CollapsibleAccordionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleAccordionComponent, selector: "bb-collapsible-accordion-ui", inputs: { closeOthers: "closeOthers", openFirst: "openFirst", obeyParentAccordion: "obeyParentAccordion" }, ngImport: i0__namespace, template: "<ng-content></ng-content>\n" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleAccordionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-collapsible-accordion-ui',
                        templateUrl: 'collapsible-accordion.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: CollapsibleAccordionComponent, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }];
        }, propDecorators: { closeOthers: [{
                    type: i0.Input
                }], openFirst: [{
                    type: i0.Input
                }], obeyParentAccordion: [{
                    type: i0.Input
                }] } });

    var CollapsibleAccordionModule = /** @class */ (function () {
        function CollapsibleAccordionModule() {
        }
        return CollapsibleAccordionModule;
    }());
    CollapsibleAccordionModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleAccordionModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CollapsibleAccordionModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleAccordionModule, declarations: [CollapsibleAccordionComponent], imports: [common.CommonModule], exports: [CollapsibleAccordionComponent] });
    CollapsibleAccordionModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleAccordionModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleAccordionModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [CollapsibleAccordionComponent],
                        exports: [CollapsibleAccordionComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CollapsibleAccordionComponent = CollapsibleAccordionComponent;
    exports.CollapsibleAccordionModule = CollapsibleAccordionModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-collapsible-accordion.umd.js.map
