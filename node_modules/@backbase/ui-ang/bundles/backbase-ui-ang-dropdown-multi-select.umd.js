(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@backbase/ui-ang/icon'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@backbase/ui-ang/base-classes'), require('@backbase/ui-ang/util'), require('@backbase/ui-ang/services'), require('@backbase/foundation-ang/future'), require('@backbase/ui-ang/dropdown-panel'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/input-checkbox')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/dropdown-multi-select', ['exports', '@angular/common', '@angular/core', '@backbase/ui-ang/icon', '@angular/forms', 'rxjs', 'rxjs/operators', '@backbase/ui-ang/base-classes', '@backbase/ui-ang/util', '@backbase/ui-ang/services', '@backbase/foundation-ang/future', '@backbase/ui-ang/dropdown-panel', '@backbase/ui-ang/button', '@backbase/ui-ang/input-checkbox'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["dropdown-multi-select"] = {}), global.ng.common, global.ng.core, global.backbase["ui-ang"].icon, global.ng.forms, global.rxjs, global.rxjs.operators, global.backbase["ui-ang"]["base-classes"], global.backbase["ui-ang"].util, global.backbase["ui-ang"].services, global.i2, global.backbase["ui-ang"]["dropdown-panel"], global.backbase["ui-ang"].button, global.backbase["ui-ang"]["input-checkbox"]));
})(this, (function (exports, i5, i0, i4, i7, rxjs, operators, baseClasses, util, i1, i2, i3, i6, inputCheckbox) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN = new i0.InjectionToken('BB_MULTI_SELECT_SINGLE_SELECT');
    /**
     * @name MultiSelectSingleSelectOption
     *
     * @description
     * Component that represents a single option that is part of the multi select component.
     */
    var DropdownMultiSelectOptionComponent = /** @class */ (function () {
        function DropdownMultiSelectOptionComponent(dropdownCDRef, domAttributesService) {
            this.dropdownCDRef = dropdownCDRef;
            this.domAttributesService = domAttributesService;
            /**
             * The value of the native option element
             */
            this.value = '';
            /**
             * The label of the option item
             */
            this.label = '';
            this.state = false;
            this._id = this.domAttributesService.generateId();
        }
        Object.defineProperty(DropdownMultiSelectOptionComponent.prototype, "id", {
            get: function () {
                return this._id;
            },
            /**
             * The id for the input. Defaults to unique string.
             */
            set: function (value) {
                this._id = value;
            },
            enumerable: false,
            configurable: true
        });
        // NOTES: trigger of detectChanges is needed
        // because DropdownSingleSelectComponent has changeDetection
        // strategy onPush, hence it reacts only to changes
        // of its own @Inputs, but not @Inputs() of options component
        DropdownMultiSelectOptionComponent.prototype.ngOnChanges = function (_a) {
            var _b = _a.value, value = _b === void 0 ? {} : _b, _c = _a.label, label = _c === void 0 ? {} : _c;
            var firstChangeValue = value.firstChange;
            var firstChangeLabel = label.firstChange;
            if (firstChangeLabel && firstChangeValue) {
                return;
            }
            this.dropdownCDRef.detectChanges();
        };
        return DropdownMultiSelectOptionComponent;
    }());
    DropdownMultiSelectOptionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectOptionComponent, deps: [{ token: BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN }, { token: i1__namespace.DomAttributesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DropdownMultiSelectOptionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMultiSelectOptionComponent, selector: "bb-dropdown-multi-select-option-ui", inputs: { id: "id", value: "value", label: "label", state: "state" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectOptionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-dropdown-multi-select-option-ui',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        template: '',
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ChangeDetectorRef, decorators: [{
                            type: i0.Inject,
                            args: [BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN]
                        }] }, { type: i1__namespace.DomAttributesService }];
        }, propDecorators: { id: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }] } });

    /**
     * @name DropdownMultiSelectComponent
     *
     * @description
     * Component that use for DropDown Multi Select.
     */
    var DropdownMultiSelectComponent = /** @class */ (function (_super) {
        __extends(DropdownMultiSelectComponent, _super);
        function DropdownMultiSelectComponent(cd, domAttributesService, deprecationsService) {
            var _this = _super.call(this, cd, deprecationsService) || this;
            _this.cd = cd;
            _this.domAttributesService = domAttributesService;
            _this.deprecationsService = deprecationsService;
            _this.unsubscribe$ = new rxjs.Subject();
            /**
             * The placeholder for the multi select.
             */
            _this.placeholder = 'No items selected';
            /**
             * The label for the Dropdown multi select. Defaults to an empty string.
             */
            _this.label = '';
            /**
             * Enable filtering; Defaults to false.
             */
            _this.filtering = false;
            /**
             * Whether the Dropdown multi select is read only. Defaults to false.
             */
            _this.readonly = false;
            /**
             * The child option components of type DropDownMultiSelectSingleOption
             */
            _this.isIE = navigator.userAgent.indexOf('MSIE ') > -1 || navigator.userAgent.indexOf('Trident/') > -1;
            _this.activeOptionIndex = -1;
            _this.isOptionsFocused = false;
            _this.formGroup = new i7.FormGroup({});
            _this.formValue$ = _this.formGroup.valueChanges.pipe(operators.map(function (formValue) { return _this.getSelectedValues(formValue); }), operators.takeUntil(_this.unsubscribe$));
            _this.labelsMap = {};
            _this.buttonLabelId = _this.domAttributesService.generateId();
            _this.clearOptions$ = new rxjs.Subject();
            _this.selectedValuesSubject$ = new rxjs.BehaviorSubject([]);
            _this.selectedValues$ = _this.selectedValuesSubject$.asObservable();
            _this.searchKey = '';
            _this.cachedValue = {};
            _this.isOpen = false;
            _this.buttonLabelId = _this.domAttributesService.generateId();
            _this.formValue$.subscribe(_this.selectedValuesSubject$);
            _this.formValue$.subscribe(function (value) {
                if (value && value.length === 0) {
                    _this.onChange(undefined);
                }
                else {
                    _this.onValueChange(value);
                }
            });
            _this.clearOptions$
                .pipe(operators.withLatestFrom(_this.selectedValues$), operators.takeUntil(_this.unsubscribe$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), items = _b[1];
                items.forEach(function (item) {
                    var _a;
                    _this.formGroup.patchValue((_a = {}, _a[item] = false, _a), { emitEvent: false });
                });
                _this.formGroup.updateValueAndValidity();
            });
            return _this;
        }
        DropdownMultiSelectComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.contentOptions) {
                this.contentOptions.forEach(function (_a) {
                    var _b;
                    var value = _a.value, label = _a.label;
                    _this.formGroup.registerControl(value, new i7.FormControl(_this.cachedValue[value] || false));
                    Object.assign(_this.labelsMap, (_b = {}, _b[value] = label, _b));
                });
                if (Object.keys(this.cachedValue).length) {
                    this.formGroup.updateValueAndValidity();
                }
            }
        };
        DropdownMultiSelectComponent.prototype.ngOnDestroy = function () {
            this.unsubscribe$.next();
            this.unsubscribe$.complete();
        };
        /**
         * Unselect all selected options from the listbox
         *
         * @param $event
         */
        DropdownMultiSelectComponent.prototype.clearAll = function ($event) {
            $event.preventDefault();
            this.clearOptions$.next();
        };
        /**
         *
         * @param index
         * @param item
         */
        DropdownMultiSelectComponent.prototype.trackByValueFn = function (index, item) {
            return item.value;
        };
        /**
         *
         * @param value
         */
        DropdownMultiSelectComponent.prototype.writeValue = function (value) {
            var _this = this;
            var valuesMap = (value || []).reduce(function (acc, item) {
                var _a;
                return Object.assign(acc, (_a = {}, _a[item] = true, _a));
            }, {});
            this.cachedValue = valuesMap;
            Object.keys(this.formGroup.controls).forEach(function (key) {
                _this.formGroup.controls[key].setValue(valuesMap[key] || false, { emitEvent: false });
            });
            this.formGroup.updateValueAndValidity({ emitEvent: false });
            var selectedValues = this.getSelectedValues(this.formGroup.value);
            this.selectedValuesSubject$.next(selectedValues);
        };
        /**
         * Updating labels while searching
         *
         * @param label
         */
        DropdownMultiSelectComponent.prototype.getLabel = function (label) {
            return this.searchKey.toLocaleLowerCase() === label[0].toLocaleLowerCase() && this.filtering
                ? "<b>" + label[0] + "</b>" + label.substring(1)
                : label;
        };
        DropdownMultiSelectComponent.prototype.onListboxFocus = function () {
            this.activeOptionIndex = 0;
            this.isOptionsFocused = true;
        };
        /* eslint-disable complexity */
        DropdownMultiSelectComponent.prototype.onListboxKeyDown = function (event) {
            if (!this.disabled && this.isOpen && this.isOptionsFocused) {
                var keyCode = this.isIE ? event.keyCode : event.key;
                switch (keyCode) {
                    case 40:
                    case util.KEY_CODES.DOWN:
                        this.activeOptionIndex = Math.min(this.activeOptionIndex + 1, this.options.length - 1);
                        break;
                    case 38:
                    case util.KEY_CODES.UP:
                        this.activeOptionIndex = Math.max(this.activeOptionIndex - 1, 0);
                        break;
                    case 13:
                    case 32:
                    case util.KEY_CODES.ENTER:
                    case util.KEY_CODES.SPACE:
                        this.selectActiveOption();
                        break;
                    default:
                        if (this.filtering) {
                            this.searchKey = event.key;
                            this.setActiveOptionBaseOnSearchKey(event.key);
                        }
                }
                // let Tab key to jump out and close the dropdown menu
                if (keyCode !== 9 && keyCode !== util.KEY_CODES.TAB) {
                    event.preventDefault();
                }
            }
        };
        /* eslint-enable complexity */
        /**
         *
         */
        DropdownMultiSelectComponent.prototype.onListboxBlur = function () {
            this.activeOptionIndex = -1;
            this.isOptionsFocused = false;
        };
        /**
         *
         * @param isOpen
         */
        DropdownMultiSelectComponent.prototype.onDropdownToggle = function (isOpen) {
            this.activeOptionIndex = -1;
            this.isOptionsFocused = false;
            this.isOpen = isOpen;
        };
        DropdownMultiSelectComponent.prototype.getLabeledByIds = function () {
            var tokens = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                tokens[_i] = arguments[_i];
            }
            return util.idListAttr.apply(void 0, __spreadArray([], __read(tokens)));
        };
        // only taking consideration the focusable elements of the control
        DropdownMultiSelectComponent.prototype.onFocusOut = function (event) {
            var nextFocusedElement = event.relatedTarget;
            var focusOutElement = event.target;
            if ((focusOutElement === this.toggleButton.nativeElement &&
                nextFocusedElement !== this.clearAllButton.nativeElement &&
                nextFocusedElement !== this.listbox.nativeElement) ||
                (focusOutElement === this.clearAllButton.nativeElement &&
                    nextFocusedElement !== this.toggleButton.nativeElement &&
                    nextFocusedElement !== this.listbox.nativeElement) ||
                (focusOutElement === this.listbox.nativeElement &&
                    nextFocusedElement !== this.toggleButton.nativeElement &&
                    nextFocusedElement !== this.clearAllButton.nativeElement)) {
                _super.prototype.onBlur.call(this);
            }
        };
        DropdownMultiSelectComponent.prototype.getSelectedValues = function (formValue) {
            return Object.keys(formValue).reduce(function (acc, key) {
                if (formValue[key]) {
                    acc.push(key);
                }
                return acc;
            }, []);
        };
        DropdownMultiSelectComponent.prototype.selectActiveOption = function () {
            var el = this.options.toArray()[this.activeOptionIndex];
            el === null || el === void 0 ? void 0 : el.nativeElement.click();
        };
        DropdownMultiSelectComponent.prototype.setActiveOptionBaseOnSearchKey = function (key) {
            this.activeOptionIndex = this.options
                .toArray()
                .findIndex(function (item) { return key.toLocaleLowerCase() === item.nativeElement.innerText[0].toLocaleLowerCase(); });
        };
        return DropdownMultiSelectComponent;
    }(baseClasses.InputBaseComponent));
    DropdownMultiSelectComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: i1__namespace.DomAttributesService }, { token: i2__namespace.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DropdownMultiSelectComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DropdownMultiSelectComponent, selector: "bb-dropdown-multi-select-ui", inputs: { dropdownHeaderText: "dropdownHeaderText", placeholder: "placeholder", label: "label", filtering: "filtering", readonly: "readonly" }, providers: [
            {
                provide: i7.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return DropdownMultiSelectComponent; }),
                multi: true,
            },
            {
                provide: BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN,
                useExisting: i0.ChangeDetectorRef,
            },
        ], queries: [{ propertyName: "contentOptions", predicate: DropdownMultiSelectOptionComponent }], viewQueries: [{ propertyName: "clearAllButton", first: true, predicate: ["clearOptions"], descendants: true }, { propertyName: "dropDownMenu", first: true, predicate: ["dropDownMenu"], descendants: true }, { propertyName: "toggleButton", first: true, predicate: ["toggleButton"], descendants: true }, { propertyName: "listbox", first: true, predicate: ["listbox"], descendants: true }, { propertyName: "options", predicate: ["option"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<label *ngIf=\"label\" for=\"{{ id }}_dropdown-option_input\" [id]=\"'bb-dropdown-multi-select-label' + id\">\n  {{ label }}\n</label>\n<div #dropDownMenu>\n  <bb-dropdown-panel-ui\n    (open)=\"onDropdownToggle($event)\"\n    [ngClass]=\"{ 'bb-dropdown-multi-select--disabled': disabled || readonly }\"\n    class=\"bb-dropdown-multi-select\"\n  >\n    <ng-template bbDropdownToggle let-isOpen=\"isOpen\">\n      <button\n        [attr.data-role]=\"'expand-button'\"\n        #toggleButton\n        [attr.required]=\"required ? true : undefined\"\n        [attr.aria-expanded]=\"isOpen\"\n        [attr.aria-labelledby]=\"getLabeledByIds('bb-dropdown-multi-select-label' + id, ariaLabelledby, buttonLabelId)\"\n        [attr.aria-describedby]=\"ariaDescribedby\"\n        [attr.aria-activedescendant]=\"ariaActivedescendant\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-owns]=\"ariaOwns\"\n        [attr.aria-label]=\"ariaLabel\"\n        [disabled]=\"disabled\"\n        aria-haspopup=\"listbox\"\n        (focus)=\"onFocus()\"\n        (focusout)=\"onFocusOut($event)\"\n        class=\"\n          bb-stack--wrap\n          bb-dropdown-multi-select__toggle\n          bb-stack bb-text-align-left\n          bb-stack--align-top\n          form-control\n        \"\n        type=\"button\"\n        id=\"{{ id }}\"\n      >\n        <span class=\"bb-dropdown-multi-select__result\" [id]=\"buttonLabelId\" [attr.data-role]=\"'dropdown-result'\">\n          <span *ngIf=\"(selectedValues$ | async)?.length; else placeholderTemplate\">\n            <ng-container *ngFor=\"let item of selectedValues$ | async; last as last\">\n              {{ labelsMap[item] + (last ? '' : ', ') }}\n            </ng-container>\n          </span>\n          <ng-template #placeholderTemplate>\n            <span class=\"bb-text-support\">{{ placeholder }}</span>\n          </ng-template>\n        </span>\n        <span class=\"bb-stack__item--push-right\">\n          <bb-icon-ui [cropped]=\"true\" [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n        </span>\n      </button>\n    </ng-template>\n    <ng-template bbDropdownMenu>\n      <div>\n        <button\n          [attr.data-role]=\"'clear-btn'\"\n          #clearOptions\n          bbButton\n          color=\"unstyled\"\n          class=\"bb-dropdown-multi-select__clear-button\"\n          (click)=\"clearAll($event)\"\n          i18n=\"Clear selection button text@@dropdown-multiple-select.clear-selection.button\"\n          (focusout)=\"onFocusOut($event)\"\n        >\n          Clear selection\n        </button>\n      </div>\n      <div class=\"dropdown-divider\"></div>\n      <div *ngIf=\"dropdownHeaderText\" [id]=\"'bb-dropdown-multi-select-header_' + id\" class=\"dropdown-header\">\n        {{ dropdownHeaderText }}\n      </div>\n      <div\n        #listbox\n        role=\"listbox\"\n        aria-multiselectable=\"true\"\n        tabindex=\"0\"\n        [attr.aria-labelledby]=\"dropdownHeaderText ? getLabeledByIds('bb-dropdown-multi-select-header_' + id) : null\"\n        class=\"bb-dropdown-multi-select__options-list\"\n        [attr.aria-activedescendant]=\"\n          activeOptionIndex >= 0 ? 'bb-dropdown-multi-select-option-' + (id + activeOptionIndex) : undefined\n        \"\n        *ngIf=\"contentOptions?.length && formGroup.controls[contentOptions?.first.value]\"\n        (keydown)=\"onListboxKeyDown($event)\"\n        (focus)=\"onListboxFocus()\"\n        (blur)=\"onListboxBlur()\"\n        (focusout)=\"onFocusOut($event)\"\n      >\n        <label\n          *ngFor=\"let contentOption of contentOptions; index as i; trackBy: trackByValueFn\"\n          #option\n          (click)=\"activeOptionIndex = i\"\n          role=\"option\"\n          class=\"dropdown-item dropdown-option\"\n          [ngClass]=\"{\n            'active dropdown-option--active': activeOptionIndex === i,\n            'dropdown-option--selected': !!formGroup.controls[contentOption.value].value\n          }\"\n          [attr.data-role]=\"'option-' + i\"\n          [attr.aria-selected]=\"formGroup.controls[contentOption.value].value\"\n          [id]=\"'bb-dropdown-multi-select-option-' + id + i\"\n        >\n          <input\n            class=\"dropdown-option__input\"\n            type=\"checkbox\"\n            id=\"{{ id }}_dropdown-option_input\"\n            [attr.data-role]=\"'option-' + (id + i + 1)\"\n            [formControl]=\"formGroup.controls[contentOption.value]\"\n          />\n          <span [innerHTML]=\"getLabel(contentOption.label)\"></span>\n        </label>\n      </div>\n    </ng-template>\n  </bb-dropdown-panel-ui>\n</div>\n", components: [{ type: i3__namespace.DropdownPanelComponent, selector: "bb-dropdown-panel-ui", outputs: ["open"] }, { type: i4__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i5__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3__namespace.DropdownToggleDirective, selector: "ng-template[bbDropdownToggle]" }, { type: i5__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.DropdownMenuDirective, selector: "ng-template[bbDropdownMenu]" }, { type: i6__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7__namespace.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i7__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "async": i5__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-dropdown-multi-select-ui',
                        templateUrl: './dropdown-multi-select.component.html',
                        providers: [
                            {
                                provide: i7.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return DropdownMultiSelectComponent; }),
                                multi: true,
                            },
                            {
                                provide: BB_MULTI_SELECT_CHANGE_DETECTION_REF_TOKEN,
                                useExisting: i0.ChangeDetectorRef,
                            },
                        ],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace.DomAttributesService }, { type: i2__namespace.DeprecationsService }]; }, propDecorators: { dropdownHeaderText: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], filtering: [{
                    type: i0.Input
                }], readonly: [{
                    type: i0.Input
                }], contentOptions: [{
                    type: i0.ContentChildren,
                    args: [DropdownMultiSelectOptionComponent]
                }], options: [{
                    type: i0.ViewChildren,
                    args: ['option']
                }], clearAllButton: [{
                    type: i0.ViewChild,
                    args: ['clearOptions']
                }], dropDownMenu: [{
                    type: i0.ViewChild,
                    args: ['dropDownMenu']
                }], toggleButton: [{
                    type: i0.ViewChild,
                    args: ['toggleButton']
                }], listbox: [{
                    type: i0.ViewChild,
                    args: ['listbox']
                }] } });

    var DropdownMultiSelectModule = /** @class */ (function () {
        function DropdownMultiSelectModule() {
        }
        return DropdownMultiSelectModule;
    }());
    DropdownMultiSelectModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DropdownMultiSelectModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectModule, declarations: [DropdownMultiSelectComponent, DropdownMultiSelectOptionComponent], imports: [i5.CommonModule, i4.IconModule, inputCheckbox.InputCheckboxModule, i3.DropdownPanelModule, i7.ReactiveFormsModule, i6.ButtonModule], exports: [DropdownMultiSelectComponent, DropdownMultiSelectOptionComponent] });
    DropdownMultiSelectModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectModule, imports: [[i5.CommonModule, i4.IconModule, inputCheckbox.InputCheckboxModule, i3.DropdownPanelModule, i7.ReactiveFormsModule, i6.ButtonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DropdownMultiSelectModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i5.CommonModule, i4.IconModule, inputCheckbox.InputCheckboxModule, i3.DropdownPanelModule, i7.ReactiveFormsModule, i6.ButtonModule],
                        declarations: [DropdownMultiSelectComponent, DropdownMultiSelectOptionComponent],
                        exports: [DropdownMultiSelectComponent, DropdownMultiSelectOptionComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DropdownMultiSelectComponent = DropdownMultiSelectComponent;
    exports.DropdownMultiSelectModule = DropdownMultiSelectModule;
    exports.DropdownMultiSelectOptionComponent = DropdownMultiSelectOptionComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-dropdown-multi-select.umd.js.map
