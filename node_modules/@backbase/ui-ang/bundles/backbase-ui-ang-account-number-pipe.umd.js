(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/ui-ang/util')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/account-number-pipe', ['exports', '@angular/core', '@backbase/ui-ang/util'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["account-number-pipe"] = {}), global.ng.core, global.backbase["ui-ang"].util));
})(this, (function (exports, i0, util) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * Account numbers displaying format
     */
    var DefaultAccountsDisplayingFormat = {
        segments: 4,
    };
    /**
     * Accounts displaying format Token
     */
    var ACCOUNTS_DISPLAYING_FORMAT = new i0.InjectionToken('ACCOUNTS_DISPLAYING_FORMAT_TOKEN');

    /**
     * A configuration service for account numbers displaying format
     */
    var AccountsDisplayingFormatService = /** @class */ (function () {
        /**
         * @name AccountsDisplayingFormatService#constructor
         * @param accountsDisplayingFormat - (Optional) AccountsDisplayingFormatConfiguration
         *
         * @internal
         */
        function AccountsDisplayingFormatService(accountsDisplayingFormat) {
            this.accountsDisplayingFormat = accountsDisplayingFormat;
        }
        /**
         * @name AccountsDisplayingFormatService#getDefaultFormat
         * @param attributeType - numbers format attributeType
         * @param cardProviderName - card provider name
         *
         * @description
         * Gets default account numbers format per attribute type
         */
        AccountsDisplayingFormatService.prototype.getDefaultFormat = function (attributeType, cardProviderName) {
            var _a, _b;
            if (attributeType === 'cardNumber') {
                return this.getCardNumberFormat(cardProviderName);
            }
            return (_b = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a[attributeType]) !== null && _b !== void 0 ? _b : DefaultAccountsDisplayingFormat;
        };
        AccountsDisplayingFormatService.prototype.getCardNumberFormat = function (cardProviderName) {
            var _a;
            var cardNumber = (_a = this.accountsDisplayingFormat) === null || _a === void 0 ? void 0 : _a.cardNumber;
            var providersConfiguration = Object.entries((cardNumber === null || cardNumber === void 0 ? void 0 : cardNumber.cardProviders) || {}).reduce(function (configuration, entry) {
                var _c;
                return (Object.assign(Object.assign({}, configuration), (_c = {}, _c[entry[0].toLowerCase()] = entry[1], _c)));
            }, {});
            if (cardProviderName && providersConfiguration[cardProviderName.toLowerCase()]) {
                return providersConfiguration[cardProviderName.toLowerCase()];
            }
            return cardNumber !== null && cardNumber !== void 0 ? cardNumber : DefaultAccountsDisplayingFormat;
        };
        return AccountsDisplayingFormatService;
    }());
    AccountsDisplayingFormatService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsDisplayingFormatService, deps: [{ token: ACCOUNTS_DISPLAYING_FORMAT, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AccountsDisplayingFormatService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsDisplayingFormatService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsDisplayingFormatService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ACCOUNTS_DISPLAYING_FORMAT]
                        }] }];
        } });

    /**
     * Formats account numbers, applies different format configurations per number type
     */
    var AccountNumberPipe = /** @class */ (function () {
        /**
         * @name AccountNumberPipe#constructor
         * @param accountsDisplayingFormatService - AccountsDisplayingFormatService
         *
         * @internal
         */
        function AccountNumberPipe(accountsDisplayingFormatService) {
            this.accountsDisplayingFormatService = accountsDisplayingFormatService;
        }
        /**
         * @name AccountNumberPipe#transform
         * @param value - the string to transform
         * @param configuration - type of the value (iban, bban or number) or a custom numbers format
         * @param cardProviderName - card provider name
         *
         * @description
         * Formats account numbers
         *
         * to use with a global accountsFormat configuration
         * - '12345678' | bbAccountNumber:'iban'
         * to apply a custom configuration
         * - '12345678' | bbAccountNumber:{ segments: [2, 4, 2] }
         * to apply a 'visa' card number configuration
         * - '12345678' | bbAccountNumber:'cardNumber':'visa'
         */
        AccountNumberPipe.prototype.transform = function (value, configuration, cardProviderName) {
            var accountNumber = value.toString();
            var displayingFormat = typeof configuration === 'object'
                ? configuration
                : this.accountsDisplayingFormatService.getDefaultFormat(configuration, cardProviderName);
            return util.segment(accountNumber, displayingFormat.segments);
        };
        return AccountNumberPipe;
    }());
    AccountNumberPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountNumberPipe, deps: [{ token: AccountsDisplayingFormatService }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    AccountNumberPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountNumberPipe, name: "bbAccountNumber" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountNumberPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbAccountNumber',
                    }]
            }], ctorParameters: function () { return [{ type: AccountsDisplayingFormatService }]; } });

    var AccountNumberPipeModule = /** @class */ (function () {
        function AccountNumberPipeModule() {
        }
        return AccountNumberPipeModule;
    }());
    AccountNumberPipeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountNumberPipeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AccountNumberPipeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountNumberPipeModule, declarations: [AccountNumberPipe], exports: [AccountNumberPipe] });
    AccountNumberPipeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountNumberPipeModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountNumberPipeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AccountNumberPipe],
                        exports: [AccountNumberPipe],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ACCOUNTS_DISPLAYING_FORMAT = ACCOUNTS_DISPLAYING_FORMAT;
    exports.AccountNumberPipe = AccountNumberPipe;
    exports.AccountNumberPipeModule = AccountNumberPipeModule;
    exports.AccountsDisplayingFormatService = AccountsDisplayingFormatService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-account-number-pipe.umd.js.map
