(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/util', ['exports', '@angular/animations'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].util = {}), global.ng.animations));
})(this, (function (exports, animations) { 'use strict';

    var timing = '200ms ease-in';
    var optional = { optional: true };
    var distances = {
        normalX: 'translateX(0%)',
        right: 'translateX(100%)',
        left: 'translateX(-100%)',
        normalY: 'translateY(0%)',
        bottom: 'translateY(100%)',
    };
    var resetAnimatableView = {
        position: 'absolute',
        height: '100%',
        width: '100%',
        display: 'block',
        top: 0,
    };
    function resetableTransform(from) {
        return animations.style(Object.assign(Object.assign({}, resetAnimatableView), { transform: from }));
    }
    function slide2D(from, to) {
        return animations.useAnimation(animations.animation([resetableTransform(from), animations.animate(timing, animations.style({ transform: to }))]));
    }
    // An example for slide up/down animation
    var slideUpAnimation = animations.trigger('slideUp', [
        animations.transition(':enter', [slide2D(distances.bottom, distances.normalY)]),
        animations.transition(':leave', [slide2D(distances.normalY, distances.bottom)]),
    ]);
    // An example for slide left/right animation
    var slideXAnimation = animations.trigger('slideX', [
        animations.transition('void => isLeft', [slide2D(distances.right, distances.normalX)]),
        animations.transition('void => isRight', [slide2D(distances.left, distances.normalX)]),
        animations.transition('isRight => void', [slide2D(distances.normalX, distances.left)]),
        animations.transition('isLeft => void', [slide2D(distances.normalX, distances.right)]),
    ]);
    // An example to animate tabs
    var tabsAnim = animations.trigger('tabsAnimation', [
        // Previous, slide left to right to show left tab
        animations.transition(':decrement', [
            // set new tab X location to be -100%
            animations.query(':enter', resetableTransform(distances.left)),
            animations.group([
                // slide existing page from 0% to 100% to the right
                animations.query(':leave', animations.animate(timing, resetableTransform(distances.right)), optional),
                // slide new page from -100% to 0% to the right
                animations.query(':enter', animations.animate(timing, animations.style({
                    opacity: 1,
                    transform: distances.normalX,
                })), optional),
            ]),
        ]),
        // Next, slide right to left to show right page
        animations.transition(':increment', [
            // set new page X location to be 100%
            animations.query(':enter', resetableTransform(distances.right)),
            animations.group([
                // slide existing page from 0% to -100% to the left
                animations.query(':leave', animations.animate(timing, resetableTransform(distances.left))),
                // slide new page from 100% to 0% to the left
                animations.query(':enter', animations.animate(timing, animations.style({
                    opacity: 1,
                    transform: distances.normalX,
                }))),
            ]),
        ]),
    ]);
    // Used to animate bb-notification
    var fadeSlideAnimation = animations.trigger('fadeSlideInOut', [
        animations.transition(':enter', [
            animations.style({ opacity: 0, display: 'block', transform: 'translateY(-10px)' }),
            animations.animate(timing, animations.style({ opacity: 1, transform: 'translateY(0)' })),
        ]),
        animations.transition(':leave', [
            animations.style({ display: 'block' }),
            animations.animate(timing, animations.style({ opacity: 0, transform: 'translateY(-10px)' })),
        ]),
    ]);
    // An example for fadi in/out animation
    var fadeInAnimation = animations.trigger('fadeIn', [
        animations.transition(':enter', [
            animations.style({
                opacity: 0,
            }),
            animations.animate(timing, animations.style({ opacity: 1 })),
        ]),
        animations.transition(':leave', [animations.animate(timing, animations.style({ opacity: 0 }))]),
    ]);
    // An example to animate router
    var routerAnim = animations.trigger('routeAnimations', [
        animations.transition('* <=> *', [
            animations.style({ position: 'relative' }),
            animations.query(':enter, :leave', [
                animations.style(Object.assign(Object.assign({}, resetAnimatableView), { transform: 'translateY(-50px)', opacity: 0 })),
            ], optional),
            animations.query(':enter', [animations.animate(timing, animations.style({ transform: distances.normalY, opacity: 1 }))], optional),
        ]),
    ]);
    var errorMessageAnimation = animations.trigger('errorMessageAnimation', [
        animations.transition('void => *', [animations.style({ opacity: 0, height: '0px' }), animations.animate(150, animations.style({ opacity: 1, height: '*' }))]),
    ]);

    /**
     * Convert a list of ID references for `aria-` attributes to an attribute value
     */
    var idListAttr = function () {
        var tokens = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tokens[_i] = arguments[_i];
        }
        return tokens.filter(Boolean).join(' ').trim() || undefined;
    };

    /**
     * Used to annotate an example component with documentation-related metadata.
     *
     * For now, only supports a simple boolean flag that signifies whether a component has been migrated
     * to Theme 2.0 or not.
     */
    function BackbaseDocs(docs) {
        return function (constructor) {
            constructor.prototype._backbaseDocs = {
                isTheme2Stable: docs.isTheme2Stable,
            };
        };
    }

    /**
     * Avoid any leading or trailing "-" characters, avoid adjacent dash characters
     */
    var escapeBemModifier = function (str) { return str.replace(/^[^a-z]+|[^a-z]+$/gi, '').replace(/[^a-z]+/gi, '-'); };
    /**
     * Safely create BEM modifier class names for a BEM block:
     *
     * Example usage:
     *
     *     const iconComponent = { size: 'extra small', animate: false };
     *     getBemModifiers('bb-icon', [
     *       () => iconComponent.size,
     *       () => iconComponent.animate ? 'animate' : undefined
     *     ]);
     *
     * The above will result in: "bb-icon--extra-small"
     */
    var getBemModifiers = function (blockOrElement, modifierFunctions) { return modifierFunctions
        .map(function (fn) { return fn(); })
        .filter(Boolean)
        .map(escapeBemModifier)
        .map(function (modifier) { return blockOrElement + "--" + modifier; }); };

    /* eslint-disable */
    exports.KEY_CODES = void 0;
    (function (KEY_CODES) {
        KEY_CODES["UP"] = "ArrowUp";
        KEY_CODES["DOWN"] = "ArrowDown";
        KEY_CODES["ENTER"] = "Enter";
        KEY_CODES["SPACE"] = " ";
        KEY_CODES["TAB"] = "Tab";
        KEY_CODES["BACKSPACE"] = "Backspace";
        KEY_CODES["DELETE"] = "Delete";
        KEY_CODES["ESCAPE"] = "Escape";
        KEY_CODES["X"] = "x";
        KEY_CODES["V"] = "v";
        KEY_CODES["LEFT"] = "ArrowLeft";
        KEY_CODES["RIGHT"] = "ArrowRight";
    })(exports.KEY_CODES || (exports.KEY_CODES = {}));
    var KEY_CODE_TO_CODE = {
        9: exports.KEY_CODES.TAB,
        38: exports.KEY_CODES.UP,
        40: exports.KEY_CODES.DOWN,
        32: exports.KEY_CODES.SPACE,
        13: exports.KEY_CODES.ENTER,
        46: exports.KEY_CODES.DELETE,
        8: exports.KEY_CODES.BACKSPACE,
        27: exports.KEY_CODES.ESCAPE,
        88: exports.KEY_CODES.X,
        86: exports.KEY_CODES.V,
    };
    function browserIsMsie() {
        return navigator.userAgent.indexOf('MSIE') > -1 || navigator.userAgent.indexOf('Trident/') > -1;
    }
    function getKeyCode(event) {
        // NOTE: detect IE
        if (browserIsMsie()) {
            return KEY_CODE_TO_CODE[event.keyCode];
        }
        return event.code;
    }

    /**
     * @name segment
     * @inner
     * @param value - the string to segment
     * @param segmentsSize - the size (or array of sizes) the segments should have
     * @param separator - the character to separate the segments with
     *
     * @description
     * Split a string into segments of specified segmentsSize(s)
     */
    function segment(value, segmentsSize, separator) {
        if (segmentsSize === void 0) { segmentsSize = 0; }
        if (separator === void 0) { separator = ' '; }
        var segmentSizes = Array.isArray(segmentsSize) ? segmentsSize : [segmentsSize];
        var segments = [];
        for (var i = 0, chunk = void 0; i < value.length; i += chunk.length) {
            chunk = value.slice(i, i + segmentSizes[segments.length % segmentSizes.length] || Infinity);
            segments.push(chunk);
        }
        return segments.join(separator);
    }

    var _id = 0;
    function getDynamicId() {
        return "" + _id++;
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BackbaseDocs = BackbaseDocs;
    exports.KEY_CODE_TO_CODE = KEY_CODE_TO_CODE;
    exports.browserIsMsie = browserIsMsie;
    exports.errorMessageAnimation = errorMessageAnimation;
    exports.escapeBemModifier = escapeBemModifier;
    exports.fadeInAnimation = fadeInAnimation;
    exports.fadeSlideAnimation = fadeSlideAnimation;
    exports.getBemModifiers = getBemModifiers;
    exports.getDynamicId = getDynamicId;
    exports.getKeyCode = getKeyCode;
    exports.idListAttr = idListAttr;
    exports.resetableTransform = resetableTransform;
    exports.routerAnim = routerAnim;
    exports.segment = segment;
    exports.slide2D = slide2D;
    exports.slideUpAnimation = slideUpAnimation;
    exports.slideXAnimation = slideXAnimation;
    exports.tabsAnim = tabsAnim;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-util.umd.js.map
