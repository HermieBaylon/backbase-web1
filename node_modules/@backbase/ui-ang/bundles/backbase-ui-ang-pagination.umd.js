(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/icon')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/pagination', ['exports', '@angular/common', '@angular/core', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/icon'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].pagination = {}), global.ng.common, global.ng.core, global.i1, global.backbase["ui-ang"].icon));
})(this, (function (exports, i3, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /**
     * @name PaginatorComponent
     *
     * @description
     * A component that displays page numbers and allows to customize them in several ways.
     */
    var PaginatorComponent = /** @class */ (function () {
        function PaginatorComponent() {
            /**
             * The current page.
             *
             * bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed.  Correct inputs by adding 1.
             */
            this.page = 1;
            /**
             * If `true`, the "First" and "Last" page links are shown.
             */
            this.boundaryLinks = false;
            /**
             * If `true`, the "Next" and "Previous" page links are shown.
             */
            this.directionLinks = false;
            /**
             * The number of items in your paginated collection.
             *
             * Note, that this is not the number of pages. Page numbers are calculated dynamically based on
             * `totalItems` and `itemsPerPage`.
             */
            this.totalItems = 0;
            /**
             * The number of items per page.
             */
            this.itemsPerPage = 10;
            /**
             * The maximum number of pages to display.
             */
            this.maxNavPages = 5;
            /**
             * An event fired when the page is changed. Will fire only if collection size is set and all values are valid.
             *
             * Event payload is the number of the newly selected page.
             *
             * bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed. Correct outputs by subtracting 1.
             */
            this.pageChange = new i0.EventEmitter();
        }
        PaginatorComponent.prototype.onPageChange = function (page) {
            this.pageChange.emit(page - 1);
        };
        return PaginatorComponent;
    }());
    PaginatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaginatorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaginatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaginatorComponent, selector: "bb-pagination-ui", inputs: { page: "page", boundaryLinks: "boundaryLinks", directionLinks: "directionLinks", totalItems: "totalItems", itemsPerPage: "itemsPerPage", maxNavPages: "maxNavPages" }, outputs: { pageChange: "pageChange" }, providers: [i1.NgbPaginationConfig], ngImport: i0__namespace, template: "<ngb-pagination\n  (pageChange)=\"onPageChange($event)\"\n  *ngIf=\"+itemsPerPage < +totalItems\"\n  [boundaryLinks]=\"boundaryLinks\"\n  [collectionSize]=\"totalItems\"\n  [directionLinks]=\"directionLinks\"\n  [maxSize]=\"maxNavPages\"\n  [pageSize]=\"itemsPerPage\"\n  [page]=\"page + 1\"\n  [rotate]=\"true\"\n  class=\"d-flex justify-content-center bb-pagination\"\n>\n  <ng-template ngbPaginationNumber let-page>\n    <span aria-hidden=\"true\">{{ page }}</span>\n    <span class=\"sr-only\" i18n=\"Link Label for Screen Reader@@bb-pagination-ui.pagination.link.number\"\n      >page {{ page }}</span\n    >\n  </ng-template>\n  <ng-template ngbPaginationFirst>\n    <bb-icon-ui data-role=\"pagination-icon-first\" size=\"md\" name=\"first-page\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationPrevious>\n    <bb-icon-ui data-role=\"pagination-icon-previous\" size=\"md\" name=\"chevron-left\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationNext>\n    <bb-icon-ui data-role=\"pagination-icon-next\" size=\"md\" name=\"chevron-right\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationLast>\n    <bb-icon-ui data-role=\"pagination-icon-last\" size=\"md\" name=\"last-page\"></bb-icon-ui>\n  </ng-template>\n  <ng-template ngbPaginationEllipsis>\n    <span class=\"bb-pagination__ellipsis\" data-role=\"pagination-ellipsis\">...</span>\n  </ng-template>\n</ngb-pagination>\n", components: [{ type: i1__namespace.NgbPagination, selector: "ngb-pagination", inputs: ["page", "disabled", "boundaryLinks", "directionLinks", "ellipses", "maxSize", "pageSize", "rotate", "size", "collectionSize"], outputs: ["pageChange"] }, { type: i2__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgbPaginationNumber, selector: "ng-template[ngbPaginationNumber]" }, { type: i1__namespace.NgbPaginationFirst, selector: "ng-template[ngbPaginationFirst]" }, { type: i1__namespace.NgbPaginationPrevious, selector: "ng-template[ngbPaginationPrevious]" }, { type: i1__namespace.NgbPaginationNext, selector: "ng-template[ngbPaginationNext]" }, { type: i1__namespace.NgbPaginationLast, selector: "ng-template[ngbPaginationLast]" }, { type: i1__namespace.NgbPaginationEllipsis, selector: "ng-template[ngbPaginationEllipsis]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaginatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-pagination-ui',
                        templateUrl: './pagination.component.html',
                        providers: [i1.NgbPaginationConfig],
                    }]
            }], propDecorators: { page: [{
                    type: i0.Input
                }], boundaryLinks: [{
                    type: i0.Input
                }], directionLinks: [{
                    type: i0.Input
                }], totalItems: [{
                    type: i0.Input
                }], itemsPerPage: [{
                    type: i0.Input
                }], maxNavPages: [{
                    type: i0.Input
                }], pageChange: [{
                    type: i0.Output
                }] } });

    var PaginationModule = /** @class */ (function () {
        function PaginationModule() {
        }
        return PaginationModule;
    }());
    PaginationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaginationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaginationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaginationModule, declarations: [PaginatorComponent], imports: [i3.CommonModule, i1.NgbPaginationModule, i2.IconModule], exports: [PaginatorComponent] });
    PaginationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaginationModule, imports: [[i3.CommonModule, i1.NgbPaginationModule, i2.IconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaginationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3.CommonModule, i1.NgbPaginationModule, i2.IconModule],
                        declarations: [PaginatorComponent],
                        exports: [PaginatorComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PaginationModule = PaginationModule;
    exports.PaginatorComponent = PaginatorComponent;
    exports.PaginatorModule = PaginationModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-pagination.umd.js.map
