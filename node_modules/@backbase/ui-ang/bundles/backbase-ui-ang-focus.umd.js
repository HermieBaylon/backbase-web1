(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/focus', ['exports', '@angular/common', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].focus = {}), global.ng.common, global.ng.core, global.rxjs, global.rxjs.operators));
})(this, (function (exports, common, i0, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var isFocusable = function (el) { return !!el && typeof el.focus === 'function'; };
    var FocusService = /** @class */ (function () {
        function FocusService() {
            this.focusSubject = new rxjs.Subject();
            this.sub = this.focusSubject.pipe(operators.throttleTime(0, undefined, { leading: true })).subscribe(function (focused) {
                if (isFocusable(focused.nativeElement)) {
                    focused.nativeElement.focus();
                }
            });
        }
        FocusService.prototype.focus = function (el) {
            this.focusSubject.next(el);
        };
        FocusService.prototype.ngOnDestroy = function () {
            this.sub.unsubscribe();
        };
        return FocusService;
    }());
    FocusService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FocusService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var FocusDirective = /** @class */ (function () {
        function FocusDirective(service, el) {
            this.service = service;
            this.el = el;
            this.autofocus = true;
        }
        Object.defineProperty(FocusDirective.prototype, "bbFocus", {
            set: function (value) {
                this.autofocus = value === '' || !!value;
            },
            enumerable: false,
            configurable: true
        });
        FocusDirective.prototype.ngAfterViewInit = function () {
            if (this.autofocus) {
                this.focus();
            }
        };
        FocusDirective.prototype.focus = function () {
            this.service.focus(this.el);
        };
        return FocusDirective;
    }());
    FocusDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusDirective, deps: [{ token: FocusService }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FocusDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FocusDirective, selector: "[bbFocus]", inputs: { bbFocus: "bbFocus" }, exportAs: ["bbFocus"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbFocus]',
                        exportAs: 'bbFocus',
                    }]
            }], ctorParameters: function () { return [{ type: FocusService }, { type: i0__namespace.ElementRef }]; }, propDecorators: { bbFocus: [{
                    type: i0.Input
                }] } });

    var FocusModule = /** @class */ (function () {
        function FocusModule() {
        }
        return FocusModule;
    }());
    FocusModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FocusModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusModule, declarations: [FocusDirective], imports: [common.CommonModule], exports: [FocusDirective] });
    FocusModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusModule, providers: [FocusService], imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FocusModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [FocusDirective],
                        providers: [FocusService],
                        exports: [FocusDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FocusDirective = FocusDirective;
    exports.FocusModule = FocusModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-focus.umd.js.map
