(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@backbase/ui-ang/base-classes'), require('bignumber.js'), require('@backbase/ui-ang/util'), require('@backbase/foundation-ang/future')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/amount-input', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@backbase/ui-ang/base-classes', 'bignumber.js', '@backbase/ui-ang/util', '@backbase/foundation-ang/future'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["amount-input"] = {}), global.ng.common, global.ng.core, global.ng.forms, global.backbase["ui-ang"]["base-classes"], global.BigNumber, global.backbase["ui-ang"].util, global.i1));
})(this, (function (exports, i2, i0, forms, baseClasses, BigNumber, util, i1) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var BigNumber__default = /*#__PURE__*/_interopDefaultLegacy(BigNumber);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /**
     * @name AmountInputComponent
     *
     * @a11y Current component provide option to pass needed accessibility
     * attributes. You need to take care of properties that are required in your case :
     *  - set aria-describedby with ID of another element in the DOM with descriptive text about the amount input,
     *    by default it is set to div defining the type of currency
     *  - set aria-invalid with boolean value when the entered input value is not valid
     *  - set aria-labelledby with ID of another element in the DOM as input's label
     *
     * @description
     * Component that displays a text input.
     */
    var AmountInputComponent = /** @class */ (function (_super) {
        __extends(AmountInputComponent, _super);
        function AmountInputComponent(cd, deprecationsService, locale, renderer) {
            var _this = _super.call(this, cd, deprecationsService) || this;
            _this.locale = locale;
            _this.renderer = renderer;
            _this.inputClass = 'bb-amount-input';
            /**
             * Unique ID used for the accessibility property. New value is created when component is initialized.
             *
             * @internal
             */
            _this.componentUniqueId = _this.id + "-currency";
            /**
             * Utility function for use in template
             */
            _this.idListAttr = util.idListAttr;
            /**
             * The placeholder for the text input. Defaults to an empty string;
             */
            _this.placeholder = '';
            /**
             * classnames for the wrapper div
             */
            _this.wrapperClasses = '';
            /**
             * Whether currency local should be transformed to symbol.
             * Default value true.
             */
            _this.mapCurrency = true;
            /**
             * Determines currency type.
             * If nothing provided, wouldn't be displayed.
             */
            _this._currency = '';
            _this._decimals = 2;
            /**
             * The flag to wether auto add decimal part or not defaults to false
             */
            _this.autoDecimal = false;
            _this.groupSeparator = i2.getLocaleNumberSymbol(_this.locale, i2.NumberSymbol.CurrencyGroup);
            _this.decimalSeparator = i2.getLocaleNumberSymbol(_this.locale, i2.NumberSymbol.CurrencyDecimal);
            _this.nonNumbersAndDecimalSeparatorRegex = new RegExp("[^" + _this.decimalSeparator + "\\d]", 'g');
            _this.endWithDecimal = new RegExp("[" + _this.decimalSeparator + "]$", 'g');
            _this.format = {
                groupSeparator: _this.groupSeparator,
                decimalSeparator: _this.decimalSeparator,
                groupSize: 3,
            };
            return _this;
        }
        Object.defineProperty(AmountInputComponent.prototype, "currency", {
            get: function () {
                return this._currency;
            },
            set: function (value) {
                if (value) {
                    this._currency = this.mapCurrency ? i2.getCurrencySymbol(value, 'wide', this.locale) : value;
                    this._decimals = i2.getNumberOfCurrencyDigits(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        AmountInputComponent.prototype.writeValue = function (model) {
            var sanitizedInput = model !== null && model !== void 0 ? model : '';
            if (typeof sanitizedInput === 'string') {
                var numeric = sanitizedInput.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength) || '';
                this.renderer.setProperty(this.amountEl.nativeElement, 'value', this.formatAmount(numeric));
            }
        };
        AmountInputComponent.prototype.formatAmount = function (numeric) {
            if (numeric) {
                if (numeric.includes(this.decimalSeparator)) {
                    var _b = __read(numeric.split(this.decimalSeparator), 2), int = _b[0], dec = _b[1];
                    return new BigNumber__default["default"](int || 0).toFormat(this.format) + this.decimalSeparator + dec.slice(0, this._decimals);
                }
                else {
                    return new BigNumber__default["default"](numeric).toFormat(this.format);
                }
            }
            else {
                return numeric;
            }
        };
        AmountInputComponent.prototype.updateAmountInput = function () {
            var _a;
            var amountEl = this.amountEl.nativeElement;
            var numeric = ((_a = amountEl.value) === null || _a === void 0 ? void 0 : _a.replace(this.nonNumbersAndDecimalSeparatorRegex, '').slice(0, this.maxLength)) || '';
            this.renderer.setProperty(amountEl, 'value', this.formatAmount(numeric));
        };
        AmountInputComponent.prototype.setSelection = function (start, end) {
            var amountEl = this.amountEl.nativeElement;
            this.renderer.setProperty(amountEl, 'selectionStart', start);
            this.renderer.setProperty(amountEl, 'selectionEnd', end);
        };
        AmountInputComponent.prototype.correctInputValue = function () {
            var _a;
            this.onBlur();
            var amountEl = (_a = this.amountEl) === null || _a === void 0 ? void 0 : _a.nativeElement;
            if (amountEl.value) {
                var numeric = amountEl.value.replace(this.endWithDecimal, '');
                this.renderer.setProperty(amountEl, 'value', numeric);
                this.updateOutputValue(numeric.replace(this.nonNumbersAndDecimalSeparatorRegex, ''));
            }
        };
        /**
         * Event handler for backspace key press, and check if correct number is deleted
         */
        AmountInputComponent.prototype.onBackspace = function (el) {
            if (this.autoDecimal && el.selectionStart && el.value[el.selectionStart - 1] === this.groupSeparator) {
                this.setSelection(el.selectionStart - 1, el.selectionStart - 1);
            }
        };
        AmountInputComponent.prototype.onPress = function ($event) {
            var key = $event.key;
            var elm = this.amountEl.nativeElement;
            var value = elm.value;
            if (value) {
                var isDotExist = value.includes(this.decimalSeparator) && key === this.decimalSeparator;
                var regexString = "^[\\d" + this.groupSeparator + "]*[" + this.decimalSeparator + "]?\\d{0," + this._decimals + "}$";
                var formattedCurrencyRegex = new RegExp(regexString, 'g');
                var decimalStructure = formattedCurrencyRegex.test(value);
                if (isDotExist || !decimalStructure) {
                    var pos = elm.selectionStart;
                    if (value.indexOf(this.decimalSeparator) === pos) {
                        this.setSelection(pos + 1, pos + 1);
                    }
                    $event.preventDefault();
                }
            }
        };
        AmountInputComponent.prototype.onInput = function () {
            var elm = this.amountEl.nativeElement;
            var value = elm.value.trim();
            var cursorPos = elm.selectionStart || 0;
            var oldPos = value.length - cursorPos;
            this.updateAmountInput();
            var formatted = elm.value.replace(this.nonNumbersAndDecimalSeparatorRegex, '').replace(this.endWithDecimal, '');
            if (formatted) {
                if (value.length === 1 && value !== this.decimalSeparator) {
                    var newValue = this.autoDecimal ? value + this.decimalSeparator + '0'.repeat(this._decimals) : value;
                    this.renderer.setProperty(elm, 'value', newValue);
                    this.setSelection(1, 1);
                }
                else {
                    var newpos = elm.value.length - oldPos;
                    if (value.includes(this.decimalSeparator) && cursorPos > value.indexOf(this.decimalSeparator)) {
                        newpos++;
                    }
                    this.setSelection(newpos, newpos);
                }
            }
            this.updateOutputValue(formatted);
        };
        AmountInputComponent.prototype.updateOutputValue = function (value) {
            this.onValueChange(value.replace(this.decimalSeparator, '.'));
        };
        return AmountInputComponent;
    }(baseClasses.InputBaseComponent));
    AmountInputComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountInputComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: i1__namespace.DeprecationsService }, { token: i0.LOCALE_ID }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AmountInputComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AmountInputComponent, selector: "bb-amount-input-ui", inputs: { placeholder: "placeholder", maxLength: "maxLength", wrapperClasses: "wrapperClasses", mapCurrency: "mapCurrency", currency: "currency", autoDecimal: "autoDecimal" }, host: { properties: { "class": "this.inputClass" } }, providers: [
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return AmountInputComponent; }),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "amountEl", first: true, predicate: ["amountInput"], descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<label *ngIf=\"label\" for=\"{{ id }}\"> {{ label }} </label>\n<div class=\"bb-amount-input__field\" [ngClass]=\"wrapperClasses\">\n  <input\n    id=\"{{ id }}\"\n    type=\"text\"\n    class=\"form-control bb-text-align-right\"\n    autocomplete=\"off\"\n    autocorrect=\"off\"\n    autocapitalize=\"off\"\n    spellcheck=\"false\"\n    data-role=\"bb-amount-input-ui\"\n    #amountInput\n    [attr.maxlength]=\"maxLength\"\n    [readOnly]=\"readonly\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [placeholder]=\"placeholder\"\n    [attr.aria-describedby]=\"idListAttr(ariaDescribedby, componentUniqueId)\"\n    [attr.aria-invalid]=\"ariaInvalid\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    (keydown)=\"onPress($event)\"\n    (keydown.backspace)=\"onBackspace(amountInput)\"\n    (blur)=\"correctInputValue()\"\n    (input)=\"onInput()\"\n  />\n  <span *ngIf=\"currency\" data-role=\"bb-amount-input-currency\" class=\"bb-amount-input__symbol\" [id]=\"componentUniqueId\">\n    <span\n      class=\"sr-only\"\n      i18n=\"\n        Currency|Text to explain that currency will be read by screen reader@@bb-amount-input-ui.currency-description\"\n      >Currency</span\n    >\n    {{ currency }}\n  </span>\n</div>\n", directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountInputComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-amount-input-ui',
                        templateUrl: './amount-input.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return AmountInputComponent; }),
                                multi: true,
                            },
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace.DeprecationsService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }, { type: i0__namespace.Renderer2 }];
        }, propDecorators: { inputClass: [{
                    type: i0.HostBinding,
                    args: ['class']
                }], placeholder: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], wrapperClasses: [{
                    type: i0.Input
                }], mapCurrency: [{
                    type: i0.Input
                }], currency: [{
                    type: i0.Input
                }], autoDecimal: [{
                    type: i0.Input
                }], amountEl: [{
                    type: i0.ViewChild,
                    args: ['amountInput', { static: true }]
                }] } });

    var AmountInputModule = /** @class */ (function () {
        function AmountInputModule() {
        }
        return AmountInputModule;
    }());
    AmountInputModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountInputModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AmountInputModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountInputModule, declarations: [AmountInputComponent], imports: [i2.CommonModule, forms.FormsModule, baseClasses.BaseClassesModule], exports: [AmountInputComponent] });
    AmountInputModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountInputModule, imports: [[i2.CommonModule, forms.FormsModule, baseClasses.BaseClassesModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AmountInputModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, forms.FormsModule, baseClasses.BaseClassesModule],
                        declarations: [AmountInputComponent],
                        exports: [AmountInputComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AmountInputComponent = AmountInputComponent;
    exports.AmountInputModule = AmountInputModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-amount-input.umd.js.map
