(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('bignumber.js'), require('@backbase/ui-ang/base-classes'), require('@backbase/ui-ang/util'), require('@backbase/ui-ang/services'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/input-validation-message')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/currency-input', ['exports', '@angular/common', '@angular/core', '@angular/forms', 'bignumber.js', '@backbase/ui-ang/base-classes', '@backbase/ui-ang/util', '@backbase/ui-ang/services', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/input-validation-message'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["currency-input"] = {}), global.ng.common, global.ng.core, global.ng.forms, global.BigNumber, global.backbase["ui-ang"]["base-classes"], global.backbase["ui-ang"].util, global.backbase["ui-ang"].services, global.backbase["ui-ang"]["dropdown-single-select"], global.backbase["ui-ang"]["input-validation-message"]));
})(this, (function (exports, i4, i0, i2, BigNumber, baseClasses, util, i1, i3, inputValidationMessage) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var BigNumber__default = /*#__PURE__*/_interopDefaultLegacy(BigNumber);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var defaultIntLength = 13;
    var defaultDecimalPrecision = 2;
    /**
     * @name CurrencyInputComponent
     *
     * @a11y Current component provide option to pass needed accessibility
     * attributes. You need to take care of properties that are required in your case :
     *  - aria-describedby
     *  - aria-invalid
     *  - aria-labelledby
     *  - integerLabelSrOnly
     *  - decimalLabelSrOnly
     * @description
     * Component for displaying and managing currency and it amount
     *
     */
    var CurrencyInputComponent = /** @class */ (function () {
        function CurrencyInputComponent(el, locale, domAttributeService, parentFormControl) {
            this.el = el;
            this.locale = locale;
            this.domAttributeService = domAttributeService;
            this.parentFormControl = parentFormControl;
            this.currencyList = [];
            this.currencyDisabledState = {
                currency: false,
                integer: false,
                decimal: false,
            };
            this.decimalSeparator = i4.getLocaleNumberSymbol(this.locale, i4.NumberSymbol.CurrencyDecimal);
            this.localeSeparatorSymbols = [
                this.decimalSeparator,
                i4.getLocaleNumberSymbol(this.locale, i4.NumberSymbol.CurrencyGroup),
            ];
            /**
             * Number of minimum currency precision. Defaults to 2.
             */
            this.decMinLen = defaultDecimalPrecision;
            this.currControl = new i2.FormControl();
            this.intControl = new i2.FormControl();
            this.decControl = new i2.FormControl();
            /**
             * The placeholder for the input. Defaults to 0.
             */
            this.placeholder = '0';
            /**
             * For set output type string/number, by default 'number', when  need work with long number
             * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'
             */
            this.resultType = 'number';
            /**
             * Whether there should be only the integer part.
             * You have to keep in mind, that if you have decimal part, even ".00"
             * you will not be able to remove it
             */
            this.integer = false;
            /**
             * Whether the input is required. Defaults to false.
             */
            this.required = false;
            /**
             * Whether the input is read only. Defaults to false.
             */
            this.readonly = false;
            /**
             * Whether integer label is only visible for screen readers.
             * By default is visible if it is needed to hide change this property
             * to "true" and it will have class "sr-only"
             */
            this.integerLabelSrOnly = false;
            /**
             * By default is visible if it is needed to hide change this property
             * to "true" and it will have class "sr-only"
             * By default is hidden and accessible only for screen reader
             */
            this.decimalLabelSrOnly = false;
            /**
             * Whether decimal text is aligned to the right.
             * By default is false
             */
            this.isRightAligned = false;
            this._integerId = baseClasses.getInputNextId();
            this._decimalId = baseClasses.getInputNextId();
            this.idListAttr = util.idListAttr;
            this.initialized = false;
            /**
             * The label for the integer input.
             */
            this.integerLabel = '';
            /**
             * The label for the decimal input.
             */
            this.decimalLabel = '';
            /**
             * The label for the currency input.
             */
            this.currencyLabel = '';
            /**
             * Flag is used to allow input negative value
             */
            this.allowNegativeValue = false;
            /**
             * Aria label for the currency dropdown.
             */
            this.currencyListAriaLabel = 'Currency List Dropdown';
            /**
             * Aria label for the currency list with one item.
             */
            this.currencyListWithOnItemAriaLabel = 'Currency';
            /**
             * An event emitter for on blur actions.
             */
            this.blur = new i0.EventEmitter();
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this.currencyInputId = this.domAttributeService.generateId();
            this.currencyLabelId = this.domAttributeService.generateId();
            this.decimalInputId = this.domAttributeService.generateId();
            this.decimalLabelId = this.domAttributeService.generateId();
            this.integerInputId = this.domAttributeService.generateId();
            this.integerLabelId = this.domAttributeService.generateId();
            this.validationMessagesId = this.domAttributeService.generateId();
            BigNumber__default["default"].config({
                FORMAT: {
                    // grouping separator of the integer part
                    groupSeparator: i4.getLocaleNumberSymbol(this.locale, i4.NumberSymbol.Group),
                    // primary grouping size of the integer part
                    groupSize: 3,
                },
            });
            if (this.parentFormControl != null) {
                // Setting the value accessor directly (instead of using
                // the providers) to avoid running into a circular import.
                this.parentFormControl.valueAccessor = this;
            }
        }
        Object.defineProperty(CurrencyInputComponent.prototype, "decMaxLen", {
            /**
             * Configure the maximum number of decimals.
             * When greater than the default number of decimals for the specified currency, this value will take precedence.
             * Configuring this value can affect the input placeholder.
             */
            get: function () {
                return typeof this._decMaxLen === 'number' ? this._decMaxLen : this.getDecimalDigits(this.currency || '');
            },
            set: function (value) {
                this._decMaxLen = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyInputComponent.prototype, "decPlaceholder", {
            /**
             * Non-configurable placeholder for the decimal input.
             * Displays a zero digit for every digit that is allowed in the decimal field.
             */
            get: function () {
                return '0'.repeat(this.decMaxLen || 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyInputComponent.prototype, "disabled", {
            get: function () {
                return this.currencyDisabledState;
            },
            /**
             * Whether the input is disabled. Defaults to false.
             */
            set: function (disabled) {
                if (typeof disabled === 'boolean') {
                    this.currencyDisabledState = {
                        currency: disabled,
                        integer: disabled,
                        decimal: disabled,
                    };
                }
                else {
                    this.currencyDisabledState = disabled;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyInputComponent.prototype, "currencies", {
            /**
             * Currency list to be displayed in the dropdown.
             *
             * Note: Non-empty currency list is required for the currency symbol
             * field to be shown. Otherwise, only the amount fields will be shown.
             *
             * Additionally, If only a single currency provided, the dropdown of
             * the currency selection will be disabled and its value set to that single currency
             */
            set: function (list) {
                this.currencyList = list;
                if (this.currencyList && this.currencyList.length > 1) {
                    this.currControl.enable();
                }
                else {
                    this.currControl.disable();
                }
                // if currency is not set, use first item from the list
                if (this.currencyList && (this.currency === undefined || this.currencyList.indexOf(this.currency) === -1)) {
                    // [FIXME] Nothing guarantees that the currencyList isn't empty
                    this.updateCurrency(this.currencyList[0]);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyInputComponent.prototype, "integerId", {
            get: function () {
                return this._integerId;
            },
            /**
             * The id for the integer input. Defaults to unique string.
             * Used to map the label to the input.
             */
            set: function (value) {
                this._integerId = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyInputComponent.prototype, "decimalId", {
            get: function () {
                return this._decimalId;
            },
            /**
             * The id for the decimal input. Defaults to unique string.
             * Used to map the label to the input.
             */
            set: function (value) {
                this._decimalId = value;
            },
            enumerable: false,
            configurable: true
        });
        CurrencyInputComponent.prototype.ngOnInit = function () {
            this.initialized = true;
            if (!this.integerLabel || !this.decimalLabel) {
                console.warn("\n          Found an input from '\n          " + this.constructor.name + "\n          ' without 'label' or 'aria-label' attribute, please provide one of them\n        ");
            }
            this.setDisabled(this.currencyDisabledState);
            this.formatInteger();
        };
        CurrencyInputComponent.prototype.ngOnChanges = function (changes) {
            if (changes.disabled) {
                this.setDisabled(this.currencyDisabledState);
            }
        };
        CurrencyInputComponent.prototype.decOnBlur = function ($event) {
            this.markAsTouched($event);
            this.formatDecimal(this.decControl);
        };
        Object.defineProperty(CurrencyInputComponent.prototype, "cur", {
            get: function () {
                return this.currency;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyInputComponent.prototype, "curList", {
            get: function () {
                return this.currencyList;
            },
            enumerable: false,
            configurable: true
        });
        CurrencyInputComponent.prototype.ngAfterViewInit = function () {
            var len = this.el.nativeElement.getAttribute('maxlength');
            this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;
        };
        CurrencyInputComponent.prototype.onPress = function ($event) {
            this.focusDecEl($event.key);
            var keyCode = $event.keyCode || $event.which;
            var key = String.fromCharCode(keyCode);
            // allow to enter 'minus' only at the first position and if correspondent flag is enabled
            var isLeadingMinusPosition = this.allowNegativeValue && this.intEl && this.intEl.nativeElement.selectionStart === 0 && key === '-';
            // regexp is used here to support both of regular keyboard's numbers and numpad's numbers
            if (!(isLeadingMinusPosition || /^\d$/.test(key)) && $event.keyCode !== 8 && $event.keyCode !== 9) {
                $event.preventDefault();
            }
        };
        CurrencyInputComponent.prototype.onInput = function () {
            var isFormatted = this.formatInteger();
            if (isFormatted) {
                this.triggerChange();
            }
        };
        CurrencyInputComponent.prototype.updateCurrency = function (currency) {
            this.currency = currency || this.currControl.value;
            this.triggerChange();
        };
        CurrencyInputComponent.prototype.checkValues = function () {
            if (this.currency === undefined) {
                return true;
            }
            if (!this.decControl.value && !this.intControl.value) {
                this.onChange(null);
                return true;
            }
            return false;
        };
        CurrencyInputComponent.prototype.formatDecimal = function (decControl) {
            var value = decControl.value;
            if (value && this.decMaxLen && value.lenght < this.decMaxLen) {
                var updatedValue = String(value).padEnd(this.decMaxLen, '0');
                decControl.patchValue(updatedValue);
            }
        };
        CurrencyInputComponent.prototype.triggerChange = function () {
            if (this.checkValues()) {
                return;
            }
            var int = this.intControl.value || '0';
            if (this.resultType === 'string') {
                var currencyGroupSymbol = new RegExp("\\" + this.localeSeparatorSymbols[1], 'g');
                var whole = int.replace(currencyGroupSymbol, '');
                var dec = this.decControl.value || '0';
                var newAmount = whole + (dec !== '0' ? '.' + dec : '');
                this.onChange({
                    currency: this.currency,
                    amount: newAmount,
                });
            }
            else {
                var whole = parseInt(int.replace(/[^-\d]/g, ''), 10);
                var dec = parseFloat('0.' + this.decControl.value) || 0;
                var sign = whole < 0 ? -1 : 1;
                var newAmount = (Math.abs(whole) + dec) * sign;
                this.onChange({
                    currency: this.currency,
                    amount: newAmount,
                });
            }
        };
        CurrencyInputComponent.prototype.checkNumeric = function (numeric) {
            // removed all dashes except the first one
            if (numeric.length > 0) {
                numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');
            }
            numeric = this.sanitizeNumericValue(numeric);
            return numeric === '' ? numeric : new BigNumber__default["default"](numeric || 0).toFormat();
        };
        /**
         * Formats integer to user-friendly format
         *
         * @returns Returns true in case of successful formatting, otherwise - false.
         */
        CurrencyInputComponent.prototype.formatInteger = function () {
            // The behavior of `formatInteger` is dependent on some component inputs,
            // so don't format anything until the configuration is available.
            if (!this.initialized || !this.intEl) {
                return false;
            }
            if (!this.intControl.value) {
                this.intControl.setValue('');
                return true;
            }
            var offset = this.intEl.nativeElement.selectionStart - this.intControl.value.length;
            var numeric = this.intControl.value.replace(this.allowNegativeValue ? /[^-\d]/g : /\D/g, '');
            if (numeric === '-') {
                this.intControl.setValue('-', { emitEvent: false });
                return false;
            }
            var newVal = this.checkNumeric(numeric);
            // extend maxlength (if set) with the amount of special chars
            if (this.intMaxLen) {
                var specialCount = newVal.replace(/\d/g, '').length;
                this.intEl.nativeElement.setAttribute('maxlength', '' + (this.intMaxLen + specialCount));
            }
            this.intControl.setValue(newVal);
            var newLen = this.intControl.value.length;
            var newPos = Math.max(offset + newLen, 0);
            if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {
                this.intEl.nativeElement.selectionStart = newPos;
                this.intEl.nativeElement.selectionEnd = newPos;
            }
            return true;
        };
        /**
         * Event handler for backspace key press, and check if correct number is deleted
         */
        CurrencyInputComponent.prototype.onBackspace = function (el) {
            if (el.selectionStart) {
                var selectionStartPosition = el.selectionStart - 1;
                var value = el.value[selectionStartPosition];
                if (this.localeSeparatorSymbols.includes(value)) {
                    el.setSelectionRange(selectionStartPosition, selectionStartPosition);
                }
            }
        };
        // method is used to correct rendered input's value if user entered '-' and left the field
        CurrencyInputComponent.prototype.correctInputValue = function ($event) {
            this.markAsTouched($event);
            var numeric = this.intControl.value;
            if (numeric !== '-') {
                return;
            }
            this.intControl.setValue('', { emitEvent: false });
        };
        CurrencyInputComponent.prototype.writeValue = function (model) {
            if (!model) {
                return;
            }
            // currency cannot be set to nothing
            if (model.currency) {
                this.currency = model.currency;
                this.currControl.setValue(model.currency);
            }
            if (typeof model.amount === 'string' || typeof model.amount === 'number') {
                var _a = __read(('' + model.amount).split('.'), 2), whole = _a[0], decimals = _a[1];
                this.intControl.setValue(whole);
                this.decControl.setValue(decimals);
            }
            else {
                this.intControl.setValue('');
                this.decControl.setValue('');
            }
            this.formatInteger();
        };
        CurrencyInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CurrencyInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        CurrencyInputComponent.prototype.markAsTouched = function ($event) {
            this.blur.emit($event);
            this.onTouched();
        };
        CurrencyInputComponent.prototype.setDisabled = function (disableState) {
            if (disableState.currency) {
                this.currControl.disable();
            }
            else {
                this.currControl.enable();
            }
            if (disableState.integer) {
                this.intControl.disable();
            }
            else {
                this.intControl.enable();
            }
            if (disableState.decimal) {
                this.decControl.disable();
            }
            else {
                this.decControl.enable();
            }
        };
        CurrencyInputComponent.prototype.focusDecEl = function (key) {
            if (this.decEl && ['.', ','].indexOf(key) !== -1) {
                this.decEl.nativeElement.focus();
            }
        };
        /**
         * Make sure that numeric value doesn't exceed max length (if set)
         * this might happen in case value is pasted to input that has extended max length
         *
         * @param numeric
         */
        CurrencyInputComponent.prototype.sanitizeNumericValue = function (numeric) {
            if (this.intMaxLen && numeric) {
                return numeric.slice(0, this.intMaxLen);
            }
            return numeric;
        };
        /**
         * If currency doesn't have decimal part, decimal placeholder
         * will be set to default decMinLen
         */
        CurrencyInputComponent.prototype.getDecimalDigits = function (currency) {
            return i4.getNumberOfCurrencyDigits(currency) === 0 ? this.decMinLen : i4.getNumberOfCurrencyDigits(currency);
        };
        return CurrencyInputComponent;
    }());
    CurrencyInputComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyInputComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0.LOCALE_ID }, { token: i1__namespace.DomAttributesService }, { token: i2__namespace.NgControl, optional: true, self: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CurrencyInputComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: { decMaxLen: "decMaxLen", decMinLen: "decMinLen", placeholder: "placeholder", resultType: "resultType", integer: "integer", required: "required", readonly: "readonly", disabled: "disabled", integerLabelSrOnly: "integerLabelSrOnly", decimalLabelSrOnly: "decimalLabelSrOnly", currencies: "currencies", isRightAligned: "isRightAligned", integerId: "integerId", decimalId: "decimalId", integerLabel: "integerLabel", decimalLabel: "decimalLabel", currencyLabel: "currencyLabel", allowNegativeValue: "allowNegativeValue", currencyListAriaLabel: "currencyListAriaLabel", currencyListWithOnItemAriaLabel: "currencyListWithOnItemAriaLabel", ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaInvalid: ["aria-invalid", "ariaInvalid"] }, outputs: { blur: "blur" }, providers: [i4.DecimalPipe], viewQueries: [{ propertyName: "intEl", first: true, predicate: ["integerInput"], descendants: true, static: true }, { propertyName: "decEl", first: true, predicate: ["decimalsInput"], descendants: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"bb-currency-input\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div *ngIf=\"curList && curList.length\" class=\"bb-currency-input__currency-selector selector bb-stack__item\">\n      <label\n        class=\"sr-only\"\n        *ngIf=\"currencyListAriaLabel || currencyListWithOnItemAriaLabel\"\n        for=\"{{ currencyInputId }}\"\n        [attr.aria-label]=\"currencyListWithOnItemAriaLabel\"\n        id=\"{{ currencyLabelId }}\"\n        [attr.data-role]=\"'currency-input-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!currencyListAriaLabel || !!currencyListWithOnItemAriaLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ curList && curList.length > 1 ? currencyListAriaLabel : currencyListWithOnItemAriaLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Currency label | Label for currency code dropdown of the Currency Input component\n              @@bb-currency-input-ui.currency-input-label\"\n            >Currency</ng-container\n          >\n        </ng-container>\n      </label>\n      <ng-container [ngSwitch]=\"readonly || (curList && curList.length === 1)\">\n        <input\n          *ngSwitchCase=\"true\"\n          type=\"text\"\n          (blur)=\"markAsTouched($event)\"\n          [id]=\"currencyInputId\"\n          [readonly]=\"true\"\n          [required]=\"required\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          class=\"form-control bb-text-align-center\"\n          value=\"{{ cur }}\"\n          [attr.data-role]=\"'currency-input-currency-readonly'\"\n        />\n        <bb-dropdown-single-select-ui\n          *ngSwitchDefault\n          [id]=\"currencyInputId\"\n          class=\"bb-block\"\n          [placeholder]=\"curList[0]\"\n          [options]=\"curList\"\n          [readonly]=\"readonly\"\n          [required]=\"required\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          (change)=\"updateCurrency(); markAsTouched($event)\"\n          [formControl]=\"currControl\"\n          [attr.data-role]=\"'currency-input-currency-selector'\"\n        ></bb-dropdown-single-select-ui>\n      </ng-container>\n    </div>\n\n    <div\n      class=\"bb-currency-input__integer bb-stack__item bb-stack__item--spacing-sm\"\n      [class.ng-touched]=\"intControl.touched || decControl.touched || parentFormControl?.touched\"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!integerLabel || integerLabelSrOnly\"\n        for=\"{{ integerInputId }}\"\n        id=\"{{ integerLabelId }}\"\n        [attr.data-role]=\"'currency-input-integer-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!integerLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ integerLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Integer label | Label for integer part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.integer-input-label\"\n            >Integer</ng-container\n          >\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ integerInputId }}\"\n        [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, integerLabelId)\"\n        name=\"integer\"\n        type=\"text\"\n        size=\"5\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keydown.backspace)=\"onBackspace(integerInput)\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"onInput()\"\n        (blur)=\"correctInputValue($event)\"\n        [formControl]=\"intControl\"\n        class=\"form-control bb-text-align-right\"\n        placeholder=\"{{ placeholder }}\"\n        #integerInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'currency-input-integer-input'\"\n      />\n    </div>\n\n    <span *ngIf=\"!integer && decMaxLen\" class=\"bb-stack__item bb-stack__item--spacing-sm\">{{ decimalSeparator }}</span>\n\n    <div\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-currency-input__decimal\"\n      [class.ng-touched]=\"intControl.touched || decControl.touched || parentFormControl?.touched\"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!decimalLabel || decimalLabelSrOnly\"\n        for=\"{{ decimalInputId }}\"\n        id=\"{{ decimalLabelId }}\"\n        [attr.data-role]=\"'currency-input-decimal-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!decimalLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ decimalLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Decimal label | Label for decimal part of the monetary amount of the Currency Input component\n              @@bb-currency-input-ui.decimal-input-label\"\n          >\n            Decimals\n          </ng-container>\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ decimalInputId }}\"\n        [attr.aria-describedby]=\"idListAttr(ariaDescribedby, validationMessagesId)\"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, decimalLabelId)\"\n        name=\"decimals\"\n        type=\"text\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"triggerChange()\"\n        (blur)=\"decOnBlur($event)\"\n        [formControl]=\"decControl\"\n        class=\"form-control\"\n        [ngClass]=\"{ 'bb-text-align-right': isRightAligned }\"\n        maxlength=\"{{ decMaxLen }}\"\n        placeholder=\"{{ decPlaceholder }}\"\n        #decimalsInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'input-currency-decimals'\"\n      />\n    </div>\n  </div>\n  <div\n    class=\"bb-input-validation-message\"\n    aria-live=\"assertive\"\n    [id]=\"validationMessagesId\"\n    [attr.data-role]=\"'currency-input-validation-message'\"\n  >\n    <ng-content select=\"[bbValidationMessage]\"></ng-content>\n  </div>\n</div>\n", components: [{ type: i3__namespace.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i4__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i2__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyInputComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-currency-input-ui',
                        templateUrl: './currency-input.component.html',
                        providers: [i4.DecimalPipe],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }, { type: i1__namespace.DomAttributesService }, { type: i2__namespace.NgControl, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Self
                        }] }];
        }, propDecorators: { decMaxLen: [{
                    type: i0.Input
                }], decMinLen: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], resultType: [{
                    type: i0.Input
                }], integer: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], readonly: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], integerLabelSrOnly: [{
                    type: i0.Input
                }], decimalLabelSrOnly: [{
                    type: i0.Input
                }], currencies: [{
                    type: i0.Input
                }], isRightAligned: [{
                    type: i0.Input
                }], integerId: [{
                    type: i0.Input
                }], decimalId: [{
                    type: i0.Input
                }], integerLabel: [{
                    type: i0.Input
                }], decimalLabel: [{
                    type: i0.Input
                }], currencyLabel: [{
                    type: i0.Input
                }], allowNegativeValue: [{
                    type: i0.Input
                }], currencyListAriaLabel: [{
                    type: i0.Input
                }], currencyListWithOnItemAriaLabel: [{
                    type: i0.Input
                }], ariaDescribedby: [{
                    type: i0.Input,
                    args: ['aria-describedby']
                }], ariaLabelledby: [{
                    type: i0.Input,
                    args: ['aria-labelledby']
                }], ariaInvalid: [{
                    type: i0.Input,
                    args: ['aria-invalid']
                }], intEl: [{
                    type: i0.ViewChild,
                    args: ['integerInput', { static: true }]
                }], decEl: [{
                    type: i0.ViewChild,
                    args: ['decimalsInput']
                }], blur: [{
                    type: i0.Output
                }] } });

    var CurrencyInputModule = /** @class */ (function () {
        function CurrencyInputModule() {
        }
        return CurrencyInputModule;
    }());
    CurrencyInputModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyInputModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CurrencyInputModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyInputModule, declarations: [CurrencyInputComponent], imports: [i4.CommonModule, i2.ReactiveFormsModule, i3.DropdownSingleSelectModule], exports: [CurrencyInputComponent,
            // exporting validation message as it can be injected into the component template
            inputValidationMessage.InputValidationMessageModule,
            /**
             * @deprecated
             * Exporting `FormsModule` is deprecated
             **/
            i2.FormsModule] });
    CurrencyInputModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyInputModule, imports: [[i4.CommonModule, i2.ReactiveFormsModule, i3.DropdownSingleSelectModule],
            // exporting validation message as it can be injected into the component template
            inputValidationMessage.InputValidationMessageModule,
            /**
             * @deprecated
             * Exporting `FormsModule` is deprecated
             **/
            i2.FormsModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyInputModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i4.CommonModule, i2.ReactiveFormsModule, i3.DropdownSingleSelectModule],
                        declarations: [CurrencyInputComponent],
                        exports: [
                            CurrencyInputComponent,
                            // exporting validation message as it can be injected into the component template
                            inputValidationMessage.InputValidationMessageModule,
                            /**
                             * @deprecated
                             * Exporting `FormsModule` is deprecated
                             **/
                            i2.FormsModule,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CurrencyInputComponent = CurrencyInputComponent;
    exports.CurrencyInputModule = CurrencyInputModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-currency-input.umd.js.map
