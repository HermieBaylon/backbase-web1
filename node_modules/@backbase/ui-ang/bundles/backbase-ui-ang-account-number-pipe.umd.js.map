{"version":3,"file":"backbase-ui-ang-account-number-pipe.umd.js","sources":["../../../../libs/ui-ang/account-number-pipe/constants.ts","../../../../libs/ui-ang/account-number-pipe/accounts-displaying-format.service.ts","../../../../libs/ui-ang/account-number-pipe/account-number.pipe.ts","../../../../libs/ui-ang/account-number-pipe/account-number.module.ts","../../../../libs/ui-ang/account-number-pipe/backbase-ui-ang-account-number-pipe.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\n * Product number types\n */\nexport type AccountNumberType = 'cardNumber' | 'iban' | 'bban';\n\n/**\n * Account numbers displaying format\n */\nexport const DefaultAccountsDisplayingFormat: AccountsDisplayingFormat = {\n  segments: 4,\n};\n\n/**\n * Account numbers displaying format\n */\nexport interface AccountsDisplayingFormat {\n  /**\n   * The size (or array of sizes) the segments should have.\n   */\n  segments: number | Array<number>;\n}\n\n/**\n * Accounts displaying format configuration per attribute type\n */\nexport type AccountsDisplayingFormatConfiguration = {\n  /**\n   * Account displaying formats for iban, bban values\n   */\n  [key in AccountNumberType]?: AccountsDisplayingFormat;\n} & {\n  /**\n   * Account displaying format for card numbers\n   */\n  cardNumber?: AccountsDisplayingFormat & {\n    cardProviders?: Record<string, AccountsDisplayingFormat>;\n  };\n};\n\n/**\n * Accounts displaying format Token\n */\nexport const ACCOUNTS_DISPLAYING_FORMAT = new InjectionToken<AccountsDisplayingFormatConfiguration>(\n  'ACCOUNTS_DISPLAYING_FORMAT_TOKEN',\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  ACCOUNTS_DISPLAYING_FORMAT,\n  DefaultAccountsDisplayingFormat,\n  AccountNumberType,\n  AccountsDisplayingFormat,\n  AccountsDisplayingFormatConfiguration,\n} from './constants';\n\n/**\n * A configuration service for account numbers displaying format\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountsDisplayingFormatService {\n  /**\n   * @name AccountsDisplayingFormatService#constructor\n   * @param accountsDisplayingFormat - (Optional) AccountsDisplayingFormatConfiguration\n   *\n   * @internal\n   */\n  constructor(\n    @Optional()\n    @Inject(ACCOUNTS_DISPLAYING_FORMAT)\n    private readonly accountsDisplayingFormat: AccountsDisplayingFormatConfiguration,\n  ) {}\n\n  /**\n   * @name AccountsDisplayingFormatService#getDefaultFormat\n   * @param attributeType - numbers format attributeType\n   * @param cardProviderName - card provider name\n   *\n   * @description\n   * Gets default account numbers format per attribute type\n   */\n  getDefaultFormat(attributeType: AccountNumberType, cardProviderName?: string): AccountsDisplayingFormat {\n    if (attributeType === 'cardNumber') {\n      return this.getCardNumberFormat(cardProviderName);\n    }\n\n    return this.accountsDisplayingFormat?.[attributeType] ?? DefaultAccountsDisplayingFormat;\n  }\n\n  private getCardNumberFormat(cardProviderName?: string): AccountsDisplayingFormat {\n    const cardNumber = this.accountsDisplayingFormat?.cardNumber;\n    const providersConfiguration = Object.entries(cardNumber?.cardProviders || {}).reduce(\n      (configuration, entry) => ({ ...configuration, [entry[0].toLowerCase()]: entry[1] }),\n      {} as Record<string, AccountsDisplayingFormat>,\n    );\n\n    if (cardProviderName && providersConfiguration[cardProviderName.toLowerCase()]) {\n      return providersConfiguration[cardProviderName.toLowerCase()];\n    }\n\n    return cardNumber ?? DefaultAccountsDisplayingFormat;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { AccountNumberType, AccountsDisplayingFormat } from './constants';\nimport { AccountsDisplayingFormatService } from './accounts-displaying-format.service';\nimport { segment } from '@backbase/ui-ang/util';\n\n/**\n * Formats account numbers, applies different format configurations per number type\n */\n@Pipe({\n  name: 'bbAccountNumber',\n})\nexport class AccountNumberPipe implements PipeTransform {\n  /**\n   * @name AccountNumberPipe#constructor\n   * @param accountsDisplayingFormatService - AccountsDisplayingFormatService\n   *\n   * @internal\n   */\n  constructor(private readonly accountsDisplayingFormatService: AccountsDisplayingFormatService) {}\n\n  /**\n   * @name AccountNumberPipe#transform\n   * @param value - the string to transform\n   * @param configuration - type of the value (iban, bban or number) or a custom numbers format\n   * @param cardProviderName - card provider name\n   *\n   * @description\n   * Formats account numbers\n   *\n   * to use with a global accountsFormat configuration\n   * - '12345678' | bbAccountNumber:'iban'\n   * to apply a custom configuration\n   * - '12345678' | bbAccountNumber:{ segments: [2, 4, 2] }\n   * to apply a 'visa' card number configuration\n   * - '12345678' | bbAccountNumber:'cardNumber':'visa'\n   */\n  transform(\n    value: string | number,\n    configuration: AccountNumberType | AccountsDisplayingFormat,\n    cardProviderName?: string,\n  ): string {\n    const accountNumber = value.toString();\n    const displayingFormat =\n      typeof configuration === 'object'\n        ? (configuration as AccountsDisplayingFormat)\n        : this.accountsDisplayingFormatService.getDefaultFormat(configuration, cardProviderName);\n\n    return segment(accountNumber, displayingFormat.segments);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AccountNumberPipe } from './account-number.pipe';\n\n@NgModule({\n  declarations: [AccountNumberPipe],\n  exports: [AccountNumberPipe],\n})\nexport class AccountNumberPipeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["InjectionToken","i0","Injectable","Optional","Inject","segment","i1.AccountsDisplayingFormatService","Pipe","NgModule"],"mappings":"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"}