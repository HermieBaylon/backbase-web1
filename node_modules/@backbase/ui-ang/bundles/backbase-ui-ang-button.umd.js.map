{"version":3,"file":"backbase-ui-ang-button.umd.js","sources":["../../../../libs/ui-ang/button/button.component.ts","../../../../libs/ui-ang/button/button.component.html","../../../../libs/ui-ang/button/button.directive.ts","../../../../libs/ui-ang/button/button.module.ts","../../../../libs/ui-ang/button/backbase-ui-ang-button.ts"],"sourcesContent":["import { Component, Input, ElementRef, Renderer2, AfterViewInit, ViewChild, HostBinding } from '@angular/core';\n\nimport { ButtonColor } from './button.directive';\n\nexport type ButtonType = 'button' | 'submit' | 'reset';\n\n/**\n * @name ButtonComponent\n *\n * @description\n * Component that displays a button.\n */\n@Component({\n  selector: 'bb-button-ui',\n  templateUrl: './button.component.html',\n})\nexport class ButtonComponent implements AfterViewInit {\n  /**\n   * This Boolean attribute lets you specify that the button should have input focus when the page\n   * loads, unless the user overrides it, for example by typing in a different control.  Only one\n   * form-associated element in a document can have this attribute specified.\n   */\n  @Input() autofocus = false;\n  /**\n   * The HTML5 button type.  Defaults to 'button'.\n   */\n  @Input() type: ButtonType = 'button';\n  /**\n   * This Boolean attribute indicates that the user cannot interact with the button.  Defaults to\n   * false.\n   */\n  @Input() disabled = false;\n  /**\n   * Size of the button.\n   */\n  @Input() buttonSize: 'sm' | 'md' = 'md';\n  /**\n   * The color for the button.  Defaults to 'primary'.\n   */\n  @Input() color: ButtonColor | string = 'primary';\n  /**\n   * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n   */\n  @HostBinding('class.btn-block')\n  @Input()\n  block = false;\n\n  @ViewChild('button', { static: true }) buttonEl: ElementRef | undefined;\n\n  constructor(private readonly elRef: ElementRef, private readonly renderer2: Renderer2) {}\n\n  protected moveAriaAttributes(hostEl: HTMLElement, childEl: HTMLElement) {\n    const nodeMap: NamedNodeMap = hostEl.attributes;\n    // CUT every aria attribute from the host element and PASTE it into the button element\n    Object.keys(nodeMap).forEach((key: string) => {\n      const item: Attr | null = nodeMap.item(Number(key));\n      let attrName;\n      let attrVal;\n      if (item) {\n        attrName = item.name;\n        attrVal = item.value;\n        if (attrName.includes('aria')) {\n          this.renderer2.setAttribute(childEl, attrName, attrVal);\n          this.renderer2.removeAttribute(hostEl, attrName);\n        }\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    this.moveAriaAttributes(this.elRef.nativeElement, this.buttonEl && this.buttonEl.nativeElement);\n  }\n}\n","<button\n  #button\n  [type]=\"type\"\n  class=\"btn bb-button btn-{{ color }}\"\n  [autofocus]=\"autofocus\"\n  [disabled]=\"disabled\"\n  [class.btn-block]=\"block\"\n  [ngClass]=\"buttonSize === 'sm' ? 'btn-sm' : 'btn-md'\"\n>\n  <ng-content></ng-content>\n</button>\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';\n\nexport type ButtonType = 'button' | 'reset' | 'submit';\n\nexport type ButtonColor =\n  | 'primary'\n  | 'info'\n  | 'success'\n  | 'warning'\n  | 'danger'\n  | 'secondary'\n  | 'light'\n  | 'dark'\n  | 'link'\n  | 'link-text'\n  | 'link-text-light'\n  | 'unstyled';\n\n/**\n * @name ButtonDirective\n *\n * @description\n * Directive for styling button.\n *\n * @a11y\n * The `bbButton` directive doesn't provide any specific properties for accessibility.\n * In case of necessity add `aria-*` attributes to the `button` element.\n */\n@Directive({\n  selector: 'button[bbButton]',\n})\nexport class ButtonDirective implements OnInit, OnChanges {\n  /**\n   * Button's type atrribute with default value.\n   */\n  @HostBinding('type')\n  @Input()\n  type: ButtonType = 'button';\n\n  /**\n   * The color for the button. Defaults to 'primary'.\n   * If a custom string used, then a css class is going to be added. The pattern is as follows:\n   * `btn-customColor`\n   */\n  @Input() color: ButtonColor | string = 'primary';\n\n  /**\n   * Size of the button.\n   */\n  @Input() buttonSize: 'sm' | 'md' = 'md';\n\n  /**\n   * The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.\n   */\n  @HostBinding('class.btn-block')\n  @Input()\n  block = false;\n  /**\n   * The flag to indicate whether the button should be in a circular shape. Defaults to 'false'.\n   * This will only work when there's only an icon inside the button without a text.\n   */\n  @HostBinding('class.btn-circle')\n  @Input()\n  circle = false;\n\n  constructor(private readonly renderer: Renderer2, private readonly hostElement: ElementRef) {}\n\n  ngOnInit(): void {\n    this.renderer.addClass(this.hostElement.nativeElement, 'btn');\n    this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.color}`);\n    this.renderer.addClass(this.hostElement.nativeElement, `btn-${this.buttonSize}`);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.color) {\n      if (changes.color.previousValue) {\n        this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.color.previousValue}`);\n      }\n\n      if (changes.color.currentValue) {\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.color.currentValue}`);\n      }\n    }\n\n    if (changes.buttonSize) {\n      if (changes.buttonSize.previousValue) {\n        this.renderer.removeClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.previousValue}`);\n      }\n\n      if (changes.buttonSize.currentValue) {\n        this.renderer.addClass(this.hostElement.nativeElement, `btn-${changes.buttonSize.currentValue}`);\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport { ButtonDirective } from './button.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ButtonComponent, ButtonDirective],\n  exports: [ButtonComponent, ButtonDirective],\n})\nexport class ButtonModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i0","i1","Component","Input","HostBinding","ViewChild","Directive","CommonModule","NgModule"],"mappings":"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"}