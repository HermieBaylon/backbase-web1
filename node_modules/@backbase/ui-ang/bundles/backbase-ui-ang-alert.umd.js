(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/services')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/alert', ['exports', '@angular/core', '@angular/common', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/icon', '@backbase/ui-ang/services'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"].alert = {}), global.ng.core, global.ng.common, global.i2, global.backbase["ui-ang"].icon, global.backbase["ui-ang"].services));
})(this, (function (exports, i0, i4, i2, i3, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /**
     * @name AlertComponent
     *
     * @description
     * Component that displays an alert.
     *
     * @a11y For Alert component it's not required to pass any options for accessibility.
     * It internally handles accessibility for title and message:
     *  - title is linked with aria-labelledby.
     *  - message is linked with aria-describedby.
     */
    var AlertComponent = /** @class */ (function () {
        function AlertComponent(domAttrService, changeDetector) {
            this.domAttrService = domAttrService;
            this.changeDetector = changeDetector;
            /**
             * The type modifier for the alert. Defaults to 'error'.
             */
            this.modifier = 'error';
            /**
             * Whether the alert can be dismissed. Defaults to false.
             */
            this.dismissible = false;
            /**
             * The callback fired upon closing the alert.
             */
            this.close = new i0.EventEmitter();
            this.bootstrapTypes = {
                warning: 'warning',
                error: 'danger',
                success: 'success',
                info: 'info',
            };
            this.alertTitleId = this.domAttrService.generateId();
            this.alertDescriptionId = this.domAttrService.generateId();
            this.isOpen = true;
            this.isContentProvided = true;
        }
        AlertComponent.prototype.ngOnInit = function () {
            if (typeof this.title === 'undefined') {
                throw new Error("\"title\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        AlertComponent.prototype.ngAfterViewInit = function () {
            var _a;
            if (!this.message) {
                this.isContentProvided = Boolean((_a = this.contentWrapper) === null || _a === void 0 ? void 0 : _a.nativeElement.innerText);
                if (!this.isContentProvided) {
                    this.alertDescriptionId = null;
                    this.changeDetector.detectChanges();
                }
            }
            else {
                this.isContentProvided = false;
            }
        };
        AlertComponent.prototype.getAlertType = function () {
            return this.bootstrapTypes[this.modifier];
        };
        AlertComponent.prototype.closeAlert = function () {
            this.close.emit();
        };
        return AlertComponent;
    }());
    AlertComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AlertComponent, deps: [{ token: i1__namespace.DomAttributesService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AlertComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AlertComponent, selector: "bb-alert-ui", inputs: { modifier: "modifier", dismissible: "dismissible", title: "title", message: "message" }, outputs: { close: "close" }, viewQueries: [{ propertyName: "content", first: true, predicate: ["content"], descendants: true, static: true }, { propertyName: "contentWrapper", first: true, predicate: ["contentWrapper"], descendants: true }], ngImport: i0__namespace, template: "<ngb-alert\n  [attr.aria-describedby]=\"alertDescriptionId\"\n  [attr.aria-labelledby]=\"alertTitleId\"\n  [attr.role]=\"dismissible ? 'alertdialog' : 'alert'\"\n  [attr.aria-live]=\"'assertive'\"\n  [dismissible]=\"dismissible\"\n  [type]=\"getAlertType()\"\n  (close)=\"isOpen = false\"\n  *ngIf=\"isOpen\"\n  (closed)=\"closeAlert()\"\n>\n  <div class=\"alert-body\">\n    <bb-icon-ui\n      class=\"alert-icon\"\n      [name]=\"modifier\"\n      [color]=\"getAlertType()\"\n      [attr.data-role]=\"'alert-icon'\"\n    ></bb-icon-ui>\n    <div class=\"alert-content\">\n      <strong\n        [class.alert-heading]=\"title\"\n        [id]=\"alertTitleId\"\n        role=\"heading\"\n        aria-level=\"2\"\n        [attr.data-role]=\"'alert-title'\"\n        >{{ title }}</strong\n      >\n      <div\n        *ngIf=\"message; else content\"\n        class=\"alert-description\"\n        [id]=\"alertDescriptionId\"\n        [attr.data-role]=\"'alert-message'\"\n      >\n        {{ message }}\n      </div>\n    </div>\n  </div>\n</ngb-alert>\n\n<ng-template #content>\n  <div *ngIf=\"isContentProvided\" #contentWrapper [attr.data-role]=\"'alert-content'\" [id]=\"alertDescriptionId\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n", components: [{ type: i2__namespace.NgbAlert, selector: "ngb-alert", inputs: ["dismissible", "type", "animation"], outputs: ["closed"], exportAs: ["ngbAlert"] }, { type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AlertComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-alert-ui',
                        templateUrl: './alert.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.DomAttributesService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { modifier: [{
                    type: i0.Input
                }], dismissible: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], message: [{
                    type: i0.Input
                }], close: [{
                    type: i0.Output
                }], content: [{
                    type: i0.ViewChild,
                    args: ['content', { static: true }]
                }], contentWrapper: [{
                    type: i0.ViewChild,
                    args: ['contentWrapper']
                }] } });

    var AlertModule = /** @class */ (function () {
        function AlertModule() {
        }
        return AlertModule;
    }());
    AlertModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AlertModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AlertModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AlertModule, declarations: [AlertComponent], imports: [i4.CommonModule, i2.NgbAlertModule, i3.IconModule], exports: [AlertComponent] });
    AlertModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AlertModule, imports: [[i4.CommonModule, i2.NgbAlertModule, i3.IconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AlertModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i4.CommonModule, i2.NgbAlertModule, i3.IconModule],
                        declarations: [AlertComponent],
                        exports: [AlertComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AlertComponent = AlertComponent;
    exports.AlertModule = AlertModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-alert.umd.js.map
