(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/keyboard-click-directive', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["keyboard-click-directive"] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
})(this, (function (exports, i0, rxjs, operators, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * @name KeyboardClickDirective
     *
     * @description
     * Directive that add click/keydown.enter/keydown.space events on element
     * Used for adding accessibility(tab navigation events) for element
     */
    var KeyboardClickDirective = /** @class */ (function () {
        function KeyboardClickDirective(elem) {
            this.elem = elem;
            /**
             * Stream that should be fired on click/keydown.enter/keydown.space
             */
            this.bbKeyboardClick = new i0.EventEmitter();
            this.emit$ = new rxjs.Subject();
            this.gc$ = new rxjs.Subject();
            // Fix for frequent keydown event generation for spacebar in FF and IE
            this.emit$.pipe(operators.throttleTime(100), operators.takeUntil(this.gc$)).subscribe(this.bbKeyboardClick);
        }
        KeyboardClickDirective.prototype.onActionKeyPressed = function ($event) {
            // Check if the selected element is the current element itself and not its nested selectable children
            if (this.elem.nativeElement !== $event.target) {
                return;
            }
            this.emit$.next($event);
        };
        KeyboardClickDirective.prototype.onClicked = function ($event) {
            this.emit$.next($event);
        };
        KeyboardClickDirective.prototype.ngOnDestroy = function () {
            this.gc$.next();
        };
        return KeyboardClickDirective;
    }());
    KeyboardClickDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardClickDirective, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    KeyboardClickDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: { bbKeyboardClick: "bbKeyboardClick" }, host: { listeners: { "keydown.enter": "onActionKeyPressed($event)", "keydown.space": "onActionKeyPressed($event)", "click": "onClicked($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardClickDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbKeyboardClick]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { bbKeyboardClick: [{
                    type: i0.Output
                }], onActionKeyPressed: [{
                    type: i0.HostListener,
                    args: ['keydown.enter', ['$event']]
                }, {
                    type: i0.HostListener,
                    args: ['keydown.space', ['$event']]
                }], onClicked: [{
                    type: i0.HostListener,
                    args: ['click', ['$event']]
                }] } });

    var KeyboardClickModule = /** @class */ (function () {
        function KeyboardClickModule() {
        }
        return KeyboardClickModule;
    }());
    KeyboardClickModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardClickModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    KeyboardClickModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardClickModule, declarations: [KeyboardClickDirective], imports: [common.CommonModule], exports: [KeyboardClickDirective] });
    KeyboardClickModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardClickModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardClickModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [KeyboardClickDirective],
                        exports: [KeyboardClickDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.KeyboardClickDirective = KeyboardClickDirective;
    exports.KeyboardClickModule = KeyboardClickModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-keyboard-click-directive.umd.js.map
