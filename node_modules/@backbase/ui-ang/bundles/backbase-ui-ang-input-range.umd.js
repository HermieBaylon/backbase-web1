(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/input-range', ['exports', '@angular/core', '@angular/common', '@angular/forms', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["input-range"] = {}), global.ng.core, global.ng.common, global.ng.forms, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, common, i1, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var InputRangeMinDirective = /** @class */ (function () {
        function InputRangeMinDirective(control) {
            this.control = control;
        }
        InputRangeMinDirective.prototype.ngOnChanges = function (_a) {
            var bbInputRangeMin = _a.bbInputRangeMin;
            var c = this.control;
            if (!c.control) {
                return;
            }
            if (!bbInputRangeMin.firstChange) {
                c.control.clearValidators();
            }
            if (typeof this.bbInputRangeMin === 'number') {
                c.control.setValidators(i1.Validators.min(this.bbInputRangeMin));
            }
            c.control.updateValueAndValidity();
        };
        return InputRangeMinDirective;
    }());
    InputRangeMinDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeMinDirective, deps: [{ token: i1__namespace.NgControl, self: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    InputRangeMinDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeMinDirective, selector: "bb-input-number-ui[bbInputRangeMin]", inputs: { bbInputRangeMin: "bbInputRangeMin" }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeMinDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'bb-input-number-ui[bbInputRangeMin]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.NgControl, decorators: [{
                            type: i0.Self
                        }] }];
        }, propDecorators: { bbInputRangeMin: [{
                    type: i0.Input
                }] } });
    var InputRangeMaxDirective = /** @class */ (function () {
        function InputRangeMaxDirective(control) {
            this.control = control;
        }
        InputRangeMaxDirective.prototype.ngOnChanges = function (_a) {
            var bbInputRangeMax = _a.bbInputRangeMax;
            var c = this.control;
            if (!c.control) {
                return;
            }
            if (!bbInputRangeMax.firstChange) {
                c.control.clearValidators();
            }
            if (typeof this.bbInputRangeMax === 'number') {
                c.control.setValidators(i1.Validators.max(this.bbInputRangeMax));
            }
            c.control.updateValueAndValidity();
        };
        return InputRangeMaxDirective;
    }());
    InputRangeMaxDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeMaxDirective, deps: [{ token: i1__namespace.NgControl, self: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    InputRangeMaxDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeMaxDirective, selector: "bb-input-number-ui[bbInputRangeMax]", inputs: { bbInputRangeMax: "bbInputRangeMax" }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeMaxDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'bb-input-number-ui[bbInputRangeMax]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.NgControl, decorators: [{
                            type: i0.Self
                        }] }];
        }, propDecorators: { bbInputRangeMax: [{
                    type: i0.Input
                }] } });
    var InputRangeDirective = /** @class */ (function () {
        function InputRangeDirective() {
            this.destroy$$ = new rxjs.Subject();
        }
        InputRangeDirective.prototype.ngAfterViewInit = function () {
            var cMin = this.min && this.min.control && this.min.control.control;
            var cMax = this.max && this.max.control && this.max.control.control;
            if (!(cMin && cMax)) {
                return;
            }
            rxjs.merge(cMin.valueChanges.pipe(operators.tap(function (min) {
                var max = cMax.value;
                if (typeof max !== 'number' || min > max) {
                    cMax.patchValue(min, { emitEvent: false });
                }
            })), cMax.valueChanges.pipe(operators.tap(function (max) {
                var min = cMin.value;
                var areNumbers = typeof min === 'number' && typeof max === 'number';
                if (areNumbers && max < min) {
                    cMin.patchValue(max, { emitEvent: false });
                }
            })))
                .pipe(operators.takeUntil(this.destroy$$))
                .subscribe();
        };
        InputRangeDirective.prototype.ngOnDestroy = function () {
            if (this.destroy$$) {
                this.destroy$$.next();
                this.destroy$$.complete();
            }
        };
        return InputRangeDirective;
    }());
    InputRangeDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    InputRangeDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: InputRangeDirective, selector: "[bbInputRange]", queries: [{ propertyName: "min", first: true, predicate: InputRangeMinDirective, descendants: true, static: true }, { propertyName: "max", first: true, predicate: InputRangeMaxDirective, descendants: true, static: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbInputRange]',
                    }]
            }], propDecorators: { min: [{
                    type: i0.ContentChild,
                    args: [InputRangeMinDirective, { static: true }]
                }], max: [{
                    type: i0.ContentChild,
                    args: [InputRangeMaxDirective, { static: true }]
                }] } });

    var InputRangeModule = /** @class */ (function () {
        function InputRangeModule() {
        }
        return InputRangeModule;
    }());
    InputRangeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    InputRangeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeModule, declarations: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective], imports: [common.CommonModule], exports: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective] });
    InputRangeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: InputRangeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        exports: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective],
                        declarations: [InputRangeDirective, InputRangeMinDirective, InputRangeMaxDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.InputRangeDirective = InputRangeDirective;
    exports.InputRangeMaxDirective = InputRangeMaxDirective;
    exports.InputRangeMinDirective = InputRangeMinDirective;
    exports.InputRangeModule = InputRangeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-input-range.umd.js.map
