(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@backbase/ui-ang/collapsible-accordion'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/keyboard-click-directive')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/collapsible-card', ['exports', '@angular/common', '@angular/core', '@backbase/ui-ang/collapsible-accordion', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/icon', '@backbase/ui-ang/keyboard-click-directive'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["collapsible-card"] = {}), global.ng.common, global.ng.core, global.backbase["ui-ang"]["collapsible-accordion"], global.backbase["ui-ang"].collapsible, global.backbase["ui-ang"].icon, global.backbase["ui-ang"]["keyboard-click-directive"]));
})(this, (function (exports, i4, i0, i1, i2, i3, i5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);

    /**
     * @name CollapsibleCardComponent
     *
     * @description
     * Provides an expandable details-summary/body-header view.
     * Uses bb-collapsible-ui for a predefined template
     *
     * @a11y ariaLabelForIcon is discernible text for chevron icon
     */
    var CollapsibleCardComponent = /** @class */ (function () {
        function CollapsibleCardComponent(bbCollapsibleAccordion) {
            this.bbCollapsibleAccordion = bbCollapsibleAccordion;
            this.open = false;
            /**
             * Accessible label for chevron icon.
             */
            this.ariaLabelForIcon = 'Chevron icon';
            /**
             * Accessible label for collapsible card
             */
            this.ariaLabel = 'toggle';
            /**
             * Whether chevron should be displayed.
             *
             * @default true
             */
            this.hasChevron = true;
            /**
             * Whether card should be highlighted.
             *
             * @default false
             */
            this.highlight = false;
            /**
             * Whether card should has shadow effect.
             *
             * @default true
             */
            this.shadow = true;
            /**
             * Card size
             *
             * @default 'md'
             */
            this.size = 'md';
            this.isOpenChange = new i0.EventEmitter();
            if (this.bbCollapsibleAccordion) {
                this.bbCollapsibleAccordion.registerNestedPanel(this);
            }
        }
        Object.defineProperty(CollapsibleCardComponent.prototype, "isOpen", {
            get: function () {
                return this.open;
            },
            /**
             * Toggles the content.
             */
            set: function (v) {
                this.open = v;
                this.isOpenChange.emit(v);
            },
            enumerable: false,
            configurable: true
        });
        CollapsibleCardComponent.prototype.ngOnDestroy = function () {
            if (this.bbCollapsibleAccordion) {
                this.bbCollapsibleAccordion.unregisterNestedPanel(this);
            }
        };
        CollapsibleCardComponent.prototype.toggle = function () {
            this.isOpen = !this.isOpen;
        };
        return CollapsibleCardComponent;
    }());
    CollapsibleCardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleCardComponent, deps: [{ token: i1__namespace.CollapsibleAccordionComponent, host: true, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CollapsibleCardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CollapsibleCardComponent, selector: "bb-collapsible-card-ui", inputs: { isOpen: "isOpen", ariaLabelForIcon: "ariaLabelForIcon", ariaLabel: ["aria-label", "ariaLabel"], hasChevron: "hasChevron", highlight: "highlight", shadow: "shadow", size: "size" }, outputs: { isOpenChange: "isOpenChange" }, ngImport: i0__namespace, template: "<bb-collapsible-ui\n  [(isOpen)]=\"isOpen\"\n  class=\"bb-card bb-card--collapsible bb-card--{{ size }}\"\n  [ngClass]=\"{\n    'bb-card--highlight': highlight,\n    'bb-card--shadowless': !shadow\n  }\"\n>\n  <ng-template bbCollapsibleHeader let-toggle=\"toggle\">\n    <div\n      data-role=\"bb-collapsible-card-header\"\n      class=\"bb-card__header bb-card__header--only-child\"\n      role=\"button\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-expanded]=\"isOpen\"\n      tabindex=\"0\"\n      (bbKeyboardClick)=\"toggle()\"\n    >\n      <div class=\"bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--fill\"><ng-content select=\"[bbCollapsibleTitle]\"></ng-content></div>\n        <bb-icon-ui\n          [aria-label]=\"ariaLabelForIcon\"\n          *ngIf=\"hasChevron\"\n          class=\"bb-stack__item\"\n          name=\"{{ isOpen ? 'expand-less' : 'expand-more' }}\"\n          data-role=\"bb-collapsible-card-header__icon\"\n        ></bb-icon-ui>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template bbCollapsibleBody>\n    <div class=\"bb-card__body\" data-role=\"bb-collapsible-card-body\">\n      <ng-content select=\"[bbCollapsibleBody]\"></ng-content>\n    </div>\n  </ng-template>\n</bb-collapsible-ui>\n", components: [{ type: i2__namespace.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i3__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i5__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleCardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-collapsible-card-ui',
                        templateUrl: 'collapsible-card.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.CollapsibleAccordionComponent, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Host
                        }] }];
        }, propDecorators: { isOpen: [{
                    type: i0.Input
                }], ariaLabelForIcon: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input,
                    args: ['aria-label']
                }], hasChevron: [{
                    type: i0.Input
                }], highlight: [{
                    type: i0.Input
                }], shadow: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }], isOpenChange: [{
                    type: i0.Output
                }] } });

    var CollapsibleCardModule = /** @class */ (function () {
        function CollapsibleCardModule() {
        }
        return CollapsibleCardModule;
    }());
    CollapsibleCardModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleCardModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CollapsibleCardModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleCardModule, declarations: [CollapsibleCardComponent], imports: [i2.CollapsibleModule, i4.CommonModule, i3.IconModule, i5.KeyboardClickModule], exports: [CollapsibleCardComponent] });
    CollapsibleCardModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleCardModule, imports: [[i2.CollapsibleModule, i4.CommonModule, i3.IconModule, i5.KeyboardClickModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CollapsibleCardModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CollapsibleModule, i4.CommonModule, i3.IconModule, i5.KeyboardClickModule],
                        declarations: [CollapsibleCardComponent],
                        exports: [CollapsibleCardComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CollapsibleCardComponent = CollapsibleCardComponent;
    exports.CollapsibleCardModule = CollapsibleCardModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-collapsible-card.umd.js.map
