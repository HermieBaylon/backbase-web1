(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@backbase/ui-ang/loading-indicator', ['exports', '@angular/common', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["ui-ang"] = global.backbase["ui-ang"] || {}, global.backbase["ui-ang"]["loading-indicator"] = {}), global.ng.common, global.ng.core));
})(this, (function (exports, i1, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * @name LoadingIndicatorComponent
     *
     * @description
     * Component that displays a loading spinner and message.
     */
    var LoadingIndicatorComponent = /** @class */ (function () {
        function LoadingIndicatorComponent(ref) {
            this.ref = ref;
            /**
             * The size of the loading indicator.
             * Defaults to 'md'.
             */
            this.loaderSize = 'md';
            /**
             * Delay in milliseconds before the loading indicator display.
             * Default to 0.
             */
            this.showDelay = 0;
            /**
             * Defines whether gray background should be displayed.
             * Default to false (background hidden).
             */
            this.hasBackground = false;
            /**
             * Define if spinner should be shown inline without any default padding and margin.
             * Default to false (show default padding and margin).
             */
            this.inline = false;
            this.showLoadingState = false;
        }
        LoadingIndicatorComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.showLoadingState = true;
                _this.ref.markForCheck();
            }, this.showDelay);
        };
        return LoadingIndicatorComponent;
    }());
    LoadingIndicatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LoadingIndicatorComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    LoadingIndicatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: { text: "text", loaderSize: "loaderSize", showDelay: "showDelay", hasBackground: "hasBackground", inline: "inline" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!inline; else inlineLoading\">\n  <div\n    *ngIf=\"showLoadingState\"\n    [ngClass]=\"{ jumbotron: hasBackground }\"\n    data-role=\"loading-indicator\"\n    class=\"bb-state-container\"\n  >\n    <ng-container *ngTemplateOutlet=\"loadingIndicator\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-template #inlineLoading>\n  <ng-container *ngIf=\"showLoadingState\">\n    <ng-container *ngTemplateOutlet=\"loadingIndicator\"></ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #loadingIndicator>\n  <div\n    data-role=\"loading-indicator-wrapper\"\n    class=\"bb-loading-indicator bb-loading-indicator--{{ loaderSize }}\"\n    [ngClass]=\"{ 'bb-loading-indicator--inline': inline }\"\n  >\n    <svg\n      aria-label=\"Loading indicator\"\n      i18n-aria-label=\"Loading indicator| Label for the loading indicator @@bb-loading-indicator-ui.indicator\"\n      class=\"bb-loading-indicator__circle\"\n      preserveAspectRatio=\"xMinYMin meet\"\n    >\n      <circle class=\"bb-loading-indicator__path\" r=\"40%\" cx=\"50%\" cy=\"50%\" fill=\"none\" stroke=\"currentColor\"></circle>\n    </svg>\n    <div *ngIf=\"text\" data-role=\"loading-indicator-text\" class=\"bb-loading-indicator__text\">{{ text }}</div>\n  </div>\n</ng-template>\n", directives: [{ type: i1__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LoadingIndicatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-loading-indicator-ui',
                        templateUrl: './loading-indicator.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { text: [{
                    type: i0.Input
                }], loaderSize: [{
                    type: i0.Input
                }], showDelay: [{
                    type: i0.Input
                }], hasBackground: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }] } });

    var LoadingIndicatorModule = /** @class */ (function () {
        function LoadingIndicatorModule() {
        }
        return LoadingIndicatorModule;
    }());
    LoadingIndicatorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LoadingIndicatorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    LoadingIndicatorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LoadingIndicatorModule, declarations: [LoadingIndicatorComponent], imports: [i1.CommonModule], exports: [LoadingIndicatorComponent] });
    LoadingIndicatorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LoadingIndicatorModule, imports: [[i1.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LoadingIndicatorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1.CommonModule],
                        declarations: [LoadingIndicatorComponent],
                        exports: [LoadingIndicatorComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LoadingIndicatorComponent = LoadingIndicatorComponent;
    exports.LoadingIndicatorModule = LoadingIndicatorModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-ui-ang-loading-indicator.umd.js.map
