import { EventEmitter, OnDestroy } from '@angular/core';
import { CollapsibleAccordionComponent, ICollapsible } from '@backbase/ui-ang/collapsible-accordion';
import * as i0 from "@angular/core";
export declare type CollapsibleCardSize = 'sm' | 'md' | 'lg';
/**
 * @name CollapsibleCardComponent
 *
 * @description
 * Provides an expandable details-summary/body-header view.
 * Uses bb-collapsible-ui for a predefined template
 *
 * @a11y ariaLabelForIcon is discernible text for chevron icon
 */
export declare class CollapsibleCardComponent implements ICollapsible, OnDestroy {
    private readonly bbCollapsibleAccordion;
    private open;
    /**
     * Toggles the content.
     */
    set isOpen(v: boolean);
    get isOpen(): boolean;
    /**
     * Accessible label for chevron icon.
     */
    ariaLabelForIcon: string;
    /**
     * Accessible label for collapsible card
     */
    ariaLabel: string | null;
    /**
     * Whether chevron should be displayed.
     *
     * @default true
     */
    hasChevron: boolean;
    /**
     * Whether card should be highlighted.
     *
     * @default false
     */
    highlight: boolean;
    /**
     * Whether card should has shadow effect.
     *
     * @default true
     */
    shadow: boolean;
    /**
     * Card size
     *
     * @default 'md'
     */
    size: CollapsibleCardSize;
    isOpenChange: EventEmitter<boolean>;
    constructor(bbCollapsibleAccordion: CollapsibleAccordionComponent);
    ngOnDestroy(): void;
    toggle(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CollapsibleCardComponent, [{ optional: true; host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CollapsibleCardComponent, "bb-collapsible-card-ui", never, { "isOpen": "isOpen"; "ariaLabelForIcon": "ariaLabelForIcon"; "ariaLabel": "aria-label"; "hasChevron": "hasChevron"; "highlight": "highlight"; "shadow": "shadow"; "size": "size"; }, { "isOpenChange": "isOpenChange"; }, never, ["[bbCollapsibleTitle]", "[bbCollapsibleBody]"]>;
}
