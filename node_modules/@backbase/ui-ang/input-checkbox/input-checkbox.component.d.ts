import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';
import { InputBaseComponent } from '@backbase/ui-ang/base-classes';
import { NgControl } from '@angular/forms';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import * as i0 from "@angular/core";
/**
 * @name InputCheckboxComponent
 *
 * @description
 * Component that displays a checkbox input.
 */
export declare class InputCheckboxComponent extends InputBaseComponent {
    protected readonly cd: ChangeDetectorRef;
    protected readonly el: ElementRef;
    protected readonly deprecationsService: DeprecationsService;
    parentFormControl: NgControl;
    /**
     * The native `<input type="checkbox">` element
     */
    inputElement?: ElementRef<HTMLInputElement>;
    /**
     * Event emitted when the checkbox's `indeterminate` value changes.
     */
    readonly indeterminateChange: EventEmitter<boolean>;
    /**
     * The value that represents indeterminate state of checkbox
     */
    get indeterminate(): boolean;
    set indeterminate(value: boolean);
    private indeterminateValue;
    constructor(cd: ChangeDetectorRef, el: ElementRef, deprecationsService: DeprecationsService, parentFormControl: NgControl);
    onValueChange(): void;
    setFocus(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputCheckboxComponent, [null, null, null, { optional: true; self: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<InputCheckboxComponent, "bb-input-checkbox-ui", never, { "indeterminate": "indeterminate"; }, { "indeterminateChange": "indeterminateChange"; }, never, ["*"]>;
}
