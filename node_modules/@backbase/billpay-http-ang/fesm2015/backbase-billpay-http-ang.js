import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const BILLPAY_BASE_PATH = new InjectionToken('BILLPAY_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class BillpayConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module BillpayConfiguration');

class BillpayApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('BillpayApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: BillpayApiModule,
            providers: [{ provide: BillpayConfiguration, useFactory: configurationFactory }]
        };
    }
}
BillpayApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayApiModule, deps: [{ token: BillpayApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: BillpayConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
BillpayApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayApiModule });
BillpayApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillpayApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: BillpayApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: BillpayConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class BillPayAccountsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getBillPayAccounts(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/accounts`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayAccountsUrl() {
        return `${this.configuration.basePath}/client-api/v2/bill-pay/accounts`;
    }
}
BillPayAccountsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayAccountsService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayAccountsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayAccountsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayAccountsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayAccountsServiceGetBillPayAccountsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/accounts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "accounts": [{
                            "id": "1",
                            "accountNumber": "000000001",
                            "accountNickName": "Joint Account",
                            "accountType": "CHECKING_ACCOUNT",
                            "routingNumber": "000000011",
                            "accountBalance": {
                                "amount": "1000.01",
                                "currencyCode": "USD"
                            }
                        }, {
                            "id": "2",
                            "accountNumber": "000000002",
                            "accountType": "SAVINGS_ACCOUNT",
                            "routingNumber": "000000022"
                        }, {
                            "accountNumber": "000000003",
                            "accountType": "CHECKING_ACCOUNT",
                            "routingNumber": "000000033",
                            "accountBalance": {
                                "amount": "1000.03",
                                "currencyCode": "USD"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayAccountsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/accounts",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "accounts": [{
                            "id": "1",
                            "accountNumber": "000000001",
                            "accountNickName": "Joint Account",
                            "accountType": "CHECKING_ACCOUNT",
                            "routingNumber": "000000011",
                            "accountBalance": {
                                "amount": "1000.01",
                                "currencyCode": "USD"
                            }
                        }, {
                            "id": "2",
                            "accountNumber": "000000002",
                            "accountType": "SAVINGS_ACCOUNT",
                            "routingNumber": "000000022"
                        }, {
                            "accountNumber": "000000003",
                            "accountType": "CHECKING_ACCOUNT",
                            "routingNumber": "000000033",
                            "accountBalance": {
                                "amount": "1000.03",
                                "currencyCode": "USD"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPayAutopayService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteBillPayAutopay(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBillPayAutopay.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/autopay`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBillPayAutopayUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBillPayAutopay.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/autopay`;
    }
    putBillPayAutopay(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putBillPayAutopay.');
        }
        const _billPayAutopayPutRequestBody = requestParameters["billPayAutopayPutRequestBody"];
        if (_billPayAutopayPutRequestBody === null || _billPayAutopayPutRequestBody === undefined) {
            throw new Error('Required parameter billPayAutopayPutRequestBody was null or undefined when calling putBillPayAutopay.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/autopay`, _billPayAutopayPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBillPayAutopayUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putBillPayAutopay.');
        }
        const _billPayAutopayPutRequestBody = requestParameters["billPayAutopayPutRequestBody"];
        if (_billPayAutopayPutRequestBody === null || _billPayAutopayPutRequestBody === undefined) {
            throw new Error('Required parameter billPayAutopayPutRequestBody was null or undefined when calling putBillPayAutopay.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/autopay`;
    }
}
BillPayAutopayService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayAutopayService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayAutopayService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayAutopayService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayAutopayService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayAutopayServiceDeleteBillPayAutopayMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/autopay",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayAutopayServicePutBillPayAutopayMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/autopay",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayAutopayServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/autopay",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/autopay",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPayEbillsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteBillPayEbills(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBillPayEbills.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBillPayEbillsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBillPayEbills.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills`;
    }
    getBillPayEbillStatements(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling getBillPayEbillStatements.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbillStatements.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/pdf',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}/statements`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayEbillStatementsUrl(requestParameters) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling getBillPayEbillStatements.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbillStatements.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}/statements`;
    }
    getBillPayEbills(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbills.');
        }
        const _status = requestParameters["status"];
        if (_status === null || _status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getBillPayEbills.');
        }
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayEbillsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbills.');
        }
        const _status = requestParameters["status"];
        if (_status === null || _status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getBillPayEbills.');
        }
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills${queryString ? `?${queryString}` : ''}`;
    }
    putEbillById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling putEbillById.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEbillById.');
        }
        const _ebillByIdPutRequestBody = requestParameters["ebillByIdPutRequestBody"];
        if (_ebillByIdPutRequestBody === null || _ebillByIdPutRequestBody === undefined) {
            throw new Error('Required parameter ebillByIdPutRequestBody was null or undefined when calling putEbillById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}`, _ebillByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putEbillByIdUrl(requestParameters) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling putEbillById.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEbillById.');
        }
        const _ebillByIdPutRequestBody = requestParameters["ebillByIdPutRequestBody"];
        if (_ebillByIdPutRequestBody === null || _ebillByIdPutRequestBody === undefined) {
            throw new Error('Required parameter ebillByIdPutRequestBody was null or undefined when calling putEbillById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}`;
    }
}
BillPayEbillsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEbillsService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayEbillsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEbillsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEbillsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayEbillsServiceDeleteBillPayEbillsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayEbillsServiceGetBillPayEbillStatementsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills/{ebillId}/statements",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayEbillsServiceGetBillPayEbillsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "ebills": [{
                            "id": "20141219140239655592",
                            "payeeID": "0001",
                            "paymentDate": "2019-04-01",
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "minAmountDue": {
                                "amount": "20.50",
                                "currencyCode": "USD"
                            },
                            "outstandingBalance": {
                                "amount": "101.98",
                                "currencyCode": "USD"
                            },
                            "status": "UNPAID",
                            "statementAvailable": true
                        }, {
                            "id": "20141219140239655591",
                            "payeeID": "0001",
                            "paymentDate": "2019-03-01",
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "minAmountDue": {
                                "amount": "20.50",
                                "currencyCode": "USD"
                            },
                            "outstandingBalance": {
                                "amount": "201.98",
                                "currencyCode": "USD"
                            },
                            "status": "PAID",
                            "statementAvailable": true,
                            "paymentId": "abc0192802"
                        }, {
                            "id": "20141219140239655590",
                            "payeeID": "0001",
                            "paymentDate": "2019-02-01",
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "minAmountDue": {
                                "amount": "20.50",
                                "currencyCode": "USD"
                            },
                            "outstandingBalance": {
                                "amount": "301.98",
                                "currencyCode": "USD"
                            },
                            "status": "PAID",
                            "url": "http://my.ebill.pdf",
                            "statementAvailable": false
                        }],
                    "totalCount": 3
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayEbillsServicePutEbillByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills/{ebillId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayEbillsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills/{ebillId}/statements",
        method: "GET",
        responses: [
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "ebills": [{
                            "id": "20141219140239655592",
                            "payeeID": "0001",
                            "paymentDate": "2019-04-01",
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "minAmountDue": {
                                "amount": "20.50",
                                "currencyCode": "USD"
                            },
                            "outstandingBalance": {
                                "amount": "101.98",
                                "currencyCode": "USD"
                            },
                            "status": "UNPAID",
                            "statementAvailable": true
                        }, {
                            "id": "20141219140239655591",
                            "payeeID": "0001",
                            "paymentDate": "2019-03-01",
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "minAmountDue": {
                                "amount": "20.50",
                                "currencyCode": "USD"
                            },
                            "outstandingBalance": {
                                "amount": "201.98",
                                "currencyCode": "USD"
                            },
                            "status": "PAID",
                            "statementAvailable": true,
                            "paymentId": "abc0192802"
                        }, {
                            "id": "20141219140239655590",
                            "payeeID": "0001",
                            "paymentDate": "2019-02-01",
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "minAmountDue": {
                                "amount": "20.50",
                                "currencyCode": "USD"
                            },
                            "outstandingBalance": {
                                "amount": "301.98",
                                "currencyCode": "USD"
                            },
                            "status": "PAID",
                            "url": "http://my.ebill.pdf",
                            "statementAvailable": false
                        }],
                    "totalCount": 3
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}/ebills/{ebillId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPayEnrolmentService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getBillPayEnrolment(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/enrolment`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayEnrolmentUrl() {
        return `${this.configuration.basePath}/client-api/v2/bill-pay/enrolment`;
    }
    postBillPayEnrolment(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/enrolment`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayEnrolmentUrl() {
        return `${this.configuration.basePath}/client-api/v2/bill-pay/enrolment`;
    }
}
BillPayEnrolmentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayEnrolmentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEnrolmentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayEnrolmentServiceGetBillPayEnrolmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/enrolment",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "enrolment": {
                        "enrolled": true
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayEnrolmentServicePostBillPayEnrolmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/enrolment",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayEnrolmentServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/enrolment",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "enrolment": {
                        "enrolled": true
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/enrolment",
        method: "POST",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPayPayeesService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteElectronicPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteElectronicPayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deleteElectronicPayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteElectronicPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteElectronicPayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deleteElectronicPayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;
    }
    deletePayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deletePayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deletePayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;
    }
    getElectronicPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getElectronicPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getElectronicPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getElectronicPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`;
    }
    getPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`;
    }
    postBillPayElectronicPayees(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayElectronicPayeesPostRequestBody = requestParameters["billPayElectronicPayeesPostRequestBody"];
        if (_billPayElectronicPayeesPostRequestBody === null || _billPayElectronicPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayElectronicPayeesPostRequestBody was null or undefined when calling postBillPayElectronicPayees.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic`, _billPayElectronicPayeesPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayElectronicPayeesUrl(requestParameters) {
        const _billPayElectronicPayeesPostRequestBody = requestParameters["billPayElectronicPayeesPostRequestBody"];
        if (_billPayElectronicPayeesPostRequestBody === null || _billPayElectronicPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayElectronicPayeesPostRequestBody was null or undefined when calling postBillPayElectronicPayees.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic`;
    }
    postBillPayPayees(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayPayeesPostRequestBody = requestParameters["billPayPayeesPostRequestBody"];
        if (_billPayPayeesPostRequestBody === null || _billPayPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayeesPostRequestBody was null or undefined when calling postBillPayPayees.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payees`, _billPayPayeesPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayPayeesUrl(requestParameters) {
        const _billPayPayeesPostRequestBody = requestParameters["billPayPayeesPostRequestBody"];
        if (_billPayPayeesPostRequestBody === null || _billPayPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayeesPostRequestBody was null or undefined when calling postBillPayPayees.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees`;
    }
    putElectronicPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putElectronicPayeeById.');
        }
        const _electronicPayeeByIdPutRequestBody = requestParameters["electronicPayeeByIdPutRequestBody"];
        if (_electronicPayeeByIdPutRequestBody === null || _electronicPayeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter electronicPayeeByIdPutRequestBody was null or undefined when calling putElectronicPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`, _electronicPayeeByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putElectronicPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putElectronicPayeeById.');
        }
        const _electronicPayeeByIdPutRequestBody = requestParameters["electronicPayeeByIdPutRequestBody"];
        if (_electronicPayeeByIdPutRequestBody === null || _electronicPayeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter electronicPayeeByIdPutRequestBody was null or undefined when calling putElectronicPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`;
    }
    putPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putPayeeById.');
        }
        const _payeeByIdPutRequestBody = requestParameters["payeeByIdPutRequestBody"];
        if (_payeeByIdPutRequestBody === null || _payeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter payeeByIdPutRequestBody was null or undefined when calling putPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`, _payeeByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putPayeeById.');
        }
        const _payeeByIdPutRequestBody = requestParameters["payeeByIdPutRequestBody"];
        if (_payeeByIdPutRequestBody === null || _payeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter payeeByIdPutRequestBody was null or undefined when calling putPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`;
    }
}
BillPayPayeesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayPayeesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayPayeesServiceDeleteElectronicPayeeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServiceDeletePayeeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServiceGetElectronicPayeeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payee": {
                        "id": "123456789",
                        "name": "Backbase",
                        "nickName": "My Backbase",
                        "accountNumber": "987654321",
                        "paymentServices": [{
                                "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-26",
                                "nextPaymentDate": "2019-02-27",
                                "paymentServiceType": "REGULAR_PAYMENT"
                            }, {
                                "cutoffTime": "2019-02-18T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-19",
                                "nextPaymentDate": "2019-02-20",
                                "paymentServiceType": "OVERNIGHT_CHECK",
                                "deliveryDays": 3,
                                "fee": {
                                    "amount": "9.99",
                                    "currencyCode": "USD"
                                }
                            }],
                        "ebill": {
                            "capable": true,
                            "enabled": true,
                            "status": "ACTIVE",
                            "latestBill": {
                                "id": "20141219140239655590",
                                "amount": {
                                    "amount": "100.99",
                                    "currencyCode": "USD"
                                },
                                "minAmountDue": {
                                    "amount": "20.50",
                                    "currencyCode": "USD"
                                },
                                "outstandingBalance": {
                                    "amount": "201.98",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-03-01",
                                "status": "PAID",
                                "url": "http://my.ebill.pdf",
                                "statementAvailable": false,
                                "paymentId": "abc0192802"
                            },
                            "autopay": {
                                "paymentAccount": {
                                    "accountNumber": "11111111",
                                    "routingNumber": "000000022",
                                    "accountType": "SAVINGS_ACCOUNT",
                                    "accountNickName": "Current Account"
                                },
                                "daysBeforePayOn": 3,
                                "maxPaymentAmount": {
                                    "amount": "123",
                                    "currencyCode": "USD"
                                },
                                "payOn": "BILL_ARRIVAL",
                                "payAmount": "FULL_AMOUNT",
                                "paymentScheduledAlert": false,
                                "paymentSentAlert": true,
                                "paymentCompleteAlert": true
                            }
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServiceGetPayeeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payee": {
                        "id": "1",
                        "name": "Backbase",
                        "phoneNumber": "2345678901",
                        "address": {
                            "state": "SD",
                            "city": "SIOUX FALLS",
                            "address1": "PO BOX 6001",
                            "postalCode": "12345"
                        },
                        "overnightDeliveryAddress": {
                            "state": "FL",
                            "city": "Saint Petersburg",
                            "address1": "560 Carillon Parkway",
                            "postalCode": "33717"
                        },
                        "paymentServices": [{
                                "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-26",
                                "nextPaymentDate": "2019-02-27",
                                "paymentServiceType": "REGULAR_PAYMENT"
                            }, {
                                "cutoffTime": "2019-02-21T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-22",
                                "nextPaymentDate": "2019-02-25",
                                "paymentServiceType": "OVERNIGHT_CHECK",
                                "deliveryDays": 3,
                                "fee": {
                                    "amount": "9.99",
                                    "currencyCode": "USD"
                                }
                            }]
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServicePostBillPayElectronicPayeesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServicePostBillPayPayeesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServicePutElectronicPayeeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServicePutPayeeByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payee": {
                        "id": "123456789",
                        "name": "Backbase",
                        "nickName": "My Backbase",
                        "accountNumber": "987654321",
                        "paymentServices": [{
                                "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-26",
                                "nextPaymentDate": "2019-02-27",
                                "paymentServiceType": "REGULAR_PAYMENT"
                            }, {
                                "cutoffTime": "2019-02-18T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-19",
                                "nextPaymentDate": "2019-02-20",
                                "paymentServiceType": "OVERNIGHT_CHECK",
                                "deliveryDays": 3,
                                "fee": {
                                    "amount": "9.99",
                                    "currencyCode": "USD"
                                }
                            }],
                        "ebill": {
                            "capable": true,
                            "enabled": true,
                            "status": "ACTIVE",
                            "latestBill": {
                                "id": "20141219140239655590",
                                "amount": {
                                    "amount": "100.99",
                                    "currencyCode": "USD"
                                },
                                "minAmountDue": {
                                    "amount": "20.50",
                                    "currencyCode": "USD"
                                },
                                "outstandingBalance": {
                                    "amount": "201.98",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-03-01",
                                "status": "PAID",
                                "url": "http://my.ebill.pdf",
                                "statementAvailable": false,
                                "paymentId": "abc0192802"
                            },
                            "autopay": {
                                "paymentAccount": {
                                    "accountNumber": "11111111",
                                    "routingNumber": "000000022",
                                    "accountType": "SAVINGS_ACCOUNT",
                                    "accountNickName": "Current Account"
                                },
                                "daysBeforePayOn": 3,
                                "maxPaymentAmount": {
                                    "amount": "123",
                                    "currencyCode": "USD"
                                },
                                "payOn": "BILL_ARRIVAL",
                                "payAmount": "FULL_AMOUNT",
                                "paymentScheduledAlert": false,
                                "paymentSentAlert": true,
                                "paymentCompleteAlert": true
                            }
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payee": {
                        "id": "1",
                        "name": "Backbase",
                        "phoneNumber": "2345678901",
                        "address": {
                            "state": "SD",
                            "city": "SIOUX FALLS",
                            "address1": "PO BOX 6001",
                            "postalCode": "12345"
                        },
                        "overnightDeliveryAddress": {
                            "state": "FL",
                            "city": "Saint Petersburg",
                            "address1": "560 Carillon Parkway",
                            "postalCode": "33717"
                        },
                        "paymentServices": [{
                                "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-26",
                                "nextPaymentDate": "2019-02-27",
                                "paymentServiceType": "REGULAR_PAYMENT"
                            }, {
                                "cutoffTime": "2019-02-21T15:00:00.000-04:00",
                                "earliestPaymentDate": "2019-02-22",
                                "nextPaymentDate": "2019-02-25",
                                "paymentServiceType": "OVERNIGHT_CHECK",
                                "deliveryDays": 3,
                                "fee": {
                                    "amount": "9.99",
                                    "currencyCode": "USD"
                                }
                            }]
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/electronic/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payees/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPayPayeesSummaryService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getBillPayPayeesSummary(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees-summary`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayPayeesSummaryUrl() {
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees-summary`;
    }
}
BillPayPayeesSummaryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesSummaryService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayPayeesSummaryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesSummaryService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesSummaryService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayPayeesSummaryServiceGetBillPayPayeesSummaryMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees-summary",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payeeSummaries": [{
                            "id": "0001",
                            "name": "Citibank",
                            "nickName": "My Bank",
                            "accountNumber": "246895317",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "nextPayment": {
                                "amount": {
                                    "amount": "100.99",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-02-22",
                                "recurring": false,
                                "automaticPayment": true,
                                "fee": {
                                    "amount": "9.99",
                                    "currencyCode": "USD"
                                }
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-02-21T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-02-22",
                                    "nextPaymentDate": "2019-02-25",
                                    "paymentServiceType": "EXPEDITED_PAYMENT",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "9.99",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-02-26",
                                    "nextPaymentDate": "2019-02-27",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "ACTIVE",
                                "latestBill": {
                                    "id": "20141219140239655590",
                                    "amount": {
                                        "amount": "100.99",
                                        "currencyCode": "USD"
                                    },
                                    "minAmountDue": {
                                        "amount": "20.50",
                                        "currencyCode": "USD"
                                    },
                                    "outstandingBalance": {
                                        "amount": "201.98",
                                        "currencyCode": "USD"
                                    },
                                    "paymentDate": "2019-03-01",
                                    "status": "PAID",
                                    "url": "http://my.ebill.pdf",
                                    "statementAvailable": false,
                                    "paymentId": "abc0192802"
                                },
                                "autopay": {
                                    "paymentAccount": {
                                        "accountNumber": "11111111",
                                        "routingNumber": "000000022",
                                        "accountType": "SAVINGS_ACCOUNT",
                                        "accountNickName": "Current Account"
                                    },
                                    "daysBeforePayOn": 3,
                                    "maxPaymentAmount": {
                                        "amount": "123",
                                        "currencyCode": "USD"
                                    },
                                    "payOn": "BILL_ARRIVAL",
                                    "payAmount": "FULL_AMOUNT",
                                    "paymentScheduledAlert": false,
                                    "paymentSentAlert": true,
                                    "paymentCompleteAlert": true
                                }
                            },
                            "overnightDeliveryAddress": {
                                "state": "FL",
                                "city": "Saint Petersburg",
                                "address1": "560 Carillon Parkway",
                                "postalCode": "33717"
                            }
                        }, {
                            "id": "0002",
                            "name": "Electric Company",
                            "accountNumber": "78641258",
                            "electronic": true,
                            "hasRecurringPayments": true,
                            "nextPayment": {
                                "amount": {
                                    "amount": "101.99",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-02-28",
                                "recurring": true,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-02-26",
                                    "nextPaymentDate": "2019-02-27",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "UPDATE_CREDENTIALS"
                            }
                        }, {
                            "id": "0003",
                            "name": "John Doe",
                            "electronic": false,
                            "hasRecurringPayments": false,
                            "paymentServices": [{
                                    "cutoffTime": "2019-03-04T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-05",
                                    "nextPaymentDate": "2019-03-06",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }]
                        }, {
                            "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "Gas Company",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "nextPayment": {
                                "amount": {
                                    "amount": "20.99",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-03-20",
                                "recurring": false,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-03-21T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-22",
                                    "nextPaymentDate": "2019-03-25",
                                    "paymentServiceType": "EXPEDITED_PAYMENT",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "0",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-03-27T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-28",
                                    "nextPaymentDate": "2019-03-29",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "ACTIVE"
                            }
                        }, {
                            "id": "31315694",
                            "name": "Somewhat Wireless",
                            "nickName": "Internet",
                            "accountNumber": "152236988",
                            "electronic": true,
                            "hasRecurringPayments": true,
                            "paymentServices": [{
                                    "cutoffTime": "2019-10-08T06:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-10-08",
                                    "nextPaymentDate": "2019-10-09",
                                    "paymentServiceType": "REGULAR_PAYMENT",
                                    "deliveryDays": 1
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "USER_ACTION"
                            }
                        }, {
                            "id": "31315661",
                            "name": "Outer Rim Supply Co.",
                            "accountNumber": "152236978",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "paymentServices": [{
                                    "cutoffTime": "2019-10-08T06:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-10-08",
                                    "nextPaymentDate": "2019-10-09",
                                    "paymentServiceType": "REGULAR_PAYMENT",
                                    "deliveryDays": 1
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "ERROR"
                            }
                        }, {
                            "id": "0004",
                            "name": "Water Company",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "nextPayment": {
                                "amount": {
                                    "amount": "2001.89",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-03-14",
                                "recurring": false,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-03-11T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-12",
                                    "nextPaymentDate": "2019-03-13",
                                    "paymentServiceType": "OVERNIGHT_CHECK",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "9.99",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-03-18T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-19",
                                    "nextPaymentDate": "2019-03-20",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "overnightDeliveryAddress": {
                                "state": "FL",
                                "city": "Saint Petersburg",
                                "address1": "560 Carillon Parkway",
                                "postalCode": "33717"
                            },
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "NOT_SUPPORTED"
                            }
                        }, {
                            "id": "0005",
                            "name": "Phone Company",
                            "electronic": true,
                            "hasRecurringPayments": true,
                            "nextPayment": {
                                "amount": {
                                    "amount": "45.23",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-04-10",
                                "recurring": false,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-04-01T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-04-02",
                                    "nextPaymentDate": "2019-04-03",
                                    "paymentServiceType": "OVERNIGHT_CHECK",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "9.99",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-04-08T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-04-08",
                                    "nextPaymentDate": "2019-04-08",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": false
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayeesSummaryServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/payees-summary",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payeeSummaries": [{
                            "id": "0001",
                            "name": "Citibank",
                            "nickName": "My Bank",
                            "accountNumber": "246895317",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "nextPayment": {
                                "amount": {
                                    "amount": "100.99",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-02-22",
                                "recurring": false,
                                "automaticPayment": true,
                                "fee": {
                                    "amount": "9.99",
                                    "currencyCode": "USD"
                                }
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-02-21T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-02-22",
                                    "nextPaymentDate": "2019-02-25",
                                    "paymentServiceType": "EXPEDITED_PAYMENT",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "9.99",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-02-26",
                                    "nextPaymentDate": "2019-02-27",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "ACTIVE",
                                "latestBill": {
                                    "id": "20141219140239655590",
                                    "amount": {
                                        "amount": "100.99",
                                        "currencyCode": "USD"
                                    },
                                    "minAmountDue": {
                                        "amount": "20.50",
                                        "currencyCode": "USD"
                                    },
                                    "outstandingBalance": {
                                        "amount": "201.98",
                                        "currencyCode": "USD"
                                    },
                                    "paymentDate": "2019-03-01",
                                    "status": "PAID",
                                    "url": "http://my.ebill.pdf",
                                    "statementAvailable": false,
                                    "paymentId": "abc0192802"
                                },
                                "autopay": {
                                    "paymentAccount": {
                                        "accountNumber": "11111111",
                                        "routingNumber": "000000022",
                                        "accountType": "SAVINGS_ACCOUNT",
                                        "accountNickName": "Current Account"
                                    },
                                    "daysBeforePayOn": 3,
                                    "maxPaymentAmount": {
                                        "amount": "123",
                                        "currencyCode": "USD"
                                    },
                                    "payOn": "BILL_ARRIVAL",
                                    "payAmount": "FULL_AMOUNT",
                                    "paymentScheduledAlert": false,
                                    "paymentSentAlert": true,
                                    "paymentCompleteAlert": true
                                }
                            },
                            "overnightDeliveryAddress": {
                                "state": "FL",
                                "city": "Saint Petersburg",
                                "address1": "560 Carillon Parkway",
                                "postalCode": "33717"
                            }
                        }, {
                            "id": "0002",
                            "name": "Electric Company",
                            "accountNumber": "78641258",
                            "electronic": true,
                            "hasRecurringPayments": true,
                            "nextPayment": {
                                "amount": {
                                    "amount": "101.99",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-02-28",
                                "recurring": true,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-02-25T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-02-26",
                                    "nextPaymentDate": "2019-02-27",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "UPDATE_CREDENTIALS"
                            }
                        }, {
                            "id": "0003",
                            "name": "John Doe",
                            "electronic": false,
                            "hasRecurringPayments": false,
                            "paymentServices": [{
                                    "cutoffTime": "2019-03-04T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-05",
                                    "nextPaymentDate": "2019-03-06",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }]
                        }, {
                            "id": "0955e686-d31e-4216-b3dd-5d66161d536d",
                            "name": "Gas Company",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "nextPayment": {
                                "amount": {
                                    "amount": "20.99",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-03-20",
                                "recurring": false,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-03-21T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-22",
                                    "nextPaymentDate": "2019-03-25",
                                    "paymentServiceType": "EXPEDITED_PAYMENT",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "0",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-03-27T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-28",
                                    "nextPaymentDate": "2019-03-29",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "ACTIVE"
                            }
                        }, {
                            "id": "31315694",
                            "name": "Somewhat Wireless",
                            "nickName": "Internet",
                            "accountNumber": "152236988",
                            "electronic": true,
                            "hasRecurringPayments": true,
                            "paymentServices": [{
                                    "cutoffTime": "2019-10-08T06:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-10-08",
                                    "nextPaymentDate": "2019-10-09",
                                    "paymentServiceType": "REGULAR_PAYMENT",
                                    "deliveryDays": 1
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "USER_ACTION"
                            }
                        }, {
                            "id": "31315661",
                            "name": "Outer Rim Supply Co.",
                            "accountNumber": "152236978",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "paymentServices": [{
                                    "cutoffTime": "2019-10-08T06:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-10-08",
                                    "nextPaymentDate": "2019-10-09",
                                    "paymentServiceType": "REGULAR_PAYMENT",
                                    "deliveryDays": 1
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "ERROR"
                            }
                        }, {
                            "id": "0004",
                            "name": "Water Company",
                            "electronic": true,
                            "hasRecurringPayments": false,
                            "nextPayment": {
                                "amount": {
                                    "amount": "2001.89",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-03-14",
                                "recurring": false,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-03-11T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-12",
                                    "nextPaymentDate": "2019-03-13",
                                    "paymentServiceType": "OVERNIGHT_CHECK",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "9.99",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-03-18T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-03-19",
                                    "nextPaymentDate": "2019-03-20",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "overnightDeliveryAddress": {
                                "state": "FL",
                                "city": "Saint Petersburg",
                                "address1": "560 Carillon Parkway",
                                "postalCode": "33717"
                            },
                            "ebill": {
                                "capable": true,
                                "enabled": true,
                                "status": "NOT_SUPPORTED"
                            }
                        }, {
                            "id": "0005",
                            "name": "Phone Company",
                            "electronic": true,
                            "hasRecurringPayments": true,
                            "nextPayment": {
                                "amount": {
                                    "amount": "45.23",
                                    "currencyCode": "USD"
                                },
                                "paymentDate": "2019-04-10",
                                "recurring": false,
                                "automaticPayment": false
                            },
                            "paymentServices": [{
                                    "cutoffTime": "2019-04-01T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-04-02",
                                    "nextPaymentDate": "2019-04-03",
                                    "paymentServiceType": "OVERNIGHT_CHECK",
                                    "deliveryDays": 3,
                                    "fee": {
                                        "amount": "9.99",
                                        "currencyCode": "USD"
                                    }
                                }, {
                                    "cutoffTime": "2019-04-08T15:00:00.000-04:00",
                                    "earliestPaymentDate": "2019-04-08",
                                    "nextPaymentDate": "2019-04-08",
                                    "paymentServiceType": "REGULAR_PAYMENT"
                                }],
                            "ebill": {
                                "capable": true,
                                "enabled": false
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPayPaymentsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deletePaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payments/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePaymentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments/${encodeURIComponent(String(_id))}`;
    }
    deleteRecurringPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRecurringPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteRecurringPaymentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRecurringPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring/${encodeURIComponent(String(_id))}`;
    }
    getBillPayPayments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _status = requestParameters["status"];
        if (_status === null || _status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getBillPayPayments.');
        }
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _payeeID = requestParameters["payeeID"];
        const _paymentType = requestParameters["paymentType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_payeeID !== undefined && _payeeID !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _payeeID, 'payeeID');
        }
        if (_paymentType !== undefined && _paymentType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentType, 'paymentType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayPaymentsUrl(requestParameters) {
        const _status = requestParameters["status"];
        if (_status === null || _status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getBillPayPayments.');
        }
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _payeeID = requestParameters["payeeID"];
        const _paymentType = requestParameters["paymentType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_payeeID !== undefined && _payeeID !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _payeeID, 'payeeID');
        }
        if (_paymentType !== undefined && _paymentType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentType, 'paymentType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments${queryString ? `?${queryString}` : ''}`;
    }
    getPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payments/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments/${encodeURIComponent(String(_id))}`;
    }
    getRecurringPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecurringPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getRecurringPaymentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecurringPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring/${encodeURIComponent(String(_id))}`;
    }
    postBillPayPayments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayPaymentsPostRequestBody = requestParameters["billPayPaymentsPostRequestBody"];
        if (_billPayPaymentsPostRequestBody === null || _billPayPaymentsPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPaymentsPostRequestBody was null or undefined when calling postBillPayPayments.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payments`, _billPayPaymentsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayPaymentsUrl(requestParameters) {
        const _billPayPaymentsPostRequestBody = requestParameters["billPayPaymentsPostRequestBody"];
        if (_billPayPaymentsPostRequestBody === null || _billPayPaymentsPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPaymentsPostRequestBody was null or undefined when calling postBillPayPayments.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments`;
    }
    postBillPayRecurringPayments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayRecurringPaymentsPostRequestBody = requestParameters["billPayRecurringPaymentsPostRequestBody"];
        if (_billPayRecurringPaymentsPostRequestBody === null || _billPayRecurringPaymentsPostRequestBody === undefined) {
            throw new Error('Required parameter billPayRecurringPaymentsPostRequestBody was null or undefined when calling postBillPayRecurringPayments.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring`, _billPayRecurringPaymentsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayRecurringPaymentsUrl(requestParameters) {
        const _billPayRecurringPaymentsPostRequestBody = requestParameters["billPayRecurringPaymentsPostRequestBody"];
        if (_billPayRecurringPaymentsPostRequestBody === null || _billPayRecurringPaymentsPostRequestBody === undefined) {
            throw new Error('Required parameter billPayRecurringPaymentsPostRequestBody was null or undefined when calling postBillPayRecurringPayments.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring`;
    }
    putPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putPaymentById.');
        }
        const _paymentByIdPutRequestBody = requestParameters["paymentByIdPutRequestBody"];
        if (_paymentByIdPutRequestBody === null || _paymentByIdPutRequestBody === undefined) {
            throw new Error('Required parameter paymentByIdPutRequestBody was null or undefined when calling putPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payments/${encodeURIComponent(String(_id))}`, _paymentByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putPaymentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putPaymentById.');
        }
        const _paymentByIdPutRequestBody = requestParameters["paymentByIdPutRequestBody"];
        if (_paymentByIdPutRequestBody === null || _paymentByIdPutRequestBody === undefined) {
            throw new Error('Required parameter paymentByIdPutRequestBody was null or undefined when calling putPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments/${encodeURIComponent(String(_id))}`;
    }
    putRecurringPaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putRecurringPaymentById.');
        }
        const _recurringPaymentByIdPutRequestBody = requestParameters["recurringPaymentByIdPutRequestBody"];
        if (_recurringPaymentByIdPutRequestBody === null || _recurringPaymentByIdPutRequestBody === undefined) {
            throw new Error('Required parameter recurringPaymentByIdPutRequestBody was null or undefined when calling putRecurringPaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring/${encodeURIComponent(String(_id))}`, _recurringPaymentByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putRecurringPaymentByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putRecurringPaymentById.');
        }
        const _recurringPaymentByIdPutRequestBody = requestParameters["recurringPaymentByIdPutRequestBody"];
        if (_recurringPaymentByIdPutRequestBody === null || _recurringPaymentByIdPutRequestBody === undefined) {
            throw new Error('Required parameter recurringPaymentByIdPutRequestBody was null or undefined when calling putRecurringPaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payments/recurring/${encodeURIComponent(String(_id))}`;
    }
}
BillPayPaymentsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentsService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayPaymentsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPaymentsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayPaymentsServiceDeletePaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServiceDeleteRecurringPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments/recurring/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServiceGetBillPayPaymentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payments": [{
                            "id": "8a9483495f058d2f015f058d366b0045",
                            "payeeID": "3",
                            "payeeName": "Soccer Shots",
                            "payeeNickName": "Kids Soccer",
                            "payeeElectronic": false,
                            "amount": {
                                "amount": "10.99",
                                "currencyCode": "USD"
                            },
                            "paymentDate": "2019-04-21",
                            "paymentAccount": {
                                "accountNumber": "11111111",
                                "routingNumber": "000000022",
                                "accountType": "SAVINGS_ACCOUNT",
                                "accountNickName": "Current Account"
                            },
                            "recurring": false,
                            "automaticPayment": false,
                            "status": "PENDING",
                            "fee": {
                                "amount": "9.99",
                                "currencyCode": "USD"
                            },
                            "ebillID": "20141219140239655590"
                        }, {
                            "id": "8a9483495f058d2f015f058d366a003c",
                            "payeeID": "4",
                            "payeeName": "Gas Bill",
                            "payeeAccountNumber": "100000001",
                            "payeeElectronic": true,
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "paymentDate": "2019-02-22",
                            "paymentAccount": {
                                "id": "1",
                                "accountNumber": "22222222",
                                "routingNumber": "000000033",
                                "accountType": "CHECKING_ACCOUNT"
                            },
                            "recurring": true,
                            "automaticPayment": false,
                            "frequency": "MONTHLY",
                            "numberOfInstances": 2,
                            "paymentScheduledAlert": true,
                            "paymentSentAlert": true,
                            "modelExpirationAlert": true,
                            "status": "FAILED"
                        }, {
                            "id": "8a9483a96dd476f1016dd476f7e8001c",
                            "payeeID": "2",
                            "payeeName": "The Republic",
                            "payeeAccountNumber": "12345O",
                            "payeeElectronic": true,
                            "amount": {
                                "amount": "200.99",
                                "currencyCode": "USD"
                            },
                            "paymentDate": "2018-11-23",
                            "paymentMemo": "Order #66",
                            "paymentAccount": {
                                "accountNumber": "100001001",
                                "accountNickName": "Joint Account",
                                "accountType": "CHECKING_ACCOUNT",
                                "routingNumber": "110001001"
                            },
                            "recurring": false,
                            "automaticPayment": true,
                            "paymentScheduledAlert": true,
                            "paymentSentAlert": true,
                            "modelExpirationAlert": true,
                            "status": "PROCESSED"
                        }],
                    "totalCount": 3
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServiceGetPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payment": {
                        "id": "8a9483495f058d2f015f058d366a003c",
                        "payeeID": "0002",
                        "payeeName": "Citibank",
                        "payeeAccountNumber": "100000001",
                        "payeeElectronic": false,
                        "amount": {
                            "amount": "100.99",
                            "currencyCode": "USD"
                        },
                        "paymentDate": "2019-02-22",
                        "paymentAccount": {
                            "id": "1",
                            "accountNumber": "000000001",
                            "routingNumber": "000000011",
                            "accountType": "CHECKING_ACCOUNT"
                        },
                        "recurring": false,
                        "automaticPayment": false,
                        "status": "PENDING",
                        "fee": {
                            "amount": "9.99",
                            "currencyCode": "USD"
                        },
                        "ebillID": "20141219140239655590"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServiceGetRecurringPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments/recurring/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payment": {
                        "id": "8a9483495f058d2f015f058d366a003c",
                        "payeeID": "0005",
                        "payeeName": "Citibank",
                        "payeeAccountNumber": "100000001",
                        "payeeElectronic": true,
                        "amount": {
                            "amount": "100.99",
                            "currencyCode": "USD"
                        },
                        "paymentDate": "2019-02-22",
                        "paymentAccount": {
                            "id": "1",
                            "accountNumber": "000000001",
                            "routingNumber": "000000011",
                            "accountType": "CHECKING_ACCOUNT"
                        },
                        "paymentMemo": "Here is some money",
                        "recurring": true,
                        "frequency": "MONTHLY",
                        "numberOfInstances": 2,
                        "paymentScheduledAlert": true,
                        "paymentSentAlert": true,
                        "modelExpirationAlert": true,
                        "status": "PENDING"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServicePostBillPayPaymentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "payments": [{
                            "payeeID": "payee1",
                            "paymentID": "payment1",
                            "errors": []
                        }, {
                            "payeeID": "payee2",
                            "paymentID": "payment2",
                            "errors": []
                        }, {
                            "payeeID": "payee3",
                            "errors": [{
                                    "message": "Invalid next payment date",
                                    "key": "billpay.api.invalidNextPaymentDate"
                                }, {
                                    "message": "Payment already exists",
                                    "key": "billpay.api.paymentAlreadyExists"
                                }]
                        }, {
                            "payeeID": "payee4",
                            "paymentID": "payment4",
                            "errors": []
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [],
                    "payments": [{
                            "payeeID": "1",
                            "errors": [{
                                    "message": "The payee is invalid",
                                    "key": "billpay.api.invalidPayee"
                                }]
                        }, {
                            "payeeID": "2",
                            "errors": [{
                                    "message": "The payee is invalid",
                                    "key": "billpay.api.invalidPayee"
                                }]
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServicePostBillPayRecurringPaymentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments/recurring",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServicePutPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServicePutRecurringPaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payments/recurring/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPaymentsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/payments/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments/recurring/{id}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payments": [{
                            "id": "8a9483495f058d2f015f058d366b0045",
                            "payeeID": "3",
                            "payeeName": "Soccer Shots",
                            "payeeNickName": "Kids Soccer",
                            "payeeElectronic": false,
                            "amount": {
                                "amount": "10.99",
                                "currencyCode": "USD"
                            },
                            "paymentDate": "2019-04-21",
                            "paymentAccount": {
                                "accountNumber": "11111111",
                                "routingNumber": "000000022",
                                "accountType": "SAVINGS_ACCOUNT",
                                "accountNickName": "Current Account"
                            },
                            "recurring": false,
                            "automaticPayment": false,
                            "status": "PENDING",
                            "fee": {
                                "amount": "9.99",
                                "currencyCode": "USD"
                            },
                            "ebillID": "20141219140239655590"
                        }, {
                            "id": "8a9483495f058d2f015f058d366a003c",
                            "payeeID": "4",
                            "payeeName": "Gas Bill",
                            "payeeAccountNumber": "100000001",
                            "payeeElectronic": true,
                            "amount": {
                                "amount": "100.99",
                                "currencyCode": "USD"
                            },
                            "paymentDate": "2019-02-22",
                            "paymentAccount": {
                                "id": "1",
                                "accountNumber": "22222222",
                                "routingNumber": "000000033",
                                "accountType": "CHECKING_ACCOUNT"
                            },
                            "recurring": true,
                            "automaticPayment": false,
                            "frequency": "MONTHLY",
                            "numberOfInstances": 2,
                            "paymentScheduledAlert": true,
                            "paymentSentAlert": true,
                            "modelExpirationAlert": true,
                            "status": "FAILED"
                        }, {
                            "id": "8a9483a96dd476f1016dd476f7e8001c",
                            "payeeID": "2",
                            "payeeName": "The Republic",
                            "payeeAccountNumber": "12345O",
                            "payeeElectronic": true,
                            "amount": {
                                "amount": "200.99",
                                "currencyCode": "USD"
                            },
                            "paymentDate": "2018-11-23",
                            "paymentMemo": "Order #66",
                            "paymentAccount": {
                                "accountNumber": "100001001",
                                "accountNickName": "Joint Account",
                                "accountType": "CHECKING_ACCOUNT",
                                "routingNumber": "110001001"
                            },
                            "recurring": false,
                            "automaticPayment": true,
                            "paymentScheduledAlert": true,
                            "paymentSentAlert": true,
                            "modelExpirationAlert": true,
                            "status": "PROCESSED"
                        }],
                    "totalCount": 3
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payment": {
                        "id": "8a9483495f058d2f015f058d366a003c",
                        "payeeID": "0002",
                        "payeeName": "Citibank",
                        "payeeAccountNumber": "100000001",
                        "payeeElectronic": false,
                        "amount": {
                            "amount": "100.99",
                            "currencyCode": "USD"
                        },
                        "paymentDate": "2019-02-22",
                        "paymentAccount": {
                            "id": "1",
                            "accountNumber": "000000001",
                            "routingNumber": "000000011",
                            "accountType": "CHECKING_ACCOUNT"
                        },
                        "recurring": false,
                        "automaticPayment": false,
                        "status": "PENDING",
                        "fee": {
                            "amount": "9.99",
                            "currencyCode": "USD"
                        },
                        "ebillID": "20141219140239655590"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments/recurring/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payment": {
                        "id": "8a9483495f058d2f015f058d366a003c",
                        "payeeID": "0005",
                        "payeeName": "Citibank",
                        "payeeAccountNumber": "100000001",
                        "payeeElectronic": true,
                        "amount": {
                            "amount": "100.99",
                            "currencyCode": "USD"
                        },
                        "paymentDate": "2019-02-22",
                        "paymentAccount": {
                            "id": "1",
                            "accountNumber": "000000001",
                            "routingNumber": "000000011",
                            "accountType": "CHECKING_ACCOUNT"
                        },
                        "paymentMemo": "Here is some money",
                        "recurring": true,
                        "frequency": "MONTHLY",
                        "numberOfInstances": 2,
                        "paymentScheduledAlert": true,
                        "paymentSentAlert": true,
                        "modelExpirationAlert": true,
                        "status": "PENDING"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "payments": [{
                            "payeeID": "payee1",
                            "paymentID": "payment1",
                            "errors": []
                        }, {
                            "payeeID": "payee2",
                            "paymentID": "payment2",
                            "errors": []
                        }, {
                            "payeeID": "payee3",
                            "errors": [{
                                    "message": "Invalid next payment date",
                                    "key": "billpay.api.invalidNextPaymentDate"
                                }, {
                                    "message": "Payment already exists",
                                    "key": "billpay.api.paymentAlreadyExists"
                                }]
                        }, {
                            "payeeID": "payee4",
                            "paymentID": "payment4",
                            "errors": []
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [],
                    "payments": [{
                            "payeeID": "1",
                            "errors": [{
                                    "message": "The payee is invalid",
                                    "key": "billpay.api.invalidPayee"
                                }]
                        }, {
                            "payeeID": "2",
                            "errors": [{
                                    "message": "The payee is invalid",
                                    "key": "billpay.api.invalidPayee"
                                }]
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments/recurring",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payments/recurring/{id}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0955e686-d31e-4216-b3dd-5d66161d536d"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPayPayverisService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteBillPayPayverisEbillsEnrolment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _payeeID = requestParameters["payeeID"];
        if (_payeeID === null || _payeeID === undefined) {
            throw new Error('Required parameter payeeID was null or undefined when calling deleteBillPayPayverisEbillsEnrolment.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_payeeID !== undefined && _payeeID !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _payeeID, 'payeeID');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payveris/ebills/enrolment`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBillPayPayverisEbillsEnrolmentUrl(requestParameters) {
        const _payeeID = requestParameters["payeeID"];
        if (_payeeID === null || _payeeID === undefined) {
            throw new Error('Required parameter payeeID was null or undefined when calling deleteBillPayPayverisEbillsEnrolment.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_payeeID !== undefined && _payeeID !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _payeeID, 'payeeID');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payveris/ebills/enrolment${queryString ? `?${queryString}` : ''}`;
    }
    postBillPayPayverisEbillsEnrolment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayPayverisEbillsEnrolmentPostRequestBody = requestParameters["billPayPayverisEbillsEnrolmentPostRequestBody"];
        if (_billPayPayverisEbillsEnrolmentPostRequestBody === null || _billPayPayverisEbillsEnrolmentPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayverisEbillsEnrolmentPostRequestBody was null or undefined when calling postBillPayPayverisEbillsEnrolment.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payveris/ebills/enrolment`, _billPayPayverisEbillsEnrolmentPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayPayverisEbillsEnrolmentUrl(requestParameters) {
        const _billPayPayverisEbillsEnrolmentPostRequestBody = requestParameters["billPayPayverisEbillsEnrolmentPostRequestBody"];
        if (_billPayPayverisEbillsEnrolmentPostRequestBody === null || _billPayPayverisEbillsEnrolmentPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayverisEbillsEnrolmentPostRequestBody was null or undefined when calling postBillPayPayverisEbillsEnrolment.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payveris/ebills/enrolment`;
    }
    postBillPayPayverisResolveEbillErrors(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayPayverisResolveEbillErrorsPostRequestBody = requestParameters["billPayPayverisResolveEbillErrorsPostRequestBody"];
        if (_billPayPayverisResolveEbillErrorsPostRequestBody === null || _billPayPayverisResolveEbillErrorsPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayverisResolveEbillErrorsPostRequestBody was null or undefined when calling postBillPayPayverisResolveEbillErrors.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payveris/ebills/resolve-errors`, _billPayPayverisResolveEbillErrorsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayPayverisResolveEbillErrorsUrl(requestParameters) {
        const _billPayPayverisResolveEbillErrorsPostRequestBody = requestParameters["billPayPayverisResolveEbillErrorsPostRequestBody"];
        if (_billPayPayverisResolveEbillErrorsPostRequestBody === null || _billPayPayverisResolveEbillErrorsPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayverisResolveEbillErrorsPostRequestBody was null or undefined when calling postBillPayPayverisResolveEbillErrors.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payveris/ebills/resolve-errors`;
    }
}
BillPayPayverisService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayverisService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayPayverisService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayverisService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayverisService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPayPayverisServiceDeleteBillPayPayverisEbillsEnrolmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payveris/ebills/enrolment",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayverisServicePostBillPayPayverisEbillsEnrolmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payveris/ebills/enrolment",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "payeeID": "9993",
                    "billers": [],
                    "accounts": [],
                    "callBackRequired": false
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayverisServicePostBillPayPayverisResolveEbillErrorsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payveris/ebills/resolve-errors",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "payeeID": "9993",
                    "billers": [],
                    "accounts": [],
                    "callBackRequired": false
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPayPayverisServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/payveris/ebills/enrolment",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payveris/ebills/enrolment",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "payeeID": "9993",
                    "billers": [],
                    "accounts": [],
                    "callBackRequired": false
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/bill-pay/payveris/ebills/resolve-errors",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "payeeID": "9993",
                    "billers": [],
                    "accounts": [],
                    "callBackRequired": false
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

class BillPaySearchService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getBillPaySearch(requestParameters, observe = 'body', reportProgress = false, options) {
        const _name = requestParameters["name"];
        if (_name === null || _name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getBillPaySearch.');
        }
        const _zipCode = requestParameters["zipCode"];
        const _accountNumber = requestParameters["accountNumber"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_name !== undefined && _name !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
        }
        if (_zipCode !== undefined && _zipCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _zipCode, 'zipCode');
        }
        if (_accountNumber !== undefined && _accountNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _accountNumber, 'accountNumber');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees-search`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPaySearchUrl(requestParameters) {
        const _name = requestParameters["name"];
        if (_name === null || _name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getBillPaySearch.');
        }
        const _zipCode = requestParameters["zipCode"];
        const _accountNumber = requestParameters["accountNumber"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_name !== undefined && _name !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
        }
        if (_zipCode !== undefined && _zipCode !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _zipCode, 'zipCode');
        }
        if (_accountNumber !== undefined && _accountNumber !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _accountNumber, 'accountNumber');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees-search${queryString ? `?${queryString}` : ''}`;
    }
}
BillPaySearchService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPaySearchService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPaySearchService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPaySearchService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPaySearchService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BillPaySearchServiceGetBillPaySearchMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/bill-pay/payees-search",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payees": [{
                            "merchantID": "10000001",
                            "name": "Backbase UK",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000002",
                            "name": "Backbase AMS",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000003",
                            "name": "Backbase US",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000004",
                            "name": "adventescent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000005",
                            "name": "animadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000006",
                            "name": "circumadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000007",
                            "name": "syadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000008",
                            "name": "maladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000009",
                            "name": "sucadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000010",
                            "name": "sysadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000011",
                            "name": "adventacious",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000012",
                            "name": "adventack",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000013",
                            "name": "belladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000014",
                            "name": "coradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000015",
                            "name": "polyadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000016",
                            "name": "adventous",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000017",
                            "name": "adventant",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000018",
                            "name": "vivadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000019",
                            "name": "foradvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000020",
                            "name": "inadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000021",
                            "name": "bovadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000022",
                            "name": "adventize",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000023",
                            "name": "postadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000024",
                            "name": "lunadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000025",
                            "name": "amadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000026",
                            "name": "symadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000027",
                            "name": "advental",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000028",
                            "name": "adventic",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000029",
                            "name": "lupadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000030",
                            "name": "sufadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000031",
                            "name": "adventari",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000032",
                            "name": "adventism",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000033",
                            "name": "comadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000034",
                            "name": "laudadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000035",
                            "name": "adventose",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000036",
                            "name": "enadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000037",
                            "name": "misadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000038",
                            "name": "portadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000039",
                            "name": "adventor",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000040",
                            "name": "venadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000041",
                            "name": "tenadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000042",
                            "name": "adventation",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000043",
                            "name": "adventicious",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000044",
                            "name": "adventill",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000045",
                            "name": "fortadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000046",
                            "name": "adventil",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000047",
                            "name": "rhyadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000048",
                            "name": "aceradvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000049",
                            "name": "difadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000050",
                            "name": "adventand",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000051",
                            "name": "adventible",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000052",
                            "name": "peradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000053",
                            "name": "interadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000054",
                            "name": "podadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000055",
                            "name": "adventend",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000056",
                            "name": "maradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000057",
                            "name": "uberadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000058",
                            "name": "movadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000059",
                            "name": "adventile",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000060",
                            "name": "exadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000061",
                            "name": "frontadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000062",
                            "name": "pedadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000063",
                            "name": "outadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000064",
                            "name": "myadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000065",
                            "name": "finadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000066",
                            "name": "adventac",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000067",
                            "name": "adventaid",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000068",
                            "name": "dominadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000069",
                            "name": "transadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000070",
                            "name": "suradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000071",
                            "name": "sumadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000072",
                            "name": "adventive",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000073",
                            "name": "feladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000074",
                            "name": "adventa",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000075",
                            "name": "domadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000076",
                            "name": "anadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000077",
                            "name": "adventoid",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000078",
                            "name": "hyperadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000079",
                            "name": "adventore",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000080",
                            "name": "adventate",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000081",
                            "name": "adventosis",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000082",
                            "name": "albadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000083",
                            "name": "synadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000084",
                            "name": "canadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000085",
                            "name": "supadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000086",
                            "name": "midadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000087",
                            "name": "esadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000088",
                            "name": "skyadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000089",
                            "name": "susadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000090",
                            "name": "archadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000091",
                            "name": "locadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000092",
                            "name": "insuladvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000093",
                            "name": "sugadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000094",
                            "name": "capadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000095",
                            "name": "falcadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000096",
                            "name": "monadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000097",
                            "name": "syladvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000098",
                            "name": "conadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000099",
                            "name": "cisadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000100",
                            "name": "kayadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000001",
                            "name": "cedadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000002",
                            "name": "veradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000003",
                            "name": "cervadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000004",
                            "name": "audadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000005",
                            "name": "coladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000006",
                            "name": "vertadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000007",
                            "name": "adventashun",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000008",
                            "name": "suradvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000009",
                            "name": "subadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000010",
                            "name": "superadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000011",
                            "name": "doladvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000012",
                            "name": "nonadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000013",
                            "name": "garadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000014",
                            "name": "adventalt",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000015",
                            "name": "premadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000016",
                            "name": "adventity",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000017",
                            "name": "bonadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000018",
                            "name": "adventise",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000019",
                            "name": "genadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000019",
                            "name": "adventist",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000020",
                            "name": "adventable",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000021",
                            "name": "auradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000022",
                            "name": "adventent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000023",
                            "name": "disadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000024",
                            "name": "panadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000025",
                            "name": "adventer",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000026",
                            "name": "calcadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000027",
                            "name": "unadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000028",
                            "name": "adventall",
                            "zipRequired": false
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    }]);
const BillPaySearchServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/bill-pay/payees-search",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "payees": [{
                            "merchantID": "10000001",
                            "name": "Backbase UK",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000002",
                            "name": "Backbase AMS",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000003",
                            "name": "Backbase US",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000004",
                            "name": "adventescent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000005",
                            "name": "animadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000006",
                            "name": "circumadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000007",
                            "name": "syadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000008",
                            "name": "maladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000009",
                            "name": "sucadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000010",
                            "name": "sysadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000011",
                            "name": "adventacious",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000012",
                            "name": "adventack",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000013",
                            "name": "belladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000014",
                            "name": "coradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000015",
                            "name": "polyadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000016",
                            "name": "adventous",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000017",
                            "name": "adventant",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000018",
                            "name": "vivadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000019",
                            "name": "foradvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000020",
                            "name": "inadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000021",
                            "name": "bovadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000022",
                            "name": "adventize",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000023",
                            "name": "postadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000024",
                            "name": "lunadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000025",
                            "name": "amadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000026",
                            "name": "symadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000027",
                            "name": "advental",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000028",
                            "name": "adventic",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000029",
                            "name": "lupadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000030",
                            "name": "sufadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000031",
                            "name": "adventari",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000032",
                            "name": "adventism",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000033",
                            "name": "comadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000034",
                            "name": "laudadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000035",
                            "name": "adventose",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000036",
                            "name": "enadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000037",
                            "name": "misadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000038",
                            "name": "portadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000039",
                            "name": "adventor",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000040",
                            "name": "venadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000041",
                            "name": "tenadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000042",
                            "name": "adventation",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000043",
                            "name": "adventicious",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000044",
                            "name": "adventill",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000045",
                            "name": "fortadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000046",
                            "name": "adventil",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000047",
                            "name": "rhyadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000048",
                            "name": "aceradvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000049",
                            "name": "difadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000050",
                            "name": "adventand",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000051",
                            "name": "adventible",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000052",
                            "name": "peradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000053",
                            "name": "interadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000054",
                            "name": "podadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000055",
                            "name": "adventend",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000056",
                            "name": "maradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000057",
                            "name": "uberadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000058",
                            "name": "movadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000059",
                            "name": "adventile",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000060",
                            "name": "exadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000061",
                            "name": "frontadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000062",
                            "name": "pedadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000063",
                            "name": "outadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000064",
                            "name": "myadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000065",
                            "name": "finadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000066",
                            "name": "adventac",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000067",
                            "name": "adventaid",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000068",
                            "name": "dominadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000069",
                            "name": "transadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000070",
                            "name": "suradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000071",
                            "name": "sumadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000072",
                            "name": "adventive",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000073",
                            "name": "feladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000074",
                            "name": "adventa",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000075",
                            "name": "domadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000076",
                            "name": "anadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000077",
                            "name": "adventoid",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000078",
                            "name": "hyperadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000079",
                            "name": "adventore",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000080",
                            "name": "adventate",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000081",
                            "name": "adventosis",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000082",
                            "name": "albadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000083",
                            "name": "synadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000084",
                            "name": "canadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000085",
                            "name": "supadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000086",
                            "name": "midadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000087",
                            "name": "esadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000088",
                            "name": "skyadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000089",
                            "name": "susadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000090",
                            "name": "archadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000091",
                            "name": "locadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000092",
                            "name": "insuladvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000093",
                            "name": "sugadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000094",
                            "name": "capadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000095",
                            "name": "falcadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000096",
                            "name": "monadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000097",
                            "name": "syladvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "10000098",
                            "name": "conadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000099",
                            "name": "cisadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "10000100",
                            "name": "kayadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000001",
                            "name": "cedadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000002",
                            "name": "veradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000003",
                            "name": "cervadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000004",
                            "name": "audadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000005",
                            "name": "coladvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000006",
                            "name": "vertadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000007",
                            "name": "adventashun",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000008",
                            "name": "suradvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000009",
                            "name": "subadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000010",
                            "name": "superadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000011",
                            "name": "doladvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000012",
                            "name": "nonadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000013",
                            "name": "garadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000014",
                            "name": "adventalt",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000015",
                            "name": "premadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000016",
                            "name": "adventity",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000017",
                            "name": "bonadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000018",
                            "name": "adventise",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000019",
                            "name": "genadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000019",
                            "name": "adventist",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000020",
                            "name": "adventable",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000021",
                            "name": "auradvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000022",
                            "name": "adventent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000023",
                            "name": "disadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000024",
                            "name": "panadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000025",
                            "name": "adventer",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000026",
                            "name": "calcadvent",
                            "zipRequired": true
                        }, {
                            "merchantID": "20000027",
                            "name": "unadvent",
                            "zipRequired": false
                        }, {
                            "merchantID": "20000028",
                            "name": "adventall",
                            "zipRequired": false
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 501,
                body: {
                    "message": "Operation not supported"
                }
            },
            {
                status: 502,
                body: {
                    "message": "Bad Gateway",
                    "errors": [{
                            "message": "Internal error calling API provider",
                            "key": "common.api.providerInternalError"
                        }]
                }
            },
            {
                status: 504,
                body: {
                    "message": "Gateway Timeout",
                    "errors": [{
                            "message": "API provider unavailable.",
                            "key": "common.api.providerUnavailable"
                        }]
                }
            },
        ]
    },
]);

export { BILLPAY_BASE_PATH, BillPayAccountsService, BillPayAccountsServiceGetBillPayAccountsMocksProvider, BillPayAccountsServiceMocksProvider, BillPayAutopayService, BillPayAutopayServiceDeleteBillPayAutopayMocksProvider, BillPayAutopayServiceMocksProvider, BillPayAutopayServicePutBillPayAutopayMocksProvider, BillPayEbillsService, BillPayEbillsServiceDeleteBillPayEbillsMocksProvider, BillPayEbillsServiceGetBillPayEbillStatementsMocksProvider, BillPayEbillsServiceGetBillPayEbillsMocksProvider, BillPayEbillsServiceMocksProvider, BillPayEbillsServicePutEbillByIdMocksProvider, BillPayEnrolmentService, BillPayEnrolmentServiceGetBillPayEnrolmentMocksProvider, BillPayEnrolmentServiceMocksProvider, BillPayEnrolmentServicePostBillPayEnrolmentMocksProvider, BillPayPayeesService, BillPayPayeesServiceDeleteElectronicPayeeByIdMocksProvider, BillPayPayeesServiceDeletePayeeByIdMocksProvider, BillPayPayeesServiceGetElectronicPayeeByIdMocksProvider, BillPayPayeesServiceGetPayeeByIdMocksProvider, BillPayPayeesServiceMocksProvider, BillPayPayeesServicePostBillPayElectronicPayeesMocksProvider, BillPayPayeesServicePostBillPayPayeesMocksProvider, BillPayPayeesServicePutElectronicPayeeByIdMocksProvider, BillPayPayeesServicePutPayeeByIdMocksProvider, BillPayPayeesSummaryService, BillPayPayeesSummaryServiceGetBillPayPayeesSummaryMocksProvider, BillPayPayeesSummaryServiceMocksProvider, BillPayPaymentsService, BillPayPaymentsServiceDeletePaymentByIdMocksProvider, BillPayPaymentsServiceDeleteRecurringPaymentByIdMocksProvider, BillPayPaymentsServiceGetBillPayPaymentsMocksProvider, BillPayPaymentsServiceGetPaymentByIdMocksProvider, BillPayPaymentsServiceGetRecurringPaymentByIdMocksProvider, BillPayPaymentsServiceMocksProvider, BillPayPaymentsServicePostBillPayPaymentsMocksProvider, BillPayPaymentsServicePostBillPayRecurringPaymentsMocksProvider, BillPayPaymentsServicePutPaymentByIdMocksProvider, BillPayPaymentsServicePutRecurringPaymentByIdMocksProvider, BillPayPayverisService, BillPayPayverisServiceDeleteBillPayPayverisEbillsEnrolmentMocksProvider, BillPayPayverisServiceMocksProvider, BillPayPayverisServicePostBillPayPayverisEbillsEnrolmentMocksProvider, BillPayPayverisServicePostBillPayPayverisResolveEbillErrorsMocksProvider, BillPaySearchService, BillPaySearchServiceGetBillPaySearchMocksProvider, BillPaySearchServiceMocksProvider, BillpayApiModule, BillpayConfiguration, COLLECTION_FORMATS, CONFIG_TOKEN };
//# sourceMappingURL=backbase-billpay-http-ang.js.map
