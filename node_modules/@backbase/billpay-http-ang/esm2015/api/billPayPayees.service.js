import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BILLPAY_BASE_PATH } from '../variables';
import { BillpayConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class BillPayPayeesService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteElectronicPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteElectronicPayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deleteElectronicPayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteElectronicPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteElectronicPayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deleteElectronicPayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;
    }
    deletePayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deletePayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePayeeById.');
        }
        const _cancelPendingPayments = requestParameters["cancelPendingPayments"];
        if (_cancelPendingPayments === null || _cancelPendingPayments === undefined) {
            throw new Error('Required parameter cancelPendingPayments was null or undefined when calling deletePayeeById.');
        }
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_cancelPendingPayments !== undefined && _cancelPendingPayments !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _cancelPendingPayments, 'cancelPendingPayments');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;
    }
    getElectronicPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getElectronicPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getElectronicPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getElectronicPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`;
    }
    getPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`;
    }
    postBillPayElectronicPayees(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayElectronicPayeesPostRequestBody = requestParameters["billPayElectronicPayeesPostRequestBody"];
        if (_billPayElectronicPayeesPostRequestBody === null || _billPayElectronicPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayElectronicPayeesPostRequestBody was null or undefined when calling postBillPayElectronicPayees.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic`, _billPayElectronicPayeesPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayElectronicPayeesUrl(requestParameters) {
        const _billPayElectronicPayeesPostRequestBody = requestParameters["billPayElectronicPayeesPostRequestBody"];
        if (_billPayElectronicPayeesPostRequestBody === null || _billPayElectronicPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayElectronicPayeesPostRequestBody was null or undefined when calling postBillPayElectronicPayees.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic`;
    }
    postBillPayPayees(requestParameters, observe = 'body', reportProgress = false, options) {
        const _billPayPayeesPostRequestBody = requestParameters["billPayPayeesPostRequestBody"];
        if (_billPayPayeesPostRequestBody === null || _billPayPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayeesPostRequestBody was null or undefined when calling postBillPayPayees.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/bill-pay/payees`, _billPayPayeesPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBillPayPayeesUrl(requestParameters) {
        const _billPayPayeesPostRequestBody = requestParameters["billPayPayeesPostRequestBody"];
        if (_billPayPayeesPostRequestBody === null || _billPayPayeesPostRequestBody === undefined) {
            throw new Error('Required parameter billPayPayeesPostRequestBody was null or undefined when calling postBillPayPayees.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees`;
    }
    putElectronicPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putElectronicPayeeById.');
        }
        const _electronicPayeeByIdPutRequestBody = requestParameters["electronicPayeeByIdPutRequestBody"];
        if (_electronicPayeeByIdPutRequestBody === null || _electronicPayeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter electronicPayeeByIdPutRequestBody was null or undefined when calling putElectronicPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`, _electronicPayeeByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putElectronicPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putElectronicPayeeById.');
        }
        const _electronicPayeeByIdPutRequestBody = requestParameters["electronicPayeeByIdPutRequestBody"];
        if (_electronicPayeeByIdPutRequestBody === null || _electronicPayeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter electronicPayeeByIdPutRequestBody was null or undefined when calling putElectronicPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}`;
    }
    putPayeeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putPayeeById.');
        }
        const _payeeByIdPutRequestBody = requestParameters["payeeByIdPutRequestBody"];
        if (_payeeByIdPutRequestBody === null || _payeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter payeeByIdPutRequestBody was null or undefined when calling putPayeeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`, _payeeByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putPayeeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putPayeeById.');
        }
        const _payeeByIdPutRequestBody = requestParameters["payeeByIdPutRequestBody"];
        if (_payeeByIdPutRequestBody === null || _payeeByIdPutRequestBody === undefined) {
            throw new Error('Required parameter payeeByIdPutRequestBody was null or undefined when calling putPayeeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/${encodeURIComponent(String(_id))}`;
    }
}
BillPayPayeesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: i2.BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayPayeesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayPayeesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: i2.BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,