import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { BILLPAY_BASE_PATH } from '../variables';
import { BillpayConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class BillPayEbillsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new BillpayConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteBillPayEbills(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBillPayEbills.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBillPayEbillsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteBillPayEbills.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills`;
    }
    getBillPayEbillStatements(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling getBillPayEbillStatements.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbillStatements.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/pdf',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}/statements`, {
            responseType: "blob",
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayEbillStatementsUrl(requestParameters) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling getBillPayEbillStatements.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbillStatements.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}/statements`;
    }
    getBillPayEbills(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbills.');
        }
        const _status = requestParameters["status"];
        if (_status === null || _status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getBillPayEbills.');
        }
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBillPayEbillsUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBillPayEbills.');
        }
        const _status = requestParameters["status"];
        if (_status === null || _status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling getBillPayEbills.');
        }
        const _startDate = requestParameters["startDate"];
        const _endDate = requestParameters["endDate"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _orderBy = requestParameters["orderBy"];
        const _direction = requestParameters["direction"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_status !== undefined && _status !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _status, 'status');
        }
        if (_startDate !== undefined && _startDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _startDate, 'startDate');
        }
        if (_endDate !== undefined && _endDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _endDate, 'endDate');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_orderBy !== undefined && _orderBy !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _orderBy, 'orderBy');
        }
        if (_direction !== undefined && _direction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _direction, 'direction');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills${queryString ? `?${queryString}` : ''}`;
    }
    putEbillById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling putEbillById.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEbillById.');
        }
        const _ebillByIdPutRequestBody = requestParameters["ebillByIdPutRequestBody"];
        if (_ebillByIdPutRequestBody === null || _ebillByIdPutRequestBody === undefined) {
            throw new Error('Required parameter ebillByIdPutRequestBody was null or undefined when calling putEbillById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}`, _ebillByIdPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putEbillByIdUrl(requestParameters) {
        const _ebillId = requestParameters["ebillId"];
        if (_ebillId === null || _ebillId === undefined) {
            throw new Error('Required parameter ebillId was null or undefined when calling putEbillById.');
        }
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEbillById.');
        }
        const _ebillByIdPutRequestBody = requestParameters["ebillByIdPutRequestBody"];
        if (_ebillByIdPutRequestBody === null || _ebillByIdPutRequestBody === undefined) {
            throw new Error('Required parameter ebillByIdPutRequestBody was null or undefined when calling putEbillById.');
        }
        return `${this.configuration.basePath}/client-api/v2/bill-pay/payees/electronic/${encodeURIComponent(String(_id))}/ebills/${encodeURIComponent(String(_ebillId))}`;
    }
}
BillPayEbillsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEbillsService, deps: [{ token: i1.HttpClient }, { token: BILLPAY_BASE_PATH, optional: true }, { token: i2.BillpayConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BillPayEbillsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEbillsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BillPayEbillsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BILLPAY_BASE_PATH]
                }] }, { type: i2.BillpayConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,