import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BatchOrderFromTemplatePostResponse } from '../model/models';
import { BatchTemplatePaymentsGetResponse } from '../model/models';
import { BatchTemplatePaymentsPostRequest } from '../model/models';
import { BatchTemplatePaymentsPostResponse } from '../model/models';
import { BatchTemplatePaymentsPutRequest } from '../model/models';
import { BatchTemplatePaymentsPutResponse } from '../model/models';
import { BatchTemplatesAttributesPostRequest } from '../model/models';
import { BatchTemplatesAttributesPostResponse } from '../model/models';
import { BatchTemplatesGetResponse } from '../model/models';
import { BatchTemplatesPostRequest } from '../model/models';
import { BatchTemplatesPostResponse } from '../model/models';
import { BatchTemplatesPutRequest } from '../model/models';
import { BatchTemplatesPutResponse } from '../model/models';
import { BatchTemplatesStatusUpdateRequest } from '../model/models';
import { BatchTemplatesStatusUpdateResponse } from '../model/models';
import { ErrorItem } from '../model/models';
import { PaymentBatchTemplateConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateBatchOrderFromTemplateRequestParams {
    ["batchTemplateId"]: string;
}
export interface DeleteBatchTemplateByIdRequestParams {
    ["batchTemplateId"]: string;
}
export interface DeleteBatchTemplatePaymentByIdRequestParams {
    ["batchTemplateId"]: string;
    ["batchTemplatePaymentId"]: string;
}
export interface GetBatchTemplatePaymentsByIdRequestParams {
    ["batchTemplateId"]: string;
    ["from"]?: number;
    ["size"]?: number;
    ["privilegesToCheck"]?: Array<'VIEW' | 'CREATE'>;
}
export interface GetBatchTemplatesRequestParams {
    ["query"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["batchType"]?: string;
    ["creditDebitMixedIndicator"]?: 'CREDIT' | 'DEBIT' | 'MIXED';
    ["privilegesToCheck"]?: Array<'VIEW' | 'CREATE'>;
}
export interface PostBatchTemplatePaymentsRequestParams {
    ["batchTemplateId"]: string;
    ["batchTemplatePaymentsPostRequest"]: BatchTemplatePaymentsPostRequest;
}
export interface PostBatchTemplatesRequestParams {
    ["draftOf"]?: string;
    ["copyFrom"]?: string;
    ["name"]?: string;
    ["batchTemplatesPostRequest"]?: BatchTemplatesPostRequest;
}
export interface PostBatchTemplatesFromAttributesRequestParams {
    ["batchTemplatesAttributesPostRequest"]: BatchTemplatesAttributesPostRequest;
}
export interface PutBatchTemplatePaymentByIdRequestParams {
    ["batchTemplateId"]: string;
    ["batchTemplatePaymentId"]: string;
    ["batchTemplatePaymentsPutRequest"]: BatchTemplatePaymentsPutRequest;
}
export interface UpdateBatchTemplateByIdRequestParams {
    ["batchTemplateId"]: string;
    ["draftTemplateId"]?: string;
    ["batchTemplatesPutRequest"]?: BatchTemplatesPutRequest;
}
export interface UpdateBatchTemplateStatusByIdRequestParams {
    ["batchTemplateId"]: string;
    ["batchTemplatesStatusUpdateRequest"]: BatchTemplatesStatusUpdateRequest;
    ["dryRun"]?: boolean;
    ["intendedCreditTransactionsCount"]?: number;
    ["intendedDebitTransactionsCount"]?: number;
    ["intendedCreditAmount"]?: number;
    ["intendedDebitAmount"]?: number;
}
export interface ValidateBatchTemplateRequestParams {
    ["batchTemplateId"]: string;
    ["intendedCreditTransactionsCount"]?: number;
    ["intendedDebitTransactionsCount"]?: number;
    ["intendedCreditAmount"]?: number;
    ["intendedDebitAmount"]?: number;
}
export declare class BatchTemplatesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentBatchTemplateConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentBatchTemplateConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createBatchOrderFromTemplate(requestParameters: CreateBatchOrderFromTemplateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchOrderFromTemplatePostResponse>;
    createBatchOrderFromTemplate(requestParameters: CreateBatchOrderFromTemplateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchOrderFromTemplatePostResponse>>;
    createBatchOrderFromTemplate(requestParameters: CreateBatchOrderFromTemplateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchOrderFromTemplatePostResponse>>;
    createBatchOrderFromTemplateUrl(requestParameters: CreateBatchOrderFromTemplateRequestParams): string;
    deleteBatchTemplateById(requestParameters: DeleteBatchTemplateByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteBatchTemplateById(requestParameters: DeleteBatchTemplateByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteBatchTemplateById(requestParameters: DeleteBatchTemplateByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteBatchTemplateByIdUrl(requestParameters: DeleteBatchTemplateByIdRequestParams): string;
    deleteBatchTemplatePaymentById(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteBatchTemplatePaymentById(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteBatchTemplatePaymentById(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteBatchTemplatePaymentByIdUrl(requestParameters: DeleteBatchTemplatePaymentByIdRequestParams): string;
    getBatchTemplatePaymentsById(requestParameters: GetBatchTemplatePaymentsByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatePaymentsGetResponse>;
    getBatchTemplatePaymentsById(requestParameters: GetBatchTemplatePaymentsByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatePaymentsGetResponse>>;
    getBatchTemplatePaymentsById(requestParameters: GetBatchTemplatePaymentsByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatePaymentsGetResponse>>;
    getBatchTemplatePaymentsByIdUrl(requestParameters: GetBatchTemplatePaymentsByIdRequestParams): string;
    getBatchTemplates(requestParameters: GetBatchTemplatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatesGetResponse>;
    getBatchTemplates(requestParameters: GetBatchTemplatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatesGetResponse>>;
    getBatchTemplates(requestParameters: GetBatchTemplatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatesGetResponse>>;
    getBatchTemplatesUrl(requestParameters: GetBatchTemplatesRequestParams): string;
    postBatchTemplatePayments(requestParameters: PostBatchTemplatePaymentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatePaymentsPostResponse>;
    postBatchTemplatePayments(requestParameters: PostBatchTemplatePaymentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatePaymentsPostResponse>>;
    postBatchTemplatePayments(requestParameters: PostBatchTemplatePaymentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatePaymentsPostResponse>>;
    postBatchTemplatePaymentsUrl(requestParameters: PostBatchTemplatePaymentsRequestParams): string;
    postBatchTemplates(requestParameters: PostBatchTemplatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatesPostResponse>;
    postBatchTemplates(requestParameters: PostBatchTemplatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatesPostResponse>>;
    postBatchTemplates(requestParameters: PostBatchTemplatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatesPostResponse>>;
    postBatchTemplatesUrl(requestParameters: PostBatchTemplatesRequestParams): string;
    postBatchTemplatesFromAttributes(requestParameters: PostBatchTemplatesFromAttributesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatesAttributesPostResponse>;
    postBatchTemplatesFromAttributes(requestParameters: PostBatchTemplatesFromAttributesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatesAttributesPostResponse>>;
    postBatchTemplatesFromAttributes(requestParameters: PostBatchTemplatesFromAttributesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatesAttributesPostResponse>>;
    postBatchTemplatesFromAttributesUrl(requestParameters: PostBatchTemplatesFromAttributesRequestParams): string;
    putBatchTemplatePaymentById(requestParameters: PutBatchTemplatePaymentByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatePaymentsPutResponse>;
    putBatchTemplatePaymentById(requestParameters: PutBatchTemplatePaymentByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatePaymentsPutResponse>>;
    putBatchTemplatePaymentById(requestParameters: PutBatchTemplatePaymentByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatePaymentsPutResponse>>;
    putBatchTemplatePaymentByIdUrl(requestParameters: PutBatchTemplatePaymentByIdRequestParams): string;
    updateBatchTemplateById(requestParameters: UpdateBatchTemplateByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatesPutResponse>;
    updateBatchTemplateById(requestParameters: UpdateBatchTemplateByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatesPutResponse>>;
    updateBatchTemplateById(requestParameters: UpdateBatchTemplateByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatesPutResponse>>;
    updateBatchTemplateByIdUrl(requestParameters: UpdateBatchTemplateByIdRequestParams): string;
    updateBatchTemplateStatusById(requestParameters: UpdateBatchTemplateStatusByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BatchTemplatesStatusUpdateResponse>;
    updateBatchTemplateStatusById(requestParameters: UpdateBatchTemplateStatusByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BatchTemplatesStatusUpdateResponse>>;
    updateBatchTemplateStatusById(requestParameters: UpdateBatchTemplateStatusByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BatchTemplatesStatusUpdateResponse>>;
    updateBatchTemplateStatusByIdUrl(requestParameters: UpdateBatchTemplateStatusByIdRequestParams): string;
    validateBatchTemplate(requestParameters: ValidateBatchTemplateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ErrorItem>>;
    validateBatchTemplate(requestParameters: ValidateBatchTemplateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ErrorItem>>>;
    validateBatchTemplate(requestParameters: ValidateBatchTemplateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ErrorItem>>>;
    validateBatchTemplateUrl(requestParameters: ValidateBatchTemplateRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<BatchTemplatesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BatchTemplatesHttpService>;
}
