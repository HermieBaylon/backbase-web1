(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/payment-batch-template-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payment-batch-template-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var BatchStatus = {
        OPEN: 'OPEN',
        CLOSED: 'CLOSED',
        DRAFT: 'DRAFT',
        INVALID: 'INVALID',
        VALID: 'VALID',
        ENTERED: 'ENTERED',
        REJECTED: 'REJECTED',
        CANCELLED: 'CANCELLED',
        READY: 'READY',
        ACKNOWLEDGED: 'ACKNOWLEDGED',
        DOWNLOADING: 'DOWNLOADING',
        ACCEPTED: 'ACCEPTED',
        PROCESSED: 'PROCESSED'
    };

    var BatchTemplateStatus = {
        DRAFT: 'DRAFT',
        AVAILABLE: 'AVAILABLE'
    };

    var CreditDebitIndicator = {
        CREDIT: 'CREDIT',
        DEBIT: 'DEBIT'
    };

    var CreditDebitMixedIndicator = {
        CREDIT: 'CREDIT',
        DEBIT: 'DEBIT',
        MIXED: 'MIXED'
    };

    var SchemeNames = {
        IBAN: 'IBAN',
        BBAN: 'BBAN',
        ID: 'ID',
        EXTERNALID: 'EXTERNAL_ID',
        EMAIL: 'EMAIL',
        MOBILE: 'MOBILE'
    };

    var PAYMENT_BATCH_TEMPLATE_BASE_PATH = new i0.InjectionToken('PAYMENT_BATCH_TEMPLATE_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PaymentBatchTemplateConfiguration = /** @class */ (function () {
        function PaymentBatchTemplateConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PaymentBatchTemplateConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PaymentBatchTemplateConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PaymentBatchTemplateConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PaymentBatchTemplateConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PaymentBatchTemplateConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PaymentBatchTemplateConfiguration');

    var PaymentBatchTemplateApiModule = /** @class */ (function () {
        function PaymentBatchTemplateApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PaymentBatchTemplateApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PaymentBatchTemplateApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PaymentBatchTemplateApiModule,
                providers: [{ provide: PaymentBatchTemplateConfiguration, useFactory: configurationFactory }]
            };
        };
        return PaymentBatchTemplateApiModule;
    }());
    PaymentBatchTemplateApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchTemplateApiModule, deps: [{ token: PaymentBatchTemplateApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PaymentBatchTemplateConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentBatchTemplateApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchTemplateApiModule });
    PaymentBatchTemplateApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchTemplateApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentBatchTemplateApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PaymentBatchTemplateApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PaymentBatchTemplateConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var BatchTemplatesHttpService = /** @class */ (function () {
        function BatchTemplatesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentBatchTemplateConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        BatchTemplatesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        BatchTemplatesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        BatchTemplatesHttpService.prototype.createBatchOrderFromTemplate = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-order", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.createBatchOrderFromTemplateUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-order";
        };
        BatchTemplatesHttpService.prototype.deleteBatchTemplateById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.deleteBatchTemplateByIdUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId));
        };
        BatchTemplatesHttpService.prototype.deleteBatchTemplatePaymentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');
            }
            var _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
            if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
                throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments/" + encodeURIComponent(String(_batchTemplatePaymentId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.deleteBatchTemplatePaymentByIdUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');
            }
            var _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
            if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
                throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments/" + encodeURIComponent(String(_batchTemplatePaymentId));
        };
        BatchTemplatesHttpService.prototype.getBatchTemplatePaymentsById = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _privilegesToCheck = requestParameters["privilegesToCheck"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_privilegesToCheck) {
                _privilegesToCheck.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.getBatchTemplatePaymentsByIdUrl = function (requestParameters) {
            var _this = this;
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _privilegesToCheck = requestParameters["privilegesToCheck"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_privilegesToCheck) {
                _privilegesToCheck.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments" + (queryString ? "?" + queryString : '');
        };
        BatchTemplatesHttpService.prototype.getBatchTemplates = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _batchType = requestParameters["batchType"];
            var _creditDebitMixedIndicator = requestParameters["creditDebitMixedIndicator"];
            var _privilegesToCheck = requestParameters["privilegesToCheck"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_batchType !== undefined && _batchType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
            }
            if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _creditDebitMixedIndicator, 'creditDebitMixedIndicator');
            }
            if (_privilegesToCheck) {
                _privilegesToCheck.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/batch-templates", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.getBatchTemplatesUrl = function (requestParameters) {
            var _this = this;
            var _query = requestParameters["query"];
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _batchType = requestParameters["batchType"];
            var _creditDebitMixedIndicator = requestParameters["creditDebitMixedIndicator"];
            var _privilegesToCheck = requestParameters["privilegesToCheck"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_query !== undefined && _query !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
            }
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_batchType !== undefined && _batchType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
            }
            if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _creditDebitMixedIndicator, 'creditDebitMixedIndicator');
            }
            if (_privilegesToCheck) {
                _privilegesToCheck.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/batch-templates" + (queryString ? "?" + queryString : '');
        };
        BatchTemplatesHttpService.prototype.postBatchTemplatePayments = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');
            }
            var _batchTemplatePaymentsPostRequest = requestParameters["batchTemplatePaymentsPostRequest"];
            if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {
                throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments", _batchTemplatePaymentsPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.postBatchTemplatePaymentsUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');
            }
            var _batchTemplatePaymentsPostRequest = requestParameters["batchTemplatePaymentsPostRequest"];
            if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {
                throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments";
        };
        BatchTemplatesHttpService.prototype.postBatchTemplates = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _draftOf = requestParameters["draftOf"];
            var _copyFrom = requestParameters["copyFrom"];
            var _name = requestParameters["name"];
            var _batchTemplatesPostRequest = requestParameters["batchTemplatesPostRequest"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_draftOf !== undefined && _draftOf !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _draftOf, 'draftOf');
            }
            if (_copyFrom !== undefined && _copyFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _copyFrom, 'copyFrom');
            }
            if (_name !== undefined && _name !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/batch-templates", _batchTemplatesPostRequest, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.postBatchTemplatesUrl = function (requestParameters) {
            var _draftOf = requestParameters["draftOf"];
            var _copyFrom = requestParameters["copyFrom"];
            var _name = requestParameters["name"];
            var _batchTemplatesPostRequest = requestParameters["batchTemplatesPostRequest"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_draftOf !== undefined && _draftOf !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _draftOf, 'draftOf');
            }
            if (_copyFrom !== undefined && _copyFrom !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _copyFrom, 'copyFrom');
            }
            if (_name !== undefined && _name !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/batch-templates" + (queryString ? "?" + queryString : '');
        };
        BatchTemplatesHttpService.prototype.postBatchTemplatesFromAttributes = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplatesAttributesPostRequest = requestParameters["batchTemplatesAttributesPostRequest"];
            if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {
                throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/batch-templates/from-attributes", _batchTemplatesAttributesPostRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.postBatchTemplatesFromAttributesUrl = function (requestParameters) {
            var _batchTemplatesAttributesPostRequest = requestParameters["batchTemplatesAttributesPostRequest"];
            if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {
                throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-templates/from-attributes";
        };
        BatchTemplatesHttpService.prototype.putBatchTemplatePaymentById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');
            }
            var _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
            if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
                throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');
            }
            var _batchTemplatePaymentsPutRequest = requestParameters["batchTemplatePaymentsPutRequest"];
            if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {
                throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments/" + encodeURIComponent(String(_batchTemplatePaymentId)), _batchTemplatePaymentsPutRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.putBatchTemplatePaymentByIdUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');
            }
            var _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
            if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
                throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');
            }
            var _batchTemplatePaymentsPutRequest = requestParameters["batchTemplatePaymentsPutRequest"];
            if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {
                throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');
            }
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/batch-template-payments/" + encodeURIComponent(String(_batchTemplatePaymentId));
        };
        BatchTemplatesHttpService.prototype.updateBatchTemplateById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');
            }
            var _draftTemplateId = requestParameters["draftTemplateId"];
            var _batchTemplatesPutRequest = requestParameters["batchTemplatesPutRequest"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_draftTemplateId !== undefined && _draftTemplateId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _draftTemplateId, 'draftTemplateId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)), _batchTemplatesPutRequest, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.updateBatchTemplateByIdUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');
            }
            var _draftTemplateId = requestParameters["draftTemplateId"];
            var _batchTemplatesPutRequest = requestParameters["batchTemplatesPutRequest"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_draftTemplateId !== undefined && _draftTemplateId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _draftTemplateId, 'draftTemplateId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + (queryString ? "?" + queryString : '');
        };
        BatchTemplatesHttpService.prototype.updateBatchTemplateStatusById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');
            }
            var _batchTemplatesStatusUpdateRequest = requestParameters["batchTemplatesStatusUpdateRequest"];
            if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {
                throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');
            }
            var _dryRun = requestParameters["dryRun"];
            var _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
            var _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
            var _intendedCreditAmount = requestParameters["intendedCreditAmount"];
            var _intendedDebitAmount = requestParameters["intendedDebitAmount"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_dryRun !== undefined && _dryRun !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
            }
            if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
            }
            if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
            }
            if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
            }
            if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/status", _batchTemplatesStatusUpdateRequest, {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.updateBatchTemplateStatusByIdUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');
            }
            var _batchTemplatesStatusUpdateRequest = requestParameters["batchTemplatesStatusUpdateRequest"];
            if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {
                throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');
            }
            var _dryRun = requestParameters["dryRun"];
            var _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
            var _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
            var _intendedCreditAmount = requestParameters["intendedCreditAmount"];
            var _intendedDebitAmount = requestParameters["intendedDebitAmount"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_dryRun !== undefined && _dryRun !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
            }
            if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
            }
            if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
            }
            if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
            }
            if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/status" + (queryString ? "?" + queryString : '');
        };
        BatchTemplatesHttpService.prototype.validateBatchTemplate = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');
            }
            var _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
            var _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
            var _intendedCreditAmount = requestParameters["intendedCreditAmount"];
            var _intendedDebitAmount = requestParameters["intendedDebitAmount"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
            }
            if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
            }
            if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
            }
            if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/validation-errors", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        BatchTemplatesHttpService.prototype.validateBatchTemplateUrl = function (requestParameters) {
            var _batchTemplateId = requestParameters["batchTemplateId"];
            if (_batchTemplateId === null || _batchTemplateId === undefined) {
                throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');
            }
            var _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
            var _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
            var _intendedCreditAmount = requestParameters["intendedCreditAmount"];
            var _intendedDebitAmount = requestParameters["intendedDebitAmount"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
            }
            if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
            }
            if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
            }
            if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/batch-templates/" + encodeURIComponent(String(_batchTemplateId)) + "/validation-errors" + (queryString ? "?" + queryString : '');
        };
        return BatchTemplatesHttpService;
    }());
    BatchTemplatesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchTemplatesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_BATCH_TEMPLATE_BASE_PATH, optional: true }, { token: PaymentBatchTemplateConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BatchTemplatesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchTemplatesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BatchTemplatesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_BATCH_TEMPLATE_BASE_PATH]
                        }] }, { type: PaymentBatchTemplateConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var BatchTemplatesHttpServiceCreateBatchOrderFromTemplateMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-order",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                        "name": "Europe branches cash distribution",
                        "type": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                        "status": "DRAFT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "totalCreditTransactionsCount": 120,
                        "totalCreditInstructedAmount": {
                            "amount": "322038.00",
                            "currencyCode": "USD"
                        },
                        "entryClass": "CCD",
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "4902331374",
                                "schemeName": "BBAN"
                            }
                        },
                        "companyId": "1800948594",
                        "companyName": "Your Company",
                        "bankBranchCode": "113105452"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceDeleteBatchTemplateByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceDeleteBatchTemplatePaymentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template payment not found",
                        "errors": []
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceGetBatchTemplatePaymentsByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplatePayments": [{
                                "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                                "counterpartyName": "A. Hamers",
                                "counterpartyAccountNumber": "5802354374",
                                "counterpartyBankBranchCode": "214105452",
                                "creditDebitIndicator": "DEBIT",
                                "instructedAmount": {
                                    "amount": "4102.00",
                                    "currencyCode": "USD"
                                },
                                "description": "Salary Mar 2021 empl.no:902713"
                            }],
                        "totalBatchTemplatePayments": 1,
                        "batchTemplate": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "U00243",
                            "canApply": true,
                            "canDelete": true,
                            "canEdit": true,
                            "canDuplicate": true,
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "4102.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceGetBatchTemplatesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplates": [{
                                "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                                "name": "Internal transfers Acme corp",
                                "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                                "createdAt": "2019-05-10T10:29:10Z",
                                "createdBy": "Ulli Ulrich",
                                "updatedAt": "2021-05-10T10:29:10Z",
                                "updatedBy": "Jinnu Ulrich",
                                "canApply": true,
                                "canDelete": true,
                                "canEdit": true,
                                "canDuplicate": true,
                                "details": {
                                    "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                    "batchName": "Europe branches cash distribution",
                                    "creditDebitMixedIndicator": "CREDIT",
                                    "totalCreditTransactionsCount": 120,
                                    "totalCreditInstructedAmount": {
                                        "amount": "322038.00",
                                        "currencyCode": "USD"
                                    },
                                    "entryClass": "CCD",
                                    "originatorAccount": {
                                        "name": "Main Current",
                                        "identification": {
                                            "identification": "4902331374",
                                            "schemeName": "BBAN"
                                        }
                                    },
                                    "companyId": "1800948594",
                                    "companyName": "Your Company",
                                    "bankBranchCode": "113105452"
                                }
                            }],
                        "totalBatchTemplates": 1,
                        "creditDebitMixedIndicator": "CREDIT"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServicePostBatchTemplatePaymentsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template not found",
                        "errors": []
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServicePostBatchTemplatesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "batchTemplate": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "AVAILABLE",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "Uli Ulrich",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 201,
                    body: {
                        "batchTemplate": {
                            "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "DRAFT",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServicePostBatchTemplatesFromAttributesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/from-attributes",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "status": "DRAFT"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServicePutBatchTemplatePaymentByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                        "counterpartyName": "A. Hamers",
                        "counterpartyAccountNumber": "5802354374",
                        "counterpartyBankBranchCode": "214105452",
                        "creditDebitIndicator": "CREDIT",
                        "instructedAmount": {
                            "amount": "4102.00",
                            "currencyCode": "USD"
                        },
                        "description": "Salary Mar 2021 empl.no:902713"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template payment not found",
                        "errors": []
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceUpdateBatchTemplateByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplate": {
                            "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "DRAFT",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "batchTemplate": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "AVAILABLE",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "Ulli Ulrich",
                            "updatedAt": "2021-05-10T10:29:10Z",
                            "updatedBy": "Jinnu Ulrich",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceUpdateBatchTemplateStatusByIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/status",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplate": {
                            "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "DRAFT",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceValidateBatchTemplateMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/validation-errors",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "message": "Total credit transactions count {{totalCreditTransactionsCount}} does not match the intended total credit transactions count {{intendedTotalCreditTransactionsCount}}.",
                            "key": "TotalCreditTransactionsCountMismatch",
                            "context": {
                                "intendedTotalCreditTransactionsCount": "10000",
                                "totalCreditTransactionsCount": "2"
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        }]);
    var BatchTemplatesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-order",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                        "name": "Europe branches cash distribution",
                        "type": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                        "status": "DRAFT",
                        "creditDebitMixedIndicator": "CREDIT",
                        "totalCreditTransactionsCount": 120,
                        "totalCreditInstructedAmount": {
                            "amount": "322038.00",
                            "currencyCode": "USD"
                        },
                        "entryClass": "CCD",
                        "account": {
                            "name": "Main Current",
                            "identification": {
                                "identification": "4902331374",
                                "schemeName": "BBAN"
                            }
                        },
                        "companyId": "1800948594",
                        "companyName": "Your Company",
                        "bankBranchCode": "113105452"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template payment not found",
                        "errors": []
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplatePayments": [{
                                "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                                "counterpartyName": "A. Hamers",
                                "counterpartyAccountNumber": "5802354374",
                                "counterpartyBankBranchCode": "214105452",
                                "creditDebitIndicator": "DEBIT",
                                "instructedAmount": {
                                    "amount": "4102.00",
                                    "currencyCode": "USD"
                                },
                                "description": "Salary Mar 2021 empl.no:902713"
                            }],
                        "totalBatchTemplatePayments": 1,
                        "batchTemplate": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "U00243",
                            "canApply": true,
                            "canDelete": true,
                            "canEdit": true,
                            "canDuplicate": true,
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "4102.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplates": [{
                                "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                                "name": "Internal transfers Acme corp",
                                "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                                "createdAt": "2019-05-10T10:29:10Z",
                                "createdBy": "Ulli Ulrich",
                                "updatedAt": "2021-05-10T10:29:10Z",
                                "updatedBy": "Jinnu Ulrich",
                                "canApply": true,
                                "canDelete": true,
                                "canEdit": true,
                                "canDuplicate": true,
                                "details": {
                                    "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                    "batchName": "Europe branches cash distribution",
                                    "creditDebitMixedIndicator": "CREDIT",
                                    "totalCreditTransactionsCount": 120,
                                    "totalCreditInstructedAmount": {
                                        "amount": "322038.00",
                                        "currencyCode": "USD"
                                    },
                                    "entryClass": "CCD",
                                    "originatorAccount": {
                                        "name": "Main Current",
                                        "identification": {
                                            "identification": "4902331374",
                                            "schemeName": "BBAN"
                                        }
                                    },
                                    "companyId": "1800948594",
                                    "companyName": "Your Company",
                                    "bankBranchCode": "113105452"
                                }
                            }],
                        "totalBatchTemplates": 1,
                        "creditDebitMixedIndicator": "CREDIT"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template not found",
                        "errors": []
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "batchTemplate": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "AVAILABLE",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "Uli Ulrich",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 201,
                    body: {
                        "batchTemplate": {
                            "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "DRAFT",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/from-attributes",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "status": "DRAFT"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                        "counterpartyName": "A. Hamers",
                        "counterpartyAccountNumber": "5802354374",
                        "counterpartyBankBranchCode": "214105452",
                        "creditDebitIndicator": "CREDIT",
                        "instructedAmount": {
                            "amount": "4102.00",
                            "currencyCode": "USD"
                        },
                        "description": "Salary Mar 2021 empl.no:902713"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template not found",
                        "errors": []
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Batch template payment not found",
                        "errors": []
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplate": {
                            "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "DRAFT",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "batchTemplate": {
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "AVAILABLE",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "Ulli Ulrich",
                            "updatedAt": "2021-05-10T10:29:10Z",
                            "updatedBy": "Jinnu Ulrich",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/status",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "batchTemplate": {
                            "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "status": "DRAFT",
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/validation-errors",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "message": "Total credit transactions count {{totalCreditTransactionsCount}} does not match the intended total credit transactions count {{intendedTotalCreditTransactionsCount}}.",
                            "key": "TotalCreditTransactionsCountMismatch",
                            "context": {
                                "intendedTotalCreditTransactionsCount": "10000",
                                "totalCreditTransactionsCount": "2"
                            }
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 409,
                    body: {
                        "message": "Conflict error",
                        "errors": [{
                                "message": "The request could not be completed due to a conflict with the current state of the resource.",
                                "key": "transactions.api.billingstatus.transaction",
                                "context": {
                                    "billingStatus": "BILLED"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.BatchStatus = BatchStatus;
    exports.BatchTemplateStatus = BatchTemplateStatus;
    exports.BatchTemplatesHttpService = BatchTemplatesHttpService;
    exports.BatchTemplatesHttpServiceCreateBatchOrderFromTemplateMocksProvider = BatchTemplatesHttpServiceCreateBatchOrderFromTemplateMocksProvider;
    exports.BatchTemplatesHttpServiceDeleteBatchTemplateByIdMocksProvider = BatchTemplatesHttpServiceDeleteBatchTemplateByIdMocksProvider;
    exports.BatchTemplatesHttpServiceDeleteBatchTemplatePaymentByIdMocksProvider = BatchTemplatesHttpServiceDeleteBatchTemplatePaymentByIdMocksProvider;
    exports.BatchTemplatesHttpServiceGetBatchTemplatePaymentsByIdMocksProvider = BatchTemplatesHttpServiceGetBatchTemplatePaymentsByIdMocksProvider;
    exports.BatchTemplatesHttpServiceGetBatchTemplatesMocksProvider = BatchTemplatesHttpServiceGetBatchTemplatesMocksProvider;
    exports.BatchTemplatesHttpServiceMocksProvider = BatchTemplatesHttpServiceMocksProvider;
    exports.BatchTemplatesHttpServicePostBatchTemplatePaymentsMocksProvider = BatchTemplatesHttpServicePostBatchTemplatePaymentsMocksProvider;
    exports.BatchTemplatesHttpServicePostBatchTemplatesFromAttributesMocksProvider = BatchTemplatesHttpServicePostBatchTemplatesFromAttributesMocksProvider;
    exports.BatchTemplatesHttpServicePostBatchTemplatesMocksProvider = BatchTemplatesHttpServicePostBatchTemplatesMocksProvider;
    exports.BatchTemplatesHttpServicePutBatchTemplatePaymentByIdMocksProvider = BatchTemplatesHttpServicePutBatchTemplatePaymentByIdMocksProvider;
    exports.BatchTemplatesHttpServiceUpdateBatchTemplateByIdMocksProvider = BatchTemplatesHttpServiceUpdateBatchTemplateByIdMocksProvider;
    exports.BatchTemplatesHttpServiceUpdateBatchTemplateStatusByIdMocksProvider = BatchTemplatesHttpServiceUpdateBatchTemplateStatusByIdMocksProvider;
    exports.BatchTemplatesHttpServiceValidateBatchTemplateMocksProvider = BatchTemplatesHttpServiceValidateBatchTemplateMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CreditDebitIndicator = CreditDebitIndicator;
    exports.CreditDebitMixedIndicator = CreditDebitMixedIndicator;
    exports.PAYMENT_BATCH_TEMPLATE_BASE_PATH = PAYMENT_BATCH_TEMPLATE_BASE_PATH;
    exports.PaymentBatchTemplateApiModule = PaymentBatchTemplateApiModule;
    exports.PaymentBatchTemplateConfiguration = PaymentBatchTemplateConfiguration;
    exports.SchemeNames = SchemeNames;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payment-batch-template-http-ang.umd.js.map
