import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const BatchStatus = {
    OPEN: 'OPEN',
    CLOSED: 'CLOSED',
    DRAFT: 'DRAFT',
    INVALID: 'INVALID',
    VALID: 'VALID',
    ENTERED: 'ENTERED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED',
    READY: 'READY',
    ACKNOWLEDGED: 'ACKNOWLEDGED',
    DOWNLOADING: 'DOWNLOADING',
    ACCEPTED: 'ACCEPTED',
    PROCESSED: 'PROCESSED'
};

const BatchTemplateStatus = {
    DRAFT: 'DRAFT',
    AVAILABLE: 'AVAILABLE'
};

const CreditDebitIndicator = {
    CREDIT: 'CREDIT',
    DEBIT: 'DEBIT'
};

const CreditDebitMixedIndicator = {
    CREDIT: 'CREDIT',
    DEBIT: 'DEBIT',
    MIXED: 'MIXED'
};

const SchemeNames = {
    IBAN: 'IBAN',
    BBAN: 'BBAN',
    ID: 'ID',
    EXTERNALID: 'EXTERNAL_ID',
    EMAIL: 'EMAIL',
    MOBILE: 'MOBILE'
};

const PAYMENT_BATCH_TEMPLATE_BASE_PATH = new InjectionToken('PAYMENT_BATCH_TEMPLATE_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PaymentBatchTemplateConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentBatchTemplateConfiguration');

class PaymentBatchTemplateApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PaymentBatchTemplateApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PaymentBatchTemplateApiModule,
            providers: [{ provide: PaymentBatchTemplateConfiguration, useFactory: configurationFactory }]
        };
    }
}
PaymentBatchTemplateApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchTemplateApiModule, deps: [{ token: PaymentBatchTemplateApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentBatchTemplateConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PaymentBatchTemplateApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchTemplateApiModule });
PaymentBatchTemplateApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchTemplateApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentBatchTemplateApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PaymentBatchTemplateApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PaymentBatchTemplateConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class BatchTemplatesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentBatchTemplateConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createBatchOrderFromTemplate(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-order`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createBatchOrderFromTemplateUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling createBatchOrderFromTemplate.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-order`;
    }
    deleteBatchTemplateById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchTemplateByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplateById.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`;
    }
    deleteBatchTemplatePaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteBatchTemplatePaymentByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling deleteBatchTemplatePaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`;
    }
    getBatchTemplatePaymentsById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchTemplatePaymentsByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling getBatchTemplatePaymentsById.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments${queryString ? `?${queryString}` : ''}`;
    }
    getBatchTemplates(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _batchType = requestParameters["batchType"];
        const _creditDebitMixedIndicator = requestParameters["creditDebitMixedIndicator"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_batchType !== undefined && _batchType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
        }
        if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitMixedIndicator, 'creditDebitMixedIndicator');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-templates`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getBatchTemplatesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _batchType = requestParameters["batchType"];
        const _creditDebitMixedIndicator = requestParameters["creditDebitMixedIndicator"];
        const _privilegesToCheck = requestParameters["privilegesToCheck"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_batchType !== undefined && _batchType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _batchType, 'batchType');
        }
        if (_creditDebitMixedIndicator !== undefined && _creditDebitMixedIndicator !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _creditDebitMixedIndicator, 'creditDebitMixedIndicator');
        }
        if (_privilegesToCheck) {
            _privilegesToCheck.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'privilegesToCheck');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates${queryString ? `?${queryString}` : ''}`;
    }
    postBatchTemplatePayments(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');
        }
        const _batchTemplatePaymentsPostRequest = requestParameters["batchTemplatePaymentsPostRequest"];
        if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`, _batchTemplatePaymentsPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchTemplatePaymentsUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling postBatchTemplatePayments.');
        }
        const _batchTemplatePaymentsPostRequest = requestParameters["batchTemplatePaymentsPostRequest"];
        if (_batchTemplatePaymentsPostRequest === null || _batchTemplatePaymentsPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPostRequest was null or undefined when calling postBatchTemplatePayments.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments`;
    }
    postBatchTemplates(requestParameters, observe = 'body', reportProgress = false, options) {
        const _draftOf = requestParameters["draftOf"];
        const _copyFrom = requestParameters["copyFrom"];
        const _name = requestParameters["name"];
        const _batchTemplatesPostRequest = requestParameters["batchTemplatesPostRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftOf !== undefined && _draftOf !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftOf, 'draftOf');
        }
        if (_copyFrom !== undefined && _copyFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _copyFrom, 'copyFrom');
        }
        if (_name !== undefined && _name !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates`, _batchTemplatesPostRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchTemplatesUrl(requestParameters) {
        const _draftOf = requestParameters["draftOf"];
        const _copyFrom = requestParameters["copyFrom"];
        const _name = requestParameters["name"];
        const _batchTemplatesPostRequest = requestParameters["batchTemplatesPostRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftOf !== undefined && _draftOf !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftOf, 'draftOf');
        }
        if (_copyFrom !== undefined && _copyFrom !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _copyFrom, 'copyFrom');
        }
        if (_name !== undefined && _name !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _name, 'name');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates${queryString ? `?${queryString}` : ''}`;
    }
    postBatchTemplatesFromAttributes(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplatesAttributesPostRequest = requestParameters["batchTemplatesAttributesPostRequest"];
        if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/batch-templates/from-attributes`, _batchTemplatesAttributesPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postBatchTemplatesFromAttributesUrl(requestParameters) {
        const _batchTemplatesAttributesPostRequest = requestParameters["batchTemplatesAttributesPostRequest"];
        if (_batchTemplatesAttributesPostRequest === null || _batchTemplatesAttributesPostRequest === undefined) {
            throw new Error('Required parameter batchTemplatesAttributesPostRequest was null or undefined when calling postBatchTemplatesFromAttributes.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/from-attributes`;
    }
    putBatchTemplatePaymentById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentsPutRequest = requestParameters["batchTemplatePaymentsPutRequest"];
        if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`, _batchTemplatePaymentsPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putBatchTemplatePaymentByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentId = requestParameters["batchTemplatePaymentId"];
        if (_batchTemplatePaymentId === null || _batchTemplatePaymentId === undefined) {
            throw new Error('Required parameter batchTemplatePaymentId was null or undefined when calling putBatchTemplatePaymentById.');
        }
        const _batchTemplatePaymentsPutRequest = requestParameters["batchTemplatePaymentsPutRequest"];
        if (_batchTemplatePaymentsPutRequest === null || _batchTemplatePaymentsPutRequest === undefined) {
            throw new Error('Required parameter batchTemplatePaymentsPutRequest was null or undefined when calling putBatchTemplatePaymentById.');
        }
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/batch-template-payments/${encodeURIComponent(String(_batchTemplatePaymentId))}`;
    }
    updateBatchTemplateById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');
        }
        const _draftTemplateId = requestParameters["draftTemplateId"];
        const _batchTemplatesPutRequest = requestParameters["batchTemplatesPutRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftTemplateId !== undefined && _draftTemplateId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftTemplateId, 'draftTemplateId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}`, _batchTemplatesPutRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateBatchTemplateByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateById.');
        }
        const _draftTemplateId = requestParameters["draftTemplateId"];
        const _batchTemplatesPutRequest = requestParameters["batchTemplatesPutRequest"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_draftTemplateId !== undefined && _draftTemplateId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _draftTemplateId, 'draftTemplateId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}${queryString ? `?${queryString}` : ''}`;
    }
    updateBatchTemplateStatusById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _batchTemplatesStatusUpdateRequest = requestParameters["batchTemplatesStatusUpdateRequest"];
        if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {
            throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/status`, _batchTemplatesStatusUpdateRequest, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateBatchTemplateStatusByIdUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _batchTemplatesStatusUpdateRequest = requestParameters["batchTemplatesStatusUpdateRequest"];
        if (_batchTemplatesStatusUpdateRequest === null || _batchTemplatesStatusUpdateRequest === undefined) {
            throw new Error('Required parameter batchTemplatesStatusUpdateRequest was null or undefined when calling updateBatchTemplateStatusById.');
        }
        const _dryRun = requestParameters["dryRun"];
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_dryRun !== undefined && _dryRun !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _dryRun, 'dryRun');
        }
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/status${queryString ? `?${queryString}` : ''}`;
    }
    validateBatchTemplate(requestParameters, observe = 'body', reportProgress = false, options) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');
        }
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/validation-errors`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    validateBatchTemplateUrl(requestParameters) {
        const _batchTemplateId = requestParameters["batchTemplateId"];
        if (_batchTemplateId === null || _batchTemplateId === undefined) {
            throw new Error('Required parameter batchTemplateId was null or undefined when calling validateBatchTemplate.');
        }
        const _intendedCreditTransactionsCount = requestParameters["intendedCreditTransactionsCount"];
        const _intendedDebitTransactionsCount = requestParameters["intendedDebitTransactionsCount"];
        const _intendedCreditAmount = requestParameters["intendedCreditAmount"];
        const _intendedDebitAmount = requestParameters["intendedDebitAmount"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_intendedCreditTransactionsCount !== undefined && _intendedCreditTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditTransactionsCount, 'intendedCreditTransactionsCount');
        }
        if (_intendedDebitTransactionsCount !== undefined && _intendedDebitTransactionsCount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitTransactionsCount, 'intendedDebitTransactionsCount');
        }
        if (_intendedCreditAmount !== undefined && _intendedCreditAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedCreditAmount, 'intendedCreditAmount');
        }
        if (_intendedDebitAmount !== undefined && _intendedDebitAmount !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedDebitAmount, 'intendedDebitAmount');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/batch-templates/${encodeURIComponent(String(_batchTemplateId))}/validation-errors${queryString ? `?${queryString}` : ''}`;
    }
}
BatchTemplatesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchTemplatesHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_BATCH_TEMPLATE_BASE_PATH, optional: true }, { token: PaymentBatchTemplateConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BatchTemplatesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchTemplatesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BatchTemplatesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_BATCH_TEMPLATE_BASE_PATH]
                }] }, { type: PaymentBatchTemplateConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const BatchTemplatesHttpServiceCreateBatchOrderFromTemplateMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-order",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                    "name": "Europe branches cash distribution",
                    "type": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                    "status": "DRAFT",
                    "creditDebitMixedIndicator": "CREDIT",
                    "totalCreditTransactionsCount": 120,
                    "totalCreditInstructedAmount": {
                        "amount": "322038.00",
                        "currencyCode": "USD"
                    },
                    "entryClass": "CCD",
                    "account": {
                        "name": "Main Current",
                        "identification": {
                            "identification": "4902331374",
                            "schemeName": "BBAN"
                        }
                    },
                    "companyId": "1800948594",
                    "companyName": "Your Company",
                    "bankBranchCode": "113105452"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceDeleteBatchTemplateByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceDeleteBatchTemplatePaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Batch template not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template payment not found",
                    "errors": []
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceGetBatchTemplatePaymentsByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplatePayments": [{
                            "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                            "counterpartyName": "A. Hamers",
                            "counterpartyAccountNumber": "5802354374",
                            "counterpartyBankBranchCode": "214105452",
                            "creditDebitIndicator": "DEBIT",
                            "instructedAmount": {
                                "amount": "4102.00",
                                "currencyCode": "USD"
                            },
                            "description": "Salary Mar 2021 empl.no:902713"
                        }],
                    "totalBatchTemplatePayments": 1,
                    "batchTemplate": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "createdAt": "2019-05-10T10:29:10Z",
                        "createdBy": "U00243",
                        "canApply": true,
                        "canDelete": true,
                        "canEdit": true,
                        "canDuplicate": true,
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "4102.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceGetBatchTemplatesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplates": [{
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "Ulli Ulrich",
                            "updatedAt": "2021-05-10T10:29:10Z",
                            "updatedBy": "Jinnu Ulrich",
                            "canApply": true,
                            "canDelete": true,
                            "canEdit": true,
                            "canDuplicate": true,
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }],
                    "totalBatchTemplates": 1,
                    "creditDebitMixedIndicator": "CREDIT"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServicePostBatchTemplatePaymentsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template not found",
                    "errors": []
                }
            },
        ]
    }]);
const BatchTemplatesHttpServicePostBatchTemplatesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "batchTemplate": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "AVAILABLE",
                        "createdAt": "2019-05-10T10:29:10Z",
                        "createdBy": "Uli Ulrich",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 201,
                body: {
                    "batchTemplate": {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "DRAFT",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServicePostBatchTemplatesFromAttributesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/from-attributes",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                    "status": "DRAFT"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServicePutBatchTemplatePaymentByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                    "counterpartyName": "A. Hamers",
                    "counterpartyAccountNumber": "5802354374",
                    "counterpartyBankBranchCode": "214105452",
                    "creditDebitIndicator": "CREDIT",
                    "instructedAmount": {
                        "amount": "4102.00",
                        "currencyCode": "USD"
                    },
                    "description": "Salary Mar 2021 empl.no:902713"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template payment not found",
                    "errors": []
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceUpdateBatchTemplateByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplate": {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "DRAFT",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 200,
                body: {
                    "batchTemplate": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "AVAILABLE",
                        "createdAt": "2019-05-10T10:29:10Z",
                        "createdBy": "Ulli Ulrich",
                        "updatedAt": "2021-05-10T10:29:10Z",
                        "updatedBy": "Jinnu Ulrich",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceUpdateBatchTemplateStatusByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/status",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplate": {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "DRAFT",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceValidateBatchTemplateMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/validation-errors",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "message": "Total credit transactions count {{totalCreditTransactionsCount}} does not match the intended total credit transactions count {{intendedTotalCreditTransactionsCount}}.",
                        "key": "TotalCreditTransactionsCountMismatch",
                        "context": {
                            "intendedTotalCreditTransactionsCount": "10000",
                            "totalCreditTransactionsCount": "2"
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const BatchTemplatesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-order",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "c1263fd6-8bd3-4a0b-be02-5db5cb1d6d06",
                    "name": "Europe branches cash distribution",
                    "type": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                    "status": "DRAFT",
                    "creditDebitMixedIndicator": "CREDIT",
                    "totalCreditTransactionsCount": 120,
                    "totalCreditInstructedAmount": {
                        "amount": "322038.00",
                        "currencyCode": "USD"
                    },
                    "entryClass": "CCD",
                    "account": {
                        "name": "Main Current",
                        "identification": {
                            "identification": "4902331374",
                            "schemeName": "BBAN"
                        }
                    },
                    "companyId": "1800948594",
                    "companyName": "Your Company",
                    "bankBranchCode": "113105452"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 404,
                body: {
                    "message": "Batch template not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template payment not found",
                    "errors": []
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplatePayments": [{
                            "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                            "counterpartyName": "A. Hamers",
                            "counterpartyAccountNumber": "5802354374",
                            "counterpartyBankBranchCode": "214105452",
                            "creditDebitIndicator": "DEBIT",
                            "instructedAmount": {
                                "amount": "4102.00",
                                "currencyCode": "USD"
                            },
                            "description": "Salary Mar 2021 empl.no:902713"
                        }],
                    "totalBatchTemplatePayments": 1,
                    "batchTemplate": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "createdAt": "2019-05-10T10:29:10Z",
                        "createdBy": "U00243",
                        "canApply": true,
                        "canDelete": true,
                        "canEdit": true,
                        "canDuplicate": true,
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "4102.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplates": [{
                            "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                            "name": "Internal transfers Acme corp",
                            "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                            "createdAt": "2019-05-10T10:29:10Z",
                            "createdBy": "Ulli Ulrich",
                            "updatedAt": "2021-05-10T10:29:10Z",
                            "updatedBy": "Jinnu Ulrich",
                            "canApply": true,
                            "canDelete": true,
                            "canEdit": true,
                            "canDuplicate": true,
                            "details": {
                                "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                                "batchName": "Europe branches cash distribution",
                                "creditDebitMixedIndicator": "CREDIT",
                                "totalCreditTransactionsCount": 120,
                                "totalCreditInstructedAmount": {
                                    "amount": "322038.00",
                                    "currencyCode": "USD"
                                },
                                "entryClass": "CCD",
                                "originatorAccount": {
                                    "name": "Main Current",
                                    "identification": {
                                        "identification": "4902331374",
                                        "schemeName": "BBAN"
                                    }
                                },
                                "companyId": "1800948594",
                                "companyName": "Your Company",
                                "bankBranchCode": "113105452"
                            }
                        }],
                    "totalBatchTemplates": 1,
                    "creditDebitMixedIndicator": "CREDIT"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template not found",
                    "errors": []
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "batchTemplate": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "AVAILABLE",
                        "createdAt": "2019-05-10T10:29:10Z",
                        "createdBy": "Uli Ulrich",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 201,
                body: {
                    "batchTemplate": {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "DRAFT",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/from-attributes",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                    "status": "DRAFT"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/batch-template-payments/{batchTemplatePaymentId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "6c357c28-6714-11e7-907b-a6006ad3dcd0",
                    "counterpartyName": "A. Hamers",
                    "counterpartyAccountNumber": "5802354374",
                    "counterpartyBankBranchCode": "214105452",
                    "creditDebitIndicator": "CREDIT",
                    "instructedAmount": {
                        "amount": "4102.00",
                        "currencyCode": "USD"
                    },
                    "description": "Salary Mar 2021 empl.no:902713"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template not found",
                    "errors": []
                }
            },
            {
                status: 404,
                body: {
                    "message": "Batch template payment not found",
                    "errors": []
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplate": {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "DRAFT",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 200,
                body: {
                    "batchTemplate": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "AVAILABLE",
                        "createdAt": "2019-05-10T10:29:10Z",
                        "createdBy": "Ulli Ulrich",
                        "updatedAt": "2021-05-10T10:29:10Z",
                        "updatedBy": "Jinnu Ulrich",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/status",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "batchTemplate": {
                        "id": "7c341c49-6344-22e7-907b-b6006ad3ecd0",
                        "name": "Internal transfers Acme corp",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "status": "DRAFT",
                        "details": {
                            "batchType": "INTRACOMPANY_PAYMENT_CREDIT_USA",
                            "batchName": "Europe branches cash distribution",
                            "creditDebitMixedIndicator": "CREDIT",
                            "totalCreditTransactionsCount": 120,
                            "totalCreditInstructedAmount": {
                                "amount": "322038.00",
                                "currencyCode": "USD"
                            },
                            "entryClass": "CCD",
                            "originatorAccount": {
                                "name": "Main Current",
                                "identification": {
                                    "identification": "4902331374",
                                    "schemeName": "BBAN"
                                }
                            },
                            "companyId": "1800948594",
                            "companyName": "Your Company",
                            "bankBranchCode": "113105452"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/batch-templates/{batchTemplateId}/validation-errors",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "message": "Total credit transactions count {{totalCreditTransactionsCount}} does not match the intended total credit transactions count {{intendedTotalCreditTransactionsCount}}.",
                        "key": "TotalCreditTransactionsCountMismatch",
                        "context": {
                            "intendedTotalCreditTransactionsCount": "10000",
                            "totalCreditTransactionsCount": "2"
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
]);

export { BatchStatus, BatchTemplateStatus, BatchTemplatesHttpService, BatchTemplatesHttpServiceCreateBatchOrderFromTemplateMocksProvider, BatchTemplatesHttpServiceDeleteBatchTemplateByIdMocksProvider, BatchTemplatesHttpServiceDeleteBatchTemplatePaymentByIdMocksProvider, BatchTemplatesHttpServiceGetBatchTemplatePaymentsByIdMocksProvider, BatchTemplatesHttpServiceGetBatchTemplatesMocksProvider, BatchTemplatesHttpServiceMocksProvider, BatchTemplatesHttpServicePostBatchTemplatePaymentsMocksProvider, BatchTemplatesHttpServicePostBatchTemplatesFromAttributesMocksProvider, BatchTemplatesHttpServicePostBatchTemplatesMocksProvider, BatchTemplatesHttpServicePutBatchTemplatePaymentByIdMocksProvider, BatchTemplatesHttpServiceUpdateBatchTemplateByIdMocksProvider, BatchTemplatesHttpServiceUpdateBatchTemplateStatusByIdMocksProvider, BatchTemplatesHttpServiceValidateBatchTemplateMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, CreditDebitIndicator, CreditDebitMixedIndicator, PAYMENT_BATCH_TEMPLATE_BASE_PATH, PaymentBatchTemplateApiModule, PaymentBatchTemplateConfiguration, SchemeNames };
//# sourceMappingURL=backbase-payment-batch-template-http-ang.js.map
